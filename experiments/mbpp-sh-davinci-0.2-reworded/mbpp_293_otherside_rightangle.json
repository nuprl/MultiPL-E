{
  "name": "mbpp_293_otherside_rightangle",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the third side of a right angled triangle.\n#\n# $1 is an integer\n# $2 is an integer\notherside_rightangle() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    otherside_rightangle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\" \"8\") = \"10.63014581273465\" ]]\n    [[ $(candidate \"3\" \"4\") = \"5\" ]]\n    [[ $(candidate \"7\" \"15\") = \"16.55294535724685\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo $(($1 * $1 + $2 * $2))",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: Both arguments must be positive integers.\"\n    fi",
    "    local a=$1\n    local b=$2\n    local c=$((a*a+b*b))\n    echo $c",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    local side1=$1\n    local side2=$2\n    local side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n    echo $side3",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if ! [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $1 is not an integer\"\n    return 1\n  fi\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $2 is not an integer\"\n    return 1\n  fi\n  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n    echo $(echo \"scale=2; sqrt($1^2 + $2^2)\" | bc)\n  else\n    echo \"Please enter positive integers\"\n  fi",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <side1> <side2>\"\n    return 1\n  fi\n  if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n    echo \"Both sides must be greater than 0\"\n    return 1\n  fi\n  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    local hypotenuse=$1\n    local adjacent=$2\n    local opposite=$((hypotenuse**2 - adjacent**2))\n    echo \"$opposite\"",
    "    if [ $# -ne 2 ]\n    then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if [[ ! $1 =~ ^[0-9]+$ ]]\n    then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if [[ ! $2 =~ ^[0-9]+$ ]]\n    then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <side1> <side2>\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Side 1 and Side 2 cannot be the same\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Side 1 must be greater than Side 2\"\n        return 1\n    fi\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n        echo \"Side 1 and Side 2 must be greater than 0\"\n        return 1\n    fi\n    if [ $1 -gt 100 ] || [ $2 -gt 100 ]; then\n        echo \"Side 1 and Side 2 must be less than 100\"\n        return 1\n    fi\n    if [ $1 -eq 1 ] && [ $2 -eq 1 ]; then\n        echo \"Side 1 and Side 2 cannot both be 1\"\n        return 1\n    fi\n    if [ $1 -eq 1 ] && [ $2 -eq 2 ]; then\n        echo \"Side 1 and Side 2 cannot both be 1 and 2\"\n        return 1\n    fi\n    if [ $1 -eq 2 ] && [ $2 -eq 1 ]; then\n        echo \"Side 1 and Side 2 cannot both be 2 and 1\"\n        return 1\n    fi\n    if [ $1 -eq 2 ] && [ $2 -eq 2 ]; then\n        echo \"Side 1 and Side 2 cannot both be 2\"\n        return 1\n    fi\n    if [ $1 -eq 3 ] && [ $2 -eq 4 ]; then\n        echo \"Side 1 and Side 2 cannot both be 3 and 4\"\n        return 1\n    fi\n    if [ $1 -eq 4 ] && [ $2 -eq 3 ]; then\n        echo \"Side 1 and Side 2 cannot both be 4 and 3\"\n        return 1\n    fi\n    if [ $1 -eq 5 ] && [ $2 -eq 12 ]; then\n        echo \"Side 1 and Side 2 cannot both be 5 and 12\"\n        return 1\n    fi\n    if [ $1 -eq 12 ] && [ $2 -eq 5 ]; then\n        echo \"Side 1 and Side 2 cannot both be 12 and 5\"\n        return 1\n   ",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\n        return 1\n    fi\n    if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1*$1 + $2*$2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "  local side1=$1\n  local side2=$2\n  local side3=$(echo \"sqrt($side1*$side1 + $side2*$side2)\" | bc)\n  echo $side3",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: Please enter positive integers.\"\n    fi",
    "    # Check if the arguments are integers\n    if [[ \"$1\" =~ ^[0-9]+$ && \"$2\" =~ ^[0-9]+$ ]]; then\n        # Check if the arguments are greater than 0\n        if [ \"$1\" -gt 0 ] && [ \"$2\" -gt 0 ]; then\n            # Calculate the hypotenuse\n            hypotenuse=$(echo \"sqrt($1^2 + $2^2)\" | bc -l)\n            # Check if the hypotenuse is an integer\n            if [[ \"$hypotenuse\" =~ ^[0-9]+$ ]]; then\n                # Print the hypotenuse\n                echo \"$hypotenuse\"\n            else\n                # Print an error message\n                echo \"Error: The hypotenuse is not an integer.\"\n            fi\n        else\n            # Print an error message\n            echo \"Error: The arguments must be greater than 0.\"\n        fi\n    else\n        # Print an error message\n        echo \"Error: The arguments must be integers.\"\n    fi",
    "    # check if the input is an integer\n    if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]]; then\n        # check if the input is greater than 0\n        if [[ $1 -gt 0 ]] && [[ $2 -gt 0 ]]; then\n            # check if the input is a right angled triangle\n            if [[ $1 -eq $2 ]]; then\n                echo \"Not a right angled triangle\"\n            else\n                # calculate the third side\n                thirdside=$(echo \"sqrt($1^2 + $2^2)\" | bc -l)\n                echo \"Third side of the right angled triangle is $thirdside\"\n            fi\n        else\n            echo \"Please enter a positive integer\"\n        fi\n    else\n        echo \"Please enter an integer\"\n    fi",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]\n    then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: Both sides must be greater than 0\"\n    fi",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [[ $1 -eq 0 || $2 -eq 0 ]]; then\n        echo \"0\"\n    else\n        echo \"$(( $1**2 + $2**2 ))\"\n    fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]] || ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: Arguments must be integers\"\n        return 1\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Error: Arguments must be greater than 0\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [[ $1 -eq 0 || $2 -eq 0 ]]; then\n        echo \"0\"\n        return\n    fi\n    echo \"$(( $1 * $1 + $2 * $2 ))\"",
    "  local a=$1\n  local b=$2\n  echo $((a*a + b*b)) | bc -l | awk '{printf(\"%d\\n\", sqrt($1))}'",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    echo \"scale=2; sqrt(($1 * $1) + ($2 * $2))\" | bc",
    "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n        echo \"scale=2;sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: Please enter two positive integers.\"\n    fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -gt $2 ]; then\n        a=$1\n        b=$2\n    else\n        a=$2\n        b=$1\n    fi\n    c=$(echo \"scale=0; sqrt($a^2 - $b^2)\" | bc)\n    echo $c",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n    echo \"Error: Arguments must be integers\"\n    return 1\n  fi\n  if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n    echo \"Error: Arguments must be greater than zero\"\n    return 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Error: Arguments must be different\"\n    return 1\n  fi\n  if [ $1 -lt $2 ]; then\n    a=$1\n    b=$2\n  else\n    a=$2\n    b=$1\n  fi\n  c=$(echo \"scale=0; sqrt($a^2 + $b^2)\" | bc)\n  echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 are equal\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        a=$1\n        b=$2\n    else\n        a=$2\n        b=$1\n    fi\n    c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo \"The third side is $c\"",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if ! [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $1 is not an integer\"\n    return 1\n  fi\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $2 is not an integer\"\n    return 1\n  fi\n  if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n    echo \"Error: $1 or $2 is 0\"\n    return 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Error: $1 and $2 are equal\"\n    return 1\n  fi\n  if [ $1 -lt $2 ]; then\n    a=$1\n    b=$2\n  else\n    a=$2\n    b=$1\n  fi\n  c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n  echo \"The third side of a right angled triangle with sides $a and $b is $c\"",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"The two sides cannot be equal.\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"The first side must be greater than the second.\"\n        return 1\n    fi\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n        echo \"The sides must be greater than zero.\"\n        return 1\n    fi\n    if [ $1 -gt 100 ] || [ $2 -gt 100 ]; then\n        echo \"The sides must be less than 100.\"\n        return 1\n    fi\n    if [ $1 -eq 1 ] && [ $2 -eq 1 ]; then\n        echo \"The third side is 1.\"\n        return 0\n    fi\n    if [ $1 -eq 1 ] && [ $2 -eq 2 ]; then\n        echo \"The third side is 1.\"\n        return 0\n    fi\n    if [ $1 -eq 2 ] && [ $2 -eq 1 ]; then\n        echo \"The third side is 1.\"\n        return 0\n    fi\n    if [ $1 -eq 2 ] && [ $2 -eq 2 ]; then\n        echo \"The third side is 2.\"\n        return 0\n    fi\n    if [ $1 -eq 2 ] && [ $2 -eq 3 ]; then\n        echo \"The third side is 2.\"\n        return 0\n    fi\n    if [ $1 -eq 3 ] && [ $2 -eq 2 ]; then\n        echo \"The third side is 2.\"\n        return 0\n    fi\n    if [ $1 -eq 3 ] && [ $2 -eq 3 ]; then\n        echo \"The third side is 4.\"\n        return 0\n    fi\n    if [ $1 -eq 3 ] && [ $2 -eq 4 ]; then\n        echo \"The third side is 5.\"\n        return 0\n    fi\n    if [ $1 -eq 4 ] && [ $2 -eq 3 ]; then\n        echo \"The third side is 5.\"\n        return 0\n    fi\n    if [ $1 -eq 4 ] && [ $2 -eq 4",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\n        return 1\n    fi\n\n    if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer\"\n        return 1\n    fi\n\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"0\"\n    else\n        echo \"$(( $1 * $1 + $2 * $2 ))\"\n    fi",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2;sqrt($a^2+$b^2)\" | bc)\n    echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer.\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer.\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 are equal\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Error: $1 is less than $2\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    local a=$1\n    local b=$2\n    local c\n    c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo $c",
    "    if [[ $1 -lt 1 || $2 -lt 1 ]]; then\n        echo \"Error: sides must be positive integers\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc -l",
    "    if [[ $1 -lt 1 || $2 -lt 1 ]]; then\n        echo \"Error: Invalid input\"\n        exit 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n\n  if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n\n  local a=$1\n  local b=$2\n  local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n  echo $c",
    "    echo \"scale=2; sqrt(($1^2 + $2^2))\" | bc",
    "  if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n    echo \"0\"\n  else\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n  fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]] || ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    # Pythagorean theorem\n    # a^2 + b^2 = c^2\n    # a = $1\n    # b = $2\n    # c = ?\n    # c^2 = a^2 + b^2\n    # c = sqrt(a^2 + b^2)\n    a=$1\n    b=$2\n    c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo \"The third side of a right angled triangle with sides $1 and $2 is $c\"",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        echo \"The two sides must be different.\"\n        return 1\n    fi\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        echo \"The two sides must be greater than zero.\"\n        return 1\n    fi\n    if [ $1 -gt $2 ]; then\n        a=$1\n        b=$2\n    else\n        a=$2\n        b=$1\n    fi\n    c=$(echo \"scale=2; sqrt(($a*$a)+($b*$b))\" | bc)\n    echo \"The third side is $c\"",
    "  local a=$1\n  local b=$2\n  local c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n  echo $c",
    "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: one or both of the numbers is not positive.\"\n    fi",
    "    if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: Both arguments must be greater than zero.\"\n    fi",
    "  if [[ $1 -lt 1 || $2 -lt 1 ]]; then\n    echo \"Error: one or both of the arguments is less than 1\"\n    exit 1\n  fi\n  if [[ $1 -eq $2 ]]; then\n    echo \"Error: the two arguments are equal\"\n    exit 1\n  fi\n  if [[ $1 -gt $2 ]]; then\n    local a=$1\n    local b=$2\n  else\n    local a=$2\n    local b=$1\n  fi\n  local c=$((a*a+b*b))\n  echo \"scale=2;sqrt($c)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    local side1=$1\n    local side2=$2\n    local otherside=$(echo \"scale=2; sqrt($side1^2 + $side2^2)\" | bc)\n    echo $otherside",
    "    local hypotenuse=$1\n    local adjacent=$2\n    local opposite=$((hypotenuse**2 - adjacent**2))\n    echo $opposite",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a*$a + $b*$b)\" | bc)\n    echo $c",
    "    if [[ $1 -eq 0 ]] || [[ $2 -eq 0 ]]; then\n        echo \"0\"\n    else\n        echo \"$(( $1**2 + $2**2 ))\"\n    fi",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a*$a + $b*$b)\" | bc)\n    echo $c",
    "    local side1=$1\n    local side2=$2\n    local side3=$(bc <<< \"sqrt($side1^2 + $side2^2)\")\n    echo $side3",
    "    echo \"scale=2; sqrt($1*$1 + $2*$2)\" | bc",
    "    local side1=$1\n    local side2=$2\n    local side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n    echo $side3",
    "  echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <side1> <side2>\"\n    return 1\n  fi\n  echo \"scale=2;sqrt($1^2 + $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    exit 1\n  fi\n  if ! [[ $1 =~ ^[0-9]+$ ]] || ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    exit 1\n  fi\n  if [ $1 -lt $2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    exit 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    exit 1\n  fi\n  echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    local a=$1\n    local b=$2\n    local c=0\n    c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: Both arguments must be positive integers.\"\n    fi",
    "  if [ $1 -gt $2 ]; then\n    echo $(( $1 * $1 - $2 * $2 ))\n  else\n    echo $(( $2 * $2 - $1 * $1 ))\n  fi",
    "  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "\tlocal side1=$1\n\tlocal side2=$2\n\tlocal otherside=$(( $side1 * $side1 + $side2 * $side2 ))\n\techo \"sqrt($otherside)\" | bc -l",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo $c",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"Argument 1 must be an integer\"\n    return 1\n  fi\n  if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n    echo \"Argument 2 must be an integer\"\n    return 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Arguments must be different\"\n    return 1\n  fi\n  echo \"scale=2; sqrt(($1^2) + ($2^2))\" | bc",
    "\tlocal a=$1\n\tlocal b=$2\n\tlocal c=$((a*a+b*b))\n\techo $c",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Please enter positive integers\"\n    fi",
    "    if [ $# -ne 2 ]\n    then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $1 -eq $2 ]\n    then\n        echo \"The two sides cannot be the same length\"\n        return 1\n    fi\n\n    if [ $1 -lt $2 ]\n    then\n        echo \"The first side must be longer than the second side\"\n        return 1\n    fi\n\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]\n    then\n        echo \"The sides must be positive integers\"\n        return 1\n    fi\n\n    if [ $1 -gt 100 ] || [ $2 -gt 100 ]\n    then\n        echo \"The sides must be less than 100\"\n        return 1\n    fi\n\n    if [ $1 -eq 1 ] && [ $2 -eq 1 ]\n    then\n        echo \"The third side is 1\"\n        return 0\n    fi\n\n    if [ $1 -eq 1 ] || [ $2 -eq 1 ]\n    then\n        echo \"The third side is 2\"\n        return 0\n    fi\n\n    if [ $1 -eq 2 ] && [ $2 -eq 2 ]\n    then\n        echo \"The third side is 3\"\n        return 0\n    fi\n\n    if [ $1 -eq 2 ] || [ $2 -eq 2 ]\n    then\n        echo \"The third side is 4\"\n        return 0\n    fi\n\n    if [ $1 -eq 3 ] && [ $2 -eq 3 ]\n    then\n        echo \"The third side is 5\"\n        return 0\n    fi\n\n    if [ $1 -eq 3 ] || [ $2 -eq 3 ]\n    then\n        echo \"The third side is 6\"\n        return 0\n    fi\n\n    if [ $1 -eq 4 ] && [ $2 -eq 4 ]\n    then\n        echo \"The third side is 8\"\n        return 0\n    fi\n\n    if [ $1 -eq 4 ] || [ $2 -eq 4 ]\n    then\n        echo \"The third side is 9\"\n        return 0\n    fi\n\n    if [ $1 -eq 5 ] && [ $2 -eq 5 ]\n    then\n        echo \"",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 are equal\"\n        return 1\n    fi\n\n    if [ $1 -lt $2 ]; then\n        a=$1\n        b=$2\n    else\n        a=$2\n        b=$1\n    fi\n\n    c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo \"$c\"",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Please enter positive integers\"\n    fi",
    "    local side1=$1\n    local side2=$2\n    local otherside=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n    echo $otherside",
    "  if [[ $1 -eq 0 || $2 -eq 0 ]]; then\n    echo \"0\"\n  else\n    echo \"$(($1**2 + $2**2))\"\n  fi",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo $c",
    "    if [[ $1 -eq 0 || $2 -eq 0 ]]; then\n        echo \"Error: One of the sides is zero.\"\n        return 1\n    fi\n    local hypotenuse=$(echo \"sqrt($1^2 + $2^2)\" | bc -l)\n    echo \"$hypotenuse\"",
    "    local hypotenuse=$1\n    local adjacent=$2\n    local opposite=$((hypotenuse**2 - adjacent**2))\n    echo $opposite",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer.\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer.\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Arguments must be different.\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        a=$2\n        b=$1\n    else\n        a=$1\n        b=$2\n    fi\n    c=$((a*a - b*b))\n    c=$(echo \"sqrt($c)\" | bc -l)\n    echo $c",
    "  local a=$1\n  local b=$2\n  local c=$(echo \"scale=2;sqrt($a^2 + $b^2)\" | bc)\n  echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer.\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer.\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if ! [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"Argument 1 must be an integer\"\n    return 1\n  fi\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"Argument 2 must be an integer\"\n    return 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Arguments must be different\"\n    return 1\n  fi\n  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $1 -eq $2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    # Pythagoras' theorem\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  local a=$1\n  local b=$2\n  local c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n  echo $c",
    "    if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n        echo $(bc <<< \"sqrt($1^2 + $2^2)\")\n    else\n        echo \"Error: $1 and $2 must be positive integers\"\n    fi",
    "  local side1=$1\n  local side2=$2\n  local side3=$(( $side1 ** 2 + $side2 ** 2 ))\n  local side3=$(echo \"sqrt($side3)\" | bc)\n  echo $side3",
    "    local side1=$1\n    local side2=$2\n    local side3=$(bc <<< \"scale=2; sqrt($side1^2 + $side2^2)\")\n    echo $side3",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 are the same length\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Error: $1 is shorter than $2\"\n        return 1\n    fi\n    if [ $1 -eq 0 -o $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Error: $1 is shorter than $2\"\n        return 1\n    fi\n    if [ $1 -eq 0 -o $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 are the same length\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Error: $1 is shorter than $2\"\n        return 1\n    fi\n    if [ $1 -eq 0 -o $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Error: $1 is shorter than $2\"\n        return 1\n    fi\n    if [ $1 -eq 0 -o $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 are the same length\"\n        return 1\n    fi\n    if [ $1 -lt $",
    "    echo $(( $1 * $1 + $2 * $2 ))",
    "    # $1 is the first side\n    # $2 is the second side\n    # $3 is the third side\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $3 is the other side of the right angled triangle\n    #\n    # $1 and $2 are the sides of the right angled triangle\n    # $",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo $c",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"The two sides are equal, this is not a right angled triangle\"\n    return 1\n  fi\n  if [ $1 -lt $2 ]; then\n    echo \"The first side must be greater than the second side\"\n    return 1\n  fi\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 1 ] || [ $2 -eq 1 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 2 ] || [ $2 -eq 2 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 3 ] || [ $2 -eq 3 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 4 ] || [ $2 -eq 4 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 5 ] || [ $2 -eq 5 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 6 ] || [ $2 -eq 6 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 7 ] || [ $2 -eq 7 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 8 ] || [ $2 -eq 8 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n  if [ $1 -eq 9 ] || [ $2 -eq 9 ]; then\n    echo \"The sides must be positive integers\"\n    return 1\n  fi\n ",
    "  local side1=$1\n  local side2=$2\n  local hypotenuse=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n  echo $hypotenuse",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 cannot be equal\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Error: $1 must be greater than $2\"\n        return 1\n    fi\n    if [ $1 -lt 1 ]; then\n        echo \"Error: $1 must be greater than 0\"\n        return 1\n    fi\n    if [ $2 -lt 1 ]; then\n        echo \"Error: $2 must be greater than 0\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    echo \"scale=2; sqrt(($1*$1)-($2*$2))\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n        echo $(echo \"scale=2; sqrt($1^2 + $2^2)\" | bc)\n    else\n        echo \"Error: Both arguments must be positive integers.\"\n    fi",
    "    if [ $1 -lt $2 ]; then\n        echo $(( $2 - $1 ))\n    else\n        echo $(( $1 - $2 ))\n    fi",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n        echo \"Error: Both arguments must be positive integers.\"\n        return 1\n    fi\n\n    if [ $1 -eq $2 ]; then\n        echo \"Error: Both arguments must be different.\"\n        return 1\n    fi\n\n    local a=$1\n    local b=$2\n    local c=$(bc <<< \"sqrt($a^2 + $b^2)\")\n    echo \"The third side of a right angled triangle with sides $a and $b is $c.\"",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [[ $1 -eq 0 || $2 -eq 0 ]]; then\n        echo \"0\"\n    else\n        echo \"$(echo \"sqrt($1^2 + $2^2)\" | bc -l)\"\n    fi",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    exit 1\n  fi\n\n  if ! [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $1 is not an integer\"\n    exit 1\n  fi\n\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $2 is not an integer\"\n    exit 1\n  fi\n\n  if [ $1 -eq $2 ]; then\n    echo \"Error: $1 and $2 are the same\"\n    exit 1\n  fi\n\n  if [ $1 -lt $2 ]; then\n    echo \"Error: $1 is less than $2\"\n    exit 1\n  fi\n\n  if [ $1 -eq 0 ]; then\n    echo \"Error: $1 is zero\"\n    exit 1\n  fi\n\n  if [ $2 -eq 0 ]; then\n    echo \"Error: $2 is zero\"\n    exit 1\n  fi\n\n  if [ $1 -eq 1 ]; then\n    echo \"Error: $1 is one\"\n    exit 1\n  fi\n\n  if [ $2 -eq 1 ]; then\n    echo \"Error: $2 is one\"\n    exit 1\n  fi\n\n  if [ $1 -eq 2 ]; then\n    echo \"Error: $1 is two\"\n    exit 1\n  fi\n\n  if [ $2 -eq 2 ]; then\n    echo \"Error: $2 is two\"\n    exit 1\n  fi\n\n  if [ $1 -eq 3 ]; then\n    echo \"Error: $1 is three\"\n    exit 1\n  fi\n\n  if [ $2 -eq 3 ]; then\n    echo \"Error: $2 is three\"\n    exit 1\n  fi\n\n  if [ $1 -eq 4 ]; then\n    echo \"Error: $1 is four\"\n    exit 1\n  fi\n\n  if [ $2 -eq 4 ]; then\n    echo \"Error: $2 is four\"\n    exit 1\n  fi\n\n  if [ $1 -eq 5 ]; then\n    echo \"Error: $1 is five\"\n    exit 1\n  fi\n\n  if [ $2 -eq 5 ]; then\n    echo \"Error",
    "    echo \"scale=2; sqrt($1*$1 + $2*$2)\" | bc",
    "    echo \"scale=2;sqrt($1^2 - $2^2)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\n        return 1\n    fi\n\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer\"\n        return 1\n    fi\n\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Arguments must be greater than 0\"\n        return 1\n    fi\n\n    if [ $1 -eq $2 ]; then\n        echo \"Arguments must be different\"\n        return 1\n    fi\n\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "\tlocal a=$1\n\tlocal b=$2\n\tlocal c=$((a*a + b*b))\n\techo $c",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    local side1=$1\n    local side2=$2\n    local otherside=$(echo \"scale=2; sqrt(($side1 * $side1) + ($side2 * $side2))\" | bc)\n    echo \"$otherside\"",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    local side1=$1\n    local side2=$2\n    local otherside=$(echo \"sqrt($side1^2 + $side2^2)\" | bc -l)\n    echo $otherside",
    "    local side1=$1\n    local side2=$2\n    local otherside=$(echo \"sqrt($side1^2 + $side2^2)\" | bc -l)\n    echo $otherside",
    "\tlocal side1=$1\n\tlocal side2=$2\n\tlocal side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n\techo $side3",
    "  if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n  else\n    echo \"Error: $1 and $2 must be positive integers\"\n  fi",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=4; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer.\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer.\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $1 -gt $2 ]; then\n    echo \"scale=2;sqrt($1^2 - $2^2)\" | bc\n  else\n    echo \"scale=2;sqrt($2^2 - $1^2)\" | bc\n  fi",
    "\tif [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n\t\techo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n\telse\n\t\techo \"One of the sides is not a positive integer.\"\n\tfi",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [[ $1 -eq 0 || $2 -eq 0 ]]; then\n        echo \"0\"\n    else\n        echo \"$(( $1 * $1 + $2 * $2 ))\"\n    fi",
    "    local a=$1\n    local b=$2\n    echo \"scale=2; sqrt($a^2 + $b^2)\" | bc",
    "    echo \"scale=2; sqrt(($1^2)+($2^2))\" | bc",
    "    if [[ $# -ne 2 ]]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo \"scale=2;sqrt($1^2 - $2^2)\" | bc",
    "    local hypotenuse=$1\n    local adjacent=$2\n    local thirdside=$((hypotenuse**2 - adjacent**2))\n    echo $thirdside",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Arguments must be different\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Argument 1 must be greater than argument 2\"\n        return 1\n    fi\n    echo \"$(($1 * $1 - $2 * $2))\"",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    if [[ $1 -eq 0 || $2 -eq 0 ]]; then\n        echo \"0\"\n    else\n        echo \"$(($1**2 + $2**2))\"\n    fi",
    "    local a=$1\n    local b=$2\n    echo $((a*a+b*b))",
    "    if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n        echo \"scale=2;sqrt($1^2+$2^2)\" | bc\n    else\n        echo \"Error: Inputs must be greater than 0\"\n    fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n        echo \"Both arguments must be positive integers\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Both arguments must be different\"\n        return 1\n    fi\n    if [ $1 -gt $2 ]; then\n        let \"a = $1\"\n        let \"b = $2\"\n    else\n        let \"a = $2\"\n        let \"b = $1\"\n    fi\n    let \"c = $a * $a + $b * $b\"\n    echo \"scale=2; sqrt($c)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 2\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 3\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n\n  if ! [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $1 is not an integer\"\n    return 1\n  fi\n\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $2 is not an integer\"\n    return 1\n  fi\n\n  if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n    echo \"Error: $1 or $2 is zero\"\n    return 1\n  fi\n\n  if [ $1 -eq $2 ]; then\n    echo \"Error: $1 and $2 are equal\"\n    return 1\n  fi\n\n  if [ $1 -lt $2 ]; then\n    local temp=$1\n    local a=$2\n    local b=$temp\n  else\n    local a=$1\n    local b=$2\n  fi\n\n  local c=$(echo \"sqrt($a^2 - $b^2)\" | bc)\n  echo $c",
    "\tlocal hypotenuse=$1\n\tlocal adjacent=$2\n\tlocal opposite=$(echo \"scale=2; sqrt($hypotenuse^2 - $adjacent^2)\" | bc)\n\techo \"$opposite\"",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\n        return 1\n    fi\n    if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ]; then\n        echo \"Error: Both arguments must be positive integers.\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: Both arguments must be different.\"\n        return 1\n    fi\n    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo \"$c\"",
    "  if [[ $1 -eq 0 || $2 -eq 0 ]]; then\n    echo \"0\"\n  else\n    echo \"$(echo \"sqrt($1^2 + $2^2)\" | bc -l)\"\n  fi",
    "    if [ $1 -gt $2 ]; then\n        echo $(( $1 * $1 - $2 * $2 ))\n    else\n        echo $(( $2 * $2 - $1 * $1 ))\n    fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 are equal\"\n        return 1\n    fi\n    local a=$1\n    local b=$2\n    local c=$((a*a+b*b))\n    echo \"sqrt($c)\" | bc -l",
    "    local side1=$1\n    local side2=$2\n    local side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n    echo $side3",
    "    local side1=$1\n    local side2=$2\n    local otherside=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n    echo $otherside",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo $c",
    "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n        echo \"scale=2;sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: Please enter positive integers only\"\n    fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $1 and $2 are the same\"\n        return 1\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Error: $1 or $2 is zero\"\n        return 1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n        echo \"Error: $1 or $2 is negative\"\n        return 1\n    fi\n    if [ $1 -gt $2 ]; then\n        a=$1\n        b=$2\n    else\n        a=$2\n        b=$1\n    fi\n    c=$((a**2 - b**2))\n    c=$(echo \"sqrt($c)\" | bc -l)\n    echo $c",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    local a=$1\n    local b=$2\n    local c=$((a*a+b*b))\n    echo $c",
    "    local a=$1\n    local b=$2\n    local c=$((a*a+b*b))\n    echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]] || ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $0 <integer> <integer>\"\n        return 2\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: $0 <integer> <integer>\"\n        return 3\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Error: $0 <integer> <integer>\"\n        return 4\n    fi\n    if [ $1 -lt $2 ]; then\n        a=$1\n        b=$2\n    else\n        a=$2\n        b=$1\n    fi\n    c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    local side1=$1\n    local side2=$2\n    local side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc -l)\n    echo $side3",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]] || ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: Arguments must be integers\"\n        return 1\n    fi\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n        echo \"Error: Arguments must be greater than 0\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Error: Arguments must be different\"\n        return 1\n    fi\n    if [ $1 -gt $2 ]; then\n        a=$1\n        b=$2\n    else\n        a=$2\n        b=$1\n    fi\n    c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n    echo $c",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n\n    local hypotenuse=$(echo \"sqrt($1^2 + $2^2)\" | bc)\n    echo $hypotenuse",
    "    local side1=$1\n    local side2=$2\n    local otherside=$((side1*side1+side2*side2))\n    echo \"sqrt($otherside)\" | bc -l",
    "    local a=$1\n    local b=$2\n    local c=$((a*a + b*b))\n    echo $c",
    "  local a=$1\n  local b=$2\n  local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n  echo $c",
    "    local side1=$1\n    local side2=$2\n    local otherside=$(echo \"sqrt($side1^2 + $side2^2)\" | bc -l)\n    echo $otherside",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    echo \"scale=2;sqrt($1^2 - $2^2)\" | bc",
    "    if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: sides must be greater than 0\"\n    fi",
    "  if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n  else\n    echo \"Error: Please provide two positive integers\"\n  fi",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    local side1=$1\n    local side2=$2\n    local side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n    echo $side3",
    "  local a=$1\n  local b=$2\n  local c=$((a*a + b*b))\n  echo $c",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <side1> <side2>\"\n    return 1\n  fi\n  if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n    echo \"Side lengths must be greater than 0\"\n    return 1\n  fi\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n    echo \"Side lengths must be positive\"\n    return 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Side lengths must be different\"\n    return 1\n  fi\n  if [ $1 -gt $2 ]; then\n    a=$1\n    b=$2\n  else\n    a=$2\n    b=$1\n  fi\n  c=$(echo \"sqrt($a^2 - $b^2)\" | bc)\n  echo $c",
    "    if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n        echo $(bc <<< \"sqrt($1^2 + $2^2)\")\n    else\n        echo \"Error: both arguments must be positive integers.\"\n    fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer\"\n        return 1\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo \"Arguments must be greater than 0\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Arguments must be different\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if ! [[ $1 =~ ^[0-9]+$ ]] || ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if [ $1 -lt $2 ]; then\n    a=$1\n    b=$2\n  else\n    a=$2\n    b=$1\n  fi\n  c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n  echo $c",
    "  if [ $1 -eq $2 ]; then\n    echo \"Error: $1 and $2 are equal\"\n    return 1\n  fi\n  if [ $1 -lt $2 ]; then\n    echo \"Error: $1 is less than $2\"\n    return 1\n  fi\n  if [ $1 -lt 0 ]; then\n    echo \"Error: $1 is less than 0\"\n    return 1\n  fi\n  if [ $2 -lt 0 ]; then\n    echo \"Error: $2 is less than 0\"\n    return 1\n  fi\n  if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n    echo \"The third side is: $(( $1**2 - $2**2 ))\"\n    return 0\n  fi",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an integer\"\n        return 1\n    fi\n    local a=$1\n    local b=$2\n    local c=$(echo \"scale=0; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    local side1=$1\n    local side2=$2\n    local side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n    echo $side3",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"The two sides cannot be equal\"\n    return 1\n  fi\n  if [ $1 -lt $2 ]; then\n    echo \"The first side must be greater than the second side\"\n    return 1\n  fi\n  if [ $1 -lt 1 ]; then\n    echo \"The first side must be greater than zero\"\n    return 1\n  fi\n  if [ $2 -lt 1 ]; then\n    echo \"The second side must be greater than zero\"\n    return 1\n  fi\n  if ! [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"The first side must be an integer\"\n    return 1\n  fi\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"The second side must be an integer\"\n    return 1\n  fi\n  echo \"scale=2;sqrt($1^2 - $2^2)\" | bc",
    "\tlocal a=$1\n\tlocal b=$2\n\tlocal c=$(echo \"sqrt($a^2 + $b^2)\" | bc -l)\n\techo $c",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo \"$c\"",
    "  echo \"scale=2;sqrt($1^2 - $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"Argument 1 must be an integer.\"\n    return 1\n  fi\n\n  if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n    echo \"Argument 2 must be an integer.\"\n    return 1\n  fi\n\n  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Arguments must be different\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        a=$1\n        b=$2\n    else\n        a=$2\n        b=$1\n    fi\n    c=$(echo \"sqrt($a^2 + $b^2)\" | bc)\n    echo \"The third side of a right angled triangle with sides $a and $b is $c\"",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "  echo $(echo \"scale=2; sqrt($1^2 + $2^2)\" | bc)",
    "    local side1=$1\n    local side2=$2\n    local side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc -l)\n    echo $side3",
    "    local side1=$1\n    local side2=$2\n    echo $((side1 * side1 + side2 * side2))",
    "    local a=$1\n    local b=$2\n    echo $((a*a + b*b))"
  ]
}