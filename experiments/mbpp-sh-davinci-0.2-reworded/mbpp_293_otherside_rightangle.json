{
  "name": "mbpp_293_otherside_rightangle",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the third side of a right angled triangle.\n#\n# $1 is an integer\n# $2 is an integer\notherside_rightangle() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    otherside_rightangle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\" \"8\") = \"10.63014581273465\" ]]\n    [[ $(candidate \"3\" \"4\") = \"5\" ]]\n    [[ $(candidate \"7\" \"15\") = \"16.55294535724685\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo $(($1 * $1 + $2 * $2))",
    "    local a=$1\n    local b=$2\n    local c=$(echo \"scale=2; sqrt($a^2 + $b^2)\" | bc)\n    echo $c",
    "    if [[ $1 -gt 0 && $2 -gt 0 ]]; then\n        echo \"scale=2; sqrt($1^2 + $2^2)\" | bc\n    else\n        echo \"Error: Both arguments must be positive integers.\"\n    fi",
    "    local a=$1\n    local b=$2\n    local c=$((a*a+b*b))\n    echo $c",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    local side1=$1\n    local side2=$2\n    local side3=$(echo \"sqrt($side1^2 + $side2^2)\" | bc)\n    echo $side3",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  if ! [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $1 is not an integer\"\n    return 1\n  fi\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $2 is not an integer\"\n    return 1\n  fi\n  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "  if [ $1 -gt 0 ] && [ $2 -gt 0 ]; then\n    echo $(echo \"scale=2; sqrt($1^2 + $2^2)\" | bc)\n  else\n    echo \"Please enter positive integers\"\n  fi",
    "  if [ $# -ne 2 ]; then\n    echo \"Usage: $0 <side1> <side2>\"\n    return 1\n  fi\n  if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n    echo \"Both sides must be greater than 0\"\n    return 1\n  fi\n  echo \"scale=2; sqrt($1^2 + $2^2)\" | bc",
    "    local hypotenuse=$1\n    local adjacent=$2\n    local opposite=$((hypotenuse**2 - adjacent**2))\n    echo \"$opposite\"",
    "    if [ $# -ne 2 ]\n    then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if [[ ! $1 =~ ^[0-9]+$ ]]\n    then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    if [[ ! $2 =~ ^[0-9]+$ ]]\n    then\n        echo \"Usage: otherside_rightangle <integer> <integer>\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <side1> <side2>\"\n        return 1\n    fi\n    if [ $1 -eq $2 ]; then\n        echo \"Side 1 and Side 2 cannot be the same\"\n        return 1\n    fi\n    if [ $1 -lt $2 ]; then\n        echo \"Side 1 must be greater than Side 2\"\n        return 1\n    fi\n    if [ $1 -lt 1 ] || [ $2 -lt 1 ]; then\n        echo \"Side 1 and Side 2 must be greater than 0\"\n        return 1\n    fi\n    if [ $1 -gt 100 ] || [ $2 -gt 100 ]; then\n        echo \"Side 1 and Side 2 must be less than 100\"\n        return 1\n    fi\n    if [ $1 -eq 1 ] && [ $2 -eq 1 ]; then\n        echo \"Side 1 and Side 2 cannot both be 1\"\n        return 1\n    fi\n    if [ $1 -eq 1 ] && [ $2 -eq 2 ]; then\n        echo \"Side 1 and Side 2 cannot both be 1 and 2\"\n        return 1\n    fi\n    if [ $1 -eq 2 ] && [ $2 -eq 1 ]; then\n        echo \"Side 1 and Side 2 cannot both be 2 and 1\"\n        return 1\n    fi\n    if [ $1 -eq 2 ] && [ $2 -eq 2 ]; then\n        echo \"Side 1 and Side 2 cannot both be 2\"\n        return 1\n    fi\n    if [ $1 -eq 3 ] && [ $2 -eq 4 ]; then\n        echo \"Side 1 and Side 2 cannot both be 3 and 4\"\n        return 1\n    fi\n    if [ $1 -eq 4 ] && [ $2 -eq 3 ]; then\n        echo \"Side 1 and Side 2 cannot both be 4 and 3\"\n        return 1\n    fi\n    if [ $1 -eq 5 ] && [ $2 -eq 12 ]; then\n        echo \"Side 1 and Side 2 cannot both be 5 and 12\"\n        return 1\n    fi\n    if [ $1 -eq 12 ] && [ $2 -eq 5 ]; then\n        echo \"Side 1 and Side 2 cannot both be 12 and 5\"\n        return 1\n   ",
    "    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\n        return 1\n    fi\n    if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument 2 must be an integer\"\n        return 1\n    fi\n    echo \"scale=2; sqrt($1*$1 + $2*$2)\" | bc",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc",
    "  local side1=$1\n  local side2=$2\n  local side3=$(echo \"sqrt($side1*$side1 + $side2*$side2)\" | bc)\n  echo $side3",
    "    echo \"scale=2; sqrt($1^2 - $2^2)\" | bc"
  ]
}