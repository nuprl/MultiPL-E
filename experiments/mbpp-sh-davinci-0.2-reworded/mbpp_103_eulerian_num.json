{
  "name": "mbpp_103_eulerian_num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the Eulerian number a(n, m).\n#\n# $1 is an integer\n# $2 is an integer\neulerian_num() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    eulerian_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"1\") = \"4\" ]]\n    [[ $(candidate \"4\" \"1\") = \"11\" ]]\n    [[ $(candidate \"5\" \"3\") = \"26\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local sum=0\n    local factorial\n    local binomial\n    local eulerian\n\n    for ((i=0; i<=m; i++)); do\n        factorial=$(factorial $i)\n        for ((j=0; j<=i; j++)); do\n            binomial=$(binomial $i $j)\n            for ((k=0; k<=j; k++)); do\n                eulerian=$(eulerian $n $k)\n                sum=$((sum + binomial * eulerian))\n            done\n        done\n    done\n    echo $sum",
    "    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n        echo 1\n    else\n        echo $(( $(eulerian_num $(( $1 - 1 )) $2) + $(eulerian_num $1 $(( $2 - 1))) ))\n    fi",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local sum\n    local a\n\n    if (( n == 0 || m == 0 )); then\n        echo 1\n        return\n    fi\n\n    if (( n < m )); then\n        echo 0\n        return\n    fi\n\n    if (( n == m )); then\n        echo 1\n        return\n    fi\n\n    if (( n == m + 1 )); then\n        echo $(( n ))\n        return\n    fi\n\n    sum=0\n    for (( i=0; i<=m; i++ )); do\n        a=1\n        for (( j=0; j<=i; j++ )); do\n            a=$(( a * (n - j) / (j + 1) ))\n        done\n        sum=$(( sum + a ))\n    done\n\n    echo $(( sum ))",
    "  local n=$1\n  local m=$2\n  local i\n  local j\n  local k\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local aa\n  local bb\n  local cc\n  local dd\n  local ee\n  local ff\n  local gg\n  local hh\n  local ii\n  local jj\n  local kk\n  local ll\n  local mm\n  local nn\n  local oo\n  local pp\n  local qq\n  local rr\n  local ss\n  local tt\n  local uu\n  local vv\n  local ww\n  local xx\n  local yy\n  local zz\n  local aaa\n  local bbb\n  local ccc\n  local ddd\n  local eee\n  local fff\n  local ggg\n  local hhh\n  local iii\n  local jjj\n  local kkk\n  local lll\n  local mmm\n  local nnn\n  local ooo\n  local ppp\n  local qqq\n  local rrr\n  local sss\n  local ttt\n  local uuu\n  local vvv\n  local www\n  local xxx\n  local yyy\n  local zzz\n  local aaaa\n  local bbbb\n  local cccc\n  local dddd\n  local eeee\n  local ffff\n  local gggg\n  local hhhh\n  local iiii\n  local jjjj\n  local kkkk\n  local llll\n  local mmmm\n  local nnnn\n  local oooo\n  local pppp\n  local qqqq\n  local rrrr\n  local ssss\n  local tttt\n  local uuuu\n  local vvvv\n  local wwww\n  local xxxx",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local sum=0\n    local factorial\n    local binomial_coefficient\n    local eulerian_number\n\n    for ((i=0; i<=m; i++)); do\n        factorial=$(factorial $i)\n        binomial_coefficient=$(binomial_coefficient $n $i)\n        eulerian_number=$(eulerian_number $n $i)\n        sum=$((sum + factorial * binomial_coefficient * eulerian_number))\n    done\n\n    echo $sum",
    "\tlocal n=$1\n\tlocal m=$2\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal sum=0\n\n\tfor ((i=0; i<=n; i++)); do\n\t\tfor ((j=0; j<=m; j++)); do\n\t\t\tfor ((k=0; k<=i; k++)); do\n\t\t\t\tsum=$((sum + ((-1)**(i-k)) * (n-k+1)**j * (k+1)**(m-j) * (m-j+1)**k))\n\t\t\tdone\n\t\tdone\n\tdone\n\n\techo $((sum / (m+1)))",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local sum=0\n    local tmp\n\n    for ((i=0; i<=n; i++)); do\n        tmp=1\n        for ((j=1; j<=i; j++)); do\n            tmp=$((tmp*(n-j+1)/j))\n        done\n        for ((k=0; k<=m; k++)); do\n            tmp=$((tmp*(m-k+i)/(i+k+1)))\n        done\n        sum=$((sum+tmp))\n    done\n    echo $sum",
    "    local n=$1\n    local m=$2\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local num=0\n    local den=0\n    local result=0\n\n    if [ $n -lt 0 -o $m -lt 0 ]; then\n        echo \"Error: n and m must be non-negative integers\" >&2\n        return 1\n    fi\n\n    if [ $n -lt $m ]; then\n        echo 0\n        return 0\n    fi\n\n    if [ $n -eq $m ]; then\n        echo 1\n        return 0\n    fi\n\n    for ((i=0; i<=$n; i++)); do\n        for ((j=0; j<=$m; j++)); do\n            if [ $i -eq 0 -a $j -eq 0 ]; then\n                a[$i,$j]=1\n            elif [ $j -eq 0 ]; then\n                a[$i,$j]=0\n            elif [ $i -eq 0 ]; then\n                a[$i,$j]=1\n            else\n                a[$i,$j]=$((a[$((i-1)),$j] + a[$((i-1)),$((j-1))]))\n            fi\n        done\n    done\n\n    for ((i=0; i<=$n; i++)); do\n        for ((j=0; j<=$m; j++)); do\n            if [ $i -eq $n -a $j -eq $m ]; then\n                sum=$((sum + a[$i,$j]))\n            fi\n        done\n    done\n\n    for ((i=0; i<=$n; i++)); do\n        for ((j=0; j<=$m; j++)); do\n            if [ $i -eq $n -a $j -eq $m ]; then\n                num=$((num + a[$i,$j]))\n            fi\n        done\n    done\n\n    for ((i=0; i<=$n; i++)); do\n        for ((j=0; j<=$m; j++)); do\n            if [ $i -eq $n -a $j -",
    "    local n=$1\n    local m=$2\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local fact=1\n    local binom=1\n    local eulerian=0\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=m; j++)); do\n            for ((k=0; k<=i; k++)); do\n                fact=$((fact * (k+1)))\n            done\n            binom=$((binom * (i+1-j) / j))\n            eulerian=$((eulerian + binom * fact))\n            fact=1\n            binom=1\n        done\n    done\n    echo $eulerian",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n    local aaaaa\n    local bbbbb\n    local ccc",
    "    local n=$1\n    local m=$2\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local result=0\n    local factorial=1\n    local factorial_n=1\n    local factorial_m=1\n    local factorial_n_minus_m=1\n\n    if [ $n -lt 0 -o $m -lt 0 ]; then\n        echo \"Error: n and m must be non-negative integers.\"\n        return 1\n    fi\n\n    if [ $n -lt $m ]; then\n        echo \"Error: n must be greater than or equal to m.\"\n        return 1\n    fi\n\n    for ((i=1; i<=$n; i++)); do\n        factorial_n=$((factorial_n * i))\n    done\n\n    for ((i=1; i<=$m; i++)); do\n        factorial_m=$((factorial_m * i))\n    done\n\n    for ((i=1; i<=$((n-m)); i++)); do\n        factorial_n_minus_m=$((factorial_n_minus_m * i))\n    done\n\n    for ((i=0; i<=$m; i++)); do\n        factorial=1\n        for ((j=1; j<=$i; j++)); do\n            factorial=$((factorial * j))\n        done\n        for ((k=1; k<=$((n-i)); k++)); do\n            factorial=$((factorial * k))\n        done\n        sum=$((sum + factorial))\n    done\n\n    result=$((factorial_n / (factorial_m * factorial_n_minus_m) * sum))\n    echo $result",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local sum=0\n    local factorial\n    local binomial\n    local eulerian\n\n    for ((i=0; i<=m; i++)); do\n        factorial=1\n        for ((j=1; j<=i; j++)); do\n            factorial=$((factorial*j))\n        done\n\n        binomial=1\n        for ((j=0; j<i; j++)); do\n            binomial=$((binomial*(n-j)/(j+1)))\n        done\n\n        eulerian=$((binomial*factorial))\n        sum=$((sum+eulerian))\n    done\n\n    echo $sum",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local sum\n    local fact\n    local fact_sum\n\n    if [[ $n -lt 0 || $m -lt 0 ]]; then\n        echo \"Error: n and m must be non-negative integers.\"\n        exit 1\n    fi\n\n    if [[ $n -lt $m ]]; then\n        echo \"Error: n must be greater than or equal to m.\"\n        exit 1\n    fi\n\n    if [[ $n -eq 0 && $m -eq 0 ]]; then\n        echo 1\n        return\n    fi\n\n    if [[ $m -eq 0 ]]; then\n        echo 0\n        return\n    fi\n\n    sum=0\n    for (( i=0; i<=$n; i++ )); do\n        fact=1\n        for (( j=1; j<=$i; j++ )); do\n            fact=$(( fact * j ))\n        done\n        fact_sum=0\n        for (( k=0; k<=$i; k++ )); do\n            fact_sum=$(( fact_sum + fact / (k+1)^(n-k) ))\n        done\n        sum=$(( sum + (-1)^i * fact_sum ))\n    done\n\n    echo $sum",
    "    local n=$1\n    local m=$2\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local factorial=1\n    local result=0\n\n    if [[ $n -lt 0 || $m -lt 0 ]]; then\n        echo \"Error: n and m must be non-negative integers.\"\n        return 1\n    fi\n\n    if [[ $n -lt $m ]]; then\n        echo \"Error: n must be greater than or equal to m.\"\n        return 1\n    fi\n\n    if [[ $n -eq 0 && $m -eq 0 ]]; then\n        echo 1\n        return 0\n    fi\n\n    for ((i=0; i<=$n; i++)); do\n        factorial=1\n        for ((j=1; j<=$i; j++)); do\n            factorial=$((factorial*j))\n        done\n        sum=0\n        for ((k=0; k<=$m; k++)); do\n            sum=$((sum+((-1)**k)*(n-k)**i))\n        done\n        result=$((result+((-1)**i)*factorial*sum))\n    done\n\n    echo $result",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local a\n    local b\n\n    if (( n == 0 || m == 0 )); then\n        echo 1\n        return\n    fi\n\n    if (( n < m )); then\n        echo 0\n        return\n    fi\n\n    if (( n == m )); then\n        echo $(( n + 1 ))\n        return\n    fi\n\n    if (( m == 1 )); then\n        echo $(( n + 1 ))\n        return\n    fi\n\n    a=1\n    b=1\n    for (( i = 1; i <= m; i++ )); do\n        a=$(( a * (n - i + 1) ))\n        b=$(( b * i ))\n    done\n\n    echo $(( a / b ))",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local sum=0\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=m; j++)); do\n            for ((k=0; k<=i; k++)); do\n                sum=$((sum + ((-1)**(k+j)) * binomial_coeff $i $k * binomial_coeff $k $j))\n            done\n        done\n    done\n    echo $sum",
    "    local n=$1\n    local m=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i A=0\n    local -i B=0\n    local -i C=0\n    local -i D=0\n    local -i E=0\n    local -i F=0\n    local -i G=0\n    local -i H=0\n    local -i I=0\n    local -i J=0\n    local -i K=0\n    local -i L=0\n    local -i M=0\n    local -i N=0\n    local -i O=0\n    local -i P=0\n    local -i Q=0\n    local -i R=0\n    local -i S=0\n    local -i T=0\n    local -i U=0\n    local -i V=0\n    local -i W=0\n    local -i X=0\n    local -i Y=0\n    local -i Z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local l\n    local sum=0\n    local prod=1\n\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=m; j++)); do\n            for ((k=0; k<=n; k++)); do\n                for ((l=0; l<=m; l++)); do\n                    if ((i + j == k + l)); then\n                        sum=$((sum + 1))\n                    fi\n                done\n            done\n            prod=$((prod * sum))\n            sum=0\n        done\n    done\n\n    echo $prod",
    "    local n=$1\n    local m=$2\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local factorial=1\n    local result=0\n\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=m; j++)); do\n            for ((k=0; k<=i; k++)); do\n                factorial=$((factorial * (i-k)))\n            done\n            sum=$((sum + ((-1)**j * factorial)))\n            factorial=1\n        done\n        result=$((result + (sum * (n-i)**m)))\n        sum=0\n    done\n    echo $result",
    "    local n=$1\n    local m=$2\n    local i\n    local j\n    local k\n    local sum=0\n\n    for ((i=0; i<=n; i++)); do\n        for ((j=0; j<=m; j++)); do\n            for ((k=0; k<=m; k++)); do\n                if ((i + j + k == n)); then\n                    sum=$((sum + ((-1) ** (i + j)) * (factorial $i) * (factorial $j) * (factorial $k) * (factorial $m) / ((factorial $n) * (factorial $k) * (factorial $m))))\n                fi\n            done\n        done\n    done\n\n    echo $sum"
  ]
}