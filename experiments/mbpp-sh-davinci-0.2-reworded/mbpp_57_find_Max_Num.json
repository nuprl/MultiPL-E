{
  "name": "mbpp_57_find_Max_Num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find the largest number that can be formed with the given list of digits.\n#\n# $1 is a space-separated list\nfind_Max_Num() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    find_Max_Num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"321\" ]]\n    [[ $(candidate \"4 5 6 1\") = \"6541\" ]]\n    [[ $(candidate \"1 2 3 9\") = \"9321\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local nums=($1)\n    local max=0\n    for num in ${nums[@]}; do\n        if [[ $num -gt $max ]]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "    # sort the list in descending order\n    local sorted_list=$(echo $1 | tr \" \" \"\\n\" | sort -nr | tr \"\\n\" \" \")\n    echo $sorted_list",
    "    local -a arr=(\"$@\")\n    local -a sorted_arr\n    local -a sorted_arr_rev\n    local -a result\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local -i max_len=0\n    local -i max_index=0\n    local -i max_num=0\n    local -i max_num_rev=0\n    local -i max_index_rev=0\n    local -i max_len_rev=0\n    local -i max_len_rev_index=0\n    local -i max_num_rev_index=0\n    local -i max_num_rev_len=0\n    local -i max_num_rev_len_index=0\n    local -i max_num_rev_len_index_rev=0\n    local -i max_num_rev_len_index_rev_len=0\n    local -i max_num_rev_len_index_rev_len_index=0\n    local -i max_num_rev_len_index_rev_len_index_rev=0\n    local -i max_num_rev_len_index_rev_len_index_rev_len=0\n    local -i max_num_rev_len_index_rev_len_index_rev_len_index=0\n    local -i max_num_rev_len_index_rev_len_index_rev_len_index_rev=0\n    local -i max_num_rev_len_index_rev_len_index_rev_len_index_rev_len=0\n    local -i max_num_rev_len_index_rev_len_index_rev_len_index_rev_len_index=0\n    local -i max_num_rev_len_index_rev_len_index_rev_len_index_rev_len_index_rev=0\n    local -i max_num_rev_len_index_rev_len_index_rev_len_index_rev_len_index_rev_len=0\n    local -i max_num",
    "    local -a arr=(\"$@\")\n    local -i i j\n    local -i max_num=0\n    local -i max_num_len=0\n    local -i cur_num=0\n    local -i cur_num_len=0\n    local -i max_num_index=0\n    local -i cur_num_index=0\n    local -i arr_len=${#arr[@]}\n    local -i arr_len_minus_1=$((arr_len - 1))\n    local -i arr_len_minus_2=$((arr_len - 2))\n    local -i arr_len_minus_3=$((arr_len - 3))\n    local -i arr_len_minus_4=$((arr_len - 4))\n    local -i arr_len_minus_5=$((arr_len - 5))\n    local -i arr_len_minus_6=$((arr_len - 6))\n    local -i arr_len_minus_7=$((arr_len - 7))\n    local -i arr_len_minus_8=$((arr_len - 8))\n    local -i arr_len_minus_9=$((arr_len - 9))\n    local -i arr_len_minus_10=$((arr_len - 10))\n    local -i arr_len_minus_11=$((arr_len - 11))\n    local -i arr_len_minus_12=$((arr_len - 12))\n    local -i arr_len_minus_13=$((arr_len - 13))\n    local -i arr_len_minus_14=$((arr_len - 14))\n    local -i arr_len_minus_15=$((arr_len - 15))\n    local -i arr_len_minus_16=$((arr_len - 16))\n    local -i arr_len_minus_17=$((arr_len - 17))\n    local -i arr_len_minus_18=$((arr_len - 18))\n    local -i arr_len_minus_19=$((arr_len - 19))\n    local -i arr_len_minus_20=$((arr_len - 20))\n    local -i arr_len_minus_",
    "    local nums=($1)\n    local max=0\n    for num in ${nums[@]}; do\n        if [ $num -gt $max ]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "    local list=$1\n    local max=0\n    local num=0\n    for i in $list; do\n        num=$(echo $i | sed 's/^0*//')\n        if [ $num -gt $max ]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "    local list=$1\n    local max=0\n    for i in $list; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    echo $max",
    "  local list=$1\n  local max=0\n  for i in $list; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max",
    "    local list=$1\n    local max=0\n    for i in $list; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max",
    "  local -a nums=($1)\n  local -i i j\n  local -i max=0\n  local -i len=${#nums[@]}\n  local -i tmp=0\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${nums[i]} -lt ${nums[j]} ]]; then\n        tmp=${nums[i]}\n        nums[i]=${nums[j]}\n        nums[j]=$tmp\n      fi\n    done\n  done\n  for ((i=0; i<len; i++)); do\n    max=$((max*10+nums[i]))\n  done\n  echo $max",
    "    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    local list=$1\n    local max=0\n    for i in $list; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    echo $max",
    "    local list=$1\n    local max=0\n    for i in $list; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max",
    "    local nums=($1)\n    local max=0\n    for num in ${nums[@]}; do\n        if [ $num -gt $max ]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "    local list=$1\n    local max=0\n    for num in $list; do\n        if [[ $num -gt $max ]]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    local max=0\n    local num=0\n    for i in $1; do\n        num=$(echo $i | sed 's/^0*//')\n        if [ ${#num} -gt ${#max} ]; then\n            max=$num\n        elif [ ${#num} -eq ${#max} ]; then\n            if [ $num -gt $max ]; then\n                max=$num\n            fi\n        fi\n    done\n    echo $max",
    "    local nums=$1\n    local max=0\n    for num in $nums; do\n        if [ $num -gt $max ]; then\n            max=$num\n        fi\n    done\n    echo $max",
    "    echo \"$1\" | tr ' ' '\\n' | sort -nr | tr -d '\\n'",
    "    local -a nums=($1)\n    local -i i j k\n    local -i max=0\n    local -i num\n    local -i len=${#nums[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=0; j<len; j++)); do\n            for ((k=0; k<len; k++)); do\n                if [[ $i -ne $j && $j -ne $k && $k -ne $i ]]; then\n                    num=$((10*10*nums[$i]+10*nums[$j]+nums[$k]))\n                    if [[ $num -gt $max ]]; then\n                        max=$num\n                    fi\n                fi\n            done\n        done\n    done\n    echo $max"
  ]
}