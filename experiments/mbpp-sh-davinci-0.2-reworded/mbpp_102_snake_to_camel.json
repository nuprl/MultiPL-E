{
  "name": "mbpp_102_snake_to_camel",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local input=$1\n    local output=\"\"\n    local first_char=true\n\n    for word in $(echo \"$input\" | tr '_' ' '); do\n        if $first_char; then\n            output+=$(echo \"$word\" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2)) }')\n            first_char=false\n        else\n            output+=$(echo \"$word\" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2)) }')\n        fi\n    done\n\n    echo \"$output\"",
    "    echo \"$1\" | sed -r 's/([^_]+)_?/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest=\"\"\n\n    while [[ -n \"$str\" ]]; do\n        word=\"${str%%_*}\"\n        result=\"${result}${word}\"\n        str=\"${str#*_}\"\n        if [[ -n \"$str\" ]]; then\n            first_char=\"${word:0:1}\"\n            rest=\"${word:1}\"\n            result=\"${result}${first_char^^}${rest}\"\n        fi\n    done\n\n    echo \"$result\"",
    "  local str=\"$1\"\n  local result=\"\"\n  local first=true\n  local word\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if $first; then\n      result=\"$word\"\n      first=false\n    else\n      result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n  echo \"$result\"",
    "  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local first_word=1\n\n  while [ -n \"$str\" ]; do\n    word=\"${str%%_*}\"\n    str=\"${str#*_}\"\n    if [ $first_word -eq 1 ]; then\n      result=\"$word\"\n      first_word=0\n    else\n      result=\"$result${word^}\"\n    fi\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -E 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo $1 | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    # Split the string into an array of words\n    words=($(echo $1 | tr '_' ' '))\n\n    # Capitalize the first letter of each word\n    for word in \"${words[@]}\"; do\n        # Capitalize the first letter of the word\n        capitalized=\"$(echo ${word:0:1} | tr '[:lower:]' '[:upper:]')${word:1}\"\n\n        # Append the capitalized word to the camel case string\n        camel_case=\"${camel_case}${capitalized}\"\n    done\n\n    echo $camel_case",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=1\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if [ $first_char -eq 1 ]; then\n            result=\"$word\"\n            first_char=0\n        else\n            result=\"${result}$(echo \"$word\" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')\"\n        fi\n    done\n\n    echo \"$result\""
  ]
}