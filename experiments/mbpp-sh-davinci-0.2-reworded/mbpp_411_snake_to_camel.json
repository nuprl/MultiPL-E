{
  "name": "mbpp_411_snake_to_camel",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert the given snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"android_tv\") = \"AndroidTv\" ]]\n    [[ $(candidate \"google_pixel\") = \"GooglePixel\" ]]\n    [[ $(candidate \"apple_watch\") = \"AppleWatch\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest=\"\"\n    local first_char_upper=\"\"\n    local rest_lower=\"\"\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        first_char=$(echo \"$word\" | cut -c1)\n        rest=$(echo \"$word\" | cut -c2-)\n        first_char_upper=$(echo \"$first_char\" | tr '[:lower:]' '[:upper:]')\n        rest_lower=$(echo \"$rest\" | tr '[:upper:]' '[:lower:]')\n        result=\"$result$first_char_upper$rest_lower\"\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if [ $i -eq 0 ]; then\n      result+=\"$word\"\n    else\n      result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n    let i++\n  done\n\n  echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first=1\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if [ $first -eq 1 ]; then\n            result=\"$word\"\n            first=0\n        else\n            result=\"$result$(echo \"$word\" | sed -e 's/^./\\U&/')\"\n        fi\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(_[a-z]\\)/\\U\\1/g' -e 's/^[a-z]/\\U&/'",
    "  echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g' -e 's/^\\([^_]\\)/\\L\\1/'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$((i+1)):1}\"\n\n    if [ \"$char\" == \"_\" ]; then\n      ((i++))\n      char=\"${str:$i:1}\"\n      char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n    fi\n\n    result=\"$result$char\"\n    ((i++))\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=$1\n  local new_str=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n    next_char=${str:$((i+1)):1}\n\n    if [ \"$char\" = \"_\" ]; then\n      char=\"\"\n      next_char=${next_char^^}\n    fi\n\n    new_str+=$char\n    i=$((i+1))\n  done\n\n  echo $new_str",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "  local str=\"$1\"\n  local out=\"\"\n  local first=true\n  while [[ ${#str} -gt 0 ]]; do\n    if [[ $str =~ ^[a-z]+_ ]]; then\n      if $first; then\n        out+=\"${str:0:1}\"\n        first=false\n      else\n        out+=\"${str:0:1^}\"\n      fi\n      str=\"${str:1}\"\n    else\n      out+=\"${str:0:1}\"\n      str=\"${str:1}\"\n    fi\n  done\n  echo \"$out\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    local string=\"$1\"\n    local result=\"\"\n    local first_char=true\n    while [[ -n \"$string\" ]]; do\n        local char=\"${string:0:1}\"\n        string=\"${string:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                first_char=false\n            fi\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local first_char=\"\"\n  local rest=\"\"\n\n  while [[ -n $str ]]; do\n    word=\"${str%%_*}\"\n    first_char=\"${word:0:1}\"\n    rest=\"${word:1}\"\n    result=\"$result${first_char^^}$rest\"\n    str=\"${str#*_}\"\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n  local i=0\n  local len=${#str}\n  while [ $i -lt $len ]; do\n    local char=\"${str:$i:1}\"\n    if [ \"$char\" == \"_\" ]; then\n      first_char=true\n    else\n      if [ \"$first_char\" == true ]; then\n        char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n        first_char=false\n      fi\n      result=\"$result$char\"\n    fi\n    i=$((i+1))\n  done\n  echo \"$result\"",
    "    local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        if [ ${str:$i:1} = \"_\" ]; then\n            res=${res}$(tr '[a-z]' '[A-Z]' <<< ${str:$((i+1)):1})\n            i=$((i+1))\n        else\n            res=${res}${str:$i:1}\n        fi\n        i=$((i+1))\n    done\n    echo $res",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local input=\"$1\"\n    local output=\"\"\n    local first_char=true\n    local first_char_upper=false\n    while IFS= read -r -n1 char; do\n        if [[ $char == \"_\" ]]; then\n            first_char_upper=true\n            continue\n        fi\n        if $first_char; then\n            output+=\"${char^^}\"\n            first_char=false\n        elif $first_char_upper; then\n            output+=\"${char^^}\"\n            first_char_upper=false\n        else\n            output+=\"$char\"\n        fi\n    done <<< \"$input\"\n    echo \"$output\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if $first_char; then\n            result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n            first_char=false\n        else\n            result+=\"$word\"\n        fi\n    done\n\n    echo \"$result\"",
    "    local snake_case=$1\n    local camel_case=\"\"\n    local word=\"\"\n\n    for word in ${snake_case//_/ }; do\n        camel_case+=\"${word:0:1}\"\n        camel_case+=\"${word:1,,}\"\n    done\n\n    echo \"$camel_case\"",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    # Convert all underscores to spaces\n    local snake_case=$(echo \"$1\" | sed 's/_/ /g')\n    # Capitalize the first letter of each word\n    local capitalized=$(echo \"$snake_case\" | sed 's/\\b\\(.\\)/\\u\\1/g')\n    # Remove all spaces\n    echo \"$capitalized\" | sed 's/ //g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_[a-z])/\\U\\1/g' | sed -r 's/^([a-z])/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local next_char_upper=false\n\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            next_char_upper=true\n            continue\n        fi\n        if $next_char_upper; then\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n            next_char_upper=false\n        fi\n        if $first_char; then\n            char=\"$(tr '[:upper:]' '[:lower:]' <<< \"$char\")\"\n            first_char=false\n        fi\n        result+=\"$char\"\n    done\n\n    echo \"$result\"",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n\n    while [[ -n \"$str\" ]]; do\n        local char=\"${str:0:1}\"\n        str=\"${str:1}\"\n\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n            continue\n        fi\n\n        if $first_char; then\n            char=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n            first_char=false\n        fi\n\n        result+=\"$char\"\n    done\n\n    echo \"$result\"",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if $first_char; then\n      result=\"$word\"\n      first_char=false\n    else\n      result=\"${result}$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$i+1:1}\"\n    if [ \"$char\" = \"_\" ]; then\n      char=\"${next_char^}\"\n      i=$((i+1))\n    fi\n    result+=\"$char\"\n    i=$((i+1))\n  done\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=$1\n    local result=\"\"\n    local first_char=true\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if [ \"$first_char\" = true ]; then\n            result=\"$word\"\n            first_char=false\n        else\n            result=\"$result\"$(echo \"$word\" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')\n        fi\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local char\n    for (( i=0; i<${#str}; i++ )); do\n        char=${str:i:1}\n        if [[ $char == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=$(echo $char | tr '[:lower:]' '[:upper:]')\n                first_char=false\n            fi\n            result+=$char\n        fi\n    done\n    echo $result",
    "  echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local snake_string=\"$1\"\n  local camel_string=\"\"\n  local word=\"\"\n\n  while read -r word; do\n    camel_string+=\"${word:0:1}${word:1,,}\"\n  done <<< \"${snake_string//_/ }\"\n\n  echo \"${camel_string}\"",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([a-z]\\)\\([a-zA-Z0-9]*\\)/\\u\\1\\2/g'",
    "  echo $1 | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo $1 | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local char\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                first_char=false\n            fi\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local first_char=true\n    local next_char_upper=false\n\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n\n        if [[ $char == \"_\" ]]; then\n            next_char_upper=true\n        elif [[ $next_char_upper == true ]]; then\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n            next_char_upper=false\n        fi\n\n        if [[ $first_char == true ]]; then\n            char=\"$(tr '[:upper:]' '[:lower:]' <<< \"$char\")\"\n            first_char=false\n        fi\n\n        new_str+=\"$char\"\n    done\n\n    echo \"$new_str\"",
    "  local str=\"$1\"\n  local output\n  while [[ \"$str\" =~ ([^_]*)_(.*) ]]; do\n    output=\"${BASH_REMATCH[1]}${output:+${output^}}\"\n    str=\"${BASH_REMATCH[2]}\"\n  done\n  echo \"${output}${str}\"",
    "    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local first_char=1\n    local next_char_upper=0\n    local i=0\n    local str_len=${#str}\n\n    for ((i = 0; i < str_len; i++)); do\n        local char=${str:$i:1}\n        if [[ $char == \"_\" ]]; then\n            next_char_upper=1\n        else\n            if [[ $first_char -eq 1 ]]; then\n                new_str+=\"$(tr '[:lower:]' '[:upper:]' <<< ${char:0:1})\"\n                first_char=0\n            elif [[ $next_char_upper -eq 1 ]]; then\n                new_str+=\"$(tr '[:lower:]' '[:upper:]' <<< ${char:0:1})\"\n                next_char_upper=0\n            else\n                new_str+=\"$char\"\n            fi\n        fi\n    done\n\n    echo \"$new_str\"",
    "  local input=$1\n  local output=\"\"\n  local first_char=true\n  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=${input:$i:1}\n    if [[ $char == \"_\" ]]; then\n      first_char=true\n    else\n      if $first_char; then\n        char=$(echo $char | tr '[:lower:]' '[:upper:]')\n        first_char=false\n      fi\n      output+=$char\n    fi\n  done\n  echo $output",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "\techo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "  local str=$1\n  local result=\"\"\n  local first_char=true\n  for word in $(echo $str | sed -e 's/_/ /g'); do\n    if $first_char; then\n      result+=$(echo $word | tr '[:lower:]' '[:upper:]')\n      first_char=false\n    else\n      result+=$(echo $word | tr '[:upper:]' '[:lower:]')\n    fi\n  done\n  echo $result",
    "  echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local upper=false\n\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            upper=true\n        else\n            if $upper; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                upper=false\n            fi\n            result+=\"$char\"\n        fi\n    done\n\n    echo \"$result\"",
    "  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local first_char=\"\"\n  local rest=\"\"\n  local is_first_word=true\n\n  while [[ -n $str ]]; do\n    word=\"${str%%_*}\"\n    str=\"${str#*_}\"\n    first_char=\"${word:0:1}\"\n    rest=\"${word:1}\"\n\n    if $is_first_word; then\n      result=\"$result$first_char$rest\"\n      is_first_word=false\n    else\n      result=\"$result${first_char^^}$rest\"\n    fi\n  done\n\n  echo \"$result\"",
    "    # Convert the string to lowercase\n    local str=\"${1,,}\"\n\n    # Replace all underscores with spaces\n    str=\"${str//_/ }\"\n\n    # Capitalize the first letter of each word\n    str=\"${str^}\"\n\n    # Replace all spaces with nothing\n    str=\"${str// /}\"\n\n    echo \"$str\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n    local is_first_word=true\n\n    while [[ -n \"$str\" ]]; do\n        word=\"${str%%_*}\"\n        str=\"${str#*_}\"\n        first_char=\"${word:0:1}\"\n        rest_of_word=\"${word:1}\"\n        if $is_first_word; then\n            result+=\"$first_char$rest_of_word\"\n            is_first_word=false\n        else\n            result+=\"${first_char^^}$rest_of_word\"\n        fi\n    done\n\n    echo \"$result\"",
    "  echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n\n    while [[ \"$str\" =~ ^([^_]+)_(.*) ]]; do\n        result+=\"${BASH_REMATCH[1]^}\"\n        str=\"${BASH_REMATCH[2]}\"\n    done\n\n    result+=\"${str^}\"\n\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  local first_letter=true\n  for word in $(echo \"$str\" | tr \"_\" \" \"); do\n    if $first_letter; then\n      new_str=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n      first_letter=false\n    else\n      new_str=\"$new_str$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n  echo \"$new_str\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "  echo \"$1\" | sed -E 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    # Split the string into an array\n    local arr=(\"${!1}\")\n    # Iterate over the array\n    for i in \"${!arr[@]}\"; do\n        # If the current element is an underscore\n        if [[ \"${arr[$i]}\" == \"_\" ]]; then\n            # Remove the underscore\n            unset arr[$i]\n            # Convert the next element to uppercase\n            arr[$i+1]=$(echo \"${arr[$i+1]}\" | tr '[:lower:]' '[:upper:]')\n        fi\n    done\n    # Join the array back into a string\n    echo \"${arr[@]}\"",
    "  local input=$1\n  local output=\"\"\n  local first_char=true\n\n  for word in $(echo $input | tr \"_\" \" \"); do\n    if [ $first_char = true ]; then\n      output+=$(echo $word | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2)) }')\n      first_char=false\n    else\n      output+=$(echo $word | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2)) }')\n    fi\n  done\n\n  echo $output",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local words=(${str//_/ })\n  local first_word=${words[0]}\n  local rest_words=${words[@]:1}\n\n  result=\"${first_word}\"\n  for word in ${rest_words[@]}; do\n    result=\"${result}$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n  done\n\n  echo \"${result}\"",
    "    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n    local is_first_word=true\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=${str:$i:1}\n\n        if [[ $char == \"_\" ]]; then\n            if [[ $is_first_word == true ]]; then\n                result+=$word\n            else\n                result+=\"${first_char^^}${rest_of_word,,}\"\n            fi\n\n            word=\"\"\n            first_char=\"\"\n            rest_of_word=\"\"\n            is_first_word=false\n        else\n            if [[ $first_char == \"\" ]]; then\n                first_char=$char\n            else\n                rest_of_word+=$char\n            fi\n\n            word+=$char\n        fi\n    done\n\n    if [[ $is_first_word == true ]]; then\n        result+=$word\n    else\n        result+=\"${first_char^^}${rest_of_word,,}\"\n    fi\n\n    echo $result",
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/^_//' -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local first_char=\"\"\n  local rest_of_word=\"\"\n  local is_first_word=true\n\n  while [[ -n \"$str\" ]]; do\n    word=\"${str%%_*}\"\n    str=\"${str#*_}\"\n\n    if [[ -n \"$word\" ]]; then\n      first_char=\"${word:0:1}\"\n      rest_of_word=\"${word:1}\"\n\n      if $is_first_word; then\n        result+=\"$first_char$rest_of_word\"\n        is_first_word=false\n      else\n        result+=\"${first_char^^}$rest_of_word\"\n      fi\n    fi\n  done\n\n  echo \"$result\"",
    "    local input=$1\n    local output=\"\"\n    local first_char=1\n\n    for word in $(echo $input | tr \"_\" \" \"); do\n        if [ $first_char -eq 1 ]; then\n            output+=$(echo $word | tr '[:lower:]' '[:upper:]')\n            first_char=0\n        else\n            output+=$(echo $word | tr '[:upper:]' '[:lower:]')\n        fi\n    done\n\n    echo $output",
    "    local string=\"$1\"\n    local result=\"\"\n\n    while [[ \"$string\" =~ ([^_]*)_?(.*) ]]; do\n        if [[ ! -z ${BASH_REMATCH[1]} ]]; then\n            result+=\"${BASH_REMATCH[1]:0:1}\"\n            result+=\"${BASH_REMATCH[1]:1}\"\n        fi\n        string=\"${BASH_REMATCH[2]}\"\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  local str=$1\n  local str_camel=\"\"\n  local str_len=${#str}\n  local i=0\n  while [ $i -lt $str_len ]; do\n    local char=${str:$i:1}\n    if [ \"$char\" == \"_\" ]; then\n      i=$((i+1))\n      char=${str:$i:1}\n      str_camel+=$(echo $char | tr '[a-z]' '[A-Z]')\n    else\n      str_camel+=$char\n    fi\n    i=$((i+1))\n  done\n  echo $str_camel",
    "    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'",
    "    local string=\"$1\"\n    local result=\"\"\n    local first_letter=true\n    local first_letter_upper=false\n    local first_letter_lower=false\n    local first_letter_lower_next=false\n    local first_letter_upper_next=false\n    local first_letter_lower_next_next=false\n    local first_letter_upper_next_next=false\n    local first_letter_lower_next_next_next=false\n    local first_letter_upper_next_next_next=false\n    local first_letter_lower_next_next_next_next=false\n    local first_letter_upper_next_next_next_next=false\n    local first_letter_lower_next_next_next_next_next=false\n    local first_letter_upper_next_next_next_next_next=false\n    local first_letter_lower_next_next_next_next_next_next=false\n    local first_letter_upper_next_next_next_next_next_next=false\n    local first_letter_lower_next_next_next_next_next_next_next=false\n    local first_letter_upper_next_next_next_next_next_next_next=false\n    local first_letter_lower_next_next_next_next_next_next_next_next=false\n    local first_letter_upper_next_next_next_next_next_next_next_next=false\n    local first_letter_lower_next_next_next_next_next_next_next_next_next=false\n    local first_letter_upper_next_next_next_next_next_next_next_next_next=false\n    local first_letter_lower_next_next_next_next_next_next_next_next_next_next=false\n    local first_letter_upper_next_next_next_next_next_next_next_next_next_next=false\n    local first_letter_lower_next_next_next_next_next_next_next_next_next_next_next=false\n    local first_letter_upper_next_next_next_next_next_",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n  local first_char_of_word=true\n\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" == \"_\" ]]; then\n      first_char_of_word=true\n    else\n      if $first_char_of_word; then\n        if $first_char; then\n          result+=\"$char\"\n          first_char=false\n        else\n          result+=\"${char^^}\"\n        fi\n        first_char_of_word=false\n      else\n        result+=\"$char\"\n      fi\n    fi\n  done\n\n  echo \"$result\"",
    "  # Replace all underscores with spaces\n  local string=\"${1//_/ }\"\n  # Capitalize all words\n  local string=\"${string^^}\"\n  # Replace all spaces with nothing\n  local string=\"${string// /}\"\n  # Print the result\n  echo \"$string\"",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'",
    "    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local upper=0\n\n    for (( i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            upper=1\n        elif [[ \"$char\" =~ [a-z] ]]; then\n            if [[ \"$upper\" -eq 1 ]]; then\n                char=$(echo \"$char\" | tr '[a-z]' '[A-Z]')\n                upper=0\n            fi\n        elif [[ \"$char\" =~ [0-9] ]]; then\n            upper=1\n        elif [[ \"$char\" == \"_\" ]]; then\n            upper=1\n            continue\n        else\n            upper=1\n        fi\n        result+=\"$char\"\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'"
  ]
}