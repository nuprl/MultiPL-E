{
  "name": "mbpp_411_snake_to_camel",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert the given snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"android_tv\") = \"AndroidTv\" ]]\n    [[ $(candidate \"google_pixel\") = \"GooglePixel\" ]]\n    [[ $(candidate \"apple_watch\") = \"AppleWatch\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest=\"\"\n    local first_char_upper=\"\"\n    local rest_lower=\"\"\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        first_char=$(echo \"$word\" | cut -c1)\n        rest=$(echo \"$word\" | cut -c2-)\n        first_char_upper=$(echo \"$first_char\" | tr '[:lower:]' '[:upper:]')\n        rest_lower=$(echo \"$rest\" | tr '[:upper:]' '[:lower:]')\n        result=\"$result$first_char_upper$rest_lower\"\n    done\n    echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if [ $i -eq 0 ]; then\n      result+=\"$word\"\n    else\n      result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n    let i++\n  done\n\n  echo \"$result\"",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "    local str=\"$1\"\n    local result=\"\"\n    local first=1\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if [ $first -eq 1 ]; then\n            result=\"$word\"\n            first=0\n        else\n            result=\"$result$(echo \"$word\" | sed -e 's/^./\\U&/')\"\n        fi\n    done\n\n    echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed -e 's/\\(_[a-z]\\)/\\U\\1/g' -e 's/^[a-z]/\\U&/'",
    "  echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g' -e 's/^\\([^_]\\)/\\L\\1/'",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$((i+1)):1}\"\n\n    if [ \"$char\" == \"_\" ]; then\n      ((i++))\n      char=\"${str:$i:1}\"\n      char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n    fi\n\n    result=\"$result$char\"\n    ((i++))\n  done\n\n  echo \"$result\"",
    "    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'",
    "  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'",
    "  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'"
  ]
}