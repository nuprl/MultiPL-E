{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n  for (( j=0; j<i; j++ )); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(max_sum_increasing_subseq arr $j $i $n)\n      if (( sum > max_sum )); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $(( max_sum + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpq_n_rgt6.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local sum=0\n    local max_sum=0\n    local j=0\n    local max_j=0\n    for ((j=0; j<i; j++))\n    do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]\n        then\n            sum=${arr[j]}\n            sum=$((sum + $(max_sum_increasing_subseq arr k j n)))\n            if [[ $sum -gt $max_sum ]]\n            then\n                max_sum=$sum\n                max_j=$j\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp5w37yses.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local j=$4\n    local max=0\n    local sum=0\n    local -a arr_sum\n    for ((j=0; j<=i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            if [[ ${arr_sum[j]} -eq 0 ]]; then\n                arr_sum[j]=$(max_sum_increasing_subseq \"$1\" \"$2\" \"$j\" \"$j\")\n            fi\n            sum=$((arr_sum[j] + arr[k]))\n            if [[ $sum -gt $max ]]; then\n                max=$sum\n            fi\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    if [ $i -eq 0 ]\n    then\n        max_sum=${arr[$k]}\n    else\n        for ((j=0; j<i; j++))\n        do\n            if [ ${arr[$j]} -lt ${arr[$k]} ]\n            then\n                sum=$(max_sum_increasing_subseq arr $j $((j-1)) $n)\n                if [ $sum -gt $max_sum ]\n                then\n                    max_sum=$sum\n                fi\n            fi\n        done\n        max_sum=$((max_sum + arr[$k]))\n    fi\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpsnx73uvh.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpsnx73uvh.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 32: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 32: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 19: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 19: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 26: [: -gt: unary operator expected\\n/tmp/tmpsnx73uvh.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 32: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 32: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 32: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 32: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpsnx73uvh.sh: line 23: warning: arr: circular name reference",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr[@] j $n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpnttlhdxc.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    local k_index=0\n    local k_value=0\n    local k_sum=0\n\n    if [ $i -eq 0 ]; then\n        echo ${arr[0]}\n        return\n    fi\n\n    for (( j=0; j<$i; j++ )); do\n        if [ ${arr[$j]} -lt ${arr[$i]} ]; then\n            sum=$(max_sum_increasing_subseq arr $k $j $n)\n            if [ $sum -gt $max_sum ]; then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    if [ $k -gt $i ]; then\n        k_index=$(($k-1))\n        k_value=${arr[$k_index]}\n        k_sum=$(max_sum_increasing_subseq arr $k_index $k_index $n)\n        if [ $k_sum -gt $max_sum ]; then\n            max_sum=$k_sum\n        fi\n    fi\n\n    echo $(($max_sum+${arr[$i]}))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190792,
      "stdout": "<_io.BufferedReader name=7>",
      "stderr": "<_io.BufferedReader name=14>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmplc55uiz6.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n _list=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    local n=${#_list[@]}\n    local -a dp\n    for ((j=0; j<n; j++)); do\n        dp[$j]=0\n    done\n    for ((j=0; j<i; j++)); do\n        if ((_list[$j] < _list[$i])) && ((dp[$j] > max_sum)); then\n            max_sum=${dp[$j]}\n        fi\n    done\n    if ((k > i)); then\n        sum=$((max_sum + _list[$i]))\n    else\n        sum=$max_sum\n    fi\n    dp[$i]=$sum\n    echo ${dp[@]}\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpai91on4z.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    local max_j=0\n    local max_k=0\n    local max_i=0\n\n    if [[ $i -eq 0 ]]; then\n        max_sum=${arr[0]}\n        max_j=0\n        max_k=0\n        max_i=0\n    fi\n\n    for (( j=0; j<i; j++ )); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$(( ${arr[j]} + ${arr[k]} ))\n            if [[ $sum -gt $max_sum ]]; then\n                max_sum=$sum\n                max_j=$j\n                max_k=$k\n                max_i=$i\n            fi\n        fi\n    done\n\n    echo \"$max_sum $max_j $max_k $max_i\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp_397mq3o.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local sum=0\n    local max_sum=0\n    local max_sum_k=0\n    local max_sum_i=0\n    local max_sum_n=0\n    local max_sum_k_i=0\n    local max_sum_k_n=0\n    local max_sum_i_n=0\n    local max_sum_k_i_n=0\n\n    for (( j=0; j<i; j++ )); do\n        if (( arr[j] < arr[k] )); then\n            sum=$(max_sum_increasing_subseq arr j i n)\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    max_sum_k=$(max_sum_increasing_subseq arr k k n)\n    max_sum_i=$(max_sum_increasing_subseq arr i i n)\n    max_sum_n=$(max_sum_increasing_subseq arr n n n)\n    max_sum_k_i=$(max_sum_increasing_subseq arr k i n)\n    max_sum_k_n=$(max_sum_increasing_subseq arr k n n)\n    max_sum_i_n=$(max_sum_increasing_subseq arr i n n)\n    max_sum_k_i_n=$(max_sum_increasing_subseq arr k i n)\n\n    echo $(( max_sum + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=8>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local n=$3\n    local i=$4\n    local max=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq \"$1\" $j $n $j)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local j=$4\n    local -i max_sum=0\n    local -i sum=0\n    local -i max_sum_k=0\n    local -i sum_k=0\n    local -i max_sum_i=0\n    local -i sum_i=0\n    local -i max_sum_j=0\n    local -i sum_j=0\n\n    if [ $i -eq $k ]; then\n        max_sum_k=${arr[$i]}\n    else\n        for ((j=i+1; j<=k; j++)); do\n            sum_k=${arr[$j]}\n            max_sum_j=$(max_sum_increasing_subseq \"$1\" $k $j $j)\n            sum_k=$((sum_k + max_sum_j))\n            if [ $sum_k -gt $max_sum_k ]; then\n                max_sum_k=$sum_k\n            fi\n        done\n    fi\n\n    if [ $i -eq 0 ]; then\n        max_sum_i=${arr[$i]}\n    else\n        for ((j=0; j<i; j++)); do\n            sum_i=${arr[$j]}\n            max_sum_j=$(max_sum_increasing_subseq \"$1\" $k $j $j)\n            sum_i=$((sum_i + max_sum_j))\n            if [ $sum_i -gt $max_sum_i ]; then\n                max_sum_i=$sum_i\n            fi\n        done\n    fi\n\n    max_sum=$((max_sum_k + max_sum_i))\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "<_io.BufferedReader name=16>",
      "stderr": "<_io.BufferedReader name=19>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a A=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local sum=0\n  local max_sum=0\n  local max_j=0\n  for ((j=i+1; j<=k; j++)); do\n    if ((A[j] > A[i])); then\n      sum=$(max_sum_increasing_subseq \"${A[*]}\" $k $j $j)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n        max_j=$j\n      fi\n    fi\n  done\n  echo $((A[i] + max_sum))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j n)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpecx6kvpz.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"${!1}\")\n  local k=$2\n  local i=$3\n  local j=$4\n  local max=0\n  local sum=0\n  for (( ; j < k; j++ )); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(max_sum_increasing_subseq arr[@] k j)\n      if (( sum > max )); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $(( max + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpjdrlkr9b.sh: line 9: 1 101 2 3 100 4 5: invalid variable name\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmplc55uiz6.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"$@\")\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq \"${arr[@]}\" $j $j $n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpv9mchf3k.sh: line 17: ((: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"${!1}\")\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local max_sum_index=0\n  local j=0\n\n  for ((j=0; j<i; j++)); do\n    if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n      sum=$((sum + arr[j]))\n      if [[ $sum -gt $max_sum ]]; then\n        max_sum=$sum\n        max_sum_index=$j\n      fi\n    fi\n  done\n\n  if [[ $max_sum -gt 0 ]]; then\n    echo $max_sum_index\n  else\n    echo -1\n  fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp1dlnird2.sh: line 9: 1 101 2 3 100 4 5: invalid variable name\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for (( j=0; j<i; j++ )); do\n        if (( arr[j] < arr[k] )); then\n            sum=$(max_sum_increasing_subseq arr k j n)\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $(( max_sum + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpye1ypnn5.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j n)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpecx6kvpz.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n\n    if [ $i -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    local max_sum=0\n\n    for j in $(seq $i $((k-1))); do\n        if [ ${arr[$j]} -lt ${arr[$k]} ]; then\n            local sum=$(max_sum_increasing_subseq arr $k $((j+1)) $n)\n            if [ $((sum + arr[$k])) -gt $max_sum ]; then\n                max_sum=$((sum + arr[$k]))\n            fi\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpv81g_kv9.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpv81g_kv9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 22: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 22: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 22: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 22: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 22: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 22: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 22: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 22: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpv81g_kv9.sh: line 9: warning: arr: circular name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n  for ((j=0;j<i;j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j $n)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp32uuah2z.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$(($sum + ${arr[j]}))\n            if [[ $sum -gt $max_sum ]]; then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmptgff3tv5.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr[@] j $n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpnttlhdxc.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j $k)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpio78hx1l.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local j=0\n  local n=${#arr[@]}\n\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$((sum + arr[j]))\n    fi\n  done\n\n  sum=$((sum + arr[k]))\n\n  if ((i == 0)); then\n    max_sum=$sum\n  else\n    max_sum=$(max_sum_increasing_subseq arr $k $((i-1)) $n)\n  fi\n\n  if ((sum > max_sum)); then\n    max_sum=$sum\n  fi\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8y4dnh4h.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmp8y4dnh4h.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 15: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 23: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 23: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 15: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tmp8y4dnh4h.sh: line 18: warning: arr: circular name reference\\n/tmp/tm",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $j $i $n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpx5ya6nlj.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=\"$1\"\n    local k=\"$2\"\n    local i=\"$3\"\n    local sum=0\n    local max_sum=0\n    local j=0\n    local temp=0\n\n    for ((j=0; j<i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            temp=$(max_sum_increasing_subseq \"$1\" \"$j\" \"$i\")\n            if [[ $temp -gt $max_sum ]]; then\n                max_sum=$temp\n            fi\n        fi\n    done\n    sum=$((max_sum + arr[k]))\n    echo \"$sum\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp6okd00gt.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr k j n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp2epkzt06.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local sum=0\n    local max_sum=0\n\n    if [ $k -eq $i ]; then\n        echo ${arr[$i]}\n        return\n    fi\n\n    for (( j=i; j<k; j++ )); do\n        sum=$(max_sum_increasing_subseq arr $k $j $n)\n        if [ $sum -gt $max_sum ]; then\n            max_sum=$sum\n        fi\n    done\n\n    echo $(( max_sum + arr[$k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "<_io.BufferedReader name=6>",
      "stderr": "<_io.BufferedReader name=15>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local j=$4\n    local max_sum=0\n    local curr_sum=0\n    local sum=0\n    local max_sum_k=0\n    local max_sum_i=0\n    local max_sum_j=0\n    local curr_sum_k=0\n    local curr_sum_i=0\n    local curr_sum_j=0\n    local sum_k=0\n    local sum_i=0\n    local sum_j=0\n\n    if [ $i -eq 0 ]; then\n        max_sum_k=$k\n        max_sum_i=$i\n        max_sum_j=$j\n        max_sum=${arr[$k]}\n    else\n        for ((j=0; j<$k; j++)); do\n            if [ $j -eq 0 ]; then\n                curr_sum_k=$k\n                curr_sum_i=$i\n                curr_sum_j=$j\n                curr_sum=${arr[$k]}\n            else\n                sum_k=$k\n                sum_i=$i\n                sum_j=$j\n                sum=$(max_sum_increasing_subseq \"$1\" $k $i $j)\n                if [ $sum -gt $curr_sum ]; then\n                    curr_sum_k=$sum_k\n                    curr_sum_i=$sum_i\n                    curr_sum_j=$sum_j\n                    curr_sum=$sum\n                fi\n            fi\n        done\n        if [ $curr_sum -gt $max_sum ]; then\n            max_sum_k=$curr_sum_k\n            max_sum_i=$curr_sum_i\n            max_sum_j=$curr_sum_j\n            max_sum=$curr_sum\n        fi\n    fi\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "<_io.BufferedReader name=9>",
      "stderr": "<_io.BufferedReader name=12>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"$@\")\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for (( j=0; j<i; j++ )); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$(max_sum_increasing_subseq \"${arr[@]}\" $j $j $n)\n            if [[ $sum -gt $max_sum ]]; then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190792,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpo0ync213.sh: line 17: [[: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$((sum + arr[j]))\n    fi\n  done\n  sum=$((sum + arr[k]))\n  max=$((sum > max ? sum : max))\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190792,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpo5ykz602.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n\n  if [ $i -eq $n ]; then\n    echo 0\n    return\n  fi\n\n  local max_sum_including_k=0\n  local max_sum_excluding_k=0\n\n  if [ $k -eq $i ]; then\n    max_sum_including_k=$(max_sum_increasing_subseq arr $k $(($i+1)) $n)\n    max_sum_including_k=$(($max_sum_including_k + ${arr[$i]}))\n  else\n    max_sum_including_k=$(max_sum_increasing_subseq arr $k $(($i+1)) $n)\n    max_sum_including_k=$(($max_sum_including_k + ${arr[$i]}))\n\n    max_sum_excluding_k=$(max_sum_increasing_subseq arr $k $(($i+1)) $n)\n  fi\n\n  echo $((max_sum_including_k > max_sum_excluding_k ? max_sum_including_k : max_sum_excluding_k))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmps6xo1so5.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmps6xo1so5.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmps6xo1so5.sh: line 9: warning: arr: circular name reference\\n/tmp/tmps6xo1so5.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmps6xo1so5.sh: line 9: warning: arr: circular name reference\\n/tmp/tmps6xo1so5.sh: line 9: warning: arr: circular name reference\\n/tmp/tmps6xo1so5.sh: line 9: warning: arr: circular name reference\\n/tmp/tmps6xo1so5.sh: line 27: warning: arr: circular name reference\\n/tmp/tmps6xo1so5.sh: line 27: warning: arr: circular name reference\\n/tmp/tmps6xo1so5.sh: line 27: 0 + : syntax error: operand expected (error token is \"+ \")\\n/tmp/tmps6xo1so5.sh: line 27: + : syntax error: operand expected (error token is \"+ \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n list=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    if [ $k -eq $i ]; then\n        return 0\n    fi\n\n    for ((j=0; j<i; j++)); do\n        max_sum_increasing_subseq list $k $j $n\n        sum=$((list[j] + $?))\n        if [ $sum -gt $max_sum ]; then\n            max_sum=$sum\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmppdc0q6k8.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmppdc0q6k8.sh: line 9: local: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: local: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: local: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 23: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 23: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: local: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: local: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 23: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 23: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: local: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: local: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 9: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 23: warning: list: circular name reference\\n/tmp/tmppdc0q6k8.sh: line 23: ",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    if [ $i -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    if [ $k -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    for ((j=i; j<k; j++)); do\n        sum=$(max_sum_increasing_subseq arr $k $((j+1)) $n)\n        if [ $((arr[j] + sum)) -gt $max_sum ]; then\n            max_sum=$((arr[j] + sum))\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpiwx1f4vw.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 29: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 29: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 29: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 29: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpiwx1f4vw.sh: line 9: warning: arr: circular name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n list=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((list[j] < list[k])); then\n            sum=$(max_sum_increasing_subseq list[@] j $4)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + list[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpu53rdgvr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp19thu6mu.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local max=0\n  local sum=0\n  for (( ; j < ${#arr[@]}; j++ )); do\n    if (( arr[j] > arr[i] )); then\n      sum=$(max_sum_increasing_subseq \"$1\" \"$k\" \"$j\" \"$((j+1))\")\n      if (( sum > max )); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[i]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local j=$4\n    local sum=0\n    local max_sum=0\n    local max_sum_k=0\n    local max_sum_i=0\n    local max_sum_j=0\n    for ((j=0; j<i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n            sum=$(max_sum_increasing_subseq \"$1\" $k $j $j)\n            if [[ $sum -gt $max_sum ]]; then\n                max_sum=$sum\n                max_sum_k=$k\n                max_sum_i=$i\n                max_sum_j=$j\n            fi\n        fi\n    done\n    if [[ $max_sum_k -eq $max_sum_i ]]; then\n        echo $((max_sum + ${arr[i]}))\n    else\n        echo $max_sum\n    fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"${!1}\")\n  local k=$2\n  local i=$3\n  local j=$4\n  local max_sum=0\n  local sum=0\n  local max_sum_k=0\n  local sum_k=0\n  local max_sum_i=0\n  local sum_i=0\n\n  for ((j=0; j<k; j++)); do\n    sum_k=${arr[j]}\n    for ((i=0; i<j; i++)); do\n      if (( arr[i] < arr[j] )); then\n        sum_i=${arr[i]}\n        if (( sum_i > max_sum_i )); then\n          max_sum_i=$sum_i\n        fi\n      fi\n    done\n    sum_k=$((sum_k+max_sum_i))\n    if (( sum_k > max_sum_k )); then\n      max_sum_k=$sum_k\n    fi\n  done\n  echo $max_sum_k\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmptwds4f6p.sh: line 9: 1 101 2 3 100 4 5: invalid variable name\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $j $k $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp62xug10n.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(( sum + arr[j] ))\n      if (( sum > max_sum )); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j $4)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpn873z1oz.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local j=$4\n  local max=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[i])); then\n      sum=$(max_sum_increasing_subseq arr k $j $j)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpfi9t4009.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"${!1}\")\n  local k=$2\n  local i=$3\n  local j=$4\n  local max_sum=0\n  local sum=0\n  local sum_k=0\n  local sum_i=0\n  local sum_j=0\n  local sum_k_i=0\n  local sum_k_j=0\n  local sum_i_j=0\n  local sum_k_i_j=0\n\n  # kth element\n  sum_k=${arr[$k]}\n\n  # i-th element\n  sum_i=${arr[$i]}\n\n  # j-th element\n  sum_j=${arr[$j]}\n\n  # kth and i-th element\n  sum_k_i=$((sum_k + sum_i))\n\n  # kth and j-th element\n  sum_k_j=$((sum_k + sum_j))\n\n  # i-th and j-th element\n  sum_i_j=$((sum_i + sum_j))\n\n  # kth, i-th and j-th element\n  sum_k_i_j=$((sum_k + sum_i + sum_j))\n\n  # find the maximum sum of increasing subsequence from prefix until ith index\n  for (( index=0; index<$i; index++ )); do\n    sum=${arr[$index]}\n    for (( index_j=$index; index_j<$i; index_j++ )); do\n      if (( arr[$index_j] > arr[$index] )); then\n        sum=$((sum + arr[$index_j]))\n      fi\n    done\n    if (( sum > max_sum )); then\n      max_sum=$sum\n    fi\n  done\n\n  # find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n  if (( sum_k > max_sum )); then\n    max_sum=$sum_k\n  fi\n  if (( sum_i > max_sum )); then\n    max_sum=$sum_i\n  fi\n  if (( sum_j >\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpz0kvyync.sh: line 64: unexpected EOF while looking for matching `)'\\n/tmp/tmpz0kvyync.sh: line 79: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j $4)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp37p3p69s.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr\n  local -i i j k\n  local -i max_sum\n  local -i curr_sum\n  local -i curr_max_sum\n  local -i curr_max_sum_k\n  local -i curr_max_sum_i\n  local -i max_sum_i\n  local -i max_sum_k\n  local -i max_sum_j\n  local -i curr_sum_i\n  local -i curr_sum_k\n  local -i curr_sum_j\n  local -i curr_sum_j_k\n  local -i curr_sum_j_i\n  local -i curr_sum_j_k_i\n  local -i curr_sum_j_k_i_max\n  local -i curr_sum_j_k_i_max_sum\n  local -i curr_sum_j_k_i_max_sum_i\n  local -i curr_sum_j_k_i_max_sum_k\n  local -i curr_sum_j_k_i_max_sum_j\n  local -i curr_sum_j_k_i_max_sum_j_k\n  local -i curr_sum_j_k_i_max_sum_j_i\n  local -i curr_sum_j_k_i_max_sum_j_k_i\n  local -i curr_sum_j_k_i_max_sum_j_k_i_max\n  local -i curr_sum_j_k_i_max_sum_j_k_i_max_sum\n  local -i curr_sum_j_k_i_max_sum_j_k_i_max_sum_i\n  local -i curr_sum_j_k_i_max_sum_j_k_i_max_sum_k\n  local -i curr_sum_j_k_i_max_sum_j_k_i_max_sum_j\n  local -i curr_sum_j_k_i_max_sum_j\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    local l=0\n    local m=0\n\n    for ((j=0; j<i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$(max_sum_increasing_subseq arr j $k)\n            if [[ $sum -gt $max_sum ]]; then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    max_sum=$((max_sum + arr[k]))\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp0ojv7e7y.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n\n    if [ $i -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    local max_sum=0\n    local sum=0\n    for ((j=i; j<n; j++)); do\n        sum=$(max_sum_increasing_subseq arr $k $((j+1)) $n)\n        if [ $j -lt $k ] && [ ${arr[$j]} -gt ${arr[$i]} ]; then\n            sum=$((sum+arr[j]))\n        fi\n        if [ $sum -gt $max_sum ]; then\n            max_sum=$sum\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpqet9eiye.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpqet9eiye.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpqet9eiye.sh: line 9: warning: arr: circular name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local n=$2\n    local k=$3\n    local i=$4\n    local max=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k] && j != k)); then\n            sum=$((${arr[j]} + ${arr[k]}))\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq \"${arr[@]}\" $j $j $n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max=0\n\n  for (( j=0; j<i; j++ )); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(max_sum_increasing_subseq arr k j)\n      if (( sum > max )); then\n        max=$sum\n      fi\n    fi\n  done\n\n  echo $(( max + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmphrm1lkgo.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=${arr[j]}\n            sum=$((sum + max_sum_increasing_subseq arr[@] k j n))\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpbh_6xwpm.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j n)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpecx6kvpz.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max=0\n    local j=0\n\n    for ((j=0; j<k; j++)); do\n        if ((arr[j] < arr[k] && j < i)); then\n            sum=$(max_sum_increasing_subseq arr[@] j $i)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpa_ow37zu.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    # Write your code here\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=$4\n    local max=0\n    for ((j=0;j<i;j++)); do\n        if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n            max=$(max_sum_increasing_subseq arr $k $j $sum)\n        fi\n    done\n    if [[ $max -gt $sum ]]; then\n        echo $max\n    else\n        echo $((sum+arr[k]))\n    fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpaw2kts58.sh: line 10: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"$@\")\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq \"${arr[@]}\" $j $i $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmphi9q87jo.sh: line 17: ((: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"$@\")\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for (( j=0; j<i; j++ )); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$(( ${arr[j]} + ${arr[k]} ))\n            if [[ $sum -gt $max_sum ]]; then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoosuxorn.sh: line 16: [[: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"$@\")\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local max_sum_k=0\n    local max_sum_i=0\n    local max_sum_k_i=0\n    local max_sum_k_i_sum=0\n    local max_sum_k_i_max_sum=0\n    local max_sum_k_i_max_sum_k=0\n    local max_sum_k_i_max_sum_i=0\n    local max_sum_k_i_max_sum_k_i=0\n    local max_sum_k_i_max_sum_k_i_sum=0\n    local max_sum_k_i_max_sum_k_i_max_sum=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k=0\n    local max_sum_k_i_max_sum_k_i_max_sum_i=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k_i=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k_i_sum=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k_i_max_sum=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k_i_max_sum_k=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k_i_max_sum_i=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k_i_max_sum_k_i=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k_i_max_sum_k_i_sum=0\n    local max_sum_k_i_max_sum_k_i_max_sum_k_i_\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local j=$4\n    local max=0\n    local sum=0\n    local temp=0\n    for ((; j < ${#arr[@]}; j++)); do\n        if [[ ${arr[j]} -gt ${arr[i]} ]]; then\n            temp=$(max_sum_increasing_subseq \"$1\" \"$k\" \"$j\" \"$j\")\n            if [[ $temp -gt $max ]]; then\n                max=$temp\n            fi\n        fi\n    done\n    sum=$((${arr[i]} + $max))\n    echo $sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((arr[k] + max_sum))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpfkovz8iq.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr[@] j $((j+1)))\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpffo4s2q_.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    local n=${#arr[@]}\n\n    if [ $i -eq $k ]; then\n        echo ${arr[$i]}\n        return\n    fi\n\n    for (( j=0; j<$i; j++ )); do\n        if [ ${arr[$j]} -lt ${arr[$k]} ]; then\n            sum=$(max_sum_increasing_subseq arr $k $j)\n            if [ $sum -gt $max_sum ]; then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $((max_sum + arr[$k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpfhfj0td9.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpfhfj0td9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 31: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 31: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 31: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 31: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 31: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 31: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 23: warning: arr: circular name reference\\n/tmp/tmpfhfj0td9.sh: line 23: warning: arr: circular name referenc",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    local max_sum_k=0\n    local sum_k=0\n\n    if [ $i -eq 0 ]; then\n        max_sum=${arr[0]}\n    else\n        for ((j=0; j<$i; j++)); do\n            sum_k=0\n            sum=0\n            if [ ${arr[$j]} -lt ${arr[$i]} ]; then\n                sum_k=$(max_sum_increasing_subseq arr $k $j $n)\n                sum=$(max_sum_increasing_subseq arr $i $j $n)\n                if [ $sum_k -gt $sum ]; then\n                    sum=$sum_k\n                fi\n            fi\n            if [ $sum -gt $max_sum ]; then\n                max_sum=$sum\n            fi\n        done\n    fi\n    if [ $k -gt $i ]; then\n        max_sum_k=$(max_sum_increasing_subseq arr $k $i $n)\n        if [ $max_sum_k -gt $max_sum ]; then\n            max_sum=$max_sum_k\n        fi\n    fi\n    echo $((max_sum + ${arr[$i]}))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "<_io.BufferedReader name=8>",
      "stderr": "<_io.BufferedReader name=12>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"${!1}\")\n  local k=$2\n  local i=$3\n  local j=$4\n  local max=0\n  local sum=0\n  for (( ; j < i; j++ )); do\n    sum=$(( arr[j] + max_sum_increasing_subseq arr[@] k $(( j + 1 )) $(( j + 1 )) ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp6bryuxny.sh: line 9: 1 101 2 3 100 4 5: invalid variable name\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$((sum + arr[j]))\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpn3nmf_2z.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"$@\")\n  local k=$2\n  local i=$3\n  local sum=0\n  local max=0\n  local j=0\n\n  for ((j=0; j<i; j++)); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(( arr[j] + arr[k] ))\n      if (( sum > max )); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpq5x7ji2p.sh: line 17: ((: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$((arr[j] + max_sum_increasing_subseq arr k j))\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpb4rup3bo.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n\n    if [ $i -eq 0 ]; then\n        sum=${arr[$k]}\n    else\n        local max=0\n        for j in $(seq 0 $((i-1))); do\n            local tmp=$(max_sum_increasing_subseq arr $k $j)\n            if [ $tmp -gt $max ]; then\n                max=$tmp\n            fi\n        done\n        sum=$((max + arr[k]))\n    fi\n    echo $sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkgz27yji.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpkgz27yji.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 20: [: -gt: unary operator expected\\n/tmp/tmpkgz27yji.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 20: [: -gt: unary operator expected\\n/tmp/tmpkgz27yji.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 15: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 20: [: -gt: unary operator expected\\n/tmp/tmpkgz27yji.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpkgz27yji.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  for ((j=0; j < i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr k j n)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpupaqj5zq.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr\n  local -i k\n  local -i i\n  local -i j\n  local -i max\n  local -i sum\n  local -i max_sum\n  local -i max_sum_k\n  local -i max_sum_i\n\n  arr=($1)\n  k=$2\n  i=$3\n  j=$4\n\n  max=${arr[$i]}\n  sum=0\n  max_sum=0\n  max_sum_k=$k\n  max_sum_i=$i\n\n  for ((j=i; j<k; j++)); do\n    if (( arr[j] < max )); then\n      max=${arr[j]}\n      sum=0\n    fi\n    sum=$(( sum + arr[j] ))\n    if (( sum > max_sum )); then\n      max_sum=$sum\n      max_sum_k=$k\n      max_sum_i=$j\n    fi\n  done\n\n  echo \"$max_sum_k $max_sum_i\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local max=0\n  local sum=0\n\n  if [ $i -eq $k ]; then\n    echo \"${arr[$i]}\"\n    return\n  fi\n\n  for ((j=i+1; j<=k; j++)); do\n    sum=$(max_sum_increasing_subseq \"$1\" \"$k\" \"$j\" \"$j\")\n    if [ $sum -gt $max ]; then\n      max=$sum\n    fi\n  done\n\n  echo \"$((max + arr[i]))\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmprlsdd4gz.sh: line 23: [: -gt: unary operator expected\\n/tmp/tmprlsdd4gz.sh: line 23: [: -gt: unary operator expected\\n/tmp/tmprlsdd4gz.sh: line 23: [: -gt: unary operator expected\\n/tmp/tmprlsdd4gz.sh: line 23: [: -gt: unary operator expected\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local j=$4\n    local max=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[i])); then\n            sum=$(max_sum_increasing_subseq arr k $j $j)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[i]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmptmzcupdw.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local max_sum=0\n  local sum=0\n  for (( ; j < k; j++ )); do\n    sum=$(( arr[j] + max_sum_increasing_subseq \"${arr[@]}\" $k $j $(( j + 1 )) ))\n    if [[ $sum -gt $max_sum ]]; then\n      max_sum=$sum\n    fi\n  done\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp8nb_ohru.sh: line 16: arr[j] + max_sum_increasing_subseq 1 101 2 3 100 4 5 7 6 7 : syntax error in expression (error token is \"1 101 2 3 100 4 5 7 6 7 \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpewpku_s9.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])) && ((sum + arr[j] > max_sum)); then\n            max_sum=$((sum + arr[j]))\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmplo6er8qg.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    if [[ $i -eq $n ]]; then\n        echo 0\n        return\n    fi\n\n    if [[ $k -eq $n ]]; then\n        echo 0\n        return\n    fi\n\n    for (( j = i; j < k; j++ )); do\n        sum=$(max_sum_increasing_subseq arr $k $j $n)\n        if [[ $sum -gt $max_sum ]]; then\n            max_sum=$sum\n        fi\n    done\n\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "<_io.BufferedReader name=11>",
      "stderr": "<_io.BufferedReader name=15>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local n=$3\n  local i=$4\n  local max=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr[@] j $n $i)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9yzmoj9v.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a list=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local max_sum=0\n  local sum=0\n  local -i index=0\n\n  if [ $i -eq $k ]; then\n    echo ${list[$i]}\n    return\n  fi\n\n  for ((index=i; index<k; index++)); do\n    sum=$(max_sum_increasing_subseq \"$1\" $k $index $((index+1)))\n    if [ $((sum + list[$i])) -gt $max_sum ]; then\n      max_sum=$((sum + list[$i]))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "<_io.BufferedReader name=13>",
      "stderr": "<_io.BufferedReader name=16>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    local n=${#arr[@]}\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $k $j)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpt5cn81hl.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $j $i $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpajl58gyt.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$(max_sum_increasing_subseq arr $k $j $n)\n            if [[ $sum -gt $max ]]; then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpjz7652i1.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    local temp=0\n    local max_temp=0\n    local max_j=0\n    local max_i=0\n    for (( j=0; j<i; j++ )); do\n        if (( arr[j] < arr[k] )); then\n            temp=$(max_sum_increasing_subseq arr j $i)\n            if (( temp > max_temp )); then\n                max_temp=$temp\n                max_j=$j\n            fi\n        fi\n    done\n    if (( max_temp > 0 )); then\n        max_i=$max_j\n    fi\n    for (( j=0; j<=max_i; j++ )); do\n        if (( arr[j] < arr[k] )); then\n            sum=$(( sum + arr[j] ))\n        fi\n    done\n    max_sum=$(( sum + arr[k] ))\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpe_slta65.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max=0\n  local max_k=0\n  local max_i=0\n  local max_sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$((arr[j] + arr[k]))\n      if ((sum > max)); then\n        max=$sum\n        max_k=$k\n        max_i=$j\n      fi\n    fi\n  done\n  if ((max > 0)); then\n    max_sum=$((max + max_sum_increasing_subseq arr max_k max_i))\n  fi\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpn4sw2r1h.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j $n)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp14l6bfa3.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n _arr=$1\n    local _k=$2\n    local _i=$3\n    local _sum=0\n    local _max=0\n    local _j=0\n    for (( _j=0; _j<_i; _j++ )); do\n        if (( ${_arr[_j]} < ${_arr[_k]} )); then\n            _sum=$(max_sum_increasing_subseq _arr $_j $_j)\n            if (( _sum > _max )); then\n                _max=$_sum\n            fi\n        fi\n    done\n    echo $(( _max + ${_arr[_k]} ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpc7l8tb8q.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpc7l8tb8q.sh: line 16: ((: <  : syntax error: operand expected (error token is \"<  \")\\n/tmp/tmpc7l8tb8q.sh: line 16: ((: <  : syntax error: operand expected (error token is \"<  \")\\n/tmp/tmpc7l8tb8q.sh: line 16: ((: <  : syntax error: operand expected (error token is \"<  \")\\n/tmp/tmpc7l8tb8q.sh: line 16: ((: <  : syntax error: operand expected (error token is \"<  \")\\n/tmp/tmpc7l8tb8q.sh: line 23: _max +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr $k $j $n)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpwmrvrvss.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"$@\")\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    local temp=0\n    local temp_sum=0\n\n    for ((j=0; j<i; j++)); do\n        temp=${arr[j]}\n        temp_sum=$(max_sum_increasing_subseq \"${arr[@]}\" $k $j $n)\n        if [[ $temp -lt $k && $temp_sum -gt $sum ]]; then\n            sum=$temp_sum\n        fi\n    done\n    max_sum=$((sum + k))\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "<_io.BufferedReader name=14>",
      "stderr": "<_io.BufferedReader name=10>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n\n    local max_sum=0\n    local sum=0\n\n    for (( j=0; j<i; j++ )); do\n        if (( arr[j] < arr[k] )); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $(( max_sum + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp4xqxhptv.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"$@\")\n    local k=$2\n    local n=$3\n    local i=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++))\n    do\n        if (( arr[j] < arr[k] ))\n        then\n            sum=$(max_sum_increasing_subseq \"${arr[@]}\" $j $n $((j+1)))\n            if (( sum > max_sum ))\n            then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp0c54icbb.sh: line 18: ((: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local n=$4\n\n    if (( i == k )); then\n        echo ${arr[$i]}\n    else\n        local max_sum=0\n        for (( j = 0; j < i; j++ )); do\n            local sum=$(max_sum_increasing_subseq \"$1\" $k $j $n)\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        done\n        echo $(( max_sum + arr[$i] ))\n    fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n _list=$1\n    local _k=$2\n    local _i=$3\n    local _kth=$4\n    local _sum=0\n    local _max=0\n    local _j=0\n    for ((_j=0; _j<_k; _j++)); do\n        if [[ ${_list[$_j]} -lt ${_list[$_kth]} ]]; then\n            _sum=$(max_sum_increasing_subseq _list $_j $_kth)\n            if [[ $_sum -gt $_max ]]; then\n                _max=$_sum\n            fi\n        fi\n    done\n    echo $((_max + ${_list[$_kth]}))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpzgvs5yf3.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpzgvs5yf3.sh: line 24: _max + : syntax error: operand expected (error token is \"+ \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr[@] $j $i $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpdzj26tyj.sh: line 9: 1 101 2 3 100 4 5: invalid variable name\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr\n  local -i k\n  local -i i\n  local -i j\n  local -i max\n  local -i max_sum\n  local -i sum\n  local -i max_i\n  local -i max_j\n  local -i max_k\n  local -i max_sum_i\n  local -i max_sum_j\n  local -i max_sum_k\n  IFS=' ' read -r -a arr <<< \"$1\"\n  k=\"$2\"\n  i=\"$3\"\n  j=\"$4\"\n  max=0\n  max_sum=0\n  for (( k=i; k<=j; k++ )); do\n    max=0\n    for (( l=i; l<k; l++ )); do\n      if (( arr[l] < arr[k] )); then\n        if (( max < arr[l] )); then\n          max=\"${arr[l]}\"\n          max_i=\"$l\"\n          max_j=\"$k\"\n        fi\n      fi\n    done\n    sum=\"$max\"\n    if (( sum > 0 )); then\n      sum+=\"${arr[k]}\"\n    else\n      sum=\"${arr[k]}\"\n    fi\n    if (( sum > max_sum )); then\n      max_sum=\"$sum\"\n      max_sum_i=\"$max_i\"\n      max_sum_j=\"$max_j\"\n      max_sum_k=\"$k\"\n    fi\n  done\n  echo \"$max_sum\"\n  echo \"$max_sum_i\"\n  echo \"$max_sum_j\"\n  echo \"$max_sum_k\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k] && arr[j] > max)); then\n      max=${arr[j]}\n      sum=$(max_sum_increasing_subseq arr $j $i)\n    fi\n  done\n  echo $((sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmprriryip1.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=${arr[j]}\n            sum=$((sum + max_sum_increasing_subseq arr k j n))\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp4q34k1p9.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    local temp=0\n\n    for ((j=0; j<i; j++)); do\n        temp=$(max_sum_increasing_subseq \"$1\" \"$2\" \"$j\" \"$4\")\n        if [[ $temp -gt $max_sum ]]; then\n            max_sum=$temp\n        fi\n    done\n\n    if [[ $k -gt $i ]]; then\n        sum=$((max_sum + arr[k]))\n    else\n        sum=$max_sum\n    fi\n\n    echo $sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmplza1hapr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"${!1}\")\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$(max_sum_increasing_subseq arr[@] $k $j $n)\n            if [[ $sum -gt $max ]]; then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + ${arr[k]}))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpypgagsts.sh: line 9: 1 101 2 3 100 4 5: invalid variable name\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr $j $i $n)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpy0fujr1_.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr\n    local -i i j k\n    local -i max_sum\n    local -i max_sum_i\n    local -i max_sum_j\n    local -i max_sum_k\n    local -i sum_i\n    local -i sum_j\n    local -i sum_k\n    local -i sum_ij\n    local -i sum_ik\n    local -i sum_jk\n    local -i sum_ijk\n    local -i sum_ij_jk\n    local -i sum_i_ik\n    local -i sum_i_jk\n    local -i sum_j_ik\n    local -i sum_j_jk\n    local -i sum_k_ik\n    local -i sum_k_jk\n    local -i sum_i_ik_jk\n    local -i sum_j_ik_jk\n    local -i sum_i_j_ik\n    local -i sum_i_j_jk\n    local -i sum_i_k_ik\n    local -i sum_i_k_jk\n    local -i sum_j_k_ik\n    local -i sum_j_k_jk\n    local -i sum_i_j_k_ik\n    local -i sum_i_j_k_jk\n    local -i sum_i_j_k_ik_jk\n    local -i sum_i_j_k_ik_jk_jk\n    local -i sum_i_j_k_ik_jk_ik\n    local -i sum_i_j_k_ik_jk_ik_jk\n    local -i sum_i_j_k_ik_jk_ik_jk_jk\n    local -i sum_i_j_k_ik_jk_ik_jk_ik\n    local -i sum_i_j_k_ik_jk_ik_jk_ik_jk\n    local -i sum_i_j_k_ik_jk_ik_jk_ik_jk_jk\n    local -i sum_i_j_k_ik_\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local list=\"$1\"\n  local i=$2\n  local k=$3\n  local sum=0\n  local max_sum=0\n  local prev_sum=0\n  local prev_max_sum=0\n\n  for j in $(seq 0 $i); do\n    if [ $j -lt $k ]; then\n      prev_sum=$(echo \"$list\" | cut -d ' ' -f $j)\n      sum=$(($sum + $prev_sum))\n      if [ $prev_sum -gt $prev_max_sum ]; then\n        prev_max_sum=$prev_sum\n      fi\n    fi\n  done\n\n  max_sum=$(($sum + $(echo \"$list\" | cut -d ' ' -f $k)))\n\n  if [ $max_sum -lt $prev_max_sum ]; then\n    max_sum=$prev_max_sum\n  fi\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'cut: fields are numbered from 1\\nTry \\'cut --help\\' for more information.\\n/tmp/tmpm8yucy5s.sh: line 20: 0 + : syntax error: operand expected (error token is \"+ \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr\n    local -i i k j\n    local -i max_sum\n    local -i sum\n    local -i max_sum_k\n    local -i sum_k\n    local -i max_sum_k_i\n    local -i sum_k_i\n    IFS=' ' read -r -a arr <<< \"$1\"\n    i=$2\n    k=$3\n    j=$4\n    # max_sum_k_i is the maximum sum of increasing subsequence from prefix until ith index and also including kth element.\n    # max_sum_k is the maximum sum of increasing subsequence from prefix until kth index.\n    # max_sum is the maximum sum of increasing subsequence from prefix until ith index.\n    max_sum_k_i=0\n    max_sum_k=0\n    max_sum=0\n    for ((j=0; j<i; j++))\n    do\n        if (( arr[j] < arr[i] ))\n        then\n            sum_k_i=max_sum_k+arr[i]\n            sum_k=max_sum\n            sum=max_sum_k_i\n            if (( sum_k_i > max_sum_k_i ))\n            then\n                max_sum_k_i=sum_k_i\n            fi\n            if (( sum_k > max_sum_k ))\n            then\n                max_sum_k=sum_k\n            fi\n            if (( sum > max_sum ))\n            then\n                max_sum=sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    for ((j=0; j<i; j++))\n    do\n        if ((arr[j] < arr[k]))\n        then\n            sum=$(max_sum_increasing_subseq arr[@] $j $i)\n            if ((sum > max_sum))\n            then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpiz12rge6.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpug54jvrb.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n      sum=$((${arr[j]} + ${arr[k]}))\n      if [[ $sum -gt $max_sum ]]; then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkny4a9iu.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr[@] j $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpc3l569k4.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local j=$4\n    local max_sum=0\n    local sum=0\n    local sum_k=0\n    local sum_j=0\n    local sum_k_j=0\n    local max_sum_k=0\n    local max_sum_j=0\n    local max_sum_k_j=0\n    local max_sum_k_j_i=0\n    local max_sum_k_j_i_1=0\n    local max_sum_k_j_i_2=0\n    local max_sum_k_j_i_3=0\n    local max_sum_k_j_i_4=0\n    local max_sum_k_j_i_5=0\n    local max_sum_k_j_i_6=0\n    local max_sum_k_j_i_7=0\n    local max_sum_k_j_i_8=0\n    local max_sum_k_j_i_9=0\n    local max_sum_k_j_i_10=0\n    local max_sum_k_j_i_11=0\n    local max_sum_k_j_i_12=0\n    local max_sum_k_j_i_13=0\n    local max_sum_k_j_i_14=0\n    local max_sum_k_j_i_15=0\n    local max_sum_k_j_i_16=0\n    local max_sum_k_j_i_17=0\n    local max_sum_k_j_i_18=0\n    local max_sum_k_j_i_19=0\n    local max_sum_k_j_i_20=0\n    local max_sum_k_j_i_21=0\n    local max_sum_k_j_i_22=0\n    local max_sum_k_j_i_23=0\n    local max_sum_k_j_i_24=0\n    local max_sum_k_j_i_25\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr\n    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i sum\n    local -i max_sum\n    local -i max_sum_k\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=\"$2\"\n    i=\"$3\"\n    j=\"$4\"\n\n    max=0\n    sum=0\n    max_sum=0\n    max_sum_k=0\n\n    for (( ; i < k; i++ )); do\n        if (( arr[i] < arr[k] )); then\n            sum=$(( sum + arr[i] ))\n            if (( sum > max_sum )); then\n                max_sum=\"$sum\"\n                max_sum_k=\"$i\"\n            fi\n        fi\n    done\n\n    for (( ; j < k; j++ )); do\n        if (( arr[j] < arr[k] )); then\n            max=$(( max + arr[j] ))\n        fi\n    done\n\n    echo \"$(( max_sum + max ))\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr $j $i $n)\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpjmnerxf0.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $j $i $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8yv_ho92.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local max_sum=0\n  local sum=0\n  local sum_k=0\n  local max_sum_k=0\n  local sum_i=0\n  local max_sum_i=0\n  local sum_j=0\n  local max_sum_j=0\n  local sum_ij=0\n  local max_sum_ij=0\n  local sum_ik=0\n  local max_sum_ik=0\n  local sum_jk=0\n  local max_sum_jk=0\n  local sum_ijk=0\n  local max_sum_ijk=0\n\n  # find max sum including k\n  for ((j=0; j<k; j++)); do\n    sum_k=0\n    if ((arr[j] < arr[k])); then\n      sum_k=${arr[k]}\n      if ((max_sum_k < sum_k)); then\n        max_sum_k=${sum_k}\n      fi\n    fi\n  done\n\n  # find max sum including i\n  for ((j=0; j<i; j++)); do\n    sum_i=0\n    if ((arr[j] < arr[i])); then\n      sum_i=${arr[i]}\n      if ((max_sum_i < sum_i)); then\n        max_sum_i=${sum_i}\n      fi\n    fi\n  done\n\n  # find max sum including j\n  for ((j=0; j<j; j++)); do\n    sum_j=0\n    if ((arr[j] < arr[j])); then\n      sum_j=${arr[j]}\n      if ((max_sum_j < sum_j)); then\n        max_sum_j=${sum_j}\n      fi\n    fi\n  done\n\n  # find max sum including i and j\n  for ((j=0; j<i; j++)); do\n    sum_ij=0\n    if ((arr[j] < arr[i])); then\n      sum_ij=${arr[i]}\n\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpl_3nwwrz.sh: line 69: syntax error near unexpected token `}'\\n/tmp/tmpl_3nwwrz.sh: line 69: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local max_sum_k=0\n  local max_sum_i=0\n\n  for (( j=0; j<i; j++ )); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(( arr[j] + max_sum_increasing_subseq[j][k] ))\n      if (( sum > max_sum )); then\n        max_sum=$sum\n        max_sum_k=$k\n        max_sum_i=$j\n      fi\n    fi\n  done\n\n  max_sum_increasing_subseq[i][k]=$max_sum\n  max_sum_increasing_subseq_k[i][k]=$max_sum_k\n  max_sum_increasing_subseq_i[i][k]=$max_sum_i\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpwjvn6f34.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpwjvn6f34.sh: line 28: max_sum_increasing_subseq[i][k]=0: command not found\\n/tmp/tmpwjvn6f34.sh: line 29: max_sum_increasing_subseq_k[i][k]=0: command not found\\n/tmp/tmpwjvn6f34.sh: line 30: max_sum_increasing_subseq_i[i][k]=0: command not found\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local j=0\n\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$((arr[j] + max_sum_increasing_subseq arr k j))\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpl53c94yk.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    if [ $i -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    for ((j=i; j<k; j++)); do\n        sum=$(max_sum_increasing_subseq arr $k $((j+1)) $n)\n        if [ $((arr[j] + sum)) -gt $max_sum ]; then\n            max_sum=$((arr[j] + sum))\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpw154rd5y.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpw154rd5y.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 24: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpw154rd5y.sh: line 9: warning: arr: circular name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"$@\")\n  local k=$2\n  local n=$3\n  local i=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n  local temp=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      temp=$(max_sum_increasing_subseq \"${arr[@]}\" $k $n $j)\n      if ((temp > max_sum)); then\n        max_sum=$temp\n      fi\n    fi\n  done\n  sum=$((arr[k] + max_sum))\n  echo $sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmxvjelkm.sh: line 18: ((: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $k $j $n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpntb93j_2.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpug54jvrb.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k] && j != k)); then\n            sum=$(max_sum_increasing_subseq arr $k $j $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpsrm3rinr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local j=$4\n\n    local max_sum=0\n    local sum=0\n\n    for (( ; j < k; j++ )); do\n        sum=0\n        for (( ; i < j; i++ )); do\n            if (( arr[i] < arr[j] )); then\n                sum=$(( sum + arr[i] ))\n            fi\n        done\n        if (( sum > max_sum )); then\n            max_sum=$sum\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp3asudsak.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local max_sum_k=0\n\n    for ((j = 0; j < i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr[@] j $((j + 1)))\n            if ((sum > max_sum)); then\n                max_sum=$sum\n                max_sum_k=$j\n            fi\n        fi\n    done\n\n    if ((max_sum_k == 0)); then\n        echo $((arr[k] + max_sum))\n    else\n        echo $((arr[k] + max_sum - arr[max_sum_k]))\n    fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpum0q5fl6.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local j=0\n  local n=${#arr[@]}\n\n  if [[ $i -eq $n ]]; then\n    echo 0\n    return\n  fi\n\n  if [[ $k -eq $n ]]; then\n    echo 0\n    return\n  fi\n\n  if [[ $i -eq $k ]]; then\n    echo ${arr[$k]}\n    return\n  fi\n\n  for ((j=i; j<k; j++)); do\n    sum=$(max_sum_increasing_subseq arr $k $j)\n    if [[ $sum -gt $max_sum ]]; then\n      max_sum=$sum\n    fi\n  done\n\n  echo $((max_sum + arr[$k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "<_io.BufferedReader name=5>",
      "stderr": "<_io.BufferedReader name=18>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr\n    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i sum\n    local -i max_sum\n    local -i max_sum_k\n    local -i max_sum_i\n    local -i max_sum_j\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=\"$2\"\n    i=\"$3\"\n    j=\"$4\"\n\n    max_sum=0\n    max_sum_k=0\n    max_sum_i=0\n    max_sum_j=0\n\n    for ((i=0; i<k; i++)); do\n        max=0\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i] && max < arr[j])); then\n                max=\"${arr[j]}\"\n            fi\n        done\n        arr[i]=\"$((arr[i] + max))\"\n    done\n\n    for ((i=0; i<k; i++)); do\n        if ((max_sum < arr[i])); then\n            max_sum=\"${arr[i]}\"\n            max_sum_k=\"$i\"\n        fi\n    done\n\n    max_sum_i=\"$i\"\n    max_sum_j=\"$j\"\n\n    echo \"$max_sum $max_sum_k $max_sum_i $max_sum_j\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n\n    if [[ $i -eq 0 ]]; then\n        echo ${arr[$k]}\n    else\n        local max=0\n        for j in $(seq 0 $((i-1))); do\n            local sum=$(max_sum_increasing_subseq arr $k $j $n)\n            if [[ $sum -gt $max ]]; then\n                max=$sum\n            fi\n        done\n        echo $((max + ${arr[$k]}))\n    fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp1gjhw9p6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 15: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 15: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 15: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 15: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 24: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 24: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 24: max + : syntax error: operand expected (error token is \"+ \")\\n/tmp/tmp1gjhw9p6.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 15: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 15: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp1gjhw9p6.sh: line 9: local: ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$(max_sum_increasing_subseq arr j $n)\n            if [[ $sum -gt $max_sum ]]; then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + ${arr[k]}))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp55im6mfp.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmp55im6mfp.sh: line 24: max_sum + : syntax error: operand expected (error token is \"+ \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    sum=0\n    for ((l=j; l<i; l++)); do\n      if ((arr[l] < arr[k])); then\n        sum=$((sum + arr[l]))\n      fi\n    done\n    if ((sum > max_sum)); then\n      max_sum=$sum\n    fi\n  done\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmppujzzsy5.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a A=($1)\n    local k=$2\n    local i=$3\n    local j=$4\n    local max=0\n    local sum=0\n    local -a S\n    local -a T\n    local -a R\n    local -a P\n    local -a Q\n    local -a C\n    local -a D\n    local -a E\n    local -a F\n    local -a G\n    local -a H\n    local -a I\n    local -a J\n    local -a K\n    local -a L\n    local -a M\n    local -a N\n    local -a O\n    local -a P\n    local -a Q\n    local -a R\n    local -a S\n    local -a T\n    local -a U\n    local -a V\n    local -a W\n    local -a X\n    local -a Y\n    local -a Z\n    local -a AA\n    local -a AB\n    local -a AC\n    local -a AD\n    local -a AE\n    local -a AF\n    local -a AG\n    local -a AH\n    local -a AI\n    local -a AJ\n    local -a AK\n    local -a AL\n    local -a AM\n    local -a AN\n    local -a AO\n    local -a AP\n    local -a AQ\n    local -a AR\n    local -a AS\n    local -a AT\n    local -a AU\n    local -a AV\n    local -a AW\n    local -a AX\n    local -a AY\n    local -a AZ\n    local -a BA\n    local -a BB\n    local -a BC\n    local -a BD\n    local -a BE\n    local -a BF\n    local -a BG\n    local -a BH\n    local -a BI\n    local -a BJ\n    local -a BK\n    local -a BL\n    local -a BM\n    local -a BN\n    local -a BO\n    local -a BP\n    local -a BQ\n    local -a BR\n    local -a BS\n    local -a BT\n    local -a BU\n    local -a BV\n    local\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max_sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j $k)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmprhdk9ciq.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a list=($1)\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((list[j] < list[k])); then\n            sum=$(max_sum_increasing_subseq \"${list[@]}\" $j $j $n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + list[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a list=($1)\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n\n    if [ $i -eq 0 ]; then\n        max_sum=${list[$k]}\n    else\n        for ((j=0; j<i; j++)); do\n            sum=$(max_sum_increasing_subseq \"$1\" $k $j $n)\n            if [ $sum -gt $max_sum ]; then\n                max_sum=$sum\n            fi\n        done\n        max_sum=$((max_sum + list[k]))\n    fi\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpm83o5ea0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpm83o5ea0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpm83o5ea0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpm83o5ea0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpm83o5ea0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpm83o5ea0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpm83o5ea0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpm83o5ea0.sh: line 21: [: -gt: unary operator expected\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local sum=0\n  local max_sum=0\n  local max_sum_i=0\n  local max_sum_j=0\n  local max_sum_k=0\n  local max_sum_l=0\n\n  for ((l=0; l<=i; l++)); do\n    max_sum_l=$(max_sum_increasing_subseq \"$1\" \"$2\" \"$l\" \"$j\")\n    if [ $max_sum_l -gt $max_sum ]; then\n      max_sum=$max_sum_l\n    fi\n  done\n\n  if [ $i -eq $j ]; then\n    echo 0\n    return\n  fi\n\n  for ((j=0; j<=k; j++)); do\n    max_sum_j=$(max_sum_increasing_subseq \"$1\" \"$2\" \"$i\" \"$j\")\n    if [ $max_sum_j -gt $max_sum ]; then\n      max_sum=$max_sum_j\n    fi\n  done\n\n  for ((i=0; i<=k; i++)); do\n    max_sum_i=$(max_sum_increasing_subseq \"$1\" \"$2\" \"$i\" \"$j\")\n    if [ $max_sum_i -gt $max_sum ]; then\n      max_sum=$max_sum_i\n    fi\n  done\n\n  for ((k=0; k<=j; k++)); do\n    max_sum_k=$(max_sum_increasing_subseq \"$1\" \"$2\" \"$i\" \"$k\")\n    if [ $max_sum_k -gt $max_sum ]; then\n      max_sum=$max_sum_k\n    fi\n  done\n\n  for ((i=0; i<=j; i++)); do\n    sum=$(($sum + ${arr[$i]}))\n  done\n\n  if [ $sum -gt $max_sum ]; then\n    echo $sum\n  else\n    echo $max_sum\n  fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190805,
      "stdout": "<_io.BufferedReader name=22>",
      "stderr": "<_io.BufferedReader name=9>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n\n    if [ $i -eq 0 ]; then\n        max_sum=${arr[0]}\n    else\n        for (( j=0; j<i; j++ )); do\n            if [ ${arr[j]} -lt ${arr[i]} ]; then\n                sum=$(max_sum_increasing_subseq arr $k $j)\n                if [ $sum -gt $max_sum ]; then\n                    max_sum=$sum\n                fi\n            fi\n        done\n    fi\n\n    if [ $i -lt $k ]; then\n        max_sum=$((max_sum + arr[i]))\n    fi\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp4yj9a54o.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmp4yj9a54o.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 16: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 16: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 29: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 29: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 16: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 16: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 29: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 29: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 29: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 29: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp4yj9a54o.sh: line 19: warning: arr: circular name referenc",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $j $i $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8yv_ho92.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    if [ $i -eq $k ]\n    then\n        echo ${arr[$i]}\n        return\n    fi\n\n    for (( j=0; j<$i; j++ ))\n    do\n        if [ ${arr[$j]} -lt ${arr[$k]} ]\n        then\n            sum=$(($(max_sum_increasing_subseq arr $k $j $n) + ${arr[$k]}))\n            if [ $sum -gt $max_sum ]\n            then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpo2vxettn.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpo2vxettn.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpo2vxettn.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpo2vxettn.sh: line 27: 0 + : syntax error: operand expected (error token is \"+ \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr[@] j $((i-1)))\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpz5717dgc.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n\n    if [ $i -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    if [ $k -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    if [ $k -eq $i ]; then\n        echo 0\n        return\n    fi\n\n    if [ $k -lt $i ]; then\n        echo 0\n        return\n    fi\n\n    for j in $(seq $i $((k-1))); do\n        if [ ${arr[$j]} -lt ${arr[$k]} ]; then\n            local sum=$(max_sum_increasing_subseq arr $k $((j+1)) $n)\n            if [ $sum -gt $max_sum ]; then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpftt8ys9d.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpftt8ys9d.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 36: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 36: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 36: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 36: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 36: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 36: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 36: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 36: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 44: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 44: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpftt8ys9d.sh: line 9: warning: arr: circular name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++))\n    do\n        if ((arr[j] < arr[k]))\n        then\n            sum=${arr[j]}\n            sum=$((sum+$(max_sum_increasing_subseq arr k j n)))\n            if ((sum > max_sum))\n            then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpuy5bphf2.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"${!1}\")\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$((arr[j] + max_sum_increasing_subseq arr[@] k j n))\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpcxc4_4uo.sh: line 9: 1 101 2 3 100 4 5: invalid variable name\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a list=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local max_sum=0\n  local sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n  local temp_j=0\n  local temp_i=0\n  local temp_k=0\n  local temp_max_sum=0\n  local temp_sum=0\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"$@\")\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq \"${arr[@]}\" $j $j $n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpc0vyhpql.sh: line 18: ((: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr[@] j $((i-1)) $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpq9jxkmcl.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr\n  local -i k\n  local -i i\n  local -i j\n  local -i max\n  local -i sum\n  local -i max_sum\n  local -i max_index\n  local -i sum_index\n  local -i sum_index_max\n  local -i sum_index_max_prev\n  local -i sum_index_max_prev_prev\n  local -i sum_index_max_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i sum_index_max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local list=($1)\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for (( j=0; j<i; j++ )); do\n        if (( list[j] < list[k] )); then\n            sum=$(( list[j] + max_sum_increasing_subseq \"${list[@]}\" $k $j $n ))\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    if (( max_sum == 0 )); then\n        max_sum=${list[k]}\n    fi\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  for (( j=0; j<i; j++ )); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(max_sum_increasing_subseq arr j n)\n      if (( sum > max_sum )); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $(( max_sum + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpa4hzvyuu.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmplc55uiz6.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr k j)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpao8eij6b.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n _arr=$1\n    local _k=$2\n    local _i=$3\n    local _j=$4\n    local _sum=0\n    local _max_sum=0\n    local _max_sum_k=0\n\n    if [[ $_k -le $_i ]]; then\n        echo \"k must be greater than i\"\n        return 1\n    fi\n\n    for (( _j=0; _j<_i; _j++ )); do\n        if [[ ${_arr[_j]} -lt ${_arr[_k]} ]]; then\n            _sum=$(( ${_arr[_j]} + ${_arr[_k]} ))\n            if [[ $_sum -gt $_max_sum ]]; then\n                _max_sum=$_sum\n                _max_sum_k=$_j\n            fi\n        fi\n    done\n\n    echo $_max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp1dqdk2hr.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    local temp=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            temp=$(max_sum_increasing_subseq arr $k $j $n)\n            if ((temp > max_sum)); then\n                max_sum=$temp\n            fi\n        fi\n    done\n    sum=$((arr[k] + max_sum))\n    echo $sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpcecbeq9h.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq \"${arr[@]}\" $j $j $n)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=($1)\n    local k=$2\n    local i=$3\n    local j=$4\n    local max=0\n    local sum=0\n    local sum_k=0\n    local sum_i=0\n    local sum_j=0\n    local sum_ij=0\n    local sum_ik=0\n    local sum_kj=0\n    local sum_ikj=0\n    local sum_ikj_max=0\n    local sum_ikj_max_prev=0\n    local sum_ikj_max_prev_prev=0\n    local sum_ikj_max_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local sum_ikj_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"${@:1:$2}\")\n  local k=$3\n  local i=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if [ ${arr[j]} -lt ${arr[k]} ]; then\n      sum=$((${arr[j]} + ${arr[k]}))\n      if [ $sum -gt $max_sum ]; then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpw172us21.sh: line 16: [: too many arguments\\n/tmp/tmpw172us21.sh: line 16: [: 7: unary operator expected\\n/tmp/tmpw172us21.sh: line 16: [: 4: unary operator expected\\n/tmp/tmpw172us21.sh: line 16: [: 6: unary operator expected\\n/tmp/tmpw172us21.sh: line 17: + : syntax error: operand expected (error token is \"+ \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local j=$4\n    local sum=0\n    local max_sum=0\n    local max_index=0\n    for ((j=0; j<i; j++)); do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n            sum=$((${arr[j]} + $(max_sum_increasing_subseq arr k j j)))\n            if [[ $sum -gt $max_sum ]]; then\n                max_sum=$sum\n                max_index=$j\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp1ktf0vsn.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n _list=$1\n  local _k=$2\n  local _i=$3\n  local _j=$4\n  local _max_sum=0\n  local _sum=0\n  local _index=0\n  local _list_len=${#_list[@]}\n  if [[ $_i -eq $_k ]]; then\n    echo 0\n    return\n  fi\n  for (( _index=0; _index<_i; _index++ )); do\n    _sum=$(max_sum_increasing_subseq _list $_k $_index $_i)\n    if [[ $_sum -gt $_max_sum ]]; then\n      _max_sum=$_sum\n    fi\n  done\n  _max_sum=$(( _max_sum + ${_list[$_i]} ))\n  echo $_max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpu904c3q_.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpu904c3q_.sh: line 9: local: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 16: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 27: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 27: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 27: _max_sum +  : syntax error: operand expected (error token is \"+  \")\\n/tmp/tmpu904c3q_.sh: line 9: local: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 16: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: local: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 16: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 27: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 27: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 27: _max_sum +  : syntax error: operand expected (error token is \"+  \")\\n/tmp/tmpu904c3q_.sh: line 27: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 27: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 27: _max_sum +  : syntax error: operand expected (error token is \"+  \")\\n/tmp/tmpu904c3q_.sh: line 9: local: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 16: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: local: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: warning: _list: circular name reference\\n/tmp/tmpu904c3q_.sh: line 9: warning: _list: circular name refer",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $k $j $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmphahxakif.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpewpku_s9.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k] && arr[j] > max)); then\n      max=${arr[j]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmplz_pcehq.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr\n    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i sum\n    local -i max_sum\n    local -i max_sum_k\n    local -i max_sum_i\n    local -i max_sum_j\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=\"$2\"\n    i=\"$3\"\n    j=\"$4\"\n\n    max_sum=0\n    for ((i=0; i<k; i++)); do\n        max=0\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                if (( max < arr[j] )); then\n                    max=\"${arr[j]}\"\n                fi\n            fi\n        done\n        sum=\"$(( max + arr[i] ))\"\n        if (( sum > max_sum )); then\n            max_sum=\"$sum\"\n            max_sum_k=\"$k\"\n            max_sum_i=\"$i\"\n            max_sum_j=\"$j\"\n        fi\n    done\n\n    echo \"$max_sum\"\n    echo \"$max_sum_k\"\n    echo \"$max_sum_i\"\n    echo \"$max_sum_j\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)) do\n        if ((arr[j] < arr[k])) then\n            sum=$(max_sum_increasing_subseq arr j $n)\n            if ((sum > max_sum)) then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpztyssai_.sh: line 17: syntax error near unexpected token `then'\\n/tmp/tmpztyssai_.sh: line 17: `        if ((arr[j] < arr[k])) then'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $j $i $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8yv_ho92.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"$@\")\n  local k=$2\n  local i=$3\n  local j=$4\n  local max=0\n  local sum=0\n  for (( ; j < k; j++ )); do\n    sum=0\n    for (( ; i < j; i++ )); do\n      if (( arr[i] < arr[j] )); then\n        sum=$(( sum + arr[i] ))\n      fi\n    done\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq arr j n)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9d7bm_3m.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local list=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local sum=0\n  local max=0\n\n  if [ $k -eq $i ]\n  then\n    echo ${list[$i]}\n    return\n  fi\n\n  for (( j=i; j<$k; j++ ))\n  do\n    if [ ${list[$j]} -lt ${list[$k]} ]\n    then\n      sum=$(($(max_sum_increasing_subseq \"$1\" $k $j $k) + ${list[$k]}))\n      if [ $sum -gt $max ]\n      then\n        max=$sum\n      fi\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplhil07vn.sh: line 24: [: 100: unary operator expected\\n/tmp/tmplhil07vn.sh: line 24: [: 4: unary operator expected\\n/tmp/tmplhil07vn.sh: line 24: [: 5: unary operator expected\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"$@\")\n  local k=$2\n  local n=$3\n  local i=$4\n  local max=0\n  local sum=0\n  local j=0\n  for ((j=0; j<i; j++)); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(max_sum_increasing_subseq \"${arr[@]}\" $j $n $((j+1)))\n      if (( sum > max )); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp9m5jvrpq.sh: line 17: ((: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n\n    for (( j=0; j<i; j++ )); do\n        if (( arr[j] < arr[k] )); then\n            sum=$(max_sum_increasing_subseq arr $k $j $n)\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $(( max_sum + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpb83_v2za.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max=0\n  local j=0\n\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$((arr[j] + max_sum_increasing_subseq arr k j))\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp4ir89vvk.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local j=$4\n    local max_sum=0\n    for (( j=0; j<i; j++ )); do\n        if (( arr[j] < arr[i] )); then\n            local sum=$(( arr[i] + max_sum_increasing_subseq arr k j ))\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkgxqdig0.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr $j $i $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpe_l0pys_.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  local j=0\n  for ((j=0; j<i; j++))\n  do\n    if [[ ${arr[j]} -lt ${arr[k]} ]]\n    then\n      sum=$(max_sum_increasing_subseq \"$1\" $j $j $n)\n      if [[ $sum -gt $max ]]\n      then\n        max=$sum\n      fi\n    fi\n  done\n  echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  local j=0\n\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k] && arr[j] > arr[i])); then\n      sum=$(max_sum_increasing_subseq \"$1\" $j $j $n)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr\n    local -i k\n    local -i i\n    local -i j\n    local -i max_sum\n    local -i sum\n    local -i max_sum_k\n    local -i sum_k\n    local -i max_sum_i\n    local -i sum_i\n    local -i max_sum_j\n    local -i sum_j\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=\"$2\"\n    i=\"$3\"\n    j=\"$4\"\n\n    max_sum=0\n    sum=0\n    max_sum_k=0\n    sum_k=0\n    max_sum_i=0\n    sum_i=0\n    max_sum_j=0\n    sum_j=0\n\n    for (( k = 0; k <= i; k++ )); do\n        sum=0\n        for (( j = k; j <= i; j++ )); do\n            if (( arr[j] > arr[j-1] )); then\n                sum=$(( sum + arr[j] ))\n            fi\n            if (( sum > max_sum_k )); then\n                max_sum_k=$sum\n            fi\n        done\n        if (( max_sum_k > max_sum_i )); then\n            max_sum_i=$max_sum_k\n        fi\n    done\n    max_sum_j=$(( max_sum_i + arr[i] ))\n    if (( max_sum_j > max_sum_i )); then\n        max_sum=$max_sum_j\n    else\n        max_sum=$max_sum_i\n    fi\n    echo \"$max_sum\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j $4)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpshjxu8cn.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local n=$4\n  local max_sum=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=$(max_sum_increasing_subseq \"${arr[*]}\" $j $((j+1)) $n)\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n    fi\n  done\n  echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j $k)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpvuz82c87.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"${@:1:$2}\")\n    local k=$3\n    local i=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$((arr[j] + max_sum_increasing_subseq \"${arr[@]}\" $2 $k $j))\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp5_y1_gsh.sh: line 17: ((: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    # Write your code here\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max=0\n    local j=0\n    local temp=0\n    for ((j=0;j<i;j++))\n    do\n        if [[ ${arr[j]} -lt ${arr[k]} ]]\n        then\n            temp=$(max_sum_increasing_subseq arr j $k)\n            if [[ $temp -gt $max ]]\n            then\n                max=$temp\n            fi\n        fi\n    done\n    sum=$((arr[k]+max))\n    echo $sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmps2e7qnrq.sh: line 10: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr\n    local -i k\n    local -i i\n    local -i j\n    local -i max_sum\n    local -i sum\n    local -i max_sum_k\n    local -i sum_k\n    local -i max_sum_i\n    local -i sum_i\n    local -i max_sum_j\n    local -i sum_j\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=\"$2\"\n    i=\"$3\"\n    j=\"$4\"\n\n    max_sum_k=0\n    sum_k=0\n    max_sum_i=0\n    sum_i=0\n    max_sum_j=0\n    sum_j=0\n\n    for (( idx = 0; idx < k; idx++ )); do\n        sum_k=\"${arr[$idx]}\"\n        if (( sum_k > max_sum_k )); then\n            max_sum_k=\"$sum_k\"\n        fi\n    done\n\n    for (( idx = k; idx < i; idx++ )); do\n        sum_i=\"${arr[$idx]}\"\n        if (( sum_i > max_sum_i )); then\n            max_sum_i=\"$sum_i\"\n        fi\n    done\n\n    for (( idx = i; idx < j; idx++ )); do\n        sum_j=\"${arr[$idx]}\"\n        if (( sum_j > max_sum_j )); then\n            max_sum_j=\"$sum_j\"\n        fi\n    done\n\n    max_sum=\"$max_sum_k\"\n    sum=\"$max_sum_k\"\n    if (( max_sum_i > max_sum )); then\n        max_sum=\"$max_sum_i\"\n    fi\n    if (( max_sum_j > max_sum )); then\n        max_sum=\"$max_sum_j\"\n    fi\n\n    if (( max_sum_k > 0 )); then\n        sum=\"$(( sum + max_sum_i ))\"\n    fi\n    if (( sum > max_sum )); then\n        max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9nq486ve.sh: line 69: syntax error near unexpected token `}'\\n/tmp/tmp9nq486ve.sh: line 69: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr=(\"${@:1:$2}\")\n    local k=$3\n    local i=$4\n    local max_sum=0\n    local sum=0\n    for j in $(seq 0 $((i-1))); do\n        if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n            sum=$((sum+arr[j]))\n        fi\n        if [[ $sum -gt $max_sum ]]; then\n            max_sum=$sum\n        fi\n    done\n    echo $((max_sum+arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpixpbaeyp.sh: line 15: [[: 1 101 2 3 100 4 5: syntax error in expression (error token is \"101 2 3 100 4 5\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"$@\")\n  local k=$2\n  local i=$3\n  local j=$4\n  local max_sum=0\n  local sum=0\n  local temp=0\n  for (( ; j < k; j++ )); do\n    if [[ ${arr[j]} -lt ${arr[k]} ]]; then\n      temp=$(max_sum_increasing_subseq \"${arr[@]}\" \"$k\" \"$j\" \"$j\")\n      if [[ $temp -gt $max_sum ]]; then\n        max_sum=$temp\n      fi\n    fi\n  done\n  sum=$(( arr[k] + max_sum ))\n  echo $sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  for ((j=0; j<i; j++)); do\n    if ((arr[j] < arr[k])); then\n      sum=${arr[j]}\n      sum=$((sum + max_sum_increasing_subseq arr k j n))\n      if ((sum > max)); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpnlzh5hs1.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if (( arr[j] < arr[k] )); then\n            sum=$(( sum + arr[j] ))\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpq1sr_ew3.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpds05hoeg.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpug54jvrb.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr k j)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpg_jfpsla.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local n=$4\n  local max=0\n  local sum=0\n  local j=0\n  for (( j=0; j<i; j++ )); do\n    if (( arr[j] < arr[k] )); then\n      sum=$(max_sum_increasing_subseq arr j $n)\n      if (( sum > max )); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $(( max + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpawxfhia8.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max_sum=0\n    local j=0\n    local k_index=0\n\n    for ((j = 0; j < i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$((sum + arr[j]))\n        fi\n    done\n\n    if ((sum > max_sum)); then\n        max_sum=$sum\n        k_index=$k\n    fi\n\n    echo \"$max_sum $k_index\"\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp2ixuk_5n.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=(\"$@\")\n  local k=$2\n  local i=$3\n  local j=$4\n  local max_sum=0\n  local sum=0\n  local max_sum_k=0\n\n  if [ $i -eq $j ]; then\n    echo ${arr[$i]}\n  else\n    for (( l=$i; l<=$j; l++ )); do\n      sum=$(max_sum_increasing_subseq \"${arr[@]}\" $k $i $l)\n      if [ $l -lt $k ]; then\n        max_sum_k=$(max_sum_increasing_subseq \"${arr[@]}\" $k $l $j)\n      fi\n      if [ $sum -gt $max_sum ] && [ $sum -gt $max_sum_k ]; then\n        max_sum=$sum\n      fi\n    done\n    echo $max_sum\n  fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190805,
      "stdout": "<_io.BufferedReader name=15>",
      "stderr": "<_io.BufferedReader name=17>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n\n    if [[ $i -eq 0 ]]; then\n        echo ${arr[0]}\n    else\n        local max_sum=0\n        for ((j=0; j<i; j++)); do\n            local sum=$(max_sum_increasing_subseq \"$1\" \"$2\" \"$j\" \"$4\")\n            if [[ $sum -gt $max_sum && ${arr[$j]} -lt ${arr[$i]} ]]; then\n                max_sum=$sum\n            fi\n        done\n        if [[ $k -gt $i ]]; then\n            echo $((max_sum + ${arr[$i]}))\n        else\n            echo $max_sum\n        fi\n    fi\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 25: max_sum + : syntax error: operand expected (error token is \"+ \")\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 25: max_sum + : syntax error: operand expected (error token is \"+ \")\\n/tmp/tmpvf6eitp6.sh: line 25: max_sum + : syntax error: operand expected (error token is \"+ \")\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 25: max_sum + : syntax error: operand expected (error token is \"+ \")\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmpvf6eitp6.sh: line 25: max_sum + : syntax error: operan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n\n    if [ $i -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    local max_sum=0\n    local sum=0\n    for j in $(seq $i $n); do\n        if [ $j -gt $k ]; then\n            break\n        fi\n\n        sum=$(max_sum_increasing_subseq arr $k $j $n)\n        if [ $((arr[j] + sum)) -gt $max_sum ]; then\n            max_sum=$((arr[j] + sum))\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190805,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=14>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n\n    if [ $i -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    if [ $k -eq $n ]; then\n        echo 0\n        return\n    fi\n\n    if [ $k -lt $i ]; then\n        echo 0\n        return\n    fi\n\n    for (( j=i; j<k; j++ )); do\n        sum=$(max_sum_increasing_subseq arr $k $((j+1)) $n)\n        if [ $((arr[j] + sum)) -gt $max_sum ]; then\n            max_sum=$((arr[j] + sum))\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpyrldq_n3.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n/tmp/tmpyrldq_n3.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 34: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 34: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 34: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 34: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmpyrldq_n3.sh: line 9: warning: arr: circular name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=${arr[j]}\n            sum=$((sum + max_sum_increasing_subseq arr k j n))\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190793,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp4q34k1p9.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=\"$1\"\n  local k=\"$2\"\n  local i=\"$3\"\n  local j=\"$4\"\n  local max_sum=0\n  local sum=0\n  local k_sum=0\n  local k_max_sum=0\n  local k_max_sum_index=0\n  local k_max_sum_prev_index=0\n  local k_max_sum_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_index=0\n  local k_max_sum_prev_prev_prev\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpdchm0h3d.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -a arr\n    local -i k\n    local -i i\n    local -i j\n    local -i max_sum\n    local -i sum\n    local -i max_sum_k\n    local -i sum_k\n    local -i max_sum_i\n    local -i sum_i\n    local -i max_sum_i_k\n    local -i sum_i_k\n    local -i max_sum_i_k_1\n    local -i sum_i_k_1\n    local -i max_sum_i_k_2\n    local -i sum_i_k_2\n    local -i max_sum_i_k_3\n    local -i sum_i_k_3\n    local -i max_sum_i_k_4\n    local -i sum_i_k_4\n    local -i max_sum_i_k_5\n    local -i sum_i_k_5\n    local -i max_sum_i_k_6\n    local -i sum_i_k_6\n    local -i max_sum_i_k_7\n    local -i sum_i_k_7\n    local -i max_sum_i_k_8\n    local -i sum_i_k_8\n    local -i max_sum_i_k_9\n    local -i sum_i_k_9\n    local -i max_sum_i_k_10\n    local -i sum_i_k_10\n    local -i max_sum_i_k_11\n    local -i sum_i_k_11\n    local -i max_sum_i_k_12\n    local -i sum_i_k_12\n    local -i max_sum_i_k_13\n    local -i sum_i_k_13\n    local -i max_sum_i_k_14\n    local -i sum_i_k_14\n    local -i max_sum_i_k_15\n    local -i sum_i_k_15\n    local -i max_sum_i_k_16\n    local -i sum_i_k_16\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j $n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmphm1_l259.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max_sum=0\n    local sum=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr j n)\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190787,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmplc55uiz6.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max=0\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq arr k j)\n            if ((sum > max)); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $((max + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpao8eij6b.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local n=$4\n    local max=0\n    local sum=0\n    local j=0\n\n    if [ $i -eq 0 ]\n    then\n        max=${arr[$i]}\n    else\n        for (( j=0; j<$i; j++ ))\n        do\n            sum=$(max_sum_increasing_subseq arr $k $j $n)\n            if [ $sum -gt $max ] && [ ${arr[$j]} -lt ${arr[$i]} ]\n            then\n                max=$sum\n            fi\n        done\n        max=$(( max + ${arr[$i]} ))\n    fi\n\n    echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp8ydrp37_.sh: line 9: local: `1 101 2 3 100 4 5\\': invalid variable name for name reference\\n/tmp/tmp8ydrp37_.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 24: [: -gt: unary operator expected\\n/tmp/tmp8ydrp37_.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 24: [: -gt: unary operator expected\\n/tmp/tmp8ydrp37_.sh: line 29: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 29: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 29: max +  : syntax error: operand expected (error token is \"+  \")\\n/tmp/tmp8ydrp37_.sh: line 24: [: -gt: unary operator expected\\n/tmp/tmp8ydrp37_.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: local: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 9: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 19: warning: arr: circular name reference\\n/tmp/tmp8ydrp37_.sh: line 24: [: -gt: unary operator expected\\n/tmp/tmp8ydrp37_.sh: line 9: local: warning: arr: circular na",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -a arr=($1)\n  local k=$2\n  local i=$3\n  local j=$4\n  local max=0\n  local sum=0\n  for (( ; j < ${#arr[@]}; j++ )); do\n    if (( arr[j] > arr[i] )); then\n      sum=$(max_sum_increasing_subseq \"$1\" \"$k\" \"$j\" \"$j\")\n      if (( sum > max )); then\n        max=$sum\n      fi\n    fi\n  done\n  echo $(( max + arr[i] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  local -n arr=$1\n  local k=$2\n  local i=$3\n  local sum=0\n  local max=0\n  local j=0\n  local temp=0\n  local temp_sum=0\n  local temp_max=0\n  for ((j=0; j<i; j++)); do\n    if [ ${arr[$j]} -lt ${arr[$k]} ]; then\n      temp_sum=$(max_sum_increasing_subseq arr $j $i)\n      temp_max=$((temp_sum + arr[$k]))\n      if [ $temp_max -gt $max ]; then\n        max=$temp_max\n      fi\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190805,
      "stdout": "<_io.BufferedReader name=11>",
      "stderr": "<_io.BufferedReader name=16>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local -n arr=$1\n    local k=$2\n    local i=$3\n    local sum=0\n    local max=0\n    for (( j=0; j<i; j++ )); do\n        if (( arr[j] < arr[k] )); then\n            sum=$(max_sum_increasing_subseq arr $k $j)\n            if (( sum > max )); then\n                max=$sum\n            fi\n        fi\n    done\n    echo $(( max + arr[k] ))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpxn645kl8.sh: line 9: local: `1 101 2 3 100 4 5': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n    local list=\"$1\"\n    local k=\"$2\"\n    local i=\"$3\"\n    local n=\"$4\"\n    local max_sum=0\n    local sum=0\n    local arr=($list)\n    local j=0\n    for ((j=0; j<i; j++)); do\n        if ((arr[j] < arr[k])); then\n            sum=$(max_sum_increasing_subseq \"$list\" \"$j\" \"$j\" \"$n\")\n            if ((sum > max_sum)); then\n                max_sum=$sum\n            fi\n        fi\n    done\n    echo $((max_sum + arr[k]))\n}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test",
      "timestamp": 1667190799,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}