{
  "name": "mbpp_294_max_val",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    if [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpppsnb2gx.sh: line 9: [: Python: integer expression expected\\n/tmp/tmpppsnb2gx.sh: line 9: [: version: integer expression expected\\n/tmp/tmpppsnb2gx.sh: line 9: [: Python: integer expression expected\\n/tmp/tmpppsnb2gx.sh: line 9: [: Python: integer expression expected\\n/tmp/tmpppsnb2gx.sh: line 9: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo \"$i\" | sed -e 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplv_zmw19.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmplv_zmw19.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmplv_zmw19.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmplv_zmw19.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmplv_zmw19.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max_val=0\n    for val in $1; do\n        if [[ $val -gt $max_val ]]; then\n            max_val=$val\n        fi\n    done\n    echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  while read -r line; do\n    for val in $line; do\n      if [[ $val -gt $max ]]; then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    while read -r line; do\n        for val in $line; do\n            if (( val > max )); then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  while read -r line; do\n    for val in $line; do\n      if (( val > max )); then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      val=$i\n    else\n      val=$(printf \"%d\" \"'$i\")\n    fi\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max_val=0\n    while read -r line; do\n        for val in $line; do\n            if (( val > max_val )); then\n                max_val=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    for i in $1; do\n        val=$(echo $i | sed 's/[^0-9]//g')\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    while read -r line; do\n        for val in $line; do\n            if [ $val -gt $max ]; then\n                max=$val\n            fi\n        done\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max_val=0\n    local cur_val=0\n    for val in $1; do\n        cur_val=$(echo \"$val\" | sed 's/[^0-9]//g')\n        if [[ $cur_val -gt $max_val ]]; then\n            max_val=$cur_val\n        fi\n    done\n    echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      val=$i\n    else\n      val=0\n    fi\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if (( val > max )); then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  local list=$1\n  while read -r line; do\n    for val in $line; do\n      if [[ $val -gt $max ]]; then\n        max=$val\n      fi\n    done\n  done <<< \"$list\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val\n  for val in $1; do\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $(echo \"$1\" | tr ' ' '\\n'); do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val\n  for val in $1; do\n    if (( val > max )); then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo \"$i\" | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max_val=0\n    while read -r line; do\n        local val\n        for val in $line; do\n            if [[ $val -gt $max_val ]]; then\n                max_val=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  while read -r line; do\n    for val in $line; do\n      if [[ $val -gt $max ]]; then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      val=$i\n    else\n      val=$(echo $i | sed 's/[^0-9]//g')\n    fi\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpvpfdvl92.sh: line 8: [: Python: integer expression expected\\n/tmp/tmpvpfdvl92.sh: line 8: [: version: integer expression expected\\n/tmp/tmpvpfdvl92.sh: line 8: [: Python: integer expression expected\\n/tmp/tmpvpfdvl92.sh: line 8: [: Python: integer expression expected\\n/tmp/tmpvpfdvl92.sh: line 8: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      val=$i\n    else\n      val=0\n    fi\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max_val=0\n  for val in $1; do\n    if [[ $val -gt $max_val ]]; then\n      max_val=$val\n    fi\n  done\n  echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for val in $1; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max_val=0\n    for val in $(echo \"$1\" | tr ' ' '\\n'); do\n        if [[ $val -gt $max_val ]]; then\n            max_val=$val\n        fi\n    done\n    echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $(echo \"$1\" | tr ' ' '\\n'); do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if [[ $val -gt $max ]]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max_val=0\n  local val=0\n  for i in $1; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      val=$i\n    else\n      val=0\n    fi\n    if [[ $val -gt $max_val ]]; then\n      max_val=$val\n    fi\n  done\n  echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for val in $1; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo \"$i\" | tr -d '\\n')\n    if [ \"$val\" -gt \"$max\" ]; then\n      max=$val\n    fi\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp94h2938w.sh: line 10: [: Python: integer expression expected\\n/tmp/tmp94h2938w.sh: line 10: [: version: integer expression expected\\n/tmp/tmp94h2938w.sh: line 10: [: Python: integer expression expected\\n/tmp/tmp94h2938w.sh: line 10: [: Python: integer expression expected\\n/tmp/tmp94h2938w.sh: line 10: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $(echo \"$1\" | tr ' ' '\\n'); do\n    val=$(echo \"$i\" | sed 's/[^0-9]*//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpyltwgoq9.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpyltwgoq9.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpyltwgoq9.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpyltwgoq9.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpyltwgoq9.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val\n    while read -r val; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp0dt62_sx.sh: line 9: [[: Python 3 2 4 5 version: syntax error in expression (error token is \"3 2 4 5 version\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val\n    for val in $1; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo \"$i\" | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val\n  for val in $1; do\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max_val=0\n  local cur_val=0\n  while read -r line; do\n    for val in $line; do\n      cur_val=$val\n      if [[ $cur_val -gt $max_val ]]; then\n        max_val=$cur_val\n      fi\n    done\n  done\n  echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $(echo \"$1\" | tr ' ' '\\n'); do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $(echo \"$1\" | tr ' ' '\\n'); do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    for val in $1; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    while read -r line; do\n        for val in $line; do\n            if [[ $val -gt $max ]]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for val in $1; do\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo \"$i\" | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for val in $1; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max_val=0\n    while read -r line; do\n        for val in $line; do\n            if [ $val -gt $max_val ]; then\n                max_val=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp4a1wt1i1.sh: line 9: [: Python: integer expression expected\\n/tmp/tmp4a1wt1i1.sh: line 9: [: version: integer expression expected\\n/tmp/tmp4a1wt1i1.sh: line 9: [: Python: integer expression expected\\n/tmp/tmp4a1wt1i1.sh: line 9: [: Python: integer expression expected\\n/tmp/tmp4a1wt1i1.sh: line 9: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  while read -r line; do\n    for val in $line; do\n      if [[ $val -gt $max ]]; then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if [[ $val -gt $max ]]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if (( val > max )); then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max_val=0\n    for i in $1; do\n        if [[ $i -gt $max_val ]]; then\n            max_val=$i\n        fi\n    done\n    echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val\n    for val in $1; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo \"$i\" | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    for val in $1; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  while read -r line; do\n    for val in $line; do\n      if [[ $val -gt $max ]]; then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo \"$i\" | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local cur=0\n    for i in $1; do\n        cur=$(echo $i | sed 's/[^0-9]//g')\n        if [ $cur -gt $max ]; then\n            max=$cur\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_ljk1e3k.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmp_ljk1e3k.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmp_ljk1e3k.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmp_ljk1e3k.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmp_ljk1e3k.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $(echo \"$1\" | tr ' ' '\\n'); do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  while read -r line; do\n    for val in $line; do\n      if (( val > max )); then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max_val=0\n    for val in $1; do\n        if [[ $val -gt $max_val ]]; then\n            max_val=$val\n        fi\n    done\n    echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  while read -r line; do\n    for val in $line; do\n      if (( val > max )); then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if [[ $val -gt $max ]]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if [[ $val -gt $max ]]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local cur=0\n  while read line; do\n    for val in $line; do\n      cur=$val\n      if [ $cur -gt $max ]; then\n        max=$cur\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if (( i > max )); then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if [[ $val -gt $max ]]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if (( val > max )); then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  while read -r line; do\n    for val in $line; do\n      if (( val > max )); then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if (( i > max )); then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      val=$i\n    else\n      val=${i:1}\n    fi\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/^[^0-9]*//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    for i in $1; do\n        val=$(echo $i | sed 's/[^0-9]//g')\n        if [ $val -gt $max ]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max_val=0\n  local val\n  for val in $1; do\n    if [[ $val -gt $max_val ]]; then\n      max_val=$val\n    fi\n  done\n  echo $max_val\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  # Split the list into an array\n  IFS=$'\\n' read -d '' -r -a arr <<< \"$1\"\n\n  # Iterate over the array, comparing each value to the current max\n  max=${arr[0]}\n  for i in \"${arr[@]}\"; do\n    if (( i > max )); then\n      max=$i\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpnd5i3w3l.sh: line 12: ((: Python 3 2 4 5 version: syntax error in expression (error token is \"3 2 4 5 version\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=\n  local val=\n  while read -r val; do\n    if [[ -z $max ]]; then\n      max=$val\n    elif [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done <<< \"$1\"\n  echo \"$max\"\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for num in $line; do\n            if [[ $num -gt $max ]]; then\n                max=$num\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpoycvmian.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: Python: integer expression expected\\n/tmp/tmp_n0vec5q.sh: line 8: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val\n  for val in $1; do\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    for i in $1; do\n        val=$(echo $i | sed 's/[^0-9]//g')\n        if [ $val -gt $max ]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpt1tmfhma.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    while read -r line; do\n        for val in $line; do\n            if [[ $val -gt $max ]]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo \"$i\" | sed 's/[^0-9]//g')\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n/tmp/tmpucb_7lru.sh: line 10: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    while read -r line; do\n        for val in $line; do\n            if [[ $val -gt $max ]]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local curr=0\n  while read -r line; do\n    for val in $line; do\n      curr=$(echo \"$val\" | sed 's/[^0-9]//g')\n      if [ $curr -gt $max ]; then\n        max=$curr\n      fi\n    done\n  done < <(echo \"$1\")\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3l80_v8o.sh: line 11: [: -gt: unary operator expected\\n/tmp/tmp3l80_v8o.sh: line 11: [: -gt: unary operator expected\\n/tmp/tmp3l80_v8o.sh: line 11: [: -gt: unary operator expected\\n/tmp/tmp3l80_v8o.sh: line 11: [: -gt: unary operator expected\\n/tmp/tmp3l80_v8o.sh: line 11: [: -gt: unary operator expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for i in $1; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    local val=0\n    while read -r line; do\n        for val in $line; do\n            if [ $val -gt $max ]; then\n                max=$val\n            fi\n        done\n    done <<< \"$1\"\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp85l2qkfi.sh: line 10: [: Python: integer expression expected\\n/tmp/tmp85l2qkfi.sh: line 10: [: version: integer expression expected\\n/tmp/tmp85l2qkfi.sh: line 10: [: Python: integer expression expected\\n/tmp/tmp85l2qkfi.sh: line 10: [: Python: integer expression expected\\n/tmp/tmp85l2qkfi.sh: line 10: [: version: integer expression expected\\n'",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    local max=0\n    for val in $1; do\n        if [[ $val -gt $max ]]; then\n            max=$val\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  while read -r line; do\n    for val in $line; do\n      if [[ $val -gt $max ]]; then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  local val=0\n  for i in $1; do\n    val=$(echo $i | sed 's/[^0-9]//g')\n    if [[ $val -gt $max ]]; then\n      max=$val\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  while read -r line; do\n    for val in $line; do\n      if [[ $val -gt $max ]]; then\n        max=$val\n      fi\n    done\n  done <<< \"$1\"\n  echo \"$max\"\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n  local max=0\n  for i in $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test",
      "timestamp": 1667190776,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}