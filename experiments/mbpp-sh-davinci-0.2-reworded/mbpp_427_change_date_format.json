{
  "name": "mbpp_427_change_date_format",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n#\n# $1 is a string\nchange_date_format() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    change_date_format \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2026-01-02\") = \"02-01-2026\" ]]\n    [[ $(candidate \"2020-11-13\") = \"13-11-2020\" ]]\n    [[ $(candidate \"2021-04-26\") = \"26-04-2021\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local date=\"$1\"\n    local year=$(echo \"$date\" | cut -d'-' -f1)\n    local month=$(echo \"$date\" | cut -d'-' -f2)\n    local day=$(echo \"$date\" | cut -d'-' -f3)\n    echo \"$day-$month-$year\"",
    "    local date=$1\n    local year=${date:0:4}\n    local month=${date:5:2}\n    local day=${date:8:2}\n    echo \"$day-$month-$year\"",
    "    # Check if the string is empty\n    if [ -z \"$1\" ]; then\n        echo \"Please enter a date in yyyy-mm-dd format\"\n        exit 1\n    fi\n\n    # Check if the string is in yyyy-mm-dd format\n    if [[ ! $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then\n        echo \"Please enter a date in yyyy-mm-dd format\"\n        exit 1\n    fi\n\n    # Check if the date is valid\n    if ! date -d \"$1\" > /dev/null 2>&1; then\n        echo \"Please enter a valid date\"\n        exit 1\n    fi\n\n    # Convert the date\n    echo \"$1\" | awk -F'-' '{print $3\"-\"$2\"-\"$1}'",
    "    # Check if the date is in the correct format\n    if [[ $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then\n        # Split the date into an array\n        IFS='-' read -r -a date_array <<< \"$1\"\n        # Print the date in the new format\n        echo \"${date_array[2]}-${date_array[1]}-${date_array[0]}\"\n    else\n        # Print an error message\n        echo \"The date is not in the correct format.\"\n    fi",
    "    # Split the date string into an array\n    IFS='-' read -r -a date_array <<< \"$1\"\n    # Create a new date string in the desired format\n    new_date=\"${date_array[2]}-${date_array[1]}-${date_array[0]}\"\n    echo \"$new_date\"",
    "  local date=$1\n  local year=${date:0:4}\n  local month=${date:5:2}\n  local day=${date:8:2}\n  echo \"$day-$month-$year\"",
    "    local date_string=$1\n    local year=${date_string:0:4}\n    local month=${date_string:5:2}\n    local day=${date_string:8:2}\n    echo \"$day-$month-$year\"",
    "  if [[ $1 =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then\n    echo \"${1:8:2}-${1:5:2}-${1:0:4}\"\n  else\n    echo \"Invalid date format. Please use yyyy-mm-dd\"\n  fi",
    "    local date=$1\n    local year=${date:0:4}\n    local month=${date:5:2}\n    local day=${date:8:2}\n    echo \"$day-$month-$year\"",
    "  echo \"$1\" | awk -F- '{print $3\"-\"$2\"-\"$1}'",
    "    local date=$1\n    local year=${date:0:4}\n    local month=${date:5:2}\n    local day=${date:8:2}\n    echo \"$day-$month-$year\"",
    "    local date=$1\n    local year=${date:0:4}\n    local month=${date:5:2}\n    local day=${date:8:2}\n    echo \"$day-$month-$year\"",
    "  local date=$1\n  local year=${date:0:4}\n  local month=${date:5:2}\n  local day=${date:8:2}\n  echo \"$day-$month-$year\"",
    "  echo \"$1\" | awk -F'-' '{print $3\"-\"$2\"-\"$1}'",
    "  echo \"$1\" | awk -F'-' '{print $3\"-\"$2\"-\"$1}'",
    "  local date=$1\n  local year=${date:0:4}\n  local month=${date:5:2}\n  local day=${date:8:2}\n  echo \"$day-$month-$year\"",
    "  local date=$1\n  local year=${date:0:4}\n  local month=${date:5:2}\n  local day=${date:8:2}\n  echo \"$day-$month-$year\"",
    "  echo \"$1\" | awk -F- '{print $3\"-\"$2\"-\"$1}'",
    "    local date=$1\n    local year=${date:0:4}\n    local month=${date:5:2}\n    local day=${date:8:2}\n    echo \"$day-$month-$year\"",
    "    local date=$1\n    local year=${date:0:4}\n    local month=${date:5:2}\n    local day=${date:8:2}\n    echo \"$day-$month-$year\""
  ]
}