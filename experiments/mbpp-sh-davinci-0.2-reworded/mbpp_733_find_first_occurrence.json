{
  "name": "mbpp_733_find_first_occurrence",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the index of the first occurrence of a given number in a sorted array.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_first_occurrence() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    find_first_occurrence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 5 5 5 6 6 8 9 9 9\" \"5\") = \"1\" ]]\n    [[ $(candidate \"2 3 5 5 6 6 8 9 9 9\" \"5\") = \"2\" ]]\n    [[ $(candidate \"2 4 1 5 6 6 8 9 9 9\" \"6\") = \"4\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=\"$1\"\n    local target=\"$2\"\n    local -i left=0\n    local -i right=$(echo \"$list\" | wc -w)\n    local -i mid\n    while (( left < right )); do\n        mid=$(( (left + right) / 2 ))\n        if (( $(echo \"$list\" | cut -d ' ' -f $(( mid + 1 ))) < target )); then\n            left=$(( mid + 1 ))\n        else\n            right=$mid\n        fi\n    done\n    echo $left",
    "  local list=$1\n  local number=$2\n\n  local index=0\n  for i in $list; do\n    if [ $i -eq $number ]; then\n      echo $index\n      return\n    fi\n    index=$((index+1))\n  done",
    "    local list=\"$1\"\n    local target=\"$2\"\n    local -i low=0\n    local -i high=${#list[@]}\n    local -i mid=0\n    local -i result=-1\n    while (( low <= high )); do\n        mid=$(( (low + high) / 2 ))\n        if (( list[mid] < target )); then\n            low=$(( mid + 1 ))\n        elif (( list[mid] > target )); then\n            high=$(( mid - 1 ))\n        else\n            result=$mid\n            high=$(( mid - 1 ))\n        fi\n    done\n    echo $result",
    "  local -n arr=$1\n  local target=$2\n  local left=0\n  local right=${#arr[@]}\n  local mid\n  while [[ $left -lt $right ]]; do\n    mid=$(((left + right) / 2))\n    if [[ ${arr[mid]} -lt $target ]]; then\n      left=$((mid + 1))\n    else\n      right=$mid\n    fi\n  done\n  echo $left",
    "    local -a array=($1)\n    local target=$2\n    local low=0\n    local high=${#array[@]}\n    local mid\n    local result=-1\n    while [[ $low -lt $high ]]; do\n        mid=$(((low + high) / 2))\n        if [[ ${array[$mid]} -eq $target ]]; then\n            result=$mid\n            high=$mid\n        elif [[ ${array[$mid]} -lt $target ]]; then\n            low=$((mid + 1))\n        else\n            high=$mid\n        fi\n    done\n    echo $result",
    "  local list=$1\n  local number=$2\n  local index=0\n  for item in $list; do\n    if [ $item -eq $number ]; then\n      echo $index\n      return\n    fi\n    index=$((index+1))\n  done\n  echo -1",
    "  local list=\"$1\"\n  local target=\"$2\"\n  local min=0\n  local max=$((${#list} - 1))\n  local mid=0\n  local mid_value=0\n\n  while [[ $min -le $max ]]; do\n    mid=$((($min + $max) / 2))\n    mid_value=$(echo \"$list\" | cut -d ' ' -f $((mid + 1)))\n\n    if [[ $mid_value -eq $target ]]; then\n      while [[ $mid -ge 0 ]]; do\n        if [[ $(echo \"$list\" | cut -d ' ' -f $((mid + 1))) -eq $target ]]; then\n          mid=$((mid - 1))\n        else\n          break\n        fi\n      done\n      echo $((mid + 1))\n      return\n    elif [[ $mid_value -gt $target ]]; then\n      max=$((mid - 1))\n    else\n      min=$((mid + 1))\n    fi\n  done\n\n  echo -1",
    "    local -a array=(\"${!1}\")\n    local target=$2\n    local low=0\n    local high=${#array[@]}\n    local mid=0\n    local result=-1\n    while [ $low -le $high ]\n    do\n        mid=$(((low + high) / 2))\n        if [ ${array[$mid]} -eq $target ]\n        then\n            result=$mid\n            high=$((mid - 1))\n        elif [ ${array[$mid]} -gt $target ]\n        then\n            high=$((mid - 1))\n        else\n            low=$((mid + 1))\n        fi\n    done\n    echo $result",
    "  local list=$1\n  local number=$2\n  local index=0\n  for i in $list; do\n    if [ $i -eq $number ]; then\n      echo $index\n      return\n    fi\n    index=$((index+1))\n  done\n  echo -1",
    "  local -a array=($1)\n  local target=$2\n  local -i low=0\n  local -i high=${#array[@]}-1\n  local -i mid\n  local -i result=-1\n\n  while low <= high; do\n    mid=$((low+high))/2\n    if [[ ${array[mid]} -lt $target ]]; then\n      low=$((mid+1))\n    elif [[ ${array[mid]} -gt $target ]]; then\n      high=$((mid-1))\n    else\n      result=$mid\n      high=$((mid-1))\n    fi\n  done\n\n  echo $result",
    "  local list=$1\n  local number=$2\n  local index=0\n  local found=0\n\n  for i in $list; do\n    if [[ $i -eq $number ]]; then\n      found=1\n      break\n    fi\n    index=$((index + 1))\n  done\n\n  if [[ $found -eq 1 ]]; then\n    echo $index\n  else\n    echo -1\n  fi",
    "  local list=$1\n  local number=$2\n  local index=0\n  local found=0\n  for i in $list; do\n    if [ $i -eq $number ]; then\n      found=1\n      break\n    fi\n    index=$((index+1))\n  done\n  if [ $found -eq 1 ]; then\n    echo $index\n  else\n    echo -1\n  fi",
    "    local -a array=($1)\n    local target=$2\n    local low=0\n    local high=${#array[@]}\n    local mid=0\n    while [ $low -lt $high ]; do\n        mid=$(( (low + high) / 2 ))\n        if [ ${array[$mid]} -lt $target ]; then\n            low=$(( mid + 1 ))\n        else\n            high=$mid\n        fi\n    done\n    if [ ${array[$low]} -eq $target ]; then\n        echo $low\n    else\n        echo -1\n    fi",
    "    local -a array=(\"$@\")\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i mid=0\n    local -i first=0\n    local -i last=$((len - 1))\n    local -i result=-1\n    local -i target=$2\n\n    while first <= last; do\n        mid=$(((first + last) / 2))\n        if [[ ${array[$mid]} -eq $target ]]; then\n            result=$mid\n            last=$((mid - 1))\n        elif [[ ${array[$mid]} -lt $target ]]; then\n            first=$((mid + 1))\n        else\n            last=$((mid - 1))\n        fi\n    done\n\n    echo $result",
    "    local -a array=($1)\n    local target=$2\n    local low=0\n    local high=${#array[@]}\n    local mid\n\n    while ((low < high)); do\n        mid=$((low + (high - low) / 2))\n        if ((array[mid] < target)); then\n            low=$((mid + 1))\n        else\n            high=$mid\n        fi\n    done\n\n    if ((array[low] == target)); then\n        echo $low\n    else\n        echo -1\n    fi",
    "    local list=$1\n    local number=$2\n    local index=0\n    local found=false\n\n    for i in $list; do\n        if [ $i -eq $number ]; then\n            found=true\n            break\n        fi\n        index=$((index+1))\n    done\n\n    if [ $found = true ]; then\n        echo $index\n    else\n        echo -1\n    fi",
    "    local list=$1\n    local target=$2\n    local index=0\n    local found=0\n    for i in $list; do\n        if [ $i -eq $target ]; then\n            found=1\n            break\n        fi\n        index=$((index+1))\n    done\n    if [ $found -eq 1 ]; then\n        echo $index\n    else\n        echo -1\n    fi",
    "    local -a array=(\"${!1}\")\n    local target=$2\n    local low=0\n    local high=${#array[@]}\n    local mid=0\n    local result=-1\n\n    while [ $low -lt $high ]; do\n        mid=$(( (low + high) / 2 ))\n        if [ ${array[$mid]} -lt $target ]; then\n            low=$(( mid + 1 ))\n        elif [ ${array[$mid]} -gt $target ]; then\n            high=$(( mid - 1 ))\n        else\n            result=$mid\n            high=$(( mid - 1 ))\n        fi\n    done\n\n    echo $result",
    "    local list=$1\n    local target=$2\n    local index=0\n    local found=false\n    for i in $list; do\n        if [ $i -eq $target ]; then\n            found=true\n            break\n        fi\n        index=$((index + 1))\n    done\n    if [ $found = true ]; then\n        echo $index\n    else\n        echo -1\n    fi",
    "    local -a list=($1)\n    local target=$2\n    local low=0\n    local high=${#list[@]}\n    local mid=0\n    local result=-1\n\n    while [ $low -le $high ]\n    do\n        mid=$(( (low + high) / 2 ))\n        if [ ${list[$mid]} -eq $target ]\n        then\n            result=$mid\n            high=$(( mid - 1 ))\n        elif [ ${list[$mid]} -gt $target ]\n        then\n            high=$(( mid - 1 ))\n        else\n            low=$(( mid + 1 ))\n        fi\n    done\n\n    echo $result"
  ]
}