{
  "name": "mbpp_557_toggle_string",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to toggle the case of all characters in a string.\n#\n# $1 is a string\ntoggle_string() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    toggle_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"pYTHON\" ]]\n    [[ $(candidate \"Pangram\") = \"pANGRAM\" ]]\n    [[ $(candidate \"LIttLE\") = \"liTTle\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local str=\"$1\"\n    local new_str=\"\"\n    local char=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_str+=\"$(echo \"$char\" | tr '[a-z]' '[A-Z]')\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"$(echo \"$char\" | tr '[A-Z]' '[a-z]')\"\n        else\n            new_str+=\"$char\"\n        fi\n        i=$((i+1))\n    done\n    echo \"$new_str\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  local char=\"\"\n  local ascii_code=\"\"\n  local new_ascii_code=\"\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    ascii_code=\"$(printf \"%d\" \"'$char\")\"\n    if (( $ascii_code >= 65 && $ascii_code <= 90 )); then\n      new_ascii_code=$(( $ascii_code + 32 ))\n    elif (( $ascii_code >= 97 && $ascii_code <= 122 )); then\n      new_ascii_code=$(( $ascii_code - 32 ))\n    else\n      new_ascii_code=$ascii_code\n    fi\n    new_str+=\"$(printf \\\\$(printf '%03o' \"$new_ascii_code\"))\"\n  done\n\n  echo \"$new_str\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new+=\"${char,,}\"\n        else\n            new+=\"$char\"\n        fi\n    done\n    echo \"$new\"",
    "  local string=\"$1\"\n  local new_string=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=\"${string:$i:1}\"\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      new_string+=\"${char,,}\"\n    elif [[ \"$char\" =~ [a-z] ]]; then\n      new_string+=\"${char^^}\"\n    else\n      new_string+=\"$char\"\n    fi\n  done\n  echo \"$new_string\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=${str:$i:1}\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_str+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=\"${char,,}\"\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=${str:$i:1}\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_str+=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'"
  ]
}