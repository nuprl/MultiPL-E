{
  "name": "mbpp_557_toggle_string",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to toggle the case of all characters in a string.\n#\n# $1 is a string\ntoggle_string() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    toggle_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"pYTHON\" ]]\n    [[ $(candidate \"Pangram\") = \"pANGRAM\" ]]\n    [[ $(candidate \"LIttLE\") = \"liTTle\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local str=\"$1\"\n    local new_str=\"\"\n    local char=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_str+=\"$(echo \"$char\" | tr '[a-z]' '[A-Z]')\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"$(echo \"$char\" | tr '[A-Z]' '[a-z]')\"\n        else\n            new_str+=\"$char\"\n        fi\n        i=$((i+1))\n    done\n    echo \"$new_str\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  local char=\"\"\n  local ascii_code=\"\"\n  local new_ascii_code=\"\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    ascii_code=\"$(printf \"%d\" \"'$char\")\"\n    if (( $ascii_code >= 65 && $ascii_code <= 90 )); then\n      new_ascii_code=$(( $ascii_code + 32 ))\n    elif (( $ascii_code >= 97 && $ascii_code <= 122 )); then\n      new_ascii_code=$(( $ascii_code - 32 ))\n    else\n      new_ascii_code=$ascii_code\n    fi\n    new_str+=\"$(printf \\\\$(printf '%03o' \"$new_ascii_code\"))\"\n  done\n\n  echo \"$new_str\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new+=\"${char,,}\"\n        else\n            new+=\"$char\"\n        fi\n    done\n    echo \"$new\"",
    "  local string=\"$1\"\n  local new_string=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=\"${string:$i:1}\"\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      new_string+=\"${char,,}\"\n    elif [[ \"$char\" =~ [a-z] ]]; then\n      new_string+=\"${char^^}\"\n    else\n      new_string+=\"$char\"\n    fi\n  done\n  echo \"$new_string\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=${str:$i:1}\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_str+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=\"${char,,}\"\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=${str:$i:1}\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_str+=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local new=\"\"\n  local char=\"\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      new+=\"${char,,}\"\n    else\n      new+=\"${char^^}\"\n    fi\n  done\n  echo \"$new\"",
    "    local string=\"$1\"\n    local new_string=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"${char,,}\"\n        else\n            new_string+=\"${char^^}\"\n        fi\n    done\n    echo \"$new_string\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=${string:$i:1}\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_string+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"${char,,}\"\n        else\n            new_string+=\"$char\"\n        fi\n    done\n    echo \"$new_string\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_str+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=\"${char,,}\"\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local -i i=0\n    local -i len=${#1}\n    local -a arr\n    local -a toggled\n    local char\n\n    while [ $i -lt $len ]; do\n        char=${1:$i:1}\n        if [[ $char =~ [a-z] ]]; then\n            toggled[$i]=${char^^}\n        elif [[ $char =~ [A-Z] ]]; then\n            toggled[$i]=${char,,}\n        else\n            toggled[$i]=$char\n        fi\n        i=$i+1\n    done\n\n    echo ${toggled[@]}",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "\techo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local new_str=\"\"\n  local char=\"\"\n  local ascii_code=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    ascii_code=$(printf \"%d\" \"'$char\")\n    if (( $ascii_code >= 65 && $ascii_code <= 90 )); then\n      new_str+=$(printf \\\\$(printf \"%o\" \"$(( $ascii_code + 32 ))\"))\n    elif (( $ascii_code >= 97 && $ascii_code <= 122 )); then\n      new_str+=$(printf \\\\$(printf \"%o\" \"$(( $ascii_code - 32 ))\"))\n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local result=\"\"\n    for ((i=0; i<${#string}; i++)); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            result+=\"$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n        elif [[ \"$char\" =~ [a-z] ]]; then\n            result+=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n        else\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  local char=\"\"\n  local ascii_code=\"\"\n  local new_ascii_code=\"\"\n  local new_char=\"\"\n  for ((i=0; i<${#string}; i++)); do\n    char=\"${string:$i:1}\"\n    ascii_code=$(printf \"%d\" \"'$char\")\n    if [[ $ascii_code -ge 65 && $ascii_code -le 90 ]]; then\n      new_ascii_code=$((ascii_code + 32))\n    elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n      new_ascii_code=$((ascii_code - 32))\n    else\n      new_ascii_code=$ascii_code\n    fi\n    new_char=$(printf \\\\$(printf '%03o' $new_ascii_code))\n    new_string=\"$new_string$new_char\"\n  done\n  echo \"$new_string\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=${string:$i:1}\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_string+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"${char,,}\"\n        else\n            new_string+=\"$char\"\n        fi\n    done\n    echo \"$new_string\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    local char=\"\"\n    local ascii_code=\"\"\n    local new_ascii_code=\"\"\n    local new_char=\"\"\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=\"${string:$i:1}\"\n        ascii_code=$(printf \"%d\" \"'$char\")\n        if [[ $ascii_code -ge 65 && $ascii_code -le 90 ]]; then\n            new_ascii_code=$(( $ascii_code + 32 ))\n        elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n            new_ascii_code=$(( $ascii_code - 32 ))\n        else\n            new_ascii_code=$ascii_code\n        fi\n        new_char=$(printf \\\\$(printf '%03o' $new_ascii_code))\n        new_string=\"$new_string$new_char\"\n    done\n    echo \"$new_string\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    local char=\"\"\n    local ascii_code=\"\"\n    local new_ascii_code=\"\"\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=\"${string:$i:1}\"\n        ascii_code=$(printf \"%d\" \"'$char\")\n        if [[ $ascii_code -ge 65 && $ascii_code -le 90 ]]; then\n            new_ascii_code=$(( $ascii_code + 32 ))\n        elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n            new_ascii_code=$(( $ascii_code - 32 ))\n        else\n            new_ascii_code=$ascii_code\n        fi\n        new_string+=$(printf \\\\$(printf '%03o' $new_ascii_code))\n    done\n    echo \"$new_string\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        local c=\"${str:$i:1}\"\n        case \"$c\" in\n            [A-Z]) new=\"$new$(tr '[A-Z]' '[a-z]')\" ;;\n            [a-z]) new=\"$new$(tr '[a-z]' '[A-Z]')\" ;;\n            *) new=\"$new$c\" ;;\n        esac\n    done\n    echo \"$new\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  local char=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_string+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_string+=\"${char,,}\"\n    else\n      new_string+=\"$char\"\n    fi\n  done\n  echo \"$new_string\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local string=\"$1\"\n    local result=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            result+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            result+=\"${char,,}\"\n        else\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=${string:$i:1}\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      new_string+=\"${char,,}\"\n    else\n      new_string+=\"${char^^}\"\n    fi\n  done\n  echo \"$new_string\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=${string:$i:1}\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_string+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_string+=\"${char,,}\"\n    else\n      new_string+=\"$char\"\n    fi\n  done\n  echo \"$new_string\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local char=\"\"\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_str+=\"$(echo \"$char\" | tr '[a-z]' '[A-Z]')\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"$(echo \"$char\" | tr '[A-Z]' '[a-z]')\"\n        else\n            new_str+=\"$char\"\n        fi\n    done\n\n    echo \"$new_str\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=${string:$i:1}\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_string+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_string+=\"${char,,}\"\n    else\n      new_string+=\"$char\"\n    fi\n  done\n  echo \"$new_string\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local string=\"$1\"\n  local new_string=\"\"\n  local char=\"\"\n  local ascii_code=\"\"\n  local ascii_code_new=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    ascii_code=$(printf \"%d\" \"'$char\")\n\n    if [[ $ascii_code -ge 65 && $ascii_code -le 90 ]]; then\n      ascii_code_new=$(( ascii_code + 32 ))\n    elif [[ $ascii_code -ge 97 && $ascii_code -le 122 ]]; then\n      ascii_code_new=$(( ascii_code - 32 ))\n    else\n      ascii_code_new=$ascii_code\n    fi\n\n    new_string+=$(printf \\\\$(printf '%03o' $ascii_code_new))\n  done\n\n  echo $new_string",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_str+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"${char,,}\"\n        else\n            new_str+=\"$char\"\n        fi\n    done\n    echo \"$new_str\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"${char,,}\"\n        elif [[ \"$char\" =~ [a-z] ]]; then\n            new_string+=\"${char^^}\"\n        else\n            new_string+=\"$char\"\n        fi\n    done\n    echo \"$new_string\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local string=\"$1\"\n  local result=\"\"\n  local i=0\n  local c=\"\"\n  local l=\"\"\n  local u=\"\"\n  local n=\"\"\n\n  while [ $i -lt ${#string} ]; do\n    c=\"${string:$i:1}\"\n    l=\"$(echo \"$c\" | tr '[:upper:]' '[:lower:]')\"\n    u=\"$(echo \"$c\" | tr '[:lower:]' '[:upper:]')\"\n    n=\"$(echo \"$c\" | tr '[:digit:]' '[:digit:]')\"\n    if [ \"$c\" = \"$l\" ]; then\n      result=\"$result$u\"\n    elif [ \"$c\" = \"$n\" ]; then\n      result=\"$result$c\"\n    else\n      result=\"$result$l\"\n    fi\n    i=$((i+1))\n  done\n  echo \"$result\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  for ((i=0; i<len; i++)); do\n    local char=${str:$i:1}\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      char=$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\n    elif [[ \"$char\" =~ [a-z] ]]; then\n      char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n    fi\n    result=\"$result$char\"\n  done\n  echo \"$result\"",
    "  local string=\"$1\"\n  local toggled=\"\"\n  local i=0\n  local char=\"\"\n  local char_ascii=\"\"\n  local char_toggled=\"\"\n  local char_toggled_ascii=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    char_ascii=$(printf \"%d\" \"'$char\")\n    if [[ $char_ascii -ge 65 && $char_ascii -le 90 ]]; then\n      char_toggled_ascii=$(( $char_ascii + 32 ))\n    elif [[ $char_ascii -ge 97 && $char_ascii -le 122 ]]; then\n      char_toggled_ascii=$(( $char_ascii - 32 ))\n    else\n      char_toggled_ascii=$char_ascii\n    fi\n    char_toggled=$(printf \\\\$(printf '%03o' $char_toggled_ascii))\n    toggled+=\"$char_toggled\"\n  done\n\n  echo \"$toggled\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=${string:$i:1}\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n        else\n            new_string+=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n        fi\n    done\n    echo \"$new_string\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local str=\"$1\"\n  local new=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new+=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new+=\"$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n    else\n      new+=\"$char\"\n    fi\n  done\n  echo \"$new\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local string=\"$1\"\n    local result=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=${string:$i:1}\n        if [[ \"$char\" == [[:upper:]] ]]; then\n            result+=\"${char,,}\"\n        else\n            result+=\"${char^^}\"\n        fi\n    done\n    echo \"$result\"",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  local string=\"$1\"\n  local result=\"\"\n  local char=\"\"\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      result=\"$result$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      result=\"$result$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\"\n    else\n      result=\"$result$char\"\n    fi\n  done\n  echo \"$result\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local result=\"\"\n  local char=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      result+=\"${char^^}\"\n    else\n      result+=\"${char,,}\"\n    fi\n  done\n  echo \"$result\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"$(echo \"$char\" | tr '[A-Z]' '[a-z]')\"\n        elif [[ \"$char\" =~ [a-z] ]]; then\n            new_string+=\"$(echo \"$char\" | tr '[a-z]' '[A-Z]')\"\n        else\n            new_string+=\"$char\"\n        fi\n    done\n    echo \"$new_string\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  local str=\"$1\"\n  local new=\"\"\n  local char=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new+=\"${char,,}\"\n    else\n      new+=\"$char\"\n    fi\n  done\n  echo \"$new\"",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local string=\"$1\"\n    local new_string=\"\"\n    local char=\"\"\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=\"${string:i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_string+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_string+=\"${char,,}\"\n        else\n            new_string+=\"$char\"\n        fi\n    done\n\n    echo \"$new_string\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local char=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"${char,,}\"\n        else\n            new_str+=\"${char^^}\"\n        fi\n    done\n    echo \"$new_str\"",
    "    local string=\"$1\"\n    local new_string=\"\"\n    local char=\"\"\n    local ascii_code=\"\"\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=\"${string:$i:1}\"\n        ascii_code=$(printf \"%d\" \"'$char\")\n\n        if [ $ascii_code -ge 65 ] && [ $ascii_code -le 90 ]; then\n            new_string+=$(printf \\\\$(printf '%03o' \"$((ascii_code+32))\"))\n        elif [ $ascii_code -ge 97 ] && [ $ascii_code -le 122 ]; then\n            new_string+=$(printf \\\\$(printf '%03o' \"$((ascii_code-32))\"))\n        else\n            new_string+=\"$char\"\n        fi\n    done\n\n    echo \"$new_string\"",
    "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo $1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_str+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"${char,,}\"\n        else\n            new_str+=\"$char\"\n        fi\n    done\n    echo \"$new_str\"",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    local str=\"$1\"\n    local new_str=\"\"\n    local char=\"\"\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n            new_str+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            new_str+=\"${char,,}\"\n        else\n            new_str+=\"$char\"\n        fi\n    done\n\n    echo \"$new_str\"",
    "    local string=\"$1\"\n    local new_string=\"\"\n    local char=\"\"\n    local ascii_code=\"\"\n    local new_ascii_code=\"\"\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=\"${string:$i:1}\"\n        ascii_code=$(printf \"%d\" \"'$char\")\n        if (( $ascii_code >= 65 && $ascii_code <= 90 )); then\n            new_ascii_code=$(( $ascii_code + 32 ))\n        elif (( $ascii_code >= 97 && $ascii_code <= 122 )); then\n            new_ascii_code=$(( $ascii_code - 32 ))\n        else\n            new_ascii_code=$ascii_code\n        fi\n        new_string+=$(printf \\\\$(printf '%03o' $new_ascii_code))\n    done\n    echo \"$new_string\"",
    "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
    "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'"
  ]
}