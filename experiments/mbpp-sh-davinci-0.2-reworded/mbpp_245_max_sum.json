{
  "name": "mbpp_245_max_sum",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n\n  while [[ $i -lt ${#arr[@]} ]]; do\n    if [[ ${arr[$i]} -gt ${inc[-1]} ]]; then\n      inc+=(${arr[$i]})\n    else\n      inc[-1]=${arr[$i]}\n    fi\n    if [[ ${arr[$j]} -gt ${dec[-1]} ]]; then\n      dec+=(${arr[$j]})\n    else\n      dec[-1]=${arr[$j]}\n    fi\n    ((i++))\n    ((j--))\n  done\n\n  for ((i=0; i<${#inc[@]}; i++)); do\n    for ((j=0; j<${#dec[@]}; j++)); do\n      if [[ $i -eq $j ]]; then\n        continue\n      fi\n      if [[ $((inc[$i] + dec[$j])) -gt $max_sum ]]; then\n        max_sum=$((inc[$i] + dec[$j]))\n      fi\n    done\n  done\n\n  echo $max_sum",
    "  local -a arr=($1)\n  local -a left\n  local -a right\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i n=${#arr[@]}\n\n  # left[i] = max sum of increasing subsequence ending at arr[i]\n  left[0]=${arr[0]}\n  for ((i=1; i<n; i++)); do\n    left[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        left[i]=$(( left[i] + left[j] ))\n      fi\n    done\n  done\n\n  # right[i] = max sum of decreasing subsequence starting at arr[i]\n  right[n-1]=${arr[n-1]}\n  for ((i=n-2; i>=0; i--)); do\n    right[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        right[i]=$(( right[i] + right[j] ))\n      fi\n    done\n  done\n\n  # max sum of bitonic subsequence = max(left[i] + right[i] - arr[i])\n  for ((i=0; i<n; i++)); do\n    sum=$(( left[i] + right[i] - arr[i] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n  local -i max_inc=0\n  local -i max_dec=0\n\n  for ((i=1; i<len; i++)); do\n    max_inc=0\n    max_dec=0\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        if ((inc[j] > max_inc)); then\n          max_inc=inc[j]\n        fi\n      fi\n    done\n    inc[i]=$((arr[i] + max_inc))\n    for ((k=i+1; k<len; k++)); do\n      if ((arr[k] < arr[i])); then\n        if ((dec[k] > max_dec)); then\n          max_dec=dec[k]\n        fi\n      fi\n    done\n    dec[i]=$((arr[i] + max_dec))\n  done\n\n  for ((i=0; i<len; i++)); do\n    sum=${inc[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n    sum=${dec[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n  echo $max",
    "    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=0\n    local -i sum=0\n    while (( i < ${#arr[@]} )); do\n        if (( arr[i] > arr[i-1] )); then\n            inc[i]=$(( inc[i-1] + arr[i] ))\n        else\n            inc[i]=${arr[i]}\n        fi\n        if (( arr[j] > arr[j+1] )); then\n            dec[j]=$(( dec[j+1] + arr[j] ))\n        else\n            dec[j]=${arr[j]}\n        fi\n        (( i++ ))\n        (( j-- ))\n    done\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        sum=$(( inc[i] + dec[i] - arr[i] ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n    done\n    echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n  done\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if (( arr[i] > arr[j] )); then\n        inc[i]=$(( inc[i] + arr[j] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[i] > arr[j] )); then\n        dec[i]=$(( dec[i] + arr[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( inc[i] + dec[i] - arr[i] > max )); then\n      max=$(( inc[i] + dec[i] - arr[i] ))\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n\n  while (( i < len )); do\n    if (( arr[i] > inc[-1] )); then\n      inc+=(${arr[i]})\n    else\n      inc[-1]=${arr[i]}\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > dec[-1] )); then\n      dec+=(${arr[j]})\n    else\n      dec[-1]=${arr[j]}\n    fi\n    (( j-- ))\n  done\n\n  for (( i = 0; i < len; i++ )); do\n    sum=${inc[i]}+${dec[len-i-1]}\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n  local -i sum=0\n\n  for ((i=1;i<${#arr[@]};i++)); do\n    inc[i]=${arr[i]}\n    dec[j]=${arr[j]}\n    ((j--))\n    for ((k=0;k<i;k++)); do\n      if ((arr[i]>arr[k])); then\n        ((sum=inc[k]+arr[i]))\n        if ((sum>inc[i])); then\n          inc[i]=$sum\n        fi\n      fi\n    done\n    for ((k=${#arr[@]}-1;k>j;k--)); do\n      if ((arr[j]>arr[k])); then\n        ((sum=dec[k]+arr[j]))\n        if ((sum>dec[j])); then\n          dec[j]=$sum\n        fi\n      fi\n    done\n  done\n\n  for ((i=0;i<${#arr[@]};i++)); do\n    ((sum=inc[i]+dec[i]-arr[i]))\n    if ((sum>max_sum)); then\n      max_sum=$sum\n    fi\n  done\n\n  echo $max_sum",
    "    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                (( inc[i] = inc[j] + arr[i] ))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if (( arr[j] < arr[i] )); then\n                (( dec[i] = dec[j] + arr[i] ))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        (( max = max > inc[i] + dec[i] - arr[i] ? max : inc[i] + dec[i] - arr[i] ))\n    done\n\n    echo $max",
    "  local -a array=( $1 )\n  local -a lis\n  local -a lds\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i n=${#array[@]}\n\n  # find the longest increasing subsequence\n  for (( i=0; i<n; i++ )); do\n    lis[i]=1\n    for (( j=0; j<i; j++ )); do\n      if (( array[j] < array[i] && lis[i] < lis[j]+1 )); then\n        lis[i]=$(( lis[j]+1 ))\n      fi\n    done\n  done\n\n  # find the longest decreasing subsequence\n  for (( i=n-1; i>=0; i-- )); do\n    lds[i]=1\n    for (( j=n-1; j>i; j-- )); do\n      if (( array[j] < array[i] && lds[i] < lds[j]+1 )); then\n        lds[i]=$(( lds[j]+1 ))\n      fi\n    done\n  done\n\n  # find the maximum sum\n  for (( i=0; i<n; i++ )); do\n    if (( max < lis[i]+lds[i]-1 )); then\n      max=$(( lis[i]+lds[i]-1 ))\n    fi\n  done\n\n  echo $max",
    "    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=${arr[0]}\n    local -i sum=0\n    while (( i < ${#arr[@]} )); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n        fi\n        inc[i]=$max\n        (( i++ ))\n    done\n    max=${arr[-1]}\n    while (( j >= 0 )); do\n        if (( arr[j] > max )); then\n            max=${arr[j]}\n        fi\n        dec[j]=$max\n        (( j-- ))\n    done\n    i=0\n    while (( i < ${#arr[@]} )); do\n        sum=$(( inc[i] + dec[i] - arr[i] ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n        (( i++ ))\n    done\n    echo $max",
    "  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > inc[-1] )); then\n      inc+=(${arr[i]})\n    else\n      inc[-1]=${arr[i]}\n    fi\n    if (( arr[j] > dec[-1] )); then\n      dec+=(${arr[j]})\n    else\n      dec[-1]=${arr[j]}\n    fi\n    (( i++, j-- ))\n  done\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    local -i sum=$(( inc[i] + dec[i] - arr[i] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        (( inc[i] = inc[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        (( dec[i] = dec[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    (( max = (inc[i] + dec[i] - arr[i]) > max ? (inc[i] + dec[i] - arr[i]) : max ))\n  done\n\n  echo $max",
    "  local -a arr=(\"$@\")\n  local -a inc\n  local -a dec\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n\n  inc[0]=${arr[0]}\n  dec[len-1]=${arr[len-1]}\n\n  for ((i=1; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc[i]=$(( inc[i] + inc[j] ))\n      fi\n    done\n  done\n\n  for ((i=len-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        dec[i]=$(( dec[i] + dec[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    sum=$(( inc[i] + dec[i] - arr[i] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n      if ((arr[j] > arr[i])); then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n    if ((inc[i] > max)); then\n      max=${inc[i]}\n    fi\n    if ((dec[i] > max)); then\n      max=${dec[i]}\n    fi\n  done\n\n  echo $max",
    "    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n    local i=0\n    local j=0\n    local sum=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                inc[i]=$(( inc[i] + inc[j] ))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if (( arr[j] < arr[i] )); then\n                dec[i]=$(( dec[i] + dec[j] ))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=$(( inc[i] + dec[i] - arr[i] ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n    done\n\n    echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j]<arr[i] && inc[i]<inc[j]+arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=len-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if ((arr[j]<arr[i] && dec[i]<dec[j]+arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    if ((max<inc[i]+dec[i]-arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[j]<arr[i] && inc[i]<inc[j]+arr[i])); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j]<arr[i] && dec[i]<dec[j]+arr[i])); then\n        dec[i]=dec[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max<inc[i]+dec[i]-arr[i])); then\n      max=inc[i]+dec[i]-arr[i]\n    fi\n  done\n\n  echo $max",
    "  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n  done\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n    done\n  done\n\n  for ((i=$((${#arr[@]} - 2)); i>=0; i--)); do\n    for ((j=$((${#arr[@]} - 1)); j>i; j--)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ $((inc[i] + dec[i] - arr[i])) -gt $max ]]; then\n      max=$((inc[i] + dec[i] - arr[i]))\n    fi\n  done\n\n  echo $max",
    "    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=${arr[0]}\n    local -i sum=0\n\n    while (( i < ${#arr[@]} )); do\n        if (( arr[i] > arr[i-1] )); then\n            inc[i]=${inc[i-1]}+${arr[i]}\n        else\n            inc[i]=${arr[i]}\n        fi\n        (( i++ ))\n    done\n\n    while (( j >= 0 )); do\n        if (( arr[j] > arr[j+1] )); then\n            dec[j]=${dec[j+1]}+${arr[j]}\n        else\n            dec[j]=${arr[j]}\n        fi\n        (( j-- ))\n    done\n\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        sum=${inc[i]}+${dec[i]}\n        if (( sum > max )); then\n            max=sum\n        fi\n    done\n\n    echo $max",
    "  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i max=0\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((a[j] < a[i])); then\n        if ((b[i] < b[j] + a[i])); then\n          b[i]=b[j] + a[i]\n        fi\n      fi\n    done\n  done\n\n  for ((k=${#c[@]}-1; k>=0; k--)); do\n    for ((l=${#c[@]}-1; l>k; l--)); do\n      if ((c[l] < c[k])); then\n        if ((d[k] < d[l] + c[k])); then\n          d[k]=d[l] + c[k]\n        fi\n      fi\n    done\n  done\n\n  for ((m=0; m<${#a[@]}; m++)); do\n    for ((n=0; n<${#a[@]}; n++)); do\n      if ((m != n)); then\n        if ((b[m] + d[n] > max)); then\n          max=b[m] + d[n]\n        fi\n      fi\n    done\n  done\n\n  echo $max"
  ]
}