{
  "name": "mbpp_641_is_nonagonal",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the nth nonagonal number.\n#\n# $1 is an integer\nis_nonagonal() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    is_nonagonal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"325\" ]]\n    [[ $(candidate \"15\") = \"750\" ]]\n    [[ $(candidate \"18\") = \"1089\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local nth_nonagonal=$(((n * (n + 1)) / 2))\n    echo $nth_nonagonal",
    "  local n=$1\n  local nth_nonagonal=$(echo \"($n * (3 * $n - 1)) / 2\" | bc)\n  echo $nth_nonagonal",
    "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local x=$(echo \"sqrt(8*$n+1)\" | bc)\n    local y=$(echo \"$x%2\" | bc)\n    if [ $y -eq 1 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    local n=$1\n    local nth_nonagonal=$(( (8 * n * n - 8 * n + 1) / 2 ))\n    echo $nth_nonagonal",
    "    local n=$1\n    local n_sqrt=$(echo \"sqrt(8 * $n + 1)\" | bc)\n    local n_sqrt_int=$(echo \"$n_sqrt\" | cut -d '.' -f 1)\n    local n_sqrt_dec=$(echo \"$n_sqrt\" | cut -d '.' -f 2)\n    if [ \"$n_sqrt_dec\" == \"0\" ]; then\n        echo \"$n_sqrt_int\"\n    else\n        echo \"0\"\n    fi",
    "    local n=$1\n    local nth_nonagonal=$(echo \"scale=0; (sqrt(1+8*$n)-1)/2\" | bc)\n    if [ $nth_nonagonal -eq $nth_nonagonal 2> /dev/null ]; then\n        echo \"1\"\n    else\n        echo \"0\"\n    fi",
    "    local n=$1\n    local x=$(echo \"sqrt(8*$n+1)+1\" | bc)\n    local y=$(echo \"$x%2\" | bc)\n    if [ $y -eq 0 ]; then\n        echo \"$n is nonagonal\"\n    else\n        echo \"$n is not nonagonal\"\n    fi",
    "    local n=$1\n    local nth_nonagonal=$(echo \"sqrt(8*$n+1)+1\" | bc)\n    local nth_nonagonal_int=$(echo \"$nth_nonagonal/2\" | bc)\n    local nth_nonagonal_dec=$(echo \"$nth_nonagonal-$nth_nonagonal_int\" | bc)\n    if [ \"$nth_nonagonal_dec\" == \"0\" ]; then\n        echo \"y\"\n    else\n        echo \"n\"\n    fi",
    "    local n=$1\n    local nth=$(echo \"scale=0; (sqrt(1+8*$n)-1)/2\" | bc)\n    local nonagonal=$(echo \"scale=0; $nth*(3*$nth-1)/2\" | bc)\n    if [ $nonagonal -eq $n ]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local n=$1\n    local nth=$(echo \"sqrt(8*$n+1)+1\" | bc)\n    if [[ $(($nth % 2)) -eq 0 ]]; then\n        echo \"$n is nonagonal\"\n    else\n        echo \"$n is not nonagonal\"\n    fi",
    "    local n=$1\n    local x=$(echo \"sqrt(8*$n+1)+1\" | bc)\n    local y=$(echo \"$x % 2\" | bc)\n    if [ $y -eq 0 ]; then\n        echo \"1\"\n    else\n        echo \"0\"\n    fi",
    "    local n=$1\n    local nth=$(($n * (3 * $n - 1) / 2))\n    echo $nth",
    "    local n=$1\n    local x=$(echo \"sqrt(1+8*$n)\" | bc)\n    local y=$(echo \"$x % 1\" | bc)\n    [[ $y == 0 ]] && return 0 || return 1",
    "    local n=$1\n    local nth=$(echo \"sqrt(8*$n+1)+1\" | bc)\n    local nth_int=$(echo $nth | cut -d. -f1)\n    if [ $nth_int -eq $nth ]; then\n        return 0\n    else\n        return 1\n    fi",
    "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local x=$(echo \"sqrt(1+8*$n)\" | bc)\n    local y=$(echo \"$x % 2\" | bc)\n    if [ $y -eq 1 ]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local a=$(echo \"scale=0; (sqrt(1+8*$n)-1)/2\" | bc)\n    local b=$(echo \"scale=0; $n - $a*(3*$a-1)/2\" | bc)\n    [ $b -eq 0 ] && return 0 || return 1",
    "    local n=$1\n    local nth_nonagonal=$(((n * (n * 3 - 1)) / 2))\n    echo $nth_nonagonal",
    "    local n=$1\n    local n_sqrt=$(echo \"sqrt(1+8*$n)\" | bc -l)\n    local n_sqrt_int=$(echo $n_sqrt | cut -d. -f1)\n    local n_sqrt_dec=$(echo $n_sqrt | cut -d. -f2)\n    if [ $n_sqrt_dec -eq 0 ] && [ $(($n_sqrt_int % 2)) -eq 1 ]; then\n        return 0\n    else\n        return 1\n    fi"
  ]
}