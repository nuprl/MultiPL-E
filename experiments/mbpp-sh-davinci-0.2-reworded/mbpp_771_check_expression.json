{
  "name": "mbpp_771_check_expression",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n#\n# $1 is a string\ncheck_expression() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    check_expression \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"{()}[{}]\") = \"true\" ]]\n    [[ $(candidate \"{()}[{]\") = \"false\" ]]\n    [[ $(candidate \"{()}[{}][]({})\") = \"true\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local expression=\"$1\"\n    local stack=()\n    local char\n    local stack_top\n    local balanced=1\n\n    for ((i=0; i<${#expression}; i++)); do\n        char=\"${expression:i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack+=($char)\n        elif [[ \"$char\" == \")\" ]]; then\n            stack_top=\"${stack[-1]}\"\n            if [[ \"$stack_top\" == \"(\" ]]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n            else\n                balanced=0\n                break\n            fi\n        fi\n    done\n\n    if [[ \"${#stack[@]}\" -gt 0 ]]; then\n        balanced=0\n    fi\n\n    echo \"$balanced\"",
    "  local expression=\"$1\"\n  local stack=()\n  local stack_index=0\n  local char\n  local top_char\n  local is_balanced=true\n\n  for (( i=0; i<${#expression}; i++ )); do\n    char=\"${expression:$i:1}\"\n    if [[ \"$char\" == \"(\" || \"$char\" == \"{\" || \"$char\" == \"[\" ]]; then\n      stack[$stack_index]=\"$char\"\n      stack_index=$((stack_index + 1))\n    elif [[ \"$char\" == \")\" || \"$char\" == \"}\" || \"$char\" == \"]\" ]]; then\n      if [[ \"$stack_index\" -eq 0 ]]; then\n        is_balanced=false\n        break\n      fi\n      stack_index=$((stack_index - 1))\n      top_char=\"${stack[$stack_index]}\"\n      if [[ \"$char\" == \")\" && \"$top_char\" != \"(\" ]] ||\n         [[ \"$char\" == \"}\" && \"$top_char\" != \"{\" ]] ||\n         [[ \"$char\" == \"]\" && \"$top_char\" != \"[\" ]]; then\n        is_balanced=false\n        break\n      fi\n    fi\n  done\n\n  if [[ \"$stack_index\" -ne 0 ]]; then\n    is_balanced=false\n  fi\n\n  echo \"$is_balanced\"",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local open_brackets=(\"(\" \"[\" \"{\")\n    local close_brackets=(\")\" \"]\" \"}\")\n    local open_brackets_count=${#open_brackets[@]}\n    local close_brackets_count=${#close_brackets[@]}\n    local i=0\n    local j=0\n    local is_balanced=1\n\n    for ((i=0; i<${#expression}; i++)); do\n        for ((j=0; j<${open_brackets_count}; j++)); do\n            if [[ \"${expression:$i:1}\" == \"${open_brackets[$j]}\" ]]; then\n                stack[$stack_index]=\"${open_brackets[$j]}\"\n                stack_index=$((stack_index+1))\n                break\n            fi\n        done\n\n        for ((j=0; j<${close_brackets_count}; j++)); do\n            if [[ \"${expression:$i:1}\" == \"${close_brackets[$j]}\" ]]; then\n                if [[ \"${stack[$((stack_index-1))]}\" == \"${open_brackets[$j]}\" ]]; then\n                    stack_index=$((stack_index-1))\n                    break\n                else\n                    is_balanced=0\n                    break\n                fi\n            fi\n        done\n    done\n\n    if [[ $is_balanced -eq 1 ]] && [[ $stack_index -eq 0 ]]; then\n        echo \"The expression is balanced\"\n    else\n        echo \"The expression is not balanced\"\n    fi",
    "    local expression=$1\n    local stack=()\n    local stack_index=0\n    local balanced=true\n\n    for (( i=0; i<${#expression}; i++ )); do\n        local char=${expression:$i:1}\n\n        if [[ $char == \"(\" || $char == \"[\" || $char == \"{\" ]]; then\n            stack[$stack_index]=$char\n            stack_index=$((stack_index+1))\n        elif [[ $char == \")\" ]]; then\n            if [[ ${stack[$((stack_index-1))]} == \"(\" ]]; then\n                stack_index=$((stack_index-1))\n            else\n                balanced=false\n                break\n            fi\n        elif [[ $char == \"]\" ]]; then\n            if [[ ${stack[$((stack_index-1))]} == \"[\" ]]; then\n                stack_index=$((stack_index-1))\n            else\n                balanced=false\n                break\n            fi\n        elif [[ $char == \"}\" ]]; then\n            if [[ ${stack[$((stack_index-1))]} == \"{\" ]]; then\n                stack_index=$((stack_index-1))\n            else\n                balanced=false\n                break\n            fi\n        fi\n    done\n\n    if [[ $balanced == true && $stack_index == 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Not balanced\"\n    fi",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_size=0\n    local i=0\n    local char=''\n    local top=''\n    local is_balanced=1\n\n    for ((i=0; i<${#expression}; i++)); do\n        char=\"${expression:$i:1}\"\n        if [[ \"$char\" == '(' || \"$char\" == '[' || \"$char\" == '{' ]]; then\n            stack+=(\"$char\")\n            stack_size=$((stack_size+1))\n        elif [[ \"$char\" == ')' || \"$char\" == ']' || \"$char\" == '}' ]]; then\n            if [[ $stack_size -eq 0 ]]; then\n                is_balanced=0\n                break\n            fi\n            top=\"${stack[$((stack_size-1))]}\"\n            if [[ \"$char\" == ')' && \"$top\" == '(' ]] || [[ \"$char\" == ']' && \"$top\" == '[' ]] || [[ \"$char\" == '}' && \"$top\" == '{' ]]; then\n                stack_size=$((stack_size-1))\n            else\n                is_balanced=0\n                break\n            fi\n        fi\n    done\n\n    if [[ $is_balanced -eq 1 && $stack_size -eq 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Not balanced\"\n    fi",
    "    local expression=$1\n    local stack=()\n    local top=0\n    local i=0\n    local length=${#expression}\n    local current_char\n    local top_char\n\n    while [ $i -lt $length ]\n    do\n        current_char=${expression:$i:1}\n        if [ \"$current_char\" == \"(\" ] || [ \"$current_char\" == \"[\" ] || [ \"$current_char\" == \"{\" ]\n        then\n            stack[$top]=$current_char\n            ((top++))\n        else\n            if [ $top -eq 0 ]\n            then\n                echo \"Not balanced\"\n                return\n            fi\n            top_char=${stack[$top-1]}\n            if [ \"$current_char\" == \")\" ] && [ \"$top_char\" == \"(\" ] || [ \"$current_char\" == \"]\" ] && [ \"$top_char\" == \"[\" ] || [ \"$current_char\" == \"}\" ] && [ \"$top_char\" == \"{\" ]\n            then\n                unset stack[$top-1]\n                ((top--))\n            else\n                echo \"Not balanced\"\n                return\n            fi\n        fi\n        ((i++))\n    done\n\n    if [ $top -eq 0 ]\n    then\n        echo \"Balanced\"\n    else\n        echo \"Not balanced\"\n    fi",
    "    local expression=$1\n    local stack=()\n    local stack_index=0\n    local char\n    local top_char\n    local balanced=true\n    for (( i=0; i<${#expression}; i++ )); do\n        char=${expression:$i:1}\n        if [[ $char == '(' || $char == '[' || $char == '{' ]]; then\n            stack[$stack_index]=$char\n            (( stack_index++ ))\n        else\n            if [[ $stack_index -eq 0 ]]; then\n                balanced=false\n                break\n            fi\n            (( stack_index-- ))\n            top_char=${stack[$stack_index]}\n            if [[ $char == ')' && $top_char != '(' || \\\n                  $char == ']' && $top_char != '[' || \\\n                  $char == '}' && $top_char != '{' ]]; then\n                balanced=false\n                break\n            fi\n        fi\n    done\n    if [[ $stack_index -ne 0 ]]; then\n        balanced=false\n    fi\n    echo $balanced",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local stack_size=0\n    local char\n    local i\n\n    for ((i=0; i<${#expression}; i++)); do\n        char=${expression:i:1}\n        case \"$char\" in\n            '(')\n                stack[stack_index++]=\"$char\"\n                stack_size=$stack_index\n                ;;\n            ')')\n                if [[ $stack_size -eq 0 ]]; then\n                    echo \"Unbalanced\"\n                    return 1\n                fi\n                stack_index=$((stack_index-1))\n                stack_size=$stack_index\n                ;;\n        esac\n    done\n\n    if [[ $stack_size -eq 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Unbalanced\"\n    fi",
    "    local expression=$1\n    local stack=()\n    local top=0\n    local i=0\n    local length=${#expression}\n    local char\n    local open_brackets=('(' '{' '[')\n    local close_brackets=(')' '}' ']')\n    local open_brackets_index\n    local close_brackets_index\n\n    while [ $i -lt $length ]; do\n        char=${expression:$i:1}\n        open_brackets_index=$(index_of \"$char\" \"${open_brackets[@]}\")\n        close_brackets_index=$(index_of \"$char\" \"${close_brackets[@]}\")\n        if [ $open_brackets_index -ge 0 ]; then\n            stack[$top]=$open_brackets_index\n            top=$((top+1))\n        elif [ $close_brackets_index -ge 0 ]; then\n            if [ $top -eq 0 ]; then\n                return 1\n            fi\n            top=$((top-1))\n            if [ ${stack[$top]} -ne $close_brackets_index ]; then\n                return 1\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [ $top -ne 0 ]; then\n        return 1\n    fi\n\n    return 0",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local i=0\n    local length=${#expression}\n    local current_char\n    local top_char\n\n    while [[ $i -lt $length ]]; do\n        current_char=${expression:$i:1}\n        if [[ $current_char == '(' || $current_char == '[' || $current_char == '{' ]]; then\n            stack[$stack_index]=$current_char\n            ((stack_index++))\n        elif [[ $current_char == ')' || $current_char == ']' || $current_char == '}' ]]; then\n            if [[ $stack_index -eq 0 ]]; then\n                echo \"Unbalanced\"\n                return\n            fi\n            top_char=${stack[$((stack_index-1))]}\n            if [[ $current_char == ')' && $top_char == '(' || $current_char == ']' && $top_char == '[' || $current_char == '}' && $top_char == '{' ]]; then\n                unset stack[$((stack_index-1))]\n                ((stack_index--))\n            else\n                echo \"Unbalanced\"\n                return\n            fi\n        fi\n        ((i++))\n    done\n\n    if [[ $stack_index -eq 0 ]]; then\n        echo \"Balanced\"\n    else\n        echo \"Unbalanced\"\n    fi",
    "    local expression=$1\n    local stack=()\n    local top=0\n    local i=0\n    local len=${#expression}\n    local char=''\n    local is_balanced=true\n\n    while [ $i -lt $len ]; do\n        char=${expression:$i:1}\n        if [ $char == '(' ]; then\n            stack[$top]=$char\n            top=$((top+1))\n        elif [ $char == ')' ]; then\n            if [ $top -eq 0 ]; then\n                is_balanced=false\n                break\n            fi\n            top=$((top-1))\n        fi\n        i=$((i+1))\n    done\n\n    if [ $top -ne 0 ]; then\n        is_balanced=false\n    fi\n\n    echo $is_balanced",
    "    local expression=\"$1\"\n    local stack=()\n    local i=0\n    local c\n    local top\n\n    while [ $i -lt ${#expression} ]; do\n        c=${expression:$i:1}\n        case $c in\n            '(' | '[' | '{')\n                stack+=($c)\n                ;;\n            ')' | ']' | '}')\n                top=${stack[-1]}\n                case $c in\n                    ')' )\n                        if [ \"$top\" != '(' ]; then\n                            echo \"Unbalanced expression\"\n                            return 1\n                        fi\n                        ;;\n                    ']' )\n                        if [ \"$top\" != '[' ]; then\n                            echo \"Unbalanced expression\"\n                            return 1\n                        fi\n                        ;;\n                    '}' )\n                        if [ \"$top\" != '{' ]; then\n                            echo \"Unbalanced expression\"\n                            return 1\n                        fi\n                        ;;\n                esac\n                unset stack[-1]\n                ;;\n        esac\n        ((i++))\n    done\n\n    if [ ${#stack[@]} -gt 0 ]; then\n        echo \"Unbalanced expression\"\n        return 1\n    fi\n\n    echo \"Balanced expression\"\n    return 0",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local open_brackets=(\"(\" \"[\" \"{\")\n    local close_brackets=(\")\" \"]\" \"}\")\n    local open_bracket_index=0\n    local close_bracket_index=0\n    local is_balanced=true\n\n    for ((i=0; i<${#expression}; i++)); do\n        for ((j=0; j<${#open_brackets[@]}; j++)); do\n            if [[ \"${expression:$i:1}\" == \"${open_brackets[$j]}\" ]]; then\n                stack[$stack_index]=\"${open_brackets[$j]}\"\n                stack_index=$((stack_index+1))\n                open_bracket_index=$j\n            fi\n        done\n\n        for ((j=0; j<${#close_brackets[@]}; j++)); do\n            if [[ \"${expression:$i:1}\" == \"${close_brackets[$j]}\" ]]; then\n                if [[ \"${stack[$((stack_index-1))]}\" == \"${open_brackets[$j]}\" ]]; then\n                    unset stack[$((stack_index-1))]\n                    stack_index=$((stack_index-1))\n                else\n                    is_balanced=false\n                    break\n                fi\n            fi\n        done\n\n        if [[ \"$is_balanced\" == false ]]; then\n            break\n        fi\n    done\n\n    if [[ \"$is_balanced\" == true ]] && [[ \"$stack_index\" == 0 ]]; then\n        echo \"Expression is balanced\"\n    else\n        echo \"Expression is not balanced\"\n    fi",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local i\n    local char\n    local top_char\n    local is_balanced=1\n\n    for (( i=0; i<${#expression}; i++ )); do\n        char=${expression:i:1}\n        if [[ \"$char\" == \"(\" || \"$char\" == \"{\" || \"$char\" == \"[\" ]]; then\n            stack[stack_index++]=$char\n        elif [[ \"$char\" == \")\" || \"$char\" == \"}\" || \"$char\" == \"]\" ]]; then\n            if [[ $stack_index -eq 0 ]]; then\n                is_balanced=0\n                break\n            fi\n            top_char=${stack[--stack_index]}\n            if [[ \"$top_char\" == \"(\" && \"$char\" != \")\" ]]; then\n                is_balanced=0\n                break\n            elif [[ \"$top_char\" == \"{\" && \"$char\" != \"}\" ]]; then\n                is_balanced=0\n                break\n            elif [[ \"$top_char\" == \"[\" && \"$char\" != \"]\" ]]; then\n                is_balanced=0\n                break\n            fi\n        fi\n    done\n\n    if [[ $stack_index -ne 0 ]]; then\n        is_balanced=0\n    fi\n\n    echo $is_balanced",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local char\n    local top_char\n    local is_balanced=true\n\n    for (( i=0; i<${#expression}; i++ )); do\n        char=\"${expression:$i:1}\"\n        case \"$char\" in\n            '(')\n                stack[$stack_index]='('\n                (( stack_index++ ))\n                ;;\n            ')')\n                if (( stack_index == 0 )); then\n                    is_balanced=false\n                    break\n                fi\n                top_char=\"${stack[$(( stack_index - 1 ))]}\"\n                if [[ \"$top_char\" != '(' ]]; then\n                    is_balanced=false\n                    break\n                fi\n                unset stack[$(( stack_index - 1 ))]\n                (( stack_index-- ))\n                ;;\n        esac\n    done\n\n    if (( stack_index > 0 )); then\n        is_balanced=false\n    fi\n\n    if $is_balanced; then\n        echo \"Balanced\"\n    else\n        echo \"Not Balanced\"\n    fi",
    "    local expression=$1\n    local stack=()\n    local stack_top=0\n    local i=0\n    local len=${#expression}\n    local c\n    local top_c\n\n    while [ $i -lt $len ]; do\n        c=${expression:$i:1}\n        case $c in\n            '(')\n                stack[$stack_top]=$c\n                stack_top=$((stack_top+1))\n                ;;\n            ')')\n                if [ $stack_top -eq 0 ]; then\n                    echo \"Unbalanced\"\n                    return 1\n                fi\n                stack_top=$((stack_top-1))\n                top_c=${stack[$stack_top]}\n                if [ \"$top_c\" != \"(\" ]; then\n                    echo \"Unbalanced\"\n                    return 1\n                fi\n                ;;\n            *)\n                ;;\n        esac\n        i=$((i+1))\n    done\n\n    if [ $stack_top -ne 0 ]; then\n        echo \"Unbalanced\"\n        return 1\n    fi\n\n    echo \"Balanced\"\n    return 0",
    "  local expression=\"$1\"\n  local stack=()\n  local is_balanced=1\n\n  for ((i=0; i<${#expression}; i++)); do\n    local char=\"${expression:i:1}\"\n    if [[ \"$char\" == \"(\" || \"$char\" == \"[\" || \"$char\" == \"{\" ]]; then\n      stack+=(\"$char\")\n    elif [[ \"$char\" == \")\" ]]; then\n      if [[ \"${stack[-1]}\" == \"(\" ]]; then\n        stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n      else\n        is_balanced=0\n        break\n      fi\n    elif [[ \"$char\" == \"]\" ]]; then\n      if [[ \"${stack[-1]}\" == \"[\" ]]; then\n        stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n      else\n        is_balanced=0\n        break\n      fi\n    elif [[ \"$char\" == \"}\" ]]; then\n      if [[ \"${stack[-1]}\" == \"{\" ]]; then\n        stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n      else\n        is_balanced=0\n        break\n      fi\n    fi\n  done\n\n  if [[ \"${#stack[@]}\" -ne 0 ]]; then\n    is_balanced=0\n  fi\n\n  echo \"$is_balanced\"",
    "    local expression=\"$1\"\n    local stack=()\n    local stack_index=0\n    local char\n    local top_char\n    local balanced=true\n\n    for (( i=0; i<${#expression}; i++ )); do\n        char=\"${expression:$i:1}\"\n        if [[ \"$char\" == \"(\" || \"$char\" == \"{\" || \"$char\" == \"[\" ]]; then\n            stack[$stack_index]=\"$char\"\n            stack_index=$(( stack_index + 1 ))\n        elif [[ \"$char\" == \")\" || \"$char\" == \"}\" || \"$char\" == \"]\" ]]; then\n            if [[ $stack_index -eq 0 ]]; then\n                balanced=false\n                break\n            fi\n            stack_index=$(( stack_index - 1 ))\n            top_char=\"${stack[$stack_index]}\"\n            if [[ \"$char\" == \")\" && \"$top_char\" != \"(\" ]]; then\n                balanced=false\n                break\n            elif [[ \"$char\" == \"}\" && \"$top_char\" != \"{\" ]]; then\n                balanced=false\n                break\n            elif [[ \"$char\" == \"]\" && \"$top_char\" != \"[\" ]]; then\n                balanced=false\n                break\n            fi\n        fi\n    done\n\n    if [[ $stack_index -ne 0 ]]; then\n        balanced=false\n    fi\n\n    echo \"$balanced\"",
    "    local stack=()\n    local char\n    local top\n    local balanced=1\n    local i=0\n    while [ $i -lt ${#1} ]; do\n        char=${1:$i:1}\n        case $char in\n            '('|'{'|'[')\n                stack+=($char)\n                ;;\n            ')'|'}'|']')\n                top=${stack[-1]}\n                if [[ $char == ')' && $top == '(' ]] || [[ $char == '}' && $top == '{' ]] || [[ $char == ']' && $top == '[' ]]; then\n                    unset stack[-1]\n                else\n                    balanced=0\n                    break\n                fi\n                ;;\n        esac\n        ((i++))\n    done\n    if [ ${#stack[@]} -gt 0 ]; then\n        balanced=0\n    fi\n    echo $balanced",
    "    local expression=\"$1\"\n    local stack=()\n    local top=0\n    local i=0\n    local len=${#expression}\n    local c\n    local c2\n    local balanced=1\n\n    while [ $i -lt $len ]; do\n        c=${expression:$i:1}\n        if [ \"$c\" == \"(\" -o \"$c\" == \"{\" -o \"$c\" == \"[\" ]; then\n            stack[$top]=$c\n            top=$((top+1))\n        elif [ \"$c\" == \")\" -o \"$c\" == \"}\" -o \"$c\" == \"]\" ]; then\n            if [ $top -eq 0 ]; then\n                balanced=0\n                break\n            fi\n            top=$((top-1))\n            c2=${stack[$top]}\n            if [ \"$c\" == \")\" -a \"$c2\" != \"(\" ]; then\n                balanced=0\n                break\n            elif [ \"$c\" == \"}\" -a \"$c2\" != \"{\" ]; then\n                balanced=0\n                break\n            elif [ \"$c\" == \"]\" -a \"$c2\" != \"[\" ]; then\n                balanced=0\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [ $top -ne 0 ]; then\n        balanced=0\n    fi\n\n    echo $balanced"
  ]
}