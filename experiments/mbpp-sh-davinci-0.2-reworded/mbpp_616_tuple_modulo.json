{
  "name": "mbpp_616_tuple_modulo",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function which takes two lists of the same length and performs the element wise modulo.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntuple_modulo() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    tuple_modulo \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5 6\" \"5 6 7 5\") = \"0 4 5 1\" ]]\n    [[ $(candidate \"11 5 6 7\" \"6 7 8 6\") = \"5 5 6 1\" ]]\n    [[ $(candidate \"12 6 7 8\" \"7 8 9 7\") = \"5 6 7 1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -n _tuple_modulo_list1=$1\n  local -n _tuple_modulo_list2=$2\n  local -a _tuple_modulo_result=()\n  for ((i=0; i<${#_tuple_modulo_list1[@]}; i++)); do\n    _tuple_modulo_result+=($((_tuple_modulo_list1[i] % _tuple_modulo_list2[i])))\n  done\n  echo \"${_tuple_modulo_result[@]}\"",
    "    local -a list1=($1)\n    local -a list2=($2)\n    local -a result=()\n    local i=0\n    for i in ${!list1[@]}; do\n        result[$i]=$((list1[$i] % list2[$i]))\n    done\n    echo ${result[@]}",
    "  local -a list1=($1)\n  local -a list2=($2)\n  local -a result=()\n  for ((i=0; i<${#list1[@]}; i++)); do\n    result[$i]=$((list1[$i] % list2[$i]))\n  done\n  echo \"${result[@]}\"",
    "    local -n a=$1\n    local -n b=$2\n    local c=()\n    for ((i=0; i<${#a[@]}; i++)); do\n        c[i]=$((a[i] % b[i]))\n    done\n    echo \"${c[@]}\"",
    "    local -n _tuple_modulo_a=$1\n    local -n _tuple_modulo_b=$2\n    local -a _tuple_modulo_result\n    for ((i=0; i<${#_tuple_modulo_a[@]}; i++)); do\n        _tuple_modulo_result[i]=$((_tuple_modulo_a[i] % _tuple_modulo_b[i]))\n    done\n    echo \"${_tuple_modulo_result[@]}\"",
    "    local -n tuple1=$1\n    local -n tuple2=$2\n    local -a result=()\n    for ((i=0; i<${#tuple1[@]}; i++)); do\n        result[i]=$((tuple1[i] % tuple2[i]))\n    done\n    echo \"${result[@]}\"",
    "    local -n list1=$1\n    local -n list2=$2\n    local -a result=()\n    for ((i=0; i<${#list1[@]}; i++)); do\n        result+=($((list1[i] % list2[i])))\n    done\n    echo \"${result[@]}\"",
    "    local -n a=$1\n    local -n b=$2\n    local -a result\n    for ((i=0; i<${#a[@]}; i++)); do\n        result+=(\"$((a[i] % b[i]))\")\n    done\n    echo \"${result[@]}\"",
    "    local -a list1=($1)\n    local -a list2=($2)\n    local -a result=()\n    local i=0\n    while [ $i -lt ${#list1[@]} ]; do\n        result+=($((list1[$i] % list2[$i])))\n        ((i++))\n    done\n    echo \"${result[@]}\"",
    "  local -a a=($1)\n  local -a b=($2)\n  local -a c=()\n  for ((i=0; i<${#a[@]}; i++)); do\n    c[i]=$((a[i] % b[i]))\n  done\n  echo \"${c[@]}\"",
    "  local -n l1=$1\n  local -n l2=$2\n  local -a result=()\n  for ((i=0; i<${#l1[@]}; i++)); do\n    result+=($((l1[i] % l2[i])))\n  done\n  echo \"${result[@]}\"",
    "    local -n _tuple_modulo_a=$1\n    local -n _tuple_modulo_b=$2\n    local _tuple_modulo_result=()\n    for ((i=0; i<${#_tuple_modulo_a[@]}; i++)); do\n        _tuple_modulo_result+=($((_tuple_modulo_a[i] % _tuple_modulo_b[i])))\n    done\n    printf '%s\\n' \"${_tuple_modulo_result[@]}\"",
    "    local -a a=($1)\n    local -a b=($2)\n    local -a c=()\n    for ((i=0; i<${#a[@]}; i++)); do\n        c[$i]=$((a[$i] % b[$i]))\n    done\n    echo \"${c[@]}\"",
    "    local -a list1=($1)\n    local -a list2=($2)\n    local -a result=()\n    for ((i=0; i<${#list1[@]}; i++)); do\n        result[$i]=$((list1[$i] % list2[$i]))\n    done\n    echo ${result[@]}",
    "  local -a list1=($1)\n  local -a list2=($2)\n  local -a list3=()\n  for ((i=0; i<${#list1[@]}; i++)); do\n    list3[$i]=$((${list1[$i]} % ${list2[$i]}))\n  done\n  echo ${list3[@]}",
    "  local -n _tuple_modulo_a=$1\n  local -n _tuple_modulo_b=$2\n  local _tuple_modulo_result=()\n  for ((i=0; i<${#_tuple_modulo_a[@]}; i++)); do\n    _tuple_modulo_result[$i]=$((_tuple_modulo_a[$i] % _tuple_modulo_b[$i]))\n  done\n  echo \"${_tuple_modulo_result[@]}\"",
    "    local -n _tuple_modulo_a=$1\n    local -n _tuple_modulo_b=$2\n    local _tuple_modulo_result=()\n    for (( i=0; i<${#_tuple_modulo_a[@]}; i++ )); do\n        _tuple_modulo_result+=($(( ${_tuple_modulo_a[$i]} % ${_tuple_modulo_b[$i]} )))\n    done\n    echo \"${_tuple_modulo_result[@]}\"",
    "    local -a a=($1)\n    local -a b=($2)\n    local -a c=()\n    for ((i=0; i<${#a[@]}; i++)); do\n        c[i]=$((a[i] % b[i]))\n    done\n    echo ${c[@]}",
    "    if [ \"$#\" -ne 2 ]; then\n        echo \"Usage: tuple_modulo <list1> <list2>\"\n        return 1\n    fi\n\n    local list1=\"$1\"\n    local list2=\"$2\"\n\n    local list1_length=$(echo \"$list1\" | wc -w)\n    local list2_length=$(echo \"$list2\" | wc -w)\n\n    if [ \"$list1_length\" -ne \"$list2_length\" ]; then\n        echo \"Error: list lengths are not equal\"\n        return 1\n    fi\n\n    local i=1\n    local result=\"\"\n    while [ \"$i\" -le \"$list1_length\" ]; do\n        local num1=$(echo \"$list1\" | cut -d \" \" -f \"$i\")\n        local num2=$(echo \"$list2\" | cut -d \" \" -f \"$i\")\n        local modulo=$((num1 % num2))\n        result=\"$result $modulo\"\n        i=$((i + 1))\n    done\n\n    echo \"$result\"",
    "    # Write your code here\n    if [ \"$#\" -ne 2 ]; then\n        echo \"Usage: tuple_modulo <list1> <list2>\"\n        return 1\n    fi\n    local list1=($1)\n    local list2=($2)\n    if [ \"${#list1[@]}\" -ne \"${#list2[@]}\" ]; then\n        echo \"Usage: tuple_modulo <list1> <list2>\"\n        return 1\n    fi\n    local result=()\n    for ((i=0; i<${#list1[@]}; i++)); do\n        result[i]=$(( ${list1[i]} % ${list2[i]} ))\n    done\n    echo \"${result[@]}\""
  ]
}