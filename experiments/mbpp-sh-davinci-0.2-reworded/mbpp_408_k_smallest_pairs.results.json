{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a pair\n    local i\n    local j\n    local sum\n    local -i min\n    local -i min_i\n    local -i min_j\n    local -i cnt=0\n\n    for ((i = 0; i < ${#a[@]}; i++)); do\n        for ((j = 0; j < ${#b[@]}; j++)); do\n            sum=$((a[i] + b[j]))\n            pair=($sum $i $j)\n            pairs+=(${pair[@]})\n        done\n    done\n\n    for ((i = 0; i < ${#pairs[@]}; i++)); do\n        if ((i % 3 == 0)); then\n            if ((cnt < k)); then\n                min=${pairs[i]}\n                min_i=${pairs[i + 1]}\n                min_j=${pairs[i + 2]}\n                cnt+=1\n            else\n                if ((min > ${pairs[i]})); then\n                    min=${pairs[i]}\n                    min_i=${pairs[i + 1]}\n                    min_j=${pairs[i + 2]}\n                fi\n            fi\n        fi\n    done\n\n    echo \"${a[min_i]} ${b[min_j]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a result=()\n  local -i i j\n  local -i a_len=${#a[@]}\n  local -i b_len=${#b[@]}\n  local -i min_i min_j min_sum\n  local -i sum\n\n  for ((i=0; i<a_len; i++)); do\n    for ((j=0; j<b_len; j++)); do\n      sum=$((a[i] + b[j]))\n      if ((${#result[@]} < k)); then\n        result+=($sum)\n        if ((${#result[@]} == k)); then\n          min_i=0\n          min_j=0\n          min_sum=${result[0]}\n          for ((i=1; i<k; i++)); do\n            if ((result[i] < min_sum)); then\n              min_i=$i\n              min_j=$i\n              min_sum=${result[i]}\n            fi\n          done\n        fi\n      elif ((sum < min_sum)); then\n        result[min_i]=$sum\n        min_j=$min_i\n        min_sum=$sum\n        for ((i=0; i<k; i++)); do\n          if ((result[i] < min_sum)); then\n            min_i=$i\n            min_j=$i\n            min_sum=${result[i]}\n          fi\n        done\n      fi\n    done\n  done\n\n  echo ${result[@]}\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -i i\n  local -i j\n  local -i n\n  local -i m\n  local -i index\n  local -i count\n  local -i sum\n\n  n=${#a[@]}\n  m=${#b[@]}\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      sum=$((a[i]+b[j]))\n      pair=($sum $i $j)\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n\n  IFS=$'\\n' pairs=($(sort -n <<<\"${pairs[*]}\"))\n  unset IFS\n\n  count=0\n  for ((i=0; i<${#pairs[@]}; i++)); do\n    if [[ $count -ge $k ]]; then\n      break\n    fi\n    index=${pairs[i]:4:1}\n    echo \"${a[index]} ${b[${pairs[i]:6}]}\"\n    ((count++))\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  local -a sorted=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n))\n  for ((i=0; i<k; i++)); do\n    echo \"${sorted[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sum\n  local -a index\n  local i j\n  local n=${#a[@]}\n  local m=${#b[@]}\n  local -i min_index\n  local -i min_sum\n  local -i min_i\n  local -i min_j\n  local -i count=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      pairs+=(\"${a[$i]} ${b[$j]}\")\n      sum+=(\"$((a[$i] + b[$j]))\")\n      index+=(\"$i $j\")\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    min_index=0\n    min_sum=${sum[0]}\n    for ((j=1; j<${#sum[@]}; j++)); do\n      if ((sum[$j] < min_sum)); then\n        min_index=$j\n        min_sum=${sum[$j]}\n      fi\n    done\n    min_i=${index[$min_index]% *}\n    min_j=${index[$min_index]#* }\n    echo \"${pairs[$min_index]}\"\n    unset pairs[$min_index]\n    unset sum[$min_index]\n    unset index[$min_index]\n    for ((j=0; j<${#index[@]}; j++)); do\n      if [[ \"${index[$j]}\" =~ ^\"$min_i \" ]]; then\n        unset pairs[$j]\n        unset sum[$j]\n        unset index[$j]\n      fi\n    done\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a pairs_sorted=()\n  local -a sums_sorted=()\n  local i j sum\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i]+b[j]))\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$sum\")\n      indices+=(\"$i $j\")\n    done\n  done\n  indices_sorted=($(printf '%s\\n' \"${indices[@]}\" | sort -n))\n  for ((i=0; i<k; i++)); do\n    pairs_sorted+=(\"${pairs[${indices_sorted[i]}]}\")\n    sums_sorted+=(\"${sums[${indices_sorted[i]}]}\")\n  done\n  printf '%s\\n' \"${pairs_sorted[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | sort -n | head -n $k | tr ' ' ','\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -a pair_sums\n  local -a pair_sum\n  local -a pair_sum_indexes\n  local -a pair_sum_index\n  local -a pair_sum_index_pairs\n  local -a pair_sum_index_pair\n  local -a pair_sum_index_pair_indexes\n  local -a pair_sum_index_pair_index\n  local -a pair_sum_index_pair_index_pairs\n  local -a pair_sum_index_pair_index_pair\n  local -a pair_sum_index_pair_index_pair_indexes\n  local -a pair_sum_index_pair_index_pair_index\n  local -a pair_sum_index_pair_index_pair_index_pairs\n  local -a pair_sum_index_pair_index_pair_index_pair\n  local -a pair_sum_index_pair_index_pair_index_pair_indexes\n  local -a pair_sum_index_pair_index_pair_index_pair_index\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pairs\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_indexes\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index_pairs\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index_pair\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index_pair_indexes\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index_pair_index\n  local -a pair\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((${a[$i]}+${b[$j]})))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sums\n  local i j\n  local sum\n  local len_a=${#a[@]}\n  local len_b=${#b[@]}\n  local len_pairs=0\n  local len_sums=0\n  local index\n\n  for ((i=0; i<len_a; i++)); do\n    for ((j=0; j<len_b; j++)); do\n      sum=$((a[i]+b[j]))\n      index=$(binary_search \"${sums[@]}\" $sum)\n      if [[ $index -eq -1 ]]; then\n        sums[len_sums++]=$sum\n        pairs[len_pairs++]=\"[${a[i]},${b[j]}]\"\n      else\n        sums[index]=$sum\n        pairs[index]=\"[${a[i]},${b[j]}]\"\n      fi\n    done\n  done\n\n  # sort sums\n  for ((i=0; i<len_sums; i++)); do\n    for ((j=i+1; j<len_sums; j++)); do\n      if [[ ${sums[i]} -gt ${sums[j]} ]]; then\n        tmp=${sums[i]}\n        sums[i]=${sums[j]}\n        sums[j]=$tmp\n        tmp=${pairs[i]}\n        pairs[i]=${pairs[j]}\n        pairs[j]=$tmp\n      fi\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    echo \"${pairs[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n/tmp/tmp5yd8bz5d.sh: line 24: binary_search: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a pairs_sorted=()\n  local -a sums_sorted=()\n  local i=0\n  local j=0\n  local sum=0\n  local index=0\n  local index_sorted=0\n  local pair=0\n  local sum_sorted=0\n  local pair_sorted=0\n\n  # Create pairs\n  for (( i=0; i<${#a[@]}; i++ )); do\n    for (( j=0; j<${#b[@]}; j++ )); do\n      pairs+=(${a[$i]} ${b[$j]})\n    done\n  done\n\n  # Create sums\n  for (( i=0; i<${#pairs[@]}; i+=2 )); do\n    sums+=($(( ${pairs[$i]} + ${pairs[$i+1]} )))\n  done\n\n  # Create indices\n  for (( i=0; i<${#sums[@]}; i++ )); do\n    indices+=($i)\n  done\n\n  # Sort sums\n  for (( i=0; i<${#sums[@]}; i++ )); do\n    for (( j=0; j<${#sums[@]}; j++ )); do\n      if [[ ${sums[$i]} -lt ${sums[$j]} ]]; then\n        sum=${sums[$i]}\n        sums[$i]=${sums[$j]}\n        sums[$j]=$sum\n        index=${indices[$i]}\n        indices[$i]=${indices[$j]}\n        indices[$j]=$index\n      fi\n    done\n  done\n\n  # Create sorted pairs\n  for (( i=0; i<${#indices[@]}; i++ )); do\n    pairs_sorted+=(${pairs[$(( ${indices[$i]} * 2 ))]} ${pairs[$\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8ta2wx3y.sh: line 62: syntax error near unexpected token `('\\n/tmp/tmp8ta2wx3y.sh: line 62: `candidate() {'\\n/tmp/tmp8ta2wx3y.sh: line 63: k_smallest_pairs: command not found\\n/tmp/tmp8ta2wx3y.sh: line 64: syntax error near unexpected token `}'\\n/tmp/tmp8ta2wx3y.sh: line 64: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sums\n  local -a indices\n  local -a sorted\n  local -a result\n  local i j\n  local sum\n  local index\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      index=$((i * ${#b[@]} + j))\n      pairs[$index]=$sum\n      sums[$index]=$sum\n    done\n  done\n\n  sorted=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n  for ((i=0; i<k; i++)); do\n    index=$(printf '%s\\n' \"${!pairs[@]}\" | grep -Fxn \"${sorted[i]}\" | cut -d: -f1)\n    result[$i]=${pairs[$index]}\n  done\n\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs=()\n    local -a sums=()\n    local -a indices=()\n    local i j sum index\n\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            sum=$((a[i]+b[j]))\n            index=$((i*${#b[@]}+j))\n            pairs[index]=\"${a[i]} ${b[j]}\"\n            sums[index]=$sum\n            indices[index]=$index\n        done\n    done\n\n    # Sort sums and indices in ascending order\n    for ((i=0; i<${#sums[@]}; i++)); do\n        for ((j=i+1; j<${#sums[@]}; j++)); do\n            if [[ ${sums[j]} -lt ${sums[i]} ]]; then\n                sums[i]=${sums[j]}\n                sums[j]=${sums[i]}\n                indices[i]=${indices[j]}\n                indices[j]=${indices[i]}\n            fi\n        done\n    done\n\n    # Print k smallest pairs\n    for ((i=0; i<k; i++)); do\n        echo \"${pairs[${indices[i]}]}\"\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  printf \"%s\\n\" \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a result\n  local -a tmp\n  local i\n  local j\n  local sum\n  local min\n  local min_i\n  local min_j\n  local -i len_a=${#a[@]}\n  local -i len_b=${#b[@]}\n  local -i len_result=0\n  local -i len_tmp=0\n  local -i len_min=0\n\n  for ((i=0; i<len_a; i++)); do\n    for ((j=0; j<len_b; j++)); do\n      sum=$((a[i]+b[j]))\n      tmp[len_tmp++]=$sum\n    done\n  done\n\n  while [ $len_result -lt $k ]; do\n    min=${tmp[0]}\n    min_i=0\n    min_j=0\n    for ((i=0; i<len_tmp; i++)); do\n      if [ ${tmp[i]} -lt $min ]; then\n        min=${tmp[i]}\n        min_i=$i\n      fi\n    done\n    result[len_result++]=$min\n    unset tmp[$min_i]\n    tmp=(${tmp[@]})\n  done\n\n  echo ${result[@]}\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmrqphe1x.sh: line 37: [: -lt: unary operator expected\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local -a c\n  local -i k=$3\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a arr1=($1)\n  local -a arr2=($2)\n  local -a pairs=()\n  local -i k=$3\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i min_sum=0\n  local -i min_i=0\n  local -i min_j=0\n  local -i len1=${#arr1[@]}\n  local -i len2=${#arr2[@]}\n\n  for ((i=0; i<len1; i++)); do\n    for ((j=0; j<len2; j++)); do\n      sum=$((arr1[i] + arr2[j]))\n      if ((${#pairs[@]} < k)); then\n        pairs+=($sum)\n      else\n        min_sum=${pairs[0]}\n        min_i=0\n        for ((i=1; i<${#pairs[@]}; i++)); do\n          if ((pairs[i] < min_sum)); then\n            min_sum=${pairs[i]}\n            min_i=$i\n          fi\n        done\n        if ((sum < min_sum)); then\n          pairs[min_i]=$sum\n        fi\n      fi\n    done\n  done\n\n  echo ${pairs[@]}\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i i j k\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i k=$3\n    local -i l=0\n    local -i r=0\n    local -i p=0\n    local -i q=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i t=0\n    local -i s=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i h=0\n    local -i g=0\n    local -i f=0\n    local -i e=0\n    local -i d=0\n    local -i c=0\n    local -i b=0\n    local -i a=0\n    local -i o=0\n    local -i j=0\n    local -i i=0\n    local -i h=0\n    local -i g=0\n    local -i f=0\n    local -i e=0\n    local -i d=0\n    local -i c=0\n    local -i b=0\n    local -i a=0\n    local -i o=0\n    local -i j=0\n    local -i i=0\n    local -i h=0\n    local -i g=0\n    local -i f=0\n    local -i e=0\n    local -i d=0\n    local -i c=0\n    local -i b=0\n    local -i a=0\n    local -i o=0\n    local -i j=0\n    local -i i=0\n    local -i h=0\n    local -i g=0\n    local -i f=0\n    local -i e=0\n    local -i d=0\n    local -i c=0\n    local -i b=0\n    local -i a=0\n    local -i o=0\n    local -i j=0\n    local -\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a arr1=($1)\n  local -a arr2=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local i j\n  for ((i=0; i<${#arr1[@]}; i++)); do\n    for ((j=0; j<${#arr2[@]}; j++)); do\n      pairs+=(\"${arr1[i]} ${arr2[j]}\")\n      sums+=(\"$((arr1[i]+arr2[j]))\")\n    done\n  done\n  local -a sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n  local -a sorted_pairs=()\n  for ((i=0; i<${#sorted_sums[@]}; i++)); do\n    for ((j=0; j<${#sums[@]}; j++)); do\n      if [[ ${sorted_sums[i]} -eq ${sums[j]} ]]; then\n        sorted_pairs+=(\"${pairs[j]}\")\n      fi\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    echo \"${sorted_pairs[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=($(printf \"%s\\n\" \"${pair[@]}\" | sort -n | tr '\\n' ' '))\n    done\n  done\n  printf \"%s\\n\" \"${pairs[@]}\" | sort -n | head -n $k | tr ' ' '\\n'\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local i j\n  local sum\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      sums[${#sums[@]}]=$sum\n      pairs[$sum]=${pairs[$sum]}${pairs[$sum]:+ }\"${a[i]} ${b[j]}\"\n    done\n  done\n\n  IFS=$'\\n'\n  sums=($(sort -n <<<\"${sums[*]}\"))\n  unset IFS\n\n  for ((i=0; i<k && i<${#sums[@]}; i++)); do\n    echo \"${pairs[${sums[i]}]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$((a[i]+b[j]))\")\n      indices+=(\"$i $j\")\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    local min_sum=${sums[0]}\n    local min_index=0\n    for ((j=1; j<${#sums[@]}; j++)); do\n      if ((sums[j]<min_sum)); then\n        min_sum=${sums[j]}\n        min_index=$j\n      fi\n    done\n    echo \"${pairs[min_index]} ${indices[min_index]}\"\n    unset pairs[min_index]\n    unset sums[min_index]\n    unset indices[min_index]\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c\n    local -a d\n    local -a e\n    local -a f\n    local -a g\n    local -a h\n    local -a i\n    local -a j\n    local -a k\n    local -a l\n    local -a m\n    local -a n\n    local -a o\n    local -a p\n    local -a q\n    local -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a A\n    local -a B\n    local -a C\n    local -a D\n    local -a E\n    local -a F\n    local -a G\n    local -a H\n    local -a I\n    local -a J\n    local -a K\n    local -a L\n    local -a M\n    local -a N\n    local -a O\n    local -a P\n    local -a Q\n    local -a R\n    local -a S\n    local -a T\n    local -a U\n    local -a V\n    local -a W\n    local -a X\n    local -a Y\n    local -a Z\n    local -a aa\n    local -a ab\n    local -a ac\n    local -a ad\n    local -a ae\n    local -a af\n    local -a ag\n    local -a ah\n    local -a ai\n    local -a aj\n    local -a ak\n    local -a al\n    local -a am\n    local -a an\n    local -a ao\n    local -a ap\n    local -a aq\n    local -a ar\n    local -a as\n    local -a at\n    local -a au\n    local -a av\n    local -a aw\n    local -a ax\n    local -a ay\n    local -a az\n    local -a aA\n    local -a aB\n    local -a aC\n    local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(${pair[@]})\n    done\n  done\n  echo ${pairs[@]} | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local -i k=$3\n  local -i i j\n  local -a c\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  local -a sorted=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n))\n  printf \"%s\\n\" \"${sorted[@]:0:$k}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i min_sum=0\n  local -i min_i=0\n  local -i min_j=0\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      sum=$((a[i]+b[j]))\n      if ((i==0 && j==0)); then\n        min_sum=$sum\n        min_i=$i\n        min_j=$j\n      elif ((sum < min_sum)); then\n        min_sum=$sum\n        min_i=$i\n        min_j=$j\n      fi\n    done\n  done\n\n  pair=(${a[min_i]} ${b[min_j]})\n  pairs=(${pair[@]})\n  a[min_i]=\n  b[min_j]=\n\n  for ((i=1; i<k; i++)); do\n    min_sum=0\n    for ((j=0; j<n; j++)); do\n      if [[ -z ${a[j]} ]]; then\n        continue\n      fi\n      for ((k=0; k<m; k++)); do\n        if [[ -z ${b[k]} ]]; then\n          continue\n        fi\n        sum=$((a[j]+b[k]))\n        if ((j==0 && k==0)); then\n          min_sum=$sum\n          min_i=$j\n          min_j=$k\n        elif ((sum < min_sum)); then\n          min_sum=$sum\n          min_i=$j\n          min_j=$k\n        fi\n      done\n    done\n    pair=(${a[min_i]} ${b[min_j]})\n    pairs=(${pairs[@]} ${pair[@]})\n    a[min_i\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmparvpmy4b.sh: line 66: unexpected EOF while looking for matching `]'\\n/tmp/tmparvpmy4b.sh: line 81: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -i k=$3\n    local -i i j\n    local -i len_a=${#a[@]}\n    local -i len_b=${#b[@]}\n    local -i len_c=$((len_a * len_b))\n    local -a c\n    local -i c_i=0\n    for ((i=0; i<len_a; i++)); do\n        for ((j=0; j<len_b; j++)); do\n            c[c_i++]=$((a[i] + b[j]))\n        done\n    done\n    for ((i=0; i<k; i++)); do\n        local -i min_i=$i\n        for ((j=i+1; j<len_c; j++)); do\n            if [[ ${c[j]} -lt ${c[min_i]} ]]; then\n                min_i=$j\n            fi\n        done\n        local -i tmp=${c[i]}\n        c[i]=${c[min_i]}\n        c[min_i]=$tmp\n    done\n    for ((i=0; i<k; i++)); do\n        echo ${c[i]}\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a first=($1)\n    local -a second=($2)\n    local k=$3\n    local -a pairs\n    local -a pair\n    local -i i\n    local -i j\n    local -i k_count=0\n    local -i min_sum=0\n    local -i sum=0\n    local -i min_i=0\n    local -i min_j=0\n\n    for ((i=0; i<${#first[@]}; i++)); do\n        for ((j=0; j<${#second[@]}; j++)); do\n            pair=(${first[i]} ${second[j]})\n            pairs+=(\"${pair[@]}\")\n        done\n    done\n\n    for ((i=0; i<${#pairs[@]}; i+=2)); do\n        sum=$((pairs[i] + pairs[i+1]))\n        if ((k_count < k)); then\n            if ((i == 0)); then\n                min_sum=$sum\n                min_i=$i\n                min_j=$((i+1))\n            elif ((sum < min_sum)); then\n                min_sum=$sum\n                min_i=$i\n                min_j=$((i+1))\n            fi\n        elif ((sum < min_sum)); then\n            pairs[min_i]=${pairs[i]}\n            pairs[min_j]=${pairs[i+1]}\n            min_sum=$sum\n            min_i=$i\n            min_j=$((i+1))\n        fi\n        ((k_count++))\n    done\n\n    for ((i=0; i<${#pairs[@]}; i+=2)); do\n        echo \"${pairs[i]} ${pairs[i+1]}\"\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c[${#c[@]}]=$((a[i]+b[j]))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i k=$3\n    local -i i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c[${#c[@]}]=$((a[i]+b[j]))\n        done\n    done\n    echo ${c[@]} | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]},${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a pair\n    local -i i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            pair=(${a[i]} ${b[j]})\n            pairs+=(${pair[@]})\n        done\n    done\n    echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -i i\n  local -i j\n  local -i a_len=${#a[@]}\n  local -i b_len=${#b[@]}\n  local -i min_i\n  local -i min_j\n  local -i min_sum\n  local -i sum\n  local -i count=0\n\n  for ((i=0; i<a_len; i++)); do\n    for ((j=0; j<b_len; j++)); do\n      sum=$((a[i] + b[j]))\n      if ((count < k)); then\n        pairs[count]=$sum\n        pair[count]=\"[${a[i]}, ${b[j]}]\"\n        ((count++))\n      elif ((sum < min_sum)); then\n        pairs[min_i]=$sum\n        pair[min_i]=\"[${a[i]}, ${b[j]}]\"\n      fi\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    min_sum=${pairs[i]}\n    min_i=$i\n    for ((j=i+1; j<k; j++)); do\n      if ((pairs[j] < min_sum)); then\n        min_sum=${pairs[j]}\n        min_i=$j\n      fi\n    done\n    pairs[min_i]=${pairs[i]}\n    pairs[i]=$min_sum\n    pair[min_i]=${pair[i]}\n    pair[i]=${pair[min_i]}\n  done\n\n  for ((i=0; i<k; i++)); do\n    echo ${pair[i]}\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sums+=($((a[i]+b[j])))\n      indices+=($i,$j)\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    local min_index=$(index_of_min \"${sums[@]}\")\n    pairs+=(${indices[$min_index]})\n    sums[$min_index]=$((2**31-1))\n  done\n  echo \"${pairs[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpxzrlhmhi.sh: line 22: index_of_min: command not found\\n/tmp/tmpxzrlhmhi.sh: line 22: index_of_min: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i k=$3\n    local -i i j\n    local -i m=${#a[@]}\n    local -i n=${#b[@]}\n    local -i x y\n    local -i z\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a sums\n    local -a indices\n    local i\n    local j\n    local sum\n    local index\n\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            sum=$((a[i] + b[j]))\n            pairs+=(\"${a[i]} ${b[j]}\")\n            sums+=(\"$sum\")\n            indices+=(\"$i $j\")\n        done\n    done\n\n    for ((i=0; i<${#sums[@]}; i++)); do\n        for ((j=i+1; j<${#sums[@]}; j++)); do\n            if ((sums[i] > sums[j])); then\n                sum=${sums[i]}\n                sums[i]=${sums[j]}\n                sums[j]=$sum\n                index=${indices[i]}\n                indices[i]=${indices[j]}\n                indices[j]=$index\n            fi\n        done\n    done\n\n    for ((i=0; i<$k; i++)); do\n        index=${indices[i]}\n        echo \"${pairs[i]}\"\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(${pair[@]})\n    done\n  done\n  echo ${pairs[@]} | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i\n  local j\n  local sum\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      pair=($sum $i $j)\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n\n  IFS=$'\\n' sorted=($(sort -n <<<\"${pairs[*]}\"))\n  unset IFS\n\n  for ((i=0; i<k; i++)); do\n    pair=(${sorted[i]})\n    echo \"[${a[${pair[1]}]}, ${b[${pair[2]}]]\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2do8hy17.sh: line 42: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmp2do8hy17.sh: line 46: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sums\n  local -a indices\n  local -a result\n  local i j\n  local sum\n  local index\n  local result_index\n  local result_size\n\n  # Create all pairs\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n\n  # Create all sums\n  for ((i=0; i<${#pairs[@]}; i++)); do\n    sum=0\n    for num in ${pairs[i]}; do\n      ((sum+=num))\n    done\n    sums+=(\"$sum\")\n  done\n\n  # Create all indices\n  for ((i=0; i<${#sums[@]}; i++)); do\n    indices+=(\"$i\")\n  done\n\n  # Sort sums and indices\n  for ((i=0; i<${#sums[@]}; i++)); do\n    for ((j=i+1; j<${#sums[@]}; j++)); do\n      if [[ ${sums[i]} -gt ${sums[j]} ]]; then\n        sum=${sums[i]}\n        sums[i]=${sums[j]}\n        sums[j]=$sum\n        index=${indices[i]}\n        indices[i]=${indices[j]}\n        indices[j]=$index\n      fi\n    done\n  done\n\n  # Get k smallest pairs\n  result_size=${#pairs[@]}\n  if [[ $k -lt $result_size ]]; then\n    result_size=$k\n  fi\n  for ((i=0; i<$result_size; i++)); do\n    result_index=${indices[i]}\n    result+=(\"${pairs[result_index]}\")\n  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a pairs=()\n  local -i k=$3\n  local -i i j\n  for ((i=0; i<${#list1[@]}; i++)); do\n    for ((j=0; j<${#list2[@]}; j++)); do\n      pairs+=(\"${list1[i]} ${list2[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  local sum\n  local -i k_count=0\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i]+b[j]))\n      pair=($sum $i $j)\n      pairs+=(${pair[@]})\n    done\n  done\n\n  IFS=$'\\n'\n  pairs=($(sort -n <<<\"${pairs[*]}\"))\n  unset IFS\n\n  for ((i=0; i<${#pairs[@]}; i++)); do\n    if ((k_count == k)); then\n      break\n    fi\n    pair=(${pairs[i]})\n    echo \"${a[pair[1]]} ${b[pair[2]]}\"\n    ((k_count++))\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a1=($1)\n  local -a a2=($2)\n  local k=$3\n  local -a pairs\n  local -a p\n  local -i i j\n  for ((i=0; i<${#a1[@]}; i++)); do\n    for ((j=0; j<${#a2[@]}; j++)); do\n      p=(${a1[i]} ${a2[j]})\n      pairs+=(${p[@]})\n    done\n  done\n  local -a sorted_pairs\n  sorted_pairs=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n))\n  local -i i\n  for ((i=0; i<k; i++)); do\n    echo \"${sorted_pairs[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -a sum\n  local -a sums\n  local i\n  local j\n  local s\n  local n\n  local m\n  local -i k_smallest_pairs_i\n  local -i k_smallest_pairs_j\n  local -i k_smallest_pairs_s\n  local -i k_smallest_pairs_n\n  local -i k_smallest_pairs_m\n  local -i k_smallest_pairs_k\n  local -i k_smallest_pairs_sum\n  local -i k_smallest_pairs_sums\n  local -i k_smallest_pairs_pairs\n  local -i k_smallest_pairs_pair\n  local -i k_smallest_pairs_i_j_s\n  local -i k_smallest_pairs_i_j_n\n  local -i k_smallest_pairs_i_j_m\n  local -i k_smallest_pairs_i_j_k\n  local -i k_smallest_pairs_i_j_sum\n  local -i k_smallest_pairs_i_j_sums\n  local -i k_smallest_pairs_i_j_pairs\n  local -i k_smallest_pairs_i_j_pair\n  local -i k_smallest_pairs_i_j_i\n  local -i k_smallest_pairs_i_j_j\n  local -i k_smallest_pairs_i_j_s\n  local -i k_smallest_pairs_i_j_n\n  local -i k_smallest_pairs_i_j_m\n  local -i k_smallest_pairs_i_j_k\n  local -i k_smallest_pairs_i_j_sum\n  local -i k_smallest_pairs_i_j_sums\n  local -i k_smallest\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i i j k=0\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i kmax=$3\n\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            c[k]=$((a[i]+b[j]))\n            ((k++))\n        done\n    done\n\n    for ((i=0; i<kmax; i++)); do\n        echo ${c[i]}\n    done | sort -n | uniq\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n  local -a sorted=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n -k1 -k2))\n  local -a result=(\"${sorted[@]:0:k}\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n      d+=(\"$((a[i]+b[j]))\")\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    local min=${d[0]}\n    local min_index=0\n    for ((j=1; j<${#d[@]}; j++)); do\n      if ((d[j] < min)); then\n        min=${d[j]}\n        min_index=$j\n      fi\n    done\n    echo ${c[min_index]}\n    unset c[min_index]\n    unset d[min_index]\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -i k=$3\n    local -i i j\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i cnt=0\n    local -i min_i min_j\n    local -i min_sum\n    local -i sum\n    local -a result\n\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            sum=$((a[i]+b[j]))\n            if ((cnt<k)); then\n                result[cnt]=$sum\n                ((cnt++))\n            else\n                min_sum=${result[0]}\n                min_i=0\n                min_j=0\n                for ((i=0; i<cnt; i++)); do\n                    if ((result[i]<min_sum)); then\n                        min_sum=${result[i]}\n                        min_i=$i\n                        min_j=$j\n                    fi\n                done\n                if ((sum<min_sum)); then\n                    result[min_i]=$sum\n                fi\n            fi\n        done\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a pairs_sorted=()\n  local -a sums_sorted=()\n  local -a pairs_sorted_unique=()\n  local -a sums_sorted_unique=()\n  local -a indices_sorted_unique=()\n  local -a pairs_sorted_unique_k=()\n  local -a sums_sorted_unique_k=()\n  local -a indices_sorted_unique_k=()\n  local -a pairs_sorted_unique_k_sorted=()\n  local -a sums_sorted_unique_k_sorted=()\n  local -a indices_sorted_unique_k_sorted=()\n  local -a pairs_sorted_unique_k_sorted_final=()\n  local -a sums_sorted_unique_k_sorted_final=()\n  local -a indices_sorted_unique_k_sorted_final=()\n  local i\n  local j\n  local sum\n  local index\n  local index_sorted\n  local pair\n  local pair_sorted\n  local sum_sorted\n  local pair_sorted_unique\n  local sum_sorted_unique\n  local index_sorted_unique\n  local pair_sorted_unique_k\n  local sum_sorted_unique_k\n  local index_sorted_unique_k\n  local pair_sorted_unique_k_sorted\n  local sum_sorted_unique_k_sorted\n  local index_sorted_unique_k_sorted\n  local pair_sorted_unique_k_sorted_final\n  local sum_sorted_unique_k_sorted_final\n  local index_sorted_unique_k_sorted_final\n  for ((i=0; i<${#a[@]}; i++)) do\n    for ((j=0; j<${#b[@]}; j++\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpcg04gbh5.sh: line 50: unexpected EOF while looking for matching `)'\\n/tmp/tmpcg04gbh5.sh: line 65: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c\n    local -a d\n    local -a e\n    local -a f\n    local -a g\n    local -a h\n    local -a i\n    local -a j\n    local -a k\n    local -a l\n    local -a m\n    local -a n\n    local -a o\n    local -a p\n    local -a q\n    local -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a aa\n    local -a ab\n    local -a ac\n    local -a ad\n    local -a ae\n    local -a af\n    local -a ag\n    local -a ah\n    local -a ai\n    local -a aj\n    local -a ak\n    local -a al\n    local -a am\n    local -a an\n    local -a ao\n    local -a ap\n    local -a aq\n    local -a ar\n    local -a as\n    local -a at\n    local -a au\n    local -a av\n    local -a aw\n    local -a ax\n    local -a ay\n    local -a az\n    local -a ba\n    local -a bb\n    local -a bc\n    local -a bd\n    local -a be\n    local -a bf\n    local -a bg\n    local -a bh\n    local -a bi\n    local -a bj\n    local -a bk\n    local -a bl\n    local -a bm\n    local -a bn\n    local -a bo\n    local -a bp\n    local -a bq\n    local -a br\n    local -a bs\n    local -a bt\n    local -a bu\n    local -a bv\n    local -a bw\n    local -a bx\n    local -a by\n    local -a bz\n    local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c=()\n    local -i k=$3\n    local -i i=0\n    local -i j=0\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i min=0\n    local -i min_i=0\n    local -i min_j=0\n    local -i min_i_prev=0\n    local -i min_j_prev=0\n    local -i sum=0\n    local -i sum_prev=0\n    local -i count=0\n\n    while [ $count -lt $k ] && [ $i -lt $n ] && [ $j -lt $m ]; do\n        min=${a[$i]}\n        min_i=$i\n        min_j=$j\n        sum=$(( a[$i] + b[$j] ))\n        for (( i_=i; i_<n; i_++ )); do\n            for (( j_=j; j_<m; j_++ )); do\n                if (( a[$i_] + b[$j_] < sum )); then\n                    min=${a[$i_]}\n                    min_i=$i_\n                    min_j=$j_\n                    sum=$(( a[$i_] + b[$j_] ))\n                fi\n            done\n        done\n        if (( sum != sum_prev )); then\n            c+=($min)\n            count=$(( count + 1 ))\n        fi\n        sum_prev=$sum\n        i=$min_i\n        j=$min_j\n        if (( i == min_i_prev && j == min_j_prev )); then\n            break\n        fi\n        min_i_prev=$i\n        min_j_prev=$j\n    done\n\n    echo ${c[@]}\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -i i\n  local -i j\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i min=0\n  local -i min_i=0\n  local -i min_j=0\n  local -i min_sum=0\n  local -i min_p=0\n  local -i min_q=0\n  local -i min_r=0\n  local -i min_s=0\n  local -i min_t=0\n  local -i min_u=0\n  local -i min_v=0\n  local -i min_w=0\n  local -i min_x=0\n  local -i min_y=0\n  local -i min_z=0\n  local -i min_pairs=0\n  local -i min_pair=0\n  local -i min_pair_i=0\n  local -i min_pair_j=0\n  local -i min_pair_sum=0\n  local -i min_pair_p=0\n  local -i min_pair_q=0\n  local -i min_pair_r=0\n  local -i min_pair_s=0\n  local -i min_pair_t=0\n  local -i min_pair_u=0\n  local -i min_pair_v=0\n  local -i min_pair_w=0\n  local -i min_pair_x=0\n  local -i min_pair_y=0\n  local -i min_pair_z=0\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs[${#pairs[@]}]=\"${a[i]} ${b[j]}\"\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  local -a d\n  for ((i=0; i<${#c[@]}; i++)); do\n    d+=(\"$(echo \"${c[i]}\" | awk '{print $1+$2}') ${c[i]}\")\n  done\n  local -a e\n  for ((i=0; i<${#d[@]}; i++)); do\n    e+=(\"$(echo \"${d[i]}\" | awk '{print $1}') ${d[i]}\")\n  done\n  local -a f\n  for ((i=0; i<${#e[@]}; i++)); do\n    f+=(\"$(echo \"${e[i]}\" | awk '{print $2}') ${e[i]}\")\n  done\n  local -a g\n  for ((i=0; i<${#f[@]}; i++)); do\n    g+=(\"$(echo \"${f[i]}\" | awk '{print $3}') ${f[i]}\")\n  done\n  local -a h\n  for ((i=0; i<${#g[@]}; i++)); do\n    h+=(\"$(echo \"${g[i]}\" | awk '{print $4}') ${g[i]}\")\n  done\n  local -a i\n  for ((i=0; i<${#h[@]}; i++)); do\n    i+=(\"$(echo \"${h[i]}\" | awk '{print $5}') ${h[i]}\")\n  done\n  local -a j\n  for ((i=0; i<${#i[@]}; i++)); do\n    j+=(\"$(echo \"${i[i]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8u75yhre.sh: line 44: unexpected EOF while looking for matching `)'\\n/tmp/tmp8u75yhre.sh: line 59: syntax error: unexpected end of file\\n\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local i j sum\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((${a[i]} + ${b[j]}))\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$sum\")\n    done\n  done\n  local -a sorted_sums=($(printf \"%s\\n\" \"${sums[@]}\" | sort -n))\n  local -a sorted_pairs=()\n  for ((i=0; i<${#sorted_sums[@]}; i++)); do\n    for ((j=0; j<${#sums[@]}; j++)); do\n      if [[ \"${sorted_sums[i]}\" == \"${sums[j]}\" ]]; then\n        sorted_pairs+=(\"${pairs[j]}\")\n      fi\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    echo \"${sorted_pairs[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a result\n    local i j\n\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            pairs+=(\"${a[i]} ${b[j]}\")\n        done\n    done\n\n    for ((i=0; i<k; i++)); do\n        local min=${pairs[0]}\n        local min_index=0\n        for ((j=1; j<${#pairs[@]}; j++)); do\n            local pair=(${pairs[j]})\n            local sum=$((${pair[0]} + ${pair[1]}))\n            local min_pair=(${min})\n            local min_sum=$((${min_pair[0]} + ${min_pair[1]}))\n            if ((sum < min_sum)); then\n                min=${pairs[j]}\n                min_index=$j\n            fi\n        done\n        result+=(\"$min\")\n        unset pairs[$min_index]\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoyupxsp2.sh: line 28: + : syntax error: operand expected (error token is \"+ \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local i j sum index\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      index=\"$i,$j\"\n      sums+=($sum)\n      indices+=($index)\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    local min_index=$(index_of_min \"${sums[@]}\")\n    local min_sum=${sums[$min_index]}\n    local min_index_pair=${indices[$min_index]}\n    pairs+=($min_index_pair)\n    sums[$min_index]=9999999999\n  done\n  echo \"${pairs[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3_rgi_gb.sh: line 24: index_of_min: command not found\\n/tmp/tmp3_rgi_gb.sh: line 24: index_of_min: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a distances\n    local -a distances_sorted\n    local -a pairs_sorted\n    local -a pairs_sorted_k\n    local -a pairs_sorted_k_string\n    local i\n    local j\n    local d\n    local d_sorted\n    local p\n    local p_sorted\n    local p_sorted_k\n    local p_sorted_k_string\n\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            pairs+=(\"${a[$i]} ${b[$j]}\")\n            distances+=(\"$((a[$i] + b[$j]))\")\n        done\n    done\n\n    distances_sorted=($(printf \"%s\\n\" \"${distances[@]}\" | sort -n))\n    for ((i=0; i<${#distances_sorted[@]}; i++)); do\n        d=${distances_sorted[$i]}\n        p=${pairs[$(printf \"%s\\n\" \"${distances[@]}\" | grep -n \"$d\" | cut -d: -f1)]}\n        pairs_sorted+=(\"$p\")\n    done\n\n    for ((i=0; i<$k; i++)); do\n        p_sorted_k+=(\"${pairs_sorted[$i]}\")\n    done\n\n    p_sorted_k_string=$(printf \"%s\\n\" \"${p_sorted_k[@]}\")\n    echo \"$p_sorted_k_string\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp4z8887mj.sh: line 36: 1\\n9: syntax error in expression (error token is \"9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(${pair[@]})\n    done\n  done\n  local -a sorted_pairs=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n))\n  local -a smallest_pairs=(\"${sorted_pairs[@]:0:$k}\")\n  printf \"%s\\n\" \"${smallest_pairs[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a result\n    local -i i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            result+=($((${a[i]} + ${b[j]})))\n        done\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n  local -i min_i min_j min_sum\n  local -i sum\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    min_sum=9999999999\n    for ((j=i; j<${#pairs[@]}; j++)); do\n      sum=$(echo \"${pairs[j]}\" | awk '{print $1+$2}')\n      if ((sum < min_sum)); then\n        min_sum=$sum\n        min_i=$i\n        min_j=$j\n      fi\n    done\n    tmp=${pairs[i]}\n    pairs[i]=${pairs[min_j]}\n    pairs[min_j]=$tmp\n  done\n  for ((i=0; i<k; i++)); do\n    echo \"${pairs[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a pair=()\n  local -i i=0\n  local -i j=0\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n  local -i sum=0\n  local -i min_sum=0\n  local -i min_i=0\n  local -i min_j=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      sum=$((a[i] + b[j]))\n      if [[ ${#pairs[@]} -lt $k ]]; then\n        pair=($i $j $sum)\n        pairs+=(\"${pair[@]}\")\n        if [[ ${#pairs[@]} -eq $k ]]; then\n          min_sum=${pairs[0]:2}\n          min_i=0\n          min_j=0\n          for ((i=0; i<k; i++)); do\n            if [[ ${pairs[i]:2} -lt $min_sum ]]; then\n              min_sum=${pairs[i]:2}\n              min_i=${pairs[i]:0:1}\n              min_j=${pairs[i]:1:1}\n            fi\n          done\n        fi\n      elif [[ $sum -lt $min_sum ]]; then\n        pair=($i $j $sum)\n        pairs[$min_i,$min_j]=\"${pair[@]}\"\n        min_sum=${pairs[0]:2}\n        min_i=0\n        min_j=0\n        for ((i=0; i<k; i++)); do\n          if [[ ${pairs[i]:2} -lt $min_sum ]]; then\n            min_sum=${pairs[i]:2}\n            min_i=${pairs[i]:0:1}\n            min_j=${pairs[i]:1:1}\n          fi\n        done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpw88uim34.sh: line 53: syntax error near unexpected token `}'\\n/tmp/tmpw88uim34.sh: line 53: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local a=($1)\n  local b=($2)\n  local k=$3\n  local i j\n  local pairs=()\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i j\n  local -a pairs\n  local -a pair\n  local -i sum\n  local -i min_sum\n  local -i min_i\n  local -i min_j\n  local -i pair_count=0\n  local -i a_count=${#a[@]}\n  local -i b_count=${#b[@]}\n  local -i a_i\n  local -i b_i\n  local -i a_j\n  local -i b_j\n  local -i a_k\n  local -i b_k\n  local -i a_l\n  local -i b_l\n  local -i a_m\n  local -i b_m\n  local -i a_n\n  local -i b_n\n  local -i a_o\n  local -i b_o\n  local -i a_p\n  local -i b_p\n  local -i a_q\n  local -i b_q\n  local -i a_r\n  local -i b_r\n  local -i a_s\n  local -i b_s\n  local -i a_t\n  local -i b_t\n  local -i a_u\n  local -i b_u\n  local -i a_v\n  local -i b_v\n  local -i a_w\n  local -i b_w\n  local -i a_x\n  local -i b_x\n  local -i a_y\n  local -i b_y\n  local -i a_z\n  local -i b_z\n  local -i a_aa\n  local -i b_aa\n  local -i a_ab\n  local -i b_ab\n  local -i a_ac\n  local -i b_ac\n  local -i a_ad\n  local -i b_ad\n  local -i a_ae\n  local -i b_ae\n  local -i a_af\n  local -i b_af\n  local -i a_ag\n  local -i b_\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c\n    local -a d\n    local -a e\n    local -a f\n    local -a g\n    local -a h\n    local -a i\n    local -a j\n    local -a k\n    local -a l\n    local -a m\n    local -a n\n    local -a o\n    local -a p\n    local -a q\n    local -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a A\n    local -a B\n    local -a C\n    local -a D\n    local -a E\n    local -a F\n    local -a G\n    local -a H\n    local -a I\n    local -a J\n    local -a K\n    local -a L\n    local -a M\n    local -a N\n    local -a O\n    local -a P\n    local -a Q\n    local -a R\n    local -a S\n    local -a T\n    local -a U\n    local -a V\n    local -a W\n    local -a X\n    local -a Y\n    local -a Z\n    local -a aa\n    local -a ab\n    local -a ac\n    local -a ad\n    local -a ae\n    local -a af\n    local -a ag\n    local -a ah\n    local -a ai\n    local -a aj\n    local -a ak\n    local -a al\n    local -a am\n    local -a an\n    local -a ao\n    local -a ap\n    local -a aq\n    local -a ar\n    local -a as\n    local -a at\n    local -a au\n    local -a av\n    local -a aw\n    local -a ax\n    local -a ay\n    local -a az\n    local -a aA\n    local -a aB\n    local -a aC\n    local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i i j k=0\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i k_smallest=$3\n    local -i min_i min_j min_sum\n\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            c[k]=$((a[i]+b[j]))\n            ((k++))\n        done\n    done\n\n    for ((i=0; i<k_smallest; i++)); do\n        min_sum=${c[0]}\n        min_i=0\n        min_j=0\n        for ((j=0; j<k; j++)); do\n            if [[ ${c[j]} -lt $min_sum ]]; then\n                min_sum=${c[j]}\n                min_i=$((j/m))\n                min_j=$((j%m))\n            fi\n        done\n        echo \"${a[min_i]} ${b[min_j]}\"\n        c[$((min_i*m+min_j))]=$((min_sum+1))\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -i i j=0\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n  local -i k_smallest_pairs_index=0\n  local -i k_smallest_pairs_sum=0\n  local -i k_smallest_pairs_i=0\n  local -i k_smallest_pairs_j=0\n  local -i k_smallest_pairs_n=0\n  local -i k_smallest_pairs_m=0\n  local -i k_smallest_pairs_k=0\n  local -i k_smallest_pairs_pairs_index=0\n  local -i k_smallest_pairs_sums_index=0\n  local -i k_smallest_pairs_indices_index=0\n  local -i k_smallest_pairs_pairs_length=0\n  local -i k_smallest_pairs_sums_length=0\n  local -i k_smallest_pairs_indices_length=0\n  local -i k_smallest_pairs_pairs_i=0\n  local -i k_smallest_pairs_sums_i=0\n  local -i k_smallest_pairs_indices_i=0\n  local -i k_smallest_pairs_pairs_j=0\n  local -i k_smallest_pairs_sums_j=0\n  local -i k_smallest_pairs_indices_j=0\n  local -i k_smallest_pairs_pairs_n=0\n  local -i k_smallest_pairs_sums_n=0\n  local -i k_smallest_pairs_indices_n=0\n  local -i k_smallest_pairs_pairs_m=0\n  local -i k_smallest_p\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(${pair[@]})\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c\n    local i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c[${#c[@]}]=$((a[i]+b[j]))\n        done\n    done\n    printf \"%s\\n\" \"${c[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a\n  local -a b\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a A\n  local -a B\n  local -a C\n  local -a D\n  local -a E\n  local -a F\n  local -a G\n  local -a H\n  local -a I\n  local -a J\n  local -a K\n  local -a L\n  local -a M\n  local -a N\n  local -a O\n  local -a P\n  local -a Q\n  local -a R\n  local -a S\n  local -a T\n  local -a U\n  local -a V\n  local -a W\n  local -a X\n  local -a Y\n  local -a Z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a Aa\n  local -a Ab\n  local -a Ac\n  local -a Ad\n  local -a Ae\n  local -a Af\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a tmp\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]},${b[j]}\")\n    done\n  done\n  for ((i=0; i<${#pairs[@]}; i++)); do\n    tmp+=(\"${pairs[i]},$((${pairs[i]//,/}))\")\n  done\n  tmp=($(printf \"%s\\n\" \"${tmp[@]}\" | sort -t, -k3 -n))\n  for ((i=0; i<k; i++)); do\n    printf \"%s\\n\" \"${tmp[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a tmp\n  local -i i j\n  local -i len_a=${#a[@]}\n  local -i len_b=${#b[@]}\n  local -i len_pairs=${#pairs[@]}\n  local -i len_tmp=${#tmp[@]}\n\n  if (( len_a == 0 || len_b == 0 || k == 0 )); then\n    echo \"Invalid input\"\n    return 1\n  fi\n\n  # Initialize pairs\n  for (( i = 0; i < len_a; i++ )); do\n    for (( j = 0; j < len_b; j++ )); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n\n  # Sort pairs\n  for (( i = 0; i < len_pairs; i++ )); do\n    for (( j = i + 1; j < len_pairs; j++ )); do\n      if (( ${pairs[i]%% *} + ${pairs[i]##* } > ${pairs[j]%% *} + ${pairs[j]##* } )); then\n        tmp=(\"${pairs[i]}\")\n        pairs[i]=(\"${pairs[j]}\")\n        pairs[j]=(\"${tmp[@]}\")\n      fi\n    done\n  done\n\n  # Print k smallest pairs\n  for (( i = 0; i < k; i++ )); do\n    echo \"${pairs[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local first=($1)\n  local second=($2)\n  local k=$3\n  local result=()\n  local i=0\n  local j=0\n  local index=0\n\n  while [ $i -lt ${#first[@]} ] && [ $j -lt ${#second[@]} ] && [ $index -lt $k ]; do\n    if [ ${first[$i]} -lt ${second[$j]} ]; then\n      result[$index]=${first[$i]}\n      i=$((i+1))\n    else\n      result[$index]=${second[$j]}\n      j=$((j+1))\n    fi\n    index=$((index+1))\n  done\n\n  while [ $i -lt ${#first[@]} ] && [ $index -lt $k ]; do\n    result[$index]=${first[$i]}\n    i=$((i+1))\n    index=$((index+1))\n  done\n\n  while [ $j -lt ${#second[@]} ] && [ $index -lt $k ]; do\n    result[$index]=${second[$j]}\n    j=$((j+1))\n    index=$((index+1))\n  done\n\n  echo \"${result[*]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i j\n  local -a c\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c[${#c[@]}]=\"${a[i]} ${b[j]}\"\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c=()\n    local -a d=()\n    local -a e=()\n    local -a f=()\n    local -a g=()\n    local -a h=()\n    local -a i=()\n    local -a j=()\n    local -a k=()\n    local -a l=()\n    local -a m=()\n    local -a n=()\n    local -a o=()\n    local -a p=()\n    local -a q=()\n    local -a r=()\n    local -a s=()\n    local -a t=()\n    local -a u=()\n    local -a v=()\n    local -a w=()\n    local -a x=()\n    local -a y=()\n    local -a z=()\n    local -a aa=()\n    local -a bb=()\n    local -a cc=()\n    local -a dd=()\n    local -a ee=()\n    local -a ff=()\n    local -a gg=()\n    local -a hh=()\n    local -a ii=()\n    local -a jj=()\n    local -a kk=()\n    local -a ll=()\n    local -a mm=()\n    local -a nn=()\n    local -a oo=()\n    local -a pp=()\n    local -a qq=()\n    local -a rr=()\n    local -a ss=()\n    local -a tt=()\n    local -a uu=()\n    local -a vv=()\n    local -a ww=()\n    local -a xx=()\n    local -a yy=()\n    local -a zz=()\n    local -a aaa=()\n    local -a bbb=()\n    local -a ccc=()\n    local -a ddd=()\n    local -a eee=()\n    local -a fff=()\n    local -a ggg=()\n    local -a h\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c[$i,$j]=$((${a[$i]}+${b[$j]}))\n      d[$i,$j]=\"${a[$i]},${b[$j]}\"\n    done\n  done\n  for ((i=0; i<${#c[@]}; i++)); do\n    for ((j=i+1; j<${#c[@]}; j++)); do\n      if [[ ${c[$i]} -gt ${c[$j]} ]]; then\n        local tmp=${c[$i]}\n        c[$i]=${c[$j]}\n        c[$j]=$tmp\n        tmp=${d[$i]}\n        d[$i]=${d[$j]}\n        d[$j]=$tmp\n      fi\n    done\n  done\n  for ((i=0; i<$k; i++)); do\n    echo ${d[$i]}\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i\n  local j\n  local sum\n  local -i index\n  local -i len=${#a[@]}\n  local -i len2=${#b[@]}\n  local -i len3=$len*$len2\n  local -i len4=$len3-1\n  local -i len5=$len4/2\n  local -i len6=$len5+1\n  local -i len7=$len6/2\n  local -i len8=$len7+1\n  local -i len9=$len8/2\n  local -i len10=$len9+1\n  local -i len11=$len10/2\n  local -i len12=$len11+1\n  local -i len13=$len12/2\n  local -i len14=$len13+1\n  local -i len15=$len14/2\n  local -i len16=$len15+1\n  local -i len17=$len16/2\n  local -i len18=$len17+1\n  local -i len19=$len18/2\n  local -i len20=$len19+1\n  local -i len21=$len20/2\n  local -i len22=$len21+1\n  local -i len23=$len22/2\n  local -i len24=$len23+1\n  local -i len25=$len24/2\n  local -i len26=$len25+1\n  local -i len27=$len26/2\n  local -i len28=$len27+1\n  local -i len29=$len28/2\n  local -i len30=$len29+1\n  local -i len31=$len30/2\n  local -i len32=$len31+1\n  local -i len33=$len32/2\n  local -i len34=$len33+1\n  local -i len35=$len34/2\n  local -i len36=$len35+1\n  local -i len37=$len36/2\n  local -i len38=$\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp9itqboou.sh: line 54: local: $: syntax error: operand expected (error token is \"$\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -n arr1=$1\n  local -n arr2=$2\n  local k=$3\n  local i j\n  local -a pairs\n  for ((i=0; i<${#arr1[@]}; i++)); do\n    for ((j=0; j<${#arr2[@]}; j++)); do\n      pairs+=(\"${arr1[i]} ${arr2[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpw4byila5.sh: line 8: local: `1 3 7': invalid variable name for name reference\\n/tmp/tmpw4byila5.sh: line 9: local: `2 4 6': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(${pair[@]})\n    done\n  done\n  # sort the pairs by sum\n  IFS=$'\\n' pairs=($(sort -n -k1,1 -k2,2 <<<\"${pairs[*]}\"))\n  # print the first k pairs\n  for ((i=0; i<k; i++)); do\n    echo ${pairs[i]}\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local i\n  local j\n  local n\n  local m\n  local x\n  local y\n  local z\n  local -i sum\n  local -i min\n  local -i max\n  local -i idx\n  local -i idx_min\n  local -i idx_max\n  local -i idx_mid\n  local -i idx_mid_prev\n  local -i idx_mid_next\n  local -i idx_mid_prev_prev\n  local -i idx_mid_next_next\n  local -i idx_mid_prev_prev_prev\n  local -i idx_mid_next_next_next\n  local -i idx_mid_prev_prev_prev_prev\n  local -i idx_mid_next_next_next_next\n  local -i idx_mid_prev_prev_prev_prev_prev\n  local -i idx_mid_next_next_next_next_next\n  local -i idx_mid_prev_prev_prev_prev_prev_prev\n  local -i idx_mid_next_next_next_next_next_next\n  local -i idx_mid_prev_prev_prev_prev_prev_prev_prev\n  local -i idx_mid_next_next_next_next_next_next_next\n  local -i idx_mid_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i idx_mid_next_next_next_next_next_next_next_next\n  local -i idx_mid_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i idx_mid_next_next_next_next_next_next_next_next_next\n  local -i idx_mid_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i idx_mid_next_next_next_next_next_next_next\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$((a[i] + b[j]))\")\n    done\n  done\n  local -a sorted_sums=($(printf \"%s\\n\" \"${sums[@]}\" | sort -n))\n  local -a k_smallest_sums=(\"${sorted_sums[@]:0:k}\")\n  local -a k_smallest_pairs=()\n  for ((i=0; i<${#k_smallest_sums[@]}; i++)); do\n    local sum=${k_smallest_sums[i]}\n    for ((j=0; j<${#sums[@]}; j++)); do\n      if [[ ${sums[j]} -eq $sum ]]; then\n        k_smallest_pairs+=(\"${pairs[j]}\")\n      fi\n    done\n  done\n  printf \"%s\\n\" \"${k_smallest_pairs[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i j\n  local -a c\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c[${#c[@]}]=$((a[i]+b[j]))\n    done\n  done\n  echo ${c[@]} | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i] + b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a sums\n    local i\n    local j\n    local sum\n    local index\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            sum=$((a[i] + b[j]))\n            index=$((i * ${#b[@]} + j))\n            sums[$index]=$sum\n            pairs[$index]=\"${a[i]},${b[j]}\"\n        done\n    done\n    IFS=$'\\n' sorted=($(sort -n <<<\"${sums[*]}\"))\n    for ((i=0; i<k; i++)); do\n        index=$(printf \"%s\\n\" \"${!sums[@]}\" | grep -Fxn \"${sorted[i]}\" | cut -d: -f1)\n        echo \"${pairs[$index]}\"\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local aa\n  local bb\n  local cc\n  local dd\n  local ee\n  local ff\n  local gg\n  local hh\n  local ii\n  local jj\n  local kk\n  local ll\n  local mm\n  local nn\n  local oo\n  local pp\n  local qq\n  local rr\n  local ss\n  local tt\n  local uu\n  local vv\n  local ww\n  local xx\n  local yy\n  local zz\n  local aaa\n  local bbb\n  local ccc\n  local ddd\n  local eee\n  local fff\n  local ggg\n  local hhh\n  local iii\n  local jjj\n  local kkk\n  local lll\n  local mmm\n  local nnn\n  local ooo\n  local ppp\n  local qqq\n  local rrr\n  local sss\n  local ttt\n  local uuu\n  local vvv\n  local www\n  local xxx\n  local yyy\n  local zzz\n  local aaaa\n  local bbbb\n  local cccc\n  local dddd\n  local eeee\n  local ffff\n  local gggg\n  local hhhh\n  local iiii\n  local jjjj\n  local kkkk\n  local llll\n  local mmmm\n  local nnnn\n  local oooo\n  local pppp\n  local qqqq\n  local rrrr\n  local ssss\n  local tttt\n  local uuuu\n  local vvvv\n  local wwww\n  local xxxx\n  local yyyy\n  local zzzz\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i i=0 j=0 k=0\n    local -i k=$3\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i t=0\n    local -i min=0\n    local -i min_i=0\n    local -i min_j=0\n    local -i min_k=0\n    local -i min_t=0\n    local -i min_n=0\n    local -i min_m=0\n    local -i min_a=0\n    local -i min_b=0\n    local -i min_c=0\n    local -i min_d=0\n    local -i a_i=0\n    local -i b_i=0\n    local -i c_i=0\n    local -i d_i=0\n    local -i e_i=0\n    local -i f_i=0\n    local -i g_i=0\n    local -i h_i=0\n    local -i a_j=0\n    local -i b_j=0\n    local -i c_j=0\n    local -i d_j=0\n    local -i e_j=0\n    local -i f_j=0\n    local -i g_j=0\n    local -i h_j=0\n    local -i a_k=0\n    local -i b_k=0\n    local -i c_k=0\n    local -i d_k=0\n    local -i e_k=0\n    local -i f_k=0\n    local -i g_k=0\n    local -i h_k=0\n    local -i a_t=0\n    local -i b_t=0\n    local -i c_t=0\n    local -i d_t=0\n    local -i e_t=0\n    local -i f_t=0\n    local -i g_t=0\n    local -i h_t=0\n   \n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sum=()\n  local -a result=()\n  local i j\n  local s\n  local index\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sum+=(\"$((a[i] + b[j]))\")\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    index=$(index_of_min \"${sum[@]}\")\n    result+=(\"${pairs[index]}\")\n    unset sum[index]\n    unset pairs[index]\n    sum=(${sum[@]})\n    pairs=(${pairs[@]})\n  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2zjh0i9a.sh: line 26: index_of_min: command not found\\n/tmp/tmp2zjh0i9a.sh: line 26: index_of_min: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -a pair_sums\n  local -a pair_sum\n  local -a pair_sum_index\n  local -a pair_sum_index_sorted\n  local -a pair_sum_index_sorted_index\n  local -a pair_sum_index_sorted_index_sorted\n  local -a pair_sum_index_sorted_index_sorted_index\n  local -a pair_sum_index_sorted_index_sorted_index_sorted\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted_index\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n  local -a pair_sum_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -i i\n  local -i j\n  local -i k_count\n  local -i a_len=${#a[@]}\n  local -i b_len=${#b[@]}\n  local -i min_sum\n  local -i sum\n\n  for ((i=0; i<a_len; i++)); do\n    for ((j=0; j<b_len; j++)); do\n      sum=$((a[i] + b[j]))\n      if ((k_count < k)); then\n        pairs+=(\"$sum ${a[i]} ${b[j]}\")\n        ((k_count++))\n      elif ((sum < min_sum)); then\n        pairs[0]=\"$sum ${a[i]} ${b[j]}\"\n      fi\n      min_sum=${pairs[0]%% *}\n    done\n  done\n\n  for pair in \"${pairs[@]}\"; do\n    echo \"${pair#* } ${pair#* }\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a arr1=($1)\n  local -a arr2=($2)\n  local -a result\n  local -i k=$3\n  local -i i j\n  local -i len1=${#arr1[@]}\n  local -i len2=${#arr2[@]}\n  local -i len=${#arr1[@]}*${#arr2[@]}\n  local -i sum\n  local -i min\n  local -i min_i\n  local -i min_j\n  local -i min_index\n  local -i min_index_i\n  local -i min_index_j\n  local -i min_index_sum\n  local -i min_index_sum_i\n  local -i min_index_sum_j\n  local -i min_index_sum_index\n  local -i min_index_sum_index_i\n  local -i min_index_sum_index_j\n  local -i min_index_sum_index_sum\n\n  for ((i=0; i<len1; i++)); do\n    for ((j=0; j<len2; j++)); do\n      sum=${arr1[i]}+${arr2[j]}\n      result[$i,$j]=$sum\n    done\n  done\n\n  for ((i=0; i<len1; i++)); do\n    for ((j=0; j<len2; j++)); do\n      min=${result[$i,$j]}\n      min_i=$i\n      min_j=$j\n      min_index=$((i*len2+j))\n      for ((i1=i; i1<len1; i1++)); do\n        for ((j1=0; j1<len2; j1++)); do\n          if [[ $i1 -eq $i && $j1 -le $j ]]; then\n            continue\n          fi\n          if [[ ${result[$i1,$j1]} -lt $min ]]; then\n            min=${result[$i1,$j1]}\n            min_i=$i1\n            min_j=$j1\n            min_index=$((i\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmprtxei3sy.sh: line 53: unexpected EOF while looking for matching `)'\\n/tmp/tmprtxei3sy.sh: line 68: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k | tr ' ' ','\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a arr1=($1)\n  local -a arr2=($2)\n  local -a pairs\n  local -i i j k\n  local -i k_smallest=$3\n\n  for i in \"${!arr1[@]}\"; do\n    for j in \"${!arr2[@]}\"; do\n      pairs[$i,$j]=$((arr1[i]+arr2[j]))\n    done\n  done\n\n  for ((i=0; i<k_smallest; i++)); do\n    local -i min=999999\n    local -i min_i=0\n    local -i min_j=0\n    for ((j=0; j<${#arr1[@]}; j++)); do\n      for ((k=0; k<${#arr2[@]}; k++)); do\n        if [[ ${pairs[$j,$k]} -lt $min ]]; then\n          min=${pairs[$j,$k]}\n          min_i=$j\n          min_j=$k\n        fi\n      done\n    done\n    echo \"${arr1[min_i]},${arr2[min_j]}\"\n    pairs[$min_i,$min_j]=999999\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  local sum\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i]+b[j]))\n      pair=($sum $i $j)\n      pairs+=(${pair[@]})\n    done\n  done\n\n  IFS=$'\\n' sorted=($(sort -n <<<\"${pairs[*]}\"))\n  unset IFS\n\n  for ((i=0; i<k; i++)); do\n    echo \"${a[${sorted[i]:4}]} ${b[${sorted[i]:5}]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a pairs_sorted=()\n  local -a sums_sorted=()\n  local i j\n  local sum\n  local index\n  local index_sorted\n  local pair\n  local sum_sorted\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      index=$((i * ${#b[@]} + j))\n      pairs[$index]=\"${a[i]} ${b[j]}\"\n      sums[$index]=$sum\n      indices[$index]=$index\n    done\n  done\n  indices_sorted=($(printf '%s\\n' \"${indices[@]}\" | sort -n))\n  for ((i=0; i<k; i++)); do\n    index_sorted=${indices_sorted[i]}\n    pair=${pairs[$index_sorted]}\n    sum_sorted=${sums[$index_sorted]}\n    pairs_sorted[$i]=$pair\n    sums_sorted[$i]=$sum_sorted\n  done\n  echo \"${pairs_sorted[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c=()\n    local -i i j k\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i k=$3\n    local -i p=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            c[p]=$((a[i]+b[j]))\n            ((p++))\n        done\n    done\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1; j<p; j++)); do\n            if ((c[i]>c[j])); then\n                ((c[i]^=c[j]^=c[i]^=c[j]))\n            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n        echo \"${c[i]}\"\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i\n  local j\n  local sum\n  local -i min_sum\n  local -i min_i\n  local -i min_j\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      pair=($sum $i $j)\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    min_sum=999999\n    for ((j=i; j<${#pairs[@]}; j++)); do\n      if ((${pairs[j]:0:1} < min_sum)); then\n        min_sum=${pairs[j]:0:1}\n        min_i=${pairs[j]:1:1}\n        min_j=${pairs[j]:2:1}\n        tmp=(\"${pairs[i]}\")\n        pairs[i]=(\"${pairs[j]}\")\n        pairs[j]=(\"${tmp[@]}\")\n      fi\n    done\n    echo \"${a[min_i]} ${b[min_j]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmped_e3xjh.sh: line 36: pairs[i]: cannot assign list to array member\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a1=($1)\n  local -a a2=($2)\n  local -a pairs\n  local -i i j k=0\n  for ((i=0; i<${#a1[@]}; i++)); do\n    for ((j=0; j<${#a2[@]}; j++)); do\n      pairs[k++]=\"${a1[i]},${a2[j]}\"\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $3 | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$((a[i] + b[j]))\")\n      indices+=(\"$i $j\")\n    done\n  done\n  for ((i=0; i<k; i++)); do\n    local min_index=$(index_of_min \"${sums[@]}\")\n    echo \"${pairs[min_index]}\"\n    sums[min_index]=$((2**31))\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpfsqm_b7d.sh: line 23: index_of_min: command not found\\n/tmp/tmpfsqm_b7d.sh: line 23: index_of_min: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c\n    local -a d\n    local -a e\n    local -a f\n    local -a g\n    local -a h\n    local -a i\n    local -a j\n    local -a k\n    local -a l\n    local -a m\n    local -a n\n    local -a o\n    local -a p\n    local -a q\n    local -a r\n    local -a s\n    local -a t\n    local -a u\n    local -a v\n    local -a w\n    local -a x\n    local -a y\n    local -a z\n    local -a aa\n    local -a ab\n    local -a ac\n    local -a ad\n    local -a ae\n    local -a af\n    local -a ag\n    local -a ah\n    local -a ai\n    local -a aj\n    local -a ak\n    local -a al\n    local -a am\n    local -a an\n    local -a ao\n    local -a ap\n    local -a aq\n    local -a ar\n    local -a as\n    local -a at\n    local -a au\n    local -a av\n    local -a aw\n    local -a ax\n    local -a ay\n    local -a az\n    local -a ba\n    local -a bb\n    local -a bc\n    local -a bd\n    local -a be\n    local -a bf\n    local -a bg\n    local -a bh\n    local -a bi\n    local -a bj\n    local -a bk\n    local -a bl\n    local -a bm\n    local -a bn\n    local -a bo\n    local -a bp\n    local -a bq\n    local -a br\n    local -a bs\n    local -a bt\n    local -a bu\n    local -a bv\n    local -a bw\n    local -a bx\n    local -a by\n    local -a bz\n    local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i j\n  local -a pairs\n  local -a pair\n  local -a sum\n  local -a tmp\n  local -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local -a tmp65\n  local -a tmp66\n \n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c\n    local i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c[${#c[@]}]=$((a[i]+b[j]))\n        done\n    done\n    local -a d\n    for ((i=0; i<k; i++)); do\n        d[i]=$(printf \"%s\\n\" \"${c[@]}\" | sort -n | head -n 1)\n        c=(${c[@]/${d[i]}})\n    done\n    echo \"${d[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local -i k=$3\n  local -i i j\n  local -i m=${#a[@]}\n  local -i n=${#b[@]}\n  local -i max_i=m-1\n  local -i max_j=n-1\n  local -i min_i=0\n  local -i min_j=0\n  local -i min_sum=a[0]+b[0]\n  local -i sum\n  local -i k_i=0\n  local -i k_j=0\n  local -i k_sum=min_sum\n  local -i k_min_i=min_i\n  local -i k_min_j=min_j\n  local -i k_max_i=max_i\n  local -i k_max_j=max_j\n  local -i k_min_sum=min_sum\n  local -i k_max_sum=max_sum\n  local -i k_min_i=min_i\n  local -i k_min_j=min_j\n  local -i k_max_i=max_i\n  local -i k_max_j=max_j\n  local -i k_min_sum=min_sum\n  local -i k_max_sum=max_sum\n  local -i k_min_i=min_i\n  local -i k_min_j=min_j\n  local -i k_max_i=max_i\n  local -i k_max_j=max_j\n  local -i k_min_sum=min_sum\n  local -i k_max_sum=max_sum\n  local -i k_min_i=min_i\n  local -i k_min_j=min_j\n  local -i k_max_i=max_i\n  local -i k_max_j=max_j\n  local -i k_min_sum=min_sum\n  local -i k_max_sum=max_sum\n  local -i k_min_i=min_i\n \n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a pairs_sorted=()\n  local -a sums_sorted=()\n  local i j sum\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i]+b[j]))\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$sum\")\n      indices+=(\"$i $j\")\n    done\n  done\n  indices_sorted=($(printf '%s\\n' \"${indices[@]}\" | sort -n -k1,1 -k2,2))\n  sums_sorted=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n  for ((i=0; i<$k; i++)); do\n    local index=${indices_sorted[i]}\n    local pair=${pairs[index]}\n    pairs_sorted+=(\"$pair\")\n  done\n  echo \"${pairs_sorted[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a pairs_sorted=()\n  local -a sums_sorted=()\n  local i\n  local j\n  local sum\n  local index\n  local index_sorted\n  local pair_sorted\n  local sum_sorted\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n  local -i n_k=$((n * k))\n  local -i m_k=$((m * k))\n  local -i n_m=$((n * m))\n  local -i n_m_k=$((n_m * k))\n  local -i n_m_k_1=$((n_m_k - 1))\n  local -i n_m_k_2=$((n_m_k - 2))\n  local -i n_m_k_3=$((n_m_k - 3))\n  local -i n_m_k_4=$((n_m_k - 4))\n  local -i n_m_k_5=$((n_m_k - 5))\n  local -i n_m_k_6=$((n_m_k - 6))\n  local -i n_m_k_7=$((n_m_k - 7))\n  local -i n_m_k_8=$((n_m_k - 8))\n  local -i n_m_k_9=$((n_m_k - 9))\n  local -i n_m_k_10=$((n_m_k - 10))\n  local -i n_m_k_11=$((n_m_k - 11))\n  local -i n_m_k_12=$((n_m_k - 12))\n  local -i n_m_k_13=$((n_m_k - 13))\n  local -i n_m_k_14=$((n_m_k -\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpavmv62nu.sh: line 43: unexpected EOF while looking for matching `)'\\n/tmp/tmpavmv62nu.sh: line 58: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a bb\n  local -a cc\n  local -a dd\n  local -a ee\n  local -a ff\n  local -a gg\n  local -a hh\n  local -a ii\n  local -a jj\n  local -a kk\n  local -a ll\n  local -a mm\n  local -a nn\n  local -a oo\n  local -a pp\n  local -a qq\n  local -a rr\n  local -a ss\n  local -a tt\n  local -a uu\n  local -a vv\n  local -a ww\n  local -a xx\n  local -a yy\n  local -a zz\n  local -a aaa\n  local -a bbb\n  local -a ccc\n  local -a ddd\n  local -a eee\n  local -a fff\n  local -a ggg\n  local -a hhh\n  local -a iii\n  local -a jjj\n  local -a kkk\n  local -a lll\n  local -a mmm\n  local -a nnn\n  local -a ooo\n  local -a ppp\n  local -a qqq\n  local -a rrr\n  local -a sss\n  local -a ttt\n  local -a uuu\n  local -a vvv\n  local -a www\n  local -a xxx\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a arr1=($1)\n  local -a arr2=($2)\n  local -a arr3\n  local -i i j k\n  local -i k_smallest=$3\n  local -i len1=${#arr1[@]}\n  local -i len2=${#arr2[@]}\n  local -i len3=$((len1*len2))\n  local -i sum\n  local -i min\n  local -i min_index\n  local -i min_i\n  local -i min_j\n\n  for ((i=0; i<len1; i++)); do\n    for ((j=0; j<len2; j++)); do\n      sum=$((arr1[i]+arr2[j]))\n      arr3[$((i*len2+j))]=$sum\n    done\n  done\n\n  for ((k=0; k<k_smallest; k++)); do\n    min=${arr3[0]}\n    min_index=0\n    for ((i=1; i<len3; i++)); do\n      if [[ ${arr3[i]} -lt $min ]]; then\n        min=${arr3[i]}\n        min_index=$i\n      fi\n    done\n    arr3[min_index]=9999999999\n    min_i=$((min_index/len2))\n    min_j=$((min_index%len2))\n    echo \"[${arr1[min_i]}, ${arr2[min_j]}]\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n  printf '%s\\n' \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a result=()\n    local -a sums=()\n    local i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            sums+=(\"${a[i]} ${b[j]}\")\n        done\n    done\n    for ((i=0; i<k; i++)); do\n        local min=${sums[0]}\n        local min_index=0\n        for ((j=1; j<${#sums[@]}; j++)); do\n            if (( $(echo \"${sums[j]} < $min\" | bc -l) )); then\n                min=${sums[j]}\n                min_index=$j\n            fi\n        done\n        result+=(\"$min\")\n        unset sums[$min_index]\n        sums=(\"${sums[@]}\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n/tmp/tmpe4ytisb1.sh: line 23: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i k=$3\n    local -i i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c+=($((${a[i]}+${b[j]})))\n        done\n    done\n    echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local a=($1)\n    local b=($2)\n    local k=$3\n    local i j\n    local pairs=()\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            pairs+=(\"${a[i]} ${b[j]}\")\n        done\n    done\n    local -a sorted=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n))\n    for ((i=0; i<k; i++)); do\n        echo \"${sorted[i]}\"\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c[${#c[@]}]=$((a[i] + b[j]))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i\n  local j\n  local sum\n  local -i k_smallest_pairs_count=0\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      pair=($sum $i $j)\n      pairs[${#pairs[@]}]=${pair[@]}\n    done\n  done\n\n  # Sort the pairs by sum\n  IFS=$'\\n' sorted_pairs=($(sort <<<\"${pairs[*]}\"))\n  unset IFS\n\n  for ((i=0; i<${#sorted_pairs[@]}; i++)); do\n    pair=(${sorted_pairs[i]})\n    if ((k_smallest_pairs_count < k)); then\n      echo \"${a[${pair[1]}]} ${b[${pair[2]}]}\"\n      ((k_smallest_pairs_count++))\n    else\n      break\n    fi\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local -a c\n  local -i k=$3\n  local -i i j\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n  local -i l=0\n  local -i r=0\n  local -i p=0\n  local -i q=0\n  local -i x\n  local -i y\n  local -i z\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i min\n  local -i max\n  local -i sum\n  local -i min_sum\n  local -i max_sum\n  local -i min_index\n  local -i max_index\n  local -i min_index_a\n  local -i min_index_b\n  local -i max_index_a\n  local -i max_index_b\n  local -i min_index_c\n  local -i max_index_c\n  local -i min_index_d\n  local -i max_index_d\n  local -i min_index_e\n  local -i max_index_e\n  local -i min_index_f\n  local -i max_index_f\n  local -i min_index_g\n  local -i max_index_g\n  local -i min_index_h\n  local -i max_index_h\n  local -i min_index_i\n  local -i max_index_i\n  local -i min_index_j\n  local -i max_index_j\n  local -i min_index_k\n  local -i max_index_k\n  local -i min_index_l\n  local -i max_index_l\n  local -i min_index_m\n  local -i max_index_m\n  local -i min_index_n\n  local -i max_index_n\n  local -i min_index_o\n  local -i max_index_o\n  local -i min_index_p\n  local -i\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i j\n  local -a c\n  local -i n=0\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c[n]=$((a[i] + b[j]))\n      ((n++))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i\n  local j\n  local sum\n  local -i min_sum\n  local min_i\n  local min_j\n  local -i n=${#a[@]}\n  local -i m=${#b[@]}\n  local -i p=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      sum=$((a[i] + b[j]))\n      if ((p < k)); then\n        pair=($i $j $sum)\n        pairs[p++]=${pair[*]}\n        if ((p == k)); then\n          min_sum=${pair[2]}\n          min_i=${pair[0]}\n          min_j=${pair[1]}\n        fi\n      elif ((sum < min_sum)); then\n        pair=($i $j $sum)\n        pairs[p++]=${pair[*]}\n        pairs[0]=${pairs[--p]}\n        p=1\n        min_sum=${pair[2]}\n        min_i=${pair[0]}\n        min_j=${pair[1]}\n      fi\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    pair=(${pairs[i]})\n    echo \"${a[${pair[0]}]} ${b[${pair[1]}]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i j\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n \n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a pair\n    local -a pair_sums\n    local -a pair_sum\n    local -a sorted_pair_sums\n    local -a sorted_pairs\n    local -a sorted_pair\n    local -a result\n    local i\n    local j\n    local sum\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i l=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            sum=$((a[i]+b[j]))\n            pair=(${a[i]} ${b[j]})\n            pair_sum=($sum ${pair[@]})\n            pairs[$l]=${pair[@]}\n            pair_sums[$l]=${pair_sum[@]}\n            ((l++))\n        done\n    done\n\n    sorted_pair_sums=($(printf \"%s\\n\" \"${pair_sums[@]}\" | sort -n))\n\n    for ((i=0; i<k; i++)); do\n        sorted_pair=(${sorted_pair_sums[i]})\n        sorted_pairs[$r]=${sorted_pair[@]}\n        ((r++))\n    done\n\n    for ((i=0; i<r; i++)); do\n        for ((j=0; j<l; j++)); do\n            if [[ \"${sorted_pairs[i]}\" == \"${pairs[j]}\" ]]; then\n                result[$s]=${sorted_pairs[i]}\n                ((s++))\n            fi\n        done\n    done\n\n    for ((i=\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpyesmyumd.sh: line 63: unexpected EOF while looking for matching `)'\\n/tmp/tmpyesmyumd.sh: line 78: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  local -i sum\n  local -i min_sum\n  local -i min_i\n  local -i min_j\n  local -i n_pairs=0\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=${a[i]}+${b[j]}\n      if ((n_pairs < k)); then\n        pair=(${a[i]} ${b[j]})\n        pairs[n_pairs++]=${pair[*]}\n        if ((n_pairs == k)); then\n          min_sum=sum\n          min_i=i\n          min_j=j\n        fi\n      elif ((sum < min_sum)); then\n        pair=(${a[i]} ${b[j]})\n        pairs[n_pairs++]=${pair[*]}\n        pairs=(${pairs[@]:1})\n        min_sum=sum\n        min_i=i\n        min_j=j\n      fi\n    done\n  done\n\n  printf \"%s\\n\" \"${pairs[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs=()\n    local -a sums=()\n    local -a indices=()\n    local i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            pairs+=(\"${a[i]} ${b[j]}\")\n            sums+=(\"$((a[i]+b[j]))\")\n            indices+=(\"$i $j\")\n        done\n    done\n    local -a sorted=($(printf \"%s\\n\" \"${sums[@]}\" | sort -n))\n    for ((i=0; i<k; i++)); do\n        local sum=${sorted[i]}\n        local index=$(printf \"%s\\n\" \"${!sums[@]}\" | grep -w \"$sum\" | head -n1)\n        local pair=${pairs[index]}\n        local index=${indices[index]}\n        echo \"$pair $index\"\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$((a[i]+b[j]))\")\n    done\n  done\n  local -a sorted_sums=($(printf \"%s\\n\" \"${sums[@]}\" | sort -n))\n  local -a sorted_pairs=()\n  for ((i=0; i<k; i++)); do\n    sorted_pairs+=(\"${pairs[${sums[@]/${sorted_sums[i]}/}]}\")\n  done\n  printf \"%s\\n\" \"${sorted_pairs[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpijrlk8ir.sh: line 23: 5 7 5 7 9 9 11 1: syntax error in expression (error token is \"7 5 7 9 9 11 1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i k=$3\n    local -i i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c+=(\"${a[i]} ${b[j]}\")\n        done\n    done\n    echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c=()\n    local -i i j k\n    local -i n=${#a[@]}\n    local -i m=${#b[@]}\n    local -i k=$3\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            c[k++]=$((a[i]+b[j]))\n        done\n    done\n    echo ${c[@]} | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c\n    local i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c[${#c[@]}]=\"${a[i]} ${b[j]}\"\n        done\n    done\n    c=($(printf '%s\\n' \"${c[@]}\" | sort -n))\n    for ((i=0; i<k; i++)); do\n        echo \"${c[i]}\"\n    done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a array1=($1)\n  local -a array2=($2)\n  local k=$3\n  local -a result\n  local i j\n  for ((i=0; i<${#array1[@]}; i++)); do\n    for ((j=0; j<${#array2[@]}; j++)); do\n      result+=(\"${array1[$i]} ${array2[$j]}\")\n    done\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local -a c\n    local -i k=$3\n    local -i i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c[${#c[@]}]=\"${a[i]} ${b[j]}\"\n        done\n    done\n    if (( ${#c[@]} < k )); then\n        echo \"${c[@]}\"\n    else\n        echo \"${c[@]:0:k}\"\n    fi\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i j\n  local -a c\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a pair\n    local i\n    local j\n    local sum\n    local -i min_sum\n    local -i min_i\n    local -i min_j\n    local -i min_index\n    local -i index\n    local -i len_a\n    local -i len_b\n    local -i len_pairs\n    local -i len_pair\n    local -i len_pairs_max\n    local -i len_pair_max\n\n    len_a=${#a[@]}\n    len_b=${#b[@]}\n    len_pairs_max=$((k * 2))\n    len_pair_max=2\n\n    for ((i = 0; i < len_a; i++)); do\n        for ((j = 0; j < len_b; j++)); do\n            sum=$((a[i] + b[j]))\n            pair=(\"$sum\" \"$i\" \"$j\")\n            pairs+=(\"${pair[@]}\")\n        done\n    done\n\n    for ((i = 0; i < k; i++)); do\n        len_pairs=${#pairs[@]}\n        min_sum=${pairs[0]}\n        min_i=${pairs[1]}\n        min_j=${pairs[2]}\n        min_index=0\n        for ((j = 0; j < len_pairs; j += len_pair_max)); do\n            index=$((j + len_pair_max - 1))\n            if [[ ${pairs[j]} -lt $min_sum ]]; then\n                min_sum=${pairs[j]}\n                min_i=${pairs[j + 1]}\n                min_j=${pairs[j + 2]}\n                min_index=$j\n            fi\n        done\n        echo \"[${a[min_i]}, ${b[min_j]}]\"\n        pairs=(\"${pairs[@]:0:min_index}\" \"${pairs[@]:min_index + len_pair_max}\")\n   \n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpp4r06k88.sh: line 59: syntax error near unexpected token `}'\\n/tmp/tmpp4r06k88.sh: line 59: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(${a[i]} ${b[j]})\n      sums+=($((a[i] + b[j])))\n      indices+=($i $j)\n    done\n  done\n  local -a sorted=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n  local -a result=()\n  for ((i=0; i<k; i++)); do\n    local sum=${sorted[i]}\n    local index=$(printf '%s\\n' \"${!sums[@]}\" | grep -w \"$sum\" | head -1)\n    local pair_index=$((index / 2))\n    local a_index=${indices[$((pair_index * 2))]}\n    local b_index=${indices[$((pair_index * 2 + 1))]}\n    result+=(${a[a_index]} ${b[b_index]})\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n  pairs=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n -k1 -k2))\n  for ((i=0; i<k; i++)); do\n    echo \"${pairs[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a arr1=($1)\n  local -a arr2=($2)\n  local -a pairs\n  local -i k=$3\n  local -i i j\n  for ((i=0; i<${#arr1[@]}; i++)); do\n    for ((j=0; j<${#arr2[@]}; j++)); do\n      pairs+=($((${arr1[i]}+${arr2[j]})))\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a result=()\n    local -a sums=()\n    local -a indices=()\n    local -a indices_a=()\n    local -a indices_b=()\n    local -a indices_sums=()\n    local -a indices_indices=()\n    local -a indices_indices_a=()\n    local -a indices_indices_b=()\n    local -a indices_indices_sums=()\n    local -a indices_indices_indices=()\n    local -a indices_indices_indices_a=()\n    local -a indices_indices_indices_b=()\n    local -a indices_indices_indices_sums=()\n    local -a indices_indices_indices_indices=()\n    local -a indices_indices_indices_indices_a=()\n    local -a indices_indices_indices_indices_b=()\n    local -a indices_indices_indices_indices_sums=()\n    local -a indices_indices_indices_indices_indices=()\n    local -a indices_indices_indices_indices_indices_a=()\n    local -a indices_indices_indices_indices_indices_b=()\n    local -a indices_indices_indices_indices_indices_sums=()\n    local -a indices_indices_indices_indices_indices_indices=()\n    local -a indices_indices_indices_indices_indices_indices_a=()\n    local -a indices_indices_indices_indices_indices_indices_b=()\n    local -a indices_indices_indices_indices_indices_indices_sums=()\n    local -a indices_indices_indices_indices_indices_indices_indices=()\n    local -a indices_indices_indices_indices_indices_indices_indices_a=()\n   \n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i j\n  local -a pairs\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[$i]} ${b[$j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  local -i sum\n  local -i min_sum\n  local -i min_i\n  local -i min_j\n  local -i min_index\n  local -i min_index_found\n  local -i min_index_found_prev\n  local -i min_index_found_prev_prev\n  local -i min_index_found_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i min_index_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -a pair_indexes\n  local -a pair_index\n  local -a pair_values\n  local -a pair_value\n  local -a pair_value_indexes\n  local -a pair_value_index\n  local -a pair_value_index_indexes\n  local -a pair_value_index_index\n  local -a pair_value_index_index_indexes\n  local -a pair_value_index_index_index\n  local -a pair_value_index_index_index_indexes\n  local -a pair_value_index_index_index_index\n  local -a pair_value_index_index_index_index_indexes\n  local -a pair_value_index_index_index_index_index\n  local -a pair_value_index_index_index_index_index_indexes\n  local -a pair_value_index_index_index_index_index_index\n  local -a pair_value_index_index_index_index_index_index_indexes\n  local -a pair_value_index_index_index_index_index_index_index\n  local -a pair_value_index_index_index_index_index_index_index_indexes\n  local -a pair_value_index_index_index_index_index_index_index_index\n  local -a pair_value_index_index_index_index_index_index_index_index_indexes\n  local -a pair_value_index_index_index_index_index_index_index_index_index\n  local -a pair_value_index_index_index_index_index_index_index_index_index_indexes\n  local -a pair_value_index_index_index_index_index_index_index_index_index_index\n  local -a pair_value_index_index_index_index_index_index_index_index_index_index_indexes\n  local -a pair_value_index_index_index_index_index_index\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]},${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local i j\n  local -i sum\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pair=(${a[i]} ${b[j]})\n      sum=$((a[i]+b[j]))\n      pairs[sum]=${pair[*]}\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    echo \"${pairs[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_pairs\n  local i j\n  local sum\n  local index\n  local -i len_a=${#a[@]}\n  local -i len_b=${#b[@]}\n  local -i len_pairs=0\n  local -i len_sums=0\n  local -i len_sorted_sums=0\n  local -i len_sorted_pairs=0\n\n  for ((i=0; i<len_a; i++)); do\n    for ((j=0; j<len_b; j++)); do\n      sum=$((${a[i]} + ${b[j]}))\n      pairs[len_pairs++]=\"${a[i]} ${b[j]}\"\n      sums[len_sums++]=$sum\n    done\n  done\n\n  sorted_sums=($(printf \"%s\\n\" \"${sums[@]}\" | sort -n))\n  len_sorted_sums=${#sorted_sums[@]}\n\n  for ((i=0; i<len_sorted_sums && i<k; i++)); do\n    index=$(index_of \"${sorted_sums[i]}\" \"${sums[@]}\")\n    sorted_pairs[len_sorted_pairs++]=${pairs[index]}\n  done\n\n  echo \"${sorted_pairs[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp6flsgcfr.sh: line 37: index_of: command not found\\n/tmp/tmp6flsgcfr.sh: line 37: index_of: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a A=()\n  local -a B=()\n  local -a C=()\n  local -a D=()\n  local -a E=()\n  local -a F=()\n  local -a G=()\n  local -a H=()\n  local -a I=()\n  local -a J=()\n  local -a K=()\n  local -a L=()\n  local -a M=()\n  local -a N=()\n  local -a O=()\n  local -a P=()\n  local -a Q=()\n  local -a R=()\n  local -a S=()\n  local -a T=()\n  local -a U=()\n  local -a V=()\n  local -a W=()\n  local -a X=()\n  local -a Y=()\n  local -a Z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n \n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  for i in \"${!a[@]}\"; do\n    for j in \"${!b[@]}\"; do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  local -a sorted=($(printf '%s\\n' \"${pairs[@]}\" | sort -n))\n  for ((i=0; i<k; i++)); do\n    echo \"${sorted[i]}\"\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a1=($1)\n    local -a a2=($2)\n    local k=$3\n    local -a pairs=()\n    local -i i j\n    for ((i=0; i<${#a1[@]}; i++)); do\n        for ((j=0; j<${#a2[@]}; j++)); do\n            pairs+=(\"${a1[i]} ${a2[j]}\")\n        done\n    done\n    echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  printf \"%s\\n\" \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a c\n    local i j\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            c[${#c[@]}]=$((a[i]+b[j]))\n        done\n    done\n    echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local -i k=$3\n  local -i i=0 j=0\n  local -i n=${#a[@]} m=${#b[@]}\n  local -i sum=0\n  local -i min_sum=0\n  local -i min_i=0 min_j=0\n  local -i count=0\n  local -i max_heap_size=0\n  local -i max_heap_size_1=0\n  local -i max_heap_size_2=0\n  local -i max_heap_size_3=0\n  local -i max_heap_size_4=0\n  local -i max_heap_size_5=0\n  local -i max_heap_size_6=0\n  local -i max_heap_size_7=0\n  local -i max_heap_size_8=0\n  local -i max_heap_size_9=0\n  local -i max_heap_size_10=0\n  local -i max_heap_size_11=0\n  local -i max_heap_size_12=0\n  local -i max_heap_size_13=0\n  local -i max_heap_size_14=0\n  local -i max_heap_size_15=0\n  local -i max_heap_size_16=0\n  local -i max_heap_size_17=0\n  local -i max_heap_size_18=0\n  local -i max_heap_size_19=0\n  local -i max_heap_size_20=0\n  local -i max_heap_size_21=0\n  local -i max_heap_size_22=0\n  local -i max_heap_size_23=0\n  local -i max_heap_size_24=0\n  local -i max_heap_size_25=0\n  local -i max_heap_size_26=0\n  local -i max_he\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a sorted_sums=()\n  local -a sorted_pairs=()\n  local -a result=()\n  local i=0\n  local j=0\n  local sum=0\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$sum\")\n    done\n  done\n\n  sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n  for ((i=0; i<${#sorted_sums[@]}; i++)); do\n    for ((j=0; j<${#sums[@]}; j++)); do\n      if [[ \"${sorted_sums[i]}\" == \"${sums[j]}\" ]]; then\n        sorted_pairs+=(\"${pairs[j]}\")\n      fi\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    result+=(\"${sorted_pairs[i]}\")\n  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -i i j\n  local -i a_len=${#a[@]}\n  local -i b_len=${#b[@]}\n  local -i min_index\n  local -i min_sum\n  local -i sum\n\n  for ((i=0; i<a_len; i++)); do\n    for ((j=0; j<b_len; j++)); do\n      sum=$((a[i] + b[j]))\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$sum\")\n      indices+=(\"$i $j\")\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    min_sum=${sums[0]}\n    min_index=0\n    for ((j=1; j<${#sums[@]}; j++)); do\n      if [[ ${sums[j]} -lt $min_sum ]]; then\n        min_sum=${sums[j]}\n        min_index=$j\n      fi\n    done\n    echo \"${pairs[min_index]}\"\n    unset pairs[min_index]\n    unset sums[min_index]\n    unset indices[min_index]\n  done\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((a[i]+b[j])))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k\n}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
      "timestamp": 1667190903,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}