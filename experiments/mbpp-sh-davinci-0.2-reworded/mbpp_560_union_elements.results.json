{
  "name": "mbpp_560_union_elements",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for element in $list1; do\n    if ! is_in \"$element\" \"$list2\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! is_in \"$element\" \"$list1\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\" | sed 's/^ *//' | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2dis91ny.sh: line 12: is_in: command not found\\n/tmp/tmp2dis91ny.sh: line 12: is_in: command not found\\n/tmp/tmp2dis91ny.sh: line 12: is_in: command not found\\n/tmp/tmp2dis91ny.sh: line 12: is_in: command not found\\n/tmp/tmp2dis91ny.sh: line 18: is_in: command not found\\n/tmp/tmp2dis91ny.sh: line 18: is_in: command not found\\n/tmp/tmp2dis91ny.sh: line 18: is_in: command not found\\n/tmp/tmp2dis91ny.sh: line 18: is_in: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_count=$(echo \"$list1\" | wc -w)\n  local list2_count=$(echo \"$list2\" | wc -w)\n  local list1_index=1\n  local list2_index=1\n  local union=\"\"\n  while [ $list1_index -le $list1_count ] && [ $list2_index -le $list2_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d \" \" -f $list1_index)\n    local list2_element=$(echo \"$list2\" | cut -d \" \" -f $list2_index)\n    if [ \"$list1_element\" \\< \"$list2_element\" ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n    elif [ \"$list1_element\" \\> \"$list2_element\" ]; then\n      union=\"$union $list2_element\"\n      list2_index=$((list2_index + 1))\n    else\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n      list2_index=$((list2_index + 1))\n    fi\n  done\n  while [ $list1_index -le $list1_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d \" \" -f $list1_index)\n    union=\"$union $list1_element\"\n    list1_index=$((list1_index + 1))\n  done\n  while [ $list2_index -le $list2_count ]; do\n    local list2_element=$(echo \"$list2\" | cut -d \" \" -f $list2_index)\n    union=\"$union $list2_element\"\n    list2_index=$((list2_index + 1))\n  done\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  # your code here\n  echo $1 $2 | tr ' ' '\\n' | sort | uniq\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union_list=\"\"\n\n    for element in $list1; do\n        if ! echo \"$union_list\" | grep -q \"$element\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! echo \"$union_list\" | grep -q \"$element\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n\n    echo \"$union_list\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for i in $list1; do\n        if [[ \"$union\" != *\"$i\"* ]]; then\n            union=\"$union $i\"\n        fi\n    done\n\n    for i in $list2; do\n        if [[ \"$union\" != *\"$i\"* ]]; then\n            union=\"$union $i\"\n        fi\n    done\n\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"\"\n    local list4=\"\"\n    local list5=\"\"\n    local list6=\"\"\n    local list7=\"\"\n    local list8=\"\"\n    local list9=\"\"\n    local list10=\"\"\n    local list11=\"\"\n    local list12=\"\"\n    local list13=\"\"\n    local list14=\"\"\n    local list15=\"\"\n    local list16=\"\"\n    local list17=\"\"\n    local list18=\"\"\n    local list19=\"\"\n    local list20=\"\"\n    local list21=\"\"\n    local list22=\"\"\n    local list23=\"\"\n    local list24=\"\"\n    local list25=\"\"\n    local list26=\"\"\n    local list27=\"\"\n    local list28=\"\"\n    local list29=\"\"\n    local list30=\"\"\n    local list31=\"\"\n    local list32=\"\"\n    local list33=\"\"\n    local list34=\"\"\n    local list35=\"\"\n    local list36=\"\"\n    local list37=\"\"\n    local list38=\"\"\n    local list39=\"\"\n    local list40=\"\"\n    local list41=\"\"\n    local list42=\"\"\n    local list43=\"\"\n    local list44=\"\"\n    local list45=\"\"\n    local list46=\"\"\n    local list47=\"\"\n    local list48=\"\"\n    local list49=\"\"\n    local list50=\"\"\n    local list51=\"\"\n    local list52=\"\"\n    local list53=\"\"\n    local list54=\"\"\n    local list55=\"\"\n    local list56=\"\"\n    local list57=\"\"\n    local list58=\"\"\n    local list59=\"\"\n    local list60=\"\"\n    local list61=\"\"\n    local list62=\"\"\n    local list63=\"\"\n    local list64=\"\"\n    local list65=\"\"\n    local list66=\"\"\n    local list67=\"\"\n    local list68=\"\"\n    local list69=\"\"\n    local list70=\"\"\n    local list71=\"\"\n    local list72=\"\"\n    local list73=\"\"\n    local list74=\"\"\n    local list75=\"\"\n    local list76=\"\"\n    local list77=\"\"\n    local list78=\"\"\n    local list79=\"\"\n    local list80=\"\"\n    local list81=\"\"\n    local list82=\"\"\n    local list83=\"\"\n    local list84=\"\"\n   \n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local union=()\n    local i=0\n    local j=0\n    while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n        if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list1[$i]}\n            ((i++))\n        elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list2[$j]}\n            ((j++))\n        else\n            union[${#union[@]}]=${list1[$i]}\n            ((i++))\n            ((j++))\n        fi\n    done\n    while [ $i -lt ${#list1[@]} ]; do\n        union[${#union[@]}]=${list1[$i]}\n        ((i++))\n    done\n    while [ $j -lt ${#list2[@]} ]; do\n        union[${#union[@]}]=${list2[$j]}\n        ((j++))\n    done\n    echo ${union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=$(echo \"${list1} ${list2}\" | tr ' ' '\\n' | sort | uniq)\n    echo \"${list3}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  local element=\"\"\n  for element in $list1; do\n    if ! echo \"$union\" | grep -q \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n  for element in $list2; do\n    if ! echo \"$union\" | grep -q \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n  echo \"$union\" | sed 's/^ *//' | sed 's/ *$//' | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_len=$(echo \"$list1\" | wc -w)\n  local list2_len=$(echo \"$list2\" | wc -w)\n  local i\n  local j\n  local union_list=\"\"\n  local union_list_len=0\n  local union_list_index=0\n  local list1_elem\n  local list2_elem\n  local union_list_elem\n  local union_list_elem_index\n  local union_list_elem_len\n\n  for ((i=1; i<=list1_len; i++)); do\n    list1_elem=$(echo \"$list1\" | cut -d ' ' -f $i)\n    union_list=\"$union_list $list1_elem\"\n  done\n\n  for ((i=1; i<=list2_len; i++)); do\n    list2_elem=$(echo \"$list2\" | cut -d ' ' -f $i)\n    union_list_len=$(echo \"$union_list\" | wc -w)\n    union_list_index=0\n    for ((j=1; j<=union_list_len; j++)); do\n      union_list_elem=$(echo \"$union_list\" | cut -d ' ' -f $j)\n      if [ \"$list2_elem\" = \"$union_list_elem\" ]; then\n        union_list_index=1\n        break\n      fi\n    done\n    if [ $union_list_index -eq 0 ]; then\n      union_list=\"$union_list $list2_elem\"\n    fi\n  done\n\n  union_list_len=$(echo \"$union_list\" | wc -w)\n  for ((i=1; i<=union_list_len; i++)); do\n    union_list_elem=$(echo \"$union_list\" | cut -d ' ' -f $i)\n    union_list_elem_index=0\n    union_list_elem_len=0\n    for ((j=1; j<=union_\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp_4podkck.sh: line 48: unexpected EOF while looking for matching `)'\\n/tmp/tmp_4podkck.sh: line 63: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local union=()\n    local i=0\n    local j=0\n    while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n        if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n        elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list2[$j]}\n            j=$((j+1))\n        else\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    while [ $i -lt ${#list1[@]} ]; do\n        union[${#union[@]}]=${list1[$i]}\n        i=$((i+1))\n    done\n    while [ $j -lt ${#list2[@]} ]; do\n        union[${#union[@]}]=${list2[$j]}\n        j=$((j+1))\n    done\n    echo ${union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_count=$(echo \"$list1\" | wc -w)\n  local list2_count=$(echo \"$list2\" | wc -w)\n  local list1_index=1\n  local list2_index=1\n  local union=\"\"\n\n  while [ $list1_index -le $list1_count ] && [ $list2_index -le $list2_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d ' ' -f $list1_index)\n    local list2_element=$(echo \"$list2\" | cut -d ' ' -f $list2_index)\n\n    if [ $list1_element -lt $list2_element ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n    elif [ $list1_element -gt $list2_element ]; then\n      union=\"$union $list2_element\"\n      list2_index=$((list2_index + 1))\n    else\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n      list2_index=$((list2_index + 1))\n    fi\n  done\n\n  while [ $list1_index -le $list1_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d ' ' -f $list1_index)\n    union=\"$union $list1_element\"\n    list1_index=$((list1_index + 1))\n  done\n\n  while [ $list2_index -le $list2_count ]; do\n    local list2_element=$(echo \"$list2\" | cut -d ' ' -f $list2_index)\n    union=\"$union $list2_element\"\n    list2_index=$((list2_index + 1))\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -n | uniq)\n  echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"\"\n    local i=\"\"\n    local j=\"\"\n\n    for i in $list1; do\n        for j in $list2; do\n            if [ \"$i\" = \"$j\" ]; then\n                list3=\"$list3 $i\"\n            fi\n        done\n    done\n\n    echo $list3 | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  echo \"$1 $2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union\n    local -a union_sorted\n    local -a list1_sorted\n    local -a list2_sorted\n    local -a list1_unique\n    local -a list2_unique\n    local -a list1_unique_sorted\n    local -a list2_unique_sorted\n    local -a list1_unique_sorted_filtered\n    local -a list2_unique_sorted_filtered\n    local -a union_sorted_filtered\n    local -a union_sorted_filtered_unique\n    local -a union_sorted_filtered_unique_sorted\n\n    list1_sorted=($(echo \"${list1[@]}\" | tr ' ' '\\n' | sort -n))\n    list2_sorted=($(echo \"${list2[@]}\" | tr ' ' '\\n' | sort -n))\n\n    list1_unique=($(echo \"${list1_sorted[@]}\" | tr ' ' '\\n' | uniq))\n    list2_unique=($(echo \"${list2_sorted[@]}\" | tr ' ' '\\n' | uniq))\n\n    list1_unique_sorted=($(echo \"${list1_unique[@]}\" | tr ' ' '\\n' | sort -n))\n    list2_unique_sorted=($(echo \"${list2_unique[@]}\" | tr ' ' '\\n' | sort -n))\n\n    list1_unique_sorted_filtered=($(echo \"${list1_unique_sorted[@]}\" | tr ' ' '\\n' | grep -v '^$'))\n    list2_unique_sorted_filtered=($(echo \"${list2_unique_sorted[@]}\" | tr ' ' '\\n' | grep -v '^$'))\n\n    union=(${list1_unique_sorted_filtered[@]} ${list2_unique_sorted_filtered[@]})\n    union_sorted=($(echo \"${union\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpjk0hoiv6.sh: line 47: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmpjk0hoiv6.sh: line 51: syntax error: unexpected end of file\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union_list=\"\"\n    local element=\"\"\n\n    for element in $list1; do\n        if ! echo \"$union_list\" | grep -q \"$element\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! echo \"$union_list\" | grep -q \"$element\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n\n    echo \"$union_list\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n\n    local list1_array=($list1)\n    local list2_array=($list2)\n\n    local list1_size=${#list1_array[@]}\n    local list2_size=${#list2_array[@]}\n\n    local union_array=()\n\n    local i=0\n    local j=0\n    while [ $i -lt $list1_size ] && [ $j -lt $list2_size ]; do\n        if [ ${list1_array[$i]} -lt ${list2_array[$j]} ]; then\n            union_array+=(${list1_array[$i]})\n            ((i++))\n        elif [ ${list1_array[$i]} -gt ${list2_array[$j]} ]; then\n            union_array+=(${list2_array[$j]})\n            ((j++))\n        else\n            union_array+=(${list1_array[$i]})\n            ((i++))\n            ((j++))\n        fi\n    done\n\n    while [ $i -lt $list1_size ]; do\n        union_array+=(${list1_array[$i]})\n        ((i++))\n    done\n\n    while [ $j -lt $list2_size ]; do\n        union_array+=(${list2_array[$j]})\n        ((j++))\n    done\n\n    echo ${union_array[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union\n    local -a result\n    local i j\n\n    for ((i = 0; i < ${#list1[@]}; i++)); do\n        union[$i]=\"${list1[$i]}\"\n    done\n\n    for ((i = 0; i < ${#list2[@]}; i++)); do\n        for ((j = 0; j < ${#union[@]}; j++)); do\n            if [ \"${list2[$i]}\" = \"${union[$j]}\" ]; then\n                break\n            fi\n        done\n        if [ $j -eq ${#union[@]} ]; then\n            union[${#union[@]}]=\"${list2[$i]}\"\n        fi\n    done\n\n    for ((i = 0; i < ${#union[@]}; i++)); do\n        result[$i]=\"${union[$i]}\"\n    done\n\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for element in $list1; do\n        if ! contains \"$union\" \"$element\"; then\n            union=\"$union $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! contains \"$union\" \"$element\"; then\n            union=\"$union $element\"\n        fi\n    done\n\n    echo $union\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpbysd3ji1.sh: line 12: contains: command not found\\n/tmp/tmpbysd3ji1.sh: line 12: contains: command not found\\n/tmp/tmpbysd3ji1.sh: line 12: contains: command not found\\n/tmp/tmpbysd3ji1.sh: line 12: contains: command not found\\n/tmp/tmpbysd3ji1.sh: line 18: contains: command not found\\n/tmp/tmpbysd3ji1.sh: line 18: contains: command not found\\n/tmp/tmpbysd3ji1.sh: line 18: contains: command not found\\n/tmp/tmpbysd3ji1.sh: line 18: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list3=\"\"\n  for element in $list1; do\n    list3=\"$list3 $element\"\n  done\n  for element in $list2; do\n    list3=\"$list3 $element\"\n  done\n  echo \"$list3\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_elements=\"$(echo \"$list1\" | tr ' ' '\\n')\"\n  local list2_elements=\"$(echo \"$list2\" | tr ' ' '\\n')\"\n  local union_elements=\"$(echo -e \"$list1_elements\\n$list2_elements\" | sort -u)\"\n  echo \"$union_elements\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"\"\n    local element=\"\"\n\n    for element in $list1; do\n        list3=\"$list3 $element\"\n    done\n\n    for element in $list2; do\n        list3=\"$list3 $element\"\n    done\n\n    echo \"$list3\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=$list1\" \"$list2\n    echo $list3 | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local list3=()\n  local i=0\n  local j=0\n  local k=0\n\n  while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n    if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n      list3[$k]=${list1[$i]}\n      i=$((i+1))\n    elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n      list3[$k]=${list2[$j]}\n      j=$((j+1))\n    else\n      list3[$k]=${list1[$i]}\n      i=$((i+1))\n      j=$((j+1))\n    fi\n    k=$((k+1))\n  done\n\n  while [ $i -lt ${#list1[@]} ]; do\n    list3[$k]=${list1[$i]}\n    i=$((i+1))\n    k=$((k+1))\n  done\n\n  while [ $j -lt ${#list2[@]} ]; do\n    list3[$k]=${list2[$j]}\n    j=$((j+1))\n    k=$((k+1))\n  done\n\n  echo ${list3[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_len=$(echo \"$list1\" | wc -w)\n    local list2_len=$(echo \"$list2\" | wc -w)\n    local i=1\n    local j=1\n    local union=\"\"\n    while [ $i -le $list1_len ] && [ $j -le $list2_len ]; do\n        local elem1=$(echo \"$list1\" | cut -d ' ' -f $i)\n        local elem2=$(echo \"$list2\" | cut -d ' ' -f $j)\n        if [ $elem1 -lt $elem2 ]; then\n            union=\"$union $elem1\"\n            i=$((i + 1))\n        elif [ $elem1 -gt $elem2 ]; then\n            union=\"$union $elem2\"\n            j=$((j + 1))\n        else\n            union=\"$union $elem1\"\n            i=$((i + 1))\n            j=$((j + 1))\n        fi\n    done\n    while [ $i -le $list1_len ]; do\n        local elem1=$(echo \"$list1\" | cut -d ' ' -f $i)\n        union=\"$union $elem1\"\n        i=$((i + 1))\n    done\n    while [ $j -le $list2_len ]; do\n        local elem2=$(echo \"$list2\" | cut -d ' ' -f $j)\n        union=\"$union $elem2\"\n        j=$((j + 1))\n    done\n    echo \"$union\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | sed 's/^ *//g'\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"$list1 $list2\"\n    echo \"$list3\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local union=$(echo \"${list1} ${list2}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo \"${union}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_len=${#list1}\n    local list2_len=${#list2}\n    local list1_arr=()\n    local list2_arr=()\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local union_arr=()\n    local union_len=0\n    local union_str=''\n\n    # split list1\n    for ((i=0; i<list1_len; i++)); do\n        if [[ ${list1:$i:1} != ' ' ]]; then\n            list1_arr[$j]=${list1:$i:1}\n            ((j++))\n        fi\n    done\n\n    # split list2\n    for ((i=0; i<list2_len; i++)); do\n        if [[ ${list2:$i:1} != ' ' ]]; then\n            list2_arr[$k]=${list2:$i:1}\n            ((k++))\n        fi\n    done\n\n    # sort list1\n    for ((i=0; i<j; i++)); do\n        for ((k=i+1; k<j; k++)); do\n            if [[ ${list1_arr[$i]} -gt ${list1_arr[$k]} ]]; then\n                tmp=${list1_arr[$i]}\n                list1_arr[$i]=${list1_arr[$k]}\n                list1_arr[$k]=$tmp\n            fi\n        done\n    done\n\n    # sort list2\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1; j<k; j++)); do\n            if [[ ${list2_arr[$i]} -gt ${list2_arr[$j]} ]]; then\n                tmp=${list2_arr[$i]}\n                list2_arr[$i]=${list2_arr[$j]}\n                list2_arr[$j]=$tmp\n            fi\n        done\n    done\n\n    # union\n    i=0\n    j\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpngxw06kr.sh: line 61: j: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a result=()\n\n  for i in \"${list1[@]}\"; do\n    union[$i]=1\n  done\n\n  for i in \"${list2[@]}\"; do\n    union[$i]=1\n  done\n\n  for i in \"${!union[@]}\"; do\n    result+=($i)\n  done\n\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -n\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a array1=($1)\n  local -a array2=($2)\n  local -a union=()\n  local -a result=()\n  local i=0\n  local j=0\n\n  while [ $i -lt ${#array1[@]} ]; do\n    union[$i]=${array1[$i]}\n    ((i++))\n  done\n\n  while [ $j -lt ${#array2[@]} ]; do\n    union[$i]=${array2[$j]}\n    ((i++))\n    ((j++))\n  done\n\n  result=($(echo \"${union[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_len=\"$(echo \"$list1\" | wc -w)\"\n  local list2_len=\"$(echo \"$list2\" | wc -w)\"\n  local i=1\n  local j=1\n  local union=\"\"\n\n  while [ $i -le $list1_len ] && [ $j -le $list2_len ]; do\n    local list1_elem=\"$(echo \"$list1\" | cut -d ' ' -f $i)\"\n    local list2_elem=\"$(echo \"$list2\" | cut -d ' ' -f $j)\"\n\n    if [ \"$list1_elem\" -lt \"$list2_elem\" ]; then\n      union=\"$union $list1_elem\"\n      i=$((i+1))\n    elif [ \"$list1_elem\" -gt \"$list2_elem\" ]; then\n      union=\"$union $list2_elem\"\n      j=$((j+1))\n    else\n      union=\"$union $list1_elem\"\n      i=$((i+1))\n      j=$((j+1))\n    fi\n  done\n\n  while [ $i -le $list1_len ]; do\n    local list1_elem=\"$(echo \"$list1\" | cut -d ' ' -f $i)\"\n    union=\"$union $list1_elem\"\n    i=$((i+1))\n  done\n\n  while [ $j -le $list2_len ]; do\n    local list2_elem=\"$(echo \"$list2\" | cut -d ' ' -f $j)\"\n    union=\"$union $list2_elem\"\n    j=$((j+1))\n  done\n\n  echo \"$union\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  for i in $list1; do\n    union=\"$union $i\"\n  done\n  for i in $list2; do\n    union=\"$union $i\"\n  done\n  echo $union | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  for element in $list1; do\n    if ! contains \"$union\" \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n  for element in $list2; do\n    if ! contains \"$union\" \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpyp2c0l06.sh: line 11: contains: command not found\\n/tmp/tmpyp2c0l06.sh: line 11: contains: command not found\\n/tmp/tmpyp2c0l06.sh: line 11: contains: command not found\\n/tmp/tmpyp2c0l06.sh: line 11: contains: command not found\\n/tmp/tmpyp2c0l06.sh: line 16: contains: command not found\\n/tmp/tmpyp2c0l06.sh: line 16: contains: command not found\\n/tmp/tmpyp2c0l06.sh: line 16: contains: command not found\\n/tmp/tmpyp2c0l06.sh: line 16: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local list3=()\n    local i=0\n    local j=0\n    local k=0\n    while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n        if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n            list3[$k]=${list1[$i]}\n            i=$((i+1))\n        elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n            list3[$k]=${list2[$j]}\n            j=$((j+1))\n        else\n            list3[$k]=${list1[$i]}\n            i=$((i+1))\n            j=$((j+1))\n        fi\n        k=$((k+1))\n    done\n    if [ $i -lt ${#list1[@]} ]; then\n        while [ $i -lt ${#list1[@]} ]; do\n            list3[$k]=${list1[$i]}\n            i=$((i+1))\n            k=$((k+1))\n        done\n    elif [ $j -lt ${#list2[@]} ]; then\n        while [ $j -lt ${#list2[@]} ]; do\n            list3[$k]=${list2[$j]}\n            j=$((j+1))\n            k=$((k+1))\n        done\n    fi\n    echo ${list3[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n    for item in $list1; do\n        if ! echo \"$union\" | grep -q \"\\<$item\\>\"; then\n            union=\"$union $item\"\n        fi\n    done\n    for item in $list2; do\n        if ! echo \"$union\" | grep -q \"\\<$item\\>\"; then\n            union=\"$union $item\"\n        fi\n    done\n    echo \"$union\" | sed 's/^ *//' | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n    for i in $list1; do\n        union=\"$union $i\"\n    done\n    for i in $list2; do\n        if ! echo \"$union\" | grep -q \"$i\"; then\n            union=\"$union $i\"\n        fi\n    done\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_length=$(echo \"$list1\" | wc -w)\n  local list2_length=$(echo \"$list2\" | wc -w)\n  local list1_index=1\n  local list2_index=1\n  local union=\"\"\n\n  while [ $list1_index -le $list1_length ] && [ $list2_index -le $list2_length ]; do\n    local list1_element=$(echo \"$list1\" | cut -d \" \" -f $list1_index)\n    local list2_element=$(echo \"$list2\" | cut -d \" \" -f $list2_index)\n\n    if [ $list1_element -lt $list2_element ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n    elif [ $list1_element -gt $list2_element ]; then\n      union=\"$union $list2_element\"\n      list2_index=$((list2_index + 1))\n    else\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n      list2_index=$((list2_index + 1))\n    fi\n  done\n\n  while [ $list1_index -le $list1_length ]; do\n    local list1_element=$(echo \"$list1\" | cut -d \" \" -f $list1_index)\n    union=\"$union $list1_element\"\n    list1_index=$((list1_index + 1))\n  done\n\n  while [ $list2_index -le $list2_length ]; do\n    local list2_element=$(echo \"$list2\" | cut -d \" \" -f $list2_index)\n    union=\"$union $list2_element\"\n    list2_index=$((list2_index + 1))\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local union=()\n    local i=0\n    local j=0\n    while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n        if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n        elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list2[$j]}\n            j=$((j+1))\n        else\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    while [ $i -lt ${#list1[@]} ]; do\n        union[${#union[@]}]=${list1[$i]}\n        i=$((i+1))\n    done\n    while [ $j -lt ${#list2[@]} ]; do\n        union[${#union[@]}]=${list2[$j]}\n        j=$((j+1))\n    done\n    echo ${union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local union=()\n    local i j\n\n    for ((i=0; i<${#list1[@]}; i++)); do\n        union[${#union[@]}]=${list1[$i]}\n    done\n\n    for ((i=0; i<${#list2[@]}; i++)); do\n        for ((j=0; j<${#union[@]}; j++)); do\n            if [ \"${list2[$i]}\" = \"${union[$j]}\" ]; then\n                break\n            fi\n        done\n        if [ $j -eq ${#union[@]} ]; then\n            union[${#union[@]}]=${list2[$i]}\n        fi\n    done\n\n    echo ${union[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a list3\n    local -a list4\n    local -a list5\n    local -a list6\n    local -a list7\n    local -a list8\n    local -a list9\n    local -a list10\n    local -a list11\n    local -a list12\n    local -a list13\n    local -a list14\n    local -a list15\n    local -a list16\n    local -a list17\n    local -a list18\n    local -a list19\n    local -a list20\n    local -a list21\n    local -a list22\n    local -a list23\n    local -a list24\n    local -a list25\n    local -a list26\n    local -a list27\n    local -a list28\n    local -a list29\n    local -a list30\n    local -a list31\n    local -a list32\n    local -a list33\n    local -a list34\n    local -a list35\n    local -a list36\n    local -a list37\n    local -a list38\n    local -a list39\n    local -a list40\n    local -a list41\n    local -a list42\n    local -a list43\n    local -a list44\n    local -a list45\n    local -a list46\n    local -a list47\n    local -a list48\n    local -a list49\n    local -a list50\n    local -a list51\n    local -a list52\n    local -a list53\n    local -a list54\n    local -a list55\n    local -a list56\n    local -a list57\n    local -a list58\n    local -a list59\n    local -a list60\n    local -a list61\n    local -a list62\n    local -a list63\n    local -a list64\n    local -a list65\n    local -a list66\n    local -a list67\n    local -a list68\n    local -a list69\n    local -a list70\n    local -a list71\n    local -a list72\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n    for i in $list1; do\n        union=\"$union $i\"\n    done\n    for i in $list2; do\n        union=\"$union $i\"\n    done\n    echo $union | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  # your code here\n  echo $(echo $1 $2 | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union=()\n    local -a result=()\n    for i in ${list1[@]}; do\n        union[$i]=1\n    done\n    for i in ${list2[@]}; do\n        union[$i]=1\n    done\n    for i in ${!union[@]}; do\n        result+=($i)\n    done\n    echo ${result[@]} | tr ' ' '\\n' | sort\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local list3=()\n  local list4=()\n  local list5=()\n  local list6=()\n  local list7=()\n  local list8=()\n  local list9=()\n  local list10=()\n  local list11=()\n  local list12=()\n  local list13=()\n  local list14=()\n  local list15=()\n  local list16=()\n  local list17=()\n  local list18=()\n  local list19=()\n  local list20=()\n  local list21=()\n  local list22=()\n  local list23=()\n  local list24=()\n  local list25=()\n  local list26=()\n  local list27=()\n  local list28=()\n  local list29=()\n  local list30=()\n  local list31=()\n  local list32=()\n  local list33=()\n  local list34=()\n  local list35=()\n  local list36=()\n  local list37=()\n  local list38=()\n  local list39=()\n  local list40=()\n  local list41=()\n  local list42=()\n  local list43=()\n  local list44=()\n  local list45=()\n  local list46=()\n  local list47=()\n  local list48=()\n  local list49=()\n  local list50=()\n  local list51=()\n  local list52=()\n  local list53=()\n  local list54=()\n  local list55=()\n  local list56=()\n  local list57=()\n  local list58=()\n  local list59=()\n  local list60=()\n  local list61=()\n  local list62=()\n  local list63=()\n  local list64=()\n  local list65=()\n  local list66=()\n  local list67=()\n  local list68=()\n  local list69=()\n  local list70=()\n  local list71=()\n  local list72=()\n  local list\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_count=$(echo \"$list1\" | wc -w)\n  local list2_count=$(echo \"$list2\" | wc -w)\n  local list1_index=1\n  local list2_index=1\n  local union=\"\"\n\n  while [ $list1_index -le $list1_count ] && [ $list2_index -le $list2_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d ' ' -f $list1_index)\n    local list2_element=$(echo \"$list2\" | cut -d ' ' -f $list2_index)\n\n    if [ \"$list1_element\" \\< \"$list2_element\" ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n    elif [ \"$list1_element\" \\> \"$list2_element\" ]; then\n      union=\"$union $list2_element\"\n      list2_index=$((list2_index + 1))\n    else\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n      list2_index=$((list2_index + 1))\n    fi\n  done\n\n  while [ $list1_index -le $list1_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d ' ' -f $list1_index)\n    union=\"$union $list1_element\"\n    list1_index=$((list1_index + 1))\n  done\n\n  while [ $list2_index -le $list2_count ]; do\n    local list2_element=$(echo \"$list2\" | cut -d ' ' -f $list2_index)\n    union=\"$union $list2_element\"\n    list2_index=$((list2_index + 1))\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for element in $list1; do\n        if ! echo \"$union\" | grep -q \"$element\"; then\n            union=\"$union $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! echo \"$union\" | grep -q \"$element\"; then\n            union=\"$union $element\"\n        fi\n    done\n\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a sorted_union=()\n  local -a sorted_list1=()\n  local -a sorted_list2=()\n  local -a sorted_list3=()\n  local -a sorted_list4=()\n  local -a sorted_list5=()\n  local -a sorted_list6=()\n  local -a sorted_list7=()\n  local -a sorted_list8=()\n  local -a sorted_list9=()\n  local -a sorted_list10=()\n  local -a sorted_list11=()\n  local -a sorted_list12=()\n  local -a sorted_list13=()\n  local -a sorted_list14=()\n  local -a sorted_list15=()\n  local -a sorted_list16=()\n  local -a sorted_list17=()\n  local -a sorted_list18=()\n  local -a sorted_list19=()\n  local -a sorted_list20=()\n  local -a sorted_list21=()\n  local -a sorted_list22=()\n  local -a sorted_list23=()\n  local -a sorted_list24=()\n  local -a sorted_list25=()\n  local -a sorted_list26=()\n  local -a sorted_list27=()\n  local -a sorted_list28=()\n  local -a sorted_list29=()\n  local -a sorted_list30=()\n  local -a sorted_list31=()\n  local -a sorted_list32=()\n  local -a sorted_list33=()\n  local -a sorted_list34=()\n  local -a sorted_list35=()\n  local -a sorted_list36=()\n  local -a sorted_list37=()\n  local -a sorted_list38=()\n  local -a sorted_list39=()\n  local -a sorted_list40=()\n  local -a sorted_list41=()\n  local -a sorted_list42=()\n  local -a sorted_list43=\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    # Write your code here\n    #\n    # For example:\n    #\n    # echo \"$1\"\n    # echo \"$2\"\n    #\n    # echo \"1 2 3 4\"\n    # echo \"3 4 5 6\"\n    #\n    # echo \"1 2 3 4 5 6\"\n    #\n    # Hint:\n    #     Use the following command to sort:\n    #     sort -n\n    #\n    #     Use the following command to remove duplicate:\n    #     uniq\n    #\n    #     Use the following command to remove duplicate and print unique lines in file1 that are not in file2:\n    #     comm -23 <(sort file1 | uniq) <(sort file2 | uniq)\n    #\n    #     Use the following command to print unique lines in file1 that are not in file2:\n    #     comm -23 file1 file2\n    #\n    #     Use the following command to print unique lines in file1 that are not in file2, one line per file:\n    #     comm -3 file1 file2\n    #\n    #     Use the following command to print all lines except the first line of file:\n    #     sed '1d' file\n    #\n    #     Use the following command to print all lines of an array:\n    #     printf \"%s\\n\" ${array[@]}\n    #\n    #     Use the following command to print unique lines of an array:\n    #     printf \"%s\\n\" ${array[@]} | sort -u\n    #\n    #     Use the following command to read an array:\n    #     mapfile -t array < file\n    #\n    #     Use the following command to print an array with index:\n    #     printf \"%s\\n\" \"${!array[@]}\"\n    #\n    #     A sample test of function union_elements is given in the test_union_elements.sh file.\n    #\n    # Your function should output the union of the two lists in a sorted order.\n    #\n    # For example:\n    #\n    # union_elements \"1 2 3 4\" \"3 4 5 6\"\n    #\n    # should output\n    #\n    #\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpvl7bmz_i.sh: line 61: syntax error near unexpected token `}'\\n/tmp/tmpvl7bmz_i.sh: line 61: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_elements=($list1)\n    local list2_elements=($list2)\n    local union_elements=()\n    local union_elements_index=0\n\n    for (( i = 0; i < ${#list1_elements[@]}; i++ )); do\n        local element=${list1_elements[$i]}\n        local found=0\n        for (( j = 0; j < ${#union_elements[@]}; j++ )); do\n            if [[ \"$element\" == \"${union_elements[$j]}\" ]]; then\n                found=1\n                break\n            fi\n        done\n        if [[ $found -eq 0 ]]; then\n            union_elements[$union_elements_index]=$element\n            ((union_elements_index++))\n        fi\n    done\n\n    for (( i = 0; i < ${#list2_elements[@]}; i++ )); do\n        local element=${list2_elements[$i]}\n        local found=0\n        for (( j = 0; j < ${#union_elements[@]}; j++ )); do\n            if [[ \"$element\" == \"${union_elements[$j]}\" ]]; then\n                found=1\n                break\n            fi\n        done\n        if [[ $found -eq 0 ]]; then\n            union_elements[$union_elements_index]=$element\n            ((union_elements_index++))\n        fi\n    done\n\n    echo ${union_elements[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union=()\n    local -a result=()\n    local i=0\n    local j=0\n\n    while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n        if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n        elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list2[$j]}\n            j=$((j+1))\n        else\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n\n    if [ $i -lt ${#list1[@]} ]; then\n        while [ $i -lt ${#list1[@]} ]; do\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n        done\n    elif [ $j -lt ${#list2[@]} ]; then\n        while [ $j -lt ${#list2[@]} ]; do\n            union[${#union[@]}]=${list2[$j]}\n            j=$((j+1))\n        done\n    fi\n\n    for ((i=0; i<${#union[@]}; i++)); do\n        if [ $i -eq 0 ] || [ ${union[$i]} -ne ${union[$((i-1))]} ]; then\n            result[${#result[@]}]=${union[$i]}\n        fi\n    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local list3=()\n    local list4=()\n    local list5=()\n    local list6=()\n    local list7=()\n    local list8=()\n    local list9=()\n    local list10=()\n    local list11=()\n    local list12=()\n    local list13=()\n    local list14=()\n    local list15=()\n    local list16=()\n    local list17=()\n    local list18=()\n    local list19=()\n    local list20=()\n    local list21=()\n    local list22=()\n    local list23=()\n    local list24=()\n    local list25=()\n    local list26=()\n    local list27=()\n    local list28=()\n    local list29=()\n    local list30=()\n    local list31=()\n    local list32=()\n    local list33=()\n    local list34=()\n    local list35=()\n    local list36=()\n    local list37=()\n    local list38=()\n    local list39=()\n    local list40=()\n    local list41=()\n    local list42=()\n    local list43=()\n    local list44=()\n    local list45=()\n    local list46=()\n    local list47=()\n    local list48=()\n    local list49=()\n    local list50=()\n    local list51=()\n    local list52=()\n    local list53=()\n    local list54=()\n    local list55=()\n    local list56=()\n    local list57=()\n    local list58=()\n    local list59=()\n    local list60=()\n    local list61=()\n    local list62=()\n    local list63=()\n    local list64=()\n    local list65=()\n    local list66=()\n    local list67=()\n    local list68=()\n    local list69=()\n    local list70=()\n    local list71=()\n    local list72=()\n    local list\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"$list1 $list2\"\n    local list4=$(echo \"$list3\" | tr ' ' '\\n' | sort -n | uniq)\n    echo \"$list4\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_elements=($list1)\n  local list2_elements=($list2)\n  local union_elements=()\n  local element\n  for element in \"${list1_elements[@]}\" \"${list2_elements[@]}\"; do\n    if ! contains_element \"$element\" \"${union_elements[@]}\"; then\n      union_elements+=(\"$element\")\n    fi\n  done\n  echo \"${union_elements[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_1ev2e_5.sh: line 14: contains_element: command not found\\n/tmp/tmp_1ev2e_5.sh: line 14: contains_element: command not found\\n/tmp/tmp_1ev2e_5.sh: line 14: contains_element: command not found\\n/tmp/tmp_1ev2e_5.sh: line 14: contains_element: command not found\\n/tmp/tmp_1ev2e_5.sh: line 14: contains_element: command not found\\n/tmp/tmp_1ev2e_5.sh: line 14: contains_element: command not found\\n/tmp/tmp_1ev2e_5.sh: line 14: contains_element: command not found\\n/tmp/tmp_1ev2e_5.sh: line 14: contains_element: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union\n  local -a tmp\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local aa\n  local bb\n  local cc\n  local dd\n  local ee\n  local ff\n  local gg\n  local hh\n  local ii\n  local jj\n  local kk\n  local ll\n  local mm\n  local nn\n  local oo\n  local pp\n  local qq\n  local rr\n  local ss\n  local tt\n  local uu\n  local vv\n  local ww\n  local xx\n  local yy\n  local zz\n  local aaa\n  local bbb\n  local ccc\n  local ddd\n  local eee\n  local fff\n  local ggg\n  local hhh\n  local iii\n  local jjj\n  local kkk\n  local lll\n  local mmm\n  local nnn\n  local ooo\n  local ppp\n  local qqq\n  local rrr\n  local sss\n  local ttt\n  local uuu\n  local vvv\n  local www\n  local xxx\n  local yyy\n  local zzz\n  local aaaa\n  local bbbb\n  local cccc\n  local dddd\n  local eeee\n  local ffff\n  local gggg\n  local hhhh\n  local iiii\n  local jjjj\n  local kkkk\n  local llll\n  local mmmm\n  local nnnn\n  local oooo\n  local pppp\n  local qqqq\n  local rrrr\n  local ssss\n  local tttt\n  local uuuu\n  local vvvv\n  local wwww\n  local xxxx\n  local yyyy\n  local zzzz\n  local aaaaa\n  local bbb\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"$list1 $list2\"\n    echo $list3 | tr ' ' '\\n' | sort -n | uniq\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_len=`echo $list1 | wc -w`\n  local list2_len=`echo $list2 | wc -w`\n  local list1_elements=($list1)\n  local list2_elements=($list2)\n  local union_list=\"\"\n  local i=0\n  local j=0\n  while [ $i -lt $list1_len ]\n  do\n    while [ $j -lt $list2_len ]\n    do\n      if [ ${list1_elements[$i]} -eq ${list2_elements[$j]} ]\n      then\n        union_list=\"$union_list ${list1_elements[$i]}\"\n        break\n      fi\n      j=$((j+1))\n    done\n    i=$((i+1))\n    j=0\n  done\n  echo $union_list | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    # Write your code here\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union\n    local -a result\n    local -a tmp\n    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a sorted=()\n  local i=0\n  local j=0\n  local k=0\n  local n1=${#list1[@]}\n  local n2=${#list2[@]}\n  while [ $i -lt $n1 ] && [ $j -lt $n2 ]; do\n    if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n      union[$k]=${list1[$i]}\n      i=$((i+1))\n    elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n      union[$k]=${list2[$j]}\n      j=$((j+1))\n    else\n      union[$k]=${list1[$i]}\n      i=$((i+1))\n      j=$((j+1))\n    fi\n    k=$((k+1))\n  done\n  while [ $i -lt $n1 ]; do\n    union[$k]=${list1[$i]}\n    i=$((i+1))\n    k=$((k+1))\n  done\n  while [ $j -lt $n2 ]; do\n    union[$k]=${list2[$j]}\n    j=$((j+1))\n    k=$((k+1))\n  done\n  sorted=($(echo ${union[@]} | tr ' ' '\\n' | sort -n))\n  echo ${sorted[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list1_length=$(echo $list1 | wc -w)\n  local list2_length=$(echo $list2 | wc -w)\n  local list1_element\n  local list2_element\n  local union_list=''\n  local i\n  local j\n  for ((i=1; i<=$list1_length; i++)); do\n    list1_element=$(echo $list1 | cut -d ' ' -f $i)\n    for ((j=1; j<=$list2_length; j++)); do\n      list2_element=$(echo $list2 | cut -d ' ' -f $j)\n      if [ $list1_element = $list2_element ]; then\n        union_list=\"$union_list $list1_element\"\n      fi\n    done\n  done\n  echo $union_list | sed 's/^ *//' | sed 's/ *$//' | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  local element=\"\"\n  for element in $list1; do\n    if ! is_element_of \"$element\" \"$union\"; then\n      union=\"$union $element\"\n    fi\n  done\n  for element in $list2; do\n    if ! is_element_of \"$element\" \"$union\"; then\n      union=\"$union $element\"\n    fi\n  done\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp5gsmt1g6.sh: line 12: is_element_of: command not found\\n/tmp/tmp5gsmt1g6.sh: line 12: is_element_of: command not found\\n/tmp/tmp5gsmt1g6.sh: line 12: is_element_of: command not found\\n/tmp/tmp5gsmt1g6.sh: line 12: is_element_of: command not found\\n/tmp/tmp5gsmt1g6.sh: line 17: is_element_of: command not found\\n/tmp/tmp5gsmt1g6.sh: line 17: is_element_of: command not found\\n/tmp/tmp5gsmt1g6.sh: line 17: is_element_of: command not found\\n/tmp/tmp5gsmt1g6.sh: line 17: is_element_of: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=\"\"\n\n  for i in $list1; do\n    list3=\"$list3 $i\"\n  done\n\n  for i in $list2; do\n    list3=\"$list3 $i\"\n  done\n\n  echo $list3 | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for i in $list1; do\n        if ! echo \"$union\" | grep -q \"$i\"; then\n            union=\"$union $i\"\n        fi\n    done\n\n    for i in $list2; do\n        if ! echo \"$union\" | grep -q \"$i\"; then\n            union=\"$union $i\"\n        fi\n    done\n\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_len=`echo \"$list1\" | wc -w`\n  local list2_len=`echo \"$list2\" | wc -w`\n  local i=1\n  local j=1\n  local union=\"\"\n  while [ $i -le $list1_len ] && [ $j -le $list2_len ]; do\n    local list1_i=`echo \"$list1\" | cut -d ' ' -f $i`\n    local list2_j=`echo \"$list2\" | cut -d ' ' -f $j`\n    if [ $list1_i -lt $list2_j ]; then\n      union=\"$union $list1_i\"\n      i=$((i+1))\n    elif [ $list1_i -gt $list2_j ]; then\n      union=\"$union $list2_j\"\n      j=$((j+1))\n    else\n      union=\"$union $list1_i\"\n      i=$((i+1))\n      j=$((j+1))\n    fi\n  done\n  while [ $i -le $list1_len ]; do\n    local list1_i=`echo \"$list1\" | cut -d ' ' -f $i`\n    union=\"$union $list1_i\"\n    i=$((i+1))\n  done\n  while [ $j -le $list2_len ]; do\n    local list2_j=`echo \"$list2\" | cut -d ' ' -f $j`\n    union=\"$union $list2_j\"\n    j=$((j+1))\n  done\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_count=0\n  local list2_count=0\n  local list1_arr\n  local list2_arr\n  local union_arr\n  local union_count=0\n  local i\n  local j\n  local k\n  local tmp\n\n  # Convert the lists to arrays\n  list1_arr=($list1)\n  list2_arr=($list2)\n\n  # Get the length of the arrays\n  list1_count=${#list1_arr[@]}\n  list2_count=${#list2_arr[@]}\n\n  # Initialize the union array\n  union_arr=(${list1_arr[@]} ${list2_arr[@]})\n\n  # Sort the union array\n  for ((i=0; i<${#union_arr[@]}; i++))\n  do\n    for ((j=i+1; j<${#union_arr[@]}; j++))\n    do\n      if [[ ${union_arr[i]} > ${union_arr[j]} ]]\n      then\n        tmp=${union_arr[i]}\n        union_arr[i]=${union_arr[j]}\n        union_arr[j]=$tmp\n      fi\n    done\n  done\n\n  # Remove duplicates\n  for ((i=0; i<${#union_arr[@]}; i++))\n  do\n    for ((j=i+1; j<${#union_arr[@]}; j++))\n    do\n      if [[ ${union_arr[i]} == ${union_arr[j]} ]]\n      then\n        union_arr[j]=\"\"\n      fi\n    done\n  done\n\n  # Print the union array\n  for ((i=0; i<${#union_arr[@]}; i++))\n  do\n    if [[ ${union_arr[i]} != \"\" ]]\n    then\n      echo -n \"${union_arr[i]} \"\n    fi\n  done\n  echo\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for i in $list1; do\n        if ! echo \"$union\" | grep -q \"\\<$i\\>\"; then\n            union=\"$union $i\"\n        fi\n    done\n\n    for i in $list2; do\n        if ! echo \"$union\" | grep -q \"\\<$i\\>\"; then\n            union=\"$union $i\"\n        fi\n    done\n\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union\n  local -a sorted_union\n  local -a sorted_list1\n  local -a sorted_list2\n  local -a sorted_list3\n  local -a sorted_list4\n  local -a sorted_list5\n  local -a sorted_list6\n  local -a sorted_list7\n  local -a sorted_list8\n  local -a sorted_list9\n  local -a sorted_list10\n  local -a sorted_list11\n  local -a sorted_list12\n  local -a sorted_list13\n  local -a sorted_list14\n  local -a sorted_list15\n  local -a sorted_list16\n  local -a sorted_list17\n  local -a sorted_list18\n  local -a sorted_list19\n  local -a sorted_list20\n  local -a sorted_list21\n  local -a sorted_list22\n  local -a sorted_list23\n  local -a sorted_list24\n  local -a sorted_list25\n  local -a sorted_list26\n  local -a sorted_list27\n  local -a sorted_list28\n  local -a sorted_list29\n  local -a sorted_list30\n  local -a sorted_list31\n  local -a sorted_list32\n  local -a sorted_list33\n  local -a sorted_list34\n  local -a sorted_list35\n  local -a sorted_list36\n  local -a sorted_list37\n  local -a sorted_list38\n  local -a sorted_list39\n  local -a sorted_list40\n  local -a sorted_list41\n  local -a sorted_list42\n  local -a sorted_list43\n  local -a sorted_list44\n  local -a sorted_list45\n  local -a sorted_list46\n  local -a sorted_list47\n  local -a sorted_list48\n  local -a sorted_list49\n  local -a sorted_list50\n  local -a sorted_list51\n  local -a sorted_list52\n  local -a sorted_list\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union=()\n    local -a sorted=()\n\n    for i in \"${list1[@]}\"; do\n        union+=($i)\n    done\n\n    for i in \"${list2[@]}\"; do\n        union+=($i)\n    done\n\n    sorted=($(echo \"${union[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n\n  for element in ${list1[@]}; do\n    if ! contains \"${element}\" \"${union[@]}\"; then\n      union+=(\"$element\")\n    fi\n  done\n\n  for element in ${list2[@]}; do\n    if ! contains \"${element}\" \"${union[@]}\"; then\n      union+=(\"$element\")\n    fi\n  done\n\n  echo \"${union[@]}\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b'/tmp/tmprfchbaur.sh: line 12: contains: command not found\\n/tmp/tmprfchbaur.sh: line 12: contains: command not found\\n/tmp/tmprfchbaur.sh: line 12: contains: command not found\\n/tmp/tmprfchbaur.sh: line 12: contains: command not found\\n/tmp/tmprfchbaur.sh: line 18: contains: command not found\\n/tmp/tmprfchbaur.sh: line 18: contains: command not found\\n/tmp/tmprfchbaur.sh: line 18: contains: command not found\\n/tmp/tmprfchbaur.sh: line 18: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for element in $list1; do\n    if ! echo \"$union\" | grep -q \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! echo \"$union\" | grep -q \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  for element in $list1; do\n    union=\"$union $element\"\n  done\n  for element in $list2; do\n    union=\"$union $element\"\n  done\n  echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_count=$(echo \"$list1\" | wc -w)\n  local list2_count=$(echo \"$list2\" | wc -w)\n  local list1_index=1\n  local list2_index=1\n  local union=\"\"\n  while [ $list1_index -le $list1_count ] && [ $list2_index -le $list2_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d \" \" -f $list1_index)\n    local list2_element=$(echo \"$list2\" | cut -d \" \" -f $list2_index)\n    if [ $list1_element -lt $list2_element ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n    elif [ $list1_element -gt $list2_element ]; then\n      union=\"$union $list2_element\"\n      list2_index=$((list2_index + 1))\n    else\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n      list2_index=$((list2_index + 1))\n    fi\n  done\n  while [ $list1_index -le $list1_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d \" \" -f $list1_index)\n    union=\"$union $list1_element\"\n    list1_index=$((list1_index + 1))\n  done\n  while [ $list2_index -le $list2_count ]; do\n    local list2_element=$(echo \"$list2\" | cut -d \" \" -f $list2_index)\n    union=\"$union $list2_element\"\n    list2_index=$((list2_index + 1))\n  done\n  echo \"$union\" | sed 's/^ *//g' | sed 's/ *$//g' | sed 's/  */ /g'\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union\n    local -a sorted\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n    local aaaaa\n    local bbb\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  for item in $list1; do\n    if ! echo \"$union\" | grep -q \"$item\"; then\n      union=\"$union $item\"\n    fi\n  done\n  for item in $list2; do\n    if ! echo \"$union\" | grep -q \"$item\"; then\n      union=\"$union $item\"\n    fi\n  done\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union=()\n    local -a result=()\n    local i j\n\n    for ((i=0; i<${#list1[@]}; i++)); do\n        union[i]=${list1[i]}\n    done\n\n    for ((i=0; i<${#list2[@]}; i++)); do\n        for ((j=0; j<${#union[@]}; j++)); do\n            if [[ ${list2[i]} == ${union[j]} ]]; then\n                break\n            fi\n        done\n        if [[ $j -eq ${#union[@]} ]]; then\n            union[j]=${list2[i]}\n        fi\n    done\n\n    for ((i=0; i<${#union[@]}; i++)); do\n        result[i]=${union[i]}\n    done\n\n    echo ${result[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  local element=\"\"\n\n  for element in $list1; do\n    if ! list_contains \"$union\" \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! list_contains \"$union\" \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoptvfeng.sh: line 13: list_contains: command not found\\n/tmp/tmpoptvfeng.sh: line 13: list_contains: command not found\\n/tmp/tmpoptvfeng.sh: line 13: list_contains: command not found\\n/tmp/tmpoptvfeng.sh: line 13: list_contains: command not found\\n/tmp/tmpoptvfeng.sh: line 19: list_contains: command not found\\n/tmp/tmpoptvfeng.sh: line 19: list_contains: command not found\\n/tmp/tmpoptvfeng.sh: line 19: list_contains: command not found\\n/tmp/tmpoptvfeng.sh: line 19: list_contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a unique=()\n  local -a sorted=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"\"\n    for i in $list1; do\n        list3=\"$list3 $i\"\n    done\n    for i in $list2; do\n        list3=\"$list3 $i\"\n    done\n    echo $list3 | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_length=$(echo \"$list1\" | wc -w)\n  local list2_length=$(echo \"$list2\" | wc -w)\n  local list1_index=1\n  local list2_index=1\n  local union=\"\"\n\n  while [ $list1_index -le $list1_length ] && [ $list2_index -le $list2_length ]; do\n    local list1_element=$(echo \"$list1\" | cut -d' ' -f$list1_index)\n    local list2_element=$(echo \"$list2\" | cut -d' ' -f$list2_index)\n\n    if [ \"$list1_element\" = \"$list2_element\" ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n      list2_index=$((list2_index + 1))\n    elif [ \"$list1_element\" \\< \"$list2_element\" ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n    else\n      union=\"$union $list2_element\"\n      list2_index=$((list2_index + 1))\n    fi\n  done\n\n  while [ $list1_index -le $list1_length ]; do\n    local list1_element=$(echo \"$list1\" | cut -d' ' -f$list1_index)\n    union=\"$union $list1_element\"\n    list1_index=$((list1_index + 1))\n  done\n\n  while [ $list2_index -le $list2_length ]; do\n    local list2_element=$(echo \"$list2\" | cut -d' ' -f$list2_index)\n    union=\"$union $list2_element\"\n    list2_index=$((list2_index + 1))\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local union=$(echo \"${list1} ${list2}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo \"${union}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"\"\n    local i=\"\"\n\n    for i in $list1; do\n        if ! echo \"$list3\" | grep -q \"$i\"; then\n            list3=\"$list3 $i\"\n        fi\n    done\n\n    for i in $list2; do\n        if ! echo \"$list3\" | grep -q \"$i\"; then\n            list3=\"$list3 $i\"\n        fi\n    done\n\n    echo \"$list3\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_length=$(echo \"$list1\" | wc -w)\n  local list2_length=$(echo \"$list2\" | wc -w)\n  local union_list=\"\"\n  local i=1\n  local j=1\n  while [ $i -le $list1_length ] && [ $j -le $list2_length ]; do\n    local list1_element=$(echo \"$list1\" | cut -d ' ' -f $i)\n    local list2_element=$(echo \"$list2\" | cut -d ' ' -f $j)\n    if [ $list1_element -lt $list2_element ]; then\n      union_list=\"$union_list $list1_element\"\n      i=$((i+1))\n    elif [ $list1_element -gt $list2_element ]; then\n      union_list=\"$union_list $list2_element\"\n      j=$((j+1))\n    else\n      union_list=\"$union_list $list1_element\"\n      i=$((i+1))\n      j=$((j+1))\n    fi\n  done\n  while [ $i -le $list1_length ]; do\n    local list1_element=$(echo \"$list1\" | cut -d ' ' -f $i)\n    union_list=\"$union_list $list1_element\"\n    i=$((i+1))\n  done\n  while [ $j -le $list2_length ]; do\n    local list2_element=$(echo \"$list2\" | cut -d ' ' -f $j)\n    union_list=\"$union_list $list2_element\"\n    j=$((j+1))\n  done\n  echo \"$union_list\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for item in $list1; do\n    if ! echo \"$union\" | grep -q \"$item\"; then\n      union=\"$union $item\"\n    fi\n  done\n\n  for item in $list2; do\n    if ! echo \"$union\" | grep -q \"$item\"; then\n      union=\"$union $item\"\n    fi\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=\"\"\n  local list4=\"\"\n  local list5=\"\"\n  local list6=\"\"\n  local list7=\"\"\n  local list8=\"\"\n  local list9=\"\"\n  local list10=\"\"\n  local list11=\"\"\n  local list12=\"\"\n  local list13=\"\"\n  local list14=\"\"\n  local list15=\"\"\n  local list16=\"\"\n  local list17=\"\"\n  local list18=\"\"\n  local list19=\"\"\n  local list20=\"\"\n  local list21=\"\"\n  local list22=\"\"\n  local list23=\"\"\n  local list24=\"\"\n  local list25=\"\"\n  local list26=\"\"\n  local list27=\"\"\n  local list28=\"\"\n  local list29=\"\"\n  local list30=\"\"\n  local list31=\"\"\n  local list32=\"\"\n  local list33=\"\"\n  local list34=\"\"\n  local list35=\"\"\n  local list36=\"\"\n  local list37=\"\"\n  local list38=\"\"\n  local list39=\"\"\n  local list40=\"\"\n  local list41=\"\"\n  local list42=\"\"\n  local list43=\"\"\n  local list44=\"\"\n  local list45=\"\"\n  local list46=\"\"\n  local list47=\"\"\n  local list48=\"\"\n  local list49=\"\"\n  local list50=\"\"\n  local list51=\"\"\n  local list52=\"\"\n  local list53=\"\"\n  local list54=\"\"\n  local list55=\"\"\n  local list56=\"\"\n  local list57=\"\"\n  local list58=\"\"\n  local list59=\"\"\n  local list60=\"\"\n  local list61=\"\"\n  local list62=\"\"\n  local list63=\"\"\n  local list64=\"\"\n  local list65=\"\"\n  local list66=\"\"\n  local list67=\"\"\n  local list68=\"\"\n  local list69=\"\"\n  local list70=\"\"\n  local list71=\"\"\n  local list72=\"\"\n  local list73=\"\"\n  local list74=\"\"\n  local list75=\"\"\n  local list76=\"\"\n  local list77=\"\"\n  local list78=\"\"\n  local list79=\"\"\n  local list80=\"\"\n  local list81=\"\"\n  local list82=\"\"\n  local list83=\"\"\n  local list84=\"\"\n  local list85=\"\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    echo \"$1 $2\" | tr ' ' '\\n' | sort | uniq | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  # your code here\n  echo $(echo $1 $2 | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union\n  local -a sorted_union\n  local -i i\n  local -i j\n  local -i k\n\n  for ((i=0; i<${#list1[@]}; i++)); do\n    union[${#union[@]}]=${list1[$i]}\n  done\n  for ((i=0; i<${#list2[@]}; i++)); do\n    for ((j=0; j<${#union[@]}; j++)); do\n      if [[ ${list2[$i]} == ${union[$j]} ]]; then\n        break\n      fi\n    done\n    if [[ $j -eq ${#union[@]} ]]; then\n      union[${#union[@]}]=${list2[$i]}\n    fi\n  done\n\n  for ((i=0; i<${#union[@]}; i++)); do\n    for ((j=i+1; j<${#union[@]}; j++)); do\n      if [[ ${union[$i]} -gt ${union[$j]} ]]; then\n        k=${union[$i]}\n        union[$i]=${union[$j]}\n        union[$j]=$k\n      fi\n    done\n  done\n\n  echo ${union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list3=\"\"\n  for i in $list1; do\n    list3=\"$list3 $i\"\n  done\n  for i in $list2; do\n    list3=\"$list3 $i\"\n  done\n  echo \"$list3\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union\n  local -a unique\n  local -a sorted\n  local i\n  local j\n  local k\n\n  for ((i=0; i<${#list1[@]}; i++)); do\n    union[${#union[@]}]=${list1[$i]}\n  done\n\n  for ((i=0; i<${#list2[@]}; i++)); do\n    union[${#union[@]}]=${list2[$i]}\n  done\n\n  for ((i=0; i<${#union[@]}; i++)); do\n    for ((j=0; j<${#unique[@]}; j++)); do\n      if [[ ${union[$i]} == ${unique[$j]} ]]; then\n        break\n      fi\n    done\n    if [[ $j -eq ${#unique[@]} ]]; then\n      unique[${#unique[@]}]=${union[$i]}\n    fi\n  done\n\n  for ((i=0; i<${#unique[@]}; i++)); do\n    for ((j=0; j<${#sorted[@]}; j++)); do\n      if [[ ${unique[$i]} -lt ${sorted[$j]} ]]; then\n        for ((k=${#sorted[@]}; k>$j; k--)); do\n          sorted[$k]=${sorted[$k-1]}\n        done\n        sorted[$j]=${unique[$i]}\n        break\n      fi\n    done\n    if [[ $j -eq ${#sorted[@]} ]]; then\n      sorted[${#sorted[@]}]=${unique[$i]}\n    fi\n  done\n\n  echo ${sorted[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n\n  local list1_elements=($list1)\n  local list2_elements=($list2)\n\n  local union_elements=()\n  local union_elements_count=0\n\n  for element in ${list1_elements[@]}; do\n    union_elements[$union_elements_count]=$element\n    union_elements_count=$((union_elements_count + 1))\n  done\n\n  for element in ${list2_elements[@]}; do\n    local is_in_list=0\n    for union_element in ${union_elements[@]}; do\n      if [ \"$element\" == \"$union_element\" ]; then\n        is_in_list=1\n        break\n      fi\n    done\n\n    if [ $is_in_list -eq 0 ]; then\n      union_elements[$union_elements_count]=$element\n      union_elements_count=$((union_elements_count + 1))\n    fi\n  done\n\n  echo ${union_elements[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list3=\"$list1 $list2\"\n  echo \"$list3\" | tr ' ' '\\n' | sort -n | uniq\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local union=()\n    local i=0\n    local j=0\n    while [ $i -lt ${#list1[@]} -a $j -lt ${#list2[@]} ]; do\n        if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n        elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n            union[${#union[@]}]=${list2[$j]}\n            j=$((j+1))\n        else\n            union[${#union[@]}]=${list1[$i]}\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    while [ $i -lt ${#list1[@]} ]; do\n        union[${#union[@]}]=${list1[$i]}\n        i=$((i+1))\n    done\n    while [ $j -lt ${#list2[@]} ]; do\n        union[${#union[@]}]=${list2[$j]}\n        j=$((j+1))\n    done\n    echo ${union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union=()\n    local -a sorted=()\n    local i j\n\n    for ((i=0; i<${#list1[@]}; i++)); do\n        union[${#union[@]}]=${list1[$i]}\n    done\n\n    for ((i=0; i<${#list2[@]}; i++)); do\n        for ((j=0; j<${#union[@]}; j++)); do\n            if [[ ${list2[$i]} == ${union[$j]} ]]; then\n                break\n            fi\n        done\n        if [[ $j -eq ${#union[@]} ]]; then\n            union[${#union[@]}]=${list2[$i]}\n        fi\n    done\n\n    for ((i=0; i<${#union[@]}; i++)); do\n        sorted[$i]=${union[$i]}\n    done\n\n    for ((i=0; i<${#sorted[@]}; i++)); do\n        for ((j=i+1; j<${#sorted[@]}; j++)); do\n            if [[ ${sorted[$i]} -gt ${sorted[$j]} ]]; then\n                local tmp=${sorted[$i]}\n                sorted[$i]=${sorted[$j]}\n                sorted[$j]=$tmp\n            fi\n        done\n    done\n\n    echo ${sorted[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local union=()\n    local i=0\n    local j=0\n    while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n        if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n            union+=(${list1[$i]})\n            i=$((i+1))\n        elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n            union+=(${list2[$j]})\n            j=$((j+1))\n        else\n            union+=(${list1[$i]})\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    while [ $i -lt ${#list1[@]} ]; do\n        union+=(${list1[$i]})\n        i=$((i+1))\n    done\n    while [ $j -lt ${#list2[@]} ]; do\n        union+=(${list2[$j]})\n        j=$((j+1))\n    done\n    echo \"${union[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_length=$(echo \"$list1\" | wc -w)\n    local list2_length=$(echo \"$list2\" | wc -w)\n    local i=1\n    local j=1\n    local union=\"\"\n    while [ $i -le $list1_length ] && [ $j -le $list2_length ]; do\n        local list1_element=$(echo \"$list1\" | cut -d ' ' -f $i)\n        local list2_element=$(echo \"$list2\" | cut -d ' ' -f $j)\n        if [ $list1_element -eq $list2_element ]; then\n            union=\"$union $list1_element\"\n            i=$((i + 1))\n            j=$((j + 1))\n        elif [ $list1_element -lt $list2_element ]; then\n            union=\"$union $list1_element\"\n            i=$((i + 1))\n        else\n            union=\"$union $list2_element\"\n            j=$((j + 1))\n        fi\n    done\n    while [ $i -le $list1_length ]; do\n        local list1_element=$(echo \"$list1\" | cut -d ' ' -f $i)\n        union=\"$union $list1_element\"\n        i=$((i + 1))\n    done\n    while [ $j -le $list2_length ]; do\n        local list2_element=$(echo \"$list2\" | cut -d ' ' -f $j)\n        union=\"$union $list2_element\"\n        j=$((j + 1))\n    done\n    echo \"$union\" | sed 's/^ *//' | sed 's/ *$//' | sed 's/  */ /g'\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local union=()\n  local i=0\n  local j=0\n  while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n    if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n      union[${#union[@]}]=${list1[$i]}\n      i=$((i+1))\n    elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n      union[${#union[@]}]=${list2[$j]}\n      j=$((j+1))\n    else\n      union[${#union[@]}]=${list1[$i]}\n      i=$((i+1))\n      j=$((j+1))\n    fi\n  done\n  while [ $i -lt ${#list1[@]} ]; do\n    union[${#union[@]}]=${list1[$i]}\n    i=$((i+1))\n  done\n  while [ $j -lt ${#list2[@]} ]; do\n    union[${#union[@]}]=${list2[$j]}\n    j=$((j+1))\n  done\n  echo ${union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    # TODO: implement this function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  echo \"$1 $2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local result=\"\"\n  for i in $1; do\n    result=\"$result $i\"\n  done\n  for i in $2; do\n    result=\"$result $i\"\n  done\n  echo $result | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local list3=(${list1[@]} ${list2[@]})\n  echo $(echo ${list3[@]} | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_len=$(echo \"$list1\" | wc -w)\n    local list2_len=$(echo \"$list2\" | wc -w)\n    local i=1\n    local j=1\n    local union=\"\"\n    while [ $i -le $list1_len ] && [ $j -le $list2_len ]; do\n        local list1_elem=$(echo \"$list1\" | cut -d ' ' -f $i)\n        local list2_elem=$(echo \"$list2\" | cut -d ' ' -f $j)\n        if [ $list1_elem -lt $list2_elem ]; then\n            union=\"$union $list1_elem\"\n            i=$((i+1))\n        elif [ $list1_elem -gt $list2_elem ]; then\n            union=\"$union $list2_elem\"\n            j=$((j+1))\n        else\n            union=\"$union $list1_elem\"\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    while [ $i -le $list1_len ]; do\n        local list1_elem=$(echo \"$list1\" | cut -d ' ' -f $i)\n        union=\"$union $list1_elem\"\n        i=$((i+1))\n    done\n    while [ $j -le $list2_len ]; do\n        local list2_elem=$(echo \"$list2\" | cut -d ' ' -f $j)\n        union=\"$union $list2_elem\"\n        j=$((j+1))\n    done\n    echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_len=$(echo \"$list1\" | wc -w)\n    local list2_len=$(echo \"$list2\" | wc -w)\n    local i=1\n    local j=1\n    local union=\"\"\n    while [ $i -le $list1_len ] && [ $j -le $list2_len ]; do\n        local list1_elem=$(echo \"$list1\" | cut -d ' ' -f $i)\n        local list2_elem=$(echo \"$list2\" | cut -d ' ' -f $j)\n        if [ $list1_elem -lt $list2_elem ]; then\n            union=\"$union $list1_elem\"\n            i=$((i+1))\n        elif [ $list1_elem -gt $list2_elem ]; then\n            union=\"$union $list2_elem\"\n            j=$((j+1))\n        else\n            union=\"$union $list1_elem\"\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    while [ $i -le $list1_len ]; do\n        local list1_elem=$(echo \"$list1\" | cut -d ' ' -f $i)\n        union=\"$union $list1_elem\"\n        i=$((i+1))\n    done\n    while [ $j -le $list2_len ]; do\n        local list2_elem=$(echo \"$list2\" | cut -d ' ' -f $j)\n        union=\"$union $list2_elem\"\n        j=$((j+1))\n    done\n    echo \"$union\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local result=\"\"\n\n  for element in $list1; do\n    result=\"$result $element\"\n  done\n\n  for element in $list2; do\n    result=\"$result $element\"\n  done\n\n  echo $result | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union_list=\"\"\n    local element=\"\"\n    for element in $list1; do\n        if ! echo \"$union_list\" | grep -q \"$element\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n    for element in $list2; do\n        if ! echo \"$union_list\" | grep -q \"$element\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n    echo \"$union_list\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local list1_len=0\n    local list2_len=0\n    local list3_len=0\n    local tmp=0\n    local tmp_list1=0\n    local tmp_list2=0\n    local tmp_list3=0\n\n    list1_len=`echo \"$list1\" | wc -w`\n    list2_len=`echo \"$list2\" | wc -w`\n    list3_len=$((list1_len+list2_len))\n\n    for ((i=1;i<=list1_len;i++)); do\n        tmp_list1=`echo \"$list1\" | cut -d ' ' -f $i`\n        list3=\"$list3 $tmp_list1\"\n    done\n\n    for ((i=1;i<=list2_len;i++)); do\n        tmp_list2=`echo \"$list2\" | cut -d ' ' -f $i`\n        list3=\"$list3 $tmp_list2\"\n    done\n\n    for ((i=1;i<=list3_len;i++)); do\n        tmp_list3=`echo \"$list3\" | cut -d ' ' -f $i`\n        for ((j=i+1;j<=list3_len;j++)); do\n            tmp=`echo \"$list3\" | cut -d ' ' -f $j`\n            if [ \"$tmp_list3\" -gt \"$tmp\" ]; then\n                tmp_list3=`echo \"$list3\" | cut -d ' ' -f $j`\n                k=$j\n            fi\n        done\n        if [ \"$i\" -ne \"$k\" ]; then\n            tmp=`echo \"$list3\" | cut -d ' ' -f $i`\n            list3=`echo \"$list3\" | sed -e \"s/$tmp_list3/$tmp/g\" -e \"s/$tmp/$tmp_list3/g\"`\n        fi\n    done\n\n    echo \"$list3\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\nsed: -e expression #2, char 0: no previous regular expression\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\nsed: -e expression #2, char 0: no previous regular expression\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\nsed: -e expression #2, char 0: no previous regular expression\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\nsed: -e expression #2, char 0: no previous regular expression\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\nsed: -e expression #2, char 0: no previous regular expression\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\n/tmp/tmplukqjrqa.sh: line 39: [: : integer expression expected\\nsed",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"$list1 $list2\"\n    local list4=$(echo \"$list3\" | tr ' ' '\\n' | sort -n | uniq)\n    echo \"$list4\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -n | uniq)\n  echo \"$list3\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u)\n    echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local a=\"$1\"\n  local b=\"$2\"\n  local c=\"$a $b\"\n  echo \"$c\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local list_union=($1 $2)\n  echo ${list_union[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_length=`echo $list1 | wc -w`\n  local list2_length=`echo $list2 | wc -w`\n  local list1_index=0\n  local list2_index=0\n  local union_list=\"\"\n  while [ $list1_index -lt $list1_length ]\n  do\n    local list1_element=`echo $list1 | cut -d ' ' -f $((list1_index+1))`\n    local list2_index=0\n    local found=0\n    while [ $list2_index -lt $list2_length ]\n    do\n      local list2_element=`echo $list2 | cut -d ' ' -f $((list2_index+1))`\n      if [ $list1_element = $list2_element ]\n      then\n        found=1\n        break\n      fi\n      list2_index=$((list2_index+1))\n    done\n    if [ $found -eq 0 ]\n    then\n      union_list=\"$union_list $list1_element\"\n    fi\n    list1_index=$((list1_index+1))\n  done\n  echo $union_list $list2 | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list3=\"\"\n  local list4=\"\"\n  local list5=\"\"\n  local list6=\"\"\n  local list7=\"\"\n  local list8=\"\"\n  local list9=\"\"\n  local list10=\"\"\n  local list11=\"\"\n  local list12=\"\"\n  local list13=\"\"\n  local list14=\"\"\n  local list15=\"\"\n  local list16=\"\"\n  local list17=\"\"\n  local list18=\"\"\n  local list19=\"\"\n  local list20=\"\"\n  local list21=\"\"\n  local list22=\"\"\n  local list23=\"\"\n  local list24=\"\"\n  local list25=\"\"\n  local list26=\"\"\n  local list27=\"\"\n  local list28=\"\"\n  local list29=\"\"\n  local list30=\"\"\n  local list31=\"\"\n  local list32=\"\"\n  local list33=\"\"\n  local list34=\"\"\n  local list35=\"\"\n  local list36=\"\"\n  local list37=\"\"\n  local list38=\"\"\n  local list39=\"\"\n  local list40=\"\"\n  local list41=\"\"\n  local list42=\"\"\n  local list43=\"\"\n  local list44=\"\"\n  local list45=\"\"\n  local list46=\"\"\n  local list47=\"\"\n  local list48=\"\"\n  local list49=\"\"\n  local list50=\"\"\n  local list51=\"\"\n  local list52=\"\"\n  local list53=\"\"\n  local list54=\"\"\n  local list55=\"\"\n  local list56=\"\"\n  local list57=\"\"\n  local list58=\"\"\n  local list59=\"\"\n  local list60=\"\"\n  local list61=\"\"\n  local list62=\"\"\n  local list63=\"\"\n  local list64=\"\"\n  local list65=\"\"\n  local list66=\"\"\n  local list67=\"\"\n  local list68=\"\"\n  local list69=\"\"\n  local list70=\"\"\n  local list71=\"\"\n  local list72=\"\"\n  local list73=\"\"\n  local list74=\"\"\n  local list75=\"\"\n  local list76=\"\"\n  local list77=\"\"\n  local list78=\"\"\n  local list79=\"\"\n  local list80=\"\"\n  local list81=\"\"\n  local list82=\"\"\n  local list83=\"\"\n  local list84=\"\"\n \n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a sorted=()\n\n  for i in \"${list1[@]}\"; do\n    union+=(\"$i\")\n  done\n\n  for i in \"${list2[@]}\"; do\n    union+=(\"$i\")\n  done\n\n  sorted=($(printf \"%s\\n\" \"${union[@]}\" | sort -n))\n  echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    echo \"$1 $2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=\"\"\n  for element in $list1; do\n    list3=\"$list3 $element\"\n  done\n  for element in $list2; do\n    list3=\"$list3 $element\"\n  done\n  echo $list3 | tr \" \" \"\\n\" | sort | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list3=\"$list1 $list2\"\n  echo \"$list3\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n\n  echo $list1 $list2 | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a array1=($1)\n  local -a array2=($2)\n  local -a union=()\n  local -a tmp=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n1=${#array1[@]}\n  local -i n2=${#array2[@]}\n\n  while ((i < n1 && j < n2)); do\n    if ((array1[i] < array2[j])); then\n      union[k++]=${array1[i++]}\n    elif ((array1[i] > array2[j])); then\n      union[k++]=${array2[j++]}\n    else\n      union[k++]=${array1[i++]}\n      ((j++))\n    fi\n  done\n\n  while ((i < n1)); do\n    union[k++]=${array1[i++]}\n  done\n\n  while ((j < n2)); do\n    union[k++]=${array2[j++]}\n  done\n\n  echo \"${union[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for element in $list1; do\n    if ! contains \"$union\" \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! contains \"$union\" \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpkmpx4kjc.sh: line 12: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 12: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 12: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 12: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 18: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 18: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 18: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 18: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    echo $(echo $1 $2 | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_elements\n  local list2_elements\n  local union_elements\n\n  list1_elements=$(echo \"$list1\" | tr ' ' '\\n' | sort -n | uniq)\n  list2_elements=$(echo \"$list2\" | tr ' ' '\\n' | sort -n | uniq)\n  union_elements=$(echo -e \"$list1_elements\\n$list2_elements\" | sort -n | uniq)\n\n  echo \"$union_elements\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n\n  local list1_array=($list1)\n  local list2_array=($list2)\n\n  local list1_size=${#list1_array[@]}\n  local list2_size=${#list2_array[@]}\n\n  local list1_index=0\n  local list2_index=0\n\n  local union_list=\"\"\n\n  while [ $list1_index -lt $list1_size ] && [ $list2_index -lt $list2_size ]; do\n    if [ ${list1_array[$list1_index]} -lt ${list2_array[$list2_index]} ]; then\n      union_list=\"$union_list ${list1_array[$list1_index]}\"\n      list1_index=$((list1_index + 1))\n    elif [ ${list1_array[$list1_index]} -gt ${list2_array[$list2_index]} ]; then\n      union_list=\"$union_list ${list2_array[$list2_index]}\"\n      list2_index=$((list2_index + 1))\n    else\n      union_list=\"$union_list ${list1_array[$list1_index]}\"\n      list1_index=$((list1_index + 1))\n      list2_index=$((list2_index + 1))\n    fi\n  done\n\n  while [ $list1_index -lt $list1_size ]; do\n    union_list=\"$union_list ${list1_array[$list1_index]}\"\n    list1_index=$((list1_index + 1))\n  done\n\n  while [ $list2_index -lt $list2_size ]; do\n    union_list=\"$union_list ${list2_array[$list2_index]}\"\n    list2_index=$((list2_index + 1))\n  done\n\n  echo $union_list\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local union=()\n    local i j\n\n    for i in \"${list1[@]}\"; do\n        for j in \"${list2[@]}\"; do\n            if [[ \"$i\" == \"$j\" ]]; then\n                union+=(\"$i\")\n            fi\n        done\n    done\n\n    echo \"${union[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local list3=()\n  local i=0\n  local j=0\n  local k=0\n  while [ $i -lt ${#list1[@]} -a $j -lt ${#list2[@]} ]; do\n    if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n      list3[$k]=${list1[$i]}\n      let i++\n    elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n      list3[$k]=${list2[$j]}\n      let j++\n    else\n      list3[$k]=${list1[$i]}\n      let i++\n      let j++\n    fi\n    let k++\n  done\n  while [ $i -lt ${#list1[@]} ]; do\n    list3[$k]=${list1[$i]}\n    let i++\n    let k++\n  done\n  while [ $j -lt ${#list2[@]} ]; do\n    list3[$k]=${list2[$j]}\n    let j++\n    let k++\n  done\n  echo ${list3[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local result=\"\"\n  for i in $list1; do\n    result=\"$result $i\"\n  done\n  for i in $list2; do\n    result=\"$result $i\"\n  done\n  echo $result | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union_list=\"\"\n\n    for element in $list1; do\n        if ! echo \"$list2\" | grep -q \"$element\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! echo \"$list1\" | grep -q \"$element\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n\n    echo \"$union_list\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n\n  # Convert the lists to arrays\n  local list1_array=($list1)\n  local list2_array=($list2)\n\n  # Combine the two arrays\n  local combined_array=(${list1_array[@]} ${list2_array[@]})\n\n  # Sort the array\n  local sorted_array=($(echo ${combined_array[@]} | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n\n  # Convert the array back to a string\n  local sorted_string=\"${sorted_array[@]}\"\n\n  echo \"$sorted_string\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for i in $list1; do\n        if ! echo \"$union\" | grep -q \"$i\"; then\n            union=\"$union $i\"\n        fi\n    done\n\n    for i in $list2; do\n        if ! echo \"$union\" | grep -q \"$i\"; then\n            union=\"$union $i\"\n        fi\n    done\n\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=\n\n  # Convert the lists to arrays\n  local array1=($list1)\n  local array2=($list2)\n\n  # Find the union of the elements\n  for element in ${array1[@]}; do\n    list3=\"$list3 $element\"\n  done\n  for element in ${array2[@]}; do\n    list3=\"$list3 $element\"\n  done\n\n  # Sort the elements\n  list3=$(echo $list3 | tr ' ' '\\n' | sort | tr '\\n' ' ')\n\n  # Remove duplicates\n  list3=$(echo $list3 | tr ' ' '\\n' | uniq | tr '\\n' ' ')\n\n  echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_count=$(echo \"$list1\" | wc -w)\n    local list2_count=$(echo \"$list2\" | wc -w)\n    local list1_index=1\n    local list2_index=1\n    local union=\"\"\n\n    while [ $list1_index -le $list1_count ] && [ $list2_index -le $list2_count ]; do\n        local list1_element=$(echo \"$list1\" | cut -d ' ' -f $list1_index)\n        local list2_element=$(echo \"$list2\" | cut -d ' ' -f $list2_index)\n\n        if [ $list1_element -lt $list2_element ]; then\n            union=\"$union $list1_element\"\n            list1_index=$((list1_index + 1))\n        elif [ $list1_element -gt $list2_element ]; then\n            union=\"$union $list2_element\"\n            list2_index=$((list2_index + 1))\n        else\n            union=\"$union $list1_element\"\n            list1_index=$((list1_index + 1))\n            list2_index=$((list2_index + 1))\n        fi\n    done\n\n    while [ $list1_index -le $list1_count ]; do\n        local list1_element=$(echo \"$list1\" | cut -d ' ' -f $list1_index)\n        union=\"$union $list1_element\"\n        list1_index=$((list1_index + 1))\n    done\n\n    while [ $list2_index -le $list2_count ]; do\n        local list2_element=$(echo \"$list2\" | cut -d ' ' -f $list2_index)\n        union=\"$union $list2_element\"\n        list2_index=$((list2_index + 1))\n    done\n\n    echo \"$union\" | sed -e 's/^ *//' -e 's/ *$//' | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n    local i=0\n\n    while [ $i -lt ${#list1} ]; do\n        local char1=${list1:$i:1}\n        if [[ $union != *\"$char1\"* ]]; then\n            union=\"$union$char1\"\n        fi\n        let i++\n    done\n\n    i=0\n    while [ $i -lt ${#list2} ]; do\n        local char2=${list2:$i:1}\n        if [[ $union != *\"$char2\"* ]]; then\n            union=\"$union$char2\"\n        fi\n        let i++\n    done\n\n    echo \"$union\" | grep -o . | sort | tr -d '\\n'\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a result=()\n  local i=0\n  local j=0\n  local k=0\n\n  for ((i=0; i<${#list1[@]}; i++)); do\n    union[i]=${list1[i]}\n  done\n\n  for ((i=0; i<${#list2[@]}; i++)); do\n    for ((j=0; j<${#union[@]}; j++)); do\n      if [[ ${list2[i]} == ${union[j]} ]]; then\n        break\n      fi\n    done\n    if [[ $j -eq ${#union[@]} ]]; then\n      union[${#union[@]}]=${list2[i]}\n    fi\n  done\n\n  for ((i=0; i<${#union[@]}; i++)); do\n    for ((j=i+1; j<${#union[@]}; j++)); do\n      if [[ ${union[i]} -gt ${union[j]} ]]; then\n        local tmp=${union[i]}\n        union[i]=${union[j]}\n        union[j]=$tmp\n      fi\n    done\n  done\n\n  for ((i=0; i<${#union[@]}; i++)); do\n    result[i]=${union[i]}\n  done\n\n  echo ${result[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"\"\n\n    for i in $list1; do\n        list3=\"$list3 $i\"\n    done\n\n    for i in $list2; do\n        list3=\"$list3 $i\"\n    done\n\n    echo \"$list3\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local list3=()\n  local list4=()\n  local list5=()\n  local list6=()\n  local list7=()\n  local list8=()\n  local list9=()\n  local list10=()\n  local list11=()\n  local list12=()\n  local list13=()\n  local list14=()\n  local list15=()\n  local list16=()\n  local list17=()\n  local list18=()\n  local list19=()\n  local list20=()\n  local list21=()\n  local list22=()\n  local list23=()\n  local list24=()\n  local list25=()\n  local list26=()\n  local list27=()\n  local list28=()\n  local list29=()\n  local list30=()\n  local list31=()\n  local list32=()\n  local list33=()\n  local list34=()\n  local list35=()\n  local list36=()\n  local list37=()\n  local list38=()\n  local list39=()\n  local list40=()\n  local list41=()\n  local list42=()\n  local list43=()\n  local list44=()\n  local list45=()\n  local list46=()\n  local list47=()\n  local list48=()\n  local list49=()\n  local list50=()\n  local list51=()\n  local list52=()\n  local list53=()\n  local list54=()\n  local list55=()\n  local list56=()\n  local list57=()\n  local list58=()\n  local list59=()\n  local list60=()\n  local list61=()\n  local list62=()\n  local list63=()\n  local list64=()\n  local list65=()\n  local list66=()\n  local list67=()\n  local list68=()\n  local list69=()\n  local list70=()\n  local list71=()\n  local list72=()\n  local list\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local list3=()\n    local i=0\n    local j=0\n    local k=0\n    while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n        if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n            list3[$k]=${list1[$i]}\n            ((i++))\n        elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n            list3[$k]=${list2[$j]}\n            ((j++))\n        else\n            list3[$k]=${list1[$i]}\n            ((i++))\n            ((j++))\n        fi\n        ((k++))\n    done\n    while [ $i -lt ${#list1[@]} ]; do\n        list3[$k]=${list1[$i]}\n        ((i++))\n        ((k++))\n    done\n    while [ $j -lt ${#list2[@]} ]; do\n        list3[$k]=${list2[$j]}\n        ((j++))\n        ((k++))\n    done\n    echo ${list3[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=\"\"\n    for i in $list1; do\n        list3=\"$list3 $i\"\n    done\n    for i in $list2; do\n        list3=\"$list3 $i\"\n    done\n    echo $list3 | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  local element=\"\"\n\n  # Add all elements from list1 to union\n  for element in $list1; do\n    union=\"$union $element\"\n  done\n\n  # Add all elements from list2 to union\n  for element in $list2; do\n    union=\"$union $element\"\n  done\n\n  # Sort and remove duplicates\n  echo \"$union\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_length=$(echo \"$list1\" | wc -w)\n  local list2_length=$(echo \"$list2\" | wc -w)\n  local list1_index=1\n  local list2_index=1\n  local union=\"\"\n\n  while [ $list1_index -le $list1_length ] && [ $list2_index -le $list2_length ]; do\n    local list1_element=$(echo \"$list1\" | cut -d' ' -f$list1_index)\n    local list2_element=$(echo \"$list2\" | cut -d' ' -f$list2_index)\n\n    if [ $list1_element -lt $list2_element ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n    elif [ $list1_element -gt $list2_element ]; then\n      union=\"$union $list2_element\"\n      list2_index=$((list2_index + 1))\n    else\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index + 1))\n      list2_index=$((list2_index + 1))\n    fi\n  done\n\n  while [ $list1_index -le $list1_length ]; do\n    local list1_element=$(echo \"$list1\" | cut -d' ' -f$list1_index)\n    union=\"$union $list1_element\"\n    list1_index=$((list1_index + 1))\n  done\n\n  while [ $list2_index -le $list2_length ]; do\n    local list2_element=$(echo \"$list2\" | cut -d' ' -f$list2_index)\n    union=\"$union $list2_element\"\n    list2_index=$((list2_index + 1))\n  done\n\n  echo \"$union\" | sed 's/^ *//' | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | sed 's/ *$//'\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a list3=()\n  local -a list4=()\n  local -a list5=()\n  local -a list6=()\n  local -a list7=()\n  local -a list8=()\n  local -a list9=()\n  local -a list10=()\n  local -a list11=()\n  local -a list12=()\n  local -a list13=()\n  local -a list14=()\n  local -a list15=()\n  local -a list16=()\n  local -a list17=()\n  local -a list18=()\n  local -a list19=()\n  local -a list20=()\n  local -a list21=()\n  local -a list22=()\n  local -a list23=()\n  local -a list24=()\n  local -a list25=()\n  local -a list26=()\n  local -a list27=()\n  local -a list28=()\n  local -a list29=()\n  local -a list30=()\n  local -a list31=()\n  local -a list32=()\n  local -a list33=()\n  local -a list34=()\n  local -a list35=()\n  local -a list36=()\n  local -a list37=()\n  local -a list38=()\n  local -a list39=()\n  local -a list40=()\n  local -a list41=()\n  local -a list42=()\n  local -a list43=()\n  local -a list44=()\n  local -a list45=()\n  local -a list46=()\n  local -a list47=()\n  local -a list48=()\n  local -a list49=()\n  local -a list50=()\n  local -a list51=()\n  local -a list52=()\n  local -a list53=()\n  local -a list54=()\n  local -a list55=()\n  local -a list56=()\n  local -\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for element in $list1; do\n        if [[ \"$union\" != *\"$element\"* ]]; then\n            union=\"$union $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if [[ \"$union\" != *\"$element\"* ]]; then\n            union=\"$union $element\"\n        fi\n    done\n\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for item in $list1; do\n    if [[ $union != *\"$item\"* ]]; then\n      union=\"$union $item\"\n    fi\n  done\n\n  for item in $list2; do\n    if [[ $union != *\"$item\"* ]]; then\n      union=\"$union $item\"\n    fi\n  done\n\n  echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local list3=()\n  local i j\n\n  for ((i = 0; i < ${#list1[@]}; i++)); do\n    for ((j = 0; j < ${#list2[@]}; j++)); do\n      if [[ \"${list1[$i]}\" == \"${list2[$j]}\" ]]; then\n        list3+=(\"${list1[$i]}\")\n      fi\n    done\n  done\n\n  echo \"${list3[@]}\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_len=$(echo \"$list1\" | wc -w)\n  local list2_len=$(echo \"$list2\" | wc -w)\n  local list1_elements=()\n  local list2_elements=()\n  local union=()\n  local i=0\n  local j=0\n  local k=0\n\n  # Convert lists to arrays\n  for element in $list1; do\n    list1_elements[$i]=$element\n    i=$((i+1))\n  done\n\n  for element in $list2; do\n    list2_elements[$j]=$element\n    j=$((j+1))\n  done\n\n  # Find the union of the two lists\n  for ((i=0; i<list1_len; i++)); do\n    for ((j=0; j<list2_len; j++)); do\n      if [[ ${list1_elements[$i]} == ${list2_elements[$j]} ]]; then\n        union[$k]=${list1_elements[$i]}\n        k=$((k+1))\n        break\n      fi\n    done\n  done\n\n  # Sort the union\n  for ((i=0; i<k; i++)); do\n    for ((j=i+1; j<k; j++)); do\n      if [[ ${union[$i]} -gt ${union[$j]} ]]; then\n        temp=${union[$i]}\n        union[$i]=${union[$j]}\n        union[$j]=$temp\n      fi\n    done\n  done\n\n  # Print the union\n  for ((i=0; i<k; i++)); do\n    echo -n \"${union[$i]} \"\n  done\n  echo\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local union=()\n\n    for i in ${list1[@]}; do\n        union[${#union[@]}]=$i\n    done\n\n    for i in ${list2[@]}; do\n        if ! contains \"${union[@]}\" $i; then\n            union[${#union[@]}]=$i\n        fi\n    done\n\n    echo ${union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpkc5kacqt.sh: line 16: contains: command not found\\n/tmp/tmpkc5kacqt.sh: line 16: contains: command not found\\n/tmp/tmpkc5kacqt.sh: line 16: contains: command not found\\n/tmp/tmpkc5kacqt.sh: line 16: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union_list=\"\"\n\n  for i in $list1; do\n    if ! echo \"$union_list\" | grep -q \"$i\"; then\n      union_list=\"$union_list $i\"\n    fi\n  done\n\n  for i in $list2; do\n    if ! echo \"$union_list\" | grep -q \"$i\"; then\n      union_list=\"$union_list $i\"\n    fi\n  done\n\n  echo \"$union_list\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=\"\"\n    for i in $list1\n    do\n        list3=\"$list3 $i\"\n    done\n    for i in $list2\n    do\n        list3=\"$list3 $i\"\n    done\n    list3=$(echo $list3 | tr \" \" \"\\n\" | sort | uniq | tr \"\\n\" \" \")\n    echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n    for item in $list1; do\n        if ! echo \"$union\" | grep -q \"$item\"; then\n            union=\"$union $item\"\n        fi\n    done\n    for item in $list2; do\n        if ! echo \"$union\" | grep -q \"$item\"; then\n            union=\"$union $item\"\n        fi\n    done\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' ' | sed 's/ $//'\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local result=()\n  for i in $list1; do\n    result+=(\"$i\")\n  done\n  for i in $list2; do\n    if ! contains \"$i\" \"${result[@]}\"; then\n      result+=(\"$i\")\n    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp6ux16x0o.sh: line 14: contains: command not found\\n/tmp/tmp6ux16x0o.sh: line 14: contains: command not found\\n/tmp/tmp6ux16x0o.sh: line 14: contains: command not found\\n/tmp/tmp6ux16x0o.sh: line 14: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=\"\"\n  for i in $list1\n  do\n    list3=\"$list3 $i\"\n  done\n  for i in $list2\n  do\n    list3=\"$list3 $i\"\n  done\n  echo $list3 | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union\n  local i j\n\n  for ((i=0; i<${#list1[@]}; i++)); do\n    for ((j=0; j<${#union[@]}; j++)); do\n      if [[ ${list1[i]} == ${union[j]} ]]; then\n        break\n      fi\n    done\n    if [[ $j -eq ${#union[@]} ]]; then\n      union[${#union[@]}]=${list1[i]}\n    fi\n  done\n\n  for ((i=0; i<${#list2[@]}; i++)); do\n    for ((j=0; j<${#union[@]}; j++)); do\n      if [[ ${list2[i]} == ${union[j]} ]]; then\n        break\n      fi\n    done\n    if [[ $j -eq ${#union[@]} ]]; then\n      union[${#union[@]}]=${list2[i]}\n    fi\n  done\n\n  echo ${union[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  # TODO: Write a function to find the union of the elements of two given lists and output them in sorted order.\n  #       The function should take two arguments, both of which are space-separated lists.\n  #       The function should output the union of the two lists, also in a space-separated list.\n  #       The output should be sorted.\n  #       The function should not modify the arguments.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any external commands.\n  #       The function should not use any\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for element in $list1; do\n    if ! contains \"$union\" \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! contains \"$union\" \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpkmpx4kjc.sh: line 12: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 12: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 12: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 12: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 18: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 18: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 18: contains: command not found\\n/tmp/tmpkmpx4kjc.sh: line 18: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for element in $list1; do\n        if ! echo \"$union\" | grep -q \"$element\"; then\n            union=\"$union $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! echo \"$union\" | grep -q \"$element\"; then\n            union=\"$union $element\"\n        fi\n    done\n\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local result=\"\"\n\n    for element in $list1; do\n        if ! contains \"$result\" \"$element\"; then\n            result=\"$result $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! contains \"$result\" \"$element\"; then\n            result=\"$result $element\"\n        fi\n    done\n\n    echo \"$result\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp15as2jay.sh: line 12: contains: command not found\\n/tmp/tmp15as2jay.sh: line 12: contains: command not found\\n/tmp/tmp15as2jay.sh: line 12: contains: command not found\\n/tmp/tmp15as2jay.sh: line 12: contains: command not found\\n/tmp/tmp15as2jay.sh: line 18: contains: command not found\\n/tmp/tmp15as2jay.sh: line 18: contains: command not found\\n/tmp/tmp15as2jay.sh: line 18: contains: command not found\\n/tmp/tmp15as2jay.sh: line 18: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for element in $list1; do\n    if ! echo \"$union\" | grep -q \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! echo \"$union\" | grep -q \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_count=$(echo \"$list1\" | wc -w)\n  local list2_count=$(echo \"$list2\" | wc -w)\n  local list1_index=0\n  local list2_index=0\n  local union=\"\"\n\n  while [ $list1_index -lt $list1_count ] && [ $list2_index -lt $list2_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d ' ' -f $((list1_index+1)))\n    local list2_element=$(echo \"$list2\" | cut -d ' ' -f $((list2_index+1)))\n\n    if [ $list1_element -lt $list2_element ]; then\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index+1))\n    elif [ $list1_element -gt $list2_element ]; then\n      union=\"$union $list2_element\"\n      list2_index=$((list2_index+1))\n    else\n      union=\"$union $list1_element\"\n      list1_index=$((list1_index+1))\n      list2_index=$((list2_index+1))\n    fi\n  done\n\n  while [ $list1_index -lt $list1_count ]; do\n    local list1_element=$(echo \"$list1\" | cut -d ' ' -f $((list1_index+1)))\n    union=\"$union $list1_element\"\n    list1_index=$((list1_index+1))\n  done\n\n  while [ $list2_index -lt $list2_count ]; do\n    local list2_element=$(echo \"$list2\" | cut -d ' ' -f $((list2_index+1)))\n    union=\"$union $list2_element\"\n    list2_index=$((list2_index+1))\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for element in $list1; do\n    if ! contains \"$element\" \"$union\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! contains \"$element\" \"$union\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpjak5qkji.sh: line 12: contains: command not found\\n/tmp/tmpjak5qkji.sh: line 12: contains: command not found\\n/tmp/tmpjak5qkji.sh: line 12: contains: command not found\\n/tmp/tmpjak5qkji.sh: line 12: contains: command not found\\n/tmp/tmpjak5qkji.sh: line 18: contains: command not found\\n/tmp/tmpjak5qkji.sh: line 18: contains: command not found\\n/tmp/tmpjak5qkji.sh: line 18: contains: command not found\\n/tmp/tmpjak5qkji.sh: line 18: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=($1)\n  local list2=($2)\n  local union=()\n  local i=0\n  local j=0\n  while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n    if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n      union[${#union[@]}]=${list1[$i]}\n      ((i++))\n    elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n      union[${#union[@]}]=${list2[$j]}\n      ((j++))\n    else\n      union[${#union[@]}]=${list1[$i]}\n      ((i++))\n      ((j++))\n    fi\n  done\n  while [ $i -lt ${#list1[@]} ]; do\n    union[${#union[@]}]=${list1[$i]}\n    ((i++))\n  done\n  while [ $j -lt ${#list2[@]} ]; do\n    union[${#union[@]}]=${list2[$j]}\n    ((j++))\n  done\n  echo ${union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list3=\"\"\n\n  for i in $list1; do\n    list3=\"$list3 $i\"\n  done\n\n  for i in $list2; do\n    list3=\"$list3 $i\"\n  done\n\n  echo $list3 | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union\n  local -a unique\n  local -a sorted\n\n  # Find the union of the two lists\n  for i in \"${list1[@]}\"; do\n    union+=(\"$i\")\n  done\n  for i in \"${list2[@]}\"; do\n    union+=(\"$i\")\n  done\n\n  # Find the unique elements of the union\n  for i in \"${union[@]}\"; do\n    if ! contains \"$i\" \"${unique[@]}\"; then\n      unique+=(\"$i\")\n    fi\n  done\n\n  # Sort the unique elements\n  sorted=($(printf \"%s\\n\" \"${unique[@]}\" | sort))\n\n  # Output the sorted elements\n  printf \"%s\\n\" \"${sorted[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpzkhv8k02.sh: line 23: contains: command not found\\n/tmp/tmpzkhv8k02.sh: line 23: contains: command not found\\n/tmp/tmpzkhv8k02.sh: line 23: contains: command not found\\n/tmp/tmpzkhv8k02.sh: line 23: contains: command not found\\n/tmp/tmpzkhv8k02.sh: line 23: contains: command not found\\n/tmp/tmpzkhv8k02.sh: line 23: contains: command not found\\n/tmp/tmpzkhv8k02.sh: line 23: contains: command not found\\n/tmp/tmpzkhv8k02.sh: line 23: contains: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u)\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n\tlocal -a list1=($1)\n\tlocal -a list2=($2)\n\tlocal -a union\n\tlocal -a sorted_union\n\tlocal i\n\n\tfor i in ${list1[@]}; do\n\t\tunion[${#union[@]}]=$i\n\tdone\n\n\tfor i in ${list2[@]}; do\n\t\tunion[${#union[@]}]=$i\n\tdone\n\n\tsorted_union=($(echo ${union[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n\techo ${sorted_union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n\n    # Convert the lists to arrays\n    local list1_array=($list1)\n    local list2_array=($list2)\n\n    # Find the union of the two arrays\n    local union_array=($(echo \"${list1_array[@]}\" \"${list2_array[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n\n    # Convert the array to a string\n    local union_string=\"${union_array[@]}\"\n\n    # Output the union\n    echo $union_string\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n\n  local list1_array=($list1)\n  local list2_array=($list2)\n\n  local union_array=()\n  local union_array_index=0\n\n  for i in ${list1_array[@]}; do\n    local found=0\n    for j in ${list2_array[@]}; do\n      if [ \"$i\" = \"$j\" ]; then\n        found=1\n        break\n      fi\n    done\n\n    if [ $found -eq 0 ]; then\n      union_array[$union_array_index]=\"$i\"\n      union_array_index=$(($union_array_index + 1))\n    fi\n  done\n\n  for i in ${list2_array[@]}; do\n    local found=0\n    for j in ${union_array[@]}; do\n      if [ \"$i\" = \"$j\" ]; then\n        found=1\n        break\n      fi\n    done\n\n    if [ $found -eq 0 ]; then\n      union_array[$union_array_index]=\"$i\"\n      union_array_index=$(($union_array_index + 1))\n    fi\n  done\n\n  echo ${union_array[@]} | tr ' ' '\\n' | sort\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=\"\"\n    for i in $list1; do\n        list3=\"$list3 $i\"\n    done\n    for i in $list2; do\n        list3=\"$list3 $i\"\n    done\n    echo $list3 | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local list3=()\n    local i=0\n    local j=0\n    local k=0\n    while [ $i -lt ${#list1[@]} ]\n    do\n        list3[$k]=${list1[$i]}\n        let i++\n        let k++\n    done\n    while [ $j -lt ${#list2[@]} ]\n    do\n        list3[$k]=${list2[$j]}\n        let j++\n        let k++\n    done\n    echo ${list3[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union_list=\"\"\n\n  for item in $list1; do\n    if ! echo \"$union_list\" | grep -q \"$item\"; then\n      union_list=\"$union_list $item\"\n    fi\n  done\n\n  for item in $list2; do\n    if ! echo \"$union_list\" | grep -q \"$item\"; then\n      union_list=\"$union_list $item\"\n    fi\n  done\n\n  echo \"$union_list\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    echo $1 $2 | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a result=()\n  local i=0\n  local j=0\n  local k=0\n\n  while [ $i -lt ${#list1[@]} ] && [ $j -lt ${#list2[@]} ]; do\n    if [ ${list1[$i]} -lt ${list2[$j]} ]; then\n      union[$k]=${list1[$i]}\n      ((i++))\n    elif [ ${list1[$i]} -gt ${list2[$j]} ]; then\n      union[$k]=${list2[$j]}\n      ((j++))\n    else\n      union[$k]=${list1[$i]}\n      ((i++))\n      ((j++))\n    fi\n    ((k++))\n  done\n\n  while [ $i -lt ${#list1[@]} ]; do\n    union[$k]=${list1[$i]}\n    ((i++))\n    ((k++))\n  done\n\n  while [ $j -lt ${#list2[@]} ]; do\n    union[$k]=${list2[$j]}\n    ((j++))\n    ((k++))\n  done\n\n  result=($(echo ${union[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  echo ${result[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local union_list=\"\"\n\n    for item in $list1; do\n        if [[ $union_list != *$item* ]]; then\n            union_list=\"$union_list $item\"\n        fi\n    done\n\n    for item in $list2; do\n        if [[ $union_list != *$item* ]]; then\n            union_list=\"$union_list $item\"\n        fi\n    done\n\n    echo $union_list | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union_list=\"\"\n\n    for element in $list1; do\n        if ! echo \"$union_list\" | grep -q \"\\<$element\\>\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! echo \"$union_list\" | grep -q \"\\<$element\\>\"; then\n            union_list=\"$union_list $element\"\n        fi\n    done\n\n    echo \"$union_list\" | tr ' ' '\\n' | sort | tr '\\n' ' ' | sed 's/^ *//'\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union=()\n\n    for i in ${list1[@]}; do\n        if [[ ! \" ${union[@]} \" =~ \" ${i} \" ]]; then\n            union+=($i)\n        fi\n    done\n\n    for i in ${list2[@]}; do\n        if [[ ! \" ${union[@]} \" =~ \" ${i} \" ]]; then\n            union+=($i)\n        fi\n    done\n\n    echo ${union[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_len=$(echo \"$list1\" | wc -w)\n    local list2_len=$(echo \"$list2\" | wc -w)\n    local i=1\n    local j=1\n    local union=\"\"\n    while [ $i -le $list1_len ] && [ $j -le $list2_len ]; do\n        local item1=$(echo \"$list1\" | cut -d \" \" -f $i)\n        local item2=$(echo \"$list2\" | cut -d \" \" -f $j)\n        if [ $item1 -lt $item2 ]; then\n            union=\"$union $item1\"\n            i=$((i+1))\n        elif [ $item1 -gt $item2 ]; then\n            union=\"$union $item2\"\n            j=$((j+1))\n        else\n            union=\"$union $item1\"\n            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    while [ $i -le $list1_len ]; do\n        local item1=$(echo \"$list1\" | cut -d \" \" -f $i)\n        union=\"$union $item1\"\n        i=$((i+1))\n    done\n    while [ $j -le $list2_len ]; do\n        local item2=$(echo \"$list2\" | cut -d \" \" -f $j)\n        union=\"$union $item2\"\n        j=$((j+1))\n    done\n    echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=\"\"\n  for i in $list1; do\n    list3=\"$list3 $i\"\n  done\n  for i in $list2; do\n    list3=\"$list3 $i\"\n  done\n  echo $list3 | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=\"\"\n\n    for i in $list1; do\n        list3=\"$list3 $i\"\n    done\n\n    for i in $list2; do\n        list3=\"$list3 $i\"\n    done\n\n    echo $list3 | tr \" \" \"\\n\" | sort | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n  local element=\"\"\n\n  for element in $list1; do\n    if ! contains_element \"$element\" \"$union\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! contains_element \"$element\" \"$union\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2guqqgoq.sh: line 13: contains_element: command not found\\n/tmp/tmp2guqqgoq.sh: line 13: contains_element: command not found\\n/tmp/tmp2guqqgoq.sh: line 13: contains_element: command not found\\n/tmp/tmp2guqqgoq.sh: line 13: contains_element: command not found\\n/tmp/tmp2guqqgoq.sh: line 19: contains_element: command not found\\n/tmp/tmp2guqqgoq.sh: line 19: contains_element: command not found\\n/tmp/tmp2guqqgoq.sh: line 19: contains_element: command not found\\n/tmp/tmp2guqqgoq.sh: line 19: contains_element: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union\n  local -a sorted_union\n  local -i i\n  local -i j\n  local -i k\n  local -i n1\n  local -i n2\n  local -i n3\n  local -i flag\n  n1=${#list1[@]}\n  n2=${#list2[@]}\n  n3=0\n  for ((i=0; i<n1; i++)); do\n    flag=0\n    for ((j=0; j<n2; j++)); do\n      if [[ ${list1[i]} == ${list2[j]} ]]; then\n        flag=1\n        break\n      fi\n    done\n    if [[ $flag == 0 ]]; then\n      union[n3]=${list1[i]}\n      n3=$n3+1\n    fi\n  done\n  for ((i=0; i<n2; i++)); do\n    flag=0\n    for ((j=0; j<n1; j++)); do\n      if [[ ${list2[i]} == ${list1[j]} ]]; then\n        flag=1\n        break\n      fi\n    done\n    if [[ $flag == 0 ]]; then\n      union[n3]=${list2[i]}\n      n3=$n3+1\n    fi\n  done\n  for ((i=0; i<n3; i++)); do\n    sorted_union[i]=${union[i]}\n  done\n  for ((i=0; i<n3; i++)); do\n    for ((j=i+1; j<n3; j++)); do\n      if [[ ${sorted_union[i]} > ${sorted_union[j]} ]]; then\n        k=${sorted_union[i]}\n        sorted_union[i]=${sorted_union[j]}\n        sorted_union[j]=$k\n      fi\n    done\n  done\n  echo ${sorted_union[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=\"\"\n    for i in $list1; do\n        list3=\"$list3 $i\"\n    done\n    for i in $list2; do\n        list3=\"$list3 $i\"\n    done\n    echo $list3 | tr \" \" \"\\n\" | sort | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=\"\"\n  for i in $list1; do\n    list3=\"$list3 $i\"\n  done\n  for i in $list2; do\n    list3=\"$list3 $i\"\n  done\n  echo $list3 | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for i in $list1; do\n    if ! echo \"$union\" | grep -q \"$i\"; then\n      union=\"$union $i\"\n    fi\n  done\n\n  for i in $list2; do\n    if ! echo \"$union\" | grep -q \"$i\"; then\n      union=\"$union $i\"\n    fi\n  done\n\n  echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u)\n  echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local -a list1=($1)\n    local -a list2=($2)\n    local -a union=()\n    local -a sorted_union=()\n\n    for i in ${list1[@]}; do\n        union+=($i)\n    done\n\n    for i in ${list2[@]}; do\n        union+=($i)\n    done\n\n    sorted_union=($(echo \"${union[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    echo \"${sorted_union[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a sorted=()\n  local i=0\n  local j=0\n  local k=0\n  local len1=${#list1[@]}\n  local len2=${#list2[@]}\n  for ((i=0; i<len1; i++)); do\n    union[k++]=${list1[i]}\n  done\n  for ((i=0; i<len2; i++)); do\n    for ((j=0; j<len1; j++)); do\n      if [[ ${list2[i]} == ${list1[j]} ]]; then\n        break\n      fi\n    done\n    if [[ $j -eq $len1 ]]; then\n      union[k++]=${list2[i]}\n    fi\n  done\n  sorted=($(echo ${union[@]} | tr ' ' '\\n' | sort -n))\n  echo ${sorted[@]}\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -n | uniq)\n  echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=($1)\n    local list2=($2)\n    local list3=()\n    local i=0\n    local j=0\n    local k=0\n    while [ $i -lt ${#list1[@]} ]\n    do\n        list3[$k]=${list1[$i]}\n        let k++\n        let i++\n    done\n    while [ $j -lt ${#list2[@]} ]\n    do\n        list3[$k]=${list2[$j]}\n        let k++\n        let j++\n    done\n    echo ${list3[@]} | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=$1\n    local list2=$2\n    local list3=$(echo \"${list1} ${list2}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"${list3}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list3=\"\"\n    local i=\"\"\n    for i in $list1; do\n        if ! echo \"$list3\" | grep -q \"$i\"; then\n            list3=\"$list3 $i\"\n        fi\n    done\n    for i in $list2; do\n        if ! echo \"$list3\" | grep -q \"$i\"; then\n            list3=\"$list3 $i\"\n        fi\n    done\n    echo \"$list3\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local union=\"\"\n\n    for element in $list1; do\n        if ! echo \"$union\" | grep -q \"$element\"; then\n            union=\"$union $element\"\n        fi\n    done\n\n    for element in $list2; do\n        if ! echo \"$union\" | grep -q \"$element\"; then\n            union=\"$union $element\"\n        fi\n    done\n\n    echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191006,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a sorted=()\n  local i j\n\n  for i in \"${list1[@]}\"; do\n    for j in \"${list2[@]}\"; do\n      if [[ $i == $j ]]; then\n        union+=(\"$i\")\n      fi\n    done\n  done\n\n  for i in \"${union[@]}\"; do\n    sorted+=(\"$i\")\n  done\n\n  IFS=$'\\n' sorted=($(sort <<<\"${sorted[*]}\"))\n  unset IFS\n\n  echo \"${sorted[*]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    local list1=\"$1\"\n    local list2=\"$2\"\n    local list1_len=${#list1}\n    local list2_len=${#list2}\n    local list1_arr\n    local list2_arr\n    local list1_arr_len\n    local list2_arr_len\n    local i\n    local j\n    local k\n    local tmp_arr\n    local tmp_arr_len\n    local tmp_arr_str\n    local tmp_arr_str_len\n    local tmp_arr_str_arr\n    local tmp_arr_str_arr_len\n    local tmp_arr_str_arr_str\n    local tmp_arr_str_arr_str_len\n    local tmp_arr_str_arr_str_arr\n    local tmp_arr_str_arr_str_arr_len\n    local tmp_arr_str_arr_str_arr_str\n    local tmp_arr_str_arr_str_arr_str_len\n    local tmp_arr_str_arr_str_arr_str_arr\n    local tmp_arr_str_arr_str_arr_str_arr_len\n    local tmp_arr_str_arr_str_arr_str_arr_str\n    local tmp_arr_str_arr_str_arr_str_arr_str_len\n    local tmp_arr_str_arr_str_arr_str_arr_str_arr\n    local tmp_arr_str_arr_str_arr_str_arr_str_arr_len\n    local tmp_arr_str_arr_str_arr_str_arr_str_arr_str\n    local tmp_arr_str_arr_str_arr_str_arr_str_arr_str_len\n    local tmp_arr_str_arr_str_arr_str_arr_str_arr_str_arr\n    local tmp_arr_str_arr_str_arr_str_arr_str_arr_str_arr_len\n    local tmp_arr_str_arr_str_arr_str_arr_str_arr_str_arr_str\n    local tmp_arr_str_arr_str_arr_str_arr_str_arr\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local union=\"\"\n\n  for element in $list1; do\n    if ! echo \"$union\" | grep -qw \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  for element in $list2; do\n    if ! echo \"$union\" | grep -qw \"$element\"; then\n      union=\"$union $element\"\n    fi\n  done\n\n  echo \"$union\" | tr ' ' '\\n' | sort | tr '\\n' ' '\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=\"$1\"\n  local list2=\"$2\"\n  local list1_elements=$(echo \"$list1\" | tr ' ' '\\n' | sort)\n  local list2_elements=$(echo \"$list2\" | tr ' ' '\\n' | sort)\n  local union_elements=$(comm -12 <(echo \"$list1_elements\") <(echo \"$list2_elements\"))\n  echo \"$union_elements\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local -a list1=($1)\n  local -a list2=($2)\n  local -a union=()\n  local -a sorted=()\n\n  for i in \"${list1[@]}\"; do\n    union+=($i)\n  done\n\n  for i in \"${list2[@]}\"; do\n    union+=($i)\n  done\n\n  sorted=($(printf \"%s\\n\" \"${union[@]}\" | sort -u))\n\n  echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n  local list1=$1\n  local list2=$2\n  local list3=$(echo \"$list1 $list2\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo $list3\n}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test",
      "timestamp": 1667191007,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}