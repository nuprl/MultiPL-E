{
  "name": "mbpp_141_pancake_sort",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort a list of elements.\n#\n# $1 is a space-separated list\npancake_sort() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    pancake_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 79 25 38 69\") = \"15 25 38 69 79\" ]]\n    [[ $(candidate \"98 12 54 36 85\") = \"12 36 54 85 98\" ]]\n    [[ $(candidate \"41 42 32 12 23\") = \"12 23 32 41 42\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=\"$1\"\n    local sorted=()\n    local max=0\n    local max_index=0\n    local i=0\n    local j=0\n    local temp=0\n\n    for i in $list; do\n        if [ $i -gt $max ]; then\n            max=$i\n            max_index=$j\n        fi\n        j=$((j + 1))\n    done\n\n    sorted+=(\"$max\")\n    list=${list//$max/}\n\n    if [ -z \"$list\" ]; then\n        echo \"${sorted[*]}\"\n    else\n        pancake_sort \"$list\"\n    fi",
    "  local list=\"$1\"\n  local sorted=()\n  local max_index=0\n  local max_value=0\n  local i=0\n  local j=0\n  local temp=0\n  local temp_index=0\n\n  # Find the max value and its index\n  for i in $list; do\n    if [ $i -gt $max_value ]; then\n      max_value=$i\n      max_index=$j\n    fi\n    j=$((j+1))\n  done\n\n  # Flip the max value to the top\n  for i in $(seq 0 $max_index); do\n    temp=$(echo $list | cut -d ' ' -f $i)\n    temp_index=$((max_index-i))\n    list=$(echo $list | sed \"s/$temp/$temp_index/\")\n    list=$(echo $list | sed \"s/$temp_index/$temp/\")\n  done\n\n  # Flip the max value to the bottom\n  for i in $(seq 0 $((max_index-1))); do\n    temp=$(echo $list | cut -d ' ' -f $i)\n    temp_index=$((max_index-i))\n    list=$(echo $list | sed \"s/$temp/$temp_index/\")\n    list=$(echo $list | sed \"s/$temp_index/$temp/\")\n  done\n\n  # Add the max value to the sorted list\n  sorted+=($max_value)\n\n  # Remove the max value from the list\n  list=$(echo $list | sed \"s/$max_value//\")\n\n  # If the list is not empty, sort it\n  if [ -n \"$list\" ]; then\n    sorted+=($(pancake_sort \"$list\"))\n  fi\n\n  # Return the sorted list\n  echo \"${sorted[@]}\"",
    "    local list=\"$1\"\n    local sorted=()\n    local max_index=0\n    local max_value=0\n    local i=0\n    local j=0\n    local tmp=0\n\n    # Find the maximum value and its index\n    for i in $list; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$j\n        fi\n        j=$((j+1))\n    done\n\n    # Flip the list so that the maximum value is at the top\n    for i in $(seq 1 $max_index); do\n        tmp=$(echo $list | cut -d' ' -f$i)\n        list=$(echo $list | cut -d' ' -f$((i+1))-)\n        list=\"$tmp $list\"\n    done\n\n    # Flip the list so that the maximum value is at the bottom\n    for i in $(seq 1 $((j-max_index-1))); do\n        tmp=$(echo $list | cut -d' ' -f$i)\n        list=$(echo $list | cut -d' ' -f$((i+1))-)\n        list=\"$tmp $list\"\n    done\n\n    # Remove the maximum value from the list\n    list=$(echo $list | cut -d' ' -f1-$((j-1)))\n\n    # Add the maximum value to the sorted list\n    sorted=\"$max_value $sorted\"\n\n    # If the list is not empty, sort it\n    if [ -n \"$list\" ]; then\n        sorted=\"$(pancake_sort \"$list\") $sorted\"\n    fi\n\n    echo $sorted",
    "    local list=\"$1\"\n    local sorted=()\n    local max=0\n    local max_index=0\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local temp_index=0\n    local temp_list=()\n\n    for (( i=0; i<${#list[@]}; i++ )); do\n        max=${list[0]}\n        max_index=0\n        for (( j=0; j<${#list[@]}; j++ )); do\n            if [[ ${list[j]} -gt $max ]]; then\n                max=${list[j]}\n                max_index=$j\n            fi\n        done\n        sorted+=($max)\n        temp_list=()\n        for (( k=0; k<${#list[@]}; k++ )); do\n            if [[ $k -ne $max_index ]]; then\n                temp_list+=(${list[k]})\n            fi\n        done\n        list=(\"${temp_list[@]}\")\n    done\n\n    echo \"${sorted[@]}\"",
    "  local list=\"$1\"\n  local sorted=()\n  local i=0\n  local max=0\n  local max_index=0\n  local tmp=()\n\n  for i in $list; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n      max_index=$i\n    fi\n  done\n\n  sorted+=($max)\n  tmp=($list)\n  unset tmp[$max_index]\n  pancake_sort \"${tmp[@]}\"",
    "    local list=$1\n    local sorted=()\n    local max_index=0\n    local max_value=0\n    local i=0\n    local j=0\n    local tmp=0\n\n    for i in $list; do\n        if [[ $i -gt $max_value ]]; then\n            max_value=$i\n            max_index=$j\n        fi\n        j=$((j+1))\n    done\n    sorted[0]=$max_value\n    list=$(echo $list | sed \"s/$max_value//\")\n\n    for i in $list; do\n        sorted[$j]=$i\n        j=$((j+1))\n    done\n\n    for i in ${sorted[@]}; do\n        echo -n \"$i \"\n    done\n    echo",
    "    local list=\"$1\"\n    local sorted=()\n    local max=0\n    local max_index=0\n    local i=0\n    local j=0\n    local tmp=0\n\n    for i in $list; do\n        if [ $i -gt $max ]; then\n            max=$i\n            max_index=$j\n        fi\n        j=$((j + 1))\n    done\n\n    if [ $max -eq 0 ]; then\n        echo \"${sorted[@]}\"\n        return\n    fi\n\n    sorted=(\"$max\" \"${sorted[@]}\")\n\n    list=(\"${list[@]:0:$max_index}\" \"${list[@]:$((max_index + 1))}\")\n\n    pancake_sort \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local max=0\n    local max_index=0\n    local len=${#list[@]}\n\n    for ((i=0; i<len; i++)); do\n        max=${list[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++)); do\n            if [[ ${list[j]} -gt $max ]]; then\n                max=${list[j]}\n                max_index=$j\n            fi\n        done\n        if [[ $max_index -ne 0 ]]; then\n            for ((k=0; k<max_index/2; k++)); do\n                tmp=${list[k]}\n                list[k]=${list[max_index-k]}\n                list[max_index-k]=$tmp\n            done\n        fi\n        for ((k=0; k<(len-i)/2; k++)); do\n            tmp=${list[k]}\n            list[k]=${list[len-i-k-1]}\n            list[len-i-k-1]=$tmp\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local sorted=()\n    local max=0\n    local max_index=0\n    local i=0\n    local j=0\n\n    for i in $list; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n            max_index=$j\n        fi\n        j=$((j+1))\n    done\n\n    if [[ $max -eq 0 ]]; then\n        echo \"${sorted[@]}\"\n        return\n    fi\n\n    sorted+=($max)\n    list=$(echo $list | sed \"s/$max//g\")\n\n    if [[ $max_index -ne 0 ]]; then\n        list=$(echo $list | sed \"s/^/$max /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/^/0 /\")\n        list=$(echo $list | sed \"s/",
    "    local list=$1\n    local sorted=()\n    local i\n    local j\n    local max\n    local max_index\n    local temp\n    local temp_index\n    local temp_list\n\n    for ((i=0; i<${#list[@]}; i++)); do\n        max=${list[0]}\n        max_index=0\n        for ((j=0; j<${#list[@]}; j++)); do\n            if [[ ${list[j]} -gt $max ]]; then\n                max=${list[j]}\n                max_index=$j\n            fi\n        done\n        sorted+=($max)\n        unset list[$max_index]\n        list=(${list[@]})\n    done\n\n    echo ${sorted[@]}",
    "  local list=\"$1\"\n  local sorted=()\n  local max=0\n  local max_index=0\n  local i=0\n  local j=0\n  local temp=0\n  local list_length=0\n  local sorted_length=0\n\n  list_length=$(echo \"$list\" | wc -w)\n  sorted_length=$(echo \"$sorted\" | wc -w)\n\n  while [ \"$list_length\" -gt 0 ]; do\n    max=0\n    max_index=0\n    for i in $list; do\n      if [ \"$i\" -gt \"$max\" ]; then\n        max=\"$i\"\n        max_index=\"$j\"\n      fi\n      j=$((j + 1))\n    done\n\n    if [ \"$max_index\" -gt 0 ]; then\n      list=$(echo \"$list\" | sed -e \"s/\\([^ ]* \\)\\{$max_index\\}//\")\n      list=$(echo \"$max $list\")\n    fi\n\n    list=$(echo \"$list\" | sed -e \"s/\\([^ ]* \\)\\{1\\}//\")\n    sorted=\"$sorted $max\"\n\n    list_length=$(echo \"$list\" | wc -w)\n    sorted_length=$(echo \"$sorted\" | wc -w)\n  done\n\n  echo \"$sorted\"",
    "  local list=\"$1\"\n  local sorted=()\n  local max=0\n  local max_index=0\n  local i=0\n  local j=0\n  local temp=0\n\n  for i in $list; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n      max_index=$j\n    fi\n    j=$((j+1))\n  done\n\n  sorted+=(\"$max\")\n  list=$(echo $list | sed \"s/$max//\")\n\n  if [[ $max_index -gt 0 ]]; then\n    list=$(echo $list | sed \"s/^/$max /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$(echo $list | sed \"s/^/ /\")\n    list=$",
    "    local list=$1\n    local list_len=$(echo $list | wc -w)\n    local i=0\n    local j=0\n    local max_index=0\n    local max_value=0\n    local tmp=0\n    local tmp_list=()\n\n    for ((i=0; i<list_len; i++)); do\n        max_index=$i\n        max_value=$(echo $list | cut -d' ' -f$((i+1)))\n        for ((j=i+1; j<list_len; j++)); do\n            tmp=$(echo $list | cut -d' ' -f$((j+1)))\n            if [[ $tmp -gt $max_value ]]; then\n                max_index=$j\n                max_value=$tmp\n            fi\n        done\n        tmp_list=($(echo $list | cut -d' ' -f1-$i))\n        tmp_list+=($(echo $list | cut -d' ' -f$((max_index+1))-$((max_index+1))))\n        tmp_list+=($(echo $list | cut -d' ' -f$((i+1))-$((max_index-1))))\n        tmp_list+=($(echo $list | cut -d' ' -f$((max_index+2))-$list_len))\n        list=\"${tmp_list[@]}\"\n    done\n\n    echo $list",
    "  local list=$1\n  local list_len=$(echo \"$list\" | wc -w)\n  local sorted_list=()\n  local i=0\n  local max_index=0\n  local max_value=0\n  local j=0\n  local temp=0\n  local temp_list=()\n\n  for ((i=0; i<list_len; i++)); do\n    max_index=0\n    max_value=0\n    for ((j=0; j<list_len-i; j++)); do\n      temp=$(echo \"$list\" | cut -d ' ' -f $((j+1)))\n      if ((temp > max_value)); then\n        max_value=$temp\n        max_index=$j\n      fi\n    done\n\n    if ((max_index != 0)); then\n      temp_list=$(echo \"$list\" | cut -d ' ' -f 1-$max_index)\n      list=$(echo \"$list\" | cut -d ' ' -f $((max_index+1))-$list_len)\n      list=$(echo \"$list\" | tr ' ' '\\n' | tac | tr '\\n' ' ')\n      list=$(echo \"$list\" | cut -d ' ' -f 2-$list_len)\n      list=$(echo \"$temp_list $list\")\n    fi\n\n    temp_list=$(echo \"$list\" | cut -d ' ' -f 1-$((list_len-i)))\n    list=$(echo \"$list\" | cut -d ' ' -f $((list_len-i+1))-$list_len)\n    list=$(echo \"$list\" | tr ' ' '\\n' | tac | tr '\\n' ' ')\n    list=$(echo \"$list\" | cut -d ' ' -f 2-$list_len)\n    list=$(echo \"$temp_list $list\")\n  done\n\n  echo \"$list\"",
    "    local list=$1\n    local list_len=${#list}\n    local i=0\n    local j=0\n    local max_index=0\n    local max_val=0\n    local tmp=0\n    local tmp_index=0\n    local tmp_val=0\n    local tmp_list=()\n\n    for ((i=0; i<list_len; i++)); do\n        max_index=0\n        max_val=0\n        for ((j=0; j<list_len-i; j++)); do\n            tmp_val=${list:j:1}\n            if ((tmp_val > max_val)); then\n                max_val=$tmp_val\n                max_index=$j\n            fi\n        done\n        if ((max_index != list_len-i-1)); then\n            tmp_list=()\n            for ((j=0; j<max_index; j++)); do\n                tmp_list+=(${list:j:1})\n            done\n            for ((j=max_index; j<list_len-i; j++)); do\n                tmp_list+=(${list:list_len-i-1:1})\n            done\n            for ((j=list_len-i; j<list_len; j++)); do\n                tmp_list+=(${list:j:1})\n            done\n            list=${tmp_list[*]}\n            tmp_list=()\n            for ((j=0; j<list_len-i-1; j++)); do\n                tmp_list+=(${list:j:1})\n            done\n            for ((j=list_len-i-1; j<list_len; j++)); do\n                tmp_list+=(${list:list_len-i-1:1})\n            done\n            list=${tmp_list[*]}\n        fi\n    done\n    echo $list",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local max=0\n    local tmp=0\n    local len=${#list[@]}\n    for ((i=0; i<len; i++)); do\n        max=0\n        for ((j=0; j<len-i; j++)); do\n            if [[ ${list[j]} -gt ${list[max]} ]]; then\n                max=$j\n            fi\n        done\n        for ((k=0; k<max; k++)); do\n            tmp=${list[k]}\n            list[k]=${list[max]}\n            list[max]=$tmp\n        done\n        for ((k=0; k<len-i-1; k++)); do\n            tmp=${list[k]}\n            list[k]=${list[len-i-1]}\n            list[len-i-1]=$tmp\n        done\n    done\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local sorted=()\n    local max_index=0\n    local max_value=0\n    local i=0\n    local j=0\n    local tmp=0\n\n    for i in $list; do\n        if [ $i -gt $max_value ]; then\n            max_value=$i\n            max_index=$j\n        fi\n        j=$((j + 1))\n    done\n\n    if [ $max_index -ne 0 ]; then\n        tmp=$(pancake_sort \"$(echo $list | cut -d' ' -f2-$((max_index + 1)))\")\n        sorted=($tmp $max_value)\n    else\n        sorted=($max_value)\n    fi\n\n    if [ ${#list[@]} -gt 1 ]; then\n        tmp=$(pancake_sort \"$(echo $list | cut -d' ' -f2-${#list[@]})\")\n        sorted=($tmp ${sorted[@]})\n    fi\n\n    echo ${sorted[@]}",
    "    local list=\"$1\"\n    local sorted=()\n    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n    local tmp=0\n    local tmp2=0\n    local tmp3=0\n\n    while [ ${#list[@]} -gt 0 ]; do\n        max=${list[0]}\n        max_index=0\n        for i in ${!list[@]}; do\n            if [ ${list[$i]} -gt $max ]; then\n                max=${list[$i]}\n                max_index=$i\n            fi\n        done\n        if [ $max_index -ne 0 ]; then\n            tmp=${list[0]}\n            list[0]=${list[$max_index]}\n            list[$max_index]=$tmp\n            for i in ${!list[@]}; do\n                echo -n \"${list[$i]} \"\n            done\n            echo\n        fi\n        tmp2=${list[0]}\n        list=(\"${list[@]:1}\")\n        sorted=(\"$tmp2\" \"${sorted[@]}\")\n    done\n    echo \"Sorted list:\"\n    for i in ${!sorted[@]}; do\n        echo -n \"${sorted[$i]} \"\n    done\n    echo",
    "  local list=\"$1\"\n  local sorted=()\n  local max_index=0\n  local max_value=0\n  local i=0\n  local j=0\n  local temp=0\n  local temp_index=0\n\n  for i in $list; do\n    if [ $i -gt $max_value ]; then\n      max_value=$i\n      max_index=$j\n    fi\n    j=$((j+1))\n  done\n\n  sorted+=(\"$max_value\")\n  list=${list//$max_value/}\n\n  for ((i=0; i<${#sorted[@]}; i++)); do\n    max_value=0\n    max_index=0\n    j=0\n\n    for temp in $list; do\n      if [ $temp -gt $max_value ]; then\n        max_value=$temp\n        max_index=$j\n      fi\n      j=$((j+1))\n    done\n\n    sorted+=(\"$max_value\")\n    list=${list//$max_value/}\n  done\n\n  echo \"${sorted[@]}\"",
    "  local list=\"$1\"\n  local sorted=()\n  local max=0\n  local max_index=0\n  local i=0\n  local j=0\n  local tmp=0\n\n  for i in $list; do\n    if [ $i -gt $max ]; then\n      max=$i\n      max_index=$j\n    fi\n    j=$((j + 1))\n  done\n\n  if [ $max -eq 0 ]; then\n    echo \"${sorted[@]}\"\n    return\n  fi\n\n  sorted+=($max)\n  list=$(echo \"$list\" | sed \"s/$max//\")\n\n  for i in $(seq 1 $max_index); do\n    tmp=$(echo \"$list\" | cut -d \" \" -f 1)\n    list=$(echo \"$list\" | sed \"s/$tmp//\")\n    list=\"$tmp $list\"\n  done\n\n  list=$(echo \"$list\" | sed \"s/^ //\")\n\n  pancake_sort \"$list\""
  ]
}