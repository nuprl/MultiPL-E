{
  "name": "mbpp_752_jacobsthal_num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n#\n# $1 is an integer\njacobsthal_num() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    jacobsthal_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"11\" ]]\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"4\") = \"5\" ]]\n    [[ $(candidate \"13\") = \"2731\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local n=$1\n  local jacobsthal_num_1=0\n  local jacobsthal_num_2=1\n  local jacobsthal_num_n=0\n  if [ $n -eq 0 ]; then\n    echo $jacobsthal_num_1\n  elif [ $n -eq 1 ]; then\n    echo $jacobsthal_num_2\n  else\n    for (( i=2; i<=$n; i++ )); do\n      jacobsthal_num_n=$((jacobsthal_num_1 + 2*jacobsthal_num_2))\n      jacobsthal_num_1=$jacobsthal_num_2\n      jacobsthal_num_2=$jacobsthal_num_n\n    done\n    echo $jacobsthal_num_n\n  fi",
    "    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    for ((i=0; i<n; i++)); do\n        c=$((a+2*b))\n        a=$b\n        b=$c\n    done\n    echo $a",
    "    if [ $1 -lt 2 ]; then\n        echo $1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n    fi",
    "    local n=$1\n    local jacobsthal_num_1=0\n    local jacobsthal_num_2=1\n    local jacobsthal_num_n=0\n    for ((i=2; i<=n; i++)); do\n        jacobsthal_num_n=$((jacobsthal_num_1 + 2 * jacobsthal_num_2))\n        jacobsthal_num_1=$jacobsthal_num_2\n        jacobsthal_num_2=$jacobsthal_num_n\n    done\n    echo $jacobsthal_num_n",
    "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 )) ) + 2 * $(jacobsthal_num $(( $1 - 2 )) ) ))\n    fi",
    "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 1\n  else\n    echo $(( $(jacobsthal_num $(( $1 - 1 )) ) + $(jacobsthal_num $(( $1 - 2 )) ) * 2 ))\n  fi",
    "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 1\n  else\n    echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n  fi",
    "    local n=$1\n    local jacobsthal_num_prev_prev=0\n    local jacobsthal_num_prev=1\n    local jacobsthal_num_curr=0\n    if [[ $n -eq 0 ]]; then\n        echo $jacobsthal_num_prev_prev\n    elif [[ $n -eq 1 ]]; then\n        echo $jacobsthal_num_prev\n    else\n        for ((i=2; i<=n; i++)); do\n            jacobsthal_num_curr=$((jacobsthal_num_prev + 2*jacobsthal_num_prev_prev))\n            jacobsthal_num_prev_prev=$jacobsthal_num_prev\n            jacobsthal_num_prev=$jacobsthal_num_curr\n        done\n        echo $jacobsthal_num_curr\n    fi",
    "  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1 ]]; then\n    echo 1\n  else\n    echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n  fi",
    "    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    for ((i=2; i<=n; i++)); do\n        c=$((a+2*b))\n        a=$b\n        b=$c\n    done\n    echo $c",
    "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n    fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n    fi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 )) ) + 2 * $(jacobsthal_num $(( $1 - 2 )) ) ))\n    fi",
    "  local n=$1\n  local i=0\n  local jacobsthal=0\n  local jacobsthal_prev=0\n  local jacobsthal_prev_prev=0\n  while [ $i -lt $n ]; do\n    if [ $i -eq 0 ]; then\n      jacobsthal=0\n    elif [ $i -eq 1 ]; then\n      jacobsthal=1\n    else\n      jacobsthal=$((jacobsthal_prev + 2 * jacobsthal_prev_prev))\n    fi\n    jacobsthal_prev_prev=$jacobsthal_prev\n    jacobsthal_prev=$jacobsthal\n    i=$((i + 1))\n  done\n  echo $jacobsthal",
    "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        jacobsthal_num $(( $1 - 1 ))\n        jacobsthal_num $(( $1 - 2 ))\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 )) ) + 2 * $(jacobsthal_num $(( $1 - 2 )) ) ))\n    fi",
    "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 )) ) + 2 * $(jacobsthal_num $(( $1 - 2 )) ) ))\n    fi",
    "    local n=$1\n    local a=0\n    local b=1\n    local c=0\n    for ((i=2; i<=n; i++)); do\n        c=$((a+2*b))\n        a=$b\n        b=$c\n    done\n    echo $c",
    "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 1\n    else\n        echo $(( $(jacobsthal_num $(( $1 - 1 ))) + 2 * $(jacobsthal_num $(( $1 - 2 ))) ))\n    fi",
    "    local n=$1\n    local i=0\n    local jacobsthal=0\n    local jacobsthal_prev=0\n    local jacobsthal_prev_prev=0\n\n    while [ $i -lt $n ]; do\n        if [ $i -eq 0 ]; then\n            jacobsthal=0\n        elif [ $i -eq 1 ]; then\n            jacobsthal=1\n        else\n            jacobsthal=$((jacobsthal_prev + 2 * jacobsthal_prev_prev))\n        fi\n        jacobsthal_prev_prev=$jacobsthal_prev\n        jacobsthal_prev=$jacobsthal\n        i=$((i + 1))\n    done\n    echo $jacobsthal"
  ]
}