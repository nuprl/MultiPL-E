{
  "name": "mbpp_751_check_min_heap",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n#\n# $1 is a space-separated list\ncheck_min_heap() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    check_min_heap \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"2 3 4 5 10 15\") = \"true\" ]]\n    [[ $(candidate \"2 10 4 5 3 15\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=1; i<n; i++))\n    do\n        if [[ ${arr[$((i-1))]} -gt ${arr[$i]} ]]\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local i=0\n    local len=${#array[@]}\n    local parent=0\n    local left=0\n    local right=0\n    local is_min_heap=1\n\n    while [[ $i -lt $len ]]; do\n        parent=$i\n        left=$((2*parent + 1))\n        right=$((2*parent + 2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${array[$parent]} -gt ${array[$left]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${array[$parent]} -gt ${array[$right]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [[ $is_min_heap -eq 1 ]]; then\n        echo \"Array is a min heap\"\n    else\n        echo \"Array is not a min heap\"\n    fi",
    "    local -a arr\n    arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left<n && arr[i]>arr[left])) || ((right<n && arr[i]>arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n\n    while ((i < n))\n    do\n        left=$((2*i + 1))\n        right=$((2*i + 2))\n        if ((left < n && array[i] > array[left]))\n        then\n            echo \"false\"\n            return\n        fi\n        if ((right < n && array[i] > array[right]))\n        then\n            echo \"false\"\n            return\n        fi\n        ((i++))\n    done\n    echo \"true\"",
    "  local -a array=(\"$@\")\n  local -i i=0\n  local -i n=${#array[@]}\n  local -i parent=0\n  local -i left=0\n  local -i right=0\n  local -i last_parent=0\n  local -i last_left=0\n  local -i last_right=0\n  local -i last_parent_index=0\n  local -i last_left_index=0\n  local -i last_right_index=0\n  local -i last_parent_value=0\n  local -i last_left_value=0\n  local -i last_right_value=0\n  local -i parent_value=0\n  local -i left_value=0\n  local -i right_value=0\n  local -i parent_index=0\n  local -i left_index=0\n  local -i right_index=0\n  local -i is_min_heap=1\n  local -i is_last_parent=0\n  local -i is_last_left=0\n  local -i is_last_right=0\n  local -i is_last_parent_value=0\n  local -i is_last_left_value=0\n  local -i is_last_right_value=0\n  local -i is_parent_value=0\n  local -i is_left_value=0\n  local -i is_right_value=0\n  local -i is_parent_index=0\n  local -i is_left_index=0\n  local -i is_right_index=0\n  local -i is_parent=0\n  local -i is_left=0\n  local -i is_right=0\n\n  for ((i=0; i<n; i++)); do\n    parent_index=$((i-1))\n    left_index=$((2*i+1))\n    right_index=$((2*i+2))\n    parent_value=${array[$parent_index]}\n    left_value=${array[$left_index]}\n    right_value=${array[$right_index]}\n    is_parent_",
    "  local heap=($1)\n  local size=${#heap[@]}\n  local i\n  for ((i = 0; i < size; i++)); do\n    local left=$((2 * i + 1))\n    local right=$((2 * i + 2))\n    if [[ $left -lt $size && ${heap[$i]} -gt ${heap[$left]} ]]; then\n      return 1\n    fi\n    if [[ $right -lt $size && ${heap[$i]} -gt ${heap[$right]} ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local left_child right_child\n    while ((i < n))\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if ((left_child < n && arr[i] > arr[left_child]))\n        then\n            echo \"Not a min heap\"\n            return 1\n        fi\n        if ((right_child < n && arr[i] > arr[right_child]))\n        then\n            echo \"Not a min heap\"\n            return 1\n        fi\n        ((i++))\n    done\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=($1)\n    local -i i=0\n    local -i n=${#arr[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    for ((i=1; i<n; i++))\n    do\n        parent=$((i-1))\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n        if [[ $left -lt $n && ${arr[$parent]} -gt ${arr[$left]} ]]\n        then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$parent]} -gt ${arr[$right]} ]]\n        then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=(\"$@\")\n    local i=0\n    local size=${#arr[@]}\n    local parent_index=0\n    local left_child_index=0\n    local right_child_index=0\n    local is_min_heap=1\n\n    while [[ $i -lt $size ]]; do\n        parent_index=$i\n        left_child_index=$((2 * $parent_index + 1))\n        right_child_index=$((2 * $parent_index + 2))\n\n        if [[ $left_child_index -lt $size ]]; then\n            if [[ ${arr[$parent_index]} -gt ${arr[$left_child_index]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n\n        if [[ $right_child_index -lt $size ]]; then\n            if [[ ${arr[$parent_index]} -gt ${arr[$right_child_index]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n\n    while [ $i -lt $len ]; do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        parent=$i\n\n        if [ $left -lt $len ] && [ ${arr[$left]} -lt ${arr[$parent]} ]; then\n            return 1\n        fi\n\n        if [ $right -lt $len ] && [ ${arr[$right]} -lt ${arr[$parent]} ]; then\n            return 1\n        fi\n\n        i=$((i + 1))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n\n    for ((i=0; i<len; i++)); do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [[ $left_child -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right_child -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local l=0\n    local r=0\n    local largest=0\n    local flag=0\n\n    for ((i=0; i<n; i++))\n    do\n        l=$((2*i+1))\n        r=$((2*i+2))\n\n        if [ $l -lt $n ] && [ ${arr[$l]} -gt ${arr[$i]} ]\n        then\n            largest=$l\n        else\n            largest=$i\n        fi\n\n        if [ $r -lt $n ] && [ ${arr[$r]} -gt ${arr[$largest]} ]\n        then\n            largest=$r\n        fi\n\n        if [ $largest -ne $i ]\n        then\n            flag=1\n            break\n        fi\n    done\n\n    if [ $flag -eq 1 ]\n    then\n        echo \"Not a min heap\"\n    else\n        echo \"Min heap\"\n    fi",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i\n  for ((i=0; i<len; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if ((left < len)); then\n      if ((arr[i] > arr[left])); then\n        echo \"Not a min heap\"\n        return 1\n      fi\n    fi\n    if ((right < len)); then\n      if ((arr[i] > arr[right])); then\n        echo \"Not a min heap\"\n        return 1\n      fi\n    fi\n  done\n  echo \"Is a min heap\"\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local l=${#arr[@]}\n    local parent=0\n    local left=0\n    local right=0\n    local res=1\n\n    while [ $i -lt $l ]; do\n        parent=$i\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n\n        if [ $left -lt $l ]; then\n            if [ ${arr[$parent]} -gt ${arr[$left]} ]; then\n                res=0\n                break\n            fi\n        fi\n\n        if [ $right -lt $l ]; then\n            if [ ${arr[$parent]} -gt ${arr[$right]} ]; then\n                res=0\n                break\n            fi\n        fi\n\n        i=$((i+1))\n    done\n\n    echo $res",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local left=0\n  local right=0\n  local parent=0\n  local is_min_heap=1\n\n  while [ $i -lt $len ]; do\n    left=$((2*i+1))\n    right=$((2*i+2))\n    parent=$i\n    if [ $left -lt $len ] && [ ${arr[$left]} -lt ${arr[$parent]} ]; then\n      is_min_heap=0\n      break\n    fi\n    if [ $right -lt $len ] && [ ${arr[$right]} -lt ${arr[$parent]} ]; then\n      is_min_heap=0\n      break\n    fi\n    i=$((i+1))\n  done\n\n  if [ $is_min_heap -eq 1 ]; then\n    echo \"Array is a min heap\"\n  else\n    echo \"Array is not a min heap\"\n  fi",
    "    local -a array=($1)\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i last_parent=$((len / 2 - 1))\n    local -i left_child=0\n    local -i right_child=0\n\n    for ((i = 0; i <= last_parent; i++)); do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n        if [[ $left_child -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$left_child]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right_child -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$right_child]} ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    local left\n    local right\n    local parent\n    for ((i=1; i<n; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i l=0\n    local -i r=0\n    local -i largest=0\n\n    for ((i=0; i<n; i++)); do\n        l=$((2*i+1))\n        r=$((2*i+2))\n        largest=$i\n        if [[ $l -lt $n && ${arr[$l]} -gt ${arr[$i]} ]]; then\n            largest=$l\n        fi\n        if [[ $r -lt $n && ${arr[$r]} -gt ${arr[$largest]} ]]; then\n            largest=$r\n        fi\n        if [[ $largest -ne $i ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local lc=0\n    local rc=0\n    local ret=0\n\n    for ((i=0; i<len; i++)); do\n        lc=$((2*i+1))\n        rc=$((2*i+2))\n        if [[ $lc -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$lc]} ]]; then\n                ret=1\n                break\n            fi\n        fi\n        if [[ $rc -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$rc]} ]]; then\n                ret=1\n                break\n            fi\n        fi\n    done\n\n    return $ret"
  ]
}