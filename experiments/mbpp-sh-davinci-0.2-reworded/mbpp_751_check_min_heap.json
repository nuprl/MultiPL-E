{
  "name": "mbpp_751_check_min_heap",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n#\n# $1 is a space-separated list\ncheck_min_heap() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    check_min_heap \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"2 3 4 5 10 15\") = \"true\" ]]\n    [[ $(candidate \"2 10 4 5 3 15\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=1; i<n; i++))\n    do\n        if [[ ${arr[$((i-1))]} -gt ${arr[$i]} ]]\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local i=0\n    local len=${#array[@]}\n    local parent=0\n    local left=0\n    local right=0\n    local is_min_heap=1\n\n    while [[ $i -lt $len ]]; do\n        parent=$i\n        left=$((2*parent + 1))\n        right=$((2*parent + 2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${array[$parent]} -gt ${array[$left]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${array[$parent]} -gt ${array[$right]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [[ $is_min_heap -eq 1 ]]; then\n        echo \"Array is a min heap\"\n    else\n        echo \"Array is not a min heap\"\n    fi",
    "    local -a arr\n    arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left<n && arr[i]>arr[left])) || ((right<n && arr[i]>arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n\n    while ((i < n))\n    do\n        left=$((2*i + 1))\n        right=$((2*i + 2))\n        if ((left < n && array[i] > array[left]))\n        then\n            echo \"false\"\n            return\n        fi\n        if ((right < n && array[i] > array[right]))\n        then\n            echo \"false\"\n            return\n        fi\n        ((i++))\n    done\n    echo \"true\"",
    "  local -a array=(\"$@\")\n  local -i i=0\n  local -i n=${#array[@]}\n  local -i parent=0\n  local -i left=0\n  local -i right=0\n  local -i last_parent=0\n  local -i last_left=0\n  local -i last_right=0\n  local -i last_parent_index=0\n  local -i last_left_index=0\n  local -i last_right_index=0\n  local -i last_parent_value=0\n  local -i last_left_value=0\n  local -i last_right_value=0\n  local -i parent_value=0\n  local -i left_value=0\n  local -i right_value=0\n  local -i parent_index=0\n  local -i left_index=0\n  local -i right_index=0\n  local -i is_min_heap=1\n  local -i is_last_parent=0\n  local -i is_last_left=0\n  local -i is_last_right=0\n  local -i is_last_parent_value=0\n  local -i is_last_left_value=0\n  local -i is_last_right_value=0\n  local -i is_parent_value=0\n  local -i is_left_value=0\n  local -i is_right_value=0\n  local -i is_parent_index=0\n  local -i is_left_index=0\n  local -i is_right_index=0\n  local -i is_parent=0\n  local -i is_left=0\n  local -i is_right=0\n\n  for ((i=0; i<n; i++)); do\n    parent_index=$((i-1))\n    left_index=$((2*i+1))\n    right_index=$((2*i+2))\n    parent_value=${array[$parent_index]}\n    left_value=${array[$left_index]}\n    right_value=${array[$right_index]}\n    is_parent_",
    "  local heap=($1)\n  local size=${#heap[@]}\n  local i\n  for ((i = 0; i < size; i++)); do\n    local left=$((2 * i + 1))\n    local right=$((2 * i + 2))\n    if [[ $left -lt $size && ${heap[$i]} -gt ${heap[$left]} ]]; then\n      return 1\n    fi\n    if [[ $right -lt $size && ${heap[$i]} -gt ${heap[$right]} ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local left_child right_child\n    while ((i < n))\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if ((left_child < n && arr[i] > arr[left_child]))\n        then\n            echo \"Not a min heap\"\n            return 1\n        fi\n        if ((right_child < n && arr[i] > arr[right_child]))\n        then\n            echo \"Not a min heap\"\n            return 1\n        fi\n        ((i++))\n    done\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=($1)\n    local -i i=0\n    local -i n=${#arr[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    for ((i=1; i<n; i++))\n    do\n        parent=$((i-1))\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n        if [[ $left -lt $n && ${arr[$parent]} -gt ${arr[$left]} ]]\n        then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$parent]} -gt ${arr[$right]} ]]\n        then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=(\"$@\")\n    local i=0\n    local size=${#arr[@]}\n    local parent_index=0\n    local left_child_index=0\n    local right_child_index=0\n    local is_min_heap=1\n\n    while [[ $i -lt $size ]]; do\n        parent_index=$i\n        left_child_index=$((2 * $parent_index + 1))\n        right_child_index=$((2 * $parent_index + 2))\n\n        if [[ $left_child_index -lt $size ]]; then\n            if [[ ${arr[$parent_index]} -gt ${arr[$left_child_index]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n\n        if [[ $right_child_index -lt $size ]]; then\n            if [[ ${arr[$parent_index]} -gt ${arr[$right_child_index]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n\n    while [ $i -lt $len ]; do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        parent=$i\n\n        if [ $left -lt $len ] && [ ${arr[$left]} -lt ${arr[$parent]} ]; then\n            return 1\n        fi\n\n        if [ $right -lt $len ] && [ ${arr[$right]} -lt ${arr[$parent]} ]; then\n            return 1\n        fi\n\n        i=$((i + 1))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n\n    for ((i=0; i<len; i++)); do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [[ $left_child -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right_child -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local l=0\n    local r=0\n    local largest=0\n    local flag=0\n\n    for ((i=0; i<n; i++))\n    do\n        l=$((2*i+1))\n        r=$((2*i+2))\n\n        if [ $l -lt $n ] && [ ${arr[$l]} -gt ${arr[$i]} ]\n        then\n            largest=$l\n        else\n            largest=$i\n        fi\n\n        if [ $r -lt $n ] && [ ${arr[$r]} -gt ${arr[$largest]} ]\n        then\n            largest=$r\n        fi\n\n        if [ $largest -ne $i ]\n        then\n            flag=1\n            break\n        fi\n    done\n\n    if [ $flag -eq 1 ]\n    then\n        echo \"Not a min heap\"\n    else\n        echo \"Min heap\"\n    fi",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i\n  for ((i=0; i<len; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if ((left < len)); then\n      if ((arr[i] > arr[left])); then\n        echo \"Not a min heap\"\n        return 1\n      fi\n    fi\n    if ((right < len)); then\n      if ((arr[i] > arr[right])); then\n        echo \"Not a min heap\"\n        return 1\n      fi\n    fi\n  done\n  echo \"Is a min heap\"\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local l=${#arr[@]}\n    local parent=0\n    local left=0\n    local right=0\n    local res=1\n\n    while [ $i -lt $l ]; do\n        parent=$i\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n\n        if [ $left -lt $l ]; then\n            if [ ${arr[$parent]} -gt ${arr[$left]} ]; then\n                res=0\n                break\n            fi\n        fi\n\n        if [ $right -lt $l ]; then\n            if [ ${arr[$parent]} -gt ${arr[$right]} ]; then\n                res=0\n                break\n            fi\n        fi\n\n        i=$((i+1))\n    done\n\n    echo $res",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local left=0\n  local right=0\n  local parent=0\n  local is_min_heap=1\n\n  while [ $i -lt $len ]; do\n    left=$((2*i+1))\n    right=$((2*i+2))\n    parent=$i\n    if [ $left -lt $len ] && [ ${arr[$left]} -lt ${arr[$parent]} ]; then\n      is_min_heap=0\n      break\n    fi\n    if [ $right -lt $len ] && [ ${arr[$right]} -lt ${arr[$parent]} ]; then\n      is_min_heap=0\n      break\n    fi\n    i=$((i+1))\n  done\n\n  if [ $is_min_heap -eq 1 ]; then\n    echo \"Array is a min heap\"\n  else\n    echo \"Array is not a min heap\"\n  fi",
    "    local -a array=($1)\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i last_parent=$((len / 2 - 1))\n    local -i left_child=0\n    local -i right_child=0\n\n    for ((i = 0; i <= last_parent; i++)); do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n        if [[ $left_child -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$left_child]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right_child -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$right_child]} ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    local left\n    local right\n    local parent\n    for ((i=1; i<n; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i l=0\n    local -i r=0\n    local -i largest=0\n\n    for ((i=0; i<n; i++)); do\n        l=$((2*i+1))\n        r=$((2*i+2))\n        largest=$i\n        if [[ $l -lt $n && ${arr[$l]} -gt ${arr[$i]} ]]; then\n            largest=$l\n        fi\n        if [[ $r -lt $n && ${arr[$r]} -gt ${arr[$largest]} ]]; then\n            largest=$r\n        fi\n        if [[ $largest -ne $i ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local lc=0\n    local rc=0\n    local ret=0\n\n    for ((i=0; i<len; i++)); do\n        lc=$((2*i+1))\n        rc=$((2*i+2))\n        if [[ $lc -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$lc]} ]]; then\n                ret=1\n                break\n            fi\n        fi\n        if [[ $rc -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$rc]} ]]; then\n                ret=1\n                break\n            fi\n        fi\n    done\n\n    return $ret",
    "    local -a array=($1)\n    local -i i=0\n    local -i len=${#array[@]}\n    local -i last_parent=$((len/2 - 1))\n    local -i left_child right_child\n    for ((i=0; i<=last_parent; i++)); do\n        left_child=$((2*i + 1))\n        right_child=$((2*i + 2))\n        if [[ ${array[$i]} -gt ${array[$left_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right_child -lt $len && ${array[$i]} -gt ${array[$right_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$left]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$right]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${array[$i]} -lt ${array[$parent]} ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n    done\n    echo \"Is a min heap\"\n    return 0",
    "    local -a array=($1)\n    local length=${#array[@]}\n    local i\n    for ((i=0; i<length; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $length && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $length && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a arr=(\"$@\")\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i left=0\n  local -i right=0\n  local -i parent=0\n  local -i ret=0\n\n  for ((i=1; i<len; i++)); do\n    left=$((2*i))\n    right=$((2*i+1))\n    parent=$((i/2))\n    if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n      ret=1\n      break\n    fi\n    if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n      ret=1\n      break\n    fi\n  done\n\n  return $ret",
    "    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local root=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i + 1))\n        right=$((2*i + 2))\n        root=${arr[i]}\n\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[left]} -lt $root ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[right]} -lt $root ]]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n    done\n\n    echo \"Min heap\"\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n\n    for ((i=0; i<=last_parent; i++)); do\n        if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n            return 1\n        fi\n        if [[ $((2*i+2)) -lt $n && ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "\tlocal -a arr=($1)\n\tlocal i\n\tfor ((i=0; i<${#arr[@]}; i++)); do\n\t\tlocal left=$((2*i+1))\n\t\tlocal right=$((2*i+2))\n\t\tif [[ $left -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$left]} ]]; then\n\t\t\treturn 1\n\t\tfi\n\t\tif [[ $right -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$right]} ]]; then\n\t\t\treturn 1\n\t\tfi\n\tdone\n\treturn 0",
    "    local -n arr=$1\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local left_child=0\n    local right_child=0\n    while [ $i -lt $n ]\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [ $left_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]\n        then\n            return 1\n        fi\n        if [ $right_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]\n        then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]\n    do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a array=($1)\n    local i\n    for ((i=0; i<${#array[@]}; i++)); do\n        local left_child=$((2*i+1))\n        local right_child=$((2*i+2))\n        if [[ $left_child -lt ${#array[@]} ]]; then\n            if [[ ${array[$i]} -gt ${array[$left_child]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $right_child -lt ${#array[@]} ]]; then\n            if [[ ${array[$i]} -gt ${array[$right_child]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\"",
    "    local -a arr\n    local -i i\n    local -i n\n    local -i left\n    local -i right\n    local -i parent\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=1; i<n; i++)); do\n        parent=$((i/2))\n        left=$((2*i))\n        right=$((2*i+1))\n        if [[ $parent -ge 1 && ${arr[$parent-1]} -gt ${arr[$i-1]} ]]; then\n            return 1\n        fi\n        if [[ $left -lt n && ${arr[$left-1]} -lt ${arr[$i-1]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt n && ${arr[$right-1]} -lt ${arr[$i-1]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    for i in $(seq 0 $(( ${#arr[@]} - 1 ))); do\n        local left=$(( 2 * i + 1 ))\n        local right=$(( 2 * i + 2 ))\n        if [[ $left -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n    local parent=0\n\n    while [ $i -lt $len ]; do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n        parent=$i\n\n        if [ $left_child -lt $len ] && [ ${arr[$left_child]} -lt ${arr[$parent]} ]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n\n        if [ $right_child -lt $len ] && [ ${arr[$right_child]} -lt ${arr[$parent]} ]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$left]} -lt ${arr[$i]} ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$right]} -lt ${arr[$i]} ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${arr[$i]} -lt ${arr[$parent]} ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local -a array=($1)\n    local i=0\n    local size=${#array[@]}\n    local last_parent=$((size / 2 - 1))\n    local left_child=$((i * 2 + 1))\n    local right_child=$((i * 2 + 2))\n\n    while [ $i -le $last_parent ]; do\n        if [ $left_child -lt $size ] && [ ${array[$i]} -gt ${array[$left_child]} ]; then\n            return 1\n        fi\n\n        if [ $right_child -lt $size ] && [ ${array[$i]} -gt ${array[$right_child]} ]; then\n            return 1\n        fi\n\n        i=$((i + 1))\n        left_child=$((i * 2 + 1))\n        right_child=$((i * 2 + 2))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]\n    do\n        local left=$((2 * $i + 1))\n        local right=$((2 * $i + 2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local last_parent=$((len / 2 - 1))\n    local left_child right_child\n    while [ $i -le $last_parent ]; do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n        if [ $left_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n            return 1\n        fi\n        if [ $right_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local left=0\n  local right=0\n  local parent=0\n\n  while [ $i -lt $len ]\n  do\n    parent=${arr[$i]}\n    left=$((2*i+1))\n    right=$((2*i+2))\n    if [ $left -lt $len ] && [ $parent -gt ${arr[$left]} ]\n    then\n      echo \"Not a min heap\"\n      return 1\n    fi\n    if [ $right -lt $len ] && [ $parent -gt ${arr[$right]} ]\n    then\n      echo \"Not a min heap\"\n      return 1\n    fi\n    i=$((i+1))\n  done\n  echo \"It is a min heap\"\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local last_parent=$((len/2 - 1))\n    local left_child\n    local right_child\n    while [[ $i -le $last_parent ]]; do\n        left_child=$((2*i + 1))\n        right_child=$((2*i + 2))\n        if [[ $left_child -lt $len ]] && [[ ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n            return 1\n        fi\n        if [[ $right_child -lt $len ]] && [[ ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr\n    arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i=0\n    local len=${#arr[@]}\n    local parent=$(((len-2)/2))\n    for ((i=0; i<=parent; i++)); do\n        if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n            return 1\n        fi\n        if [[ $((2*i+2)) -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while ((i < n))\n    do\n        if ((2*i+1 < n))\n        then\n            if ((arr[i] > arr[2*i+1]))\n            then\n                echo \"Not a min heap\"\n                return\n            fi\n        fi\n        if ((2*i+2 < n))\n        then\n            if ((arr[i] > arr[2*i+2]))\n            then\n                echo \"Not a min heap\"\n                return\n            fi\n        fi\n        ((i++))\n    done\n    echo \"Min heap\"",
    "    local -a arr\n    arr=($1)\n    local i\n    local l\n    local r\n    local n\n    n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        l=$((2*i+1))\n        r=$((2*i+2))\n        if [[ $l -lt $n && ${arr[$i]} -gt ${arr[$l]} ]]; then\n            return 1\n        fi\n        if [[ $r -lt $n && ${arr[$i]} -gt ${arr[$r]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n    local parent=0\n\n    while [ $i -lt $len ]\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        parent=$((i-1/2))\n\n        if [ $left_child -lt $len ] && [ ${arr[$left_child]} -lt ${arr[$i]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n\n        if [ $right_child -lt $len ] && [ ${arr[$right_child]} -lt ${arr[$i]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n\n        if [ $parent -ge 0 ] && [ ${arr[$i]} -lt ${arr[$parent]} ]\n        then\n            echo \"Not a min heap\"\n            return\n        fi\n\n        i=$((i+1))\n    done\n\n    echo \"Is a min heap\"",
    "    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < len && arr[i] > arr[left])) || ((right < len && arr[i] > arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -n arr=$1\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a array=($1)\n    local i=0\n    local len=${#array[@]}\n    local parent=0\n    local left=0\n    local right=0\n    local is_min_heap=1\n\n    while [ $i -lt $len ]; do\n        parent=$i\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n        if [ $left -lt $len ] && [ ${array[$parent]} -gt ${array[$left]} ]; then\n            is_min_heap=0\n            break\n        fi\n        if [ $right -lt $len ] && [ ${array[$parent]} -gt ${array[$right]} ]; then\n            is_min_heap=0\n            break\n        fi\n        i=$((i+1))\n    done\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local -i i=0\n    local -i n=${#arr[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i last_parent=$((n / 2 - 1))\n    local -i last_leaf=$((n - 1))\n\n    for ((i = 0; i <= last_parent; i++)); do\n        parent=${arr[i]}\n        left=$((i * 2 + 1))\n        right=$((i * 2 + 2))\n\n        if [[ $left -le $last_leaf ]]; then\n            if [[ ${arr[$left]} -lt $parent ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $right -le $last_leaf ]]; then\n            if [[ ${arr[$right]} -lt $parent ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i/2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a array=(\"$@\")\n    local -i n=${#array[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=2*i+1\n        local -i right=2*i+2\n        if ((left < n && array[i] > array[left])) || ((right < n && array[i] > array[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local len=${#arr[@]}\n    local parent\n    local left_child\n    local right_child\n\n    for ((i=1; i<len; i++)); do\n        parent=$((i/2))\n        left_child=$((2*i))\n        right_child=$((2*i+1))\n\n        if [[ $left_child -lt $len && ${arr[$parent]} -gt ${arr[$left_child]} ]]; then\n            return 1\n        fi\n\n        if [[ $right_child -lt $len && ${arr[$parent]} -gt ${arr[$right_child]} ]]; then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -a a=($1)\n    local i=0\n    local n=${#a[@]}\n    local j=0\n    local left=0\n    local right=0\n    local parent=0\n    local min_heap=1\n\n    for ((i=0; i<n; i++))\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $n ]]\n        then\n            if [[ ${a[$i]} -gt ${a[$left]} ]]\n            then\n                min_heap=0\n                break\n            fi\n        fi\n        if [[ $right -lt $n ]]\n        then\n            if [[ ${a[$i]} -gt ${a[$right]} ]]\n            then\n                min_heap=0\n                break\n            fi\n        fi\n    done\n    echo $min_heap",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n    local parent=0\n\n    for ((i=0; i<len; i++))\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        parent=$((i/2))\n\n        if [ $left_child -lt $len ] && [ $right_child -lt $len ]\n        then\n            if [ ${arr[$i]} -gt ${arr[$left_child]} ] || [ ${arr[$i]} -gt ${arr[$right_child]} ]\n            then\n                echo \"Not a min heap\"\n                return\n            fi\n        elif [ $left_child -lt $len ] && [ $right_child -ge $len ]\n        then\n            if [ ${arr[$i]} -gt ${arr[$left_child]} ]\n            then\n                echo \"Not a min heap\"\n                return\n            fi\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]\n    do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    while [ $i -lt $len ]; do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i/2))\n\n        if [ $left -lt $len ] && [ ${array[$left]} -lt ${array[$i]} ]; then\n            return 1\n        fi\n\n        if [ $right -lt $len ] && [ ${array[$right]} -lt ${array[$i]} ]; then\n            return 1\n        fi\n\n        if [ $i -ne 0 ] && [ ${array[$i]} -lt ${array[$parent]} ]; then\n            return 1\n        fi\n\n        i=$((i+1))\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local i\n    local len=${#arr[@]}\n    local last_parent_index=$((len / 2 - 1))\n    for ((i=0; i<=last_parent_index; i++)); do\n        local left_child_index=$((2 * i + 1))\n        local right_child_index=$((2 * i + 2))\n        if [[ $left_child_index -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left_child_index]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $right_child_index -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right_child_index]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n    while [ $i -lt $len ]\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [ $left -lt $len ]\n        then\n            if [ ${arr[$i]} -gt ${arr[$left]} ]\n            then\n                return 1\n            fi\n        fi\n        if [ $right -lt $len ]\n        then\n            if [ ${arr[$i]} -gt ${arr[$right]} ]\n            then\n                return 1\n            fi\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n    for ((i=1; i<n; i++))\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if ((left < n && array[i] > array[left]))\n        then\n            return 1\n        fi\n        if ((right < n && array[i] > array[right]))\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local array=($1)\n    local length=${#array[@]}\n\n    for ((i=0; i<length; i++))\n    do\n        local left_child=$((2*i + 1))\n        local right_child=$((2*i + 2))\n\n        if [[ $left_child -lt $length ]] && [[ ${array[$i]} -gt ${array[$left_child]} ]]\n        then\n            echo \"false\"\n            return\n        fi\n\n        if [[ $right_child -lt $length ]] && [[ ${array[$i]} -gt ${array[$right_child]} ]]\n        then\n            echo \"false\"\n            return\n        fi\n    done\n\n    echo \"true\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i/2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\"",
    "    local arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n    local parent=0\n    local is_min_heap=1\n\n    while [ $i -lt $len ]\n    do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        parent=$i\n\n        if [ $left_child -lt $len ]\n        then\n            if [ ${arr[$left_child]} -lt ${arr[$parent]} ]\n            then\n                is_min_heap=0\n                break\n            fi\n        fi\n\n        if [ $right_child -lt $len ]\n        then\n            if [ ${arr[$right_child]} -lt ${arr[$parent]} ]\n            then\n                is_min_heap=0\n                break\n            fi\n        fi\n\n        i=$((i+1))\n    done\n\n    if [ $is_min_heap -eq 1 ]\n    then\n        echo \"The given array is a min heap\"\n    else\n        echo \"The given array is not a min heap\"\n    fi",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i i=0\n    local -i n=${#array[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n\n    for ((i=1; i<n; i++))\n    do\n        parent=$(((i-1)/2))\n        left=$((2*i+1))\n        right=$((2*i+2))\n\n        if ((array[i] < array[parent]))\n        then\n            return 1\n        fi\n\n        if ((left < n && array[i] > array[left]))\n        then\n            return 1\n        fi\n\n        if ((right < n && array[i] > array[right]))\n        then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -a array=(\"$@\")\n    local -i n=${#array[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if [[ $left -lt $n && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i\n    local len=${#arr[@]}\n    local last_parent=$((len / 2 - 1))\n    for ((i = 0; i <= last_parent; i++)); do\n        local left_child=$((2 * i + 1))\n        local right_child=$((2 * i + 2))\n        if [[ $left_child -lt $len && ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n            return 1\n        fi\n        if [[ $right_child -lt $len && ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i\n    for ((i=0; i<n; i++)); do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if [[ $left -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i i=0\n    local -i n=${#arr[@]}\n    local -i parent=0\n    local -i left_child=0\n    local -i right_child=0\n    for ((i=1; i<n; i++)); do\n        parent=$((i-1))\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [[ $left_child -lt $n && ${arr[$parent]} -gt ${arr[$left_child]} ]]; then\n            return 1\n        fi\n        if [[ $right_child -lt $n && ${arr[$parent]} -gt ${arr[$right_child]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local i=0\n    local size=${#array[@]}\n    local last_parent=$((size / 2 - 1))\n    local left_child right_child\n\n    while [ $i -le $last_parent ]; do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n\n        if [ ${array[$i]} -gt ${array[$left_child]} ]; then\n            echo \"false\"\n            return\n        fi\n\n        if [ $right_child -lt $size ] && [ ${array[$i]} -gt ${array[$right_child]} ]; then\n            echo \"false\"\n            return\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo \"true\"",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a array=(\"$@\")\n    local n=${#array[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a a=($1)\n  local n=${#a[@]}\n  local i\n  for ((i=1; i<n; i++)); do\n    if ((a[i] < a[(i-1)/2])); then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a array=($1)\n    local n=${#array[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        if [ $((2*i+1)) -lt $n ] && [ ${array[$i]} -gt ${array[$((2*i+1))]} ]; then\n            return 1\n        fi\n        if [ $((2*i+2)) -lt $n ] && [ ${array[$i]} -gt ${array[$((2*i+2))]} ]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr\n    read -ra arr <<< \"$1\"\n    local n=${#arr[@]}\n    local i\n    for ((i = 1; i < n; i++)); do\n        local parent=$((i - 1))\n        if [[ ${arr[parent]} -gt ${arr[i]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local array=($1)\n    local n=${#array[@]}\n    local i=0\n    local left=0\n    local right=0\n\n    while [ $i -lt $n ]\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n\n        if [ $left -lt $n ] && [ ${array[$i]} -gt ${array[$left]} ]\n        then\n            return 1\n        fi\n\n        if [ $right -lt $n ] && [ ${array[$i]} -gt ${array[$right]} ]\n        then\n            return 1\n        fi\n\n        i=$((i+1))\n    done\n\n    return 0",
    "    local -a array=($1)\n    local -i len=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n    local -i result=0\n\n    for ((i=0; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n        if [[ $left -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$left]} ]]; then\n                result=1\n                break\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${array[$i]} -gt ${array[$right]} ]]; then\n                result=1\n                break\n            fi\n        fi\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${array[$i]} -lt ${array[$parent]} ]]; then\n                result=1\n                break\n            fi\n        fi\n    done\n    echo $result",
    "  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i=0\n  local -i left=0\n  local -i right=0\n  local -i parent=0\n\n  for ((i=1; i<n; i++))\n  do\n    left=$((2*i))\n    right=$((2*i+1))\n\n    # If left child is greater, return false\n    if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]\n    then\n      echo \"false\"\n      return\n    fi\n\n    # If right child is greater, return false\n    if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]\n    then\n      echo \"false\"\n      return\n    fi\n  done\n\n  echo \"true\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n\n    for ((i=1; i<len; i++)); do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1/2))\n        if [[ $left -lt $len && ${arr[$left]} -lt ${arr[$parent]} ]]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$right]} -lt ${arr[$parent]} ]]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n    done\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child_index=0\n    local right_child_index=0\n    local left_child=0\n    local right_child=0\n    local parent=0\n    for ((i=0; i<len; i++)); do\n        left_child_index=$((2*i+1))\n        right_child_index=$((2*i+2))\n        if [[ $left_child_index -lt $len ]]; then\n            left_child=${arr[$left_child_index]}\n        else\n            left_child=0\n        fi\n        if [[ $right_child_index -lt $len ]]; then\n            right_child=${arr[$right_child_index]}\n        else\n            right_child=0\n        fi\n        parent=${arr[$i]}\n        if [[ $parent -gt $left_child ]]; then\n            return 1\n        fi\n        if [[ $parent -gt $right_child ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a heap=($1)\n    local i\n    local n=${#heap[@]}\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n ]]; then\n            if [[ ${heap[$i]} -gt ${heap[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt $n ]]; then\n            if [[ ${heap[$i]} -gt ${heap[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n    local left_child=$((2*i+1))\n    local right_child=$((2*i+2))\n    while [ $i -le $last_parent ]; do\n        if [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n            return 1\n        fi\n        if [ $right_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n            return 1\n        fi\n        i=$((i+1))\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i=0\n    local n=${#arr[@]}\n    local parent_idx=0\n    local left_child_idx=0\n    local right_child_idx=0\n\n    for ((i=1; i<n; i++)); do\n        parent_idx=$((i-1))\n        left_child_idx=$((2*i+1))\n        right_child_idx=$((2*i+2))\n\n        if [[ $left_child_idx -lt $n ]]; then\n            if [[ ${arr[$parent_idx]} -gt ${arr[$left_child_idx]} ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $right_child_idx -lt $n ]]; then\n            if [[ ${arr[$parent_idx]} -gt ${arr[$right_child_idx]} ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local array=($1)\n    local i=0\n    local len=${#array[@]}\n    local left_child=0\n    local right_child=0\n    while (( i < len )); do\n        left_child=$(( 2 * i + 1 ))\n        right_child=$(( 2 * i + 2 ))\n        if (( left_child < len )); then\n            if (( array[i] > array[left_child] )); then\n                return 1\n            fi\n        fi\n        if (( right_child < len )); then\n            if (( array[i] > array[right_child] )); then\n                return 1\n            fi\n        fi\n        (( i++ ))\n    done\n    return 0",
    "  local -a arr=($1)\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i last_parent=$((len / 2 - 1))\n  local -i left_child right_child\n\n  while [ $i -le $last_parent ]; do\n    left_child=$((2 * i + 1))\n    right_child=$((2 * i + 2))\n\n    if [ $left_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n      echo \"false\"\n      return\n    fi\n\n    if [ $right_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n      echo \"false\"\n      return\n    fi\n\n    ((i++))\n  done\n\n  echo \"true\"",
    "  local -a arr=($1)\n  local n=${#arr[@]}\n\n  for ((i=0; i<n; i++))\n  do\n    if [[ $((2*i+1)) -lt $n ]]\n    then\n      if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]\n      then\n        return 1\n      fi\n    fi\n\n    if [[ $((2*i+2)) -lt $n ]]\n    then\n      if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]\n      then\n        return 1\n      fi\n    fi\n  done\n\n  return 0",
    "    local -a array=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i is_min_heap=1\n\n    for ((i=0; i<n; i++))\n    do\n        parent=${array[$i]}\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $n ]] && [[ $parent -gt ${array[$left]} ]]\n        then\n            is_min_heap=0\n            break\n        fi\n        if [[ $right -lt $n ]] && [[ $parent -gt ${array[$right]} ]]\n        then\n            is_min_heap=0\n            break\n        fi\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"Not a min heap\"\n            return\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"Not a min heap\"\n            return\n        fi\n    done\n    echo \"Min heap\"",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    local parent\n    local left_child\n    local right_child\n    for ((i=1; i<n; i++)); do\n        parent=$((i/2))\n        left_child=$((2*i))\n        right_child=$((2*i+1))\n        if [[ $parent -gt 0 && ${arr[$parent]} -gt ${arr[$i]} ]]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n        if [[ $left_child -lt n && ${arr[$left_child]} -lt ${arr[$i]} ]]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n        if [[ $right_child -lt n && ${arr[$right_child]} -lt ${arr[$i]} ]]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n    done\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((2*i+1 < ${#arr[@]})); then\n            if ((arr[i] > arr[2*i+1])); then\n                return 1\n            fi\n        fi\n        if ((2*i+2 < ${#arr[@]})); then\n            if ((arr[i] > arr[2*i+2])); then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local i=0\n  local len=${#arr[@]}\n  local last_parent=$((len / 2 - 1))\n  while [ $i -le $last_parent ]; do\n    local left_child=$((2 * i + 1))\n    local right_child=$((2 * i + 2))\n    if [ $left_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n      return 1\n    fi\n    if [ $right_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n      return 1\n    fi\n    i=$((i + 1))\n  done\n  return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=1; i<n; i++)); do\n        local p=$((i/2))\n        if [[ ${arr[$p]} -gt ${arr[$i]} ]]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n    done\n    echo \"Is a min heap\"\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a array\n    local -i i\n    local -i n\n    local -i left\n    local -i right\n    local -i parent\n    local -i result\n\n    array=($1)\n    n=${#array[@]}\n    result=1\n\n    for ((i=1; i<n; i++)); do\n        parent=$((i/2))\n        left=$((2*i))\n        right=$((2*i+1))\n\n        if [[ $left -lt $n && ${array[$parent]} -gt ${array[$left]} ]]; then\n            result=0\n            break\n        fi\n\n        if [[ $right -lt $n && ${array[$parent]} -gt ${array[$right]} ]]; then\n            result=0\n            break\n        fi\n    done\n\n    echo $result",
    "    local array=($1)\n    local n=${#array[@]}\n    local i\n    for ((i=1; i<n; i++)); do\n        local parent=$((i-1))\n        if ((array[parent] > array[i])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        if [[ $((2*i+1)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i=0\n  local left=0\n  local right=0\n  local parent=0\n  for ((i=1; i<len; i++))\n  do\n    left=$((2*i))\n    right=$((2*i+1))\n    parent=$((i/2))\n    if [ $left -lt $len ] && [ ${arr[$left]} -lt ${arr[$parent]} ]\n    then\n      echo \"Not a min heap\"\n      return\n    fi\n    if [ $right -lt $len ] && [ ${arr[$right]} -lt ${arr[$parent]} ]\n    then\n      echo \"Not a min heap\"\n      return\n    fi\n  done\n  echo \"It is a min heap\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right -lt $n ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array\n    local i\n    local left\n    local right\n    local parent\n\n    array=($1)\n    for ((i=1; i<${#array[@]}; i++)); do\n        left=$((2 * i))\n        right=$((2 * i + 1))\n        parent=$((i / 2))\n        if [[ $left -lt ${#array[@]} ]] && [[ ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt ${#array[@]} ]] && [[ ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local l\n    local r\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        l=$((2*i+1))\n        r=$((2*i+2))\n        if [[ $l -lt $n && ${arr[$i]} -gt ${arr[$l]} ]]; then\n            return 1\n        fi\n        if [[ $r -lt $n && ${arr[$i]} -gt ${arr[$r]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n    while [ $i -le $last_parent ]; do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            echo \"false\"\n            return\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local parent=0\n    local left=0\n    local right=0\n    while [ $i -lt $len ]; do\n        parent=$i\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n        if [ $left -lt $len ]; then\n            if [ ${arr[$parent]} -gt ${arr[$left]} ]; then\n                return 1\n            fi\n        fi\n        if [ $right -lt $len ]; then\n            if [ ${arr[$parent]} -gt ${arr[$right]} ]; then\n                return 1\n            fi\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i\n  for ((i=0; i<len; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if [[ $left -lt $len ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$left]} ]]; then\n        return 1\n      fi\n    fi\n    if [[ $right -lt $len ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$right]} ]]; then\n        return 1\n      fi\n    fi\n  done\n  return 0",
    "    local -a arr=(\"$@\")\n    local i\n    local n=${#arr[@]}\n    for ((i=1; i<n; i++)); do\n        if ((arr[i] < arr[(i-1)/2])); then\n            echo \"Not a min heap\"\n            return 1\n        fi\n    done\n    echo \"Min heap\"\n    return 0",
    "  local -a array=($1)\n  local size=${#array[@]}\n  local i\n  for ((i=0; i<size; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if [[ $left -lt $size ]]; then\n      if [[ ${array[$i]} -gt ${array[$left]} ]]; then\n        return 1\n      fi\n    fi\n    if [[ $right -lt $size ]]; then\n      if [[ ${array[$i]} -gt ${array[$right]} ]]; then\n        return 1\n      fi\n    fi\n  done\n  return 0",
    "  local -a arr=($1)\n  local -i i=0\n  local -i n=${#arr[@]}\n  local -i parent=0\n  local -i left=0\n  local -i right=0\n  while [ $i -lt $n ]\n  do\n    parent=$i\n    left=$((2*parent+1))\n    right=$((2*parent+2))\n    if [ $left -lt $n ] && [ ${arr[$parent]} -gt ${arr[$left]} ]\n    then\n      echo \"Not a min heap\"\n      return\n    fi\n    if [ $right -lt $n ] && [ ${arr[$parent]} -gt ${arr[$right]} ]\n    then\n      echo \"Not a min heap\"\n      return\n    fi\n    i=$((i+1))\n  done\n  echo \"Min heap\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n\n    while [ $i -lt $len ]; do\n        left=$((2*i + 1))\n        right=$((2*i + 2))\n\n        if [ $left -lt $len ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            return 1\n        fi\n\n        if [ $right -lt $len ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            return 1\n        fi\n\n        i=$((i + 1))\n    done\n\n    return 0",
    "  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i=0\n  local -i left=0\n  local -i right=0\n  local -i last_parent=$((n/2-1))\n  local -i parent=0\n  local -i min=0\n  local -i min_index=0\n\n  for ((i=0; i<=last_parent; i++)); do\n    left=$((2*i+1))\n    right=$((2*i+2))\n    min=${arr[i]}\n    min_index=$i\n    if [[ $left -lt $n ]]; then\n      if [[ ${arr[$left]} -lt $min ]]; then\n        min=${arr[$left]}\n        min_index=$left\n      fi\n    fi\n    if [[ $right -lt $n ]]; then\n      if [[ ${arr[$right]} -lt $min ]]; then\n        min=${arr[$right]}\n        min_index=$right\n      fi\n    fi\n    if [[ $min_index -ne $i ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a array=($1)\n    local i\n    for ((i=0; i<${#array[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt ${#array[@]} && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt ${#array[@]} && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    local last_parent=$((n / 2 - 1))\n    for ((i = 0; i <= last_parent; i++)); do\n        if [[ ${arr[$i]} -gt ${arr[$((2 * i + 1))]} ||\n              ${arr[$i]} -gt ${arr[$((2 * i + 2))]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=1; i<n; i++)); do\n        local parent=$((i-1))\n        if [[ $((parent/2)) -ge 0 ]] && [[ ${arr[$parent]} -gt ${arr[$((parent/2))]} ]]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n    done\n    echo \"Min heap\"\n    return 0",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        if [[ $((i*2+1)) -lt ${#arr[@]} ]] && [[ ${arr[$i]} -gt ${arr[$((i*2+1))]} ]]\n        then\n            return 1\n        fi\n        if [[ $((i*2+2)) -lt ${#arr[@]} ]] && [[ ${arr[$i]} -gt ${arr[$((i*2+2))]} ]]\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n\n    while [ $i -lt $len ]; do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        if [ $left -lt $len ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            return 1\n        fi\n        if [ $right -lt $len ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local len=${#arr[@]}\n    local i\n    for ((i=1; i<len; i++))\n    do\n        local parent=$((i-1))\n        if ((arr[parent] > arr[i]))\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left=0\n    local right=0\n    local parent=0\n    local is_min_heap=1\n\n    while [ $i -lt $len ]; do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=${arr[$i]}\n        if [ $left -lt $len ]; then\n            if [ $parent -gt ${arr[$left]} ]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        if [ $right -lt $len ]; then\n            if [ $parent -gt ${arr[$right]} ]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    echo $is_min_heap",
    "    local -a array=($1)\n    local i\n    for ((i=0; i<${#array[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#array[@]} ]]; then\n            if [[ ${array[$i]} -gt ${array[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt ${#array[@]} ]]; then\n            if [[ ${array[$i]} -gt ${array[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n    local -i flag=0\n\n    for ((i=1; i<n; i++))\n    do\n        left=2*i+1\n        right=2*i+2\n        parent=$((i-1))/2\n\n        if [ $left -lt $n ] && [ ${array[$left]} -lt ${array[$parent]} ]\n        then\n            flag=1\n        fi\n\n        if [ $right -lt $n ] && [ ${array[$right]} -lt ${array[$parent]} ]\n        then\n            flag=1\n        fi\n    done\n\n    if [ $flag -eq 0 ]\n    then\n        echo \"Given array is a min heap\"\n    else\n        echo \"Given array is not a min heap\"\n    fi",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ $((2*i+1)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $((2*i+2)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n                return 1\n            fi\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=(\"$@\")\n    local i\n    local size=${#array[@]}\n    local last_parent=$((size / 2 - 1))\n    for ((i=0; i<=last_parent; i++)); do\n        local left_child=$((2 * i + 1))\n        local right_child=$((2 * i + 2))\n        if [[ ${array[$i]} -gt ${array[$left_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ ${array[$i]} -gt ${array[$right_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n / 2 - 1))\n\n    for ((i = 0; i <= last_parent; i++)); do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i + 1))\n        local right=$((2*i + 2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n\n    for ((i=1; i<n; i++))\n    do\n        parent=$((i-1))\n        left=$((2*i+1))\n        right=$((2*i+2))\n\n        if [ $left -lt $n ] && [ ${array[$parent]} -gt ${array[$left]} ]\n        then\n            return 1\n        fi\n\n        if [ $right -lt $n ] && [ ${array[$parent]} -gt ${array[$right]} ]\n        then\n            return 1\n        fi\n    done\n\n    return 0",
    "    local -a arr=(\"$@\")\n    local i=0\n    local len=${#arr[@]}\n    local left_child right_child\n    while ((i < len))\n    do\n        left_child=$((2*i + 1))\n        right_child=$((2*i + 2))\n        if ((left_child < len))\n        then\n            if ((arr[i] > arr[left_child]))\n            then\n                return 1\n            fi\n        fi\n        if ((right_child < len))\n        then\n            if ((arr[i] > arr[right_child]))\n            then\n                return 1\n            fi\n        fi\n        ((i++))\n    done\n    return 0",
    "    local -a array=($1)\n    local -i i=0\n    local -i size=${#array[@]}\n    local -i last_parent=$((size / 2 - 1))\n    local -i left_child right_child\n\n    for ((i = 0; i <= last_parent; i++)); do\n        left_child=$((2 * i + 1))\n        right_child=$((2 * i + 2))\n        if [[ $left_child -lt $size && ${array[$i]} -gt ${array[$left_child]} ]]; then\n            return 1\n        fi\n        if [[ $right_child -lt $size && ${array[$i]} -gt ${array[$right_child]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    while [ $i -lt $((n/2)) ]; do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local last_parent=$((len / 2 - 1))\n    while [ $i -le $last_parent ]; do\n        local left_child=$((2 * i + 1))\n        local right_child=$((2 * i + 2))\n        if [ $left_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n            return 1\n        fi\n        if [ $right_child -lt $len ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "    local -a a=($1)\n    local i=0\n    local n=${#a[@]}\n    local last_parent=$((n/2-1))\n    while ((i <= last_parent)); do\n        if ((a[i] > a[2*i+1] || a[i] > a[2*i+2])); then\n            return 1\n        fi\n        ((i++))\n    done\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n    local -i is_min_heap=1\n\n    for ((i=1; i<n; i++))\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$((i-1))\n\n        if [ $left -lt $n ] && [ $right -lt $n ]\n        then\n            if [ ${array[$i]} -gt ${array[$left]} ] || [ ${array[$i]} -gt ${array[$right]} ]\n            then\n                is_min_heap=0\n                break\n            fi\n        elif [ $left -lt $n ]\n        then\n            if [ ${array[$i]} -gt ${array[$left]} ]\n            then\n                is_min_heap=0\n                break\n            fi\n        elif [ $right -lt $n ]\n        then\n            if [ ${array[$i]} -gt ${array[$right]} ]\n            then\n                is_min_heap=0\n                break\n            fi\n        fi\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child_index=0\n    local right_child_index=0\n    local parent_index=0\n    local parent=0\n    local left_child=0\n    local right_child=0\n\n    while [ $i -lt $len ]; do\n        parent=${arr[$i]}\n        left_child_index=$((2 * i + 1))\n        right_child_index=$((2 * i + 2))\n\n        if [ $left_child_index -lt $len ]; then\n            left_child=${arr[$left_child_index]}\n            if [ $left_child -lt $parent ]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n\n        if [ $right_child_index -lt $len ]; then\n            right_child=${arr[$right_child_index]}\n            if [ $right_child -lt $parent ]; then\n                echo \"Not a min heap\"\n                return 1\n            fi\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo \"It's a min heap\"\n    return 0",
    "  local -a arr=(\"$@\")\n  local i=0\n  local n=${#arr[@]}\n  local left_child=$((2*i+1))\n  local right_child=$((2*i+2))\n  local is_min_heap=1\n\n  while [ $i -lt $((n/2)) ]; do\n    if [ $left_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n      is_min_heap=0\n      break\n    fi\n    if [ $right_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n      is_min_heap=0\n      break\n    fi\n    i=$((i+1))\n    left_child=$((2*i+1))\n    right_child=$((2*i+2))\n  done\n\n  echo $is_min_heap",
    "    local -a arr=(\"$@\")\n    local i=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]\n    do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $n ] && [ ${arr[$i]} -gt ${arr[$left]} ]\n        then\n            return 1\n        fi\n        if [ $right -lt $n ] && [ ${arr[$i]} -gt ${arr[$right]} ]\n        then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i i=0\n    local -i len=${#arr[@]}\n    local -i last_parent=$((len/2-1))\n    local -i left_child=0\n    local -i right_child=0\n\n    for ((i=0; i<=last_parent; i++)); do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [[ $left_child -lt $len && ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n            return 1\n        fi\n        if [[ $right_child -lt $len && ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "\tlocal -a arr=($1)\n\tlocal n=${#arr[@]}\n\tlocal i\n\tfor ((i=0; i<n; i++)); do\n\t\tlocal l=$((2*i+1))\n\t\tlocal r=$((2*i+2))\n\t\tif ((l<n && arr[i]>arr[l])) || ((r<n && arr[i]>arr[r])); then\n\t\t\treturn 1\n\t\tfi\n\tdone\n\treturn 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local parent=0\n    local left=0\n    local right=0\n    local is_min_heap=1\n\n    while [ $i -lt $len ]\n    do\n        parent=$i\n        left=$((2 * $parent + 1))\n        right=$((2 * $parent + 2))\n\n        if [ $left -lt $len ] && [ ${arr[$parent]} -gt ${arr[$left]} ]\n        then\n            is_min_heap=0\n            break\n        fi\n\n        if [ $right -lt $len ] && [ ${arr[$parent]} -gt ${arr[$right]} ]\n        then\n            is_min_heap=0\n            break\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo $is_min_heap",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i = 1; i < n; i++)); do\n        if [[ ${arr[$((i - 1))]} -gt ${arr[$i]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n\n    for ((i=0; i<len; i++))\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n\n        if [[ $left -lt $len ]] && [[ ${arr[i]} -gt ${arr[left]} ]]\n        then\n            return 1\n        fi\n\n        if [[ $right -lt $len ]] && [[ ${arr[i]} -gt ${arr[right]} ]]\n        then\n            return 1\n        fi\n    done\n\n    return 0",
    "  local -a arr=($1)\n  local i\n  local n=${#arr[@]}\n  for ((i=0; i<n; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"true\"",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left_child=0\n    local right_child=0\n    local parent=0\n\n    for ((i=0; i<len; i++)); do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [[ $left_child -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n                return 1\n            fi\n        fi\n        if [[ $right_child -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "    local -a arr=(\"$@\")\n    local i\n    local n=${#arr[@]}\n    for ((i = 1; i < n; i++)); do\n        local parent=$((i - 1))\n        if [[ ${arr[$parent]} -gt ${arr[$i]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local array=($1)\n    local len=${#array[@]}\n    local i\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i l=0\n    local -i r=0\n\n    for ((i=0; i<len; i++)); do\n        l=$((2*i+1))\n        r=$((2*i+2))\n\n        if [[ $l -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$l]} ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $r -lt $len ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$r]} ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "  local -a arr=($1)\n  local len=${#arr[@]}\n  local i\n  for ((i=0; i<len; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n      return 1\n    fi\n    if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n\n    while [ $i -lt $len ]; do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        parent=$((i / 2))\n\n        if [ $left -lt $len ] && [ ${arr[$i]} -gt ${arr[$left]} ]; then\n            echo \"false\"\n            return\n        fi\n\n        if [ $right -lt $len ] && [ ${arr[$i]} -gt ${arr[$right]} ]; then\n            echo \"false\"\n            return\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo \"true\"",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ $((i*2+1)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((i*2+1))]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $((i*2+2)) -lt ${#arr[@]} ]]; then\n            if [[ ${arr[$i]} -gt ${arr[$((i*2+2))]} ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\"",
    "    local -a array=($1)\n    local i\n    local n=${#array[@]}\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < n && array[i] > array[left])) || ((right < n && array[i] > array[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr\n    arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)) do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local left_child=$((2*i+1))\n        local right_child=$((2*i+2))\n        if [[ $left_child -lt ${#arr[@]} ]] && [[ ${arr[$i]} -gt ${arr[$left_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right_child -lt ${#arr[@]} ]] && [[ ${arr[$i]} -gt ${arr[$right_child]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $len && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt $len && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local i\n    local len=${#array[@]}\n    local last_parent_index=$((len/2-1))\n    for ((i=0; i<=last_parent_index; i++)); do\n        local left_child_index=$((2*i+1))\n        local right_child_index=$((2*i+2))\n        if [[ $left_child_index -lt $len && ${array[$i]} -gt ${array[$left_child_index]} ]]; then\n            return 1\n        fi\n        if [[ $right_child_index -lt $len && ${array[$i]} -gt ${array[$right_child_index]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i\n  for ((i=0; i<n; i++)); do\n    if [[ $((2*i+1)) -lt $n ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$((2*i+1))]} ]]; then\n        return 1\n      fi\n    fi\n    if [[ $((2*i+2)) -lt $n ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$((2*i+2))]} ]]; then\n        return 1\n      fi\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n\n    for ((i=0; i<=last_parent; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n\n    echo \"true\"",
    "    local -a array=($1)\n    local i\n    local n=${#array[@]}\n    local parent_index\n    local left_child_index\n    local right_child_index\n    local parent\n    local left_child\n    local right_child\n\n    for ((i=0; i<n; i++)); do\n        parent_index=$((i/2))\n        left_child_index=$((2*i+1))\n        right_child_index=$((2*i+2))\n        parent=${array[$parent_index]}\n        left_child=${array[$left_child_index]}\n        right_child=${array[$right_child_index]}\n\n        if [[ $left_child_index -lt $n ]]; then\n            if [[ $left_child -lt $parent ]]; then\n                return 1\n            fi\n        fi\n\n        if [[ $right_child_index -lt $n ]]; then\n            if [[ $right_child -lt $parent ]]; then\n                return 1\n            fi\n        fi\n    done\n\n    return 0",
    "  local array=($1)\n  local n=${#array[@]}\n  local i\n  for ((i=0; i<n; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if [[ $left -lt $n && ${array[$i]} -gt ${array[$left]} ]]; then\n      return 1\n    fi\n    if [[ $right -lt $n && ${array[$i]} -gt ${array[$right]} ]]; then\n      return 1\n    fi\n  done\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2 - 1))\n    for ((i=0; i<=last_parent; i++)); do\n        if [[ ${arr[i]} -gt ${arr[2*i+1]} ]]; then\n            return 1\n        fi\n        if [[ ${arr[i]} -gt ${arr[2*i+2]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    while [ $i -lt $len ]; do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [ $left -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$left]} ]; then\n                return 1\n            fi\n        fi\n        if [ $right -lt $len ]; then\n            if [ ${arr[$i]} -gt ${arr[$right]} ]; then\n                return 1\n            fi\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a array=()\n    local -i i=0\n    local -i n=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    array=($1)\n    n=${#array[@]}\n    for ((i=1; i<n; i++))\n    do\n        parent=$((i-1))\n        left=$((2*parent+1))\n        right=$((2*parent+2))\n        if [[ $left -lt $n && ${array[$parent]} -gt ${array[$left]} ]]\n        then\n            return 1\n        fi\n        if [[ $right -lt $n && ${array[$parent]} -gt ${array[$right]} ]]\n        then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n\n    while ((i < len))\n    do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n\n        if ((left < len && arr[i] > arr[left]))\n        then\n            echo \"Not a min heap\"\n            return 1\n        fi\n\n        if ((right < len && arr[i] > arr[right]))\n        then\n            echo \"Not a min heap\"\n            return 1\n        fi\n\n        ((i++))\n    done\n\n    echo \"Is a min heap\"\n    return 0",
    "  local -a arr=($1)\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    local left=$((2*i+1))\n    local right=$((2*i+2))\n    if [[ $left -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$left]} ]]; then\n      echo \"Not a min heap\"\n      return\n    fi\n    if [[ $right -lt ${#arr[@]} && ${arr[$i]} -gt ${arr[$right]} ]]; then\n      echo \"Not a min heap\"\n      return\n    fi\n  done\n  echo \"Min heap\"",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local -i n=${#array[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n\n    while [ $i -lt $n ]; do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n\n        if [ $left -lt $n ] && [ ${array[$i]} -gt ${array[$left]} ]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n\n        if [ $right -lt $n ] && [ ${array[$i]} -gt ${array[$right]} ]; then\n            echo \"Not a min heap\"\n            return 1\n        fi\n\n        i=$((i + 1))\n    done\n\n    echo \"Min heap\"\n    return 0",
    "    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i\n    for ((i=0; i<n; i++)) do\n        local -i left=$((2*i+1))\n        local -i right=$((2*i+2))\n        if ((left < n && arr[i] > arr[left])) || ((right < n && arr[i] > arr[right])) then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=($1)\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local l=$((2*i+1))\n        local r=$((2*i+2))\n        if ((l<n && arr[i]>arr[l])) || ((r<n && arr[i]>arr[r])); then\n            return 1\n        fi\n    done\n    return 0",
    "    local arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local left=0\n    local right=0\n    local parent=0\n    while [ $i -lt $len ]\n    do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=${arr[$i]}\n        if [ $left -lt $len ]\n        then\n            if [ $parent -gt ${arr[$left]} ]\n            then\n                return 1\n            fi\n        fi\n        if [ $right -lt $len ]\n        then\n            if [ $parent -gt ${arr[$right]} ]\n            then\n                return 1\n            fi\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i left=0\n    local -i right=0\n    local -i parent=0\n    local -i is_min_heap=1\n\n    while [[ $i -lt $len ]]; do\n        left=$((2*i+1))\n        right=$((2*i+2))\n        parent=$i\n        if [[ $left -lt $len ]]; then\n            if [[ ${arr[$left]} -lt ${arr[$parent]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        if [[ $right -lt $len ]]; then\n            if [[ ${arr[$right]} -lt ${arr[$parent]} ]]; then\n                is_min_heap=0\n                break\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [[ $is_min_heap -eq 1 ]]; then\n        echo \"Array is a min heap\"\n    else\n        echo \"Array is not a min heap\"\n    fi",
    "\tlocal -a arr=($1)\n\tlocal n=${#arr[@]}\n\tlocal i\n\tfor ((i=0; i<n; i++)); do\n\t\tlocal left=$((2*i+1))\n\t\tlocal right=$((2*i+2))\n\t\tif [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n\t\t\treturn 1\n\t\tfi\n\t\tif [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n\t\t\treturn 1\n\t\tfi\n\tdone\n\treturn 0",
    "    local -a arr=($1)\n    local i=0\n    local len=${#arr[@]}\n    local left=0\n    local right=0\n    local parent=0\n\n    while ((i < len))\n    do\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        parent=$i\n\n        if ((left < len && arr[parent] > arr[left]))\n        then\n            return 1\n        fi\n\n        if ((right < len && arr[parent] > arr[right]))\n        then\n            return 1\n        fi\n\n        ((i++))\n    done\n\n    return 0",
    "    local -a a=($1)\n    local n=${#a[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local l=$((2*i+1))\n        local r=$((2*i+2))\n        if [[ $l -lt $n && ${a[$i]} -gt ${a[$l]} ]]; then\n            return 1\n        fi\n        if [[ $r -lt $n && ${a[$i]} -gt ${a[$r]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a arr=(\"$@\")\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n/2-1))\n    while [ $i -le $last_parent ]; do\n        local left_child=$((2*i+1))\n        local right_child=$((2*i+2))\n        if [ $left_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$left_child]} ]; then\n            return 1\n        fi\n        if [ $right_child -lt $n ] && [ ${arr[$i]} -gt ${arr[$right_child]} ]; then\n            return 1\n        fi\n        i=$((i+1))\n    done\n    return 0",
    "    local -a array=($1)\n    local i=0\n    local len=${#array[@]}\n    local last_parent=$((len/2-1))\n    local left_child right_child\n    while [ $i -le $last_parent ]; do\n        left_child=$((2*i+1))\n        right_child=$((2*i+2))\n        if [ $left_child -lt $len ] && [ ${array[$i]} -gt ${array[$left_child]} ]; then\n            echo \"false\"\n            return\n        fi\n        if [ $right_child -lt $len ] && [ ${array[$i]} -gt ${array[$right_child]} ]; then\n            echo \"false\"\n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"true\"",
    "    local -a arr=($1)\n    local i\n    local n=${#arr[@]}\n    for ((i=0; i<n; i++)); do\n        local l=$((2*i+1))\n        local r=$((2*i+2))\n        if [[ $l -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$l]} ]]; then\n            return 1\n        fi\n        if [[ $r -lt $n ]] && [[ ${arr[$i]} -gt ${arr[$r]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "    local -a array=($1)\n    local i\n    for ((i=0; i<${#array[@]}; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt ${#array[@]} && ${array[$i]} -gt ${array[$left]} ]]; then\n            return 1\n        fi\n        if [[ $right -lt ${#array[@]} && ${array[$i]} -gt ${array[$right]} ]]; then\n            return 1\n        fi\n    done\n    return 0",
    "  local -a arr=($1)\n  local i=0\n  local len=${#arr[@]}\n  local last_parent=$((len / 2 - 1))\n  local left_child=0\n  local right_child=0\n\n  while [[ $i -le $last_parent ]]; do\n    left_child=$((2 * i + 1))\n    right_child=$((2 * i + 2))\n    if [[ ${arr[i]} -gt ${arr[left_child]} ]] || [[ ${arr[i]} -gt ${arr[right_child]} ]]; then\n      echo \"Not a min heap\"\n      return 1\n    fi\n    ((i++))\n  done\n  echo \"Is a min heap\"\n  return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    local last_parent=$((n / 2 - 1))\n    while [ $i -le $last_parent ]; do\n        if [ ${arr[$i]} -gt ${arr[$((2 * i + 1))]} ]; then\n            return 1\n        fi\n        if [ $((2 * i + 2)) -lt $n ] && [ ${arr[$i]} -gt ${arr[$((2 * i + 2))]} ]; then\n            return 1\n        fi\n        i=$((i + 1))\n    done\n    return 0",
    "    local -a arr=($1)\n    local i=0\n    local n=${#arr[@]}\n    while ((i < n))\n    do\n        local left=$((2 * i + 1))\n        local right=$((2 * i + 2))\n        if ((left < n && arr[i] > arr[left]))\n        then\n            echo \"false\"\n            return\n        fi\n        if ((right < n && arr[i] > arr[right]))\n        then\n            echo \"false\"\n            return\n        fi\n        ((i++))\n    done\n    echo \"true\"",
    "    local -a arr=(\"$@\")\n    local n=${#arr[@]}\n    local i\n    for ((i=0; i<n; i++)); do\n        local left=$((2*i+1))\n        local right=$((2*i+2))\n        if [[ $left -lt $n && ${arr[$i]} -gt ${arr[$left]} ]]; then\n            echo \"false\"\n            return\n        fi\n        if [[ $right -lt $n && ${arr[$i]} -gt ${arr[$right]} ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"",
    "    local -a array=($1)\n    local -i i=0\n    local -i size=${#array[@]}\n    local -i parent=0\n    local -i left=0\n    local -i right=0\n    local -i last_parent=$((size / 2 - 1))\n    local -i last_leaf=$((size - 1))\n\n    for ((i=0; i<=last_parent; i++)); do\n        parent=${array[$i]}\n        left=$((2 * i + 1))\n        right=$((2 * i + 2))\n        if [[ $left -le $last_leaf ]]; then\n            if [[ ${array[$left]} -lt $parent ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n        if [[ $right -le $last_leaf ]]; then\n            if [[ ${array[$right]} -lt $parent ]]; then\n                echo \"false\"\n                return\n            fi\n        fi\n    done\n    echo \"true\""
  ]
}