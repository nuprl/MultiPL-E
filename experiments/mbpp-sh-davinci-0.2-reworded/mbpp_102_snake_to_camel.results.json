{
  "name": "mbpp_102_snake_to_camel",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local input=$1\n    local output=\"\"\n    local first_char=true\n\n    for word in $(echo \"$input\" | tr '_' ' '); do\n        if $first_char; then\n            output+=$(echo \"$word\" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2)) }')\n            first_char=false\n        else\n            output+=$(echo \"$word\" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2)) }')\n        fi\n    done\n\n    echo \"$output\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/([^_]+)_?/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest=\"\"\n\n    while [[ -n \"$str\" ]]; do\n        word=\"${str%%_*}\"\n        result=\"${result}${word}\"\n        str=\"${str#*_}\"\n        if [[ -n \"$str\" ]]; then\n            first_char=\"${word:0:1}\"\n            rest=\"${word:1}\"\n            result=\"${result}${first_char^^}${rest}\"\n        fi\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "<_io.BufferedReader name=11>",
      "stderr": "<_io.BufferedReader name=16>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local str=\"$1\"\n  local result=\"\"\n  local first=true\n  local word\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if $first; then\n      result=\"$word\"\n      first=false\n    else\n      result=\"$result$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n  local first_word=1\n\n  while [ -n \"$str\" ]; do\n    word=\"${str%%_*}\"\n    str=\"${str#*_}\"\n    if [ $first_word -eq 1 ]; then\n      result=\"$word\"\n      first_word=0\n    else\n      result=\"$result${word^}\"\n    fi\n  done\n\n  echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=18>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -E 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo $1 | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    # Split the string into an array of words\n    words=($(echo $1 | tr '_' ' '))\n\n    # Capitalize the first letter of each word\n    for word in \"${words[@]}\"; do\n        # Capitalize the first letter of the word\n        capitalized=\"$(echo ${word:0:1} | tr '[:lower:]' '[:upper:]')${word:1}\"\n\n        # Append the capitalized word to the camel case string\n        camel_case=\"${camel_case}${capitalized}\"\n    done\n\n    echo $camel_case\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local first_char=1\n\n    for word in $(echo \"$str\" | tr '_' ' '); do\n        if [ $first_char -eq 1 ]; then\n            result=\"$word\"\n            first_char=0\n        else\n            result=\"${result}$(echo \"$word\" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')\"\n        fi\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local snake_case=$1\n    local camel_case=${snake_case//_/}\n    echo ${camel_case^}\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -E 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    # Remove leading underscores\n    local str=\"${1#_}\"\n    # Replace underscores with spaces\n    str=\"${str//_/ }\"\n    # Capitalize each word\n    str=\"${str^}\"\n    # Remove spaces\n    str=\"${str// /}\"\n    echo \"$str\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n  local prev_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$i+1:1}\"\n    prev_char=\"${str:$i-1:1}\"\n\n    if [ \"$char\" = \"_\" ]; then\n      ((i++))\n      char=\"${str:$i:1}\"\n      char=$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\n    fi\n\n    result+=\"$char\"\n    ((i++))\n  done\n\n  echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n\n    while [[ \"$str\" =~ ([^_]*)_([^_]*) ]]; do\n        if [[ \"${BASH_REMATCH[1]}\" != \"\" ]]; then\n            result+=\"${BASH_REMATCH[1]:0:1}\"\n            result+=\"${BASH_REMATCH[1]:1}\"\n        fi\n        result+=\"${BASH_REMATCH[2]:0:1}\"\n        result+=\"${BASH_REMATCH[2]:1}\"\n        str=\"${str#*_}\"\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_[a-z])/\\U\\1/g' | sed -r 's/^([a-z])/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"${1//_/}\" | sed -r 's/^./\\L&/' | sed -r 's/_(.)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo $1 | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local first_char=1\n\n    while [ -n \"$str\" ]; do\n        local char=\"${str:0:1}\"\n        str=\"${str:1}\"\n\n        if [ \"$char\" = \"_\" ]; then\n            first_char=1\n            continue\n        fi\n\n        if [ $first_char -eq 1 ]; then\n            char=\"$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\"\n            first_char=0\n        fi\n\n        result=\"$result$char\"\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  # Replace all underscores with spaces\n  local snake_case=$(echo \"$1\" | sed 's/_/ /g')\n  # Capitalize the first letter of each word\n  local capitalized_snake_case=$(echo \"$snake_case\" | sed 's/\\b./\\U&/g')\n  # Remove all spaces\n  echo \"$capitalized_snake_case\" | sed 's/ //g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local str=\"$1\"\n  local result=\"\"\n  local first_char=true\n\n  for word in $(echo \"$str\" | tr '_' ' '); do\n    if $first_char; then\n      result+=\"$(tr '[:lower:]' '[:upper:]' <<< ${word:0:1})${word:1}\"\n      first_char=false\n    else\n      result+=\"$word\"\n    fi\n  done\n\n  echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_chars=\"\"\n    local first_char_upper=\"\"\n    local rest_chars_lower=\"\"\n\n    while [[ -n \"$str\" ]]; do\n        word=\"${str%%_*}\"\n        result=\"$result$word\"\n        str=\"${str#*_}\"\n        if [[ -n \"$str\" ]]; then\n            first_char=\"${word:0:1}\"\n            rest_chars=\"${word:1}\"\n            first_char_upper=\"$(echo \"$first_char\" | tr '[:lower:]' '[:upper:]')\"\n            rest_chars_lower=\"$(echo \"$rest_chars\" | tr '[:upper:]' '[:lower:]')\"\n            word=\"$first_char_upper$rest_chars_lower\"\n            result=\"$result$word\"\n        fi\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "<_io.BufferedReader name=12>",
      "stderr": "<_io.BufferedReader name=15>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -E 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"${1//_/}\" | sed -r 's/([^_])([A-Z])/\\1_\\2/g' | tr '[:upper:]' '[:lower:]'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$i+1:1}\"\n    if [ \"$char\" = \"_\" ]; then\n      char=\"${next_char^}\"\n      i=$((i+1))\n    fi\n    result+=\"$char\"\n    i=$((i+1))\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local string=\"$1\"\n  local result=\"\"\n  local first_char=true\n\n  while [[ -n \"$string\" ]]; do\n    local char=\"${string:0:1}\"\n    string=\"${string:1}\"\n\n    if [[ \"$char\" == \"_\" ]]; then\n      first_char=true\n    else\n      if $first_char; then\n        char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n        first_char=false\n      fi\n      result+=\"$char\"\n    fi\n  done\n\n  echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest=\"\"\n\n    for word in $(echo $str | tr '_' ' '); do\n        first_char=$(echo $word | cut -c1 | tr '[:lower:]' '[:upper:]')\n        rest=$(echo $word | cut -c2-)\n        result=\"$result$first_char$rest\"\n    done\n\n    echo $result\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local out=\"\"\n    local first_char=true\n    local i=0\n    local len=${#str}\n\n    while [ $i -lt $len ]; do\n        local char=\"${str:$i:1}\"\n        if [ \"$char\" == \"_\" ]; then\n            first_char=true\n        else\n            if $first_char; then\n                out+=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                first_char=false\n            else\n                out+=\"$char\"\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    echo \"$out\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"${1}\" | sed -r 's/(_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local first_char=\"\"\n    local rest_str=\"\"\n    local first_char_upper=\"\"\n    local rest_str_lower=\"\"\n    local new_str=\"\"\n    local new_str_array=()\n    local i=0\n    local j=0\n    local str_len=0\n\n    # Split the string into an array of words\n    IFS=\"_\" read -r -a new_str_array <<< \"$str\"\n\n    # Get the length of the array\n    str_len=${#new_str_array[@]}\n\n    # Loop through the array and convert each word to camel case\n    for ((i=0; i<str_len; i++)); do\n        # Get the first character of the word\n        first_char=${new_str_array[i]:0:1}\n\n        # Get the rest of the word\n        rest_str=${new_str_array[i]:1}\n\n        # Convert the first character to upper case\n        first_char_upper=$(echo \"$first_char\" | tr '[:lower:]' '[:upper:]')\n\n        # Convert the rest of the word to lower case\n        rest_str_lower=$(echo \"$rest_str\" | tr '[:upper:]' '[:lower:]')\n\n        # Concatenate the first character and the rest of the word\n        new_str=\"$new_str$first_char_upper$rest_str_lower\"\n    done\n\n    # Print the new string\n    echo \"$new_str\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -E 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local string=\"$1\"\n    local result=\"\"\n\n    while [[ \"$string\" =~ ([^_]*)_?(.*) ]]; do\n        if [[ ! -z ${BASH_REMATCH[1]} ]]; then\n            result+=\"${BASH_REMATCH[1]:0:1}$(tr '[:lower:]' '[:upper:]' <<< \"${BASH_REMATCH[1]:1}\")\"\n        fi\n        string=\"${BASH_REMATCH[2]}\"\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "<_io.BufferedReader name=4>",
      "stderr": "<_io.BufferedReader name=14>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    # Split the string into words\n    IFS='_' read -ra WORDS <<< \"$1\"\n    # Capitalize the first letter of each word\n    for i in \"${!WORDS[@]}\"; do\n        # Capitalize the first letter of the word\n        WORDS[$i]=\"$(tr '[:lower:]' '[:upper:]' <<< ${WORDS[$i]:0:1})${WORDS[$i]:1}\"\n    done\n    # Join the words back together\n    echo \"${WORDS[*]}\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local i=0\n    local char=''\n    local next_char=''\n    local len=${#str}\n\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        next_char=\"${str:$((i+1)):1}\"\n\n        if [ \"$char\" == \"_\" ]; then\n            first_char=false\n            i=$((i+1))\n            char=\"${str:$i:1}\"\n            next_char=\"${str:$((i+1)):1}\"\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n        fi\n\n        if [ \"$first_char\" == true ]; then\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n            first_char=false\n        fi\n\n        result+=\"$char\"\n        i=$((i+1))\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local string=\"$1\"\n    local result=\"\"\n\n    while [[ \"$string\" =~ ([^_]*)_([^_]*) ]]; do\n        result=\"${result}${BASH_REMATCH[1]}${BASH_REMATCH[2]^}\"\n        string=\"${string#*_}\"\n    done\n\n    echo \"$result$string\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g' -e 's/^\\([^_]\\)/\\L\\1/'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local word=\"\"\n    local char=\"\"\n\n    for ((i=0; i<${#str}; i++)); do\n        char=${str:$i:1}\n        if [[ \"$char\" == \"_\" ]]; then\n            if [[ \"$first_char\" == true ]]; then\n                result+=\"${word^}\"\n            else\n                result+=\"${word}\"\n            fi\n            word=\"\"\n            first_char=true\n        else\n            word+=\"$char\"\n            first_char=false\n        fi\n    done\n\n    if [[ \"$first_char\" == true ]]; then\n        result+=\"${word^}\"\n    else\n        result+=\"${word}\"\n    fi\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  # Split the string into an array\n  IFS='_' read -r -a array <<< \"$1\"\n\n  # Capitalize the first letter of each word\n  for i in \"${!array[@]}\"; do\n    array[$i]=$(echo \"${array[$i]}\" | sed -e 's/^./\\U&/')\n  done\n\n  # Join the array into a string\n  echo \"${array[*]}\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local str=\"$1\"\n  local result=\"\"\n  local first_char=1\n  local next_char_upper=0\n  local i=0\n  local char=\"\"\n\n  for ((i=0; i<${#str}; i++)); do\n    char=\"${str:$i:1}\"\n    if [[ \"$char\" == \"_\" ]]; then\n      next_char_upper=1\n    else\n      if [[ $next_char_upper -eq 1 ]]; then\n        char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n        next_char_upper=0\n      fi\n      if [[ $first_char -eq 1 ]]; then\n        char=\"$(tr '[:upper:]' '[:lower:]' <<< \"$char\")\"\n        first_char=0\n      fi\n      result+=\"$char\"\n    fi\n  done\n\n  echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local snake_case=$1\n    local camel_case=\"\"\n\n    for word in $(echo \"$snake_case\" | tr '_' ' '); do\n        camel_case+=$(echo \"$word\" | awk '{print toupper(substr($0,0,1)) substr($0,2)}')\n    done\n\n    echo \"$camel_case\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local char\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                first_char=false\n            fi\n            result+=\"$char\"\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n\n    while [[ \"$str\" =~ ([^_]*)_([^_]*) ]]; do\n        if [[ \"${BASH_REMATCH[1]}\" != \"\" ]]; then\n            result+=\"${BASH_REMATCH[1]}\"\n        fi\n        result+=\"${BASH_REMATCH[2]^}\"\n        str=\"${str#${BASH_REMATCH[0]}}\"\n    done\n    if [[ \"$str\" != \"\" ]]; then\n        result+=\"$str\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    if [ $# -ne 1 ]; then\n        echo \"Usage: $0 <string>\"\n        return 1\n    fi\n\n    echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/([^_]+)_?/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  # Split the string into an array of words\n  local words=($(echo \"$1\" | tr '_' ' '))\n  local result=\"\"\n\n  # Capitalize the first letter of each word\n  for word in \"${words[@]}\"; do\n    result+=\"${word:0:1}\"\n    result+=\"${word:1}\"\n  done\n\n  # Return the result\n  echo \"${result}\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -E 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed 's/\\([a-z]\\)\\([A-Z]\\)/\\1_\\2/g' | sed\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b\"Usage: sed [OPTION]... {script-only-if-no-other-script} [input-file]...\\n\\n  -n, --quiet, --silent\\n                 suppress automatic printing of pattern space\\n      --debug\\n                 annotate program execution\\n  -e script, --expression=script\\n                 add the script to the commands to be executed\\n  -f script-file, --file=script-file\\n                 add the contents of script-file to the commands to be executed\\n  --follow-symlinks\\n                 follow symlinks when processing in place\\n  -i[SUFFIX], --in-place[=SUFFIX]\\n                 edit files in place (makes backup if SUFFIX supplied)\\n  -l N, --line-length=N\\n                 specify the desired line-wrap length for the `l' command\\n  --posix\\n                 disable all GNU extensions.\\n  -E, -r, --regexp-extended\\n                 use extended regular expressions in the script\\n                 (for portability use POSIX -E).\\n  -s, --separate\\n                 consider files as separate rather than as a single,\\n                 continuous long stream.\\n      --sandbox\\n                 operate in sandbox mode (disable e/r/w commands).\\n  -u, --unbuffered\\n                 load minimal amounts of data from the input files and flush\\n                 the output buffers more often\\n  -z, --null-data\\n                 separate lines by NUL characters\\n      --help     display this help and exit\\n      --version  output version information and exit\\n\\nIf no -e, --expression, -f, or --file option is given, then the first\\nnon-option argument is taken as the sed script to interpret.  All\\nremaining arguments are names of input files; if no input files are\\nspecified, then the standard input is read.\\n\\nGNU sed home page: <https://www.gnu.org/software/sed/>.\\nGeneral help using GNU software: <https://www.gnu.org/gethelp/>.\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_letter=\"\"\n    local rest_of_word=\"\"\n\n    while [[ -n \"$str\" ]]; do\n        word=\"${str%%_*}\"\n        result=\"$result${word:0:1}${word:1,,}\"\n        str=\"${str#*_}\"\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp89h_wu5h.sh: line 14: word: 1,,: syntax error: operand expected (error token is \",\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    # Split the string into an array\n    local snake_array=(${1//_/ })\n    # Capitalize the first letter of each word\n    local camel_array=($(printf \"%s\\n\" \"${snake_array[@]^}\"))\n    # Join the array back into a string\n    local camel_string=$(printf \"%s\" \"${camel_array[@]}\")\n    echo $camel_string\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    # Convert all underscores to spaces\n    local string=\"${1//_/ }\"\n    # Capitalize the first letter of each word\n    local string=\"$(tr '[:lower:]' '[:upper:]' <<< ${string:0:1})${string:1}\"\n    # Remove spaces\n    local string=\"${string// /}\"\n    echo \"$string\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    # Split the string by '_'\n    IFS='_' read -ra arr <<< \"$1\"\n    # Capitalize the first letter of each word\n    for i in \"${arr[@]}\"; do\n        # Capitalize the first letter of each word\n        i=\"${i^}\"\n        # Concatenate the string\n        str=\"$str$i\"\n    done\n    # Print the result\n    echo \"$str\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local char\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            first_char=true\n        else\n            if $first_char; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                first_char=false\n            fi\n            result+=\"$char\"\n        fi\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  # Convert all underscores to spaces\n  local snake_string=\"${1//_/ }\"\n  # Convert the first letter of each word to uppercase\n  local camel_string=$(echo \"$snake_string\" | awk '{for (i=1;i<=NF;i++) { $i=toupper(substr($i,1,1)) substr($i,2) }}1')\n  # Convert the first letter of the first word to lowercase\n  echo \"${camel_string:0:1}${camel_string:1}\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local word=\"\"\n    local first_char=\"\"\n    local rest_of_word=\"\"\n    local first_char_upper=\"\"\n    local rest_of_word_lower=\"\"\n    local IFS=\"_\"\n    for word in $str; do\n        first_char=$(echo \"$word\" | cut -c1)\n        rest_of_word=$(echo \"$word\" | cut -c2-)\n        first_char_upper=$(echo \"$first_char\" | tr a-z A-Z)\n        rest_of_word_lower=$(echo \"$rest_of_word\" | tr A-Z a-z)\n        result=\"$result$first_char_upper$rest_of_word_lower\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)\\([a-zA-Z0-9]*\\)/\\u\\1\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=$1\n    local result=\"\"\n\n    while [[ -n $str ]]; do\n        # remove leading underscores\n        str=${str#_}\n        # get the first character\n        local char=${str:0:1}\n        # remove the first character\n        str=${str:1}\n        # convert to uppercase\n        char=$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\n        # append to result\n        result+=$char\n    done\n\n    echo $result\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local string=\"$1\"\n    local result=\"\"\n\n    while [[ \"$string\" =~ ([^_]*)_?(.*) ]]; do\n        if [[ ! -z ${BASH_REMATCH[1]} ]]; then\n            result+=\"${BASH_REMATCH[1]:0:1}\"\n            result+=\"${BASH_REMATCH[1]:1}\"\n        fi\n        string=\"${BASH_REMATCH[2]}\"\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "<_io.BufferedReader name=7>",
      "stderr": "<_io.BufferedReader name=17>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local out=\"\"\n    local first_char=true\n    local next_upper=false\n\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" == \"_\" ]]; then\n            next_upper=true\n        else\n            if $next_upper; then\n                char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n                next_upper=false\n            fi\n            out+=\"$char\"\n        fi\n    done\n\n    echo \"$out\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(^|_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)(.)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\(^\\|_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\u\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local string=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local char\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=\"${string:$i:1}\"\n        if [[ $char == \"_\" ]]; then\n            first_char=true\n        elif $first_char; then\n            char=\"$(tr '[:lower:]' '[:upper:]' <<< \"$char\")\"\n            first_char=false\n        fi\n        result+=\"$char\"\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local str=$1\n  local new_str=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n  local next_next_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n    next_char=${str:$((i+1)):1}\n    next_next_char=${str:$((i+2)):1}\n\n    if [ \"$char\" = \"_\" ]; then\n      if [ \"$next_char\" = \"_\" ]; then\n        new_str=\"${new_str}_\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \"-\" ]; then\n        new_str=\"${new_str}-\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \" \" ]; then\n        new_str=\"${new_str} \"\n        i=$((i+1))\n      elif [ \"$next_char\" = \"]\" ]; then\n        new_str=\"${new_str}]\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \"[\" ]; then\n        new_str=\"${new_str}[\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \")\" ]; then\n        new_str=\"${new_str})\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \"(\" ]; then\n        new_str=\"${new_str}(\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \"}\" ]; then\n        new_str=\"${new_str}}\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \"{\" ]; then\n        new_str=\"${new_str}{}\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \">\" ]; then\n        new_str=\"${new_str}>\"\n        i=$((i+1))\n      elif [ \"$next_char\" = \"<\" ]; then\n        new_str=\"${new_str}<\"\n\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpvrqhq2nu.sh: line 53: syntax error near unexpected token `}'\\n/tmp/tmpvrqhq2nu.sh: line 53: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  local str=\"$1\"\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  local char=\"\"\n  local next_char=\"\"\n  local prev_char=\"\"\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    next_char=\"${str:$((i+1)):1}\"\n    prev_char=\"${str:$((i-1)):1}\"\n\n    if [ \"$char\" == \"_\" ]; then\n      if [ $i -eq 0 ]; then\n        result+=\"${next_char^^}\"\n        i=$((i+1))\n      elif [ $i -eq $((len-1)) ]; then\n        result+=\"${char^^}\"\n      else\n        result+=\"${next_char^^}\"\n        i=$((i+1))\n      fi\n    else\n      result+=\"$char\"\n    fi\n    i=$((i+1))\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g' -e 's/^\\([^_]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local output\n    while [[ \"$str\" =~ ([^_]*)_(.*) ]]; do\n        output=\"${BASH_REMATCH[1]}${output:+${output^}}\"\n        str=\"${BASH_REMATCH[2]}\"\n    done\n    echo \"${output}${output:+${output^}}${str}\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local first_char=true\n    local char\n    local upper_char\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=${str:$i:1}\n        if [[ $char == \"_\" ]]; then\n            first_char=true\n            continue\n        fi\n        if $first_char; then\n            upper_char=$(echo $char | tr '[:lower:]' '[:upper:]')\n            result+=$upper_char\n            first_char=false\n        else\n            result+=$char\n        fi\n    done\n\n    echo $result\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n  echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -e 's/\\([^_]\\)_\\([^_]\\)/\\1\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\([a-z]\\)_\\([a-z]\\)/\\1\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(^|_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed -r 's/(_)([a-z])/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/_\\([a-z]\\)/\\U\\1/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\n    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [ \"$c\" = \"_\" ]; then\n            ((i++))\n            c=${str:$i:1}\n            result=\"$result$(tr '[a-z]' '[A-Z]')\"\n        fi\n        result=\"$result$c\"\n        ((i++))\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    local str=\"$1\"\n    local output\n    while [[ \"$str\" =~ ([^_]*)_([^_]*) ]]; do\n        output=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]^}\"\n        str=${str#${BASH_REMATCH[0]}}\n    done\n    echo \"$output$str\"\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190476,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n    echo \"$1\" | sed 's/\\(_\\)\\([a-z]\\)/\\U\\2/g'\n}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test",
      "timestamp": 1667190471,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}