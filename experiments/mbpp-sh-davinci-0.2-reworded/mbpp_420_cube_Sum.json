{
  "name": "mbpp_420_cube_Sum",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find the cube sum of first n even natural numbers.\n#\n# $1 is an integer\ncube_Sum() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    cube_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"72\" ]]\n    [[ $(candidate \"3\") = \"288\" ]]\n    [[ $(candidate \"4\") = \"800\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "\tsum=0\n\tfor ((i=1; i<=$1; i++))\n\tdo\n\t\tsum=$((sum + i**3))\n\tdone\n\techo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "\tsum=0\n\tfor ((i=1; i<=$1; i++))\n\tdo\n\t\tsum=$((sum + $((2*i))**3))\n\tdone\n\techo $sum",
    "    local sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for ((i=1; i<=n; i++))\n    do\n        sum=$((sum + (i*i*i)))\n    done\n    echo $sum",
    "    local n=$1\n    local sum=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        sum=$(( $sum + $(( $i*$i*$i )) ))\n    done\n    echo $sum",
    "\tlocal sum=0\n\tfor ((i=1; i<=$1; i++))\n\tdo\n\t\tsum=$((sum+((2*i-1)*(2*i-1)*(2*i-1))))\n\tdone\n\techo $sum",
    "\tsum=0\n\tfor (( i=1; i<=$1; i++ ))\n\tdo\n\t\tsum=$(( $sum + ($i * $i * $i) ))\n\tdone\n\techo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum",
    "    local sum=0\n    for (( i=2; i<=$1; i+=2 ))\n    do\n        sum=$((sum + i*i*i))\n    done\n    echo $sum",
    "\tlocal n=$1\n\tlocal sum=0\n\tfor ((i=1; i<=n; i++))\n\tdo\n\t\tsum=$((sum+((2*i-1)*(2*i-1)*(2*i-1))))\n\tdone\n\techo $sum",
    "  sum=0\n  for (( i=1; i<=$1; i++ ))\n  do\n    sum=$(( $sum + $(( $i * $i * $i )) ))\n  done\n  echo $sum",
    "    sum=0\n    for (( i=1; i<=$1; i++ ))\n    do\n        sum=$(( $sum + $(( $i*$i*$i )) ))\n    done\n    echo $sum",
    "\tif [ $1 -eq 0 ]\n\tthen\n\t\techo 0\n\telse\n\t\techo $(( $1 * $1 * $1 + $( cube_Sum $(( $1 - 2 )) ) ))\n\tfi",
    "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    else\n        echo $(( $1 * $1 * $1 + $(cube_Sum $(( $1 - 2 ))) ))\n    fi",
    "    if [ $1 -lt 1 ]; then\n        echo \"Please enter a positive integer\"\n        return\n    fi\n    sum=0\n    for (( i=1; i<=$1; i++ )); do\n        sum=$(( $sum + $(( $i * $i * $i )) ))\n    done\n    echo $sum"
  ]
}