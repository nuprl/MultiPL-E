{
  "name": "mbpp_802_count_rotation",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i count=0\n    local -i min_index=0\n\n    for ((i=0; i<n-1; i++)); do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]; then\n            min=${arr[i+1]}\n            min_index=$i+1\n            break\n        fi\n    done\n\n    echo $min_index",
    "    local -a arr=($1)\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    local -i len=${#arr[@]}\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index",
    "    local -a arr\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n    local -i flag=0\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index",
    "    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<n-1; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count",
    "    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i min_index=0\n\n    for ((i=0; i<n-1; i++)); do\n        min=${arr[i]}\n        min_index=i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]; then\n            echo $min_index\n            return\n        fi\n    done\n    echo 0",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n\n    for (( i=1; i<len; i++ )); do\n        if [[ ${arr[i]} -lt min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    echo $min_index",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n            min_index=$i\n        fi\n        ((i++))\n    done\n    echo $min_index",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    while (( i < len )); do\n        if (( arr[i] < min )); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n        (( i++ ))\n    done\n    echo $min_index",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index",
    "    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i n\n    local -i rotations\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    for ((i=1; i<n; i++)); do\n        if ((arr[i] < min)); then\n            min=${arr[i]}\n            min_index=i\n        fi\n    done\n    rotations=$((n - min_index))\n    echo $rotations",
    "    local -a arr=($1)\n    local -i start=0\n    local -i end=${#arr[@]}-1\n    local -i mid=0\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min_index=0\n\n    while [[ $start -le $end ]]; do\n        mid=$(( (start+end)/2 ))\n        if [[ $mid -eq 0 ]]; then\n            min_index=$mid\n            break\n        fi\n        if [[ ${arr[$mid]} -lt ${arr[$((mid-1))]} ]]; then\n            min_index=$mid\n            break\n        fi\n        if [[ ${arr[$mid]} -ge ${arr[$start]} ]]; then\n            start=$((mid+1))\n        else\n            end=$((mid-1))\n        fi\n    done\n    echo $min_index",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i min=0\n    local -i min_index=0\n    local -i count=0\n\n    for ((i=0; i<len; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n            count=$((count+1))\n        fi\n    done\n    echo $count",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n    local -i j=0\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt ${arr[min_index]} ]]; then\n            min_index=$i\n        fi\n    done\n\n    echo $min_index",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index",
    "    local -a arr=($1)\n    local -i len=${#arr[@]}\n    local -i i=0\n    local -i min=0\n    local -i min_index=0\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -lt ${arr[min_index]} ]]; then\n            min_index=$i\n        fi\n    done\n\n    echo $min_index",
    "  local -a arr=($1)\n  local -i len=${#arr[@]}\n  local -i i=0\n  local -i min=${arr[0]}\n  local -i min_index=0\n\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[i]} -lt $min ]]; then\n      min=${arr[i]}\n      min_index=$i\n    fi\n  done\n\n  echo $min_index",
    "    local -a arr=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n    local -i count=0\n    local -i min_index=0\n    for ((i=0; i<n-1; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++))\n        do\n            if [ ${arr[j]} -lt $min ]\n            then\n                min=${arr[j]}\n                min_index=$j\n            fi\n        done\n        if [ $min_index -ne $i ]\n        then\n            count=$((count+1))\n        fi\n    done\n    echo $count",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i min=${arr[0]}\n    local -i min_index=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n    echo $min_index",
    "    local -a arr\n    local -i i\n    local -i j\n    local -i min\n    local -i min_index\n    local -i count\n    local -i n\n\n    arr=($1)\n    n=${#arr[@]}\n    min=${arr[0]}\n    min_index=0\n    count=0\n\n    for ((i=0; i<n; i++)); do\n        if ((min > arr[i])); then\n            min=${arr[i]}\n            min_index=$i\n        fi\n    done\n\n    for ((i=min_index; i<n; i++)); do\n        if ((arr[i] > arr[i+1])); then\n            count=$i\n            break\n        fi\n    done\n\n    for ((i=0; i<min_index; i++)); do\n        if ((arr[i] > arr[i+1])); then\n            count=$i\n            break\n        fi\n    done\n\n    echo $count"
  ]
}