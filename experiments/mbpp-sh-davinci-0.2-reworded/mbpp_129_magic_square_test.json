{
  "name": "mbpp_129_magic_square_test",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to calculate whether the matrix is a magic square.\n#\n# $1 is a newline-separated, space-separated list\nmagic_square_test() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    magic_square_test \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7 12 1 14\\n2 13 8 11\\n16 3 10 5\\n9 6 15 4\") = \"true\" ]]\n    [[ $(candidate \"2 7 6\\n9 5 1\\n4 3 8\") = \"true\" ]]\n    [[ $(candidate \"2 7 6\\n9 5 1\\n4 3 7\") = \"false\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a square\n    local -i i j k sum\n    local -i rows cols\n    local -i row_sum col_sum diag_sum\n\n    # Read the square into an array\n    IFS=$'\\n' read -r -d '' -a square < <(echo \"$1\")\n    unset IFS\n\n    # Get the number of rows and columns\n    rows=${#square[@]}\n    cols=$(echo \"${square[0]}\" | wc -w)\n\n    # Check that the square is square\n    if [[ $rows -ne $cols ]]; then\n        echo \"Not a square\"\n        return 1\n    fi\n\n    # Check that the square is a magic square\n    for ((i=0; i<rows; i++)); do\n        # Check that the row sums are equal\n        row_sum=0\n        for ((j=0; j<cols; j++)); do\n            row_sum=$((row_sum + square[i,j]))\n        done\n        if [[ $row_sum -ne $sum ]]; then\n            echo \"Not a magic square\"\n            return 1\n        fi\n\n        # Check that the column sums are equal\n        col_sum=0\n        for ((j=0; j<cols; j++)); do\n            col_sum=$((col_sum + square[j,i]))\n        done\n        if [[ $col_sum -ne $sum ]]; then\n            echo \"Not a magic square\"\n            return 1\n        fi\n\n        # Check that the diagonal sums are equal\n        diag_sum=0\n        for ((j=0; j<cols; j++)); do\n            diag_sum=$((diag_sum + square[j,j]))\n        done\n        if [[ $diag_sum -ne $sum ]]; then\n            echo \"Not a magic square\"\n            return 1\n        fi\n\n        # Check that the reverse diagonal sums are equal\n        diag_sum=0\n        for ((j=0; j<cols; j++)); do\n            diag_sum=$((diag_sum + square[j,cols-j-1]))\n        done\n        if",
    "  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0\n  local -i bq=",
    "    local -i sum=0\n    local -i row=0\n    local -i col=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n",
    "  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i n=0\n  local -i m=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i k=0\n  local -i l=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i K=0\n  local -i L=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local -i T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local -i Y=0\n  local -i Z=0\n  local -i AA=0\n  local -i BB=0\n  local -i CC=0\n  local -i DD=0\n  local -i EE=0\n  local -i FF=0\n  local -i GG=0\n  local -i HH=0\n  local -i KK=0\n  local -i LL=0\n  local -i PP=0\n  local -i QQ=0\n  local -i RR=0\n  local -i SS=0\n  local -i TT=0\n  local -i UU=0\n  local -i",
    "  local -i sum=0\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0",
    "  local -i sum=0\n  local -i sum_row=0\n  local -i sum_col=0\n  local -i sum_diag=0\n  local -i sum_diag2=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n ",
    "    local -a matrix\n    local -i i j k n sum\n    local -i row_sum col_sum diag_sum\n    local -i row_sum_expected col_sum_expected diag_sum_expected\n    local -i row_sum_expected_set col_sum_expected_set diag_sum_expected_set\n\n    # Read the matrix into an array\n    i=0\n    while read -a row; do\n        matrix[i++]=${row[@]}\n    done <<< \"$1\"\n\n    # Check that the matrix is square\n    n=${#matrix[@]}\n    if (( n == 0 || n % n != 0 )); then\n        echo \"false\"\n        return\n    fi\n\n    # Check that the matrix contains only integers\n    for (( i = 0; i < n; i++ )); do\n        for (( j = 0; j < n; j++ )); do\n            if ! [[ ${matrix[i,j]} =~ ^[0-9]+$ ]]; then\n                echo \"false\"\n                return\n            fi\n        done\n    done\n\n    # Check that the matrix contains only unique integers\n    for (( i = 0; i < n; i++ )); do\n        for (( j = 0; j < n; j++ )); do\n            for (( k = 0; k < n; k++ )); do\n                if (( i != k && j != k )) && (( matrix[i,j] == matrix[i,k] || matrix[i,j] == matrix[k,j] )); then\n                    echo \"false\"\n                    return\n                fi\n            done\n        done\n    done\n\n    # Calculate the sum of each row, column, and diagonal\n    row_sum_expected=0\n    col_sum_expected=0\n    diag_sum_expected=0\n    row_sum_expected_set=0\n    col_sum_expected_set=0\n    diag_sum_expected_set=0\n    for (( i = 0; i < n; i++ )); do\n        row_sum=0\n        col_sum=0\n        for (( j = 0; j < n; j++ )); do\n            row_sum+=${matrix[i,",
    "  local -i sum=0\n  local -i i=0\n  local -i j=0\n  local -i n=0\n  local -i m=0\n  local -i k=0\n  local -i l=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo=0\n  local -i ppp=0\n  local -i qqq=",
    "    local -a matrix\n    local -i i j sum\n    local -i n=0\n    local -i sum_diag_1=0\n    local -i sum_diag_2=0\n    local -i sum_row=0\n    local -i sum_col=0\n\n    while read -r line; do\n        matrix[n++]=$line\n    done <<< \"$1\"\n\n    for ((i=0; i<n; i++)); do\n        sum_row=0\n        sum_col=0\n        for ((j=0; j<n; j++)); do\n            sum_row=$((sum_row + ${matrix[i]:j:1}))\n            sum_col=$((sum_col + ${matrix[j]:i:1}))\n        done\n        if [[ $i -eq 0 ]]; then\n            sum=$sum_row\n        elif [[ $sum -ne $sum_row ]] || [[ $sum -ne $sum_col ]]; then\n            return 1\n        fi\n    done\n\n    for ((i=0; i<n; i++)); do\n        sum_diag_1=$((sum_diag_1 + ${matrix[i]:i:1}))\n        sum_diag_2=$((sum_diag_2 + ${matrix[i]:n-i-1:1}))\n    done\n    if [[ $sum -ne $sum_diag_1 ]] || [[ $sum -ne $sum_diag_2 ]]; then\n        return 1\n    fi\n\n    return 0",
    "    local -i sum=0\n    local -i n=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp=0",
    "    local -a matrix\n    local -i i j sum\n    local -i rows=$(wc -l <<< \"$1\")\n    local -i cols=$(wc -w <<< \"$1\")\n    local -i magic_number=$(((rows * (rows * rows + 1)) / 2))\n    local -i max_index=$((rows - 1))\n\n    # Check for squareness\n    if ((cols != rows)); then\n        return 1\n    fi\n\n    # Check for magicness\n    while read -ra matrix; do\n        # Check for squareness\n        if ((${#matrix[@]} != rows)); then\n            return 1\n        fi\n\n        # Check for magicness\n        for ((i = 0; i < rows; i++)); do\n            sum=0\n            for ((j = 0; j < rows; j++)); do\n                sum=$((sum + matrix[i * rows + j]))\n            done\n            if ((sum != magic_number)); then\n                return 1\n            fi\n        done\n    done <<< \"$1\"\n\n    # Check for magicness\n    for ((i = 0; i < rows; i++)); do\n        sum=0\n        for ((j = 0; j < rows; j++)); do\n            sum=$((sum + matrix[j * rows + i]))\n        done\n        if ((sum != magic_number)); then\n            return 1\n        fi\n    done\n\n    # Check for magicness\n    sum=0\n    for ((i = 0; i < rows; i++)); do\n        sum=$((sum + matrix[i * rows + i]))\n    done\n    if ((sum != magic_number)); then\n        return 1\n    fi\n\n    # Check for magicness\n    sum=0\n    for ((i = 0; i < rows; i++)); do\n        sum=$((sum + matrix[i * rows + max_index - i]))\n    done\n    if ((sum != magic_number)); then\n        return 1\n    fi\n\n    return 0",
    "    local line\n    local -i sum=0\n    local -i sum_row=0\n    local -i sum_col=0\n    local -i sum_diag=0\n    local -i sum_diag_rev=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj",
    "  local -a matrix\n  local -i i j k\n  local -i sum_row sum_col sum_diag1 sum_diag2\n  local -i n_rows n_cols\n  local -i n_rows_expected n_cols_expected\n  local -i sum_expected\n  local -i is_magic_square\n\n  # Read the matrix into an array.\n  i=0\n  while read -r line; do\n    matrix[i]=\"$line\"\n    ((i++))\n  done <<< \"$1\"\n\n  # Check that the matrix is square.\n  n_rows=${#matrix[@]}\n  n_cols=${#matrix[0]}\n  n_rows_expected=$n_cols\n  n_cols_expected=$n_rows\n  if [[ $n_rows -ne $n_rows_expected || $n_cols -ne $n_cols_expected ]]; then\n    echo \"The matrix is not square.\"\n    return 1\n  fi\n\n  # Check that the matrix is magic.\n  sum_expected=0\n  for ((i=0; i<n_rows; i++)); do\n    sum_expected=$((sum_expected + ${matrix[i]:0:1}))\n  done\n  is_magic_square=1\n  for ((i=0; i<n_rows; i++)); do\n    sum_row=0\n    sum_col=0\n    for ((j=0; j<n_cols; j++)); do\n      sum_row=$((sum_row + ${matrix[i]:j:1}))\n      sum_col=$((sum_col + ${matrix[j]:i:1}))\n    done\n    if [[ $sum_row -ne $sum_expected || $sum_col -ne $sum_expected ]]; then\n      is_magic_square=0\n      break\n    fi\n  done\n  if [[ $is_magic_square -eq 1 ]]; then\n    sum_diag1=0\n    sum_diag2=0\n    for ((k=0; k<n_rows; k++)); do\n      sum_diag",
    "  local -a matrix\n  local -i i j sum\n  local -i row_sum col_sum diag_sum\n  local -i row_count col_count diag_count\n\n  # Read the matrix into an array\n  while read -a line; do\n    matrix+=(\"${line[@]}\")\n  done <<< \"$1\"\n\n  # Calculate the sum of the first row\n  for ((i = 0; i < ${#matrix[0]}; i++)); do\n    ((sum += ${matrix[0]:i:1}))\n  done\n\n  # Test each row\n  for ((i = 0; i < ${#matrix[@]}; i++)); do\n    row_sum=0\n    for ((j = 0; j < ${#matrix[0]}; j++)); do\n      ((row_sum += ${matrix[i]:j:1}))\n    done\n    if ((row_sum != sum)); then\n      echo \"Row $i is not a magic square\"\n      return 1\n    fi\n  done\n  ((row_count = i))\n\n  # Test each column\n  for ((i = 0; i < ${#matrix[0]}; i++)); do\n    col_sum=0\n    for ((j = 0; j < ${#matrix[@]}; j++)); do\n      ((col_sum += ${matrix[j]:i:1}))\n    done\n    if ((col_sum != sum)); then\n      echo \"Column $i is not a magic square\"\n      return 1\n    fi\n  done\n  ((col_count = i))\n\n  # Test each diagonal\n  diag_sum=0\n  for ((i = 0; i < ${#matrix[@]}; i++)); do\n    ((diag_sum += ${matrix[i]:i:1}))\n  done\n  if ((diag_sum != sum)); then\n    echo \"Diagonal 0 is not a magic square\"\n    return 1\n  fi\n  ((diag_count = i))\n\n  diag_sum=0\n  for ((i = 0; i < ${#matrix[@]}; i++)); do\n    ((diag_sum",
    "    local matrix=\"$1\"\n    local sum_of_rows=0\n    local sum_of_columns=0\n    local sum_of_diagonals=0\n    local sum_of_other_diagonals=0\n    local row_count=0\n    local column_count=0\n    local diagonal_count=0\n    local other_diagonal_count=0\n    local row_sum=0\n    local column_sum=0\n    local diagonal_sum=0\n    local other_diagonal_sum=0\n    local row_index=0\n    local column_index=0\n    local diagonal_index=0\n    local other_diagonal_index=0\n    local row_value=0\n    local column_value=0\n    local diagonal_value=0\n    local other_diagonal_value=0\n    local row_values=()\n    local column_values=()\n    local diagonal_values=()\n    local other_diagonal_values=()\n    local row_values_string=''\n    local column_values_string=''\n    local diagonal_values_string=''\n    local other_diagonal_values_string=''\n    local row_values_string_length=0\n    local column_values_string_length=0\n    local diagonal_values_string_length=0\n    local other_diagonal_values_string_length=0\n    local row_values_string_index=0\n    local column_values_string_index=0\n    local diagonal_values_string_index=0\n    local other_diagonal_values_string_index=0\n    local row_values_string_character=''\n    local column_values_string_character=''\n    local diagonal_values_string_character=''\n    local other_diagonal_values_string_character=''\n    local row_values_string_character_code=0\n    local column_values_string_character_code=0\n    local diagonal_values_string_character_code=0\n    local other_diagonal_values_string_character_code=0\n    local row_values_string_character_code_sum=0\n    local column_values_string_character_",
    "  local -a matrix\n  local -i i j sum\n  local -i sum_diag_1=0 sum_diag_2=0\n  local -i sum_row=0 sum_col=0\n\n  # Read the matrix into an array\n  i=0\n  while read -r line; do\n    matrix[i++]=$line\n  done <<< \"$1\"\n\n  # Calculate the sum of the first row\n  for num in ${matrix[0]}; do\n    ((sum_row += num))\n  done\n\n  # Check the sum of the rows\n  for ((i = 1; i < ${#matrix[@]}; i++)); do\n    sum=0\n    for num in ${matrix[i]}; do\n      ((sum += num))\n    done\n    if ((sum != sum_row)); then\n      echo \"false\"\n      return\n    fi\n  done\n\n  # Check the sum of the columns\n  for ((j = 0; j < ${#matrix[0]}; j++)); do\n    sum=0\n    for ((i = 0; i < ${#matrix[@]}; i++)); do\n      sum=$((sum + ${matrix[i]:j:1}))\n    done\n    if ((sum != sum_row)); then\n      echo \"false\"\n      return\n    fi\n  done\n\n  # Check the sum of the diagonals\n  for ((i = 0; i < ${#matrix[@]}; i++)); do\n    ((sum_diag_1 += ${matrix[i]:i:1}))\n    ((sum_diag_2 += ${matrix[i]:(${#matrix[0]} - 1 - i):1}))\n  done\n  if ((sum_diag_1 != sum_row || sum_diag_2 != sum_row)); then\n    echo \"false\"\n    return\n  fi\n\n  echo \"true\"",
    "  local -i sum=0\n  local -i sum_diag=0\n  local -i sum_anti_diag=0\n  local -i sum_row=0\n  local -i sum_col=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n ",
    "    local -a matrix\n    local -i i j k n\n    local -i sum_row sum_col sum_diag1 sum_diag2\n    local -i sum_magic\n\n    # read the matrix\n    i=0\n    while read -r line; do\n        matrix[i++]=$line\n    done <<< \"$1\"\n\n    # check if the matrix is a square\n    n=${#matrix[0]}\n    for ((i=1; i<${#matrix[@]}; i++)); do\n        if [[ ${#matrix[i]} -ne $n ]]; then\n            echo \"The matrix is not a square.\"\n            return 1\n        fi\n    done\n\n    # check if the matrix is a magic square\n    sum_magic=$((n*(n*n+1)/2))\n    for ((i=0; i<n; i++)); do\n        sum_row=0\n        sum_col=0\n        for ((j=0; j<n; j++)); do\n            sum_row=$((sum_row+${matrix[i]:j:1}))\n            sum_col=$((sum_col+${matrix[j]:i:1}))\n        done\n        if [[ $sum_row -ne $sum_magic || $sum_col -ne $sum_magic ]]; then\n            echo \"The matrix is not a magic square.\"\n            return 1\n        fi\n    done\n    sum_diag1=0\n    sum_diag2=0\n    for ((i=0; i<n; i++)); do\n        sum_diag1=$((sum_diag1+${matrix[i]:i:1}))\n        sum_diag2=$((sum_diag2+${matrix[i]:n-i-1:1}))\n    done\n    if [[ $sum_diag1 -ne $sum_magic || $sum_diag2 -ne $sum_magic ]]; then\n        echo \"The matrix is not a magic square.\"\n        return 1\n    fi\n\n    echo \"The matrix is a magic square.\"\n    return 0",
    "  local -i sum=0\n  local -i sum_diag=0\n  local -i sum_diag_inv=0\n  local -i sum_row=0\n  local -i sum_col=0\n  local -i row=0\n  local -i col=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local",
    "    local -a matrix\n    local -i i j sum\n    local -i row_sum col_sum diag_sum\n    local -i row_count col_count diag_count\n    local -i row_index col_index diag_index\n    local -i row_index_max col_index_max diag_index_max\n    local -i row_index_min col_index_min diag_index_min\n\n    # Read the matrix\n    i=0\n    while read -a row; do\n        matrix[i++]=${row[@]}\n    done <<< \"$1\"\n\n    # Check the matrix is square\n    if (( ${#matrix[@]} != ${#matrix[0]} )); then\n        echo \"Not a square matrix\"\n        return 1\n    fi\n\n    # Check the matrix is magic\n    row_index_max=${#matrix[@]}\n    col_index_max=${#matrix[0]}\n    diag_index_max=$(( row_index_max + col_index_max - 1 ))\n    row_index_min=0\n    col_index_min=0\n    diag_index_min=0\n    row_count=0\n    col_count=0\n    diag_count=0\n    for (( i = 0; i < row_index_max; i++ )); do\n        row_sum=0\n        col_sum=0\n        for (( j = 0; j < col_index_max; j++ )); do\n            sum=${matrix[i,j]}\n            row_sum=$(( row_sum + sum ))\n            col_sum=$(( col_sum + sum ))\n        done\n        if (( row_count == 0 )); then\n            row_count=1\n            row_sum_expected=$row_sum\n        elif (( row_sum != row_sum_expected )); then\n            echo \"Not a magic square\"\n            return 1\n        fi\n        if (( col_count == 0 )); then\n            col_count=1\n            col_sum_expected=$col_sum\n        elif (( col_sum != col_sum_expected )); then\n            echo \"Not a magic square\"\n            return 1"
  ]
}