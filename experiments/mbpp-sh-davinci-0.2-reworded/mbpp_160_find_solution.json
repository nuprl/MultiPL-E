{
  "name": "mbpp_160_find_solution",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that returns integers x and y that satisfy ax + by = n as a list, or return None if no solution exists.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nfind_solution() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    find_solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"7\") = \"2 1\" ]]\n    [[ $(candidate \"4\" \"2\" \"7\") = \"None\" ]]\n    [[ $(candidate \"1\" \"13\" \"17\") = \"4 1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"",
    "    for (( x = 0; x <= $1; x++ )); do\n        for (( y = 0; y <= $2; y++ )); do\n            if (( $1 * $x + $2 * $y == $3 )); then\n                echo \"$x $y\"\n                return\n            fi\n        done\n    done\n    echo \"None\"",
    "  if [ $1 -eq 0 ]; then\n    echo \"None\"\n  elif [ $3 -eq 0 ]; then\n    echo \"[0, $2]\"\n  else\n    local x=$(($3 / $1))\n    local y=$(($2 / $1))\n    local r=$(($3 % $1))\n    local s=$(($2 % $1))\n    local t=$(($1 % $3))\n    local u=$(($1 % $2))\n    if [ $r -eq 0 ] && [ $s -eq 0 ]; then\n      echo \"[$x, $y]\"\n    elif [ $t -eq 0 ] && [ $u -eq 0 ]; then\n      echo \"[$x, $y]\"\n    else\n      echo \"None\"\n    fi\n  fi",
    "    for ((x=0; x<=$1; x++)); do\n        for ((y=0; y<=$2; y++)); do\n            if (($1*$x+$2*$y==$3)); then\n                echo \"$x $y\"\n                return\n            fi\n        done\n    done\n    echo \"None\"",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_max=$((n/a))\n    local y_max=$((n/b))\n    local x_min=$((-n/a))\n    local y_min=$((-n/b))\n    local x_step=$((a/b))\n    local y_step=$((b/a))\n    local x_step_sign=$((x_step/x_step))\n    local y_step_sign=$((y_step/y_step))\n    local x_step_abs=$((x_step*x_step_sign))\n    local y_step_abs=$((y_step*y_step_sign))\n    local x_step_abs_max=$((x_max/x_step_abs))\n    local y_step_abs_max=$((y_max/y_step_abs))\n    local x_step_abs_min=$((x_min/x_step_abs))\n    local y_step_abs_min=$((y_min/y_step_abs))\n    local x_step_abs_max_sign=$((x_step_abs_max/x_step_abs_max))\n    local y_step_abs_max_sign=$((y_step_abs_max/y_step_abs_max))\n    local x_step_abs_min_sign=$((x_step_abs_min/x_step_abs_min))\n    local y_step_abs_min_sign=$((y_step_abs_min/y_step_abs_min))\n    local x_step_abs_max_abs=$((x_step_abs_max*x_step_abs_max_sign))\n    local y_step_abs_max_abs=$((y_step_abs_max*y_step_abs_max_sign))\n    local x_step_abs_min_abs=$((x_step_abs_min*x_step_abs_min_sign))\n    local y_step_abs_min_abs=$((y_step_abs_min*y_step_abs_",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local found=0\n    while [ $x -le $n ]\n    do\n        y=$((n - a * x))\n        if [ $((y % b)) -eq 0 ]\n        then\n            found=1\n            break\n        fi\n        x=$((x + 1))\n    done\n    if [ $found -eq 1 ]\n    then\n        echo \"[$x, $y]\"\n    else\n        echo \"None\"\n    fi",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local d=0\n    local x1=0\n    local x2=0\n    local y1=0\n    local y2=0\n    local q=0\n    local r=0\n    if [ $n -lt 0 ]; then\n        echo \"None\"\n        return\n    fi\n    if [ $a -eq 0 ]; then\n        if [ $b -eq 0 ]; then\n            echo \"None\"\n            return\n        fi\n        if [ $n -eq 0 ]; then\n            echo \"[0, 0]\"\n            return\n        fi\n        if [ $n -% $b -eq 0 ]; then\n            echo \"[0, $((n / b))]\"\n            return\n        fi\n        echo \"None\"\n        return\n    fi\n    if [ $b -eq 0 ]; then\n        if [ $n -eq 0 ]; then\n            echo \"[0, 0]\"\n            return\n        fi\n        if [ $n -% $a -eq 0 ]; then\n            echo \"[$((n / a)), 0]\"\n            return\n        fi\n        echo \"None\"\n        return\n    fi\n    if [ $n -eq 0 ]; then\n        echo \"[0, 0]\"\n        return\n    fi\n    d=$(gcd $a $b)\n    if [ $n -% $d -ne 0 ]; then\n        echo \"None\"\n        return\n    fi\n    x1=0\n    y1=1\n    x2=1\n    y2=0\n    while [ $b -ne 0 ]; do\n        q=$((a / b))\n        r=$((a - q * b))\n        x=$((x2 - q * x1))\n        y=$((y2 - q * y1))\n        a=$b\n        b=$r\n        x2=$x1\n        x1=$x\n        y2=$y1\n        y1=$y\n    done\n    if [ $d -ne 1 ]; then\n        x=$((x2 * (n / d)))\n        y=$((y2 * (n / d)))\n    else\n        x",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_incr=1\n    local y_incr=0\n    local temp=0\n    while (( $n > 0 )); do\n        if (( $n - $a >= 0 )); then\n            n=$(( $n - $a ))\n            x=$(( $x + $x_incr ))\n        else\n            temp=$x_incr\n            x_incr=$y_incr\n            y_incr=$temp\n            temp=$a\n            a=$b\n            b=$temp\n        fi\n    done\n    if (( $n == 0 )); then\n        echo \"$x $y\"\n    else\n        echo \"None\"\n    fi",
    "    x=0\n    y=0\n    while [ $(( $1 * $x )) -lt $3 ]; do\n        y=$(( ($3 - ($1 * $x)) / $2 ))\n        if [ $(( $2 * $y )) -eq $(( $3 - ($1 * $x) )) ]; then\n            echo $x $y\n            return 0\n        fi\n        x=$(( $x + 1 ))\n    done\n    echo \"None\"",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_incr=1\n    local y_incr=0\n    local temp=0\n    while [ $((a*x)) -lt $n ]; do\n        y=$((n-a*x))\n        if [ $((y%b)) -eq 0 ]; then\n            echo $x $y\n            return 0\n        fi\n        temp=$x_incr\n        x_incr=$((-a*y_incr))\n        y_incr=$((b*temp))\n        x=$((x+x_incr))\n    done\n    return 1",
    "    for (( x=0; x<=$1; x++ )); do\n        for (( y=0; y<=$2; y++ )); do\n            if [ $(($x*$1 + $y*$2)) -eq $3 ]; then\n                echo \"$x $y\"\n                return\n            fi\n        done\n    done\n    echo \"None\"",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    a=$1\n    b=$2\n    n=$3\n    if [ $n -lt $a ] && [ $n -lt $b ]; then\n        echo \"None\"\n    else\n        for (( x=0; x<=$n; x++ )); do\n            for (( y=0; y<=$n; y++ )); do\n                if [ $(( $a*$x + $b*$y )) -eq $n ]; then\n                    echo \"[$x, $y]\"\n                fi\n            done\n        done\n    fi",
    "    local x=0\n    local y=0\n    local n=$1\n    local a=$2\n    local b=$3\n    while [ $((a*x)) -lt $n ]\n    do\n        if [ $((n - a*x)) -eq $((b*y)) ]\n        then\n            echo \"$x $y\"\n            return\n        fi\n        if [ $((n - a*x)) -lt $((b*y)) ]\n        then\n            y=0\n            x=$((x+1))\n        else\n            y=$((y+1))\n        fi\n    done\n    echo \"None\"",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_max=$((n / a))\n    local y_max=$((n / b))\n    local x_min=$((-n / a))\n    local y_min=$((-n / b))\n    local x_step=$((a / gcd(a, b)))\n    local y_step=$((b / gcd(a, b)))\n    local x_sign=1\n    local y_sign=1\n    if [ $x_step -lt 0 ]; then\n        x_step=$((-x_step))\n        x_sign=$((-1))\n    fi\n    if [ $y_step -lt 0 ]; then\n        y_step=$((-y_step))\n        y_sign=$((-1))\n    fi\n    for ((x = x_min; x <= x_max; x += x_step)); do\n        for ((y = y_min; y <= y_max; y += y_step)); do\n            if [ $((a * x + b * y)) -eq $n ]; then\n                echo \"$x $y\"\n                return 0\n            fi\n        done\n    done\n    return 1",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local d=0\n    local r=0\n    local q=0\n    local x1=0\n    local x2=0\n    local y1=0\n    local y2=0\n    local x_out=0\n    local y_out=0\n    local d_out=0\n    local r_out=0\n    local q_out=0\n    local x1_out=0\n    local x2_out=0\n    local y1_out=0\n    local y2_out=0\n    local x_out=0\n    local y_out=0\n    local d_out=0\n    local r_out=0\n    local q_out=0\n    local x1_out=0\n    local x2_out=0\n    local y1_out=0\n    local y2_out=0\n    local x_out=0\n    local y_out=0\n    local d_out=0\n    local r_out=0\n    local q_out=0\n    local x1_out=0\n    local x2_out=0\n    local y1_out=0\n    local y2_out=0\n    local x_out=0\n    local y_out=0\n    local d_out=0\n    local r_out=0\n    local q_out=0\n    local x1_out=0\n    local x2_out=0\n    local y1_out=0\n    local y2_out=0\n    local x_out=0\n    local y_out=0\n    local d_out=0\n    local r_out=0\n    local q_out=0\n    local x1_out=0\n    local x2_out=0\n    local y1_out=0\n    local y2_out=0\n    local x_out=0\n    local y_out=0\n    local d_out=0\n    local r_out=0\n    local q_out=0\n    local x1_out=0\n    local x2_out",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    local x_inc=1\n    local y_inc=1\n    local x_max=0\n    local y_max=0\n    local x_min=0\n    local y_min=0\n    local x_tmp=0\n    local y_tmp=0\n    local x_tmp_inc=1\n    local y_tmp_inc=1\n    local x_tmp_max=0\n    local y_tmp_max=0\n    local x_tmp_min=0\n    local y_tmp_min=0\n    local x_tmp_tmp=0\n    local y_tmp_tmp=0\n    local x_tmp_tmp_inc=1\n    local y_tmp_tmp_inc=1\n    local x_tmp_tmp_max=0\n    local y_tmp_tmp_max=0\n    local x_tmp_tmp_min=0\n    local y_tmp_tmp_min=0\n    local x_tmp_tmp_tmp=0\n    local y_tmp_tmp_tmp=0\n    local x_tmp_tmp_tmp_inc=1\n    local y_tmp_tmp_tmp_inc=1\n    local x_tmp_tmp_tmp_max=0\n    local y_tmp_tmp_tmp_max=0\n    local x_tmp_tmp_tmp_min=0\n    local y_tmp_tmp_tmp_min=0\n    local x_tmp_tmp_tmp_tmp=0\n    local y_tmp_tmp_tmp_tmp=0\n    local x_tmp_tmp_tmp_tmp_inc=1\n    local y_tmp_tmp_tmp_tmp_inc=1\n    local x_tmp_tmp_tmp_tmp_max=0\n    local y_tmp_tmp_tmp_tmp_max=0\n    local x_tmp_tmp_tmp_tmp_min=0\n    local y_tmp_tmp_tmp_tmp_min=0\n    local x_tmp_tmp_tmp_tmp_tmp=0\n    local y_tmp_tmp_tmp_tmp_tmp=0\n   ",
    "  local a=$1\n  local b=$2\n  local n=$3\n  local x=0\n  local y=0\n  local x_tmp=0\n  local y_tmp=0\n  local r=0\n  local q=0\n  local r_tmp=0\n  local q_tmp=0\n  local tmp=0\n  local solution=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv",
    "    if [ $1 -eq 0 ]\n    then\n        echo \"None\"\n        return\n    fi\n    if [ $3 -eq 0 ]\n    then\n        echo \"[0, $2]\"\n        return\n    fi\n    if [ $3 -lt 0 ]\n    then\n        echo \"None\"\n        return\n    fi\n    if [ $3 -gt $1 ]\n    then\n        echo \"None\"\n        return\n    fi\n    if [ $3 -gt $2 ]\n    then\n        echo \"None\"\n        return\n    fi\n    if [ $3 -eq $1 ]\n    then\n        echo \"[1, 0]\"\n        return\n    fi\n    if [ $3 -eq $2 ]\n    then\n        echo \"[0, 1]\"\n        return\n    fi\n    if [ $3 -lt $1 ]\n    then\n        echo \"[$(($3 / $1)), $(($3 % $1))]\"\n        return\n    fi\n    if [ $3 -lt $2 ]\n    then\n        echo \"[$(($3 / $2)), $(($3 % $2))]\"\n        return\n    fi",
    "  local a=$1\n  local b=$2\n  local n=$3\n  local x=0\n  local y=0\n  local x_incr=1\n  local y_incr=0\n  local temp=0\n  while (( $n > 0 )); do\n    if (( $n - $a >= 0 )); then\n      n=$(( $n - $a ))\n      x=$(( $x + $x_incr ))\n    else\n      temp=$x_incr\n      x_incr=$y_incr\n      y_incr=$temp\n      temp=$a\n      a=$b\n      b=$temp\n    fi\n  done\n  if (( $n == 0 )); then\n    echo $x $y\n  else\n    echo \"None\"\n  fi",
    "    local a=$1\n    local b=$2\n    local n=$3\n    local x=0\n    local y=0\n    while [ $((a*x)) -lt $n ]; do\n        y=0\n        while [ $((b*y)) -lt $n ]; do\n            if [ $((a*x+b*y)) -eq $n ]; then\n                echo \"$x $y\"\n                return 0\n            fi\n            y=$((y+1))\n        done\n        x=$((x+1))\n    done\n    return 1"
  ]
}