{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/shthon-program-to-count-the-pairs-of-reverse-strings/\n#\n# $1 is a space-separated list\ncount_reverse_pairs() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    count_reverse_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"julia best tseb for ailuj\") = \"2\" ]]\n    [[ $(candidate \"geeks best for skeeg\") = \"1\" ]]\n    [[ $(candidate \"makes best sekam for rof\") = \"2\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=$1\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [[ $i == $(rev <<< $j) ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count",
    "    local list=$1\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [ \"$i\" == \"$(echo $j | rev)\" ]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count",
    "  local list=$1\n  local count=0\n  for word in $list; do\n    local reverse=`echo $word | rev`\n    if [[ $list =~ $reverse ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo $count",
    "  local list=\"$1\"\n  local count=0\n  local i=0\n  local j=0\n  local len=0\n  local rev=''\n  local word=''\n  local words=()\n  local word_count=0\n\n  words=($list)\n  word_count=${#words[@]}\n\n  for ((i=0; i<word_count; i++)); do\n    word=${words[$i]}\n    len=${#word}\n    for ((j=i+1; j<word_count; j++)); do\n      rev=${words[$j]}\n      if [[ $len -eq ${#rev} ]]; then\n        rev=$(echo $rev | rev)\n        if [[ $word == $rev ]]; then\n          ((count++))\n        fi\n      fi\n    done\n  done\n\n  echo $count",
    "    local list=$1\n    local count=0\n    local i=0\n    local j=0\n    local reverse=''\n    local word=''\n    local words=()\n    local len=0\n    local len_list=0\n    local len_words=0\n\n    # Split the list into an array of words\n    IFS=' ' read -ra words <<< \"$list\"\n    len_words=${#words[@]}\n\n    # Loop through the words\n    for (( i=0; i<len_words; i++ )); do\n        word=${words[$i]}\n        len=${#word}\n\n        # Loop through the words again\n        for (( j=i+1; j<len_words; j++ )); do\n            reverse=${words[$j]}\n\n            # Check if the reverse of the word is in the list\n            if [[ $word == $(rev <<< \"$reverse\") ]]; then\n                (( count++ ))\n            fi\n        done\n    done\n\n    echo $count",
    "  local list=$1\n  local count=0\n  for word in $list; do\n    local reverse_word=$(echo $word | rev)\n    if [[ $list =~ $reverse_word ]]; then\n      count=$((count + 1))\n    fi\n  done\n  echo $count",
    "    local list=\"$1\"\n    local count=0\n    local i=0\n    local j=0\n    local len=0\n    local tmp=0\n    local list_arr=()\n    local rev_arr=()\n    local rev_str=''\n    local rev_str_len=0\n    local rev_str_len_half=0\n    local rev_str_len_half_floor=0\n    local rev_str_len_half_ceil=0\n    local rev_str_len_half_floor_char=''\n    local rev_str_len_half_ceil_char=''\n    local rev_str_len_half_floor_char_rev=''\n    local rev_str_len_half_ceil_char_rev=''\n    local rev_str_len_half_floor_char_rev_len=0\n    local rev_str_len_half_ceil_char_rev_len=0\n    local rev_str_len_half_floor_char_rev_len_half=0\n    local rev_str_len_half_ceil_char_rev_len_half=0\n    local rev_str_len_half_floor_char_rev_len_half_floor=0\n    local rev_str_len_half_ceil_char_rev_len_half_floor=0\n    local rev_str_len_half_floor_char_rev_len_half_ceil=0\n    local rev_str_len_half_ceil_char_rev_len_half_ceil=0\n    local rev_str_len_half_floor_char_rev_len_half_floor_char=''\n    local rev_str_len_half_ceil_char_rev_len_half_floor_char=''\n    local rev_str_len_half_floor_char_rev_len_half_ceil_char=''\n    local rev_str_len_half_ceil_char_rev_len_half_ceil_char=''\n    local rev_str_len_half_floor_char_rev_len_half_floor_char_rev=''\n    local rev_str_",
    "    local list=$1\n    local count=0\n    for word in $list; do\n        if [[ $word == $(rev <<< $word) ]]; then\n            ((count++))\n        fi\n    done\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  while read -r word; do\n    local reverse=\"$(echo \"$word\" | rev)\"\n    if [[ \"$list\" =~ $reverse ]]; then\n      ((count++))\n    fi\n  done <<< \"$list\"\n  echo \"$count\"",
    "    local list=$1\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [[ $i == $j ]]; then\n                continue\n            fi\n            if [[ $i == $(rev <<< $j) ]]; then\n                count=$((count + 1))\n            fi\n        done\n    done\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  local word\n  for word in $list; do\n    local reverse_word=\"$(echo $word | rev)\"\n    if [[ \"$word\" == \"$reverse_word\" ]]; then\n      count=$((count + 1))\n    fi\n  done\n  echo $count",
    "  local list=\"$1\"\n  local count=0\n  local i=0\n  local j=0\n  local reverse=\"\"\n  for i in $list; do\n    for j in $list; do\n      reverse=$(echo \"$j\" | rev)\n      if [ \"$i\" = \"$reverse\" ]; then\n        ((count++))\n      fi\n    done\n  done\n  echo $count",
    "    local list=$1\n    local pairs=0\n    for word in $list; do\n        if [[ $(echo $list | grep -o $word | wc -l) -gt 1 ]]; then\n            pairs=$((pairs + 1))\n        fi\n    done\n    echo $pairs",
    "    local list=\"$1\"\n    local count=0\n    for word in $list; do\n        for word2 in $list; do\n            if [[ \"$word\" == \"$(rev <<< \"$word2\")\" ]]; then\n                ((count++))\n            fi\n        done\n    done\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  local i=0\n  local j=0\n  local len=0\n  local rev=''\n  local word=''\n  local words=()\n\n  words=($list)\n  len=${#words[@]}\n\n  for ((i=0; i<len; i++)); do\n    word=${words[$i]}\n    rev=$(echo \"$word\" | rev)\n    for ((j=i+1; j<len; j++)); do\n      if [ \"$rev\" = \"${words[$j]}\" ]; then\n        ((count++))\n      fi\n    done\n  done\n\n  echo \"$count\"",
    "    local list=\"$1\"\n    local count=0\n    local word\n    local reversed_word\n    for word in $list; do\n        reversed_word=$(echo $word | rev)\n        if [[ $list =~ $reversed_word ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo $count",
    "    local list=\"$1\"\n    local count=0\n    for word in $list; do\n        local reversed=\"$(echo $word | rev)\"\n        if [[ \"$word\" = \"$reversed\" ]]; then\n            continue\n        fi\n        if [[ \"$list\" =~ $reversed ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo $count",
    "    local list=$1\n    local count=0\n    for i in $list; do\n        for j in $list; do\n            if [[ $i = $(echo $j | rev) ]]; then\n                count=$((count+1))\n            fi\n        done\n    done\n    echo $count",
    "  local list=$1\n  local count=0\n  local i=0\n  local j=0\n  local len=0\n  local rev=''\n  local word=''\n  local words=()\n\n  # Split the list into an array\n  IFS=' ' read -r -a words <<< \"$list\"\n\n  # Loop through the list\n  for (( i=0; i<${#words[@]}; i++ )); do\n    word=${words[$i]}\n    len=${#word}\n    rev=''\n\n    # Reverse the word\n    for (( j=len-1; j>=0; j-- )); do\n      rev+=${word:$j:1}\n    done\n\n    # Check if the reversed word is in the list\n    if [[ \" ${words[@]} \" =~ \" ${rev} \" ]]; then\n      count=$((count+1))\n    fi\n  done\n\n  # Return the count\n  echo $count",
    "  local list=$1\n  local count=0\n  for i in $list; do\n    for j in $list; do\n      if [[ $i == $(rev <<< $j) ]]; then\n        ((count++))\n      fi\n    done\n  done\n  echo $count"
  ]
}