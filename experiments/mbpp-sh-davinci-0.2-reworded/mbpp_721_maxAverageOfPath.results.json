{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -a matrix\n  local -a path\n  local -i i j\n  local -i max_i max_j\n  local -i max_avg\n  local -i avg\n  local -i sum\n  local -i count\n  local -i max_count\n  local -i max_sum\n  local -i max_avg_i\n  local -i max_avg_j\n  local -i max_avg_count\n  local -i max_avg_sum\n  local -i max_avg_avg\n  local -i max_avg_max_i\n  local -i max_avg_max_j\n  local -i max_avg_max_avg\n  local -i max_avg_max_count\n  local -i max_avg_max_sum\n  local -i max_avg_max_avg_i\n  local -i max_avg_max_avg_j\n  local -i max_avg_max_avg_count\n  local -i max_avg_max_avg_sum\n  local -i max_avg_max_avg_avg\n  local -i max_avg_max_avg_max_i\n  local -i max_avg_max_avg_max_j\n  local -i max_avg_max_avg_max_avg\n  local -i max_avg_max_avg_max_count\n  local -i max_avg_max_avg_max_sum\n  local -i max_avg_max_avg_max_avg_i\n  local -i max_avg_max_avg_max_avg_j\n  local -i max_avg_max_avg_max_avg_count\n  local -i max_avg_max_avg_max_avg_sum\n  local -i max_avg_max_avg_max_avg_avg\n  local -i max_avg_max_avg_max_avg_max_i\n  local -i max_av\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=\"$(echo \"$matrix\" | wc -l)\"\n  local cols=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local maxAverage=0\n  local maxAveragePath=()\n  local maxAveragePathCost=0\n  local maxAveragePathLength=0\n  local maxAveragePathLengths=()\n  local maxAveragePathCosts=()\n  local maxAveragePaths=()\n  local maxAveragePathsLength=0\n  local maxAveragePathsCost=0\n  local maxAveragePathsLengths=()\n  local maxAveragePathsCosts=()\n  local maxAveragePathsAverages=()\n  local maxAveragePathsAveragesLength=0\n  local maxAveragePathsAveragesCost=0\n  local maxAveragePathsAveragesLengths=()\n  local maxAveragePathsAveragesCosts=()\n  local maxAveragePathsAveragesAverages=()\n  local maxAveragePathsAveragesAveragesLength=0\n  local maxAveragePathsAveragesAveragesCost=0\n  local maxAveragePathsAveragesAveragesLengths=()\n  local maxAveragePathsAveragesAveragesCosts=()\n  local maxAveragePathsAveragesAveragesAverages=()\n  local maxAveragePathsAveragesAveragesAveragesLength=0\n  local maxAveragePathsAveragesAveragesAveragesCost=0\n  local maxAveragePathsAveragesAveragesAveragesLengths=()\n  local maxAveragePathsAveragesAveragesAveragesCosts=()\n  local maxAveragePathsAveragesAveragesAveragesAverages=()\n  local maxAveragePathsAveragesAveragesAveragesAveragesLength=0\n  local maxAveragePathsAveragesAveragesAveragesAveragesCost=0\n  local maxAveragePathsAveragesAveragesAveragesAveragesLengths=()\n  local maxAveragePathsAveragesAveragesAveragesAveragesCosts=()\n  local maxAveragePathsAveragesAveragesAveragesAveragesAverages=()\n  local maxAveragePathsAveragesAveragesAveragesAveragesAveragesLength=0\n  local maxAveragePathsAveragesAveragesAveragesAverages\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      k=$((i*m+j))\n      dp[k]=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk \"{print \\$$((j+1))}\")\n      if ((i>0)); then\n        dp[k]=$(echo \"${dp[k]} ${dp[k-m]}\")\n      fi\n      if ((j>0)); then\n        dp[k]=$(echo \"${dp[k]} ${dp[k-1]}\")\n      fi\n      dp[k]=$(echo \"${dp[k]}\" | tr ' ' '\\n' | sort -n | tail -n1)\n      path[k]=$(echo \"${dp[k]}\" | tr ' ' '\\n' | sort -n | tail -n1 | wc -l)\n    done\n  done\n  echo \"${dp[-1]}\" | tr ' ' '\\n' | sort -n | tail -n1 | awk '{print $1/'${path[-1]}'}'\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j k\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      fi\n    done\n  done\n  echo \"${dp[n-1]} $((n*n))\" | awk '{printf \"%.2f\\n\", $1/$2}'\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp6obpm6ch.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmp6obpm6ch.sh: line 27: dp: bad array subscript\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_sum=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_l=0\n  local -i max_max_sum=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_l=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_l=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_k=0\n  local -i max_max_max_max_max_l=0\n  local -i max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n\n  while read -r line; do\n    j=0\n    for cost in $line; do\n      (( sum += cost ))\n      if (( i == n-1 && j == m-1 )); then\n        (( max = sum ))\n        (( max_i = i ))\n        (( max_j = j ))\n      elif (( i == n-1 )); then\n        (( sum -= cost ))\n      elif (( j == m-1 )); then\n        (( sum -= cost ))\n      fi\n      (( j++ ))\n    done\n    (( i++ ))\n  done <<< \"$matrix\"\n\n  echo \"$max\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp4_5g0l8t.sh: line 20: ((: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n/tmp/tmp4_5g0l8t.sh: line 26: ((: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n/tmp/tmp4_5g0l8t.sh: line 20: ((: 4\\\\n7: syntax error: invalid arithmetic operator (error token is \"\\\\n7\")\\n/tmp/tmp4_5g0l8t.sh: line 26: ((: 4\\\\n7: syntax error: invalid arithmetic operator (error token is \"\\\\n7\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r input=\"$1\"\n  local -r n=\"$(wc -l <<< \"$input\")\"\n  local -r m=\"$(head -n 1 <<< \"$input\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $max / $max\")\"\n  local -r max_path=\"$(for i in $(seq 1 \"$n\"); do echo \"$(head -n \"$i\" <<< \"$input\" | tail -n 1 | tr ' ' '\\n')\"; done | tr '\\n' ' ')\"\n  local -r min_path=\"$(for i in $(seq 1 \"$n\"); do echo \"$(head -n \"$i\" <<< \"$input\" | tail -n 1 | tr ' ' '\\n' | tac)\"; done | tr '\\n' ' ')\"\n  local -r max_path_average=\"$(bc -l <<< \"scale=2; $(echo \"$max_path\" | tr ' ' '+') / $max\")\"\n  local -r min_path_average=\"$(bc -l <<< \"scale=2; $(echo \"$min_path\" | tr ' ' '+') / $max\")\"\n  local -r max_path_average_rounded=\"$(bc -l <<< \"scale=0; $max_path_average + 0.5\")\"\n  local -r min_path_average_rounded=\"$(bc -l <<< \"scale=0; $min_path_average + 0.5\")\"\n  local -r max_path_average_rounded_int=\"$(bc -l <<< \"scale=0; $max_path_average_rounded / 1\")\"\n  local -r min_path_average_rounded_int=\"$(bc -l <<< \"scale=0; $min_path_average_rounded / 1\")\"\n  local -r max_path_average_rounded_int_diff=\"$(bc -l <<< \"scale=0; $max_path\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpl98hrmxh.sh: line 32: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmpl98hrmxh.sh: line 36: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a arr=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_sum=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_sum=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_k=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max_j=0\n  local -i max_max_max_max_max_max_k=0\n  local -i max_max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max_max=0\n  local -i max_max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]+${matrix[i]:j:1}:dp[j]+${matrix[i]:j:1}))\n      fi\n    done\n  done\n  echo $((dp[n-1]/(2*n-1)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpdti1h8f3.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpdti1h8f3.sh: line 26: dp: bad array subscript\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i left=${dp[j]}\n      local -i top=${dp[j+1]}\n      local -i cur=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n $((i+1)) | tail -n 1)\n      dp[j]=$(((left+top+cur)/3))\n    done\n  done\n  echo \"${dp[0]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpyjrh4slf.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp=(0)\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i][0]))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<n;j++)); do\n      dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n      dp[j]=$((dp[j]+matrix[i][j]))\n    done\n  done\n  echo $((dp[n-1]/n))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpwc72k4nu.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpwc72k4nu.sh: line 18: dp[n-1]/n: division by 0 (error token is \"n\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n\n  local -A matrix_map\n  local -i i=0\n  while read -r line; do\n    local -i j=0\n    for cell in $line; do\n      matrix_map[\"$i,$j\"]=\"$cell\"\n      j+=1\n    done\n    i+=1\n  done <<< \"$matrix\"\n\n  local -A cache\n  local -i cache_hits=0\n\n  local -i max_average_path_cost=0\n  local -i max_average_path_length=0\n\n  local -i max_average_path_cost_cache=0\n  local -i max_average_path_length_cache=0\n\n  local -i max_average_path_cost_cache_hits=0\n  local -i max_average_path_length_cache_hits=0\n\n  local -i max_average_path_cost_cache_misses=0\n  local -i max_average_path_length_cache_misses=0\n\n  local -i max_average_path_cost_cache_misses_total=0\n  local -i max_average_path_length_cache_misses_total=0\n\n  local -i max_average_path_cost_cache_misses_total_hits=0\n  local -i max_average_path_length_cache_misses_total_hits=0\n\n  local -i max_average_path_cost_cache_misses_total_misses=0\n  local -i max_average_path_length_cache_misses_total_misses=0\n\n  local -i max_average_path_cost_cache_misses_total_misses_total=0\n  local -i max_average_path_length_cache_misses_total\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpebyvvknk.sh: line 10: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -a path=()\n  local -i maxAverage=0\n  local -i totalCost=0\n  local -i numCells=0\n  local -i i=0\n  local -i j=0\n  local -i currentCost=0\n  local -i currentAverage=0\n  local -i currentNumCells=0\n  local -i currentTotalCost=0\n\n  # Start at the top left cell\n  path+=(\"${matrix[0]}\")\n  totalCost+=${matrix[0]}\n  numCells=1\n\n  # Iterate over the matrix\n  while [[ $i -lt ${#matrix[@]} ]]; do\n    currentCost=${matrix[i]}\n    currentTotalCost=$totalCost\n    currentNumCells=$numCells\n    # If we're not at the end of the row\n    if [[ $j -lt ${#matrix[0]} ]]; then\n      # If we're not at the end of the column\n      if [[ $i -lt ${#matrix[@]} ]]; then\n        # If we're not at the end of the row\n        if [[ $j -lt ${#matrix[0]} ]]; then\n          # Add the cost of the current cell to the total cost\n          currentTotalCost+=$currentCost\n          # Increment the number of cells\n          ((currentNumCells++))\n          # Calculate the average\n          currentAverage=$((currentTotalCost/currentNumCells))\n          # If the average is greater than the max average\n          if [[ $currentAverage -gt $maxAverage ]]; then\n            # Set the max average to the current average\n            maxAverage=$currentAverage\n          fi\n        fi\n      fi\n    fi\n    # If we're not at the end of the row\n    if [[ $j -lt ${#matrix[0]} ]]; then\n      # If we're not at the end of the column\n      if [[ $i -lt ${#matrix[@]} ]]; then\n        # Add the cost of the current cell to the total cost\n        currentTotalCost+=$currentCost\n        # Increment the number of cells\n        ((currentNumCells++))\n        #\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8zuyqtie.sh: line 57: syntax error near unexpected token `}'\\n/tmp/tmp8zuyqtie.sh: line 57: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  dp[0]=${matrix[0]}\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i]))\n  done\n  for ((i=n;i<n*n;i++)); do\n    dp[i]=$((dp[i-n]+matrix[i]))\n  done\n  for ((i=n;i<n*n;i++)); do\n    for ((j=i-n+1;j<i;j++)); do\n      if ((dp[j]+matrix[i]>dp[i])); then\n        dp[i]=$((dp[j]+matrix[i]))\n      fi\n    done\n  done\n  echo $((dp[n*n-1]/(2*n-1)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpbtyhqnru.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i rows=$(wc -l <<< \"$matrix\")\n  local -i cols=$(head -n1 <<< \"$matrix\" | wc -w)\n  local -i i=0 j=0\n  local -i total=0\n  local -i max=0\n  local -a path\n  local -a maxPath\n  local -a row\n  local -a col\n  local -a cost\n  local -a maxCost\n  local -a next\n  local -a maxNext\n  local -a nextRow\n  local -a nextCol\n  local -a nextCost\n  local -a nextMaxCost\n  local -a nextMaxNext\n  local -a nextMaxRow\n  local -a nextMaxCol\n  local -a nextMaxPath\n  local -a nextPath\n  local -a nextNext\n  local -a nextNextRow\n  local -a nextNextCol\n  local -a nextNextCost\n  local -a nextNextNext\n  local -a nextNextNextRow\n  local -a nextNextNextCol\n  local -a nextNextNextCost\n  local -a nextNextNextNext\n  local -a nextNextNextNextRow\n  local -a nextNextNextNextCol\n  local -a nextNextNextNextCost\n  local -a nextNextNextNextNext\n  local -a nextNextNextNextNextRow\n  local -a nextNextNextNextNextCol\n  local -a nextNextNextNextNextCost\n  local -a nextNextNextNextNextNext\n  local -a nextNextNextNextNextNextRow\n  local -a nextNextNextNextNextNextCol\n  local -a nextNextNextNextNextNextCost\n  local -a nextNextNextNextNextNextNext\n  local -a nextNextNextNextNextNextNextRow\n  local -a nextNextNextNextNextNextNextCol\n  local -a nextNextNextNextNextNextNextCost\n  local -a nextNextNextNextNextNextNextNext\n  local -a nextNextNextNextNextNextNextNextRow\n  local -a nextNextNextNextNextNextNextNextCol\n  local -a nextNextNextNextNextNextNextNextCost\n  local -a nextNextNextNextNextNextNextNextNext\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i=0 j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_sum_n=0\n  local -i max_sum_i=0\n  local -i max_sum_j=0\n  local -i max_sum_max=0\n  local -i max_sum_sum=0\n  local -i max_sum_max_i=0\n  local -i max_sum_max_j=0\n  local -i max_sum_max_n=0\n  local -i max_sum_max_sum=0\n  local -i max_sum_max_max=0\n  local -i max_sum_max_max_i=0\n  local -i max_sum_max_max_j=0\n  local -i max_sum_max_max_n=0\n  local -i max_sum_max_max_sum=0\n  local -i max_sum_max_max_max=0\n  local -i max_sum_max_max_max_i=0\n  local -i max_sum_max_max_max_j=0\n  local -i max_sum_max_max_max_n=0\n  local -i max_sum_max_max_max_sum=0\n  local -i max_sum_max_max_max_max=0\n  local -i max_sum_max_max_max_max_i=0\n  local -i max_sum_max_max_max_max_j=0\n  local -i max_sum_max_max_max_max_n=0\n  local -i max_sum_max_max_max_max_sum=0\n  local -i max_sum_max_max_max_max_max=0\n  local -i max_sum_max_max_max_max_max_i=0\n\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpymz14tie.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max=$((n * m))\n  local -r max_average=$(bc -l <<< \"scale=2; ($(tr ' ' '+' <<< \"$matrix\") / $max)\")\n  local -r max_average_rounded=$(printf '%.*f\\n' 0 $max_average)\n  local -r max_average_rounded_plus_one=$((max_average_rounded + 1))\n  local -r max_average_rounded_plus_one_decimal=$(bc -l <<< \"scale=2; ($max_average_rounded_plus_one / 1)\")\n  local -r max_average_rounded_plus_one_decimal_rounded=$(printf '%.*f\\n' 2 $max_average_rounded_plus_one_decimal)\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one=$(bc -l <<< \"scale=2; ($max_average_rounded_plus_one_decimal_rounded + 0.01)\")\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one_rounded=$(printf '%.*f\\n' 2 $max_average_rounded_plus_one_decimal_rounded_plus_one)\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one_rounded_plus_one=$(bc -l <<< \"scale=2; ($max_average_rounded_plus_one_decimal_rounded_plus_one_rounded + 0.01)\")\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one_rounded_plus_one_rounded=$(printf '%.*f\\n' 2 $max_average_rounded_plus_one_decimal_rounded_plus_one_rounded_plus_one)\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpsk4bgb_s.sh: line 10: bc: command not found\\n/tmp/tmpsk4bgb_s.sh: line 13: bc: command not found\\n/tmp/tmpsk4bgb_s.sh: line 15: bc: command not found\\n/tmp/tmpsk4bgb_s.sh: line 17: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n _map=$1\n  local -i _n=${#_map[@]}\n  local -i _i _j\n  local -a _dp\n  for ((_i=0;_i<_n;_i++)); do\n    _dp[$_i]=$(echo \"${_map[$_i]}\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  done\n  for ((_i=1;_i<_n;_i++)); do\n    for ((_j=0;_j<_n;_j++)); do\n      local -i _val=${_dp[$_j]}\n      if ((_j>0)); then\n        _val=$((_val+${_dp[$_j-1]}))\n      fi\n      _dp[$_j]=$((_val/$((_i+1))))\n    done\n  done\n  echo \"${_dp[@]}\" | tr ' ' '\\n' | sort -n | tail -n 1\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpw26ir5xn.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -1 | wc -w)\n  local -a costs=()\n  local -a paths=()\n  local -a path=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i cost=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_cost=0\n  local -i max_path_len=0\n  local -i path_len=0\n  local -i path_cost=0\n  local -i path_avg=0\n  local -i max_path_avg=0\n  local -i max_path_i=0\n  local -i max_path_j=0\n  local -i max_path_cost=0\n  local -i max_path_len=0\n  local -i max_path_avg=0\n  local -i max_path_avg_i=0\n  local -i max_path_avg_j=0\n  local -i max_path_avg_cost=0\n  local -i max_path_avg_len=0\n  local -i max_path_avg_avg=0\n  local -i max_path_avg_avg_i=0\n  local -i max_path_avg_avg_j=0\n  local -i max_path_avg_avg_cost=0\n  local -i max_path_avg_avg_len=0\n  local -i max_path_avg_avg_avg=0\n  local -i max_path_avg_avg_avg_i=0\n  local -i max_path_avg_avg_avg_j=0\n  local -i max_path_avg_avg_avg_cost=0\n  local -i max_path_avg_avg_avg\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local n=${#matrix[@]}\n  for ((i=1;i<n;i++)); do\n    matrix[0][i]=$((matrix[0][i-1]+matrix[0][i]))\n    matrix[i][0]=$((matrix[i-1][0]+matrix[i][0]))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<n;j++)); do\n      matrix[i][j]=$((matrix[i-1][j]+matrix[i][j]))\n      if ((matrix[i][j]<matrix[i][j-1]+matrix[i][j])); then\n        matrix[i][j]=$((matrix[i][j-1]+matrix[i][j]))\n      fi\n    done\n  done\n  echo $((matrix[n-1][n-1]/(2*n-1)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpi3iedacr.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpi3iedacr.sh: line 20: matrix[n-1][n-1]/(2*n-1): syntax error: invalid arithmetic operator (error token is \"[n-1]/(2*n-1)\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local dp=()\n  local i j\n  for ((i=0;i<n;i++)); do\n    dp[$i]=()\n    for ((j=0;j<m;j++)); do\n      dp[$i][$j]=0\n    done\n  done\n  dp[0][0]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n  for ((i=1;i<n;i++)); do\n    dp[$i][0]=$((${dp[$((i-1))][0]} + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')))\n  done\n  for ((j=1;j<m;j++)); do\n    dp[0][$j]=$((${dp[0][$((j-1))]} + $(echo \"$matrix\" | head -n 1 | awk -v j=$((j+1)) '{print $j}')))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<m;j++)); do\n      dp[$i][$j]=$(($(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk -v j=$((j+1)) '{print $j}') + $((${dp[$((i-1))][$j]} > ${dp[$i][$((j-1))]} ? ${dp[$((i-1))][$j]} : ${dp[$i][$((j-1))]}))))\n    done\n  done\n  echo \"${dp[$((n-1))][$((m-1))]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpzmg3zie9.sh: line 12: dp[$i]: cannot assign list to array member\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=$(wc -l <<< \"$matrix\")\n  local -i i j\n  local -a dp=(0)\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+${matrix[i-1]:i-1:1}))\n  done\n  for ((i=1;i<n;i++)); do\n    dp[0]=$((dp[0]+${matrix[i]:0:1}))\n    for ((j=1;j<n;j++)); do\n      dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      ((dp[j]>dp[j-1])) && dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n    done\n  done\n  echo \"${dp[-1]} $((n*n))\" | bc -l\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpgf_vxdf5.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpgf_vxdf5.sh: line 20: bc: command not found\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_sum=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_sum=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max_j=0\n  local -i max_max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max_max=0\n  local -i max_max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r input=\"$1\"\n  local -r n=\"$(echo \"$input\" | wc -l)\"\n  local -r m=\"$(echo \"$input\" | head -n 1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$input\" | tr ' ' '\\n' | sort -nr | head -n 1)\"\n  local -r min_cost=\"$(echo \"$input\" | tr ' ' '\\n' | sort -n | head -n 1)\"\n  local -r max_path_cost=\"$(($n * $max_cost))\"\n  local -r min_path_cost=\"$(($n * $min_cost))\"\n  local -r max_average=\"$(echo \"scale=2; $max_path_cost / $n\" | bc)\"\n  local -r min_average=\"$(echo \"scale=2; $min_path_cost / $n\" | bc)\"\n  local -r min_average_rounded=\"$(echo \"scale=0; $min_average / 1\" | bc)\"\n  local -r max_average_rounded=\"$(echo \"scale=0; $max_average / 1\" | bc)\"\n  local -r min_average_rounded_plus_one=\"$(($min_average_rounded + 1))\"\n  local -r max_average_rounded_minus_one=\"$(($max_average_rounded - 1))\"\n  local -r min_average_rounded_plus_one_minus_one=\"$(($min_average_rounded_plus_one - 1))\"\n  local -r max_average_rounded_minus_one_plus_one=\"$(($max_average_rounded_minus_one + 1))\"\n  local -r min_average_rounded_plus_one_minus_one_plus_one=\"$(($min_average_rounded_plus_one_minus_one + 1))\"\n  local -r max_average_rounded_minus_one_plus_one_minus_one=\"$(($max_average_rounded_minus_one_plus_one - 1))\"\n  local -r min_average_rounded_plus_one_minus_one_plus_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpbnl47_s4.sh: line 13: bc: command not found\\n/tmp/tmpbnl47_s4.sh: line 14: bc: command not found\\n/tmp/tmpbnl47_s4.sh: line 15: bc: command not found\\n/tmp/tmpbnl47_s4.sh: line 16: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -a matrix_array\n  local -a path_array\n  local -a path_costs\n  local -a path_lengths\n  local -a path_averages\n  local -a path_averages_sorted\n  local -a path_averages_sorted_indexes\n  local -i i\n  local -i j\n  local -i k\n  local -i n\n  local -i path_count\n  local -i path_length\n  local -i path_cost\n  local -i path_average\n  local -i path_average_max\n  local -i path_average_max_index\n  local -i path_average_max_length\n  local -i path_average_max_cost\n  local -i path_average_max_average\n  local -i path_average_max_average_rounded\n  local -i path_average_max_average_rounded_length\n  local -i path_average_max_average_rounded_cost\n  local -i path_average_max_average_rounded_average\n  local -i path_average_max_average_rounded_average_rounded\n  local -i path_average_max_average_rounded_average_rounded_length\n  local -i path_average_max_average_rounded_average_rounded_cost\n  local -i path_average_max_average_rounded_average_rounded_average\n  local -i path_average_max_average_rounded_average_rounded_average_rounded\n  local -i path_average_max_average_rounded_average_rounded_average_rounded_length\n  local -i path_average_max_average_rounded_average_rounded_average_rounded_cost\n  local -i path_average_max_average_rounded_average_rounded_average_rounded_average\n  local -i path_average_max_average_rounded_average_rounded_average_rounded_average_rounded\n  local -i path_average_max_average_rounded_average_rounded_average_rounded_average_rounded_length\n  local -i path_average_max_average_rounded_average_rounded_average_rounded_average_rounded_cost\n  local -\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\n  local -r max_cost=$((n * m * 9))\n  local -r max_average=$((max_cost / n))\n  local -r max_average_decimal=$((max_average / 10))\n  local -r max_average_fraction=$((max_average % 10))\n  local -r max_average_fraction_decimal=$((max_average_fraction / 5))\n  local -r max_average_fraction_fraction=$((max_average_fraction % 5))\n  local -r max_average_fraction_fraction_decimal=$((max_average_fraction_fraction / 2))\n  local -r max_average_fraction_fraction_fraction=$((max_average_fraction_fraction % 2))\n  local -r max_average_fraction_fraction_fraction_decimal=$((max_average_fraction_fraction_fraction / 1))\n  local -r max_average_fraction_fraction_fraction_fraction=$((max_average_fraction_fraction_fraction % 1))\n  local -r max_average_fraction_fraction_fraction_fraction_decimal=$((max_average_fraction_fraction_fraction_fraction / 1))\n  local -r max_average_fraction_fraction_fraction_fraction_fraction=$((max_average_fraction_fraction_fraction_fraction % 1))\n  local -r max_average_fraction_fraction_fraction_fraction_fraction_decimal=$((max_average_fraction_fraction_fraction_fraction_fraction / 1))\n  local -r max_average_fraction_fraction_fraction_fraction_fraction_fraction=$((max_average_fraction_fraction_fraction_fraction_fraction % 1))\n  local -r max_average_fraction_fraction_fraction\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local max=0\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n  local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local cb=0\n  local cc=0\n  local cd=0\n  local\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i n\n  local -i i\n  local -i j\n  local -i k\n  local -i max\n  local -i max_i\n  local -i max_j\n  local -i max_k\n  local -i max_sum\n  local -i max_count\n  local -i sum\n  local -i count\n  local -i cost\n  local -i cost_i\n  local -i cost_j\n  local -i cost_k\n  local -i cost_sum\n  local -i cost_count\n  local -i cost_max\n  local -i cost_max_i\n  local -i cost_max_j\n  local -i cost_max_k\n  local -i cost_max_sum\n  local -i cost_max_count\n  local -i cost_max_cost\n  local -i cost_max_cost_i\n  local -i cost_max_cost_j\n  local -i cost_max_cost_k\n  local -i cost_max_cost_sum\n  local -i cost_max_cost_count\n  local -i cost_max_cost_max\n  local -i cost_max_cost_max_i\n  local -i cost_max_cost_max_j\n  local -i cost_max_cost_max_k\n  local -i cost_max_cost_max_sum\n  local -i cost_max_cost_max_count\n  local -i cost_max_cost_max_cost\n  local -i cost_max_cost_max_cost_i\n  local -i cost_max_cost_max_cost_j\n  local -i cost_max_cost_max_cost_k\n  local -i cost_max_cost_max_cost_sum\n  local -i cost_max_cost_max_cost_count\n  local -i cost_max_cost_max_cost_max\n  local -i cost_max_cost_max_cost_max_i\n  local -i cost_max_cost_max_cost_max_j\n  local -i cost_max_cost_max_cost_max_k\n  local -\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_m=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_count=0\n  local -i max_max_sum=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_l=0\n  local -i max_max_m=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_count=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_l=0\n  local -i max_max_max_m=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_count=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_l=0\n  local -i max_max_max_max_m=0\n  local -\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -i i j\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      dp[i,j]=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i+1{print $j+1}')\n      if ((i > 0)); then\n        local -i up=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i{print $j+1}')\n        dp[i,j]=$((dp[i,j] + ((dp[i-1,j] > up) ? dp[i-1,j] : up)))\n      fi\n      if ((j > 0)); then\n        local -i left=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i+1{print $j}')\n        dp[i,j]=$((dp[i,j] + ((dp[i,j-1] > left) ? dp[i,j-1] : left)))\n      fi\n    done\n  done\n  echo \"${dp[n-1,m-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmponxcrhew.sh: line 19: local: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r n_m=\"$((n * m))\"\n  local -r n_m_1=\"$((n_m - 1))\"\n  local -r n_1=\"$((n - 1))\"\n  local -r m_1=\"$((m - 1))\"\n  local -r n_m_1_n_1=\"$((n_m_1 - n_1))\"\n  local -r n_m_1_m_1=\"$((n_m_1 - m_1))\"\n  local -r n_m_1_n_1_m_1=\"$((n_m_1 - n_1 - m_1))\"\n  local -r n_m_1_n_1_m_1_1=\"$((n_m_1_n_1_m_1 + 1))\"\n  local -r n_m_1_n_1_m_1_2=\"$((n_m_1_n_1_m_1 + 2))\"\n  local -r n_m_1_n_1_m_1_3=\"$((n_m_1_n_1_m_1 + 3))\"\n  local -r n_m_1_n_1_m_1_4=\"$((n_m_1_n_1_m_1 + 4))\"\n  local -r n_m_1_n_1_m_1_5=\"$((n_m_1_n_1_m_1 + 5))\"\n  local -r n_m_1_n_1_m_1_6=\"$((n_m_1_n_1_m_1 + 6))\"\n  local -r n_m_1_n_1_m_1_7=\"$((n_m_1_n_1_m_1 + 7))\"\n  local -r n_m_1_n_1_m_1_8=\"$\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpc_4j2f8c.sh: line 35: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmpc_4j2f8c.sh: line 39: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i max=0\n  local -i sum=0\n  local -i average=0\n  local -i maxAverage=0\n  local -i maxAverageIndex=0\n  local -i maxAverageIndexI=0\n  local -i maxAverageIndexJ=0\n  local -i maxAverageIndexK=0\n  local -i maxAverageIndexL=0\n  local -i maxAverageIndexM=0\n  local -i maxAverageIndexN=0\n  local -i maxAverageIndexO=0\n  local -i maxAverageIndexP=0\n  local -i maxAverageIndexQ=0\n  local -i maxAverageIndexR=0\n  local -i maxAverageIndexS=0\n  local -i maxAverageIndexT=0\n  local -i maxAverageIndexU=0\n  local -i maxAverageIndexV=0\n  local -i maxAverageIndexW=0\n  local -i maxAverageIndexX=0\n  local -i maxAverageIndexY=0\n  local -i maxAverageIndexZ=0\n  local -i maxAverageIndexAA=0\n  local -i maxAverageIndexAB=0\n  local -i maxAverageIndexAC=0\n  local -i maxAverageIndexAD=0\n  local -i maxAverageIndexAE=0\n  local -i maxAverageIndexAF=0\n  local -i maxAverageIndexAG=0\n  local -i maxAverageIndexAH=0\n  local -i maxAverageIndexAI=0\n  local -i maxAverageIndexAJ=0\n  local -i maxAverageIndexAK=0\n  local -i maxAverageIndexAL=0\n  local -i maxAverageIndexAM=0\n  local -i maxAverageIndexAN=0\n  local -i maxAverageIndexAO=0\n  local -i maxAverageIndexAP=0\n  local -i maxAverageIndexAQ=0\n  local -i maxAverageIndexAR=0\n  local -i maxAverageIndexAS=0\n  local -i\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i i j n\n  local -i max_average=0\n  local -i max_average_i=0\n  local -i max_average_j=0\n  local -i sum=0\n  local -i count=0\n  local -i cost=0\n  local -i average=0\n  local -i max_cost=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n  local -i max_cost_count=0\n  local -i max_cost_sum=0\n  local -i max_cost_average=0\n\n  # read the matrix\n  i=0\n  while read -r line; do\n    j=0\n    for cost in $line; do\n      matrix[$i,$j]=$cost\n      ((j++))\n    done\n    ((i++))\n  done <<< \"$1\"\n\n  # get the size of the matrix\n  n=$i\n\n  # find the max average\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      sum=0\n      count=0\n      cost=${matrix[$i,$j]}\n      for ((k=i; k<n; k++)); do\n        for ((l=j; l<n; l++)); do\n          ((sum+=${matrix[$k,$l]}))\n          ((count++))\n        done\n      done\n      average=$((sum/count))\n      if [[ $average -gt $max_average ]]; then\n        max_average=$average\n        max_average_i=$i\n        max_average_j=$j\n      fi\n    done\n  done\n\n  # find the max cost\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      cost=${matrix[$i,$j]}\n      if [[ $cost -gt $max_cost ]]; then\n        max_cost=$cost\n        max_cost_i=$i\n        max_cost_j=$j\n      fi\n   \n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9ee0nem5.sh: line 67: syntax error near unexpected token `}'\\n/tmp/tmp9ee0nem5.sh: line 67: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_path=()\n  local max_sum=0\n  local max_len=0\n  local max_path_str=''\n  local path=()\n  local sum=0\n  local len=0\n  local path_str=''\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local cell=0\n  local average=0\n  local paths=()\n  local path_strs=()\n  local path_sum=0\n  local path_len=0\n  local path_average=0\n  local path_str_average=0\n  local path_str_sum=0\n  local path_str_len=0\n  local path_str_average=0\n  local path_str_max_average=0\n  local path_str_max_sum=0\n  local path_str_max_len=0\n  local path_str_max_path=()\n  local path_str_max_path_str=''\n  local path_str_max_average_path_str=''\n  local path_str_max_average_path_str_sum=0\n  local path_str_max_average_path_str_len=0\n  local path_str_max_average_path_str_average=0\n  local path_str_max_average_path_str_max_average=0\n  local path_str_max_average_path_str_max_sum=0\n  local path_str_max_average_path_str_max_len=0\n  local path_str_max_average_path_str_max_path=()\n  local path_str_max_average_path_str_max_path_str=''\n  local path_str_max_average_path_str_max_average_path_str=''\n  local path_str_max_average_path_str_max_average_path_str_sum\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a path\n  local -a costs\n  local -a row_sums\n  local -a col_sums\n  local -a row_costs\n  local -a col_costs\n  local -a row_avgs\n  local -a col_avgs\n  local -a row_paths\n  local -a col_paths\n  local -a row_path_costs\n  local -a col_path_costs\n  local -a row_path_avgs\n  local -a col_path_avgs\n  local -a row_path_max_avgs\n  local -a col_path_max_avgs\n  local -a path_max_avgs\n  local -a path_max_avgs_idx\n  local -a path_max_avgs_idx_sorted\n  local -a path_max_avgs_sorted\n  local -a path_max_avgs_idx_sorted_uniq\n  local -a path_max_avgs_sorted_uniq\n  local -a path_max_avgs_idx_sorted_uniq_sorted\n  local -a path_max_avgs_sorted_uniq_sorted\n  local -a path_max_avgs_idx_sorted_uniq_sorted_uniq\n  local -a path_max_avgs_sorted_uniq_sorted_uniq\n  local -a path_max_avgs_idx_sorted_uniq_sorted_uniq_sorted\n  local -a path_max_avgs_sorted_uniq_sorted_uniq_sorted\n  local -a path_max_avgs_idx_sorted_uniq_sorted_uniq_sorted_uniq\n  local -a path_max_avgs_sorted_uniq_sorted_uniq_sorted_uniq\n  local -a path_max_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n\n  local -i i\n  local -i j\n  local -i max\n  local -i max_i\n  local -i max_j\n  local -i max_n\n  local -i max_sum\n  local -i sum\n  local -i max_avg\n  local -i avg\n  local -i cost\n  local -i cost_i\n  local -i cost_j\n  local -i cost_n\n  local -i cost_sum\n  local -i cost_avg\n  local -i cost_max_avg\n  local -i cost_max_sum\n  local -i cost_max_n\n  local -i cost_max_j\n  local -i cost_max_i\n  local -i cost_max\n  local -i cost_i_max\n  local -i cost_j_max\n  local -i cost_n_max\n  local -i cost_sum_max\n  local -i cost_avg_max\n  local -i cost_max_avg_max\n  local -i cost_max_sum_max\n  local -i cost_max_n_max\n  local -i cost_max_j_max\n  local -i cost_max_i_max\n  local -i cost_max_max\n  local -i cost_i_max_max\n  local -i cost_j_max_max\n  local -i cost_n_max_max\n  local -i cost_sum_max_max\n  local -i cost_avg_max_max\n  local -i cost_max_avg_max_max\n  local -i cost_max_sum_max_max\n  local -i cost_max_n_max_max\n  local -i cost_max_j_max_max\n  local -i cost_max_i_max_max\n  local -i cost_max_max_max\n  local -i cost_i_max_max_max\n  local -i cost_j_max_max_max\n  local -i cost_n_max_max_max\n  local -i cost_sum_max_max_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n    local matrix=\"$1\"\n    local n=$(echo \"$matrix\" | wc -l)\n    local m=$(echo \"$matrix\" | head -n1 | wc -w)\n    local -a dp\n    local -i i j\n    local -i max_average=0\n    local -i max_average_count=0\n    local -i max_average_denominator=0\n    local -i max_average_numerator=0\n    local -i max_average_path_count=0\n    local -i max_average_path_denominator=0\n    local -i max_average_path_numerator=0\n    local -i max_average_path_value=0\n    local -i max_average_value=0\n    local -i max_average_path_count_tmp=0\n    local -i max_average_path_denominator_tmp=0\n    local -i max_average_path_numerator_tmp=0\n    local -i max_average_path_value_tmp=0\n    local -i max_average_count_tmp=0\n    local -i max_average_denominator_tmp=0\n    local -i max_average_numerator_tmp=0\n    local -i max_average_value_tmp=0\n    local -i max_average_path_count_tmp2=0\n    local -i max_average_path_denominator_tmp2=0\n    local -i max_average_path_numerator_tmp2=0\n    local -i max_average_path_value_tmp2=0\n    local -i max_average_count_tmp2=0\n    local -i max_average_denominator_tmp2=0\n    local -i max_average_numerator_tmp2=0\n    local -i max_average_value_tmp2=0\n    local -i max_average_path_count_tmp3=0\n    local -i max_average_path_denominator_tmp3=0\n    local -i max_average_path_numerator_tmp3=0\n    local -i max_average_path\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $max / $max\")\"\n  local -r min_average_int=\"$(awk '{print int($1)}' <<< \"$min_average\")\"\n  local -r max_average_int=\"$(awk '{print int($1)}' <<< \"$max_average\")\"\n  local -r min_average_dec=\"$(awk '{print $1 - int($1)}' <<< \"$min_average\")\"\n  local -r max_average_dec=\"$(awk '{print $1 - int($1)}' <<< \"$max_average\")\"\n  local -r min_average_dec_int=\"$(awk '{print int($1 * 100)}' <<< \"$min_average_dec\")\"\n  local -r max_average_dec_int=\"$(awk '{print int($1 * 100)}' <<< \"$max_average_dec\")\"\n  local -r min_average_dec_int_len=\"$(awk '{print length($1)}' <<< \"$min_average_dec_int\")\"\n  local -r max_average_dec_int_len=\"$(awk '{print length($1)}' <<< \"$max_average_dec_int\")\"\n  local -r min_average_dec_int_len_diff=\"$((max_average_dec_int_len - min_average_dec_int_len))\"\n  local -r min_average_dec_int_len_diff_zeros=\"$(awk 'BEGIN{for(i=0;i<'$min_average_dec_int_len_diff';i++) printf \"0\"}')\"\n  local -r min_average_dec_int_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp9avm1u8v.sh: line 10: bc: command not found\\n/tmp/tmp9avm1u8v.sh: line 11: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i N=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_average=0\n  local -i average=0\n  local -i current=0\n  local -i next=0\n  local -i next_i=0\n  local -i next_j=0\n  local -i next_sum=0\n  local -i next_count=0\n  local -i next_average=0\n  local -i next_max=0\n  local -i next_max_i=0\n  local -i next_max_j=0\n  local -i next_max_count=0\n  local -i next_max_sum=0\n  local -i next_max_average=0\n  local -i next_max_average_i=0\n  local -i next_max_average_j=0\n  local -i next_max_average_count=0\n  local -i next_max_average_sum=0\n  local -i next_max_average_average=0\n  local -i next_max_average_max=0\n  local -i next_max_average_max_i=0\n  local -i next_max_average_max_j=0\n  local -i next_max_average_max_count=0\n  local -i next_max_average_max_sum=0\n  local -i next_max_average_max_average=0\n  local -i next_max_average_max_max=0\n  local -i next_max_average_max_max_i=0\n  local -i next_max_average_max_max_j=0\n  local -i next_max_average_max_max_count=0\n  local -i next_max_average_max_max_sum=0\n  local -i next_max_average\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$matrix\")\n  local -A dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((i==0 && j==0)); then\n        dp[$i,$j]=$(cut -d' ' -f1 <<< \"$matrix\")\n      elif ((i==0)); then\n        dp[$i,$j]=$((dp[$i,$((j-1))]+$(cut -d' ' -f$((j+1)) <<< \"$matrix\")))\n      elif ((j==0)); then\n        dp[$i,$j]=$((dp[$((i-1)),$j]+$(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n      else\n        dp[$i,$j]=$((dp[$((i-1)),$j]+$(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n      fi\n    done\n  done\n  echo $((dp[$((n-1)),$((m-1))]/(n+m-1)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp0t3kix9v.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmp0t3kix9v.sh: line 23: dp[0,-1]/(n+m-1): division by 0 (error token is \"(n+m-1)\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=\"$(echo \"$matrix\" | wc -l)\"\n  local m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -a dp=()\n  local -a path=()\n  local -a path_cost=()\n  local -a path_count=()\n  local -a path_average=()\n  local i j k\n  local max_average=0\n  local max_average_index=0\n  local max_average_path=()\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      dp[$i,$j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      if [[ $i -gt 0 ]]; then\n        dp[$i,$j]=$((dp[$i,$j] + dp[$((i-1)),$j]))\n      fi\n      if [[ $j -gt 0 ]]; then\n        dp[$i,$j]=$((dp[$i,$j] + dp[$i,$((j-1))]))\n      fi\n      if [[ $i -gt 0 && $j -gt 0 ]]; then\n        dp[$i,$j]=$((dp[$i,$j] - dp[$((i-1)),$((j-1))]))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      for ((k=0; k<=i; k++)); do\n        for ((l=0; l<=j; l++)); do\n          path[$i,$j,$k,$l]=$((dp[$i,$j] - dp[$k,$j] - dp[$i,$l] + dp[$k,$l]))\n          path_cost[$i,$j,$\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmptindx4wx.sh: line 39: unexpected EOF while looking for matching `]'\\n/tmp/tmptindx4wx.sh: line 55: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -1 <<< \"$matrix\" | wc -w)\"\n\n  local -a dp=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      local -i val=\"$(awk -v i=\"$i\" -v j=\"$j\" '{print $((i * m + j + 1))}' <<< \"$matrix\")\"\n      if ((i == 0 && j == 0)); then\n        dp[i * m + j]=$val\n      elif ((i == 0)); then\n        dp[i * m + j]=$((dp[i * m + j - 1] + val))\n      elif ((j == 0)); then\n        dp[i * m + j]=$((dp[(i - 1) * m + j] + val))\n      else\n        dp[i * m + j]=$((dp[(i - 1) * m + j] + val))\n      fi\n    done\n  done\n\n  for ((i = 0; i < n; i++)); do\n    for ((j = 0; j < m; j++)); do\n      sum=${dp[i * m + j]}\n      if ((i > 0)); then\n        sum=$((sum + dp[(i - 1) * m + j]))\n      fi\n      if ((j > 0)); then\n        sum=$((sum + dp[i * m + j - 1]))\n      fi\n      if ((i > 0 && j > 0)); then\n        sum=$((sum - dp[(i - 1) * m + j - 1]))\n      fi\n      if ((i > 0 && j > 0)); then\n        local -i avg=$((sum / ((i + 1) * (j + 1))))\n        if ((avg > max)); then\n          max=$avg\n\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpdvvg9e40.sh: line 48: syntax error near unexpected token `}'\\n/tmp/tmpdvvg9e40.sh: line 48: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local dp=()\n  local i j k\n  for ((i=0;i<n;i++)); do\n    dp[i]=()\n    for ((j=0;j<m;j++)); do\n      dp[i][j]=0\n    done\n  done\n  dp[0][0]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n  for ((i=1;i<n;i++)); do\n    dp[i][0]=$((${dp[i-1][0]} + $(echo \"$matrix\" | head -n $(($i+1)) | tail -n 1 | awk '{print $1}')))\n  done\n  for ((j=1;j<m;j++)); do\n    dp[0][j]=$((${dp[0][j-1]} + $(echo \"$matrix\" | head -n 1 | awk -v j=$j '{print $j}')))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<m;j++)); do\n      dp[i][j]=$((${dp[i-1][j]} + $(echo \"$matrix\" | head -n $(($i+1)) | tail -n 1 | awk -v j=$j '{print $j}')))\n      if [[ $((${dp[i][j-1]} + $(echo \"$matrix\" | head -n $(($i+1)) | tail -n 1 | awk -v j=$j '{print $j}'))) -gt ${dp[i][j]} ]]; then\n        dp[i][j]=$((${dp[i][j-1]} + $(echo \"$matrix\" | head -n $(($i+1)) | tail -n 1 | awk -v j=$j '{print $j}')))\n      fi\n    done\n  done\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpwvu8_wio.sh: line 12: dp[i]: cannot assign list to array member\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      k=$((i*m+j))\n      dp[k]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      if ((i==0 && j==0)); then\n        path[k]=1\n      elif ((i==0)); then\n        dp[k]=$((dp[k]+dp[k-1]))\n        path[k]=$((path[k-1]+1))\n      elif ((j==0)); then\n        dp[k]=$((dp[k]+dp[k-m]))\n        path[k]=$((path[k-m]+1))\n      else\n        if ((dp[k-m]*path[k-1] > dp[k-1]*path[k-m])); then\n          dp[k]=$((dp[k]+dp[k-m]))\n          path[k]=$((path[k-m]+1))\n        else\n          dp[k]=$((dp[k]+dp[k-1]))\n          path[k]=$((path[k-1]+1))\n        fi\n      fi\n    done\n  done\n  echo \"${dp[@]}\"\n  echo \"${path[@]}\"\n  echo \"${dp[n*m-1]} ${path[n*m-1]}\" | awk '{printf \"%.2f\\n\", $1/$2}'\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp8yir6o2x.sh: line 19: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n1)\"\n  local -r max_path_cost=\"$((n * m * max_cost))\"\n  local -r min_path_cost=\"$((n * m * min_cost))\"\n  local -r max_path_avg=\"$(bc <<< \"scale=2; $max_path_cost / $n\")\"\n  local -r min_path_avg=\"$(bc <<< \"scale=2; $min_path_cost / $n\")\"\n  local -r max_avg=\"$(bc <<< \"scale=2; $max_path_avg / $m\")\"\n  local -r min_avg=\"$(bc <<< \"scale=2; $min_path_avg / $m\")\"\n  local -r max_avg_int=\"${max_avg%.*}\"\n  local -r min_avg_int=\"${min_avg%.*}\"\n  local -r max_avg_dec=\"${max_avg#*.}\"\n  local -r min_avg_dec=\"${min_avg#*.}\"\n  local -r max_avg_dec_len=\"${#max_avg_dec}\"\n  local -r min_avg_dec_len=\"${#min_avg_dec}\"\n  local -r max_avg_dec_len_diff=\"$((max_avg_dec_len - min_avg_dec_len))\"\n  local -r max_avg_dec_len_diff_abs=\"$(echo \"$max_avg_dec_len_diff\" | tr -d '-')\"\n  local -r max_avg_dec\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpewx0qfyf.sh: line 13: bc: command not found\\n/tmp/tmpewx0qfyf.sh: line 14: bc: command not found\\n/tmp/tmpewx0qfyf.sh: line 15: bc: command not found\\n/tmp/tmpewx0qfyf.sh: line 16: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local max=0\n  local max_path=()\n  local max_path_str=''\n  local path=()\n  local path_str=''\n  local sum=0\n  local avg=0\n  local avg_str=''\n  local i=0\n  local j=0\n  local k=0\n  local m=0\n  local n=0\n  local row=''\n  local rows=()\n  local rows_str=''\n  local rows_str_len=0\n  local rows_str_len_max=0\n  local rows_str_len_max_str=''\n  local rows_str_len_max_str_len=0\n  local rows_str_len_max_str_len_max=0\n  local rows_str_len_max_str_len_max_str=''\n  local rows_str_len_max_str_len_max_str_len=0\n  local rows_str_len_max_str_len_max_str_len_max=0\n  local rows_str_len_max_str_len_max_str_len_max_str=''\n  local rows_str_len_max_str_len_max_str_len_max_str_len=0\n  local rows_str_len_max_str_len_max_str_len_max_str_len_max=0\n  local rows_str_len_max_str_len_max_str_len_max_str_len_max_str=''\n  local rows_str_len_max_str_len_max_str_len_max_str_len_max_str_len=0\n  local rows_str_len_max_str_len_max_str_len_max_str_len_max_str_len_max=0\n  local rows_str_len_max_str_len_max_str_len_max_str_len_max_str_len_max_str=''\n  local rows_str_len_max_str_len_max_str_len_max_str_len_max_str_len_max_str\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[$i,$j]=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk \"{print \\$$((j+1))}\")\n      for ((k=0;k<i;k++)); do\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} ${dp[$k,$j]}\" | awk '{print $1+$2}')\n      done\n      for ((k=0;k<j;k++)); do\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} ${dp[$i,$k]}\" | awk '{print $1+$2}')\n      done\n      dp[$i,$j]=$(echo \"${dp[$i,$j]} $((i+j+2))\" | awk '{print $1/$2}')\n    done\n  done\n  echo \"${dp[$((n-1)),$((m-1))]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\"\n  local -r max_path_length=\"$((n + m - 2))\"\n  local -r max_path_cost=\"$((max_cost * max_path_length))\"\n  local -r max_average=\"$(bc -l <<< \"scale=6; $max_path_cost / $max_path_length\")\"\n  local -r max_average_int=\"${max_average%.*}\"\n  local -r max_average_dec=\"${max_average#*.}\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_padded=\"$((max_average_dec_len + 6))\"\n  local -r max_average_dec_padded=\"$(printf \"%0${max_average_dec_len_padded}d\" \"$max_average_dec\")\"\n  local -r max_average_padded=\"$max_average_int.$max_average_dec_padded\"\n  echo \"$max_average_padded\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp7_x163au.sh: line 12: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -a path=()\n  local -a costs=()\n  local -a rows=()\n  local -a cols=()\n  local -i row=0\n  local -i col=0\n  local -i max_row=0\n  local -i max_col=0\n  local -i max_cost=0\n  local -i max_average=0\n  local -i cost=0\n  local -i average=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      if ((i>0)); then\n        dp[i,j]=$((dp[i,j]+dp[i-1,j]))\n      fi\n      if ((j>0)); then\n        dp[i,j]=$((dp[i,j]+dp[i,j-1]))\n      fi\n      if ((i>0 && j>0)); then\n        dp[i,j]=$((dp[i,j]-dp[i-1,j-1]))\n      fi\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      for ((k=i;k<n;k++)); do\n        for ((l=j;l<m;l++)); do\n          local -i sum=${dp[k,l]}\n          if ((i>0)); then\n            sum=$((sum-dp[i-1,l]))\n          fi\n          if ((j>0)); then\n            sum=$((sum-dp[k,j-1]))\n          fi\n          if ((i>0 && j>0)); then\n            sum=$((sum+dp[i-1,j-1]))\n          fi\n          local -i avg=$((sum/(k-i+1)/(l-j+1)))\n          if ((avg>max)); then\n            max=$avg\n          fi\n        done\n      done\n    done\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp94z85h1o.sh: line 18: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n    local -r matrix=\"$1\"\n    local -r n=\"$(wc -l <<< \"$matrix\")\"\n    local -r m=\"$(head -1 <<< \"$matrix\" | wc -w)\"\n    local -r max_sum=\"$(awk -v n=\"$n\" '{for(i=1;i<=NF;i++)a+=$i}END{print a}' <<< \"$matrix\")\"\n    local -r max_paths=\"$((n * m))\"\n    local -r max_avg=\"$(bc -l <<< \"scale=4; $max_sum / $max_paths\")\"\n    local -r max_avg_rounded=\"$(printf '%.*f\\n' 0 \"$max_avg\")\"\n    echo \"$max_avg_rounded\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpj508i8iq.sh: line 11: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r rows=\"$(echo \"$matrix\" | wc -l)\"\n  local -r columns=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max_row=\"$((rows - 1))\"\n  local -r max_column=\"$((columns - 1))\"\n  local -r max_index=\"$((max_row * columns + max_column))\"\n  local -r max_average=\"$(echo \"$matrix\" | awk -v max_index=\"$max_index\" '{\n    for (i = 1; i <= NF; i++) {\n      sum += $i\n      if (i == max_index) {\n        print sum / i\n        exit\n      }\n    }\n  }')\"\n  local -r max_average_rounded=\"$(printf \"%.2f\" \"$max_average\")\"\n  echo \"$max_average_rounded\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max=0\n  local max_i=0\n  local max_j=0\n  local max_path=()\n  local max_path_len=0\n  local max_path_sum=0\n  local path=()\n  local path_len=0\n  local path_sum=0\n  local i=0\n  local j=0\n  local k=0\n  local cell=0\n  local cell_value=0\n  local cell_value_sum=0\n  local cell_value_avg=0\n  local cell_value_max=0\n  local cell_value_max_i=0\n  local cell_value_max_j=0\n  local cell_value_max_path=()\n  local cell_value_max_path_len=0\n  local cell_value_max_path_sum=0\n  local cell_value_max_path_avg=0\n  local cell_value_max_path_avg_max=0\n  local cell_value_max_path_avg_max_i=0\n  local cell_value_max_path_avg_max_j=0\n  local cell_value_max_path_avg_max_path=()\n  local cell_value_max_path_avg_max_path_len=0\n  local cell_value_max_path_avg_max_path_sum=0\n  local cell_value_max_path_avg_max_path_avg=0\n  local cell_value_max_path_avg_max_path_avg_max=0\n  local cell_value_max_path_avg_max_path_avg_max_i=0\n  local cell_value_max_path_avg_max_path_avg_max_j=0\n  local cell_value_max_path_avg_max_path_avg_max_path=()\n  local cell_value_max_path_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a path\n  local -a costs\n  local -a costs_sum\n  local -a costs_count\n  local -a costs_avg\n  local -a costs_max\n  local -a costs_max_path\n  local -a costs_max_path_len\n  local -a costs_max_path_avg\n  local -a costs_max_path_avg_len\n  local -a costs_max_path_avg_len_path\n  local -a costs_max_path_avg_len_path_len\n  local -a costs_max_path_avg_len_path_len_avg\n  local -a costs_max_path_avg_len_path_len_avg_path\n  local -a costs_max_path_avg_len_path_len_avg_path_len\n  local -a costs_max_path_avg_len_path_len_avg_path_len_avg\n  local -a costs_max_path_avg_len_path_len_avg_path_len_avg_path\n  local -a costs_max_path_avg_len_path_len_avg_path_len_avg_path_len\n  local -a costs_max_path_avg_len_path_len_avg_path_len_avg_path_len_avg\n  local -a costs_max_path_avg_len_path_len_avg_path_len_avg_path_len_avg_path\n  local -a costs_max_path_avg_len_path_len_avg_path_len_avg_path_len_avg_path_len\n  local -a costs_max_path_avg_len_path_len_avg_path_len_avg_path_len_avg_path_len_avg\n  local -a costs_max_path_av\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n\n  local -i i j\n  local -i sum\n  local -i max_sum\n  local -i max_i\n  local -i max_j\n  local -i max_n\n  local -i max_average\n  local -i average\n  local -i cost\n\n  n=0\n  while read -r line; do\n    ((n++))\n    for cost in $line; do\n      matrix[$n,$i]=$cost\n      ((i++))\n    done\n    i=0\n  done <<< \"$matrix\"\n\n  max_sum=0\n  max_n=0\n  max_average=0\n  max_i=0\n  max_j=0\n  for ((i=1; i<=n; i++)); do\n    for ((j=1; j<=n; j++)); do\n      sum=0\n      for ((k=1; k<=n; k++)); do\n        sum+=\"${matrix[$k,$j]}\"\n      done\n      average=$((sum / n))\n      if ((average > max_average)); then\n        max_average=$average\n        max_i=$i\n        max_j=$j\n      fi\n    done\n  done\n\n  echo \"$max_average\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp4whfad_h.sh: line 22: 1,: syntax error: operand expected (error token is \",\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]+${matrix[i]:j:1}:dp[j]+${matrix[i]:j:1}))\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp8p6hmrtu.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmp8p6hmrtu.sh: line 26: dp: bad array subscript\\n/tmp/tmp8p6hmrtu.sh: line 26: dp[n-1]/n: division by 0 (error token is \"n\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n1)\"\n  local -r max_average=\"$(echo \"scale=4; $max_cost / $n\" | bc)\"\n  local -r min_average=\"$(echo \"scale=4; $min_cost / $n\" | bc)\"\n  local -r min_average_rounded=\"$(echo \"scale=4; $min_average + 0.0001\" | bc | cut -d. -f1)\"\n  local -r max_average_rounded=\"$(echo \"scale=4; $max_average + 0.0001\" | bc | cut -d. -f1)\"\n  local -r min_average_rounded_plus_one=\"$(echo \"$min_average_rounded + 1\" | bc)\"\n  local -r max_average_rounded_plus_one=\"$(echo \"$max_average_rounded + 1\" | bc)\"\n  local -r max_average_rounded_plus_one_minus_min_average_rounded_plus_one=\"$(echo \"$max_average_rounded_plus_one - $min_average_rounded_plus_one\" | bc)\"\n  local -r max_average_rounded_plus_one_minus_min_average_rounded_plus_one_plus_one=\"$(echo \"$max_average_rounded_plus_one_minus_min_average_rounded_plus_one + 1\" | bc)\"\n  local -r max_average_rounded_plus_one_minus_min_average_rounded_plus_one_plus_one_plus_one=\"$(echo \"$max_average_rounded_plus_one_minus_min_average_rounded_plus_one_plus_one + 1\" | bc)\"\n  local -r max_average\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpy392athd.sh: line 11: bc: command not found\\n/tmp/tmpy392athd.sh: line 12: bc: command not found\\n/tmp/tmpy392athd.sh: line 13: bc: command not found\\n/tmp/tmpy392athd.sh: line 14: bc: command not found\\n/tmp/tmpy392athd.sh: line 15: bc: command not found\\n/tmp/tmpy392athd.sh: line 16: bc: command not found\\n/tmp/tmpy392athd.sh: line 17: bc: command not found\\n/tmp/tmpy392athd.sh: line 18: bc: command not found\\n/tmp/tmpy392athd.sh: line 19: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -a path\n  local -a max_path\n  local max_average=0\n\n  # Read the matrix into an array\n  IFS=$'\\n' read -d '' -r -a matrix < <(echo \"$matrix\")\n  for ((i=0; i<${#matrix[@]}; i++)); do\n    IFS=' ' read -r -a matrix[$i] <<< \"${matrix[$i]}\"\n  done\n\n  # Find the max average\n  findMaxAverage 0 0 0 \"${matrix[0]}\"\n  echo \"${max_average}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8uegske7.sh: line 14: read: `matrix[0]': not a valid identifier\\n/tmp/tmp8uegske7.sh: line 18: findMaxAverage: command not found\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$(awk '{print $1}' <<< \"$matrix\" | sort -nr | head -1)\"\n  local -r max_cost_len=\"${#max_cost}\"\n  local -r max_cost_len_plus_one=\"$((max_cost_len + 1))\"\n  local -r max_cost_len_plus_two=\"$((max_cost_len + 2))\"\n  local -r max_cost_len_plus_three=\"$((max_cost_len + 3))\"\n  local -r max_cost_len_plus_four=\"$((max_cost_len + 4))\"\n  local -r max_cost_len_plus_five=\"$((max_cost_len + 5))\"\n  local -r max_cost_len_plus_six=\"$((max_cost_len + 6))\"\n  local -r max_cost_len_plus_seven=\"$((max_cost_len + 7))\"\n  local -r max_cost_len_plus_eight=\"$((max_cost_len + 8))\"\n  local -r max_cost_len_plus_nine=\"$((max_cost_len + 9))\"\n  local -r max_cost_len_plus_ten=\"$((max_cost_len + 10))\"\n  local -r max_cost_len_plus_eleven=\"$((max_cost_len + 11))\"\n  local -r max_cost_len_plus_twelve=\"$((max_cost_len + 12))\"\n  local -r max_cost_len_plus_thirteen=\"$((max_cost_len + 13))\"\n  local -r max_cost_len_plus_fourteen=\"$((max_cost_len + 14))\"\n  local -r max_cost_len_plus_fifteen=\"$((max_cost_len + 15))\"\n  local -r max_cost_len_plus\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r max_cost=\"$(awk '{sum+=$1} END {print sum}' <<< \"$matrix\")\"\n  local -r max_length=\"$((n*m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max_cost/$max_length\")\"\n  echo \"$max_average\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp43el9yfe.sh: line 11: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n1)\"\n  local -r max_avg=\"$(echo \"$max_cost / $n + $m - 1\" | bc -l)\"\n  local -r min_avg=\"$(echo \"$min_cost / $n + $m - 1\" | bc -l)\"\n  local -r max_avg_int=\"$(echo \"$max_avg\" | cut -d. -f1)\"\n  local -r min_avg_int=\"$(echo \"$min_avg\" | cut -d. -f1)\"\n  local -r max_avg_dec=\"$(echo \"$max_avg\" | cut -d. -f2)\"\n  local -r min_avg_dec=\"$(echo \"$min_avg\" | cut -d. -f2)\"\n  local -r max_avg_dec_len=\"${#max_avg_dec}\"\n  local -r min_avg_dec_len=\"${#min_avg_dec}\"\n  local -r max_avg_dec_len_diff=\"$(echo \"$max_avg_dec_len - $min_avg_dec_len\" | bc)\"\n  local -r max_avg_dec_len_diff_abs=\"$(echo \"$max_avg_dec_len_diff < 0 ? -$max_avg_dec_len_diff : $max_avg_dec_len_diff\" | bc)\"\n  local -r max_avg_dec_len_diff_abs_pow=\"$(echo \"10 ^ $max_avg_dec_len_diff_abs\" | bc)\"\n  local -r max_avg_dec_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp5z6ehzqi.sh: line 11: bc: command not found\\n/tmp/tmp5z6ehzqi.sh: line 12: bc: command not found\\n/tmp/tmp5z6ehzqi.sh: line 19: bc: command not found\\n/tmp/tmp5z6ehzqi.sh: line 20: bc: command not found\\n/tmp/tmp5z6ehzqi.sh: line 21: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a path=()\n  local -a costs=()\n  local -a visited=()\n  local -a stack=()\n  local -a max=()\n  local -a maxCost=()\n  local -a maxAverage=()\n  local -a maxAverageCost=()\n  local -a maxAveragePath=()\n  local -a maxAveragePathCost=()\n  local -a maxAveragePathVisited=()\n  local -a maxAveragePathStack=()\n  local -a maxAveragePathMax=()\n  local -a maxAveragePathMaxCost=()\n  local -a maxAveragePathMaxAverage=()\n  local -a maxAveragePathMaxAverageCost=()\n  local -a maxAveragePathMaxAveragePath=()\n  local -a maxAveragePathMaxAveragePathCost=()\n  local -a maxAveragePathMaxAveragePathVisited=()\n  local -a maxAveragePathMaxAveragePathStack=()\n  local -a maxAveragePathMaxAveragePathMax=()\n  local -a maxAveragePathMaxAveragePathMaxCost=()\n  local -a maxAveragePathMaxAveragePathMaxAverage=()\n  local -a maxAveragePathMaxAveragePathMaxAverageCost=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePath=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathCost=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathVisited=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathStack=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathMax=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathMaxCost=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathMaxAverage=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathMaxAverageCost=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathMaxAveragePath=()\n  local -a maxAveragePathMaxAveragePathMaxAveragePathMaxAveragePathCost=()\n  local -a maxAveragePathMaxAverage\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n1 | wc -w)\n  local max_average=0\n  local max_path=()\n\n  # For each row, find the max average path\n  for ((i=0; i<rows; i++)); do\n    local row=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1)\n    local path=()\n    local average=0\n\n    # For each column, find the max average path\n    for ((j=0; j<cols; j++)); do\n      local cell=$(echo \"$row\" | awk \"{print \\$$((j+1))}\")\n      path+=(\"$cell\")\n      average=$(echo \"$average + $cell\" | bc)\n    done\n\n    # If the average of the current path is greater than the max average,\n    # update the max average and path\n    if (( $(echo \"$average > $max_average\" | bc -l) )); then\n      max_average=$average\n      max_path=(\"${path[@]}\")\n    fi\n  done\n\n  # Divide the max average by the number of cells in the path\n  max_average=$(echo \"scale=2; $max_average / $cols\" | bc)\n\n  # Print the max average and path\n  echo \"Max average: $max_average\"\n  echo \"Max path: ${max_path[@]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2qr4ycn6.sh: line 22: bc: command not found\\n/tmp/tmp2qr4ycn6.sh: line 22: bc: command not found\\n/tmp/tmp2qr4ycn6.sh: line 22: bc: command not found\\n/tmp/tmp2qr4ycn6.sh: line 22: bc: command not found\\n/tmp/tmp2qr4ycn6.sh: line 22: bc: command not found\\n/tmp/tmp2qr4ycn6.sh: line 22: bc: command not found\\n/tmp/tmp2qr4ycn6.sh: line 22: bc: command not found\\n/tmp/tmp2qr4ycn6.sh: line 27: bc: command not found\\n/tmp/tmp2qr4ycn6.sh: line 34: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_avg=0\n  local max_path=()\n  local path=()\n  local avg=0\n  local cost=0\n  local i=0\n  local j=0\n  local row=()\n  local cell=0\n  local path_len=0\n  local path_str=''\n\n  for ((i = 0; i < rows; i++)); do\n    row=($(echo \"$matrix\" | head -n $((i + 1)) | tail -n 1))\n    for ((j = 0; j < cols; j++)); do\n      cell=${row[$j]}\n      path=(\"${path[@]}\" \"$cell\")\n      cost=$((cost + cell))\n      path_len=$((path_len + 1))\n      avg=$((cost / path_len))\n      if [[ $avg -gt $max_avg ]]; then\n        max_avg=$avg\n        max_path=(\"${path[@]}\")\n      fi\n    done\n  done\n\n  path_str=$(echo \"${max_path[@]}\" | tr ' ' ',')\n  echo \"$path_str\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpg2iuy2tu.sh: line 26: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_one=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_len_plus_one_zeros=\"$(printf \"%0${max_average_dec_len_plus_one}d\" 0)\"\n  local -r max_average_dec_len_plus_one_zeros_plus_one=\"$((max_average_dec_len_plus_one + 1))\"\n  local -r max_average_dec_len_plus_one_zeros_plus_one_zeros=\"$(printf \"%0${max_average_dec_len_plus_one_zeros_plus_one}d\" 0)\"\n  local -r max_average_dec_len_plus_one_zeros_plus_one_zeros_plus_one=\"$((max_average_dec_len_plus_one_zeros_plus_one + 1))\"\n  local -r max_average_dec_len_plus_one_zeros_plus_one_zeros_plus_one_zeros=\"$(printf \"%0${max_average_dec_len_plus_one_zeros_plus_one_zeros_plus_one}d\" 0)\"\n  local -r max_average_dec_len_plus_one_zeros_plus_one_zeros_plus_one_zeros_plus_one=\"$((max_average_dec\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpnm6caqdi.sh: line 20: unexpected EOF while looking for matching `)'\\n/tmp/tmpnm6caqdi.sh: line 36: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i i j k\n  local -i n=0\n  local -i m=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_path=0\n  local -i max_path_sum=0\n  local -i max_path_count=0\n  local -i max_path_avg=0\n  local -i max_path_avg_sum=0\n  local -i max_path_avg_count=0\n  local -i max_path_avg_max=0\n  local -i max_path_avg_max_sum=0\n  local -i max_path_avg_max_count=0\n  local -i max_path_avg_max_avg=0\n  local -i max_path_avg_max_avg_sum=0\n  local -i max_path_avg_max_avg_count=0\n  local -i max_path_avg_max_avg_max=0\n  local -i max_path_avg_max_avg_max_sum=0\n  local -i max_path_avg_max_avg_max_count=0\n  local -i max_path_avg_max_avg_max_avg=0\n  local -i max_path_avg_max_avg_max_avg_sum=0\n  local -i max_path_avg_max_avg_max_avg_count=0\n  local -i max_path_avg_max_avg_max_avg_max=0\n  local -i max_path_avg_max_avg_max_avg_max_sum=0\n  local -i max_path_avg_max_avg_max_avg_max_count=0\n  local -i max_path_avg_max_avg_max_avg_max_avg=0\n  local -i max_path_avg_max_avg_max_avg_max_avg_sum\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r max_sum=\"$((n * m * 100))\"\n  local -r max_avg=\"$((max_sum / n))\"\n  local -r max_avg_len=\"${#max_avg}\"\n  local -r max_avg_len_plus_one=\"$((max_avg_len + 1))\"\n  local -r max_avg_len_plus_two=\"$((max_avg_len + 2))\"\n  local -r max_avg_len_plus_three=\"$((max_avg_len + 3))\"\n  local -r max_avg_len_plus_four=\"$((max_avg_len + 4))\"\n  local -r max_avg_len_plus_five=\"$((max_avg_len + 5))\"\n  local -r max_avg_len_plus_six=\"$((max_avg_len + 6))\"\n  local -r max_avg_len_plus_seven=\"$((max_avg_len + 7))\"\n  local -r max_avg_len_plus_eight=\"$((max_avg_len + 8))\"\n  local -r max_avg_len_plus_nine=\"$((max_avg_len + 9))\"\n  local -r max_avg_len_plus_ten=\"$((max_avg_len + 10))\"\n  local -r max_avg_len_plus_eleven=\"$((max_avg_len + 11))\"\n  local -r max_avg_len_plus_twelve=\"$((max_avg_len + 12))\"\n  local -r max_avg_len_plus_thirteen=\"$((max_avg_len + 13))\"\n  local -r max_avg_len_plus_fourteen=\"$((max_avg_len + 14))\"\n  local -r\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local n=$(wc -l <<< \"$matrix\")\n  local -A dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[$i,$j]=$(cut -d' ' -f$((j+1)) <<< \"${matrix[i]}\")\n      elif ((i==0)); then\n        dp[$i,$j]=$((dp[i,j-1] + $(cut -d' ' -f$((j+1)) <<< \"${matrix[i]}\")))\n      elif ((j==0)); then\n        dp[$i,$j]=$((dp[i-1,j] + $(cut -d' ' -f$((j+1)) <<< \"${matrix[i]}\")))\n      else\n        dp[$i,$j]=$((dp[i-1,j] + dp[i,j-1] + $(cut -d' ' -f$((j+1)) <<< \"${matrix[i]}\")))\n      fi\n    done\n  done\n  echo \"${dp[n-1,n-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpp18ra4y1.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -n max_avg=$2\n  local -n path=$3\n  local -n path_cost=$4\n  local -n path_len=$5\n  local -n path_avg=$6\n  local -n path_max_avg=$7\n  local -n path_max_avg_len=$8\n  local -n path_max_avg_cost=$9\n  local -n path_max_avg_path=${10}\n  local -n path_max_avg_path_len=${11}\n  local -n path_max_avg_path_cost=${12}\n  local -n path_max_avg_path_avg=${13}\n\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n \n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpwaitg8q1.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpwaitg8q1.sh: line 7: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 8: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 9: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 10: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 11: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 12: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 13: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 14: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 15: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 16: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 17: local: `': not a valid identifier\\n/tmp/tmpwaitg8q1.sh: line 18: local: `': not a valid identifier\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  dp[0]=${matrix[0]}\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i]))\n  done\n  for ((i=n;i<n*n;i++)); do\n    dp[i]=$((dp[i-n]+matrix[i]))\n  done\n  for ((i=n;i<n*n;i++)); do\n    for ((j=i-n+1;j<i;j++)); do\n      dp[i]=$((dp[i]>dp[j]?dp[i]:dp[j]))\n    done\n    dp[i]=$((dp[i]+matrix[i]))\n  done\n  echo $((dp[n*n-1]/(n*n)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpqywb65mf.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpqywb65mf.sh: line 25: dp[n*n-1]/(n*n): division by 0 (error token is \"(n*n)\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i i=0 j=0\n  local -i max_i=0 max_j=0\n  local -i max_avg=0\n  local -i sum=0\n  local -i avg=0\n  local -i num_cells=0\n  local -i num_rows=0\n  local -i num_cols=0\n  local -i row=0\n  local -i col=0\n  local -i cost=0\n  local -i max_cost=0\n  local -i max_cost_row=0\n  local -i max_cost_col=0\n  local -i max_cost_num_cells=0\n  local -i max_cost_sum=0\n  local -i max_cost_avg=0\n  local -i max_cost_num_rows=0\n  local -i max_cost_num_cols=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n  local -i max_cost_row=0\n  local -i max_cost_col=0\n  local -i max_cost_num_cells=0\n  local -i max_cost_sum=0\n  local -i max_cost_avg=0\n  local -i max_cost_num_rows=0\n  local -i max_cost_num_cols=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n  local -i max_cost_row=0\n  local -i max_cost_col=0\n  local -i max_cost_num_cells=0\n  local -i max_cost_sum=0\n  local -i max_cost_avg=0\n  local -i max_cost_num_rows=0\n  local -i max_cost_num_cols=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n  local -i max_cost_row=0\n  local -i max_cost_col=0\n  local -i max_cost_num_cells=0\n \n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo ${matrix[i]} | tr ' ' '\\n' | sort -n | head -n 1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i left=$((dp[j]))\n      local -i top=$((dp[j+1]))\n      local -i cur=$((matrix[i][j]))\n      dp[j]=$((cur + (left < top ? left : top)))\n    done\n  done\n  echo \"${dp[0]} $n\" | awk '{printf \"%.2f\\n\", $1/$2}'\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpdqmad94a.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i = 0; i < n; i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n  done\n  for ((i = 1; i < n; i++)); do\n    for ((j = 0; j < n; j++)); do\n      local -i left=$((dp[j]))\n      local -i top=$((dp[j - 1]))\n      local -i current=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n$((j + 1)) | tail -n1)\n      dp[j]=$(((left > top ? left : top) + current))\n    done\n  done\n  echo \"${dp[-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpzdhcdlsy.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpzdhcdlsy.sh: line 21: dp: bad array subscript\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=$1\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max=0\n  local max_i=0\n  local max_j=0\n  local i=0\n  local j=0\n  local sum=0\n  local count=0\n  local current=0\n  local current_i=0\n  local current_j=0\n  local current_sum=0\n  local current_count=0\n  local next_i=0\n  local next_j=0\n  local next_sum=0\n  local next_count=0\n  local next=0\n  local next_next_i=0\n  local next_next_j=0\n  local next_next_sum=0\n  local next_next_count=0\n  local next_next=0\n  local next_next_next_i=0\n  local next_next_next_j=0\n  local next_next_next_sum=0\n  local next_next_next_count=0\n  local next_next_next=0\n  local next_next_next_next_i=0\n  local next_next_next_next_j=0\n  local next_next_next_next_sum=0\n  local next_next_next_next_count=0\n  local next_next_next_next=0\n  local next_next_next_next_next_i=0\n  local next_next_next_next_next_j=0\n  local next_next_next_next_next_sum=0\n  local next_next_next_next_next_count=0\n  local next_next_next_next_next=0\n  local next_next_next_next_next_next_i=0\n  local next_next_next_next_next_next_j=0\n  local next_next_next_next_next_next_sum=0\n  local next_next_next_next_next_next_count=0\n  local next_next_next_next_next_next=0\n  local next_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=$(echo \"$matrix\" | wc -l)\n  local -i m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i{print $j}')\n    done\n  done\n  for ((i=1;i<n;i++)); do\n    dp[i,0]=$((dp[i,0]+dp[i-1,0]))\n  done\n  for ((j=1;j<m;j++)); do\n    dp[0,j]=$((dp[0,j]+dp[0,j-1]))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<m;j++)); do\n      dp[i,j]=$((dp[i,j]+((dp[i-1,j]>dp[i,j-1])?dp[i-1,j]:dp[i,j-1])))\n    done\n  done\n  echo \"${dp[n-1,m-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local sum=0\n  local i=0\n  local j=0\n  local max=0\n  local max_i=0\n  local max_j=0\n  local max_sum=0\n  local max_count=0\n  local count=0\n  local max_path=\"\"\n  local path=\"\"\n  local max_path_length=0\n  local path_length=0\n\n  while [ $i -lt $n ]; do\n    j=0\n    while [ $j -lt $m ]; do\n      sum=0\n      count=0\n      path=\"\"\n      path_length=0\n      while [ $i -lt $n ] && [ $j -lt $m ]; do\n        sum=$((sum + $(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk \"{print \\$$((j+1))}\")))\n        count=$((count + 1))\n        path=\"$path $i $j\"\n        path_length=$((path_length + 1))\n        if [ $((i + 1)) -lt $n ]; then\n          i=$((i + 1))\n        else\n          j=$((j + 1))\n        fi\n      done\n      if [ $((sum / count)) -gt $max ]; then\n        max=$((sum / count))\n        max_i=$i\n        max_j=$j\n        max_sum=$sum\n        max_count=$count\n        max_path=\"$path\"\n        max_path_length=$path_length\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n\n  echo \"$max_path\" | awk \"{print \\$$max_path_length}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpl5a8bb_2.sh: line 31: sum + 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a path=()\n  local -a costs=()\n  local -a max_costs=()\n  local -i i=0\n  local -i j=0\n  local -i max_cost=0\n  local -i max_cost_index=0\n  local -i cost=0\n  local -i max_cost_index=0\n  local -i max_cost=0\n  local -i max_cost_index=0\n  local -i cost=0\n\n  for ((i=0; i<rows; i++)); do\n    costs[i]=0\n    max_costs[i]=0\n  done\n\n  for ((i=0; i<rows; i++)); do\n    for ((j=0; j<cols; j++)); do\n      cost=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i {print $j}')\n      if ((i == 0)); then\n        costs[j]=cost\n      else\n        max_cost=0\n        for ((k=0; k<j; k++)); do\n          if ((max_costs[k] > max_cost)); then\n            max_cost=max_costs[k]\n            max_cost_index=k\n          fi\n        done\n        costs[j]=cost+max_cost\n      fi\n    done\n    for ((j=0; j<cols; j++)); do\n      max_costs[j]=costs[j]\n    done\n  done\n\n  max_cost=0\n  for ((i=0; i<cols; i++)); do\n    if ((max_costs[i] > max_cost)); then\n      max_cost=max_costs[i]\n      max_cost_index=i\n    fi\n  done\n\n  echo \"$max_cost\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -n max_avg=$2\n  local -n path=$3\n  local -n path_avg=$4\n  local -n path_len=$5\n  local -n path_cost=$6\n  local -n path_max_avg=$7\n  local -n path_max_avg_len=$8\n  local -n path_max_avg_cost=$9\n  local -n path_max_avg_path=${10}\n  local -n path_max_avg_path_avg=${11}\n  local -n path_max_avg_path_len=${12}\n  local -n path_max_avg_path_cost=${13}\n  local -n path_max_avg_path_max_avg=${14}\n  local -n path_max_avg_path_max_avg_len=${15}\n  local -n path_max_avg_path_max_avg_cost=${16}\n  local -n path_max_avg_path_max_avg_path=${17}\n  local -n path_max_avg_path_max_avg_path_avg=${18}\n  local -n path_max_avg_path_max_avg_path_len=${19}\n  local -n path_max_avg_path_max_avg_path_cost=${20}\n  local -n path_max_avg_path_max_avg_path_max_avg=${21}\n  local -n path_max_avg_path_max_avg_path_max_avg_len=${22}\n  local -n path_max_avg_path_max_avg_path_max_avg_cost=${23}\n  local -n path_max_avg_path_max_avg_path_max_avg_path=${24}\n  local -n path_max_avg_path_max_avg_path_max_avg_path_avg=${25}\n  local -n path_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpq37u1p81.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpq37u1p81.sh: line 7: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 8: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 9: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 10: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 11: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 12: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 13: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 14: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 15: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 16: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 17: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 18: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 19: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 20: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 21: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 22: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 23: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 24: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 25: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 26: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 27: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 28: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 29: local: `': not a valid identifier\\n/tmp/tmpq37u1p81.sh: line 30: local: `': not a valid identifier\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n    local matrix=\"$1\"\n    local -i n=0\n    local -i i=0\n    local -i j=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_avg=0\n    local -i max_sum=0\n    local -i sum=0\n    local -i avg=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_sum=0\n    local -i tmp_avg=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_avg=0\n    local -i tmp_max_avg_i=0\n    local -i tmp_max_avg_j=0\n    local -i tmp_max_avg_sum=0\n    local -i tmp_max_avg_avg=0\n    local -i tmp_max_avg_max_i=0\n    local -i tmp_max_avg_max_j=0\n    local -i tmp_max_avg_max_sum=0\n    local -i tmp_max_avg_max_avg=0\n    local -i tmp_max_avg_max_avg_i=0\n    local -i tmp_max_avg_max_avg_j=0\n    local -i tmp_max_avg_max_avg_sum=0\n    local -i tmp_max_avg_max_avg_avg=0\n    local -i tmp_max_avg_max_avg_max_i=0\n    local -i tmp_max_avg_max_avg_max_j=0\n    local -i tmp_max_avg_max_avg_max_sum=0\n    local -i tmp_max_avg_max_avg_max_avg=0\n    local -i tmp_max_avg_max_avg_max_avg_i=0\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i m=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i sum=0\n  local -i count=0\n  local -i average=0\n  local -i max_average=0\n  local -i max_average_count=0\n  local -i max_average_sum=0\n  local -i max_average_i=0\n  local -i max_average_j=0\n  local -i max_average_k=0\n  local -i max_average_l=0\n  local -i max_average_m=0\n  local -i max_average_n=0\n  local -i max_average_count_i=0\n  local -i max_average_count_j=0\n  local -i max_average_count_k=0\n  local -i max_average_count_l=0\n  local -i max_average_count_m=0\n  local -i max_average_count_n=0\n  local -i max_average_sum_i=0\n  local -i max_average_sum_j=0\n  local -i max_average_sum_k=0\n  local -i max_average_sum_l=0\n  local -i max_average_sum_m=0\n  local -i max_average_sum_n=0\n  local -i max_average_i_i=0\n  local -i max_average_i_j=0\n  local -i max_average_i_k=0\n  local -i max_average_i_l=0\n  local -i max_average_i_m=0\n  local -i max_average_i_n=0\n  local -i max_average_j_i=0\n  local -i max_average_j_j\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local -a path=()\n  local -a costs=()\n  local -a max=()\n  local -a max_costs=()\n  local -a max_path=()\n  local -a max_path_costs=()\n  local -a max_path_costs_sum=()\n  local -a max_path_costs_sum_count=()\n  local -a max_path_costs_sum_avg=()\n  local -a max_path_costs_sum_avg_max=()\n  local -a max_path_costs_sum_avg_max_path=()\n  local -a max_path_costs_sum_avg_max_path_costs=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum_count=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum_avg=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum_avg_max=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum_avg_max_path=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum_avg_max_path_costs=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum_avg_max_path_costs_sum=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum_avg_max_path_costs_sum_count=()\n  local -a max_path_costs_sum_avg_max_path_costs_sum_avg_max_path_costs_sum_avg=()\n\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=$1\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  local max_avg\n  local max_avg_i\n  local max_avg_j\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        dp[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n        path[$i,$j]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n      elif [[ $i -eq 0 ]]; then\n        dp[$i,$j]=$(echo \"${dp[$i,$((j-1))]} + $(echo \"$matrix\" | head -n 1 | awk -v j=$((j+1)) '{print $j}')\" | bc)\n        path[$i,$j]=$(echo \"${path[$i,$((j-1))]} + $(echo \"$matrix\" | head -n 1 | awk -v j=$((j+1)) '{print $j}')\" | bc)\n      elif [[ $j -eq 0 ]]; then\n        dp[$i,$j]=$(echo \"${dp[$((i-1)),$j]} + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')\" | bc)\n        path[$i,$j]=$(echo \"${path[$((i-1)),$j]} + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')\" | bc)\n      else\n        dp[$i,$j]=$(echo \"${dp[$((i-1)),$j]} + $(\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp3ti43d5a.sh: line 28: unexpected EOF while looking for matching `)'\\n/tmp/tmp3ti43d5a.sh: line 44: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp=(0)\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i][0]))\n  done\n  for ((j=1;j<n;j++)); do\n    dp[0]=$((dp[0]+matrix[0][j]))\n    for ((i=1;i<n;i++)); do\n      dp[i]=$((dp[i-1]>dp[i]?dp[i-1]:dp[i]))\n      dp[i]=$((dp[i]+matrix[i][j]))\n    done\n  done\n  echo $((dp[n-1]/(n*n)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpphcgiabi.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpphcgiabi.sh: line 20: dp[n-1]/(n*n): division by 0 (error token is \"(n*n)\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=$1\n  local -a path\n  local -a costs\n  local -a averages\n  local -a max_averages\n  local -a max_paths\n  local -a max_costs\n  local -a max_path\n  local -a max_cost\n  local -a max_average\n  local -i i\n  local -i j\n  local -i k\n  local -i n\n  local -i m\n  local -i max_n\n  local -i max_m\n  local -i max_i\n  local -i max_j\n  local -i max_k\n  local -i max_average_index\n  local -i max_average_value\n  local -i max_cost_index\n  local -i max_cost_value\n  local -i max_path_index\n  local -i max_path_value\n  local -i max_path_length\n  local -i max_path_length_index\n  local -i max_path_length_value\n  local -i max_path_length_value_index\n  local -i max_path_length_value_value\n  local -i max_path_length_value_value_index\n  local -i max_path_length_value_value_value\n  local -i max_path_length_value_value_value_index\n  local -i max_path_length_value_value_value_value\n  local -i max_path_length_value_value_value_value_index\n  local -i max_path_length_value_value_value_value_value\n  local -i max_path_length_value_value_value_value_value_index\n  local -i max_path_length_value_value_value_value_value_value\n  local -i max_path_length_value_value_value_value_value_value_index\n  local -i max_path_length_value_value_value_value_value_value_value\n  local -i max_path_length_value_value_value_value_value_value_value_index\n  local -i max_path_length_value_value_value_value_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\n  local -a path\n  local -a costs\n  local -a sums\n  local -a counts\n  local -a averages\n  local -a max_averages\n  local -a max_paths\n  local -a max_path_averages\n  local -a max_path_costs\n  local -a max_path_sums\n  local -a max_path_counts\n  local -a max_path_averages\n  local -a max_path_max_averages\n  local -a max_path_max_paths\n  local -a max_path_max_path_averages\n  local -a max_path_max_path_costs\n  local -a max_path_max_path_sums\n  local -a max_path_max_path_counts\n  local -a max_path_max_path_averages\n  local -a max_path_max_path_max_averages\n  local -a max_path_max_path_max_paths\n  local -a max_path_max_path_max_path_averages\n  local -a max_path_max_path_max_path_costs\n  local -a max_path_max_path_max_path_sums\n  local -a max_path_max_path_max_path_counts\n  local -a max_path_max_path_max_path_averages\n  local -a max_path_max_path_max_path_max_averages\n  local -a max_path_max_path_max_path_max_paths\n  local -a max_path_max_path_max_path_max_path_averages\n  local -a max_path_max_path_max_path_max_path_costs\n  local -a max_path_max_path_max_path_max_path_sums\n  local -a max_path_max_path_max_path_max_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i max=0\n  local -i sum=0\n  local -i maxSum=0\n  local -i maxI=0\n  local -i maxJ=0\n  local -i maxK=0\n  local -i maxL=0\n  local -i maxM=0\n  local -i maxN=0\n  local -i maxO=0\n  local -i maxP=0\n  local -i maxQ=0\n  local -i maxR=0\n  local -i maxS=0\n  local -i maxT=0\n  local -i maxU=0\n  local -i maxV=0\n  local -i maxW=0\n  local -i maxX=0\n  local -i maxY=0\n  local -i maxZ=0\n  local -i maxAA=0\n  local -i maxAB=0\n  local -i maxAC=0\n  local -i maxAD=0\n  local -i maxAE=0\n  local -i maxAF=0\n  local -i maxAG=0\n  local -i maxAH=0\n  local -i maxAI=0\n  local -i maxAJ=0\n  local -i maxAK=0\n  local -i maxAL=0\n  local -i maxAM=0\n  local -i maxAN=0\n  local -i maxAO=0\n  local -i maxAP=0\n  local -i maxAQ=0\n  local -i maxAR=0\n  local -i maxAS=0\n  local -i maxAT=0\n  local -i maxAU=0\n  local -i maxAV=0\n  local -i maxAW=0\n  local -i maxAX=0\n  local -i maxAY=0\n  local -i maxAZ=0\n  local -i maxBA=0\n  local -i maxBB=0\n  local -i maxBC=0\n  local -i\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -i i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[$i,$j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk -v j=$((j+1)) '{print $j}')\n      if ((i > 0)); then\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} ${dp[$((i-1)),$j]}\" | awk '{print $1+$2}')\n      fi\n      if ((j > 0)); then\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} ${dp[$i,$((j-1))]}\" | awk '{print $1+$2}')\n      fi\n      if ((i > 0 && j > 0)); then\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} ${dp[$((i-1)),$((j-1))]}\" | awk '{print $1-$3}')\n      fi\n    done\n  done\n  echo \"${dp[$((n-1)),$((m-1))]}\" | awk -v n=$n -v m=$m '{print $1/(n+m-1)}'\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -i i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[$i,$j]=0\n      for ((k=0;k<i;k++)); do\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} ${dp[$k,$j]}\" | awk '{print $1+$2}')\n      done\n      for ((k=0;k<j;k++)); do\n        dp[$i,$j]=$(echo \"${dp[$i,$j]} ${dp[$i,$k]}\" | awk '{print $1+$2}')\n      done\n      dp[$i,$j]=$(echo \"${dp[$i,$j]} $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')\" | awk '{print $1+$2}')\n    done\n  done\n  echo \"${dp[$((n-1)),$((m-1))]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n    local -n matrix=$1\n    local n=${#matrix[@]}\n    local -a dp=(0)\n    for ((i=0;i<n;i++)); do\n        for ((j=0;j<n;j++)); do\n            local cost=${matrix[$i]}\n            cost=${cost[$j]}\n            if ((i==0 && j==0)); then\n                dp[$j]=$cost\n            elif ((i==0)); then\n                dp[$j]=$((dp[j-1]+cost))\n            elif ((j==0)); then\n                dp[$j]=$((dp[j]+cost))\n            else\n                dp[$j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n                dp[$j]=$((dp[j]+cost))\n            fi\n        done\n    done\n    echo $((dp[n-1]/n))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpgy9y1odi.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpgy9y1odi.sh: line 25: dp[n-1]/n: division by 0 (error token is \"n\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_path=()\n  local max_path_len=0\n  local path=()\n  local path_len=0\n  local path_sum=0\n  local i=0\n  local j=0\n  local current_average=0\n  local current_cell=0\n\n  for ((i=0; i<rows; i++)); do\n    for ((j=0; j<cols; j++)); do\n      current_cell=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i {print $j}')\n      path[$i]=$current_cell\n      path_len=$(($i+1))\n      path_sum=$(($path_sum+$current_cell))\n      current_average=$(($path_sum/$path_len))\n      if (( $(echo \"$current_average > $max_average\" | bc -l) )); then\n        max_average=$current_average\n        max_path=(\"${path[@]}\")\n        max_path_len=$path_len\n      fi\n    done\n  done\n\n  echo \"${max_path[@]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmprgipkgck.sh: line 25: 0+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n arr=$1\n  local -i n=${#arr[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${arr[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i v=$(echo \"${arr[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n      if ((j>0)); then\n        ((v+=dp[j-1]))\n      fi\n      if ((v>dp[j])); then\n        dp[j]=$v\n      fi\n    done\n  done\n  echo \"${dp[-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmphtisiqjy.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmphtisiqjy.sh: line 24: dp: bad array subscript\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$(awk '{print $NF}' <<< \"$matrix\" | sort -nr | head -n1)\n  local -r max_path_length=$((n + m - 1))\n  local -r max_average=$(bc -l <<< \"scale=2; $max_cost / $max_path_length\")\n  local -r max_average_int=$(awk -F. '{print $1}' <<< \"$max_average\")\n  local -r max_average_dec=$(awk -F. '{print $2}' <<< \"$max_average\")\n  local -r max_average_dec_len=$(wc -c <<< \"$max_average_dec\")\n  local -r max_average_dec_len_int=$((max_average_dec_len - 1))\n  local -r max_average_dec_len_int_padded=$(printf \"%0${max_average_dec_len_int}d\" 0)\n  local -r max_average_dec_padded=$(printf \"%s%s\" \"$max_average_dec\" \"$max_average_dec_len_int_padded\")\n  local -r max_average_padded=$(printf \"%s.%s\" \"$max_average_int\" \"$max_average_dec_padded\")\n  local -r max_average_padded_len=$(wc -c <<< \"$max_average_padded\")\n  local -r max_average_padded_len_int=$((max_average_padded_len - 1))\n  local -r max_average_padded_len_int_padded=$(printf \"%0${max_average_padded_len_int}d\" 0)\n  local -r max_average_padded_padded=$(printf \"%s%s\" \"$max_average_padded\" \"$max_average_padded_len_int_padded\")\n  local -r max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpeggcx4yn.sh: line 11: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max=0\n  local max_path=()\n  local path=()\n  local path_cost=0\n  local path_len=0\n  local i=0\n  local j=0\n  local cell=0\n  local cell_cost=0\n  local cell_cost_avg=0\n  local cell_cost_avg_max=0\n\n  # Traverse the matrix\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      cell=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      cell_cost=$(echo \"$cell\" | awk -F: '{print $1}')\n      cell_cost_avg=$(echo \"$cell\" | awk -F: '{print $2}')\n      cell_cost_avg_max=$(echo \"$cell\" | awk -F: '{print $3}')\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        path+=(\"$cell\")\n        path_cost=$cell_cost\n        path_len=1\n        max_path=(\"$cell\")\n        max=$cell_cost\n      elif [[ $i -eq 0 ]]; then\n        if [[ $cell_cost_avg_max -gt $max ]]; then\n          path+=(\"$cell\")\n          path_cost=$cell_cost\n          path_len=1\n          max_path=(\"$cell\")\n          max=$cell_cost\n        fi\n      elif [[ $j -eq 0 ]]; then\n        if [[ $cell_cost_avg_max -gt $max ]]; then\n          path+=(\"$cell\")\n          path_cost=$cell_cost\n          path_len=1\n          max_path=(\"$cell\")\n          max=$cell_cost\n        fi\n      else\n        if [[ $\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpp3evdss3.sh: line 51: unexpected token `newline', conditional binary operator expected\\n/tmp/tmpp3evdss3.sh: line 51: syntax error near `$'\\n/tmp/tmpp3evdss3.sh: line 51: `        if [[ $'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max_cost=\"$((n * m * 100))\"\n  local -r min_cost=\"$((n * m * -100))\"\n  local -r max_paths=\"$((n * m))\"\n  local -r max_path_length=\"$((n + m - 1))\"\n  local -r max_path_cost=\"$((max_path_length * max_cost))\"\n  local -r min_path_cost=\"$((max_path_length * min_cost))\"\n  local -r max_path_sum=\"$((max_path_length * max_cost * max_paths))\"\n  local -r min_path_sum=\"$((max_path_length * min_cost * max_paths))\"\n  local -r max_average=\"$((max_path_sum / max_paths))\"\n  local -r min_average=\"$((min_path_sum / max_paths))\"\n  local -r max_average_fraction=\"$((max_average / 100))\"\n  local -r min_average_fraction=\"$((min_average / 100))\"\n  local -r max_average_fraction_length=\"$(echo \"$max_average_fraction\" | wc -c)\"\n  local -r min_average_fraction_length=\"$(echo \"$min_average_fraction\" | wc -c)\"\n  local -r max_average_fraction_length_plus_one=\"$((max_average_fraction_length + 1))\"\n  local -r min_average_fraction_length_plus_one=\"$((min_average_fraction_length + 1))\"\n  local -r max_average_fraction_length_plus_one_digits=\"$(echo \"$max_average_fraction_length_plus_one\" | wc -c)\"\n  local -r min_average_fraction_length_plus_one_dig\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      dp[i,j]=${matrix[i,j]}\n      if ((i>0)); then\n        ((dp[i,j]+=dp[i-1,j]))\n      fi\n      if ((j>0)); then\n        ((dp[i,j]+=dp[i,j-1]))\n      fi\n      if ((i>0 && j>0)); then\n        ((dp[i,j]-=dp[i-1,j-1]))\n      fi\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i sum=0\n      for ((k=i;k<n;k++)); do\n        for ((l=j;l<n;l++)); do\n          local -i s=dp[k,l]\n          if ((i>0)); then\n            ((s-=dp[i-1,l]))\n          fi\n          if ((j>0)); then\n            ((s-=dp[k,j-1]))\n          fi\n          if ((i>0 && j>0)); then\n            ((s+=dp[i-1,j-1]))\n          fi\n          ((sum+=s))\n          ((max=sum/(k-i+1)/(l-j+1)>max?sum/(k-i+1)/(l-j+1):max))\n        done\n      done\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpaqu3j8un.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r rows=\"$(wc -l <<< \"$matrix\")\"\n  local -r cols=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((rows * cols))\"\n  local -r min=\"$((rows + cols - 1))\"\n  local -r max_avg=\"$(bc -l <<< \"scale=2; ($(paste -sd+ <<< \"$matrix\") / $max)\")\"\n  local -r min_avg=\"$(bc -l <<< \"scale=2; ($(paste -sd+ <<< \"$matrix\") / $min)\")\"\n  local -r max_avg_rounded=\"$(printf '%.*f\\n' 0 \"$max_avg\")\"\n  local -r min_avg_rounded=\"$(printf '%.*f\\n' 0 \"$min_avg\")\"\n  local -r max_avg_rounded_plus_one=\"$((max_avg_rounded + 1))\"\n  local -r min_avg_rounded_plus_one=\"$((min_avg_rounded + 1))\"\n  local -r min_avg_rounded_minus_one=\"$((min_avg_rounded - 1))\"\n  local -r min_avg_rounded_minus_one_plus_one=\"$((min_avg_rounded_minus_one + 1))\"\n  local -r min_avg_rounded_minus_one_plus_one_plus_one=\"$((min_avg_rounded_minus_one_plus_one + 1))\"\n  local -r min_avg_rounded_minus_one_plus_one_plus_one_plus_one=\"$((min_avg_rounded_minus_one_plus_one_plus_one + 1))\"\n  local -r min_avg_rounded_minus_one_plus_one_plus_one_plus_one_plus_one=\"$((min_avg_rounded_minus_one_plus_one_plus_one_plus_one + 1))\"\n  local -r min_av\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpc891jkmw.sh: line 11: bc: command not found\\n/tmp/tmpc891jkmw.sh: line 12: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i i j n\n  local -r nl=$'\\n'\n  local -r sp=' '\n  local -r input=\"$1\"\n  local -r input_len=${#input}\n  local -i row_len=0\n  local -i row_start=0\n  local -i row_end=0\n  local -i col_start=0\n  local -i col_end=0\n  local -i row_count=0\n  local -i col_count=0\n  local -i max_avg=0\n  local -i max_avg_count=0\n  local -i max_avg_sum=0\n  local -i max_avg_len=0\n  local -i max_avg_row=0\n  local -i max_avg_col=0\n  local -i max_avg_row_len=0\n  local -i max_avg_col_len=0\n  local -i max_avg_row_start=0\n  local -i max_avg_col_start=0\n  local -i max_avg_row_end=0\n  local -i max_avg_col_end=0\n  local -i max_avg_row_count=0\n  local -i max_avg_col_count=0\n  local -i max_avg_row_sum=0\n  local -i max_avg_col_sum=0\n  local -i max_avg_row_len=0\n  local -i max_avg_col_len=0\n  local -i max_avg_row_start=0\n  local -i max_avg_col_start=0\n  local -i max_avg_row_end=0\n  local -i max_avg_col_end=0\n  local -i max_avg_row_count=0\n  local -i max_avg_col_count=0\n  local -i max_avg_row_sum=0\n  local -i max_avg_col_sum=0\n  local -i max_avg\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpko6rp1_h.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpko6rp1_h.sh: line 27: dp: bad array subscript\\n/tmp/tmpko6rp1_h.sh: line 27: dp[n-1]/n: division by 0 (error token is \"n\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n1)\"\n  local -r min_avg=\"$(echo \"scale=2; $min_cost / $n\" | bc)\"\n  local -r max_avg=\"$(echo \"scale=2; $max_cost / $n\" | bc)\"\n  local -r avg_step=\"$(echo \"scale=2; ($max_avg - $min_avg) / $n\" | bc)\"\n  local -r max_avg_path=\"$(echo \"$matrix\" | head -n1)\"\n  local -r min_avg_path=\"$(echo \"$matrix\" | tail -n1)\"\n  local -r max_avg_path_cost=\"$(echo \"$max_avg_path\" | tr ' ' '\\n' | paste -sd+ | bc)\"\n  local -r min_avg_path_cost=\"$(echo \"$min_avg_path\" | tr ' ' '\\n' | paste -sd+ | bc)\"\n  local -r max_avg_path_avg=\"$(echo \"scale=2; $max_avg_path_cost / $n\" | bc)\"\n  local -r min_avg_path_avg=\"$(echo \"scale=2; $min_avg_path_cost / $n\" | bc)\"\n  local -r max_avg_path_avg_diff=\"$(echo \"scale=2; $max_avg_path_avg - $max_avg\" | bc)\"\n  local -r min_avg_path_avg_diff=\"$(echo \"scale=2; $min_avg_path_avg - $min_av\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpss1me0qq.sh: line 33: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmpss1me0qq.sh: line 37: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$matrix\")\n  local -a dp\n  local -i i j\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      dp[$i,$j]=$(awk -v i=$i -v j=$j '{print $j}' <<< \"$matrix\" | head -n $((i+1)) | tail -n 1)\n      if ((i > 0)); then\n        dp[$i,$j]=$(bc <<< \"scale=2; ${dp[$i,$j]} + ${dp[$((i-1)),$j]}\")\n      fi\n      if ((j > 0)); then\n        dp[$i,$j]=$(bc <<< \"scale=2; ${dp[$i,$j]} + ${dp[$i,$((j-1))]}\")\n      fi\n      if ((i > 0 && j > 0)); then\n        dp[$i,$j]=$(bc <<< \"scale=2; ${dp[$i,$j]} - ${dp[$((i-1)),$((j-1))]}\")\n      fi\n    done\n  done\n  bc <<< \"scale=2; ${dp[$((n-1)),$((m-1))]} / $((n+m-1))\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpbxe18n29.sh: line 18: bc: command not found\\n/tmp/tmpbxe18n29.sh: line 18: bc: command not found\\n/tmp/tmpbxe18n29.sh: line 18: bc: command not found\\n/tmp/tmpbxe18n29.sh: line 18: bc: command not found\\n/tmp/tmpbxe18n29.sh: line 18: bc: command not found\\n/tmp/tmpbxe18n29.sh: line 18: bc: command not found\\n/tmp/tmpbxe18n29.sh: line 25: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i maxCount=0\n  local -i maxSum=0\n  local -i maxAverage=0\n  local -i average=0\n  local -a path=()\n  local -a maxPath=()\n  local -a row=()\n  local -a maxRow=()\n  local -a col=()\n  local -a maxCol=()\n  local -a matrix=()\n  local -a maxMatrix=()\n  local -a path=()\n  local -a maxPath=()\n  local -a row=()\n  local -a maxRow=()\n  local -a col=()\n  local -a maxCol=()\n  local -a matrix=()\n  local -a maxMatrix=()\n  local -a path=()\n  local -a maxPath=()\n  local -a row=()\n  local -a maxRow=()\n  local -a col=()\n  local -a maxCol=()\n  local -a matrix=()\n  local -a maxMatrix=()\n  local -a path=()\n  local -a maxPath=()\n  local -a row=()\n  local -a maxRow=()\n  local -a col=()\n  local -a maxCol=()\n  local -a matrix=()\n  local -a maxMatrix=()\n  local -a path=()\n  local -a maxPath=()\n  local -a row=()\n  local -a maxRow=()\n  local -a col=()\n  local -a maxCol=()\n  local -a matrix=()\n  local -a maxMatrix=()\n  local -a path=()\n  local -a maxPath=()\n  local -a row=()\n  local -a maxRow=()\n  local -a col=()\n  local -a maxCol=()\n  local -a matrix=()\n  local -a maxMatrix=()\n  local -a path=()\n  local -a\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=\"$(echo \"$matrix\" | wc -l)\"\n  local cols=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -a path=()\n  local -a costs=()\n  local -a max_costs=()\n  local -a max_path=()\n  local -a max_costs_path=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i max_cost=0\n  local -i max_cost_path=0\n  local -i cost=0\n  local -i cost_path=0\n  local -i max_cost_path_index=0\n  local -i max_cost_index=0\n  local -i max_cost_path_index_i=0\n  local -i max_cost_index_i=0\n  local -i max_cost_path_index_j=0\n  local -i max_cost_index_j=0\n  local -i max_cost_path_index_k=0\n  local -i max_cost_index_k=0\n  local -i max_cost_path_index_l=0\n  local -i max_cost_index_l=0\n  local -i max_cost_path_index_m=0\n  local -i max_cost_index_m=0\n  local -i max_cost_path_index_n=0\n  local -i max_cost_index_n=0\n  local -i max_cost_path_index_o=0\n  local -i max_cost_index_o=0\n  local -i max_cost_path_index_p=0\n  local -i max_cost_index_p=0\n  local -i max_cost_path_index_q=0\n  local -i max_cost_index_q=0\n  local -i max_cost_path_index_r=0\n  local -i max_cost_index_r=0\n  local -i max_cost_path_index_s=0\n  local -i max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$matrix\")\n  local -a dp\n  local -a path\n  local -i i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=0\n      path[i,j]=0\n    done\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      if ((i==0 && j==0)); then\n        dp[i,j]=$(awk '{print $1}' <<< \"$matrix\")\n        path[i,j]=1\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1]+$(awk -v j=$((j+1)) '{print $j}' <<< \"$matrix\")))\n        path[i,j]=1\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j]+$(awk -v i=$((i+1)) '{print $1}' <<< \"$matrix\")))\n        path[i,j]=1\n      else\n        local -i a=$((dp[i-1,j]+$(awk -v i=$((i+1)) '{print $1}' <<< \"$matrix\")))\n        local -i b=$((dp[i,j-1]+$(awk -v j=$((j+1)) '{print $j}' <<< \"$matrix\")))\n        if ((a>b)); then\n          dp[i,j]=$a\n          path[i,j]=$((path[i-1,j]+1))\n        else\n          dp[i,j]=$b\n          path[i,j]=$((path[i,j-1]+1))\n        fi\n      fi\n    done\n  done\n  echo $((dp[n-1,m-1\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpnyn357ap.sh: line 42: unexpected EOF while looking for matching `)'\\n/tmp/tmpnyn357ap.sh: line 58: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=0\n  local -i m=0\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i maxSum=0\n  local -i maxPath=0\n  local -i path=0\n  local -i cost=0\n  local -i maxCost=0\n  local -i maxAverage=0\n  local -i average=0\n\n  n=$(echo \"$matrix\" | wc -l)\n  m=$(echo \"$matrix\" | head -n 1 | wc -w)\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      cost=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i+1 {print $j+1}')\n      if ((i == 0 && j == 0)); then\n        maxCost=$cost\n        maxSum=$cost\n        maxPath=1\n      elif ((i == 0)); then\n        sum=$((maxSum + cost))\n        path=$((maxPath + 1))\n        average=$((sum / path))\n        if ((average > maxAverage)); then\n          maxAverage=$average\n          maxSum=$sum\n          maxPath=$path\n        fi\n      elif ((j == 0)); then\n        sum=$((maxSum + cost))\n        path=$((maxPath + 1))\n        average=$((sum / path))\n        if ((average > maxAverage)); then\n          maxAverage=$average\n          maxSum=$sum\n          maxPath=$path\n        fi\n      else\n        sum=$((maxSum + cost))\n        path=$((maxPath + 1))\n        average=$((sum / path))\n        if ((average > maxAverage)); then\n          maxAverage=$average\n          maxSum=$sum\n          maxPath=$path\n        fi\n      fi\n    done\n  done\n\n  echo \"$maxAverage\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpyo76xe8m.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a costs\n  local -a paths\n  local -a path\n  local -i i\n  local -i j\n  local -i k\n  local -i cost\n  local -i maxCost\n  local -i maxPath\n  local -i maxAverage\n  local -i average\n  local -i sum\n  local -i count\n  local -i maxCount\n  local -i maxSum\n  local -i maxAverage\n  local -i maxI\n  local -i maxJ\n  local -i maxK\n  local -i maxL\n  local -i maxM\n  local -i maxN\n  local -i maxO\n  local -i maxP\n  local -i maxQ\n  local -i maxR\n  local -i maxS\n  local -i maxT\n  local -i maxU\n  local -i maxV\n  local -i maxW\n  local -i maxX\n  local -i maxY\n  local -i maxZ\n  local -i maxAA\n  local -i maxAB\n  local -i maxAC\n  local -i maxAD\n  local -i maxAE\n  local -i maxAF\n  local -i maxAG\n  local -i maxAH\n  local -i maxAI\n  local -i maxAJ\n  local -i maxAK\n  local -i maxAL\n  local -i maxAM\n  local -i maxAN\n  local -i maxAO\n  local -i maxAP\n  local -i maxAQ\n  local -i maxAR\n  local -i maxAS\n  local -i maxAT\n  local -i maxAU\n  local -i maxAV\n  local -i maxAW\n  local -i maxAX\n  local -i maxAY\n  local -i maxAZ\n  local -i maxBA\n  local -i maxBB\n  local -i maxBC\n  local -i maxBD\n  local -i maxBE\n  local -i maxBF\n  local -i maxBG\n  local\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -1 | wc -w)\n  local -a dp\n  local i j\n  for ((i = 0; i < n; i++)); do\n    dp[i]=$(echo \"$matrix\" | head -$((i + 1)) | tail -1 | awk '{for(i=1;i<=NF;i++)a[i]+=$i}END{for(i=1;i<=NF;i++)printf(\"%s \",a[i])}')\n  done\n  for ((i = 1; i < n; i++)); do\n    for ((j = 1; j < m; j++)); do\n      dp[i]=\"${dp[i]} $((${dp[i - 1]##* } + ${dp[i]##* }))\"\n    done\n  done\n  echo \"${dp[n - 1]##* }\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -1 | wc -w)\n  local i j k\n  local sum=0\n  local max=0\n  local max_i=0\n  local max_j=0\n  local max_k=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      for ((k=0; k<n+m-1; k++)); do\n        sum=$(echo \"$matrix\" | awk -v i=$i -v j=$j -v k=$k '{\n          if (i+j==k) {\n            sum+=$(i+1);\n          }\n        } END {\n          print sum;\n        }')\n        if ((sum > max)); then\n          max=$sum\n          max_i=$i\n          max_j=$j\n          max_k=$k\n        fi\n      done\n    done\n  done\n  echo \"$max_i $max_j $max_k\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=$1\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local total=0\n  local path=\"\"\n  local max=0\n  local maxPath=\"\"\n  for ((i=0; i<rows; i++)); do\n    for ((j=0; j<cols; j++)); do\n      local cell=$(echo \"$matrix\" | awk -v i=$i -v j=$j 'NR==i {print $j}')\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        total=$cell\n        path=\"$cell\"\n      elif [[ $i -eq 0 ]]; then\n        total=$((total + cell))\n        path=\"$path $cell\"\n      elif [[ $j -eq 0 ]]; then\n        total=$((total + cell))\n        path=\"$path $cell\"\n      else\n        local up=$(echo \"$matrix\" | awk -v i=$((i-1)) -v j=$j 'NR==i {print $j}')\n        local left=$(echo \"$matrix\" | awk -v i=$i -v j=$((j-1)) 'NR==i {print $j}')\n        if [[ $up -gt $left ]]; then\n          total=$((total + cell))\n          path=\"$path $cell\"\n        else\n          total=$((total + cell))\n          path=\"$path $cell\"\n        fi\n      fi\n      if [[ $i -eq $((rows-1)) && $j -eq $((cols-1)) ]]; then\n        local average=$(echo \"scale=2; $total / $((rows*cols))\" | bc)\n        if [[ $average -gt $max ]]; then\n          max=$average\n          maxPath=\"$path\"\n        fi\n      fi\n    done\n  done\n  echo \"$maxPath\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpfy8qlej2.sh: line 37: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((n * m * 9))\"\n  local -r max_cost_plus_one=\"$((max_cost + 1))\"\n  local -r max_cost_plus_two=\"$((max_cost + 2))\"\n  local -r max_cost_plus_three=\"$((max_cost + 3))\"\n  local -r max_cost_plus_four=\"$((max_cost + 4))\"\n  local -r max_cost_plus_five=\"$((max_cost + 5))\"\n  local -r max_cost_plus_six=\"$((max_cost + 6))\"\n  local -r max_cost_plus_seven=\"$((max_cost + 7))\"\n  local -r max_cost_plus_eight=\"$((max_cost + 8))\"\n  local -r max_cost_plus_nine=\"$((max_cost + 9))\"\n  local -r max_cost_plus_ten=\"$((max_cost + 10))\"\n  local -r max_cost_plus_eleven=\"$((max_cost + 11))\"\n  local -r max_cost_plus_twelve=\"$((max_cost + 12))\"\n  local -r max_cost_plus_thirteen=\"$((max_cost + 13))\"\n  local -r max_cost_plus_fourteen=\"$((max_cost + 14))\"\n  local -r max_cost_plus_fifteen=\"$((max_cost + 15))\"\n  local -r max_cost_plus_sixteen=\"$((max_cost + 16))\"\n  local -r max_cost_plus_seventeen=\"$((max_cost + 17))\"\n  local -r max_cost_plus_eighteen=\"$((max_cost + 18))\"\n  local -r max_cost_plus_nineteen=\"$((max_cost + 19))\"\n  local -r max_cost_plus_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      dp[i,j]=${matrix[i,j]}\n      if ((i>0)); then\n        ((dp[i,j]+=dp[i-1,j]))\n      fi\n      if ((j>0)); then\n        ((dp[i,j]+=dp[i,j-1]))\n      fi\n      if ((i>0 && j>0)); then\n        ((dp[i,j]-=dp[i-1,j-1]))\n      fi\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      for ((k=i;k<n;k++)); do\n        for ((l=j;l<n;l++)); do\n          local -i sum=dp[k,l]\n          if ((i>0)); then\n            ((sum-=dp[i-1,l]))\n          fi\n          if ((j>0)); then\n            ((sum-=dp[k,j-1]))\n          fi\n          if ((i>0 && j>0)); then\n            ((sum+=dp[i-1,j-1]))\n          fi\n          local -i cells=(k-i+1)*(l-j+1)\n          local -i avg=$((sum/cells))\n          if ((avg>max)); then\n            max=$avg\n          fi\n        done\n      done\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpwzq3oxt2.sh: line 39: syntax error near unexpected token `('\\n/tmp/tmpwzq3oxt2.sh: line 39: `          local -i cells=(k-i+1)*(l-j+1)'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -a costs\n  local -i i j\n  local -i max_cost=0\n  local -i max_cost_i=0\n  local -i max_cost_j=0\n  local -i max_cost_i_prev=0\n  local -i max_cost_j_prev=0\n  local -i max_cost_prev=0\n  local -i max_cost_prev_prev=0\n  local -i max_cost_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_cost_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpvmqajarh.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -n max_avg=$2\n  local -n path=$3\n  local -n path_avg=$4\n  local -n path_cost=$5\n  local -n path_len=$6\n  local -n path_max_avg=$7\n  local -n path_max_avg_cost=$8\n  local -n path_max_avg_len=$9\n\n  local -n row_0=matrix[0]\n  local -n row_1=matrix[1]\n  local -n row_2=matrix[2]\n  local -n row_3=matrix[3]\n\n  local -n path_0=path[0]\n  local -n path_1=path[1]\n  local -n path_2=path[2]\n  local -n path_3=path[3]\n\n  local -n path_avg_0=path_avg[0]\n  local -n path_avg_1=path_avg[1]\n  local -n path_avg_2=path_avg[2]\n  local -n path_avg_3=path_avg[3]\n\n  local -n path_cost_0=path_cost[0]\n  local -n path_cost_1=path_cost[1]\n  local -n path_cost_2=path_cost[2]\n  local -n path_cost_3=path_cost[3]\n\n  local -n path_len_0=path_len[0]\n  local -n path_len_1=path_len[1]\n  local -n path_len_2=path_len[2]\n  local -n path_len_3=path_len[3]\n\n  local -n path_max_avg_0=path_max_avg[0]\n  local -n path_max_avg_1=path_max_avg[1]\n  local -n path_max_avg_2=path_max_avg[2]\n  local -n path_max_avg_3=path_max_avg[3\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmphro24w9h.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmphro24w9h.sh: line 7: local: `': not a valid identifier\\n/tmp/tmphro24w9h.sh: line 8: local: `': not a valid identifier\\n/tmp/tmphro24w9h.sh: line 9: local: `': not a valid identifier\\n/tmp/tmphro24w9h.sh: line 10: local: `': not a valid identifier\\n/tmp/tmphro24w9h.sh: line 11: local: `': not a valid identifier\\n/tmp/tmphro24w9h.sh: line 12: local: `': not a valid identifier\\n/tmp/tmphro24w9h.sh: line 13: local: `': not a valid identifier\\n/tmp/tmphro24w9h.sh: line 14: local: `': not a valid identifier\\n/tmp/tmphro24w9h.sh: line 44: local: `path_max_avg[3': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i m=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i sum=0\n  local -i count=0\n  local -i average=0\n  local -i max_average=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_average_count=0\n  local -i max_average_sum=0\n  local -i max_average_i=0\n  local -i max_average_j=0\n  local -i max_average_k=0\n  local -i max_average_l=0\n  local -i max_average_max=0\n  local -i max_average_max_i=0\n  local -i max_average_max_j=0\n  local -i max_average_max_k=0\n  local -i max_average_max_l=0\n  local -i max_average_max_sum=0\n  local -i max_average_max_count=0\n  local -i max_average_max_average=0\n  local -i max_average_max_average_count=0\n  local -i max_average_max_average_sum=0\n  local -i max_average_max_average_i=0\n  local -i max_average_max_average_j=0\n  local -i max_average_max_average_k=0\n  local -i max_average_max_average_l=0\n  local -i max_average_max_average_max=0\n  local -i max_average_max_average_max_i=0\n  local -i max_average_max_average_max_j=0\n  local -i max_average_max_average_max_k=0\n  local -i max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i num=0\n  local -i max_num=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n\n  while read -r line; do\n    n=$((n+1))\n    j=0\n    for num in $line; do\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        max=$num\n        max_i=$i\n        max_j=$j\n        max_num=1\n        max_sum=$num\n      elif [[ $i -eq 0 ]]; then\n        sum=$((sum+num))\n        if [[ $sum -gt $max_sum ]]; then\n          max_sum=$sum\n          max_i=$i\n          max_j=$j\n          max_num=$((j+1))\n        fi\n      elif [[ $j -eq 0 ]]; then\n        sum=$((sum+num))\n        if [[ $sum -gt $max_sum ]]; then\n          max_sum=$sum\n          max_i=$i\n          max_j=$j\n          max_num=$((i+1))\n        fi\n      else\n        sum=$((sum+num))\n        if [[ $sum -gt $max_sum ]]; then\n          max_sum=$sum\n          max_i=$i\n          max_j=$j\n          max_num=$((i+j+2))\n        fi\n      fi\n      j=$((j+1))\n    done\n    i=$((i+1))\n  done <<< \"$matrix\"\n  echo \"$max_sum $max_num\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp6_3dbydz.sh: line 21: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$(bc <<< \"$n * $m * 100\")\"\n  local -r max_path=\"$(seq 1 \"$n\" | paste -sd ' ')\"\n  local -r max_path_cost=\"$(echo \"$matrix\" | awk -v n=\"$n\" -v m=\"$m\" -v max_path=\"$max_path\" '\n    BEGIN {\n      split(max_path, max_path_array, \" \")\n      for (i = 1; i <= n; i++) {\n        for (j = 1; j <= m; j++) {\n          max_path_cost += matrix[i, j]\n        }\n      }\n    }\n    {\n      for (i = 1; i <= NF; i++) {\n        matrix[NR, i] = $i\n      }\n    }\n    END {\n      print max_path_cost\n    }\n  ')\"\n  local -r max_path_average=\"$(bc <<< \"scale=2; $max_path_cost / $n\")\"\n  local -r max_path_average_rounded=\"$(printf '%.*f\\n' 0 \"$max_path_average\")\"\n  local -r max_path_average_rounded_padded=\"$(printf '%03d\\n' \"$max_path_average_rounded\")\"\n  local -r max_path_average_rounded_padded_reversed=\"$(rev <<< \"$max_path_average_rounded_padded\")\"\n  local -r max_path_average_rounded_padded_reversed_decimal_part=\"${max_path_average_rounded_padded_reversed:0:2}\"\n  local -r max_path_average_rounded_padded_reversed_decimal_part_reversed=\"$(rev <<< \"$max_path_average_rounded_padded_reversed_decimal\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmph5_gu7mx.sh: line 46: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmph5_gu7mx.sh: line 50: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r mn=$((n * m))\n  local -r mn1=$((mn - 1))\n  local -r mn2=$((mn - 2))\n  local -r mn3=$((mn - 3))\n  local -r mn4=$((mn - 4))\n  local -r mn5=$((mn - 5))\n  local -r mn6=$((mn - 6))\n  local -r mn7=$((mn - 7))\n  local -r mn8=$((mn - 8))\n  local -r mn9=$((mn - 9))\n  local -r mn10=$((mn - 10))\n  local -r mn11=$((mn - 11))\n  local -r mn12=$((mn - 12))\n  local -r mn13=$((mn - 13))\n  local -r mn14=$((mn - 14))\n  local -r mn15=$((mn - 15))\n  local -r mn16=$((mn - 16))\n  local -r mn17=$((mn - 17))\n  local -r mn18=$((mn - 18))\n  local -r mn19=$((mn - 19))\n  local -r mn20=$((mn - 20))\n  local -r mn21=$((mn - 21))\n  local -r mn22=$((mn - 22))\n  local -r mn23=$((mn - 23))\n  local -r mn24=$((mn - 24))\n  local -r mn25=$((mn - 25))\n  local -r mn26=$((mn - 26))\n  local -r mn27=$((mn - 27))\n  local -r mn28=$((mn - 28))\n  local -r mn29=$((mn - 29))\n  local -r mn30=$((mn - 30))\n  local -r mn31=$((mn - 31))\n  local -r mn32=$((mn - 32))\n\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local -a path\n  local -a cost\n  local -a sum\n  local -a count\n  local -a average\n  local i j\n  local max_average=0\n  local max_average_i=0\n  local max_average_j=0\n\n  for ((i=0; i<n; i++)); do\n    path[i]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1)\n    cost[i]=$(echo \"${path[i]}\" | tr ' ' '\\n' | paste -sd+ | bc)\n    sum[i]=$((cost[i]))\n    count[i]=1\n    average[i]=$((sum[i]/count[i]))\n  done\n\n  for ((i=1; i<n; i++)); do\n    for ((j=1; j<n; j++)); do\n      sum[i*n+j]=$((sum[(i-1)*n+j]+sum[i*n+j-1]))\n      count[i*n+j]=$((count[(i-1)*n+j]+count[i*n+j-1]))\n      average[i*n+j]=$((sum[i*n+j]/count[i*n+j]))\n      if [[ ${average[i*n+j]} -gt $max_average ]]; then\n        max_average=${average[i*n+j]}\n        max_average_i=$i\n        max_average_j=$j\n      fi\n    done\n  done\n\n  echo \"max_average: $max_average\"\n  echo \"max_average_i: $max_average_i\"\n  echo \"max_average_j: $max_average_j\"\n  echo \"path: \"\n  while [[ $max_average_i -gt 0 || $max_average_j -gt 0 ]]; do\n    if [[ $max_average_i -gt 0 && $max_average_j -gt 0 ]]; then\n      if [[ ${average\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpg8yg0ao3.sh: line 46: unexpected token `newline', conditional binary operator expected\\n/tmp/tmpg8yg0ao3.sh: line 46: syntax error near `}'\\n/tmp/tmpg8yg0ao3.sh: line 46: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local dp=()\n  local i j\n  for ((i=0;i<n;i++)); do\n    dp[i]=()\n    for ((j=0;j<m;j++)); do\n      dp[i][j]=0\n    done\n  done\n  dp[0][0]=$(echo \"$matrix\" | head -n1 | awk '{print $1}')\n  for ((i=1;i<n;i++)); do\n    dp[i][0]=$((dp[i-1][0] + $(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk '{print $1}')))\n  done\n  for ((j=1;j<m;j++)); do\n    dp[0][j]=$((dp[0][j-1] + $(echo \"$matrix\" | head -n1 | awk -v j=$((j+1)) '{print $j}')))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<m;j++)); do\n      dp[i][j]=$((dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + $(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk -v j=$((j+1)) '{print $j}')))\n    done\n  done\n  local max=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      local avg=$((dp[i][j] / ((i+1)*(j+1))))\n      if ((avg > max)); then\n        max=$avg\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpi01qc9vj.sh: line 12: dp[i]: cannot assign list to array member\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local -a path\n  local -i i j k\n  local -i max_avg=0\n  local -i max_avg_path_len=0\n  local -i max_avg_path_idx=0\n  local -i max_avg_path_sum=0\n  local -i max_avg_path_len_sum=0\n  local -i max_avg_path_idx_sum=0\n  local -i max_avg_path_sum_sum=0\n  local -i max_avg_path_len_sum_sum=0\n  local -i max_avg_path_idx_sum_sum=0\n  local -i max_avg_path_sum_sum_sum=0\n  local -i max_avg_path_len_sum_sum_sum=0\n  local -i max_avg_path_idx_sum_sum_sum=0\n  local -i max_avg_path_sum_sum_sum_sum=0\n  local -i max_avg_path_len_sum_sum_sum_sum=0\n  local -i max_avg_path_idx_sum_sum_sum_sum=0\n  local -i max_avg_path_sum_sum_sum_sum_sum=0\n  local -i max_avg_path_len_sum_sum_sum_sum_sum=0\n  local -i max_avg_path_idx_sum_sum_sum_sum_sum=0\n  local -i max_avg_path_sum_sum_sum_sum_sum_sum=0\n  local -i max_avg_path_len_sum_sum_sum_sum_sum_sum=0\n  local -i max_avg_path_idx_sum_sum_sum_sum_sum_sum=0\n  local -i max_avg_path_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n\n  local -i i\n  local -i j\n  local -i maxAverage\n  local -i maxAverageI\n  local -i maxAverageJ\n  local -i maxAverageN\n  local -i maxAverageSum\n  local -i maxAverageCount\n  local -i maxAverageAverage\n  local -i maxAverageAverageI\n  local -i maxAverageAverageJ\n  local -i maxAverageAverageN\n  local -i maxAverageAverageSum\n  local -i maxAverageAverageCount\n  local -i maxAverageAverageAverage\n  local -i maxAverageAverageAverageI\n  local -i maxAverageAverageAverageJ\n  local -i maxAverageAverageAverageN\n  local -i maxAverageAverageAverageSum\n  local -i maxAverageAverageAverageCount\n  local -i maxAverageAverageAverageAverage\n  local -i maxAverageAverageAverageAverageI\n  local -i maxAverageAverageAverageAverageJ\n  local -i maxAverageAverageAverageAverageN\n  local -i maxAverageAverageAverageAverageSum\n  local -i maxAverageAverageAverageAverageCount\n  local -i maxAverageAverageAverageAverageAverage\n  local -i maxAverageAverageAverageAverageAverageI\n  local -i maxAverageAverageAverageAverageAverageJ\n  local -i maxAverageAverageAverageAverageAverageN\n  local -i maxAverageAverageAverageAverageAverageSum\n  local -i maxAverageAverageAverageAverageAverageCount\n  local -i maxAverageAverageAverageAverageAverageAverage\n  local -i maxAverageAverageAverageAverageAverageAverageI\n  local -i maxAverageAverageAverageAverageAverageAverageJ\n  local -i maxAverageAverageAverageAverageAverageAverageN\n  local -i maxAverageAverageAverageAverageAverageAverageSum\n  local -i maxAverageAverageAverageAverageAverageAverageCount\n  local -i maxAverageAverageAverageAverageAverageAverageAverage\n  local -i maxAverageAverageAverageAverageAverageAverageAverageI\n  local -i maxAverageAverageAverageAverageAverageAverageAverageJ\n  local -i maxAverageAverageAverageAverageAverageAverageAverageN\n  local -i maxAverageAverageAverageAverageAverageAverageAverageSum\n  local -i maxAverageAverageAverageAverageAverageAverageAverageCount\n  local -i maxAverageAverageAverageAverageAverageAverageAverageAverage\n  local -i maxAverageAverageAverageAverageAverageAverageAverageAverageI\n \n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n1)\"\n  local -r max_path_length=\"$((n + m - 2))\"\n  local -r min_path_length=\"$((n < m ? n : m))\"\n  local -r min_average=\"$(echo \"scale=10; $min_cost / $min_path_length\" | bc)\"\n  local -r max_average=\"$(echo \"scale=10; $max_cost / $max_path_length\" | bc)\"\n  local -r step=\"$(echo \"scale=10; ($max_average - $min_average) / 100\" | bc)\"\n  local -r epsilon=\"$(echo \"scale=10; $step / 10\" | bc)\"\n  local -r max_iterations=\"100\"\n  local -r max_iterations_without_improvement=\"10\"\n  local -r max_iterations_without_improvement_factor=\"1.5\"\n  local -r max_iterations_without_improvement_factor_step=\"0.1\"\n  local -r max_iterations_without_improvement_factor_max=\"2\"\n  local -r max_iterations_without_improvement_factor_min=\"1\"\n  local -r max_iterations_without_improvement_factor_epsilon=\"0.1\"\n  local -r max_iterations_without_improvement_factor_max_iterations=\"100\"\n  local -r max_iterations_without_improvement_factor_max_iterations_without_improvement=\"10\"\n  local -r max_iterations_without_improvement_factor_max_iterations_without_improvement_factor=\"1.5\"\n\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpjk24btn8.sh: line 13: bc: command not found\\n/tmp/tmpjk24btn8.sh: line 14: bc: command not found\\n/tmp/tmpjk24btn8.sh: line 15: bc: command not found\\n/tmp/tmpjk24btn8.sh: line 16: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_average_path=\"\"\n  local max_average_path_cost=0\n  local max_average_path_cells=0\n  local path_cost=0\n  local path_cells=0\n  local path=\"\"\n  local row=0\n  local col=0\n  local cell=0\n  local cell_cost=0\n  local cell_cost_average=0\n  local cell_cost_average_path=\"\"\n  local cell_cost_average_path_cost=0\n  local cell_cost_average_path_cells=0\n  local cell_cost_average_path_average=0\n  local cell_cost_average_path_average_path=\"\"\n  local cell_cost_average_path_average_path_cost=0\n  local cell_cost_average_path_average_path_cells=0\n  local cell_cost_average_path_average_path_average=0\n  local cell_cost_average_path_average_path_average_path=\"\"\n  local cell_cost_average_path_average_path_average_path_cost=0\n  local cell_cost_average_path_average_path_average_path_cells=0\n  local cell_cost_average_path_average_path_average_path_average=0\n  local cell_cost_average_path_average_path_average_path_average_path=\"\"\n  local cell_cost_average_path_average_path_average_path_average_path_cost=0\n  local cell_cost_average_path_average_path_average_path_average_path_cells=0\n  local cell_cost_average_path_average_path_average_path_average_path_average=0\n  local cell_cost_average_path_average_path_average_path_average_path_average_path=\"\"\n  local cell_cost_average_path_average_path_average_path_average_path_average_path_cost=0\n\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i sum_i=0\n  local -i sum_j=0\n  local -i max_sum=0\n  local -i max_sum_i=0\n  local -i max_sum_j=0\n  local -i max_sum_n=0\n  local -i max_sum_m=0\n  local -i max_sum_p=0\n  local -i max_sum_q=0\n  local -i max_sum_r=0\n  local -i max_sum_s=0\n  local -i max_sum_t=0\n  local -i max_sum_u=0\n  local -i max_sum_v=0\n  local -i max_sum_w=0\n  local -i max_sum_x=0\n  local -i max_sum_y=0\n  local -i max_sum_z=0\n  local -i max_sum_aa=0\n  local -i max_sum_ab=0\n  local -i max_sum_ac=0\n  local -i max_sum_ad=0\n  local -i max_sum_ae=0\n  local -i max_sum_af=0\n  local -i max_sum_ag=0\n  local -i max_sum_ah=0\n  local -i max_sum_ai=0\n  local -i max_sum_aj=0\n  local -i max_sum_ak=0\n  local -i max_sum_al=0\n  local -i max_sum_am=0\n  local -i max_sum_an=0\n  local -i max_sum_ao=0\n  local -i max_sum_ap=0\n  local -i max_sum_aq=0\n  local -i max_sum_ar=0\n  local -i max_sum_as=0\n  local -i max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_sum=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_sum=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_k=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n arr=\"$1\"\n  local n=${#arr[@]}\n  local -a dp\n  local -a path\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      if ((i == 0 && j == 0)); then\n        dp[i,j]=${arr[i,j]}\n        path[i,j]=${arr[i,j]}\n      elif ((i == 0)); then\n        dp[i,j]=$((dp[i,j-1]+arr[i,j]))\n        path[i,j]=$((path[i,j-1]+arr[i,j]))\n      elif ((j == 0)); then\n        dp[i,j]=$((dp[i-1,j]+arr[i,j]))\n        path[i,j]=$((path[i-1,j]+arr[i,j]))\n      else\n        dp[i,j]=$((dp[i-1,j]+arr[i,j]))\n        path[i,j]=$((path[i-1,j]+arr[i,j]))\n        if ((dp[i,j-1] > dp[i,j])); then\n          dp[i,j]=$((dp[i,j-1]+arr[i,j]))\n          path[i,j]=$((path[i,j-1]+arr[i,j]))\n        fi\n      fi\n    done\n  done\n  echo $((path[n-1,n-1]/(2*n-1)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmprf9fvuqc.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmprf9fvuqc.sh: line 31: path: bad array subscript\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_average_int=\"$(bc <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(bc <<< \"scale=2; $max_average - $max_average_int\")\"\n  local -r max_average_dec_int=\"$(bc <<< \"$max_average_dec * 100\")\"\n  local -r max_average_dec_int_len=\"${#max_average_dec_int}\"\n  local -r max_average_dec_int_len_half=\"$((max_average_dec_int_len / 2))\"\n  local -r max_average_dec_int_len_half_plus_one=\"$((max_average_dec_int_len_half + 1))\"\n  local -r max_average_dec_int_len_half_minus_one=\"$((max_average_dec_int_len_half - 1))\"\n  local -r max_average_dec_int_len_half_minus_one_plus_one=\"$((max_average_dec_int_len_half_minus_one + 1))\"\n  local -r max_average_dec_int_len_half_minus_one_plus_one_plus_one=\"$((max_average_dec_int_len_half_minus_one_plus_one + 1))\"\n  local -r max_average_dec_int_len_half_minus_one_plus_one_plus_one_plus_one=\"$((max_average_dec_int_len_half_minus_one_plus_one_plus_one + 1))\"\n  local -r max_average_dec_int_len_half_minus_one_plus_one_plus_one_plus_one_plus_one=\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp4spopazw.sh: line 33: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmp4spopazw.sh: line 37: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$matrix\")\n  local -i i j k\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[i,j]=0\n    done\n  done\n  dp[0,0]=$(cut -d' ' -f1 <<< \"$matrix\")\n  for ((i=1;i<n;i++)); do\n    dp[i,0]=$((dp[i-1,0] + $(cut -d' ' -f$((i+1)) <<< \"$matrix\")))\n  done\n  for ((j=1;j<m;j++)); do\n    dp[0,j]=$((dp[0,j-1] + $(cut -d' ' -f$((j+1)) <<< \"$matrix\")))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<m;j++)); do\n      dp[i,j]=$((dp[i-1,j] + dp[i,j-1] + $(cut -d' ' -f$((i+1)) <<< \"$matrix\") - dp[i-1,j-1]))\n    done\n  done\n  echo $((dp[n-1,m-1] / (n + m - 1)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpy1yy7mfy.sh: line 21: dp[0,j-1] + 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp=()\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      local -i cost=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk \"{print \\$$((j+1))}\")\n      if ((i==0 && j==0)); then\n        dp[i,j]=$cost\n      elif ((i==0)); then\n        dp[i,j]=$((dp[i,j-1]+cost))\n      elif ((j==0)); then\n        dp[i,j]=$((dp[i-1,j]+cost))\n      else\n        dp[i,j]=$(((dp[i-1,j]+dp[i,j-1])/2+cost))\n      fi\n    done\n  done\n  echo \"${dp[n-1,m-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpnm29wbyy.sh: line 13: local: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n 1)\"\n  local -r min_average=\"$(echo \"scale=2; $min_cost / $n\" | bc -l)\"\n  local -r max_average=\"$(echo \"scale=2; $max_cost / $n\" | bc -l)\"\n  local -r step=\"$(echo \"scale=2; ($max_average - $min_average) / $n\" | bc -l)\"\n  local -r epsilon=\"0.01\"\n  local -r max_iterations=\"$(echo \"scale=0; $n / $epsilon\" | bc -l)\"\n  local -r max_iterations=\"$((max_iterations + 1))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$((max_iterations * 2))\"\n  local -r max_iterations=\"$\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplie39wzp.sh: line 40: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmplie39wzp.sh: line 44: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j])+${matrix[i]:j:1})\n      fi\n    done\n  done\n  echo $((dp[n-1]/n))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp5mn0ut5j.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmp5mn0ut5j.sh: line 26: dp: bad array subscript\\n/tmp/tmp5mn0ut5j.sh: line 26: dp[n-1]/n: division by 0 (error token is \"n\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local n=$(wc -l <<< \"$matrix\")\n  local -a dp\n  local -a path\n  local -a maxPath\n  local maxAvg=0\n  local avg=0\n  local i=0\n  local j=0\n  local k=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      dp[$i,$j]=0\n      path[$i,$j]=0\n    done\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i == 0 && j == 0)); then\n        dp[$i,$j]=$(awk -v i=$i -v j=$j '{print $i+1}' <<< \"$matrix\" | awk -v j=$j '{print $j+1}')\n      elif ((i == 0)); then\n        dp[$i,$j]=$((dp[$i,$((j-1))]+$(awk -v i=$i -v j=$j '{print $i+1}' <<< \"$matrix\" | awk -v j=$j '{print $j+1}')))\n      elif ((j == 0)); then\n        dp[$i,$j]=$((dp[$((i-1)),$j]+$(awk -v i=$i -v j=$j '{print $i+1}' <<< \"$matrix\" | awk -v j=$j '{print $j+1}')))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))]+$(awk -v i=$i -v j=$j '{print $i+1}' <<< \"$matrix\" | awk -v j=$j '{print $j+1}')))\n        if ((dp[$i,$j] < dp[$((i-1)),$j]+$(awk -v i=$i -v j=$j '{\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp81_m32t8.sh: line 32: unexpected EOF while looking for matching `''\\n/tmp/tmp81_m32t8.sh: line 48: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp=(0)\n  for ((i=1; i<n; i++)); do\n    dp[i]=$((${matrix[0]:0:i}+${dp[i-1]}))\n  done\n  for ((i=1; i<n; i++)); do\n    dp[0]=$((${matrix[i]:0:1}+${dp[0]}))\n    for ((j=1; j<n; j++)); do\n      dp[j]=$((${matrix[i]:j:1}+$((${dp[j]}<${dp[j-1]}?${dp[j]}:${dp[j-1]}))))\n    done\n  done\n  echo $(((${dp[n-1]}+$n-1)/$n))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpie_pfd85.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpie_pfd85.sh: line 18: (0+0-1)/0: division by 0 (error token is \"0\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n    local -a matrix\n    local -i i j k l\n    local -i max_i max_j\n    local -i max_avg\n    local -i avg\n    local -i sum\n    local -i n\n    local -i m\n    local -i num_cells\n\n    IFS=$'\\n' read -d '' -r -a matrix < <(echo \"$1\")\n    n=${#matrix[@]}\n    m=${#matrix[0]}\n    num_cells=$((n*m))\n\n    max_avg=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            sum=0\n            for ((k=i; k<n; k++)); do\n                for ((l=j; l<m; l++)); do\n                    sum=$((sum+matrix[k][l]))\n                done\n            done\n            avg=$((sum/num_cells))\n            if ((avg>max_avg)); then\n                max_avg=$avg\n                max_i=$i\n                max_j=$j\n            fi\n        done\n    done\n\n    echo \"$max_i $max_j\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpe5p69ak1.sh: line 27: sum+matrix[k][l]: syntax error: invalid arithmetic operator (error token is \"[l]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r rows=\"$(wc -l <<< \"$matrix\")\"\n  local -r cols=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max_cost=\"$((rows * cols))\"\n  local -r max_avg=\"$((max_cost / 2))\"\n  local -r max_avg_path=\"$(\n    local -r max_avg_path_matrix=\"$(\n      local -r max_avg_path_matrix_matrix=\"$(\n        local -r max_avg_path_matrix_matrix_matrix=\"$(\n          local -r max_avg_path_matrix_matrix_matrix_matrix=\"$(\n            local -r max_avg_path_matrix_matrix_matrix_matrix_matrix=\"$(\n              local -r max_avg_path_matrix_matrix_matrix_matrix_matrix_matrix=\"$(\n                local -r max_avg_path_matrix_matrix_matrix_matrix_matrix_matrix_matrix=\"$(\n                  local -r max_avg_path_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix=\"$(\n                    local -r max_avg_path_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix=\"$(\n                      local -r max_avg_path_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix=\"$(\n                        local -r max_avg_path_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix=\"$(\n                          local -r max_avg_path_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix_matrix=\"$(\n                           \n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkkf_azvx.sh: line 23: unexpected EOF while looking for matching `)'\\n/tmp/tmpkkf_azvx.sh: line 40: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_avg=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_avg_int=\"$(cut -d. -f1 <<< \"$max_avg\")\"\n  local -r max_avg_dec=\"$(cut -d. -f2 <<< \"$max_avg\")\"\n  local -r max_avg_dec_len=\"${#max_avg_dec}\"\n  local -r max_avg_dec_len_padded=\"$((max_avg_dec_len + 1))\"\n  local -r max_avg_dec_padded=\"$(printf \"%0${max_avg_dec_len_padded}d\" \"$max_avg_dec\")\"\n  local -r max_avg_padded=\"$max_avg_int.$max_avg_dec_padded\"\n  local -r max_avg_padded_len=\"${#max_avg_padded}\"\n  local -r max_avg_padded_len_padded=\"$((max_avg_padded_len + 1))\"\n  local -r max_avg_padded_padded=\"$(printf \"%0${max_avg_padded_len_padded}d\" \"$max_avg_padded\")\"\n  local -r max_avg_padded_padded_len=\"${#max_avg_padded_padded}\"\n  local -r max_avg_padded_padded_len_padded=\"$((max_avg_padded_padded_len + 1))\"\n  local -r max_avg_padded_padded_padded=\"$(printf \"%0${max_avg_padded_padded_len_padded}d\" \"$max_avg_padded\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpl9kvsclb.sh: line 34: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmpl9kvsclb.sh: line 38: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local input=$1\n  local matrix=()\n  local row=()\n  local col=()\n  local i=0\n  local j=0\n  local max=0\n  local sum=0\n  local avg=0\n\n  # convert input to matrix\n  while read -r line; do\n    row=($line)\n    matrix[i]=${row[@]}\n    ((i++))\n  done <<< \"$input\"\n\n  # find max average\n  for ((i=0; i<${#matrix[@]}; i++)); do\n    for ((j=0; j<${#matrix[@]}; j++)); do\n      col=(${matrix[@]:$i:1})\n      sum=$((sum + col[j]))\n      avg=$((sum / ($i + $j + 1)))\n      if [[ $avg -gt $max ]]; then\n        max=$avg\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -r max_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\n  local -r min_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n 1)\n  local -r max_average=$(echo \"scale=5; $max_cost / $n\" | bc)\n  local -r min_average=$(echo \"scale=5; $min_cost / $n\" | bc)\n  local -r step=$(echo \"scale=5; ($max_average - $min_average) / $n\" | bc)\n  local -r max_average_rounded=$(echo \"scale=5; $max_average + $step\" | bc)\n  local -r min_average_rounded=$(echo \"scale=5; $min_average - $step\" | bc)\n  local -r max_average_rounded_int=$(echo \"$max_average_rounded\" | cut -d '.' -f 1)\n  local -r min_average_rounded_int=$(echo \"$min_average_rounded\" | cut -d '.' -f 1)\n  local -r max_average_rounded_dec=$(echo \"$max_average_rounded\" | cut -d '.' -f 2)\n  local -r min_average_rounded_dec=$(echo \"$min_average_rounded\" | cut -d '.' -f 2)\n  local -r max_average_rounded_dec_len=$(echo \"$max_average_rounded_dec\" | wc -c)\n  local -r min_average_rounded_dec_len=$(echo \"$min_average_rounded_dec\" | wc -c)\n  local -r max_average_rounded_dec_len_diff=$((max_average_rounded_dec_len - min_average_rounded_dec_len))\n  local -r max_average_rounded_dec_len_diff_abs=$((\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp1clqrk3i.sh: line 23: unexpected EOF while looking for matching `)'\\n/tmp/tmp1clqrk3i.sh: line 39: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=$(echo \"$matrix\" | wc -l)\n  local -i m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -i i j\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i count=0\n  local -i max_i_count=0\n  local -i max_j_count=0\n  local -i max_sum_count=0\n  local -i max_count_count=0\n  local -i max_i_count_count=0\n  local -i max_j_count_count=0\n  local -i max_sum_count_count=0\n  local -i max_count_count_count=0\n  local -i max_i_count_count_count=0\n  local -i max_j_count_count_count=0\n  local -i max_sum_count_count_count=0\n  local -i max_count_count_count_count=0\n  local -i max_i_count_count_count_count=0\n  local -i max_j_count_count_count_count=0\n  local -i max_sum_count_count_count_count=0\n  local -i max_count_count_count_count_count=0\n  local -i max_i_count_count_count_count_count=0\n  local -i max_j_count_count_count_count_count=0\n  local -i max_sum_count_count_count_count_count=0\n  local -i max_count_count_count_count_count_count=0\n  local -i max_i_count_count_count_count_count_count=0\n  local -i max_j_count_count_count_count_count_count=0\n  local -i max_sum_count_count_count_count_count_count=0\n  local -\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n arr=$1\n  local -i n=${#arr[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=${arr[i]}\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((j==0)); then\n        dp[j]=$((dp[j]+arr[i*n]))\n      else\n        dp[j]=$((dp[j]+arr[i*n+j]))\n      fi\n      if ((j>0)); then\n        ((dp[j]>dp[j-1])) && dp[j]=$((dp[j-1]+arr[i*n+j]))\n      fi\n    done\n  done\n  echo \"${dp[@]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpqz_f036z.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i i j k l\n  local -i n=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_l=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_sum=0\n  local -i max_max_count=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_l=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_count=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_l=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_count=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -a row\n  local -a col\n  local -a path\n  local -i i\n  local -i j\n  local -i k\n  local -i max\n  local -i max_i\n  local -i max_j\n  local -i max_k\n  local -i max_path\n  local -i max_path_i\n  local -i max_path_j\n  local -i max_path_k\n  local -i max_path_l\n  local -i max_path_m\n  local -i max_path_n\n  local -i max_path_o\n  local -i max_path_p\n  local -i max_path_q\n  local -i max_path_r\n  local -i max_path_s\n  local -i max_path_t\n  local -i max_path_u\n  local -i max_path_v\n  local -i max_path_w\n  local -i max_path_x\n  local -i max_path_y\n  local -i max_path_z\n  local -i max_path_aa\n  local -i max_path_ab\n  local -i max_path_ac\n  local -i max_path_ad\n  local -i max_path_ae\n  local -i max_path_af\n  local -i max_path_ag\n  local -i max_path_ah\n  local -i max_path_ai\n  local -i max_path_aj\n  local -i max_path_ak\n  local -i max_path_al\n  local -i max_path_am\n  local -i max_path_an\n  local -i max_path_ao\n  local -i max_path_ap\n  local -i max_path_aq\n  local -i max_path_ar\n  local -i max_path_as\n  local -i max_path_at\n  local\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i n\n  local -i i j\n  local -i max_average\n  local -i max_i max_j\n  local -i cur_average\n  local -i cur_i cur_j\n  local -i cur_cost\n  local -i cur_count\n  local -i cur_max_cost\n  local -i cur_max_count\n  local -i cur_max_average\n  local -i cur_max_i cur_max_j\n  local -i cur_max_i_tmp cur_max_j_tmp\n  local -i cur_max_cost_tmp\n  local -i cur_max_count_tmp\n  local -i cur_max_average_tmp\n  local -i cur_max_i_tmp2 cur_max_j_tmp2\n  local -i cur_max_cost_tmp2\n  local -i cur_max_count_tmp2\n  local -i cur_max_average_tmp2\n  local -i cur_max_i_tmp3 cur_max_j_tmp3\n  local -i cur_max_cost_tmp3\n  local -i cur_max_count_tmp3\n  local -i cur_max_average_tmp3\n  local -i cur_max_i_tmp4 cur_max_j_tmp4\n  local -i cur_max_cost_tmp4\n  local -i cur_max_count_tmp4\n  local -i cur_max_average_tmp4\n  local -i cur_max_i_tmp5 cur_max_j_tmp5\n  local -i cur_max_cost_tmp5\n  local -i cur_max_count_tmp5\n  local -i cur_max_average_tmp5\n  local -i cur_max_i_tmp6 cur_max_j_tmp6\n  local -i cur_max_cost_tmp6\n  local -i cur_max_count_tmp6\n  local -i cur_max_average_tmp6\n  local -i cur_max_i_tmp7 cur_max_j_tmp7\n  local -i cur_max_cost_tmp7\n  local -i\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_average=0\n  local -a arr\n  local -a max_arr\n  local -a max_arr_i\n  local -a max_arr_j\n  local -a max_arr_k\n  local -a max_arr_l\n  local -a arr_i\n  local -a arr_j\n  local -a arr_k\n  local -a arr_l\n\n  # read the matrix\n  while read -r line; do\n    arr[n++]=\"$line\"\n  done <<< \"$matrix\"\n\n  # get the size of the matrix\n  n=$((n**0.5))\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      for ((k=i; k<n; k++)); do\n        for ((l=j; l<n; l++)); do\n          if ((i==k && j==l)); then\n            sum=${arr[$((i*n+j))]}\n            count=1\n          else\n            sum=$((sum+arr[k*n+l]))\n            count=$((count+1))\n          fi\n          if ((sum*max_count > count*max_sum)); then\n            max_sum=$sum\n            max_count=$count\n            max_i=$i\n            max_j=$j\n            max_k=$k\n            max_l=$l\n          fi\n        done\n      done\n    done\n  done\n\n  max_average=$((max_sum/max_count))\n\n  for ((i=max_i; i\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpjub7m6sj.sh: line 67: unexpected EOF while looking for matching `)'\\n/tmp/tmpjub7m6sj.sh: line 83: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local dp=()\n  local i=0\n  local j=0\n  local sum=0\n  local max=0\n  for i in $(seq 0 $((n-1))); do\n    for j in $(seq 0 $((m-1))); do\n      sum=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk \"{print \\$$((j+1))}\")\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        dp[$i,$j]=$sum\n      elif [[ $i -eq 0 ]]; then\n        dp[$i,$j]=$((sum + dp[$i,$((j-1))]))\n      elif [[ $j -eq 0 ]]; then\n        dp[$i,$j]=$((sum + dp[$((i-1)),$j]))\n      else\n        dp[$i,$j]=$((sum + max(dp[$i,$((j-1))], dp[$((i-1)),$j])))\n      fi\n      if [[ $i -eq $((n-1)) && $j -eq $((m-1)) ]]; then\n        max=$(echo \"${dp[$i,$j]} / $((n+m-1))\" | bc -l)\n      fi\n    done\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpv0ecdnvw.sh: line 20: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$((n * m * 100))\n  local -r max_path_length=$((n + m - 1))\n  local -r max_path_cost=$((max_path_length * max_cost))\n  local -r max_path_average=$((max_path_cost / max_path_length))\n  local -r max_average_path_length=$((max_path_length - 1))\n  local -r max_average_path_cost=$((max_average_path_length * max_cost))\n  local -r max_average_path_average=$((max_average_path_cost / max_average_path_length))\n  local -r max_average_path_average_plus_one=$((max_average_path_average + 1))\n  local -r max_average_path_average_minus_one=$((max_average_path_average - 1))\n  local -r max_average_path_average_plus_two=$((max_average_path_average + 2))\n  local -r max_average_path_average_minus_two=$((max_average_path_average - 2))\n  local -r max_average_path_average_plus_three=$((max_average_path_average + 3))\n  local -r max_average_path_average_minus_three=$((max_average_path_average - 3))\n  local -r max_average_path_average_plus_four=$((max_average_path_average + 4))\n  local -r max_average_path_average_minus_four=$((max_average_path_average - 4))\n  local -r max_average_path_average_plus_five=$((max_average_path_average + 5))\n  local -r max_average_path_average_minus_five=$((max_average_path_average - 5))\n  local -r max_average_path_average_plus_six=$((max_average_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp15q75e8_.sh: line 26: unexpected EOF while looking for matching `)'\\n/tmp/tmp15q75e8_.sh: line 42: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$(awk '{print $1}' <<< \"$matrix\" | sort -nr | head -n 1)\n  local -r min_cost=$(awk '{print $1}' <<< \"$matrix\" | sort -n | head -n 1)\n  local -r max_avg=$(bc -l <<< \"scale=2; $max_cost / $n\")\n  local -r min_avg=$(bc -l <<< \"scale=2; $min_cost / $n\")\n  local -r max_avg_int=$(awk -F. '{print $1}' <<< \"$max_avg\")\n  local -r min_avg_int=$(awk -F. '{print $1}' <<< \"$min_avg\")\n  local -r max_avg_dec=$(awk -F. '{print $2}' <<< \"$max_avg\")\n  local -r min_avg_dec=$(awk -F. '{print $2}' <<< \"$min_avg\")\n  local -r max_avg_dec_len=${#max_avg_dec}\n  local -r min_avg_dec_len=${#min_avg_dec}\n  local -r max_avg_dec_len=$((max_avg_dec_len > min_avg_dec_len ? max_avg_dec_len : min_avg_dec_len))\n  local -r max_avg_dec_len=$((max_avg_dec_len > 0 ? max_avg_dec_len : 1))\n  local -r max_avg_dec_len=$((max_avg_dec_len + 1))\n  local -r max_avg_dec_len_str=$(printf \"%0${max_avg_dec_len}d\" 0)\n  local -r max_avg_dec_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpt6u63ctw.sh: line 11: bc: command not found\\n/tmp/tmpt6u63ctw.sh: line 12: bc: command not found\\n/tmp/tmpt6u63ctw.sh: line 19: local: max_avg_dec_len: readonly variable\\n/tmp/tmpt6u63ctw.sh: line 20: local: max_avg_dec_len: readonly variable\\n/tmp/tmpt6u63ctw.sh: line 21: local: max_avg_dec_len: readonly variable\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i i j n\n  local -i max_avg=0\n  local -i max_avg_i=0\n  local -i max_avg_j=0\n  local -i max_avg_n=0\n  local -i sum=0\n  local -i avg=0\n\n  # read matrix\n  while IFS= read -r line; do\n    matrix+=(\"$line\")\n  done\n\n  # get size of matrix\n  n=${#matrix[@]}\n\n  # iterate over all cells\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      # get sum of all paths from cell (i,j)\n      sum=0\n      for ((k=i; k<n; k++)); do\n        for ((l=j; l<n; l++)); do\n          sum+=${matrix[k]:l:1}\n        done\n      done\n\n      # get average of all paths from cell (i,j)\n      avg=$((sum / ((n - i) * (n - j))))\n\n      # update max average\n      if ((avg > max_avg)); then\n        max_avg=$avg\n        max_avg_i=$i\n        max_avg_j=$j\n        max_avg_n=$n\n      fi\n    done\n  done\n\n  # print max average\n  echo \"$max_avg\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i left=${dp[j]}\n      local -i up=${dp[j+1]}\n      local -i min=$((left<up?left:up))\n      local -i cell=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n$((j+1)) | tail -n1)\n      dp[j]=$((min+cell))\n    done\n  done\n  echo \"${dp[0]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpehs0stn8.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=$1\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a path\n  local -a bestPath\n  local -i maxAverage=0\n  local -i bestAverage=0\n  local -i total=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i=0 j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0 max_j=0\n  local -i sum_i=0 sum_j=0\n  local -i max_sum=0\n  local -i max_sum_i=0 max_sum_j=0\n  local -i max_sum_n=0\n  local -i max_sum_n_i=0 max_sum_n_j=0\n  local -i max_sum_n_i_prev=0 max_sum_n_j_prev=0\n  local -i max_sum_n_i_prev_prev=0 max_sum_n_j_prev_prev=0\n  local -i max_sum_n_i_prev_prev_prev=0 max_sum_n_j_prev_prev_prev=0\n  local -i max_sum_n_i_prev_prev_prev_prev=0 max_sum_n_j_prev_prev_prev_prev=0\n  local -i max_sum_n_i_prev_prev_prev_prev_prev=0 max_sum_n_j_prev_prev_prev_prev_prev=0\n  local -i max_sum_n_i_prev_prev_prev_prev_prev_prev=0 max_sum_n_j_prev_prev_prev_prev_prev_prev=0\n  local -i max_sum_n_i_prev_prev_prev_prev_prev_prev_prev=0 max_sum_n_j_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_sum_n_i_prev_prev_prev_prev_prev_prev_prev_prev=0 max_sum_n_j_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i max_sum_n_i_prev_prev_prev_prev_prev_prev_prev_prev_prev=0 max_sum_n_j_prev\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp261x2uwk.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_sum=0\n  local -i max_max_count=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_count=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_count=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_count=0\n  local -i max_max_max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r dp=\"$(mktemp)\"\n  local -r path=\"$(mktemp)\"\n  local -r cost=\"$(mktemp)\"\n  local -r path_cost=\"$(mktemp)\"\n  local -r path_count=\"$(mktemp)\"\n  local -r path_average=\"$(mktemp)\"\n  local -r path_max_average=\"$(mktemp)\"\n  local -r path_max_average_index=\"$(mktemp)\"\n  local -r path_max_average_path=\"$(mktemp)\"\n  local -r path_max_average_path_cost=\"$(mktemp)\"\n  local -r path_max_average_path_count=\"$(mktemp)\"\n  local -r path_max_average_path_average=\"$(mktemp)\"\n  local -r path_max_average_path_max_average=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_index=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_path=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_path_cost=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_path_count=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_path_average=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_path_max_average=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_path_max_average_index=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_path_max_average_path=\"$(mktemp)\"\n  local -r path_max_average_path_max_average_path_max_average_path_cost=\"$(mk\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp7bx7nv_m.sh: line 30: unexpected EOF while looking for matching `)'\\n/tmp/tmp7bx7nv_m.sh: line 46: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local -a path\n  local -i i j\n  local -i max_i max_j\n  local -i max_avg\n  local -i max_sum\n  local -i sum\n  local -i avg\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      dp[i,j]=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk '{print $'$((j+1))'}')\n      if ((i == 0 && j == 0)); then\n        path[i,j]=\"$i,$j\"\n      elif ((i == 0)); then\n        dp[i,j]=$((dp[i,j-1] + dp[i,j]))\n        path[i,j]=\"${path[i,j-1]},$i,$j\"\n      elif ((j == 0)); then\n        dp[i,j]=$((dp[i-1,j] + dp[i,j]))\n        path[i,j]=\"${path[i-1,j]},$i,$j\"\n      else\n        if ((dp[i-1,j] > dp[i,j-1])); then\n          dp[i,j]=$((dp[i-1,j] + dp[i,j]))\n          path[i,j]=\"${path[i-1,j]},$i,$j\"\n        else\n          dp[i,j]=$((dp[i,j-1] + dp[i,j]))\n          path[i,j]=\"${path[i,j-1]},$i,$j\"\n        fi\n      fi\n    done\n  done\n\n  max_sum=${dp[n-1,m-1]}\n  max_avg\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpioi3ixhn.sh: line 24: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_sum=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_sum=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max_j=0\n  local -i max_max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max_max=0\n  local -i max_max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_sum=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_sum=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max_j=0\n  local -i max_max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max_max=0\n  local -i max_max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local -a path\n  local -a costs\n  local -a max_costs\n  local -a max_path\n  local -a max_cost\n  local -a max_avg\n  local -a avg\n  local -a path_cost\n  local -a path_avg\n  local -a path_costs\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_path\n  local -a path_max_cost\n  local -a path_max_costs\n  local -a path_max_avg\n  local -a path_max_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_n=0\n  local -i max_max_count=0\n  local -i max_max_sum=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_n=0\n  local -i max_max_max_count=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_count=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_count=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=\"$(echo \"$matrix\" | wc -l)\"\n  local m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local dp=()\n  local i j\n  for ((i=0; i<n; i++)); do\n    dp[i]=()\n    for ((j=0; j<m; j++)); do\n      dp[i][j]=0\n    done\n  done\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      local cost=\"$(echo \"$matrix\" | sed -n \"$((i+1))p\" | awk \"{print \\$$((j+1))}\")\"\n      if ((i==0 && j==0)); then\n        dp[i][j]=cost\n      elif ((i==0)); then\n        dp[i][j]=$((dp[i][j-1]+cost))\n      elif ((j==0)); then\n        dp[i][j]=$((dp[i-1][j]+cost))\n      else\n        dp[i][j]=$((dp[i-1][j]+cost))\n        if ((dp[i][j-1] > dp[i][j])); then\n          dp[i][j]=$((dp[i][j-1]+cost))\n        fi\n      fi\n    done\n  done\n  echo \"${dp[n-1][m-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpw60gpc_h.sh: line 12: dp[i]: cannot assign list to array member\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$(awk '{for(i=1;i<=NF;i++)a+=$i}END{print a}' <<< \"$matrix\")\n  local -r max_path_length=$((n + m - 1))\n  local -r max_average=$(bc -l <<< \"scale=3;$max_cost/$max_path_length\")\n  local -r max_average_int=$(awk -v max_average=\"$max_average\" 'BEGIN{print int(max_average)}')\n  local -r max_average_decimal=$(awk -v max_average=\"$max_average\" 'BEGIN{print max_average-int(max_average)}')\n\n  local -r max_average_decimal_int=$(awk -v max_average_decimal=\"$max_average_decimal\" 'BEGIN{print int(max_average_decimal*1000)}')\n  local -r max_average_decimal_int_length=$(awk -v max_average_decimal_int=\"$max_average_decimal_int\" 'BEGIN{print length(max_average_decimal_int)}')\n\n  local -r max_average_decimal_int_length_minus_3=$((max_average_decimal_int_length - 3))\n  local -r max_average_decimal_int_length_minus_3_zeros=$(printf '%0.s0' $(seq 1 $max_average_decimal_int_length_minus_3))\n\n  local -r max_average_decimal_int_length_minus_3_zeros_max_average_decimal_int=$(\n    printf '%s%s' \"$max_average_decimal_int_length_minus_3_zeros\" \"$max_average_decimal_int\"\n  )\n\n  local -r max_average_decimal_int_length_minus_3_zeros_max_average\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpdoq20q4l.sh: line 11: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i rows=0 cols=0\n  local -i i j\n  local -i max_avg=0\n  local -i max_avg_row=0 max_avg_col=0\n  local -i cur_avg=0\n  local -i cur_avg_row=0 cur_avg_col=0\n  local -i cur_cost=0\n  local -i cur_cost_row=0 cur_cost_col=0\n  local -i cur_cost_sum=0\n  local -i cur_cost_count=0\n  local -i cur_cost_avg=0\n  local -i tmp_avg=0\n  local -i tmp_avg_row=0 tmp_avg_col=0\n  local -i tmp_cost=0\n  local -i tmp_cost_row=0 tmp_cost_col=0\n  local -i tmp_cost_sum=0\n  local -i tmp_cost_count=0\n  local -i tmp_cost_avg=0\n  local -i tmp_cost_avg_row=0 tmp_cost_avg_col=0\n  local -i tmp_cost_avg_sum=0\n  local -i tmp_cost_avg_count=0\n  local -i tmp_cost_avg_avg=0\n  local -i tmp_cost_avg_avg_row=0 tmp_cost_avg_avg_col=0\n  local -i tmp_cost_avg_avg_sum=0\n  local -i tmp_cost_avg_avg_count=0\n  local -i tmp_cost_avg_avg_avg=0\n  local -i tmp_cost_avg_avg_avg_row=0 tmp_cost_avg_avg_avg_col=0\n  local -i tmp_cost_avg_avg_avg_sum=0\n  local -i tmp_cost_avg_avg_avg_count=0\n  local -i tmp_cost_avg_avg_avg_avg=0\n\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -a matrix\n  local -i i j k l\n  local -i n=0\n  local -i max_avg=0\n  local -i max_avg_i=0\n  local -i max_avg_j=0\n  local -i max_avg_k=0\n  local -i max_avg_l=0\n  local -i sum=0\n  local -i count=0\n  local -i avg=0\n\n  while read -r line; do\n    matrix[n++]=\"$line\"\n  done <<< \"$1\"\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      for ((k=i; k<n; k++)); do\n        for ((l=j; l<n; l++)); do\n          sum=0\n          count=0\n          for ((m=i; m<=k; m++)); do\n            for ((o=j; o<=l; o++)); do\n              sum+=${matrix[m]:o:1}\n              count+=1\n            done\n          done\n          avg=$((sum/count))\n          if ((avg>max_avg)); then\n            max_avg=$avg\n            max_avg_i=$i\n            max_avg_j=$j\n            max_avg_k=$k\n            max_avg_l=$l\n          fi\n        done\n      done\n    done\n  done\n\n  echo \"$max_avg_i $max_avg_j $max_avg_k $max_avg_l\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i count=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_sum=0\n  local -i max_max_count=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_count=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_count=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_n=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_count=0\n  local -i max_max_max_max_max_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=$1\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_average_path=()\n  local max_average_path_cost=0\n  local max_average_path_cells=0\n  local path=()\n  local path_cost=0\n  local path_cells=0\n  local row=0\n  local col=0\n  local cell=0\n  local cell_cost=0\n  local cell_cost_average=0\n  local cell_cost_average_int=0\n  local cell_cost_average_frac=0\n  local cell_cost_average_frac_len=0\n  local cell_cost_average_frac_len_max=0\n  local cell_cost_average_frac_len_max_path=()\n  local cell_cost_average_frac_len_max_path_cost=0\n  local cell_cost_average_frac_len_max_path_cells=0\n  local cell_cost_average_frac_len_max_path_cell_cost=0\n  local cell_cost_average_frac_len_max_path_cell_cost_average=0\n  local cell_cost_average_frac_len_max_path_cell_cost_average_int=0\n  local cell_cost_average_frac_len_max_path_cell_cost_average_frac=0\n  local cell_cost_average_frac_len_max_path_cell_cost_average_frac_len=0\n  local cell_cost_average_frac_len_max_path_cell_cost_average_frac_len_max=0\n  local cell_cost_average_frac_len_max_path_cell_cost_average_frac_len_max_path=()\n  local cell_cost_average_frac_len_max_path_cell_cost_average_frac_len_max_path_cost=0\n  local cell_cost_average_frac_len_max_path_cell_cost_average_frac_len_max_path_cells\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | awk '{print $1}')\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i left=$((dp[j] + $(echo \"${matrix[i]}\" | awk -v j=$j '{print $j}')))\n      local -i up=$((dp[j-1] + $(echo \"${matrix[i]}\" | awk -v j=$j '{print $j}')))\n      dp[j]=$((left > up ? left : up))\n    done\n  done\n  echo \"${dp[n-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpk5sq5fs1.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpk5sq5fs1.sh: line 20: dp: bad array subscript\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n 1)\"\n  local -r max_path_length=\"$((n + m - 2))\"\n  local -r max_path_cost=\"$((max_path_length * max_cost))\"\n  local -r min_path_cost=\"$((max_path_length * min_cost))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max_path_cost / $max_path_length\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $min_path_cost / $max_path_length\")\"\n  local -r average_range=\"$(bc -l <<< \"scale=2; $max_average - $min_average\")\"\n  local -r epsilon=\"$(bc -l <<< \"scale=2; $average_range / 100\")\"\n  local -r min_average_plus_epsilon=\"$(bc -l <<< \"scale=2; $min_average + $epsilon\")\"\n\n  local -r max_average_path=\"$(\n    echo \"$matrix\" |\n    awk -v min_average_plus_epsilon=\"$min_average_plus_epsilon\" '\n      BEGIN {\n        n = 0;\n        m = 0;\n        max_average_path = \"\";\n        max_average = 0;\n      }\n      {\n        for (i = 1; i <= NF; i++) {\n          if (max_average < $i) {\n            max_average = $i;\n            max_average_path = max_average_path $i \" \";\n          }\n        }\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpf8n3iv3v.sh: line 22: unexpected EOF while looking for matching `''\\n/tmp/tmpf8n3iv3v.sh: line 51: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp=(0)\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i][0]))\n  done\n  for ((j=1;j<n;j++)); do\n    dp[0]=$((dp[0]+matrix[0][j]))\n    for ((i=1;i<n;i++)); do\n      dp[i]=$((dp[i-1]>dp[i]?dp[i-1]:dp[i]))\n      dp[i]=$((dp[i]+matrix[i][j]))\n    done\n  done\n  echo $((dp[n-1]/(n*n)))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpphcgiabi.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpphcgiabi.sh: line 20: dp[n-1]/(n*n): division by 0 (error token is \"(n*n)\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | awk '{for(i=1;i<=NF;i++){sum+=$i;cnt++}}END{print sum/cnt}')\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i cur=$(echo \"${matrix[i]}\" | awk -v j=$j '{print $j}')\n      local -i left=${dp[j]}\n      local -i up=${dp[j+1]}\n      local -i max=$((left>up?left:up))\n      dp[j]=$(echo \"$max $cur\" | awk '{print ($1+$2)/2}')\n    done\n  done\n  echo \"${dp[0]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpbdlqftr9.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a path=()\n  local -a costs=()\n  local -a avg=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0; i<n; i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n')\n  done\n  for ((i=1; i<n; i++)); do\n    for ((j=1; j<n; j++)); do\n      dp[i][j]=$((dp[i-1][j]+dp[i][j]))\n      if ((dp[i][j-1]>dp[i-1][j])); then\n        dp[i][j]=$((dp[i][j-1]+dp[i][j]))\n      fi\n    done\n  done\n  echo \"${dp[n-1][n-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpaeguovwh.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpaeguovwh.sh: line 21: ${dp[n-1][n-1]}: bad substitution\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(wc -l <<< \"$matrix\")\n  local cols=$(wc -w <<< \"$matrix\")\n  local -a dp\n  local -a path\n  local -i r c\n  local -i i j\n  local -i max_sum=0\n  local -i max_path=0\n  local -i max_avg=0\n  local -i sum=0\n  local -i path_len=0\n  local -i avg=0\n  local -i row_sum=0\n  local -i col_sum=0\n  local -i row_path=0\n  local -i col_path=0\n  local -i row_avg=0\n  local -i col_avg=0\n\n  for ((r=0; r<rows; r++)); do\n    for ((c=0; c<cols; c++)); do\n      dp[r,c]=0\n      path[r,c]=0\n    done\n  done\n\n  for ((r=0; r<rows; r++)); do\n    for ((c=0; c<cols; c++)); do\n      if ((r == 0 && c == 0)); then\n        dp[r,c]=$(awk '{print $1}' <<< \"$matrix\")\n        path[r,c]=1\n      elif ((r == 0)); then\n        dp[r,c]=$((dp[r,c-1] + $(awk '{print $'$((c+1))'}' <<< \"$matrix\")))\n        path[r,c]=$((path[r,c-1] + 1))\n      elif ((c == 0)); then\n        dp[r,c]=$((dp[r-1,c] + $(awk '{print $'$((r+1))'}' <<< \"$matrix\")))\n        path[r,c]=$((path[r-1,c] + 1))\n      else\n        row_sum=${dp[r-1,c]}\n        col_sum=${dp[r,c-1]}\n        row_path=\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp6kdrqev2.sh: line 48: syntax error near unexpected token `}'\\n/tmp/tmp6kdrqev2.sh: line 48: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local n=$(wc -l <<< \"$matrix\")\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(awk -v i=$i '{print $i}' <<< \"$matrix\")\n  done\n  for ((i=1;i<n;i++)); do\n    dp[i][0]=$((dp[i-1][0]+dp[i][0]))\n  done\n  for ((i=1;i<n;i++)); do\n    dp[0][i]=$((dp[0][i-1]+dp[0][i]))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<n;j++)); do\n      dp[i][j]=$((dp[i][j]+((dp[i-1][j]>dp[i][j-1])?dp[i-1][j]:dp[i][j-1])))\n    done\n  done\n  echo \"${dp[n-1][n-1]} $((n*n))\" | awk '{printf \"%.2f\\n\", $1/$2}'\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpj3akue1b.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpj3akue1b.sh: line 23: ${dp[n-1][n-1]} $((n*n)): bad substitution\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(echo \"scale=2; $max / 2\" | bc)\"\n  local -r max_average_int=\"$(echo \"$max_average\" | cut -d '.' -f 1)\"\n  local -r max_average_dec=\"$(echo \"$max_average\" | cut -d '.' -f 2)\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_one=\"$((max_average_dec_len + 1))\"\n  local -r max_average_dec_len_plus_one_padded=\"$(printf \"%0${max_average_dec_len_plus_one}d\" 0)\"\n  local -r max_average_dec_padded=\"$max_average_dec$max_average_dec_len_plus_one_padded\"\n  local -r max_average_int_padded=\"$(printf \"%0${max_average_dec_len_plus_one}d\" $max_average_int)\"\n  local -r max_average_padded=\"$max_average_int_padded$max_average_dec_padded\"\n  local -r max_average_padded_len=\"${#max_average_padded}\"\n  local -r max_average_padded_len_plus_one=\"$((max_average_padded_len + 1))\"\n  local -r max_average_padded_len_plus_one_padded=\"$(printf \"%0${max_average_padded_len_plus_one}d\" 0)\"\n  local -r max_average_padded_padded=\"$max_average_padded$max_average_padded_len_plus_one_padded\"\n  local -r max_average_padded_padded_len=\"${#max_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpq9dhzupt.sh: line 35: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmpq9dhzupt.sh: line 39: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local -i i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[$i,$j]=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      if ((i>0)); then\n        dp[$i,$j]=$((dp[$i,$j]+dp[$((i-1)),$j]))\n      fi\n      if ((j>0)); then\n        dp[$i,$j]=$((dp[$i,$j]+dp[$i,$((j-1))]))\n      fi\n      if ((i>0 && j>0)); then\n        dp[$i,$j]=$((dp[$i,$j]-dp[$((i-1)),$((j-1))]))\n      fi\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      for ((k=i;k<n;k++)); do\n        for ((l=j;l<m;l++)); do\n          local -i sum=dp[$k,$l]\n          if ((i>0)); then\n            sum=$((sum-dp[$((i-1)),$l]))\n          fi\n          if ((j>0)); then\n            sum=$((sum-dp[$k,$((j-1))]))\n          fi\n          if ((i>0 && j>0)); then\n            sum=$((sum+dp[$((i-1)),$((j-1))]))\n          fi\n          local -i avg=$((sum/((k-i+1)*(l-j+1))))\n          if ((avg>max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmps_8dzsj_.sh: line 41: unexpected EOF while looking for matching `)'\\n/tmp/tmps_8dzsj_.sh: line 57: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n  local -r max_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n1)\"\n  local -r min_cost=\"$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n1)\"\n  local -r max_path_length=\"$((n + m - 2))\"\n  local -r min_path_length=\"$((n + m - 1))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max_cost / $min_path_length\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $min_cost / $max_path_length\")\"\n  local -r max_average_int=\"$(echo \"$max_average\" | cut -d. -f1)\"\n  local -r min_average_int=\"$(echo \"$min_average\" | cut -d. -f1)\"\n  local -r max_average_dec=\"$(echo \"$max_average\" | cut -d. -f2)\"\n  local -r min_average_dec=\"$(echo \"$min_average\" | cut -d. -f2)\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r min_average_dec_len=\"${#min_average_dec}\"\n  local -r max_average_dec_len=\"${max_average_dec_len:-0}\"\n  local -r min_average_dec_len=\"${min_average_dec_len:-0}\"\n  local -r max_average_dec_len=\"$((max_average_dec_len > min_average_dec_len ? max_average_dec_len : min_average_dec_len))\"\n  local -r max_average_dec_len=\"$((max_average_dec_len > 2 ? max_average_dec_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpx0g10rjz.sh: line 24: unexpected EOF while looking for matching `)'\\n/tmp/tmpx0g10rjz.sh: line 40: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max=0\n\n  local -a path=()\n\n  while [[ $i -lt $n ]]; do\n    while [[ $j -lt $m ]]; do\n      if [[ $i -eq 0 && $j -eq 0 ]]; then\n        sum=0\n      elif [[ $i -eq 0 ]]; then\n        sum=$((sum + path[j-1]))\n      elif [[ $j -eq 0 ]]; then\n        sum=$((sum + path[j+$m]))\n      else\n        sum=$((sum + max(path[j-1], path[j+$m])))\n      fi\n\n      path[j+$m*i]=$((sum + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk -v j=$((j+1)) '{print $j}')))\n\n      if [[ $i -eq $((n-1)) && $j -eq $((m-1)) ]]; then\n        max=$((path[j+$m*i]))\n      fi\n\n      j=$((j+1))\n    done\n    j=0\n    i=$((i+1))\n  done\n\n  echo \"$max\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpsk3_ag2d.sh: line 29: sum + 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n    local matrix=\"$1\"\n    local n=$(wc -l <<< \"$matrix\")\n    local m=$(head -n 1 <<< \"$matrix\" | wc -w)\n    local max=0\n    local max_path=()\n    local max_path_sum=0\n    local max_path_len=0\n    local path=()\n    local path_sum=0\n    local path_len=0\n    local i=0\n    local j=0\n    local cell=0\n    local cell_cost=0\n    local cell_cost_sum=0\n    local cell_cost_len=0\n    local cell_cost_avg=0\n    local cell_cost_max_avg=0\n    local cell_cost_max_avg_path=()\n    local cell_cost_max_avg_path_sum=0\n    local cell_cost_max_avg_path_len=0\n    local cell_cost_max_avg_path_avg=0\n    local cell_cost_max_avg_path_max_avg=0\n    local cell_cost_max_avg_path_max_avg_path=()\n    local cell_cost_max_avg_path_max_avg_path_sum=0\n    local cell_cost_max_avg_path_max_avg_path_len=0\n    local cell_cost_max_avg_path_max_avg_path_avg=0\n    local cell_cost_max_avg_path_max_avg_path_max_avg=0\n    local cell_cost_max_avg_path_max_avg_path_max_avg_path=()\n    local cell_cost_max_avg_path_max_avg_path_max_avg_path_sum=0\n    local cell_cost_max_avg_path_max_avg_path_max_avg_path_len=0\n    local cell_cost_max_avg_path_max_avg_path_max_avg_path_avg=0\n    local cell_cost_max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local m=0\n  local n=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local sum=0\n  local max=0\n  local max_i=0\n  local max_j=0\n  local max_k=0\n  local max_l=0\n  local max_sum=0\n  local max_count=0\n  local count=0\n  local matrix=()\n  local row=()\n  local cell=0\n  local max_cell=0\n  local max_cell_i=0\n  local max_cell_j=0\n  local max_cell_k=0\n  local max_cell_l=0\n  local max_cell_sum=0\n  local max_cell_count=0\n  local cell_sum=0\n  local cell_count=0\n  local cell_i=0\n  local cell_j=0\n  local cell_k=0\n  local cell_l=0\n  local cell_max=0\n  local cell_max_i=0\n  local cell_max_j=0\n  local cell_max_k=0\n  local cell_max_l=0\n  local cell_max_sum=0\n  local cell_max_count=0\n  local cell_max_cell=0\n  local cell_max_cell_i=0\n  local cell_max_cell_j=0\n  local cell_max_cell_k=0\n  local cell_max_cell_l=0\n  local cell_max_cell_sum=0\n  local cell_max_cell_count=0\n  local cell_max_cell_max=0\n  local cell_max_cell_max_i=0\n  local cell_max_cell_max_j=0\n  local cell_max_cell_max_k=0\n  local cell_max_cell_max_l=0\n  local cell_max_cell_max_sum=0\n  local cell_max_cell_max_count=0\n  local cell_max_cell_max_cell=0\n  local cell_max_cell_max_cell_i=0\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_path=()\n  local path=()\n  local path_average=0\n  local path_cost=0\n  local path_length=0\n  local row=0\n  local col=0\n  local cell=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n  local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local bq=0\n  local br=0\n  local bs=0\n  local b\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max_cost=$(awk '{for(i=1;i<=NF;i++)a+=$i}END{print a}' <<< \"$matrix\")\n  local -r max_path_length=$((n+m-1))\n  local -r max_average=$(bc -l <<< \"scale=2; $max_cost/$max_path_length\")\n  echo \"$max_average\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpxifckj2k.sh: line 11: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local rows=${#matrix[@]}\n  local cols=${#matrix[0]}\n  local -a sums=()\n  sums[0]=${matrix[0]}\n  for ((i=1; i<rows; i++)); do\n    sums[i]=$((${sums[i-1]} + ${matrix[i]}))\n  done\n  for ((j=1; j<cols; j++)); do\n    sums[0]=$((${sums[0]} + ${matrix[j*rows]}))\n    for ((i=1; i<rows; i++)); do\n      sums[i]=$((${sums[i]} + ${matrix[j*rows+i]}))\n    done\n  done\n  local max=0\n  for ((i=0; i<rows; i++)); do\n    local avg=$((sums[i] / (i+1)))\n    if ((avg > max)); then\n      max=$avg\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpy4_cf0hq.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -r max=$((n * m))\n  local -r max_average=$(((n + m - 2) / 2))\n  local -r max_average_cost=$(((n + m - 2) * max_average))\n  local -r max_cost=$((max * max_average))\n  local -r max_cost_per_cell=$((max_cost / max_average))\n  local -r max_cost_per_cell_plus_one=$((max_cost_per_cell + 1))\n  local -r max_cost_per_cell_minus_one=$((max_cost_per_cell - 1))\n  local -r max_cost_per_cell_minus_two=$((max_cost_per_cell - 2))\n  local -r max_cost_per_cell_minus_three=$((max_cost_per_cell - 3))\n  local -r max_cost_per_cell_minus_four=$((max_cost_per_cell - 4))\n  local -r max_cost_per_cell_minus_five=$((max_cost_per_cell - 5))\n  local -r max_cost_per_cell_minus_six=$((max_cost_per_cell - 6))\n  local -r max_cost_per_cell_minus_seven=$((max_cost_per_cell - 7))\n  local -r max_cost_per_cell_minus_eight=$((max_cost_per_cell - 8))\n  local -r max_cost_per_cell_minus_nine=$((max_cost_per_cell - 9))\n  local -r max_cost_per_cell_minus_ten=$((max_cost_per_cell - 10))\n  local -r max_cost_per_cell_minus_eleven=$((max_cost_per_cell - 11))\n  local -r max_cost_per_cell_minus_twelve=$((max_cost_per_cell - 12\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpgry2j9rn.sh: line 26: unexpected EOF while looking for matching `)'\\n/tmp/tmpgry2j9rn.sh: line 42: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(wc -l <<< \"$matrix\")\n  local m=$(wc -w <<< \"$(head -n 1 <<< \"$matrix\")\")\n  local -a dp\n  local -a path\n  local i j k\n  local -i max\n  local -i max_i max_j\n  local -i max_k\n  local -i sum\n\n  # Initialize dp and path arrays\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      dp[$i,$j]=0\n      path[$i,$j]=0\n    done\n  done\n\n  # Fill dp and path arrays\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      if ((i == 0 && j == 0)); then\n        dp[$i,$j]=$(cut -d ' ' -f 1 <<< \"$matrix\")\n        path[$i,$j]=1\n      elif ((i == 0)); then\n        dp[$i,$j]=$((dp[$i,$((j-1))] + $(cut -d ' ' -f $((j+1)) <<< \"$matrix\")))\n        path[$i,$j]=$((path[$i,$((j-1))] + 1))\n      elif ((j == 0)); then\n        dp[$i,$j]=$((dp[$((i-1)),$j] + $(cut -d ' ' -f $((i+1)) <<< \"$matrix\")))\n        path[$i,$j]=$((path[$((i-1)),$j] + 1))\n      else\n        dp[$i,$j]=$((dp[$((i-1)),$j] + $(cut -d ' ' -f $((i+1)) <<< \"$matrix\")))\n        path[$i,$j]=$((path[$((i-1)),$j] + 1))\n        if ((dp[$i,\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpbljylcec.sh: line 40: unexpected EOF while looking for matching `)'\\n/tmp/tmpbljylcec.sh: line 56: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i rows=$(wc -l <<< \"$matrix\")\n  local -i cols=$(head -1 <<< \"$matrix\" | wc -w)\n  local -i i=0 j=0\n  local -i max_avg=0\n  local -i sum=0\n  local -i count=0\n  local -i max_count=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_i_count=0\n  local -i max_j_count=0\n  local -i max_i_sum=0\n  local -i max_j_sum=0\n  local -i max_i_avg=0\n  local -i max_j_avg=0\n  local -i max_i_count_avg=0\n  local -i max_j_count_avg=0\n  local -i max_i_sum_avg=0\n  local -i max_j_sum_avg=0\n  local -i max_i_count_sum_avg=0\n  local -i max_j_count_sum_avg=0\n  local -i max_i_sum_count_avg=0\n  local -i max_j_sum_count_avg=0\n  local -i max_i_sum_count_avg_avg=0\n  local -i max_j_sum_count_avg_avg=0\n  local -i max_i_sum_count_avg_avg_avg=0\n  local -i max_j_sum_count_avg_avg_avg=0\n  local -i max_i_sum_count_avg_avg_avg_avg=0\n  local -i max_j_sum_count_avg_avg_avg_avg=0\n  local -i max_i_sum_count_avg_avg_avg_avg_avg=0\n  local -i max_j_sum_count_avg\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp=()\n  local -i i j\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      local -i val=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")\n      local -i up=0\n      local -i left=0\n      if ((i>0)); then\n        up=${dp[$(((i-1)*m+j))]}\n      fi\n      if ((j>0)); then\n        left=${dp[$((i*m+j-1))]}\n      fi\n      local -i max=$((up>left?up:left))\n      dp[$((i*m+j))]=$((max+val))\n    done\n  done\n  local -i sum=${dp[$((n*m-1))]}\n  local -i count=$((n+m-1))\n  echo $((sum/count))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpuf26r_hl.sh: line 13: local: 3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=0\n  local m=0\n  local max=0\n  local max_path=()\n  local max_path_len=0\n  local path=()\n  local path_len=0\n  local sum=0\n  local avg=0\n  local i=0\n  local j=0\n  local k=0\n  local line=()\n  local cell=0\n  local cell_right=0\n  local cell_down=0\n  local cell_right_path=()\n  local cell_down_path=()\n  local cell_right_path_len=0\n  local cell_down_path_len=0\n  local cell_right_sum=0\n  local cell_down_sum=0\n  local cell_right_avg=0\n  local cell_down_avg=0\n  local cell_right_path_str=''\n  local cell_down_path_str=''\n\n  # Get the number of rows and columns\n  n=$(echo \"$matrix\" | wc -l)\n  m=$(echo \"$matrix\" | head -n 1 | wc -w)\n\n  # Initialize the max path\n  max_path=()\n  max_path_len=0\n  max=0\n\n  # Initialize the path\n  path=()\n  path_len=0\n  sum=0\n\n  # Iterate over the matrix\n  for ((i=0; i<n; i++)); do\n    line=($(echo \"$matrix\" | head -n $((i+1)) | tail -n 1))\n    for ((j=0; j<m; j++)); do\n      cell=${line[$j]}\n      path[$path_len]=$cell\n      path_len=$((path_len+1))\n      sum=$((sum+cell))\n\n      # If we are at the bottom right cell, compute the average and compare it to the max\n      if [[ $i -eq $((n-1)) && $j -eq $((m-1)) ]]; then\n        avg=$((sum/path_len))\n        if [[ $avg -gt $max ]]; then\n         \n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp0pemnhx8.sh: line 62: syntax error near unexpected token `}'\\n/tmp/tmp0pemnhx8.sh: line 62: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(awk '{print NF}' <<< \"$matrix\" | sort -nu | head -n1)\"\n  local -r max=\"$((n*m))\"\n  local -r max_path=\"$(seq -s' ' 1 \"$max\")\"\n  local -r max_path_cost=\"$(\n    paste <(echo \"$matrix\") <(echo \"$max_path\") |\n    awk '{print $1*$2}' |\n    paste -sd+ - |\n    bc\n  )\"\n  echo \"scale=2; $max_path_cost/$max\" | bc\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmphisnwiye.sh: line 15: bc: command not found\\n/tmp/tmphisnwiye.sh: line 17: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=\"$(echo \"$matrix\" | wc -l)\"\n  local cols=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -i max_average=0\n  local -i max_sum=0\n  local -i max_count=0\n  local -i sum=0\n  local -i count=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local -i i j\n  local -i max_average=0\n  local -i max_average_i=0\n  local -i max_average_j=0\n  local -i max_average_i_j=0\n  local -i max_average_j_i=0\n  local -i max_average_i_j_i=0\n  local -i max_average_j_i_j=0\n  local -i max_average_i_j_i_j=0\n  local -i max_average_j_i_j_i=0\n  local -i max_average_i_j_i_j_i=0\n  local -i max_average_j_i_j_i_j=0\n  local -i max_average_i_j_i_j_i_j=0\n  local -i max_average_j_i_j_i_j_i=0\n  local -i max_average_i_j_i_j_i_j_i=0\n  local -i max_average_j_i_j_i_j_i_j=0\n  local -i max_average_i_j_i_j_i_j_i_j=0\n  local -i max_average_j_i_j_i_j_i_j_i=0\n  local -i max_average_i_j_i_j_i_j_i_j_i=0\n  local -i max_average_j_i_j_i_j_i_j_i_j=0\n  local -i max_average_i_j_i_j_i_j_i_j_i_j=0\n  local -i max_average_j_i_j_i_j_i_j_i_j_i=0\n  local -i max_average_i_j_i_j_i_j_i_j_i_j_i=0\n  local -i max_average_j_i_j_i_j_i_j_i_j_i_j=0\n  local\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=()\n    for ((j=0;j<n;j++)); do\n      dp[i][j]=0\n    done\n  done\n  dp[0][0]=${matrix[0]}\n  for ((i=1;i<n;i++)); do\n    dp[0][i]=$((dp[0][i-1]+matrix[i]))\n  done\n  for ((i=1;i<n;i++)); do\n    dp[i][0]=$((dp[i-1][0]+matrix[i*n]))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<n;j++)); do\n      dp[i][j]=$((dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1]+matrix[i*n+j]))\n    done\n  done\n  local -i max=0\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      for ((k=i;k<n;k++)); do\n        for ((l=j;l<n;l++)); do\n          local -i sum=dp[k][l]\n          if ((i>0)); then\n            sum=$((sum-dp[i-1][l]))\n          fi\n          if ((j>0)); then\n            sum=$((sum-dp[k][j-1]))\n          fi\n          if ((i>0 && j>0)); then\n            sum=$((sum+dp[i-1][j-1]))\n          fi\n          local -i avg=$((sum/(k-i+1)/(l-j+1)))\n          if ((avg>max)); then\n            max=$avg\n          fi\n        done\n      done\n    done\n  done\n\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp499fnbux.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmp499fnbux.sh: line 16: dp[0][0]=: command not found\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=\"$(wc -l <<< \"$matrix\")\"\n  local -a dp\n  local -a path\n  local -i i j\n  local -i max_avg\n  local -i max_avg_i\n  local -i max_avg_j\n  local -i max_avg_path_len\n  local -i max_avg_path_len_i\n  local -i max_avg_path_len_j\n  local -i max_avg_path_len_cost\n  local -i max_avg_path_len_cost_i\n  local -i max_avg_path_len_cost_j\n  local -i max_avg_path_len_cost_path_len\n  local -i max_avg_path_len_cost_path_len_i\n  local -i max_avg_path_len_cost_path_len_j\n  local -i max_avg_path_len_cost_path_len_cost\n  local -i max_avg_path_len_cost_path_len_cost_i\n  local -i max_avg_path_len_cost_path_len_cost_j\n  local -i max_avg_path_len_cost_path_len_cost_path_len\n  local -i max_avg_path_len_cost_path_len_cost_path_len_i\n  local -i max_avg_path_len_cost_path_len_cost_path_len_j\n  local -i max_avg_path_len_cost_path_len_cost_path_len_cost\n  local -i max_avg_path_len_cost_path_len_cost_path_len_cost_i\n  local -i max_avg_path_len_cost_path_len_cost_path_len_cost_j\n  local -i max_avg_path_len_cost_path_len_cost_path_len_cost_path_len\n  local -i max_avg_path_len_cost_path_len_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local max_average=0\n  local max_path=()\n  local path=()\n  local path_average=0\n  local path_cost=0\n  local path_length=0\n  local i=0\n  local j=0\n  local cell=0\n  local cell_cost=0\n  local cell_cost_average=0\n  local cell_cost_average_max=0\n  local cell_cost_average_max_i=0\n  local cell_cost_average_max_j=0\n  local cell_cost_average_max_path=()\n  local cell_cost_average_max_path_average=0\n  local cell_cost_average_max_path_cost=0\n  local cell_cost_average_max_path_length=0\n  local cell_cost_average_max_path_cost_average=0\n  local cell_cost_average_max_path_cost_average_max=0\n  local cell_cost_average_max_path_cost_average_max_i=0\n  local cell_cost_average_max_path_cost_average_max_j=0\n  local cell_cost_average_max_path_cost_average_max_path=()\n  local cell_cost_average_max_path_cost_average_max_path_average=0\n  local cell_cost_average_max_path_cost_average_max_path_cost=0\n  local cell_cost_average_max_path_cost_average_max_path_length=0\n  local cell_cost_average_max_path_cost_average_max_path_cost_average=0\n  local cell_cost_average_max_path_cost_average_max_path_cost_average_max=0\n  local cell_cost_average_max_path_cost_average_max_path_cost_average_max_i=0\n  local cell_cost_average_max_path_cost_average_max_path\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=$(echo \"$matrix\" | wc -l)\n  local -r m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -r max_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -nr | head -n 1)\n  local -r min_cost=$(echo \"$matrix\" | tr ' ' '\\n' | sort -n | head -n 1)\n  local -r max_average=$(echo \"scale=2; $max_cost / 1\" | bc)\n  local -r min_average=$(echo \"scale=2; $min_cost / $((n * m))\" | bc)\n  local -r step=$(echo \"scale=2; ($max_average - $min_average) / $((n * m))\" | bc)\n  local -r epsilon=0.01\n  local -r max_iterations=$((n * m))\n  local -r max_paths=$((n * m))\n  local -r max_path_length=$((n + m - 1))\n  local -r max_path_cost=$((n * m * max_cost))\n  local -r max_path_average=$(echo \"scale=2; $max_path_cost / $max_path_length\" | bc)\n  local -r min_path_average=$(echo \"scale=2; $min_cost / $max_path_length\" | bc)\n  local -r step_path_average=$(echo \"scale=2; ($max_path_average - $min_path_average) / $max_paths\" | bc)\n  local -r max_path_average_int=$(echo \"$max_path_average\" | cut -d. -f1)\n  local -r min_path_average_int=$(echo \"$min_path_average\" | cut -d. -f1)\n  local -r step_path_average_int=$(echo \"$step_path_average\" | cut -d. -f1)\n  local -r max_path_average_dec=$(echo \"$max_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplzw5nbqn.sh: line 37: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmplzw5nbqn.sh: line 41: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -nr | head -n1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i left=${dp[j]}\n      local -i up=${dp[j+n]}\n      local -i cost=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sed -n \"$((j+1))p\")\n      if ((j==0)); then\n        dp[j+n]=$((up+cost))\n      elif ((j==n-1)); then\n        dp[j+n]=$((left+cost))\n      else\n        dp[j+n]=$((left>up?left:up)+cost)\n      fi\n    done\n  done\n  echo \"${dp[n-1]}\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpqcc2kd7p.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9': invalid variable name for name reference\\n/tmp/tmpqcc2kd7p.sh: line 27: dp: bad array subscript\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=6; $max / 2\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=6; $max / $max\")\"\n  local -r max_average_int=\"${max_average%.*}\"\n  local -r min_average_int=\"${min_average%.*}\"\n  local -r max_average_frac=\"${max_average#*.}\"\n  local -r min_average_frac=\"${min_average#*.}\"\n  local -r max_average_len=\"${#max_average_frac}\"\n  local -r min_average_len=\"${#min_average_frac}\"\n  local -r max_average_len_diff=\"$((max_average_len - min_average_len))\"\n  local -r max_average_len_diff_abs=\"$((max_average_len_diff < 0 ? -max_average_len_diff : max_average_len_diff))\"\n  local -r max_average_len_diff_abs_padded=\"$(printf \"%0${max_average_len_diff_abs}d\" 0)\"\n  local -r max_average_frac_padded=\"$(printf \"%0${max_average_len}d\" \"$max_average_frac\")\"\n  local -r min_average_frac_padded=\"$(printf \"%0${max_average_len}d\" \"$min_average_frac\")\"\n  local -r max_average_padded=\"$max_average_int.$max_average_frac_padded\"\n  local -r min_average_padded=\"$min_average_int.$min_average_frac_padded\"\n  local -r max_average_padded_int=\"${max_average_padded%.*}\"\n  local -r min_average_padded_int=\"${\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191293,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpge52imld.sh: line 38: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmpge52imld.sh: line 42: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=$1\n  local max_average=0\n  local max_average_path=()\n  local path=()\n  local average=0\n  local cost=0\n  local i=0\n  local j=0\n  local n=0\n  local m=0\n  local row=()\n  local rows=()\n  local row_count=0\n  local col_count=0\n  local row_index=0\n  local col_index=0\n  local row_index_next=0\n  local col_index_next=0\n  local row_index_prev=0\n  local col_index_prev=0\n  local path_index=0\n  local path_index_next=0\n  local path_index_prev=0\n  local path_index_prev_prev=0\n  local path_index_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local path_index_prev_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191294,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local -a dp\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      dp[$((i*m+j))]=0\n    done\n  done\n  dp[0]=$(echo \"$matrix\" | head -n 1 | awk '{print $1}')\n  for ((i=1;i<m;i++)); do\n    dp[$i]=$((dp[i-1]+$(echo \"$matrix\" | head -n 1 | awk -v i=$((i+1)) '{print $i}')))\n  done\n  for ((i=1;i<n;i++)); do\n    dp[$((i*m))]=$((dp[(i-1)*m]+$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk '{print $1}')))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<m;j++)); do\n      dp[$((i*m+j))]=$((dp[(i-1)*m+j]>dp[i*m+j-1]?dp[(i-1)*m+j]:dp[i*m+j-1]))\n      dp[$((i*m+j))]=$((dp[i*m+j]+$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk -v j=$((j+1)) '{print $j}')))\n    done\n  done\n  echo \"${dp[@]}\" | tr ' ' '\\n' | sort -nr | head -n 1\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191294,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpafr1beas.sh: line 18: dp[i-1]+3\\\\n6: syntax error: invalid arithmetic operator (error token is \"\\\\n6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(awk '{print NF}' <<< \"$matrix\" | sort -nu | head -n1)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_average_int=\"$(cut -d. -f1 <<< \"$max_average\")\"\n  local -r max_average_dec=\"$(cut -d. -f2 <<< \"$max_average\")\"\n  local -r max_average_dec_len=\"${#max_average_dec}\"\n  local -r max_average_dec_len_plus_one=\"$((max_average_dec_len + 1))\"\n  local -r max_average_int_len=\"${#max_average_int}\"\n  local -r max_average_len=\"$((max_average_int_len + max_average_dec_len_plus_one))\"\n  local -r max_average_len_plus_one=\"$((max_average_len + 1))\"\n  local -r max_average_len_plus_two=\"$((max_average_len_plus_one + 1))\"\n  local -r max_average_len_plus_three=\"$((max_average_len_plus_two + 1))\"\n  local -r max_average_len_plus_four=\"$((max_average_len_plus_three + 1))\"\n  local -r max_average_len_plus_five=\"$((max_average_len_plus_four + 1))\"\n  local -r max_average_len_plus_six=\"$((max_average_len_plus_five + 1))\"\n  local -r max_average_len_plus_seven=\"$((max_average_len_plus_six + 1))\"\n  local -r max_average_len_plus_eight=\"$((max_average_len_plus_seven + 1))\"\n  local -r max_average_len_\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191294,
      "stdout": "b''",
      "stderr": "b'/tmp/tmphh1i_azd.sh: line 10: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(wc -w <<< \"$matrix\")\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $max / $max\")\"\n  local -r min_cost=\"$(bc -l <<< \"scale=2; $max / $max\")\"\n  local -r max_cost=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r min_path_length=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_path_length=\"$(bc -l <<< \"scale=2; $max / 1\")\"\n  local -r min_path_cost=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_path_cost=\"$(bc -l <<< \"scale=2; $max / 1\")\"\n  local -r min_path_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_path_average=\"$(bc -l <<< \"scale=2; $max / 1\")\"\n  local -r min_path_cost_per_length=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_path_cost_per_length=\"$(bc -l <<< \"scale=2; $max / 1\")\"\n  local -r min_path_average_per_length=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r max_path_average_per_length=\"$(bc -l <<< \"scale=2; $max / 1\")\"\n  local -r min_path_cost_per_average=\"$(bc -l <<< \"scale=2; $max / 2\")\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191294,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_c2hbqib.sh: line 36: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmp_c2hbqib.sh: line 40: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(echo \"$matrix\" | awk -v max=\"$max\" '{sum+=$1} END {print sum/max}')\"\n  local -r max_average_rounded=\"$(printf '%.*f\\n' 0 \"$max_average\")\"\n  echo \"$max_average_rounded\"\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191294,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n    local -n matrix=$1\n    local -i n=${#matrix[@]}\n    local -i i j\n    local -a dp\n    for ((i=0;i<n;i++)); do\n        dp[i]=0\n    done\n    for ((i=0;i<n;i++)); do\n        for ((j=0;j<n;j++)); do\n            if ((i==0)); then\n                if ((j==0)); then\n                    dp[j]=${matrix[i]:0:1}\n                else\n                    dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n                fi\n            else\n                if ((j==0)); then\n                    dp[j]=$((dp[j]+${matrix[i]:j:1}))\n                else\n                    dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n                    dp[j]=$((dp[j]+${matrix[i]:j:1}))\n                fi\n            fi\n        done\n    done\n    echo $((dp[n-1]/n))\n}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
      "timestamp": 1667191294,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpnf0cf752.sh: line 6: local: `1 2 3\\\\n6 5 4\\\\n7 3 9\\': invalid variable name for name reference\\n/tmp/tmpnf0cf752.sh: line 31: dp: bad array subscript\\n/tmp/tmpnf0cf752.sh: line 31: dp[n-1]/n: division by 0 (error token is \"n\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}