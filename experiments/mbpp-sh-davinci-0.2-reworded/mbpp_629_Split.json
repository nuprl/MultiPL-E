{
  "name": "mbpp_629_Split",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find even numbers from a list of numbers.\n#\n# $1 is a space-separated list\nSplit() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    Split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"2 4\" ]]\n    [[ $(candidate \"4 5 6 7 8 0 1\") = \"4 6 8 0\" ]]\n    [[ $(candidate \"8 12 15 19\") = \"8 12\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo \"$1\" | tr ' ' '\\n'",
    "    local list=\"$1\"\n    local number\n    for number in $list\n    do\n        if [ $((number%2)) -eq 0 ]\n        then\n            echo $number\n        fi\n    done",
    "  echo $1 | tr ' ' '\\n'",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo \"$1\" | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "\techo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    local -a array=(\"$@\")\n    local i\n    for i in \"${array[@]}\"; do\n        if [[ $i%2 -eq 0 ]]; then\n            echo $i\n        fi\n    done",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr ' ' '\\n'",
    "  echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    local -a array\n    local -i i\n    local -i len\n    local -i num\n    local -i sum\n\n    array=($1)\n    len=${#array[@]}\n    sum=0\n    for ((i=0; i<len; i++)); do\n        num=${array[$i]}\n        if ((num % 2 == 0)); then\n            sum=$((sum + num))\n        fi\n    done\n    echo $sum",
    "    echo $1 | tr \" \" \"\\n\"",
    "  local IFS=' '\n  read -ra ARR <<< \"$1\"\n  echo \"${ARR[@]}\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "\techo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  local -a array\n  IFS=' ' read -r -a array <<< \"$1\"\n  echo \"${array[@]}\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo \"$1\" | tr \" \" \"\\n\"",
    "    echo \"$1\" | tr ' ' '\\n'",
    "    local -a array\n    local i=0\n    for word in $1\n    do\n        array[$i]=$word\n        ((i++))\n    done\n    echo ${array[@]}",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo \"$1\" | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    # Split the input into an array\n    local -a array=($1)\n    # Loop over the array\n    for i in \"${array[@]}\"; do\n        # Check if the number is even\n        if [[ $((i%2)) -eq 0 ]]; then\n            # Print the number\n            echo $i\n        fi\n    done",
    "    echo \"$1\" | tr ' ' '\\n'",
    "    for i in $1; do\n        if [ $((i%2)) -eq 0 ]; then\n            echo $i\n        fi\n    done",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    local -a array=(\"$@\")\n    for i in \"${array[@]}\"; do\n        if [[ $((i % 2)) -eq 0 ]]; then\n            echo $i\n        fi\n    done",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    local -a arr=()\n    for i in $1; do\n        arr+=($i)\n    done\n    echo ${arr[@]}",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr ' ' '\\n'",
    "  echo $1 | tr \" \" \"\\n\"",
    "    local -a array\n    local -i i=0\n    for num in $1; do\n        array[i++]=$num\n    done\n    echo ${array[@]}",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  local -a array\n  IFS=' ' read -r -a array <<< \"$1\"\n  echo \"${array[@]}\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr ' ' '\\n'",
    "  echo $1 | tr \" \" \"\\n\"",
    "  echo \"$1\" | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr ' ' '\\n'",
    "    local -a array=()\n    for i in $1; do\n        array+=(\"$i\")\n    done\n    echo \"${array[@]}\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo \"$1\" | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "\techo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr ' ' '\\n'",
    "    echo $1 | tr \" \" \"\\n\"",
    "  echo $1 | tr \" \" \"\\n\"",
    "    echo $1 | tr \" \" \"\\n\""
  ]
}