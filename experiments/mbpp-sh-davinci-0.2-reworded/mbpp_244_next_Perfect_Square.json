{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find the next perfect square greater than a given number.\n#\n# $1 is an integer\nnext_Perfect_Square() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    next_Perfect_Square \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"35\") = \"36\" ]]\n    [[ $(candidate \"6\") = \"9\" ]]\n    [[ $(candidate \"9\") = \"16\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local number=$1\n    local sqrt=$(echo \"sqrt($number)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    local next_perfect_square=$(echo \"$next_sqrt * $next_sqrt\" | bc)\n    echo $next_perfect_square",
    "    local num=$1\n    local sqrt=$(echo \"sqrt($num)\" | bc)\n    local next=$((sqrt + 1))\n    echo \"$((next * next))\"",
    "    if [ $1 -lt 0 ]; then\n        echo \"Error: Not a positive integer\"\n        return 1\n    fi\n    local sqrt=$(echo \"sqrt($1)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    echo \"$next_sqrt * $next_sqrt\" | bc",
    "    local num=$1\n    local sqrt=$(echo \"sqrt($num)\" | bc)\n    local next=$((sqrt + 1))\n    echo \"$((next * next))\"",
    "  if [ $1 -lt 0 ]; then\n    echo \"Error: input must be a positive integer\"\n    return 1\n  fi\n  # find the next perfect square\n  local next_square=$(( $1 + 1 ))\n  while [ $(( $next_square ** 0.5 )) -ne $(( $next_square ** 0.5 )) ]\n  do\n    next_square=$(( $next_square + 1 ))\n  done\n  echo $next_square",
    "    local num=$1\n    local sqrt_num=$(echo \"sqrt($num)\" | bc)\n    local next_sqrt_num=$(echo \"sqrt($num)+1\" | bc)\n    local next_perfect_square=$(echo \"$next_sqrt_num^2\" | bc)\n    echo $next_perfect_square",
    "    local num=$1\n    local sqrt=$(echo \"sqrt($num)\" | bc)\n    local sqrt_int=$(echo \"$sqrt\" | cut -d'.' -f1)\n    local sqrt_dec=$(echo \"$sqrt\" | cut -d'.' -f2)\n    if [ \"$sqrt_dec\" != \"0\" ]; then\n        sqrt_int=$(($sqrt_int + 1))\n    fi\n    echo \"$(($sqrt_int * $sqrt_int))\"",
    "  local number=$1\n  local sqrt_number=$(echo \"sqrt($number)\" | bc)\n  local next_number=$(echo \"$sqrt_number + 1\" | bc)\n  echo \"$next_number * $next_number\" | bc",
    "    local number=$1\n    local sqrt_number=$(echo \"sqrt($number)\" | bc)\n    local next_sqrt_number=$(echo \"$sqrt_number + 1\" | bc)\n    local next_perfect_square=$(echo \"$next_sqrt_number * $next_sqrt_number\" | bc)\n    echo $next_perfect_square",
    "    local number=$1\n    local sqrt=$(echo \"sqrt($number)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    echo \"$next_sqrt * $next_sqrt\" | bc",
    "    local num=$1\n    local sqrt=$(echo \"sqrt($num)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    local next_perfect_square=$(echo \"$next_sqrt * $next_sqrt\" | bc)\n    echo $next_perfect_square",
    "    local number=$1\n    local sqrt_number=$(bc <<< \"sqrt($number)\")\n    local sqrt_number_int=$(echo $sqrt_number | cut -d '.' -f 1)\n    local next_perfect_square=$((sqrt_number_int + 1))\n    echo $((next_perfect_square * next_perfect_square))",
    "    local num=$1\n    local sqrt=$(echo \"sqrt($num)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    local next_perfect_square=$(echo \"$next_sqrt * $next_sqrt\" | bc)\n    echo $next_perfect_square",
    "    local num=$1\n    local sqrt=$(echo \"sqrt($num)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    local next_square=$(echo \"$next_sqrt * $next_sqrt\" | bc)\n    echo $next_square",
    "    local num=$1\n    local sqrt=$(echo \"sqrt($num)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    echo \"$next_sqrt * $next_sqrt\" | bc",
    "    local number=$1\n    local sqrt_number=$(echo \"sqrt($number)\" | bc)\n    local next_square=$((sqrt_number + 1))\n    echo \"$((next_square * next_square))\"",
    "    if [ $1 -lt 1 ]; then\n        echo \"Error: $1 is not a positive integer.\"\n        return 1\n    fi\n\n    local sqrt_result=$(echo \"sqrt($1)\" | bc)\n    local sqrt_result_int=$(echo \"$sqrt_result\" | cut -d '.' -f 1)\n    local next_perfect_square=$((sqrt_result_int + 1))\n    next_perfect_square=$((next_perfect_square * next_perfect_square))\n    echo $next_perfect_square",
    "    local number=$1\n    local sqrt=$(echo \"sqrt($number)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    local next_perfect_square=$(echo \"$next_sqrt * $next_sqrt\" | bc)\n    echo $next_perfect_square",
    "    local num=$1\n    local sqrt=$(echo \"sqrt($num)\" | bc)\n    local next_sqrt=$(echo \"$sqrt + 1\" | bc)\n    echo \"$next_sqrt * $next_sqrt\" | bc",
    "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        local sqrt=$(echo \"sqrt($1)\" | bc)\n        local sqrt_int=$(echo \"$sqrt\" | cut -d '.' -f 1)\n        local sqrt_dec=$(echo \"$sqrt\" | cut -d '.' -f 2)\n        if [[ $sqrt_dec == 0 ]]; then\n            echo \"$((sqrt_int+1))^2\"\n        else\n            echo \"$((sqrt_int+1))^2\"\n        fi\n    else\n        echo \"Error: $1 is not an integer\"\n    fi"
  ]
}