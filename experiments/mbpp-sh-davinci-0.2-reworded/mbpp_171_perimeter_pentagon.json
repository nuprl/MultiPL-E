{
  "name": "mbpp_171_perimeter_pentagon",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the perimeter of a regular pentagon from the length of its sides.\n#\n# $1 is an integer\nperimeter_pentagon() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    perimeter_pentagon \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"25\" ]]\n    [[ $(candidate \"10\") = \"50\" ]]\n    [[ $(candidate \"15\") = \"75\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "  local side=$1\n  echo $((5 * $side))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=3; $1 * 5\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    local sides=$1\n    echo \"scale=2; 5 * $sides\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  local side=$1\n  echo $((5*$side))",
    "  echo $((5*$1))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo $((5 * $1))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo $((5 * $1))",
    "  if [[ $1 -lt 1 ]]; then\n    echo \"Error: side length must be greater than 0\"\n    return 1\n  fi\n  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=3; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=4; 5 * $1\" | bc",
    "    local side=$1\n    echo \"scale=2; 5 * $side\" | bc",
    "  local sides=$1\n  local perimeter=$(($sides * 5))\n  echo $perimeter",
    "  echo $((5 * $1))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  local side=$1\n  echo \"scale=2; 5*$side\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo $((5 * $1))",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    if [[ $1 -lt 1 ]]; then\n        echo \"Error: side length must be greater than 0\"\n        return 1\n    fi\n    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=3; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo $(($1 * 5))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo $(( $1 * 5 ))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "  echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    echo $((5 * $1))",
    "  echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo $((5 * $1))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    local side=$1\n    echo $((5 * side))",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    local side=$1\n    echo \"scale=2; 5 * $side\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo $((5 * $1))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo $((5 * $1))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    if [ $# -ne 1 ]; then\n        echo \"Usage: perimeter_pentagon <side_length>\"\n        return 1\n    fi\n    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  local side=$1\n  echo $((5 * side))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    if [ $# -ne 1 ]; then\n        echo \"Usage: perimeter_pentagon <integer>\"\n        return 1\n    fi\n    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2;$1*5\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  local side=$1\n  echo $((5 * $side))",
    "\tlocal side=$1\n\tlocal perimeter=$((5 * $side))\n\techo $perimeter",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  if [[ $1 -gt 0 ]]; then\n    echo \"scale=2; 5 * $1\" | bc\n  else\n    echo \"Error: side length must be greater than 0\"\n  fi",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    local side=$1\n    echo $((5*side))",
    "    echo \"scale=2; 5*$1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=4; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    local side=$1\n    echo $((5*side))",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2;$1*5\" | bc",
    "  if [ $# -ne 1 ]; then\n    echo \"Usage: perimeter_pentagon <integer>\"\n    return 1\n  fi\n  if [ $1 -lt 1 ]; then\n    echo \"Error: <integer> must be greater than 0\"\n    return 1\n  fi\n  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    if [[ $1 -gt 0 ]]; then\n        echo \"scale=2; 5 * $1\" | bc\n    else\n        echo \"Invalid input\"\n    fi",
    "  echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo $((5 * $1))",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    if [ $# -ne 1 ]; then\n        echo \"Usage: $0 <integer>\"\n        return 1\n    fi\n\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 2\n    fi\n\n    echo \"The perimeter of a pentagon with side length $1 is $(($1 * 5))\"",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "  echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "    local sides=$1\n    echo \"scale=2; 5*$sides\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; 5 * $1\" | bc",
    "    echo \"scale=2; $1 * 5\" | bc",
    "  echo $((5 * $1))",
    "  echo \"scale=2; 5*$1\" | bc"
  ]
}