{
  "name": "mbpp_463_max_subarray_product",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a arr=(\"$@\")\n  local max_prod=0\n  local prod=1\n  local i=0\n  local j=0\n  local n=${#arr[@]}\n\n  while [ $i -lt $n ]; do\n    prod=1\n    j=$i\n    while [ $j -lt $n ]; do\n      prod=$((prod * arr[j]))\n      if [ $prod -gt $max_prod ]; then\n        max_prod=$prod\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n\n  echo $max_prod",
    "  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n  echo $max_so_far",
    "  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far",
    "    local -a arr=($1)\n    local -i max_product=${arr[0]}\n    local -i min_product=${arr[0]}\n    local -i max_so_far=$max_product\n    local -i i\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local -i curr=${arr[i]}\n        local -i max_product_candidate=$((curr * max_product))\n        local -i min_product_candidate=$((curr * min_product))\n        max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n        max_product=$((max_product > curr ? max_product : curr))\n        min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n        min_product=$((min_product < curr ? min_product : curr))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n    echo $max_so_far",
    "  local -a array=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i prod=0\n  local -i len=0\n  local -i max_len=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_prod=0\n  local -i max_neg_prod=0\n  local -i max_neg_i=0\n  local -i max_neg_j=0\n  local -i max_neg_len=0\n\n  for i in $@; do\n    array+=($i)\n  done\n\n  len=${#array[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i; j<len; j++)); do\n      prod=1\n      for ((k=i; k<=j; k++)); do\n        prod=$((prod * array[k]))\n      done\n      if ((prod > max_prod)); then\n        max_prod=$prod\n        max_i=$i\n        max_j=$j\n        max_len=$((j-i+1))\n      fi\n      if ((prod < 0)); then\n        if ((prod > max_neg_prod)); then\n          max_neg_prod=$prod\n          max_neg_i=$i\n          max_neg_j=$j\n          max_neg_len=$((j-i+1))\n        fi\n      fi\n    done\n  done\n\n  if ((max_neg_len > max_len)); then\n    echo \"max_subarray_product: ${array[@]:max_neg_i:max_neg_len} = $max_neg_prod\"\n  else\n    echo \"max_subarray_product: ${array[@]:max_i:max_len} = $max_prod\"\n  fi",
    "    local -a arr=(\"$@\")\n    local -a max_arr\n    local -a min_arr\n    local max=0\n    local min=0\n    local result=0\n    local i=0\n\n    max_arr[0]=${arr[0]}\n    min_arr[0]=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        max_arr[i]=$(max ${max_arr[i-1]} ${arr[i]} ${arr[i]}*${max_arr[i-1]})\n        min_arr[i]=$(min ${min_arr[i-1]} ${arr[i]} ${arr[i]}*${min_arr[i-1]})\n        result=$(max $result ${max_arr[i]})\n    done\n\n    echo $result",
    "  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=$max_product\n  local i\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local max_product_candidate=$((max_product * curr))\n    local min_product_candidate=$((min_product * curr))\n    max_product=$((max_product_candidate > min_product_candidate ? max_product_candidate : min_product_candidate))\n    max_product=$((max_product > curr ? max_product : curr))\n    min_product=$((max_product_candidate < min_product_candidate ? max_product_candidate : min_product_candidate))\n    min_product=$((min_product < curr ? min_product : curr))\n    max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n  done\n\n  echo $max_so_far",
    "  local -a array=($1)\n  local -a max_product=(${array[0]})\n  local -a min_product=(${array[0]})\n  local -a max_subarray_product=(${array[0]})\n  local -i i=1\n\n  while [ $i -lt ${#array[@]} ]; do\n    local -i a=${array[$i]}\n    local -i max_product_i=$((${max_product[$((i-1))]} * $a))\n    local -i min_product_i=$((${min_product[$((i-1))]} * $a))\n    local -i max_product_i_1=$((${max_product[$((i-1))]} * $a))\n    local -i min_product_i_1=$((${min_product[$((i-1))]} * $a))\n    local -i max_product_i_2=$((${min_product[$((i-1))]} * $a))\n    local -i min_product_i_2=$((${max_product[$((i-1))]} * $a))\n\n    max_product[$i]=$(echo $max_product_i $max_product_i_1 $max_product_i_2 | tr ' ' '\\n' | sort -nr | head -n 1)\n    min_product[$i]=$(echo $min_product_i $min_product_i_1 $min_product_i_2 | tr ' ' '\\n' | sort -nr | tail -n 1)\n    max_subarray_product[$i]=$(echo ${max_subarray_product[$((i-1))]} ${max_product[$i]} ${min_product[$i]} | tr ' ' '\\n' | sort -nr | head -n 1)\n\n    i=$((i+1))\n  done\n\n  echo ${max_subarray_product[@]} | tr ' ' '\\n' | sort -nr | head -n 1",
    "    local -a arr=($1)\n    local max=${arr[0]}\n    local min=${arr[0]}\n    local max_so_far=$max\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local curr=${arr[$i]}\n        local temp=$max\n        max=$(max $max $(max $(($curr * $max)) $(($curr * $min))))\n        min=$(min $min $(min $(($curr * $temp)) $(($curr * $min))))\n        max_so_far=$(max $max_so_far $max)\n    done\n    echo $max_so_far",
    "  local -a arr=($1)\n  local max=${arr[0]}\n  local min=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local tmp_max=$max\n    local tmp_min=$min\n    max=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min}\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    min=$(echo -e \"${arr[$i]} ${tmp_max} ${tmp_min}\" | tr ' ' '\\n' | sort -n | head -n 1)\n    result=$(echo -e \"$result $max\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  done\n  echo $result",
    "  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local max_so_far=${arr[0]}\n  local i\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local curr=${arr[i]}\n    local temp_max_product=$max_product\n    max_product=$(max $curr $((curr * max_product)) $((curr * min_product)))\n    min_product=$(min $curr $((curr * temp_max_product)) $((curr * min_product)))\n    max_so_far=$(max $max_so_far $max_product)\n  done\n  echo $max_so_far",
    "  local -a arr=(\"$@\")\n  local max_product=0\n  local max_product_ending_here=1\n  local min_product_ending_here=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( arr[i] > 0 )); then\n      max_product_ending_here=$(( max_product_ending_here * arr[i] ))\n      min_product_ending_here=$(( min_product_ending_here * arr[i] ))\n    elif (( arr[i] == 0 )); then\n      max_product_ending_here=1\n      min_product_ending_here=1\n    else\n      local temp=$max_product_ending_here\n      max_product_ending_here=$(( min_product_ending_here * arr[i] ))\n      min_product_ending_here=$(( temp * arr[i] ))\n    fi\n    if (( max_product_ending_here > max_product )); then\n      max_product=$max_product_ending_here\n    fi\n  done\n  echo $max_product",
    "    local -a arr=($1)\n    local max_ending_here=1\n    local min_ending_here=1\n    local max_so_far=1\n\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt 0 ]]; then\n            max_ending_here=$((max_ending_here * i))\n            min_ending_here=$((min(min_ending_here * i, 1)))\n        elif [[ $i -eq 0 ]]; then\n            max_ending_here=1\n            min_ending_here=1\n        else\n            local temp=$max_ending_here\n            max_ending_here=$((max(min_ending_here * i, 1)))\n            min_ending_here=$((temp * i))\n        fi\n\n        if [[ $max_so_far -lt $max_ending_here ]]; then\n            max_so_far=$max_ending_here\n        fi\n    done\n\n    echo $max_so_far",
    "    local -a arr=(\"$@\")\n    local max_product=0\n    local curr_product=0\n    local i=0\n    local j=0\n    local k=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        curr_product=${arr[$i]}\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            curr_product=$((curr_product * arr[j]))\n            if [[ $curr_product -gt $max_product ]]; then\n                max_product=$curr_product\n            fi\n        done\n    done\n\n    echo $max_product",
    "  local -a arr=($1)\n  local max_product=${arr[0]}\n  local min_product=${arr[0]}\n  local result=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local max_product_copy=$max_product\n    max_product=$(max $max_product $min_product ${arr[i]})\n    min_product=$(min $max_product_copy $min_product ${arr[i]})\n    result=$(max $result $max_product)\n  done\n  echo $result",
    "    local -a array=($1)\n    local max_product=${array[0]}\n    local min_product=${array[0]}\n    local max_so_far=$max_product\n    local i\n    for ((i=1; i<${#array[@]}; i++)); do\n        local product_with_max=${array[i]}*$max_product\n        local product_with_min=${array[i]}*$min_product\n        max_product=$(max $product_with_max $product_with_min ${array[i]})\n        min_product=$(min $product_with_max $product_with_min ${array[i]})\n        max_so_far=$(max $max_so_far $max_product)\n    done\n    echo $max_so_far",
    "    local -a arr\n    local max_product=0\n    local product=1\n    local i\n    local j\n    local k\n\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++)); do\n        product=1\n        for ((j=i; j<${#arr[@]}; j++)); do\n            product=$((product * arr[j]))\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n\n    echo $max_product",
    "  local -a arr=()\n  local -i i=0\n  local -i max=0\n  local -i min=0\n  local -i max_so_far=0\n  local -i min_so_far=0\n  local -i prod=0\n  local -i prod_so_far=0\n  local -i n=0\n  local -i num=0\n  local -i temp=0\n\n  for num in $1; do\n    arr[i++]=$num\n  done\n\n  n=${#arr[@]}\n  max=${arr[0]}\n  min=${arr[0]}\n  max_so_far=${arr[0]}\n  min_so_far=${arr[0]}\n  prod_so_far=${arr[0]}\n\n  for (( i=1; i<n; i++ )); do\n    prod=${arr[i]}\n    max=${arr[i]}\n    min=${arr[i]}\n    if (( prod > max_so_far )); then\n      max_so_far=$prod\n    fi\n    if (( prod < min_so_far )); then\n      min_so_far=$prod\n    fi\n    if (( prod > max )); then\n      max=$prod\n    fi\n    if (( prod < min )); then\n      min=$prod\n    fi\n    if (( prod > 0 )); then\n      if (( max_so_far > 0 )); then\n        max_so_far=$(( max_so_far * prod ))\n      fi\n      if (( min_so_far < 0 )); then\n        min_so_far=$(( min_so_far * prod ))\n      fi\n    elif (( prod < 0 )); then\n      temp=$max_so_far\n      if (( min_so_far < 0 )); then\n        max_so_far=$(( min_so_far * prod ))\n      fi\n      if (( temp > 0 )); then\n        min_so_far=$(( temp * prod ))\n      fi\n    fi\n    if (( max_so_far > max )); then\n      max=$max_so_far\n    fi\n    if (( min_so_far < min )); then",
    "    local -a arr=($1)\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_so_far=$max_product\n    local i\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        local num=${arr[$i]}\n        local max_product_tmp=$max_product\n        local min_product_tmp=$min_product\n        max_product=$((num > 0 ? max_product_tmp * num : min_product_tmp * num))\n        min_product=$((num > 0 ? min_product_tmp * num : max_product_tmp * num))\n        max_product=$((max_product > num ? max_product : num))\n        min_product=$((min_product < num ? min_product : num))\n        max_so_far=$((max_so_far > max_product ? max_so_far : max_product))\n    done\n\n    echo $max_so_far",
    "    local -a array=($1)\n    local max_product=0\n    local product=0\n    local i=0\n    local j=0\n    local k=0\n    local n=${#array[@]}\n\n    for ((i=0; i<n; i++)); do\n        product=1\n        for ((j=i; j<n; j++)); do\n            product=$((product * array[j]))\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n\n    echo $max_product"
  ]
}