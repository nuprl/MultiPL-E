{
  "name": "mbpp_83_get_Char",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n#\n# $1 is a string\nget_Char() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    get_Char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"f\" ]]\n    [[ $(candidate \"gfg\") = \"t\" ]]\n    [[ $(candidate \"ab\") = \"c\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local sum=0\n    for ((i=0; i<${#1}; i++)); do\n        sum=$((sum + ${1:i:1}))\n    done\n    echo $((sum % 26))",
    "    local str=$1\n    local sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n        local ascii=$(printf \"%d\" \"'$char\")\n        sum=$((sum+ascii))\n    done\n    local mod=$((sum%26))\n    printf \"%c\" \"$(printf '%d' \"'$mod\")\"",
    "    local str=\"$1\"\n    local sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$(( sum + ${str:$i:1} ))\n    done\n    echo $(( sum % 26 ))",
    "    local sum=0\n    for (( i=0; i<${#1}; i++ )); do\n        sum=$((sum+${1:$i:1}))\n    done\n    echo $((sum%26+97))",
    "    local str=$1\n    local sum=0\n    for ((i=0; i<${#str}; i++)); do\n        sum=$((sum+${str:$i:1}))\n    done\n    echo $((sum%26))",
    "    local sum=0\n    for ((i=0; i<${#1}; i++)); do\n        sum=$((sum + ${1:i:1}))\n    done\n    echo $((sum % 26))",
    "    # Write your code here\n    local str=$1\n    local sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$((sum + ${str:$i:1}))\n    done\n    echo $((sum % 26))",
    "    local str=$1\n    local sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$(( sum + ${str:i:1} ))\n    done\n    echo $(( sum % 26 ))",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    str=$1\n    sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$(( sum + ${str:$i:1} ))\n    done\n    echo $(( sum % 26 ))",
    "    local str=$1\n    local sum=0\n    for ((i=0; i<${#str}; i++)); do\n        sum=$((sum + ${str:$i:1}))\n    done\n    echo $((sum % 26 + 97))",
    "  echo \"$1\" | fold -w1 | awk '{sum+=$1} END {print sum%26}'",
    "    local str=$1\n    local sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$(( sum + ${str:$i:1} ))\n    done\n    echo $(( sum % 26 ))",
    "    local str=$1\n    local sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$((sum + ${str:$i:1}))\n    done\n    echo $((sum % 26 + 97))",
    "    local str=$1\n    local sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$(( sum + ${str:$i:1} ))\n    done\n    echo $(( sum % 26 ))",
    "    local str=$1\n    local sum=0\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$(( sum + ${str:$i:1} ))\n    done\n    echo $(( sum % 26 ))",
    "    local sum=0\n    for (( i=0; i<${#1}; i++ )); do\n        sum=$(( sum + ${1:$i:1} ))\n    done\n    echo $(( sum % 26 ))",
    "    local sum=0\n    local str=$1\n    for (( i=0; i<${#str}; i++ )); do\n        sum=$(( sum + ${str:$i:1} ))\n    done\n    echo $(( sum % 26 ))",
    "  local str=$1\n  local sum=0\n  for (( i=0; i<${#str}; i++ )); do\n    (( sum+=${str:$i:1} ))\n  done\n  echo $(( sum%26 ))",
    "  local str=\"$1\"\n  local sum=0\n  local i=0\n  local len=${#str}\n  while [ $i -lt $len ]\n  do\n    sum=$((sum + $(printf \"%d\" \"'${str:$i:1}\")))\n    i=$((i+1))\n  done\n  printf \"%c\" $((sum % 26 + 97))",
    "  # Write your code here\n  # Use echo to print to stdout\n  # Use $1 to get the first argument to the function\n  # Use $# to get the number of arguments to the function\n  # Use $@ to get all the arguments to the function\n  # Use $? to get the exit status of the function\n  # Use $0 to get the name of the function\n  # Use $* to get all the arguments to the function\n  # Use $$ to get the process ID of the function\n  # Use $! to get the process ID of the last background process\n  # Use $- to get the current shell options\n  # Use $_ to get the last argument of the previous command\n  # Use $LINENO to get the current line number in the shell script\n  # Use $SECONDS to get the number of seconds since the shell was started\n  # Use $RANDOM to get a random number\n  # Use $UID to get the user ID of the user running the script\n  # Use $EUID to get the effective user ID of the user running the script\n  # Use $PPID to get the process ID of the parent of the current shell\n  # Use $BASH_VERSION to get the version of the current instance of Bash\n  # Use $BASH_VERSINFO to get the version of the current instance of Bash\n  # Use $BASH_SOURCE to get the name of the file that is currently executing\n  # Use $BASH_SUBSHELL to get the subshell level of the current shell\n  # Use $BASH_LINENO to get the current line number in the current script\n  # Use $BASH_EXECUTION_STRING to get the command argument to the -c option\n  # Use $BASH_REMATCH to get the portion of the string matched by the last match\n  # Use $BASH_SUBSHELL to get the subshell level of the current shell\n  # Use $BASH_LINENO to get the current line number in the current script\n  # Use $BASH_EXECUTION_STRING to get the command argument to the -c option\n  # Use $BASH_REMATCH to get the portion of the string matched by the last match\n  # Use $BASH_SOURCE to get the name"
  ]
}