{
  "name": "mbpp_597_find_kth",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find kth element from the given two sorted arrays.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nfind_kth() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    find_kth \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 6 7 9\" \"1 4 8 10\" \"5\") = \"6\" ]]\n    [[ $(candidate \"100 112 256 349 770\" \"72 86 113 119 265 445 892\" \"7\") = \"256\" ]]\n    [[ $(candidate \"3 4 7 8 10\" \"2 5 9 11\" \"6\") = \"8\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while [ $c -lt $k ]; do\n        if [ $i -lt ${#a[@]} -a $j -lt ${#b[@]} ]; then\n            if [ ${a[$i]} -lt ${b[$j]} ]; then\n                i=$((i+1))\n            else\n                j=$((j+1))\n            fi\n        elif [ $i -lt ${#a[@]} ]; then\n            i=$((i+1))\n        else\n            j=$((j+1))\n        fi\n        c=$((c+1))\n    done\n    if [ $i -lt ${#a[@]} -a $j -lt ${#b[@]} ]; then\n        if [ ${a[$i]} -lt ${b[$j]} ]; then\n            echo ${a[$i]}\n        else\n            echo ${b[$j]}\n        fi\n    elif [ $i -lt ${#a[@]} ]; then\n        echo ${a[$i]}\n    else\n        echo ${b[$j]}\n    fi",
    "    local a=($1)\n    local b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=()\n    while ((i < ${#a[@]} && j < ${#b[@]})); do\n        if ((a[i] < b[j])); then\n            c+=(${a[i]})\n            ((i++))\n        else\n            c+=(${b[j]})\n            ((j++))\n        fi\n    done\n    if ((i < ${#a[@]})); then\n        c+=(${a[@]:i})\n    else\n        c+=(${b[@]:j})\n    fi\n    echo ${c[k-1]}",
    "    local a=($1)\n    local b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=()\n    local len_a=${#a[@]}\n    local len_b=${#b[@]}\n    while [ $i -lt $len_a -a $j -lt $len_b ]; do\n        if [ ${a[$i]} -lt ${b[$j]} ]; then\n            c[${#c[@]}]=${a[$i]}\n            i=$((i+1))\n        else\n            c[${#c[@]}]=${b[$j]}\n            j=$((j+1))\n        fi\n    done\n    while [ $i -lt $len_a ]; do\n        c[${#c[@]}]=${a[$i]}\n        i=$((i+1))\n    done\n    while [ $j -lt $len_b ]; do\n        c[${#c[@]}]=${b[$j]}\n        j=$((j+1))\n    done\n    echo ${c[$((k-1))]}",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while [ $c -lt $k ]; do\n        if [ $i -eq ${#a[@]} ]; then\n            echo ${b[$j]}\n            return\n        elif [ $j -eq ${#b[@]} ]; then\n            echo ${a[$i]}\n            return\n        fi\n        if [ ${a[$i]} -lt ${b[$j]} ]; then\n            i=$((i+1))\n        else\n            j=$((j+1))\n        fi\n        c=$((c+1))\n    done\n    if [ $i -eq ${#a[@]} ]; then\n        echo ${b[$j]}\n    elif [ $j -eq ${#b[@]} ]; then\n        echo ${a[$i]}\n    else\n        echo ${a[$i]}\n    fi",
    "  local a=($1)\n  local b=($2)\n  local k=$3\n  local i=0\n  local j=0\n  local c=()\n  while [ $i -lt ${#a[@]} ] && [ $j -lt ${#b[@]} ]; do\n    if [ ${a[$i]} -lt ${b[$j]} ]; then\n      c+=(${a[$i]})\n      i=$((i + 1))\n    else\n      c+=(${b[$j]})\n      j=$((j + 1))\n    fi\n  done\n  if [ $i -lt ${#a[@]} ]; then\n    c+=(${a[@]:$i})\n  else\n    c+=(${b[@]:$j})\n  fi\n  echo ${c[$((k - 1))]}",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while [ $c -lt $k ]; do\n        if [ $i -lt ${#a[@]} -a $j -lt ${#b[@]} ]; then\n            if [ ${a[$i]} -lt ${b[$j]} ]; then\n                ((i++))\n            else\n                ((j++))\n            fi\n        elif [ $i -lt ${#a[@]} ]; then\n            ((i++))\n        else\n            ((j++))\n        fi\n        ((c++))\n    done\n    if [ $i -lt ${#a[@]} -a $j -lt ${#b[@]} ]; then\n        if [ ${a[$i]} -lt ${b[$j]} ]; then\n            echo ${a[$i]}\n        else\n            echo ${b[$j]}\n        fi\n    elif [ $i -lt ${#a[@]} ]; then\n        echo ${a[$i]}\n    else\n        echo ${b[$j]}\n    fi",
    "  local a=($1)\n  local b=($2)\n  local k=$3\n  local i=0\n  local j=0\n  local c=()\n  while [ $i -lt ${#a[@]} ] && [ $j -lt ${#b[@]} ]; do\n    if [ ${a[$i]} -lt ${b[$j]} ]; then\n      c+=(${a[$i]})\n      i=$((i+1))\n    else\n      c+=(${b[$j]})\n      j=$((j+1))\n    fi\n  done\n  while [ $i -lt ${#a[@]} ]; do\n    c+=(${a[$i]})\n    i=$((i+1))\n  done\n  while [ $j -lt ${#b[@]} ]; do\n    c+=(${b[$j]})\n    j=$((j+1))\n  done\n  echo ${c[$((k-1))]}",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while [ $c -lt $k ]; do\n        if [ $i -eq ${#a[@]} ]; then\n            echo ${b[$j]}\n            return\n        elif [ $j -eq ${#b[@]} ]; then\n            echo ${a[$i]}\n            return\n        elif [ ${a[$i]} -lt ${b[$j]} ]; then\n            ((i++))\n        else\n            ((j++))\n        fi\n        ((c++))\n    done\n    echo ${a[$i]}",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i=0 j=0\n  while [ $k -gt 0 ]; do\n    if [ ${a[$i]} -lt ${b[$j]} ]; then\n      i=$((i+1))\n    else\n      j=$((j+1))\n    fi\n    k=$((k-1))\n  done\n  if [ ${a[$i]} -lt ${b[$j]} ]; then\n    echo ${a[$i]}\n  else\n    echo ${b[$j]}\n  fi",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while (( c < k )) && (( i < ${#a[@]} )) && (( j < ${#b[@]} )); do\n        if (( a[i] < b[j] )); then\n            (( i++ ))\n        else\n            (( j++ ))\n        fi\n        (( c++ ))\n    done\n    if (( i < ${#a[@]} )); then\n        (( i += k - c ))\n    else\n        (( j += k - c ))\n    fi\n    if (( i < ${#a[@]} )); then\n        echo ${a[i]}\n    else\n        echo ${b[j]}\n    fi",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while [ $c -lt $k ]; do\n        if [ ${a[$i]} -lt ${b[$j]} ]; then\n            i=$((i+1))\n        else\n            j=$((j+1))\n        fi\n        c=$((c+1))\n    done\n    if [ ${a[$i]} -lt ${b[$j]} ]; then\n        echo ${a[$i]}\n    else\n        echo ${b[$j]}\n    fi",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while [ $c -lt $k ]; do\n        if [ $i -eq ${#a[@]} ]; then\n            echo ${b[$j]}\n            return\n        elif [ $j -eq ${#b[@]} ]; then\n            echo ${a[$i]}\n            return\n        elif [ ${a[$i]} -lt ${b[$j]} ]; then\n            echo ${a[$i]}\n            i=$((i+1))\n        else\n            echo ${b[$j]}\n            j=$((j+1))\n        fi\n        c=$((c+1))\n    done",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local n=${#a[@]}\n    local m=${#b[@]}\n    local c=0\n    while ((c < k)) && ((i < n)) && ((j < m)); do\n        if ((a[i] < b[j])); then\n            ((i++))\n        else\n            ((j++))\n        fi\n        ((c++))\n    done\n    if ((i == n)); then\n        echo ${b[j]}\n    elif ((j == m)); then\n        echo ${a[i]}\n    else\n        echo ${a[i]}\n    fi",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i=0\n  local j=0\n  local c=0\n  while [ $c -lt $k ]; do\n    if [ $i -eq ${#a[@]} ]; then\n      ((j++))\n    elif [ $j -eq ${#b[@]} ]; then\n      ((i++))\n    elif [ ${a[$i]} -lt ${b[$j]} ]; then\n      ((i++))\n    else\n      ((j++))\n    fi\n    ((c++))\n  done\n  if [ $i -eq ${#a[@]} ]; then\n    echo ${b[$j]}\n  elif [ $j -eq ${#b[@]} ]; then\n    echo ${a[$i]}\n  elif [ ${a[$i]} -lt ${b[$j]} ]; then\n    echo ${a[$i]}\n  else\n    echo ${b[$j]}\n  fi",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while [ $c -lt $k ]; do\n        if [ $i -ge ${#a[@]} ]; then\n            echo ${b[$j]}\n            return\n        elif [ $j -ge ${#b[@]} ]; then\n            echo ${a[$i]}\n            return\n        elif [ ${a[$i]} -lt ${b[$j]} ]; then\n            echo ${a[$i]}\n            i=$((i+1))\n        else\n            echo ${b[$j]}\n            j=$((j+1))\n        fi\n        c=$((c+1))\n    done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i=0\n  local j=0\n  local c=0\n  while [ $c -lt $k ]; do\n    if [ $i -eq ${#a[@]} ]; then\n      echo ${b[$j]}\n      return\n    elif [ $j -eq ${#b[@]} ]; then\n      echo ${a[$i]}\n      return\n    elif [ ${a[$i]} -lt ${b[$j]} ]; then\n      ((i++))\n    else\n      ((j++))\n    fi\n    ((c++))\n  done\n  if [ $i -eq ${#a[@]} ]; then\n    echo ${b[$j]}\n  elif [ $j -eq ${#b[@]} ]; then\n    echo ${a[$i]}\n  elif [ ${a[$i]} -lt ${b[$j]} ]; then\n    echo ${a[$i]}\n  else\n    echo ${b[$j]}\n  fi",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local i=0\n    local j=0\n    local c=0\n    while [ $c -lt $k ]; do\n        if [ $i -ge ${#a[@]} ]; then\n            echo ${b[$j]}\n            return\n        elif [ $j -ge ${#b[@]} ]; then\n            echo ${a[$i]}\n            return\n        elif [ ${a[$i]} -lt ${b[$j]} ]; then\n            echo ${a[$i]}\n            i=$((i+1))\n        else\n            echo ${b[$j]}\n            j=$((j+1))\n        fi\n        c=$((c+1))\n    done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local i=0\n  local j=0\n  local c=0\n  while [ $c -lt $k ]; do\n    if [ $i -eq ${#a[@]} ]; then\n      ((j++))\n    elif [ $j -eq ${#b[@]} ]; then\n      ((i++))\n    elif [ ${a[$i]} -lt ${b[$j]} ]; then\n      ((i++))\n    else\n      ((j++))\n    fi\n    ((c++))\n  done\n  if [ $i -eq ${#a[@]} ]; then\n    echo ${b[$j]}\n  elif [ $j -eq ${#b[@]} ]; then\n    echo ${a[$i]}\n  elif [ ${a[$i]} -lt ${b[$j]} ]; then\n    echo ${a[$i]}\n  else\n    echo ${b[$j]}\n  fi",
    "  local -a arr1=($1)\n  local -a arr2=($2)\n  local k=$3\n  local i=0\n  local j=0\n  local count=0\n  while [ $count -lt $k ]; do\n    if [ ${arr1[$i]} -lt ${arr2[$j]} ]; then\n      ((i++))\n    else\n      ((j++))\n    fi\n    ((count++))\n  done\n  if [ ${arr1[$i]} -lt ${arr2[$j]} ]; then\n    echo ${arr1[$i]}\n  else\n    echo ${arr2[$j]}\n  fi",
    "  local -a array1=($1)\n  local -a array2=($2)\n  local k=$3\n  local i=0\n  local j=0\n  local kth=0\n  while [ $i -lt ${#array1[@]} ] && [ $j -lt ${#array2[@]} ]; do\n    if [ ${array1[$i]} -lt ${array2[$j]} ]; then\n      kth=${array1[$i]}\n      ((i++))\n    else\n      kth=${array2[$j]}\n      ((j++))\n    fi\n    ((k--))\n    if [ $k -eq 0 ]; then\n      break\n    fi\n  done\n  if [ $k -gt 0 ]; then\n    if [ $i -lt ${#array1[@]} ]; then\n      while [ $k -gt 0 ]; do\n        kth=${array1[$i]}\n        ((i++))\n        ((k--))\n      done\n    else\n      while [ $k -gt 0 ]; do\n        kth=${array2[$j]}\n        ((j++))\n        ((k--))\n      done\n    fi\n  fi\n  echo $kth"
  ]
}