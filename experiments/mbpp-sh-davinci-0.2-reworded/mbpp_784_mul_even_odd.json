{
  "name": "mbpp_784_mul_even_odd",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the product of first even and odd number of a given list.\n#\n# $1 is a space-separated list\nmul_even_odd() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    mul_even_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 4 1 6 8\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"1 5 7 9 10\") = \"10\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local list=\"$1\"\n  local even=$(echo \"$list\" | awk '{print $2}')\n  local odd=$(echo \"$list\" | awk '{print $1}')\n  echo \"$((even * odd))\"",
    "  local list=$1\n  local even_num=$(echo $list | awk '{print $2}')\n  local odd_num=$(echo $list | awk '{print $3}')\n  echo $((even_num * odd_num))",
    "  local list=\"$1\"\n  local even_num=$(echo \"$list\" | awk '{print $1}')\n  local odd_num=$(echo \"$list\" | awk '{print $2}')\n  local result=$((even_num * odd_num))\n  echo \"$result\"",
    "  local even=0\n  local odd=0\n  local i=0\n  local num\n  for num in $1; do\n    if [ $((i % 2)) -eq 0 ]; then\n      even=$((even + num))\n    else\n      odd=$((odd + num))\n    fi\n    i=$((i + 1))\n  done\n  echo $((even * odd))",
    "    local -i even=0 odd=0\n    for i in $1; do\n        if [ $((i % 2)) -eq 0 ]; then\n            even=$i\n            break\n        fi\n    done\n    for i in $1; do\n        if [ $((i % 2)) -ne 0 ]; then\n            odd=$i\n            break\n        fi\n    done\n    echo $((even * odd))",
    "    local list=$1\n    local even=0\n    local odd=0\n    local i=0\n    for n in $list; do\n        if [ $((i % 2)) -eq 0 ]; then\n            even=$((even + n))\n        else\n            odd=$((odd + n))\n        fi\n        i=$((i + 1))\n    done\n    echo $((even * odd))",
    "    local list=$1\n    local even=$(echo $list | awk '{print $2}')\n    local odd=$(echo $list | awk '{print $1}')\n    echo $((even * odd))",
    "    local list=$1\n    local even=$(echo $list | awk '{print $2}')\n    local odd=$(echo $list | awk '{print $1}')\n    echo $((even * odd))",
    "    local list=$1\n    local even=$(echo \"$list\" | awk '{print $2}')\n    local odd=$(echo \"$list\" | awk '{print $1}')\n    echo \"$even * $odd\" | bc",
    "    local list=\"$1\"\n    local even=0\n    local odd=0\n    local i=0\n    for n in $list; do\n        if [ $((i % 2)) -eq 0 ]; then\n            even=$((even * n))\n        else\n            odd=$((odd * n))\n        fi\n        i=$((i + 1))\n    done\n    echo $((even * odd))",
    "  local list=\"$1\"\n  local even=$(echo \"$list\" | awk '{if(NR%2==0) print $1}')\n  local odd=$(echo \"$list\" | awk '{if(NR%2==1) print $1}')\n  echo \"$even * $odd\" | bc",
    "  local list=$1\n  local even_num=0\n  local odd_num=0\n  local num=0\n  local mul=0\n  for num in $list; do\n    if [ $((num % 2)) -eq 0 ]; then\n      even_num=$num\n      break\n    fi\n  done\n  for num in $list; do\n    if [ $((num % 2)) -ne 0 ]; then\n      odd_num=$num\n      break\n    fi\n  done\n  mul=$((even_num * odd_num))\n  echo $mul",
    "    local list=$1\n    local even_odd_list=$(echo $list | sed -e 's/ /\\n/g' | grep -E '^[0-9]+$' | awk '{if(NR%2==0) print $1}')\n    local even_odd_product=$(echo $even_odd_list | sed -e 's/ /\\n/g' | awk '{product=product*$1} END {print product}')\n    echo $even_odd_product",
    "    local -a list=($1)\n    local even_num=0\n    local odd_num=0\n    local i=0\n    local j=0\n    local mul=0\n\n    while [ $i -lt ${#list[@]} ]\n    do\n        if [ $((list[$i] % 2)) -eq 0 ]\n        then\n            even_num=${list[$i]}\n            break\n        fi\n        i=$((i + 1))\n    done\n\n    while [ $j -lt ${#list[@]} ]\n    do\n        if [ $((list[$j] % 2)) -ne 0 ]\n        then\n            odd_num=${list[$j]}\n            break\n        fi\n        j=$((j + 1))\n    done\n\n    mul=$((even_num * odd_num))\n    echo $mul",
    "    local list=$1\n    local even=$(echo $list | awk '{print $2}')\n    local odd=$(echo $list | awk '{print $1}')\n    echo $((even * odd))",
    "  local list=$1\n  local even=$(echo $list | cut -d' ' -f2)\n  local odd=$(echo $list | cut -d' ' -f3)\n  echo $((even * odd))",
    "    local -a list=($1)\n    local even_num=${list[0]}\n    local odd_num=${list[1]}\n    for i in ${list[@]}; do\n        if [ $((i % 2)) -eq 0 ]; then\n            even_num=$i\n            break\n        fi\n    done\n    for i in ${list[@]}; do\n        if [ $((i % 2)) -ne 0 ]; then\n            odd_num=$i\n            break\n        fi\n    done\n    echo $((even_num * odd_num))",
    "  local list=$1\n  local even=$(echo $list | awk '{print $2}')\n  local odd=$(echo $list | awk '{print $1}')\n  echo $((even * odd))",
    "  local list=$1\n  local even_num=0\n  local odd_num=0\n  for num in $list; do\n    if [ $((num % 2)) -eq 0 ]; then\n      even_num=$num\n      break\n    fi\n  done\n  for num in $list; do\n    if [ $((num % 2)) -ne 0 ]; then\n      odd_num=$num\n      break\n    fi\n  done\n  echo $((even_num * odd_num))",
    "    local even_odd_list=($1)\n    local even_num=${even_odd_list[0]}\n    local odd_num=${even_odd_list[1]}\n    echo $((even_num * odd_num))"
  ]
}