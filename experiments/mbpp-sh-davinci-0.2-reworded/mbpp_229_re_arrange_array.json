{
  "name": "mbpp_229_re_arrange_array",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n#\n# $1 is a space-separated list\n# $2 is an integer\nre_arrange_array() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    re_arrange_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 2 -3 4 5 6 -7 8 9\" \"9\") = \"-1 -3 -7 4 5 6 2 8 9\" ]]\n    [[ $(candidate \"12 -14 -26 13 15\" \"5\") = \"-14 -26 12 13 15\" ]]\n    [[ $(candidate \"10 24 36 -42 -39 -78 85\" \"7\") = \"-42 -39 -78 10 24 36 85\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a array=(\"${!1}\")\n  local n=\"$2\"\n  local -a negative_elements\n  local -a positive_elements\n  local -a result_array\n  local i\n\n  for ((i = 0; i < n; i++)); do\n    if ((array[i] < 0)); then\n      negative_elements+=(\"${array[i]}\")\n    else\n      positive_elements+=(\"${array[i]}\")\n    fi\n  done\n\n  result_array=(\"${negative_elements[@]}\" \"${positive_elements[@]}\")\n  echo \"${result_array[@]}\"",
    "  local -a array=(\"${!1}\")\n  local n=$2\n  local -a negative_array=()\n  local -a positive_array=()\n\n  for (( i = 0; i < n; i++ )); do\n    if (( array[i] < 0 )); then\n      negative_array+=(\"${array[i]}\")\n    else\n      positive_array+=(\"${array[i]}\")\n    fi\n  done\n\n  echo \"${negative_array[@]} ${positive_array[@]}\"",
    "  local -n arr=$1\n  local n=$2\n  local -a neg_arr=()\n  local -a pos_arr=()\n  local -a result=()\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt 0 ]]; then\n      neg_arr+=(${arr[i]})\n    else\n      pos_arr+=(${arr[i]})\n    fi\n  done\n\n  result=(${neg_arr[@]} ${pos_arr[@]})\n  echo \"${result[@]}\"",
    "    local -a arr=(\"${!1}\")\n    local n=$2\n    local -a neg_arr=()\n    local -a pos_arr=()\n    local -a new_arr=()\n    local i=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt 0 ]]; then\n            neg_arr+=(${arr[i]})\n        else\n            pos_arr+=(${arr[i]})\n        fi\n    done\n    new_arr=(${neg_arr[@]} ${pos_arr[@]})\n    echo ${new_arr[@]}",
    "    local -n arr=$1\n    local n=$2\n    local -a negative_arr\n    local -a positive_arr\n    local -a result_arr\n    local i\n    local j\n    local k\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt 0 ]]; then\n            negative_arr+=(${arr[i]})\n        else\n            positive_arr+=(${arr[i]})\n        fi\n    done\n\n    for ((i=0; i<${#negative_arr[@]}; i++)); do\n        result_arr+=(${negative_arr[i]})\n    done\n\n    for ((i=0; i<${#positive_arr[@]}; i++)); do\n        result_arr+=(${positive_arr[i]})\n    done\n\n    for ((i=0; i<n; i++)); do\n        arr[i]=${result_arr[i]}\n    done",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt 0 ]]; then\n      temp=${arr[i]}\n      arr[i]=${arr[j]}\n      arr[j]=$temp\n      ((j++))\n    fi\n  done",
    "    local -a array=(\"${!1}\")\n    local n=$2\n    local -a negative_array\n    local -a positive_array\n    local -a result_array\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${array[i]} -lt 0 ]]; then\n            negative_array+=(${array[i]})\n        else\n            positive_array+=(${array[i]})\n        fi\n    done\n\n    result_array=(${negative_array[@]} ${positive_array[@]})\n    echo ${result_array[@]}",
    "  local -a array=(\"${@:1:$2}\")\n  local -a negative_array=()\n  local -a positive_array=()\n  local -a result_array=()\n  for i in \"${array[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      negative_array+=($i)\n    else\n      positive_array+=($i)\n    fi\n  done\n  result_array+=(\"${negative_array[@]}\")\n  result_array+=(\"${positive_array[@]}\")\n  echo \"${result_array[@]}\"",
    "    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local tmp=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt 0 ]]; then\n            tmp=${arr[i]}\n            for ((j=i; j>0; j--)); do\n                arr[j]=${arr[j-1]}\n            done\n            arr[0]=$tmp\n        fi\n    done",
    "  local -a arr=(\"${@:2}\")\n  local -i n=$1\n  local -i i=0\n  local -i j=0\n  local -i temp=0\n  for ((i=0; i<n; i++))\n  do\n    if [[ ${arr[i]} -lt 0 ]]\n    then\n      temp=${arr[i]}\n      for ((j=i; j>0 && ${arr[j-1]} -gt 0; j--))\n      do\n        arr[j]=${arr[j-1]}\n      done\n      arr[j]=$temp\n    fi\n  done\n  echo \"${arr[@]}\"",
    "  local -n arr=$1\n  local n=$2\n  local -a neg_arr\n  local -a pos_arr\n  local -a result_arr\n  local i\n\n  for ((i=0; i<n; i++)); do\n    if ((arr[i] < 0)); then\n      neg_arr+=(${arr[i]})\n    else\n      pos_arr+=(${arr[i]})\n    fi\n  done\n\n  result_arr=(${neg_arr[@]} ${pos_arr[@]})\n  echo \"${result_arr[@]}\"",
    "    local -a arr=(\"${!1}\")\n    local n=\"$2\"\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[i]} -lt 0 ]]; then\n            temp=${arr[i]}\n            for ((j=i; j>0; j--)); do\n                arr[j]=${arr[j-1]}\n            done\n            arr[0]=$temp\n        fi\n    done\n    echo \"${arr[@]}\"",
    "    local -a array=(\"${!1}\")\n    local n=\"$2\"\n    local -a negative_elements\n    local -a positive_elements\n    local -a result\n\n    for (( i = 0; i < n; i++ )); do\n        if (( array[i] < 0 )); then\n            negative_elements+=(${array[i]})\n        else\n            positive_elements+=(${array[i]})\n        fi\n    done\n\n    result=(${negative_elements[@]} ${positive_elements[@]})\n\n    echo \"${result[@]}\"",
    "  local -a array=(\"${!1}\")\n  local n=$2\n  local -a negative_array\n  local -a positive_array\n  local -a result_array\n\n  for (( i=0; i<n; i++ )); do\n    if (( array[i] < 0 )); then\n      negative_array+=(${array[i]})\n    else\n      positive_array+=(${array[i]})\n    fi\n  done\n\n  result_array=(${negative_array[@]} ${positive_array[@]})\n  echo \"${result_array[@]}\"",
    "  local array=($1)\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  for (( i=0; i<n; i++ )); do\n    if [[ ${array[$i]} -lt 0 ]]; then\n      temp=${array[$i]}\n      for (( j=i; j>0 && ${array[$((j-1))]} -ge 0; j-- )); do\n        array[$j]=${array[$((j-1))]}\n      done\n      array[$((j))]=$temp\n    fi\n  done\n  echo ${array[@]}",
    "    local -n array=$1\n    local n=$2\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0; i<n; i++)); do\n        if [[ ${array[i]} -lt 0 ]]; then\n            temp=${array[i]}\n            for ((j=i; j>0 && ${array[j-1]} -ge 0; j--)); do\n                array[j]=${array[j-1]}\n            done\n            array[j]=$temp\n        fi\n    done",
    "  local -n arr=$1\n  local n=$2\n  local -a neg_arr\n  local -a pos_arr\n  for ((i=0; i<n; i++)); do\n    if ((arr[i] < 0)); then\n      neg_arr+=(${arr[i]})\n    else\n      pos_arr+=(${arr[i]})\n    fi\n  done\n  arr=(${neg_arr[@]} ${pos_arr[@]})",
    "  local -a arr=(\"${!1}\")\n  local n=\"$2\"\n  local -a neg_arr=()\n  local -a pos_arr=()\n  local -a result_arr=()\n  local i=0\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${arr[i]} -lt 0 ]]; then\n      neg_arr+=(\"${arr[i]}\")\n    else\n      pos_arr+=(\"${arr[i]}\")\n    fi\n  done\n\n  result_arr=(\"${neg_arr[@]}\" \"${pos_arr[@]}\")\n\n  echo \"${result_arr[@]}\"",
    "  local -n arr=$1\n  local n=$2\n  local -a neg_arr=()\n  local -a pos_arr=()\n  for (( i=0; i<n; i++ )); do\n    if (( arr[i] < 0 )); then\n      neg_arr+=(${arr[i]})\n    else\n      pos_arr+=(${arr[i]})\n    fi\n  done\n  echo \"${neg_arr[@]} ${pos_arr[@]}\"",
    "  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -lt 0 ]\n    then\n      temp=${arr[$i]}\n      arr[$i]=${arr[$j]}\n      arr[$j]=$temp\n      ((j++))\n    fi\n    ((i++))\n  done"
  ]
}