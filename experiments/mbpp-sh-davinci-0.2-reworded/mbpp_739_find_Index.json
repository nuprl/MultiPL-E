{
  "name": "mbpp_739_find_Index",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n#\n# $1 is an integer\nfind_Index() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    find_Index \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"14\" ]]\n    [[ $(candidate \"4\") = \"45\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local i=1\n    local t=0\n    while [ ${#t} -lt $n ]; do\n        t=$((i*(i+1)/2))\n        i=$((i+1))\n    done\n    echo $((i-1))",
    "    local n=$1\n    local i=0\n    local num=0\n    local index=0\n    while [ $num -lt $n ]\n    do\n        let i++\n        let index+=i\n        num=${#index}\n    done\n    echo $index",
    "    local n=$1\n    local i=1\n    local sum=0\n    while true; do\n        sum=$(( $i * ($i + 1) / 2 ))\n        if [ ${#sum} -eq $n ]; then\n            echo $i\n            break\n        fi\n        i=$(( i + 1 ))\n    done",
    "    local n=$1\n    local i=1\n    local j=1\n    local t=0\n    while [ ${#t} -lt $n ]\n    do\n        t=$((i*(i+1)/2))\n        i=$((i+1))\n    done\n    echo $((i-1))",
    "\tlocal n=$1\n\tlocal i=1\n\tlocal t=0\n\twhile [ ${#t} -ne $n ]; do\n\t\tt=$(($i * ($i + 1) / 2))\n\t\ti=$(($i + 1))\n\tdone\n\techo $i",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ $((10**(n-1))) -gt $sum ]\n    do\n        sum=$((i*(i+1)/2))\n        ((i++))\n    done\n    echo $((i-1))",
    "\tlocal n=$1\n\tlocal i=1\n\tlocal triangle=0\n\twhile [ ${#triangle} -lt $n ]\n\tdo\n\t\ttriangle=$((i*(i+1)/2))\n\t\ti=$((i+1))\n\tdone\n\techo $((i-1))",
    "    local n=$1\n    local i=1\n    local sum=0\n    while true; do\n        sum=$((i*(i+1)/2))\n        if [[ ${#sum} -eq $n ]]; then\n            echo $i\n            break\n        fi\n        ((i++))\n    done",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ ${#sum} -lt $n ]; do\n        sum=$(( $i * ($i + 1) / 2 ))\n        (( i++ ))\n    done\n    echo $(( i - 1 ))",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ ${#sum} -lt $n ]; do\n        sum=$((sum+i))\n        i=$((i+1))\n    done\n    echo $((i-1))",
    "    local n=$1\n    local i=0\n    local sum=0\n    while true; do\n        let i++\n        let sum+=i\n        if [[ ${#sum} -eq $n ]]; then\n            echo $i\n            break\n        fi\n    done",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ ${#sum} -lt $n ]; do\n        sum=$(( $i*($i+1)/2 ))\n        (( i++ ))\n    done\n    echo $(( $i-1 ))",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ ${#sum} -lt $n ]; do\n        sum=$(( $i * ($i + 1) / 2 ))\n        i=$(( i + 1 ))\n    done\n    echo $(( i - 1 ))",
    "    local n=$1\n    local i=1\n    local tri=0\n    local len=0\n    while [ $len -lt $n ]\n    do\n        tri=$((i*(i+1)/2))\n        len=${#tri}\n        ((i++))\n    done\n    echo $((i-1))",
    "\tlocal n=$1\n\tlocal i=1\n\tlocal j=1\n\tlocal sum=0\n\twhile [ ${#sum} -lt $n ]\n\tdo\n\t\tsum=$((i*(i+1)/2))\n\t\ti=$((i+1))\n\t\tj=$((j+1))\n\tdone\n\techo $j",
    "    local n=$1\n    local i=1\n    local index=1\n    local triangular=0\n    local digits=0\n    while [ $digits -ne $n ]; do\n        triangular=$(( $i * ($i + 1) / 2 ))\n        digits=$(echo $triangular | wc -c)\n        i=$(( $i + 1 ))\n        index=$(( $index + 1 ))\n    done\n    echo $index",
    "    local n=$1\n    local i=1\n    local triangular_number=1\n    while [ ${#triangular_number} -lt $n ]; do\n        ((i++))\n        ((triangular_number+=i))\n    done\n    echo $i",
    "    local n=$1\n    local i=1\n    local sum=0\n    while [ ${#sum} -lt $n ]; do\n        sum=$(($i*($i+1)/2))\n        i=$(($i+1))\n    done\n    echo $((i-1))",
    "    local n=$1\n    local i=1\n    local sum=0\n    local index=0\n    while [ $sum -lt $n ]\n    do\n        let sum=i*(i+1)/2\n        let i++\n        let index++\n    done\n    echo $index",
    "  local n=$1\n  local i=1\n  local t=1\n  local len=0\n  while [ $len -lt $n ]; do\n    i=$((i+1))\n    t=$((t+i))\n    len=${#t}\n  done\n  echo $i"
  ]
}