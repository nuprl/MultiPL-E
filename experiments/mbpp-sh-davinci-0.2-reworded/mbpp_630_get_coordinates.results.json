{
  "name": "mbpp_630_get_coordinates",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x=0\n    local y=0\n    local result=\"\"\n\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n\n        result=\"$result $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\"\n    done\n\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  echo \"$1\" | sed -e 's/[^0-9 ]//g' | tr ' ' '\\n' | sort -u\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a adjacent_coordinates\n    local -a adjacent_coordinate\n    local -a coordinate\n    local -a x_coordinates\n    local -a y_coordinates\n    local -a x_coordinate\n    local -a y_coordinate\n    local -a x_adjacent_coordinates\n    local -a y_adjacent_coordinates\n    local -a x_adjacent_coordinate\n    local -a y_adjacent_coordinate\n    local -a x_adjacent_coordinate_list\n    local -a y_adjacent_coordinate_list\n    local -a adjacent_coordinate_list\n    local -a adjacent_coordinate_list_list\n    local -a adjacent_coordinate_list_list_list\n    local -a adjacent_coordinate_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list_\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x - 1)),$((y - 1))\n        echo $((x - 1)),$y\n        echo $((x - 1)),$((y + 1))\n        echo $x,$((y - 1))\n        echo $x,$((y + 1))\n        echo $((x + 1)),$((y - 1))\n        echo $((x + 1)),$y\n        echo $((x + 1)),$((y + 1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $(($x - 1)),$y\n        echo $(($x + 1)),$y\n        echo $x,$(($y - 1))\n        echo $x,$(($y + 1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x=0\n  local y=0\n  local coordinates_list=()\n  for coordinate in $coordinates; do\n    if [ $x -eq 0 ]; then\n      x=$coordinate\n    else\n      y=$coordinate\n      coordinates_list+=(\"$x $y\")\n      x=0\n    fi\n  done\n  echo \"${coordinates_list[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coord_list=\"$1\"\n    local coord\n    local x\n    local y\n    local adj_coord\n    local adj_coord_list\n    for coord in $coord_list; do\n        x=${coord:0:1}\n        y=${coord:1:1}\n        adj_coord_list=\"$adj_coord_list $x$((y-1)) $x$((y+1)) $((x-1))$y $((x+1))$y\"\n    done\n    echo \"$adj_coord_list\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local list=\"$1\"\n    local coordinates=\"\"\n    local coordinate=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local i=\"\"\n    local j=\"\"\n    local k=\"\"\n    local x_min=\"\"\n    local x_max=\"\"\n    local y_min=\"\"\n    local y_max=\"\"\n    local z_min=\"\"\n    local z_max=\"\"\n    local x_min_coordinate=\"\"\n    local x_max_coordinate=\"\"\n    local y_min_coordinate=\"\"\n    local y_max_coordinate=\"\"\n    local z_min_coordinate=\"\"\n    local z_max_coordinate=\"\"\n    local x_min_coordinate_adjacent=\"\"\n    local x_max_coordinate_adjacent=\"\"\n    local y_min_coordinate_adjacent=\"\"\n    local y_max_coordinate_adjacent=\"\"\n    local z_min_coordinate_adjacent=\"\"\n    local z_max_coordinate_adjacent=\"\"\n\n    for coordinate in $list; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        z=$(echo $coordinate | cut -d, -f3)\n\n        if [ -z \"$x_min\" ] || [ \"$x\" -lt \"$x_min\" ]; then\n            x_min=\"$x\"\n            x_min_coordinate=\"$coordinate\"\n        fi\n\n        if [ -z \"$x_max\" ] || [ \"$x\" -gt \"$x_max\" ]; then\n            x_max=\"$x\"\n            x_max_coordinate=\"$coordinate\"\n        fi\n\n        if [ -z \"$y_min\" ] || [ \"$y\" -lt \"$y_min\" ]; then\n            y_min=\"$y\"\n            y_min_coordinate=\"$coordinate\"\n        fi\n\n        if [ -z \"$y_max\" ] || [ \"$y\" -gt \"$y_max\" ]; then\n            y_max=\"$y\"\n            y_max_coordinate=\"$coordinate\"\n        fi\n\n        if [ -z \"$z_min\" ] || [ \"$z\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmplvydryg2.sh: line 60: syntax error near unexpected token `}'\\n/tmp/tmplvydryg2.sh: line 60: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a adjacent\n    local -a result\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n    local -i pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n    local -i yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n    local -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n    local -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n    local -i zzz\n    local -i aaaa\n    local -i bbbb\n    local -i cccc\n    local -i dddd\n   \n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x=0\n    local y=0\n    local x_min=0\n    local x_max=0\n    local y_min=0\n    local y_max=0\n    local coordinates_adjacent=()\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        if [ $x -lt $x_min ]; then\n            x_min=$x\n        fi\n        if [ $x -gt $x_max ]; then\n            x_max=$x\n        fi\n        if [ $y -lt $y_min ]; then\n            y_min=$y\n        fi\n        if [ $y -gt $y_max ]; then\n            y_max=$y\n        fi\n    done\n    for (( x=$x_min-1; x<=$x_max+1; x++ )); do\n        for (( y=$y_min-1; y<=$y_max+1; y++ )); do\n            coordinates_adjacent+=(\"$x,$y\")\n        done\n    done\n    echo \"${coordinates_adjacent[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local x y\n    for i in $1; do\n        x=${i:0:1}\n        y=${i:1:1}\n        echo $((x-1))$y $((x+1))$y $x$((y-1)) $x$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local x y\n    for xy in $1; do\n        x=${xy%%,*}\n        y=${xy##*,}\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x+1)),$y\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=\"$1\"\n    local x\n    local y\n    local x_min\n    local x_max\n    local y_min\n    local y_max\n    local x_coord\n    local y_coord\n    local x_coord_min\n    local x_coord_max\n    local y_coord_min\n    local y_coord_max\n    local x_coord_min_adj\n    local x_coord_max_adj\n    local y_coord_min_adj\n    local y_coord_max_adj\n    local x_coord_adj\n    local y_coord_adj\n    local adj_coords\n    local adj_coords_sorted\n    local adj_coords_sorted_uniq\n    local adj_coords_sorted_uniq_joined\n\n    # Get the x and y coordinates\n    x=$(echo \"$coords\" | cut -d ',' -f 1)\n    y=$(echo \"$coords\" | cut -d ',' -f 2)\n\n    # Get the min and max x and y coordinates\n    x_min=$(echo \"$x\" | sort -n | head -n 1)\n    x_max=$(echo \"$x\" | sort -n | tail -n 1)\n    y_min=$(echo \"$y\" | sort -n | head -n 1)\n    y_max=$(echo \"$y\" | sort -n | tail -n 1)\n\n    # Get the x and y coordinates of the min and max x and y coordinates\n    x_coord=$(echo \"$coords\" | cut -d ',' -f 1 | sort -n)\n    y_coord=$(echo \"$coords\" | cut -d ',' -f 2 | sort -n)\n    x_coord_min=$(echo \"$x_coord\" | head -n 1)\n    x_coord_max=$(echo \"$x_coord\" | tail -n 1)\n    y_coord_min=$(echo \"$y_coord\" | head -n 1)\n    y_coord_max=$(echo \"$y_coord\" | tail -n 1)\n\n    # Get the adjacent coordinates of the min and max x and y coordinates\n    x_coord_min_adj=$(\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpcm8gde99.sh: line 49: unexpected EOF while looking for matching `)'\\n/tmp/tmpcm8gde99.sh: line 64: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a coordinates_list\n    local -a coordinates_list_adjacent\n    local -a coordinates_list_adjacent_unique\n    local -a coordinates_list_adjacent_unique_sorted\n    local -a coordinates_list_adjacent_unique_sorted_string\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    local -a xs ys\n    local -a xys\n    local -a xys_adjacent\n    local -a xys_adjacent_sorted\n    local -a xys_adjacent_sorted_uniq\n    local -a xys_adjacent_sorted_uniq_sorted\n    local -a xys_adjacent_sorted_uniq_sorted_joined\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted_uniq\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted_uniq_sorted\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted_uniq\n    local -a xys_adjacent_sorted_uniq_sorted_joined_sorted_uniq_sorted_joined_sorted_uniq_\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coords\n    local -a xs\n    local -a ys\n    local -a zs\n    local -a xys\n    local -a xzs\n    local -a yzs\n    local -a xyzs\n    local -a xyzs_sorted\n    local -a xyzs_unique\n    local -a xyzs_unique_sorted\n    local -a xyzs_unique_sorted_adjacent\n    local -a xyzs_unique_sorted_adjacent_sorted\n    local -a xyzs_unique_sorted_adjacent_sorted_unique\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique_sorted\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique_sorted_adjacent\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique_sorted\n    local -a xyzs_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique_sorted_adjacent_sorted_unique_sorted_\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x - 1)),$((y - 1))\n        echo $((x - 1)),$y\n        echo $((x - 1)),$((y + 1))\n        echo $x,$((y - 1))\n        echo $x,$((y + 1))\n        echo $((x + 1)),$((y - 1))\n        echo $((x + 1)),$y\n        echo $((x + 1)),$((y + 1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        for i in $(seq -1 1); do\n            for j in $(seq -1 1); do\n                echo \"$((x+i)),$((y+j))\"\n            done\n        done\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  echo $1 | sed -e 's/[^0-9]/ /g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x_coordinates=()\n    local y_coordinates=()\n    for coordinate in $coordinates; do\n        x_coordinates+=($(echo $coordinate | cut -d, -f1))\n        y_coordinates+=($(echo $coordinate | cut -d, -f2))\n    done\n    local min_x=$(echo ${x_coordinates[@]} | tr ' ' '\\n' | sort -n | head -n1)\n    local max_x=$(echo ${x_coordinates[@]} | tr ' ' '\\n' | sort -n | tail -n1)\n    local min_y=$(echo ${y_coordinates[@]} | tr ' ' '\\n' | sort -n | head -n1)\n    local max_y=$(echo ${y_coordinates[@]} | tr ' ' '\\n' | sort -n | tail -n1)\n    local adjacent_coordinates=()\n    for x in $(seq $min_x $max_x); do\n        for y in $(seq $min_y $max_y); do\n            adjacent_coordinates+=($x,$y)\n        done\n    done\n    echo ${adjacent_coordinates[@]}\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a coordinate\n    local -a adjacent_coordinates\n    local -a adjacent_coordinate\n    local -a adjacent_coordinate_list\n    local -a adjacent_coordinate_list_sorted\n    local -a adjacent_coordinate_list_sorted_unique\n    local -a adjacent_coordinate_list_sorted_unique_sorted\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted_string\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted_unique\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted_unique_sorted\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted_unique_sorted_string\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted_unique\n    local -a adjacent_coordinate_list_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted_unique_sorted_string_sorted_unique_sorted\n   \n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local coordinate\n  local x\n  local y\n  local result\n  for coordinate in $coordinates; do\n    x=${coordinate%%,*}\n    y=${coordinate##*,}\n    result=\"$result $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\"\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local -a coordinates\n  local -a result\n  local -a temp\n  local -a temp2\n  local -a temp3\n  local -a temp4\n  local -a temp5\n  local -a temp6\n  local -a temp7\n  local -a temp8\n  local -a temp9\n  local -a temp10\n  local -a temp11\n  local -a temp12\n  local -a temp13\n  local -a temp14\n  local -a temp15\n  local -a temp16\n  local -a temp17\n  local -a temp18\n  local -a temp19\n  local -a temp20\n  local -a temp21\n  local -a temp22\n  local -a temp23\n  local -a temp24\n  local -a temp25\n  local -a temp26\n  local -a temp27\n  local -a temp28\n  local -a temp29\n  local -a temp30\n  local -a temp31\n  local -a temp32\n  local -a temp33\n  local -a temp34\n  local -a temp35\n  local -a temp36\n  local -a temp37\n  local -a temp38\n  local -a temp39\n  local -a temp40\n  local -a temp41\n  local -a temp42\n  local -a temp43\n  local -a temp44\n  local -a temp45\n  local -a temp46\n  local -a temp47\n  local -a temp48\n  local -a temp49\n  local -a temp50\n  local -a temp51\n  local -a temp52\n  local -a temp53\n  local -a temp54\n  local -a temp55\n  local -a temp56\n  local -a temp57\n  local -a temp58\n  local -a temp59\n  local -a temp60\n  local -a temp61\n  local -a temp62\n  local -a temp63\n  local -a temp64\n  local -a temp65\n  local -a temp66\n  local -a temp67\n  local -a temp68\n  local -a temp69\n  local -a temp70\n  local -a temp71\n  local -\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a adjacent_coordinates\n    local -a adjacent_coordinate\n    local -a adjacent_coordinate_list\n    local -a coordinate\n    local -a coordinate_list\n    local -a coordinate_list_list\n    local -a coordinate_list_list_list\n    local -a coordinate_list_list_list_list\n    local -a coordinate_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n    local -a coordinate_list_list_list_list_list_list_list_\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$y $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=${coordinate%%,*}\n    y=${coordinate##*,}\n    for i in $(seq -1 1 1); do\n      for j in $(seq -1 1 1); do\n        echo \"$((x+i)),$((y+j))\"\n      done\n    done\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local coordinates_list=()\n    local coordinates_list_index=0\n    local coordinate_index=0\n    local coordinate_x=0\n    local coordinate_y=0\n    local coordinate_x_min=0\n    local coordinate_x_max=0\n    local coordinate_y_min=0\n    local coordinate_y_max=0\n    local coordinate_x_min_index=0\n    local coordinate_x_max_index=0\n    local coordinate_y_min_index=0\n    local coordinate_y_max_index=0\n    local coordinate_x_min_value=0\n    local coordinate_x_max_value=0\n    local coordinate_y_min_value=0\n    local coordinate_y_max_value=0\n    local coordinate_x_min_value_index=0\n    local coordinate_x_max_value_index=0\n    local coordinate_y_min_value_index=0\n    local coordinate_y_max_value_index=0\n    local coordinate_x_min_value_index_list=()\n    local coordinate_x_max_value_index_list=()\n    local coordinate_y_min_value_index_list=()\n    local coordinate_y_max_value_index_list=()\n    local coordinate_x_min_value_index_list_index=0\n    local coordinate_x_max_value_index_list_index=0\n    local coordinate_y_min_value_index_list_index=0\n    local coordinate_y_max_value_index_list_index=0\n    local coordinate_x_min_value_index_list_index_value=0\n    local coordinate_x_max_value_index_list_index_value=0\n    local coordinate_y_min_value_index_list_index_value=0\n    local coordinate_y_max_value_index_list_index_value=0\n    local coordinate_x_min_value_index_list_index_value_index=0\n    local coordinate_x_max_value_index_list_index_value_index=0\n    local coordinate_y_min_value\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo $1 | sed -e 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$(echo $1 | sed 's/[^0-9 ]//g')\n    local x=$(echo $coordinates | cut -d' ' -f1)\n    local y=$(echo $coordinates | cut -d' ' -f2)\n    local z=$(echo $coordinates | cut -d' ' -f3)\n    local x_min=$(($x-1))\n    local x_max=$(($x+1))\n    local y_min=$(($y-1))\n    local y_max=$(($y+1))\n    local z_min=$(($z-1))\n    local z_max=$(($z+1))\n    local coordinates_list=\"\"\n    for x in $(seq $x_min $x_max); do\n        for y in $(seq $y_min $y_max); do\n            for z in $(seq $z_min $z_max); do\n                if [ \"$x\" -eq \"$x_min\" ] && [ \"$y\" -eq \"$y_min\" ] && [ \"$z\" -eq \"$z_min\" ]; then\n                    continue\n                elif [ \"$x\" -eq \"$x_max\" ] && [ \"$y\" -eq \"$y_max\" ] && [ \"$z\" -eq \"$z_max\" ]; then\n                    continue\n                elif [ \"$x\" -eq \"$x_min\" ] && [ \"$y\" -eq \"$y_max\" ] && [ \"$z\" -eq \"$z_min\" ]; then\n                    continue\n                elif [ \"$x\" -eq \"$x_max\" ] && [ \"$y\" -eq \"$y_min\" ] && [ \"$z\" -eq \"$z_max\" ]; then\n                    continue\n                elif [ \"$x\" -eq \"$x_min\" ] && [ \"$y\" -eq \"$y_max\" ] && [ \"$z\" -eq \"$z_max\" ]; then\n                    continue\n                elif [ \"$x\" -eq \"$x_max\" ] && [ \"$y\" -eq \"$y_min\" ] && [ \"$z\" -eq \"$z_min\" ]; then\n                    continue\n                elif [ \"$x\" -eq \"$x_min\" ] && [\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpyixkm4kj.sh: line 33: syntax error near unexpected token `}'\\n/tmp/tmpyixkm4kj.sh: line 33: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  echo $1 | tr ' ' '\\n' | grep -o '^[0-9]\\+,[0-9]\\+$'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local -a coords=()\n  local -a coord_list=()\n  local -a coord_list_tmp=()\n  local -a coord_list_tmp2=()\n  local -a coord_list_tmp3=()\n  local -a coord_list_tmp4=()\n  local -a coord_list_tmp5=()\n  local -a coord_list_tmp6=()\n  local -a coord_list_tmp7=()\n  local -a coord_list_tmp8=()\n  local -a coord_list_tmp9=()\n  local -a coord_list_tmp10=()\n  local -a coord_list_tmp11=()\n  local -a coord_list_tmp12=()\n  local -a coord_list_tmp13=()\n  local -a coord_list_tmp14=()\n  local -a coord_list_tmp15=()\n  local -a coord_list_tmp16=()\n  local -a coord_list_tmp17=()\n  local -a coord_list_tmp18=()\n  local -a coord_list_tmp19=()\n  local -a coord_list_tmp20=()\n  local -a coord_list_tmp21=()\n  local -a coord_list_tmp22=()\n  local -a coord_list_tmp23=()\n  local -a coord_list_tmp24=()\n  local -a coord_list_tmp25=()\n  local -a coord_list_tmp26=()\n  local -a coord_list_tmp27=()\n  local -a coord_list_tmp28=()\n  local -a coord_list_tmp29=()\n  local -a coord_list_tmp30=()\n  local -a coord_list_tmp31=()\n  local -a coord_list_tmp32=()\n  local -a coord_list_tmp33=()\n  local -a coord_list_tmp34=()\n  local -a coord_list_tmp35=()\n  local -a coord_list_tmp36=()\n  local -a coord_list_tmp37=()\n  local -a coord_list_tmp38=()\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x\n    local y\n    local result\n    for coordinate in $coordinates; do\n        x=${coordinate:0:1}\n        y=${coordinate:1:1}\n        result=\"$result $x$((y-1)) $x$((y+1)) $((x-1))$y $((x+1))$y\"\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coords=$1\n  local x\n  local y\n  local x_min\n  local x_max\n  local y_min\n  local y_max\n  local x_coord\n  local y_coord\n  local result=\"\"\n\n  for coord in $coords; do\n    x=${coord%%,*}\n    y=${coord##*,}\n\n    if [[ -z $x_min ]] || [[ $x -lt $x_min ]]; then\n      x_min=$x\n    fi\n    if [[ -z $x_max ]] || [[ $x -gt $x_max ]]; then\n      x_max=$x\n    fi\n    if [[ -z $y_min ]] || [[ $y -lt $y_min ]]; then\n      y_min=$y\n    fi\n    if [[ -z $y_max ]] || [[ $y -gt $y_max ]]; then\n      y_max=$y\n    fi\n  done\n\n  for ((x_coord=$x_min-1; x_coord<=$x_max+1; x_coord++)); do\n    for ((y_coord=$y_min-1; y_coord<=$y_max+1; y_coord++)); do\n      result=\"$result $x_coord,$y_coord\"\n    done\n  done\n\n  echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=\"$1\"\n    local x y\n    for coord in $coords; do\n        x=$(echo $coord | cut -d, -f1)\n        y=$(echo $coord | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x_coordinates=\"\"\n  local y_coordinates=\"\"\n  for coordinate in $coordinates; do\n    x_coordinates=\"$x_coordinates $(echo $coordinate | cut -d, -f1)\"\n    y_coordinates=\"$y_coordinates $(echo $coordinate | cut -d, -f2)\"\n  done\n  local min_x=$(echo \"$x_coordinates\" | tr ' ' '\\n' | sort -n | head -n1)\n  local max_x=$(echo \"$x_coordinates\" | tr ' ' '\\n' | sort -n | tail -n1)\n  local min_y=$(echo \"$y_coordinates\" | tr ' ' '\\n' | sort -n | head -n1)\n  local max_y=$(echo \"$y_coordinates\" | tr ' ' '\\n' | sort -n | tail -n1)\n  local adjacent_coordinates=\"\"\n  for x in $(seq $min_x $max_x); do\n    adjacent_coordinates=\"$adjacent_coordinates $x,$min_y\"\n    adjacent_coordinates=\"$adjacent_coordinates $x,$max_y\"\n  done\n  for y in $(seq $min_y $max_y); do\n    adjacent_coordinates=\"$adjacent_coordinates $min_x,$y\"\n    adjacent_coordinates=\"$adjacent_coordinates $max_x,$y\"\n  done\n  echo \"$adjacent_coordinates\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local -a coordinates\n  local -a coordinate\n  local -a adjacent_coordinates\n  local -a adjacent_coordinate\n  local -a adjacent_coordinate_list\n  local -a adjacent_coordinate_list_list\n  local -a adjacent_coordinate_list_list_list\n  local -a adjacent_coordinate_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n  local -a adjacent_coordinate_list_list_list_list_list_list_list\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=\"$(echo \"$coordinate\" | cut -d, -f1)\"\n        y=\"$(echo \"$coordinate\" | cut -d, -f2)\"\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local -a result=()\n\n  for coordinate in $coordinates; do\n    local x=${coordinate%%,*}\n    local y=${coordinate##*,}\n    result+=($((x - 1)),$y $((x + 1)),$y $x,$((y - 1)) $x,$((y + 1)))\n  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  echo \"$1\" | sed -e 's/[^0-9]/ /g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local list=\"$1\"\n    local -a coordinates\n    local -a x_coordinates\n    local -a y_coordinates\n    local -a z_coordinates\n    local -a coordinates_array\n    local -a coordinates_array_sorted\n    local -a coordinates_array_sorted_unique\n    local -a coordinates_array_sorted_unique_adjacent\n    local -a coordinates_array_sorted_unique_adjacent_sorted\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent_sorted_unique_adjacent\n    local -a coordinates_array_sorted_unique_adjacent_sorted_unique_adj\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  echo \"$1\" | sed -e 's/^/\\[/' -e 's/ /\\],\\[/g' -e 's/$/\\]/'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$(($x - 1)),$y $(($x + 1)),$y $x,$(($y - 1)) $x,$(($y + 1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n\n        echo \"$((x - 1)),$((y - 1))\"\n        echo \"$((x - 1)),$y\"\n        echo \"$((x - 1)),$((y + 1))\"\n        echo \"$x,$((y - 1))\"\n        echo \"$x,$((y + 1))\"\n        echo \"$((x + 1)),$((y - 1))\"\n        echo \"$((x + 1)),$y\"\n        echo \"$((x + 1)),$((y + 1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for i in $coordinates; do\n        x=$(echo $i | cut -d, -f1)\n        y=$(echo $i | cut -d, -f2)\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x=0\n    local y=0\n    local result=\"\"\n\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d',' -f1)\n        y=$(echo $coordinate | cut -d',' -f2)\n\n        result=\"$result $((x - 1)),$((y - 1)) $((x - 1)),$y $((x - 1)),$((y + 1)) $x,$((y - 1)) $x,$((y + 1)) $((x + 1)),$((y - 1)) $((x + 1)),$y $((x + 1)),$((y + 1))\"\n    done\n\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$y $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  echo $1 | sed 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local list=\"$1\"\n  local coordinates=()\n  local coordinate\n  for coordinate in $list; do\n    coordinates+=(\"$coordinate\")\n  done\n  echo \"${coordinates[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x\n    local y\n    local x_min\n    local x_max\n    local y_min\n    local y_max\n    local x_min_adjacent\n    local x_max_adjacent\n    local y_min_adjacent\n    local y_max_adjacent\n    local adjacent_coordinates\n    local adjacent_coordinate\n\n    # Extract the minimum and maximum x and y coordinates from the given coordinates\n    for coordinate in $coordinates; do\n        x=${coordinate%,*}\n        y=${coordinate#*,}\n        if [[ -z \"$x_min\" || \"$x\" -lt \"$x_min\" ]]; then\n            x_min=$x\n        fi\n        if [[ -z \"$x_max\" || \"$x\" -gt \"$x_max\" ]]; then\n            x_max=$x\n        fi\n        if [[ -z \"$y_min\" || \"$y\" -lt \"$y_min\" ]]; then\n            y_min=$y\n        fi\n        if [[ -z \"$y_max\" || \"$y\" -gt \"$y_max\" ]]; then\n            y_max=$y\n        fi\n    done\n\n    # Calculate the adjacent coordinates\n    x_min_adjacent=$((x_min - 1))\n    x_max_adjacent=$((x_max + 1))\n    y_min_adjacent=$((y_min - 1))\n    y_max_adjacent=$((y_max + 1))\n\n    # Create a space-separated list of adjacent coordinates\n    for ((x = x_min_adjacent; x <= x_max_adjacent; x++)); do\n        for ((y = y_min_adjacent; y <= y_max_adjacent; y++)); do\n            adjacent_coordinate=\"$x,$y\"\n            if [[ \"$adjacent_coordinates\" != *\"$adjacent_coordinate\"* ]]; then\n                adjacent_coordinates=\"$adjacent_coordinates $adjacent_coordinate\"\n            fi\n        done\n    done\n\n    echo \"$adjacent_coordinates\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local -a coordinates=()\n  local -a coordinates_to_check=()\n  local -a coordinates_to_check_next=()\n  local -a coordinates_to_check_next_next=()\n  local -a coordinates_to_check_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=()\n  local -a coordinates_to_check_next_next_next_next_next_next_next_next_next\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x\n    local y\n    local x_min\n    local x_max\n    local y_min\n    local y_max\n    local result\n\n    x_min=1000\n    x_max=0\n    y_min=1000\n    y_max=0\n\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n\n        if [ $x -lt $x_min ]; then\n            x_min=$x\n        fi\n        if [ $x -gt $x_max ]; then\n            x_max=$x\n        fi\n        if [ $y -lt $y_min ]; then\n            y_min=$y\n        fi\n        if [ $y -gt $y_max ]; then\n            y_max=$y\n        fi\n    done\n\n    for (( x = $x_min - 1; x <= $x_max + 1; x++ )); do\n        for (( y = $y_min - 1; y <= $y_max + 1; y++ )); do\n            result=\"$result $x,$y\"\n        done\n    done\n\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=$1\n    local x y\n    for coord in $coords; do\n        x=${coord%%,*}\n        y=${coord##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates=($1)\n    local -a adjacent_coordinates=()\n    local -a x_coordinates=()\n    local -a y_coordinates=()\n    local -a z_coordinates=()\n    local -a x_adjacent_coordinates=()\n    local -a y_adjacent_coordinates=()\n    local -a z_adjacent_coordinates=()\n    local -a adjacent_coordinates=()\n    local -a adjacent_coordinates_set=()\n    local -a adjacent_coordinates_set_sorted=()\n    local -a adjacent_coordinates_sorted=()\n    local -a adjacent_coordinates_sorted_unique=()\n    local -a adjacent_coordinates_sorted_unique_sorted=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique_sorted=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique_sorted_sorted=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique_sorted_sorted_unique=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique_sorted_sorted_unique_sorted=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique_sorted_sorted_unique_sorted_sorted=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique_sorted_sorted_unique_sorted_sorted_unique=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique_sorted_sorted_unique_sorted_sorted_unique_sorted=()\n    local -a adjacent_coordinates_sorted_unique_sorted_sorted_unique_sorted_sorted_unique_sorted_sorted\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x=0\n  local y=0\n  local x_coordinates=()\n  local y_coordinates=()\n  for coordinate in $coordinates; do\n    if [ $x -eq 0 ]; then\n      x_coordinates+=($coordinate)\n      x=1\n    else\n      y_coordinates+=($coordinate)\n      x=0\n    fi\n  done\n  echo \"${x_coordinates[@]} ${y_coordinates[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  local -a xs ys\n  local -a x_ys\n  local -a x_ys_sorted\n  local -a x_ys_sorted_uniq\n  local -a x_ys_sorted_uniq_adjacent\n  local -a x_ys_sorted_uniq_adjacent_sorted\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq\n  local -a x_ys_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent_sorted_uniq_adjacent\n \n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local x y\n  for x in $1; do\n    for y in $1; do\n      echo $x $y\n    done\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a x_coordinates\n    local -a y_coordinates\n    local -a z_coordinates\n    local -a x_coordinates_adjacent\n    local -a y_coordinates_adjacent\n    local -a z_coordinates_adjacent\n    local -a coordinates_adjacent\n    local -a coordinates_adjacent_sorted\n    local -a coordinates_adjacent_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_joined\n\n    coordinates=($1)\n\n    for coordinate in \"${coordinates[@]}\"; do\n        x_coordinates+=($(echo $coordinate | cut -d, -f1))\n        y_coordinates+=($(echo $coordinate | cut -d, -f2))\n        z_coordinates+=($(echo $coordinate | cut -d, -f3))\n    done\n\n    for x_coordinate in \"${x_coordinates[@]}\"; do\n        x_coordinates_adjacent+=($(($x_coordinate - 1)))\n        x_coordinates_adjacent+=($(($x_coordinate + 1)))\n    done\n\n    for y_coordinate in \"${y_coordinates[@]}\"; do\n        y_coordinates_adjacent+=($(($y_coordinate - 1)))\n        y_coordinates_adjacent+=($(($y_coordinate + 1)))\n    done\n\n    for z_coordinate in \"${z_coordinates[@]}\"; do\n        z_coordinates_adjacent+=($(($z_coordinate - 1)))\n        z_coordinates_adjacent+=($(($z_coordinate + 1)))\n    done\n\n    for x_coordinate_adjacent in \"${x_coordinates_adjacent[@]}\"; do\n        for y_coordinate_adjacent in \"${y_coordinates_adjacent[@]}\"; do\n            for z_coordinate_adjacent in \"${z_coordinates_adjacent[@]}\"; do\n                coordinates_adjacent+=($x_coordinate_adjacent,$y_coordinate_adjacent,$z_coordinate_\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpz2bwvjsn.sh: line 47: syntax error near unexpected token `('\\n/tmp/tmpz2bwvjsn.sh: line 47: `candidate() {'\\n/tmp/tmpz2bwvjsn.sh: line 48: get_coordinates: command not found\\n/tmp/tmpz2bwvjsn.sh: line 49: syntax error near unexpected token `}'\\n/tmp/tmpz2bwvjsn.sh: line 49: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=\"$1\"\n    local x y\n    for coord in $coords; do\n        x=$(echo $coord | cut -d, -f1)\n        y=$(echo $coord | cut -d, -f2)\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$y $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x=0\n    local y=0\n    local result=()\n    for coordinate in $coordinates; do\n        if [[ $coordinate =~ ^([0-9]+),([0-9]+)$ ]]; then\n            x=${BASH_REMATCH[1]}\n            y=${BASH_REMATCH[2]}\n            result+=($((x-1)),$((y-1)))\n            result+=($((x-1)),$y)\n            result+=($((x-1)),$((y+1)))\n            result+=($x,$((y-1)))\n            result+=($x,$((y+1)))\n            result+=($((x+1)),$((y-1)))\n            result+=($((x+1)),$y)\n            result+=($((x+1)),$((y+1)))\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x y\n  for coordinate in $coordinates; do\n    x=${coordinate%%,*}\n    y=${coordinate##*,}\n    for ((i=-1; i<=1; i++)); do\n      for ((j=-1; j<=1; j++)); do\n        if [[ $i -ne 0 || $j -ne 0 ]]; then\n          echo \"$((x+i)),$((y+j))\"\n        fi\n      done\n    done\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=$1\n    local x\n    local y\n    local x_min\n    local x_max\n    local y_min\n    local y_max\n    local result\n    for coord in $coords; do\n        x=${coord%,*}\n        y=${coord#*,}\n        if [ -z \"$x_min\" ] || [ \"$x\" -lt \"$x_min\" ]; then\n            x_min=$x\n        fi\n        if [ -z \"$x_max\" ] || [ \"$x\" -gt \"$x_max\" ]; then\n            x_max=$x\n        fi\n        if [ -z \"$y_min\" ] || [ \"$y\" -lt \"$y_min\" ]; then\n            y_min=$y\n        fi\n        if [ -z \"$y_max\" ] || [ \"$y\" -gt \"$y_max\" ]; then\n            y_max=$y\n        fi\n    done\n    for ((x=$x_min-1; x<=$x_max+1; x++)); do\n        for ((y=$y_min-1; y<=$y_max+1; y++)); do\n            result=\"$result $x,$y\"\n        done\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a coordinates_to_check\n    local -a coordinates_to_check_new\n    local -a coordinates_checked\n    local -a coordinates_checked_new\n    local -a coordinates_to_add\n    local -a coordinates_to_add_new\n    local -a coordinates_added\n    local -a coordinates_added_new\n    local -a coordinates_to_remove\n    local -a coordinates_to_remove_new\n    local -a coordinates_removed\n    local -a coordinates_removed_new\n    local -a coordinates_to_check_tmp\n    local -a coordinates_checked_tmp\n    local -a coordinates_to_add_tmp\n    local -a coordinates_added_tmp\n    local -a coordinates_to_remove_tmp\n    local -a coordinates_removed_tmp\n    local -a coordinates_tmp\n    local -a coordinates_tmp_new\n    local -a coordinates_tmp_new_new\n    local -a coordinates_tmp_new_new_new\n    local -a coordinates_tmp_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new_new_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new_new_new_new_new_new_new_new\n    local -a coordinates_tmp_new_new_new_new_new_new_new_\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x=0\n    local y=0\n    local result=\"\"\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        result=\"$result $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\"\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x\n    local y\n    local x_min\n    local x_max\n    local y_min\n    local y_max\n    local x_coordinates\n    local y_coordinates\n    local coordinates_list\n    local coordinates_list_length\n    local coordinate\n    local i\n    local adjacent_coordinates\n    local adjacent_coordinates_list\n    local adjacent_coordinates_list_length\n    local adjacent_coordinate\n    local j\n\n    x_min=0\n    x_max=0\n    y_min=0\n    y_max=0\n\n    for coordinate in $coordinates; do\n        x=${coordinate%,*}\n        y=${coordinate#*,}\n\n        if [ $x -lt $x_min ]; then\n            x_min=$x\n        fi\n\n        if [ $x -gt $x_max ]; then\n            x_max=$x\n        fi\n\n        if [ $y -lt $y_min ]; then\n            y_min=$y\n        fi\n\n        if [ $y -gt $y_max ]; then\n            y_max=$y\n        fi\n    done\n\n    x_coordinates=$(seq $x_min $x_max)\n    y_coordinates=$(seq $y_min $y_max)\n\n    coordinates_list=\"\"\n\n    for x in $x_coordinates; do\n        for y in $y_coordinates; do\n            coordinates_list=\"$coordinates_list $x,$y\"\n        done\n    done\n\n    coordinates_list_length=$(echo $coordinates_list | wc -w)\n\n    adjacent_coordinates_list=\"\"\n\n    for ((i=1; i<=coordinates_list_length; i++)); do\n        coordinate=$(echo $coordinates_list | cut -d ' ' -f $i)\n        x=${coordinate%,*}\n        y=${coordinate#*,}\n\n        adjacent_coordinates=\"\"\n\n        if [ $x -gt $x_min ]; then\n            adjacent_coordinates=\"$adjacent_coordinates $((x - 1)),$y\"\n        fi\n\n        if [ $x -lt $x_max ]; then\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpieh2xdwl.sh: line 78: syntax error near unexpected token `}'\\n/tmp/tmpieh2xdwl.sh: line 78: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  echo \"$1\" | sed -e 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coords=()\n    local -a coord\n    local -a coord_list=()\n    local -a adjacent_coords=()\n    local -a adjacent_coord\n    local -a adjacent_coord_list=()\n    local -a adjacent_coord_list_list=()\n    local -a adjacent_coord_list_list_list=()\n    local -a adjacent_coord_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list=()\n    local -a adjacent_coord_list_list_list_list_list_list_list_list_list_list_list_list_list_list\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coords\n    local -a coord\n    local -a x\n    local -a y\n    local -a z\n    local -a xyz\n    local -a xyz_coords\n    local -a xyz_coord\n    local -a xyz_coords_sorted\n    local -a xyz_coords_sorted_uniq\n    local -a xyz_coords_sorted_uniq_coords\n    local -a xyz_coords_sorted_uniq_coord\n    local -a xyz_coords_sorted_uniq_coord_coords\n    local -a xyz_coords_sorted_uniq_coord_coord\n    local -a xyz_coords_sorted_uniq_coord_coord_coords\n    local -a xyz_coords_sorted_uniq_coord_coord_coord\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coords\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord_coords\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord_coord\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord_coord_coords\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord_coord_coord\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord_coord_coord_coords\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord_coord_coord_coord\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord_coord_coord_coord_coords\n    local -a xyz_coords_sorted_uniq_coord_coord_coord_coord_coord_coord_coord_coord\n    local -a xyz_coords_sorted_uniq_coord\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local -a coords\n  local -a x\n  local -a y\n  local -a z\n  local -a x_adj\n  local -a y_adj\n  local -a z_adj\n  local -a x_adj_coords\n  local -a y_adj_coords\n  local -a z_adj_coords\n  local -a adj_coords\n  local -a adj_coords_sorted\n  local -a adj_coords_sorted_unique\n  local -a adj_coords_sorted_unique_str\n  local -a adj_coords_sorted_unique_str_sorted\n  local -a adj_coords_sorted_unique_str_sorted_unique\n  local -a adj_coords_sorted_unique_str_sorted_unique_str\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted_unique\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted_unique_str\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted_unique\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted_unique_str\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted_unique\n  local -a adj_coords_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted_unique_str_sorted_unique_str\n\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coords=\"$1\"\n  local x y\n  for coord in $coords; do\n    x=$(echo $coord | cut -d, -f1)\n    y=$(echo $coord | cut -d, -f2)\n    echo \"$((x-1)),$y $x,$((y-1)) $x,$((y+1)) $((x+1)),$y\"\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coords\n    local -a adjacent_coords\n    local -a adjacent_coords_list\n    local -a adjacent_coords_list_sorted\n    local -a adjacent_coords_list_sorted_uniq\n    local -a adjacent_coords_list_sorted_uniq_joined\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq\n    local -a adjacent_coords_list_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted_uniq_joined_sorted\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo \"$1\" | tr ' ' '\\n' | sed 's/^/\\[/; s/$/\\]/' | tr '\\n' ' '\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=${coordinate%%,*}\n    y=${coordinate##*,}\n    echo $((x-1)),$((y-1))\n    echo $((x-1)),$y\n    echo $((x-1)),$((y+1))\n    echo $x,$((y-1))\n    echo $x,$((y+1))\n    echo $((x+1)),$((y-1))\n    echo $((x+1)),$y\n    echo $((x+1)),$((y+1))\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates=()\n    local -a coordinates_temp=()\n    local -a coordinates_temp2=()\n    local -a coordinates_temp3=()\n    local -a coordinates_temp4=()\n    local -a coordinates_temp5=()\n    local -a coordinates_temp6=()\n    local -a coordinates_temp7=()\n    local -a coordinates_temp8=()\n    local -a coordinates_temp9=()\n    local -a coordinates_temp10=()\n    local -a coordinates_temp11=()\n    local -a coordinates_temp12=()\n    local -a coordinates_temp13=()\n    local -a coordinates_temp14=()\n    local -a coordinates_temp15=()\n    local -a coordinates_temp16=()\n    local -a coordinates_temp17=()\n    local -a coordinates_temp18=()\n    local -a coordinates_temp19=()\n    local -a coordinates_temp20=()\n    local -a coordinates_temp21=()\n    local -a coordinates_temp22=()\n    local -a coordinates_temp23=()\n    local -a coordinates_temp24=()\n    local -a coordinates_temp25=()\n    local -a coordinates_temp26=()\n    local -a coordinates_temp27=()\n    local -a coordinates_temp28=()\n    local -a coordinates_temp29=()\n    local -a coordinates_temp30=()\n    local -a coordinates_temp31=()\n    local -a coordinates_temp32=()\n    local -a coordinates_temp33=()\n    local -a coordinates_temp34=()\n    local -a coordinates_temp35=()\n    local -a coordinates_temp36=()\n    local -a coordinates_temp37=()\n    local -a coordinates_temp38=()\n    local -a coordinates_temp39=()\n    local -a coordinates_temp40=()\n    local -a coordinates_temp41=()\n    local -a coordinates_temp42=()\n    local -a coordinates_temp43=()\n    local -a coordinates_temp44=()\n    local -a coordinates_temp45=()\n    local -a coordinates_temp46=\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo \"$1\" | sed -e 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    local -a x_array y_array\n    local -a result_array\n    local -i i\n    local -i result_array_index=0\n    local -i coordinates_length=0\n\n    # Split the coordinates into x and y arrays\n    IFS=\" \" read -r -a x_array <<< \"${coordinates}\"\n    for i in \"${!x_array[@]}\"; do\n        IFS=\",\" read -r x y <<< \"${x_array[$i]}\"\n        x_array[$i]=$x\n        y_array[$i]=$y\n    done\n\n    # Get the length of the coordinates\n    coordinates_length=${#x_array[@]}\n\n    # Get the adjacent coordinates\n    for ((i=0; i<coordinates_length; i++)); do\n        x=${x_array[$i]}\n        y=${y_array[$i]}\n        result_array[$result_array_index]=\"$((x-1)),$((y-1))\"\n        result_array_index=$((result_array_index+1))\n        result_array[$result_array_index]=\"$((x-1)),$y\"\n        result_array_index=$((result_array_index+1))\n        result_array[$result_array_index]=\"$((x-1)),$((y+1))\"\n        result_array_index=$((result_array_index+1))\n        result_array[$result_array_index]=\"$x,$((y-1))\"\n        result_array_index=$((result_array_index+1))\n        result_array[$result_array_index]=\"$x,$((y+1))\"\n        result_array_index=$((result_array_index+1))\n        result_array[$result_array_index]=\"$((x+1)),$((y-1))\"\n        result_array_index=$((result_array_index+1))\n        result_array[$result_array_index]=\"$((x+1)),$y\"\n        result_array_\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpjyky3l7l.sh: line 43: syntax error near unexpected token `}'\\n/tmp/tmpjyky3l7l.sh: line 43: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x_coordinates=$(echo $coordinates | cut -d' ' -f1)\n    local y_coordinates=$(echo $coordinates | cut -d' ' -f2)\n    local x_min=$(echo $x_coordinates | tr ' ' '\\n' | sort -n | head -n1)\n    local x_max=$(echo $x_coordinates | tr ' ' '\\n' | sort -n | tail -n1)\n    local y_min=$(echo $y_coordinates | tr ' ' '\\n' | sort -n | head -n1)\n    local y_max=$(echo $y_coordinates | tr ' ' '\\n' | sort -n | tail -n1)\n    local adjacent_coordinates=\"\"\n    for ((x=$x_min-1; x<=$x_max+1; x++)); do\n        for ((y=$y_min-1; y<=$y_max+1; y++)); do\n            adjacent_coordinates=\"$adjacent_coordinates $x $y\"\n        done\n    done\n    echo $adjacent_coordinates\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a x_coordinates\n    local -a y_coordinates\n    local -a x_coordinates_adjacent\n    local -a y_coordinates_adjacent\n    local -a coordinates_adjacent\n    local -a coordinates_adjacent_sorted\n    local -a coordinates_adjacent_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_filtered\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered_sorted_unique_filtered\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local input=\"$1\"\n    local output=\"\"\n    local x=\"\"\n    local y=\"\"\n    local x_min=\"\"\n    local x_max=\"\"\n    local y_min=\"\"\n    local y_max=\"\"\n\n    for coord in $input; do\n        x=${coord%%,*}\n        y=${coord##*,}\n        if [ -z \"$x_min\" ] || [ \"$x\" -lt \"$x_min\" ]; then\n            x_min=\"$x\"\n        fi\n        if [ -z \"$x_max\" ] || [ \"$x\" -gt \"$x_max\" ]; then\n            x_max=\"$x\"\n        fi\n        if [ -z \"$y_min\" ] || [ \"$y\" -lt \"$y_min\" ]; then\n            y_min=\"$y\"\n        fi\n        if [ -z \"$y_max\" ] || [ \"$y\" -gt \"$y_max\" ]; then\n            y_max=\"$y\"\n        fi\n    done\n\n    for x in $(seq $x_min $x_max); do\n        for y in $(seq $y_min $y_max); do\n            if [ \"$x\" -eq \"$x_min\" ] || [ \"$x\" -eq \"$x_max\" ] || [ \"$y\" -eq \"$y_min\" ] || [ \"$y\" -eq \"$y_max\" ]; then\n                output=\"$output $x,$y\"\n            fi\n        done\n    done\n\n    echo \"$output\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x=0\n    local y=0\n    local result=\"\"\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        result=\"$result $((x-1)),$y $((x+1)),$y $x,$((y-1)) $x,$((y+1))\"\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=$(echo $coordinate | cut -d, -f1)\n    y=$(echo $coordinate | cut -d, -f2)\n    echo \"$((x-1)),$((y-1))\"\n    echo \"$((x-1)),$y\"\n    echo \"$((x-1)),$((y+1))\"\n    echo \"$x,$((y-1))\"\n    echo \"$x,$((y+1))\"\n    echo \"$((x+1)),$((y-1))\"\n    echo \"$((x+1)),$y\"\n    echo \"$((x+1)),$((y+1))\"\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a coordinate\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i ab\n    local -i ac\n    local -i ad\n    local -i ae\n    local -i af\n    local -i ag\n    local -i ah\n    local -i ai\n    local -i aj\n    local -i ak\n    local -i al\n    local -i am\n    local -i an\n    local -i ao\n    local -i ap\n    local -i aq\n    local -i ar\n    local -i as\n    local -i at\n    local -i au\n    local -i av\n    local -i aw\n    local -i ax\n    local -i ay\n    local -i az\n    local -i ba\n    local -i bb\n    local -i bc\n    local -i bd\n    local -i be\n    local -i bf\n    local -i bg\n    local -i bh\n    local -i bi\n    local -i bj\n    local -i bk\n    local -i bl\n\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=\"${coordinate:1:1}\"\n        y=\"${coordinate:3:1}\"\n        echo \"$x $y\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  echo \"$1\" | tr ' ' '\\n' | sed -e 's/\\(.\\),\\(.\\)/\\1 \\2/'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo $1 | sed -e 's/[^0-9]/ /g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x_coordinates=$(echo $coordinates | cut -d' ' -f1)\n  local y_coordinates=$(echo $coordinates | cut -d' ' -f2)\n\n  local x_min=$(echo $x_coordinates | tr ' ' '\\n' | sort -n | head -n1)\n  local x_max=$(echo $x_coordinates | tr ' ' '\\n' | sort -n | tail -n1)\n  local y_min=$(echo $y_coordinates | tr ' ' '\\n' | sort -n | head -n1)\n  local y_max=$(echo $y_coordinates | tr ' ' '\\n' | sort -n | tail -n1)\n\n  local adjacent_coordinates=''\n  for x in $(seq $x_min $x_max); do\n    for y in $(seq $y_min $y_max); do\n      adjacent_coordinates=\"$adjacent_coordinates $x $y\"\n    done\n  done\n\n  echo $adjacent_coordinates\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=${coordinate:0:1}\n    y=${coordinate:1:1}\n    echo \"$x$((y-1)) $x$((y+1)) $((x-1))$y $((x+1))$y\"\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a coordinates_adjacent\n    local -a coordinates_adjacent_unique\n\n    # Extract coordinates\n    IFS=' ' read -r -a coordinates <<< \"$1\"\n\n    # Extract adjacent coordinates\n    for coordinate in \"${coordinates[@]}\"; do\n        coordinates_adjacent+=($(get_adjacent_coordinates \"$coordinate\"))\n    done\n\n    # Remove duplicates\n    coordinates_adjacent_unique=($(printf \"%s\\n\" \"${coordinates_adjacent[@]}\" | sort -u))\n\n    # Return\n    printf \"%s\\n\" \"${coordinates_adjacent_unique[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpcvd_6605.sh: line 15: get_adjacent_coordinates: command not found\\n/tmp/tmpcvd_6605.sh: line 15: get_adjacent_coordinates: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=${coordinate%%,*}\n    y=${coordinate##*,}\n    echo $((x - 1)),$((y - 1))\n    echo $((x - 1)),$y\n    echo $((x - 1)),$((y + 1))\n    echo $x,$((y - 1))\n    echo $x,$((y + 1))\n    echo $((x + 1)),$((y - 1))\n    echo $((x + 1)),$y\n    echo $((x + 1)),$((y + 1))\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $(($x - 1)),$y $(($x + 1)),$y $x,$(($y - 1)) $x,$(($y + 1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo \"$1\" | sed 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x\n    local y\n    local x_coordinates\n    local y_coordinates\n    local x_coordinate\n    local y_coordinate\n    local adjacent_coordinates\n\n    x_coordinates=$(echo $coordinates | tr ' ' '\\n' | cut -d ',' -f 1 | sort -u)\n    y_coordinates=$(echo $coordinates | tr ' ' '\\n' | cut -d ',' -f 2 | sort -u)\n\n    for x_coordinate in $x_coordinates; do\n        for y_coordinate in $y_coordinates; do\n            x=$(echo $x_coordinate | cut -d '-' -f 2)\n            y=$(echo $y_coordinate | cut -d '-' -f 2)\n            adjacent_coordinates=\"$adjacent_coordinates $x_coordinate,$(($y - 1)) $x_coordinate,$(($y + 1)) $(($x - 1)),$y $(($x + 1)),$y\"\n        done\n    done\n\n    echo $adjacent_coordinates | tr ' ' '\\n' | sort -u\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo $1 | sed -e 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coords\n    local coord\n    local -a xs\n    local -a ys\n    local -a zs\n    local x\n    local y\n    local z\n    local i\n    local j\n    local k\n    local -a result\n\n    # Split the list into an array\n    IFS=' ' read -a coords <<< \"$1\"\n\n    # Split the coordinates into their components\n    for coord in \"${coords[@]}\"; do\n        IFS=',' read -a xs <<< \"$coord\"\n        xs[0]=${xs[0]#<}\n        xs[2]=${xs[2]%>}\n        x=${xs[0]}\n        y=${xs[1]}\n        z=${xs[2]}\n        xs[0]=$x\n        xs[1]=$y\n        xs[2]=$z\n        xs[3]=$coord\n        xs[4]=0\n        xs[5]=0\n        xs[6]=0\n        xs[7]=0\n        xs[8]=0\n        xs[9]=0\n        xs[10]=0\n        xs[11]=0\n        xs[12]=0\n        xs[13]=0\n        xs[14]=0\n        xs[15]=0\n        xs[16]=0\n        xs[17]=0\n        xs[18]=0\n        xs[19]=0\n        xs[20]=0\n        xs[21]=0\n        xs[22]=0\n        xs[23]=0\n        xs[24]=0\n        xs[25]=0\n        xs[26]=0\n        xs[27]=0\n        xs[28]=0\n        xs[29]=0\n        xs[30]=0\n        xs[31]=0\n        xs[32]=0\n        xs[33]=0\n        xs[34]=0\n        xs[35]=0\n        xs[36]=0\n        xs[37]=0\n        xs[38]=0\n        xs[39]=0\n        xs[\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9s3l6rsi.sh: line 70: unexpected EOF while looking for matching `]'\\n/tmp/tmp9s3l6rsi.sh: line 85: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=${coordinate%%,*}\n    y=${coordinate##*,}\n    echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$y $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x_coordinates=$(echo $coordinates | cut -d' ' -f1)\n    local y_coordinates=$(echo $coordinates | cut -d' ' -f2)\n    local x_coordinates_array=($x_coordinates)\n    local y_coordinates_array=($y_coordinates)\n    local adjacent_coordinates=\"\"\n    local x_coordinate\n    local y_coordinate\n    local adjacent_x_coordinate\n    local adjacent_y_coordinate\n    for ((i=0; i<${#x_coordinates_array[@]}; i++)); do\n        x_coordinate=${x_coordinates_array[$i]}\n        y_coordinate=${y_coordinates_array[$i]}\n        for ((j=0; j<${#x_coordinates_array[@]}; j++)); do\n            adjacent_x_coordinate=${x_coordinates_array[$j]}\n            adjacent_y_coordinate=${y_coordinates_array[$j]}\n            if [[ $x_coordinate -eq $((adjacent_x_coordinate - 1)) && $y_coordinate -eq $adjacent_y_coordinate ]]; then\n                adjacent_coordinates=\"$adjacent_coordinates $adjacent_x_coordinate $adjacent_y_coordinate\"\n            elif [[ $x_coordinate -eq $((adjacent_x_coordinate + 1)) && $y_coordinate -eq $adjacent_y_coordinate ]]; then\n                adjacent_coordinates=\"$adjacent_coordinates $adjacent_x_coordinate $adjacent_y_coordinate\"\n            elif [[ $x_coordinate -eq $adjacent_x_coordinate && $y_coordinate -eq $((adjacent_y_coordinate - 1)) ]]; then\n                adjacent_coordinates=\"$adjacent_coordinates $adjacent_x_coordinate $adjacent_y_coordinate\"\n            elif [[ $x_coordinate -eq $adjacent_x_coordinate && $y_coordinate -eq $((adjacent_y_coordinate + 1)) ]];\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp3bixq0tf.sh: line 29: syntax error near unexpected token `}'\\n/tmp/tmp3bixq0tf.sh: line 29: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo \"$1\" | sed -e 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local coordinate\n  for coordinate in $coordinates; do\n    local x=${coordinate%%,*}\n    local y=${coordinate##*,}\n    local x_left=$((x - 1))\n    local x_right=$((x + 1))\n    local y_up=$((y - 1))\n    local y_down=$((y + 1))\n    echo \"$x_left,$y_up $x_left,$y $x_left,$y_down $x,$y_up $x,$y_down $x_right,$y_up $x_right,$y $x_right,$y_down\"\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=$1\n    local x y\n    for coord in $coords; do\n        x=${coord%%,*}\n        y=${coord##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        for i in $(seq -1 1); do\n            for j in $(seq -1 1); do\n                echo \"$((x + i)),$((y + j))\"\n            done\n        done\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$x,$y\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x+1)),$y\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo \"$1\" | sed -e 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=\"${coordinate%%,*}\"\n        y=\"${coordinate##*,}\"\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local list=\"$1\"\n    local x y\n    for coord in $list; do\n        x=${coord%%,*}\n        y=${coord##*,}\n        ((x--))\n        echo \"$x,$y\"\n        ((x+=2))\n        echo \"$x,$y\"\n        ((x--))\n        ((y--))\n        echo \"$x,$y\"\n        ((y+=2))\n        echo \"$x,$y\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x=$(echo $coordinates | cut -d' ' -f1)\n  local y=$(echo $coordinates | cut -d' ' -f2)\n\n  echo \"$((x-1)) $((y-1))\"\n  echo \"$((x-1)) $y\"\n  echo \"$((x-1)) $((y+1))\"\n  echo \"$x $((y-1))\"\n  echo \"$x $((y+1))\"\n  echo \"$((x+1)) $((y-1))\"\n  echo \"$((x+1)) $y\"\n  echo \"$((x+1)) $((y+1))\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=$(echo $coordinate | cut -d, -f1)\n    y=$(echo $coordinate | cut -d, -f2)\n    echo $((x-1)),$((y-1))\n    echo $((x-1)),$y\n    echo $((x-1)),$((y+1))\n    echo $x,$((y-1))\n    echo $x,$((y+1))\n    echo $((x+1)),$((y-1))\n    echo $((x+1)),$y\n    echo $((x+1)),$((y+1))\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=\"$1\"\n    local x y\n    for coord in $coords; do\n        x=${coord%%,*}\n        y=${coord##*,}\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x=0\n    local y=0\n    local result=\"\"\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        result=\"$result $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\"\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=$1\n    local x=0\n    local y=0\n    local result=\"\"\n    for coord in $coords; do\n        if [ $x -eq 0 ]; then\n            x=$coord\n        else\n            y=$coord\n            result=\"$result $((x-1)) $y $((x+1)) $y $x $((y-1)) $x $((y+1))\"\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x\n    local y\n    local x_coordinates\n    local y_coordinates\n    local result\n\n    x_coordinates=$(echo \"$coordinates\" | cut -d ' ' -f 1)\n    y_coordinates=$(echo \"$coordinates\" | cut -d ' ' -f 2)\n\n    for x in $x_coordinates; do\n        for y in $y_coordinates; do\n            result+=\"$x $y \"\n        done\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=\"$1\"\n    local x y\n    for coord in $coords; do\n        x=$(echo $coord | cut -d, -f1)\n        y=$(echo $coord | cut -d, -f2)\n        echo $((x-1)),$y $((x+1)),$y $x,$((y-1)) $x,$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo \"$1\" | tr ' ' '\\n' | sed -e 's/^/\\[/' -e 's/$/\\]/' | tr '\\n' ',' | sed -e 's/,$//'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo \"$coordinate\" | cut -d, -f1)\n        y=$(echo \"$coordinate\" | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo \"$coordinate\" | cut -d, -f1)\n        y=$(echo \"$coordinate\" | cut -d, -f2)\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x+1)),$y\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  local -a xs ys\n  local -a x_adjacent y_adjacent\n  local -a adjacent\n  local -a result\n\n  # Split the coordinates into xs and ys\n  IFS=' ' read -ra xs <<< \"${coordinates%% *}\"\n  IFS=' ' read -ra ys <<< \"${coordinates##* }\"\n\n  for ((i=0; i<${#xs[@]}; i++)); do\n    x=${xs[$i]}\n    y=${ys[$i]}\n\n    # Get all the adjacent coordinates of the current coordinate\n    x_adjacent=($(get_adjacent_coordinates \"$x\"))\n    y_adjacent=($(get_adjacent_coordinates \"$y\"))\n\n    # Combine the adjacent coordinates\n    for ((j=0; j<${#x_adjacent[@]}; j++)); do\n      adjacent+=(\"${x_adjacent[$j]} ${y_adjacent[$j]}\")\n    done\n  done\n\n  # Remove duplicates\n  result=($(printf '%s\\n' \"${adjacent[@]}\" | sort -u))\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpsk332khb.sh: line 22: get_adjacent_coordinates: command not found\\n/tmp/tmpsk332khb.sh: line 23: get_adjacent_coordinates: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local -a coordinates\n  local -a coordinate\n  local -a adjacent\n  local -a result\n  local -a tmp\n  local -a tmp2\n  local -a tmp3\n  local -a tmp4\n  local -a tmp5\n  local -a tmp6\n  local -a tmp7\n  local -a tmp8\n  local -a tmp9\n  local -a tmp10\n  local -a tmp11\n  local -a tmp12\n  local -a tmp13\n  local -a tmp14\n  local -a tmp15\n  local -a tmp16\n  local -a tmp17\n  local -a tmp18\n  local -a tmp19\n  local -a tmp20\n  local -a tmp21\n  local -a tmp22\n  local -a tmp23\n  local -a tmp24\n  local -a tmp25\n  local -a tmp26\n  local -a tmp27\n  local -a tmp28\n  local -a tmp29\n  local -a tmp30\n  local -a tmp31\n  local -a tmp32\n  local -a tmp33\n  local -a tmp34\n  local -a tmp35\n  local -a tmp36\n  local -a tmp37\n  local -a tmp38\n  local -a tmp39\n  local -a tmp40\n  local -a tmp41\n  local -a tmp42\n  local -a tmp43\n  local -a tmp44\n  local -a tmp45\n  local -a tmp46\n  local -a tmp47\n  local -a tmp48\n  local -a tmp49\n  local -a tmp50\n  local -a tmp51\n  local -a tmp52\n  local -a tmp53\n  local -a tmp54\n  local -a tmp55\n  local -a tmp56\n  local -a tmp57\n  local -a tmp58\n  local -a tmp59\n  local -a tmp60\n  local -a tmp61\n  local -a tmp62\n  local -a tmp63\n  local -a tmp64\n  local -a tmp65\n  local -a tmp66\n  local -a tmp67\n  local -a tmp68\n  local -a tmp69\n  local -a tmp\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local COORDINATES=\"$1\"\n  local COORDINATE\n  local COORDINATE_X\n  local COORDINATE_Y\n  local ADJACENT_COORDINATES\n  local ADJACENT_COORDINATE\n  local ADJACENT_COORDINATE_X\n  local ADJACENT_COORDINATE_Y\n  local ADJACENT_COORDINATE_X_MINUS_1\n  local ADJACENT_COORDINATE_X_PLUS_1\n  local ADJACENT_COORDINATE_Y_MINUS_1\n  local ADJACENT_COORDINATE_Y_PLUS_1\n\n  for COORDINATE in $COORDINATES; do\n    COORDINATE_X=$(echo \"$COORDINATE\" | cut -d ',' -f 1)\n    COORDINATE_Y=$(echo \"$COORDINATE\" | cut -d ',' -f 2)\n\n    ADJACENT_COORDINATE_X_MINUS_1=$((COORDINATE_X - 1))\n    ADJACENT_COORDINATE_X_PLUS_1=$((COORDINATE_X + 1))\n    ADJACENT_COORDINATE_Y_MINUS_1=$((COORDINATE_Y - 1))\n    ADJACENT_COORDINATE_Y_PLUS_1=$((COORDINATE_Y + 1))\n\n    ADJACENT_COORDINATES=\"$ADJACENT_COORDINATES $ADJACENT_COORDINATE_X_MINUS_1,$ADJACENT_COORDINATE_Y_MINUS_1\"\n    ADJACENT_COORDINATES=\"$ADJACENT_COORDINATES $ADJACENT_COORDINATE_X_MINUS_1,$ADJACENT_COORDINATE_Y\"\n    ADJACENT_COORDINATES=\"$ADJACENT_COORDINATES $ADJACENT_COORDINATE_X_MINUS_1,$ADJACENT_COORDINATE_Y\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp48weqz80.sh: line 41: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmp48weqz80.sh: line 45: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x\n  local y\n  local x_min\n  local x_max\n  local y_min\n  local y_max\n  local x_coordinates\n  local y_coordinates\n  local adjacent_coordinates\n  local adjacent_coordinate\n  local adjacent_coordinate_x\n  local adjacent_coordinate_y\n  local adjacent_coordinate_x_min\n  local adjacent_coordinate_x_max\n  local adjacent_coordinate_y_min\n  local adjacent_coordinate_y_max\n  local adjacent_coordinate_x_coordinates\n  local adjacent_coordinate_y_coordinates\n  local adjacent_coordinate_x_coordinate\n  local adjacent_coordinate_y_coordinate\n  local adjacent_coordinate_x_coordinate_min\n  local adjacent_coordinate_x_coordinate_max\n  local adjacent_coordinate_y_coordinate_min\n  local adjacent_coordinate_y_coordinate_max\n  local adjacent_coordinate_x_coordinate_min_max\n  local adjacent_coordinate_y_coordinate_min_max\n  local adjacent_coordinate_x_coordinate_min_max_coordinates\n  local adjacent_coordinate_y_coordinate_min_max_coordinates\n  local adjacent_coordinate_x_coordinate_min_max_coordinate\n  local adjacent_coordinate_y_coordinate_min_max_coordinate\n  local adjacent_coordinate_x_coordinate_min_max_coordinate_x\n  local adjacent_coordinate_y_coordinate_min_max_coordinate_y\n  local adjacent_coordinate_x_coordinate_min_max_coordinate_x_min\n  local adjacent_coordinate_x_coordinate_min_max_coordinate_x_max\n  local adjacent_coordinate_y_coordinate_min_max_coordinate_y_min\n  local adjacent_coordinate_y_coordinate_min_max_coordinate_y_max\n  local adjacent_coordinate_x_coordinate_min_max_coordinate_x_coordinates\n  local adjacent_coordinate_y_coordinate_min\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=$(echo $coordinate | cut -d, -f1)\n    y=$(echo $coordinate | cut -d, -f2)\n    echo $((x-1)),$((y-1))\n    echo $((x-1)),$y\n    echo $((x-1)),$((y+1))\n    echo $x,$((y-1))\n    echo $x,$((y+1))\n    echo $((x+1)),$((y-1))\n    echo $((x+1)),$y\n    echo $((x+1)),$((y+1))\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    local -a xs ys\n    local -a result\n\n    while read -r x y; do\n        xs+=(\"$x\")\n        ys+=(\"$y\")\n    done < <(echo \"$coordinates\" | tr ' ' '\\n')\n\n    for ((i = 0; i < ${#xs[@]}; i++)); do\n        x=\"${xs[i]}\"\n        y=\"${ys[i]}\"\n\n        result+=(\"$((x - 1)) $y\")\n        result+=(\"$((x + 1)) $y\")\n        result+=(\"$x $((y - 1))\")\n        result+=(\"$x $((y + 1))\")\n    done\n\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -u\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a coordinates_list\n    local -a coordinates_list_adjacent\n    local -a coordinates_list_adjacent_unique\n    local -a coordinates_list_adjacent_unique_sorted\n    local -a coordinates_list_adjacent_unique_sorted_string\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string_adjacent_unique_sorted_string\n    local -a coordinates_list_adjacent_unique_sorted_string_adjacent_unique_sorted\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local -a coordinates\n  local -a adjacent_coordinates\n  local coordinate\n  local x\n  local y\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\n  coordinates=($1)\n\n  for ((i=0; i<${#coordinates[@]}; i++)); do\n    coordinate=${coordinates[$i]}\n    x=${coordinate%%,*}\n    y=${coordinate##*,}\n\n    for ((j=-1; j<=1; j++)); do\n      for ((k=-1; k<=1; k++)); do\n        if [[ $j -eq 0 && $k -eq 0 ]]; then\n          continue\n        fi\n\n        adjacent_coordinates+=($((x+j))\",\"$((y+k)))\n      done\n    done\n  done\n\n  # Remove duplicates\n  for ((l=0; l<${#adjacent_coordinates[@]}; l++)); do\n    for ((m=$l+1; m<${#adjacent_coordinates[@]}; m++)); do\n      if [[ ${adjacent_coordinates[$l]} == ${adjacent_coordinates[$m]} ]]; then\n        unset adjacent_coordinates[$m]\n      fi\n    done\n  done\n\n  # Remove coordinates that are already in the list\n  for ((n=0; n<${#adjacent_coordinates[@]}; n++)); do\n    for ((o=0; o<${#coordinates[@]}; o++)); do\n      if [[ ${adjacent_coordinates[$n]} == ${coordinates[$o]} ]]; then\n        unset adjacent_coordinates[$n]\n        break\n      fi\n    done\n  done\n\n  echo \"${adjacent_coordinates[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    local -a x_array y_array\n    local -a result\n    local i\n\n    # Split the coordinates into x and y arrays\n    IFS=' ' read -r -a x_array <<< \"${coordinates%% *}\"\n    IFS=' ' read -r -a y_array <<< \"${coordinates##* }\"\n\n    # Iterate over the x and y arrays, and add the adjacent coordinates to the result array\n    for ((i=0; i<${#x_array[@]}; i++)); do\n        x=${x_array[$i]}\n        y=${y_array[$i]}\n        result+=(\"$((x-1)) $y\")\n        result+=(\"$((x+1)) $y\")\n        result+=(\"$x $((y-1))\")\n        result+=(\"$x $((y+1))\")\n    done\n\n    # Remove duplicates\n    printf '%s\\n' \"${result[@]}\" | sort -u\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo \"$1\" | sed -e 's/^\\([0-9]*\\) \\([0-9]*\\)$/\\1\\2/' -e 's/^\\([0-9]*\\) \\([0-9]*\\) \\([0-9]*\\) \\([0-9]*\\)$/\\1\\2 \\1\\4 \\3\\2 \\3\\4/'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a x_coordinates\n    local -a y_coordinates\n    local -a z_coordinates\n    local -a x_coordinates_sorted\n    local -a y_coordinates_sorted\n    local -a z_coordinates_sorted\n    local -a x_coordinates_adjacent\n    local -a y_coordinates_adjacent\n    local -a z_coordinates_adjacent\n    local -a adjacent_coordinates\n    local -a adjacent_coordinates_sorted\n    local -a adjacent_coordinates_sorted_unique\n    local -a adjacent_coordinates_sorted_unique_sorted\n    local -a adjacent_coordinates_sorted_unique_sorted_unique\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique_sorted\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique_sorted_unique\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\n    local -a adjacent_coordinates_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique\n    local -a adjacent\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo $1 | sed 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a x_coordinates\n    local -a y_coordinates\n    local -a z_coordinates\n    local -a x_coordinates_adjacent\n    local -a y_coordinates_adjacent\n    local -a z_coordinates_adjacent\n    local -a coordinates_adjacent\n    local -a coordinates_adjacent_sorted\n    local -a coordinates_adjacent_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_sorted\n    local -a coordinates_adjacent_sorted_unique_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique\n    local -a coordinates_adjacent_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted_unique_sorted\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$y $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=\"${coordinate:0:1}\"\n        y=\"${coordinate:1}\"\n        echo \"$((x-1))$y $((x+1))$y $x$((y-1)) $x$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates=()\n    local -a temp_coordinates=()\n    local -a temp_coordinates_2=()\n    local -a temp_coordinates_3=()\n    local -a temp_coordinates_4=()\n    local -a temp_coordinates_5=()\n    local -a temp_coordinates_6=()\n    local -a temp_coordinates_7=()\n    local -a temp_coordinates_8=()\n    local -a temp_coordinates_9=()\n    local -a temp_coordinates_10=()\n    local -a temp_coordinates_11=()\n    local -a temp_coordinates_12=()\n    local -a temp_coordinates_13=()\n    local -a temp_coordinates_14=()\n    local -a temp_coordinates_15=()\n    local -a temp_coordinates_16=()\n    local -a temp_coordinates_17=()\n    local -a temp_coordinates_18=()\n    local -a temp_coordinates_19=()\n    local -a temp_coordinates_20=()\n    local -a temp_coordinates_21=()\n    local -a temp_coordinates_22=()\n    local -a temp_coordinates_23=()\n    local -a temp_coordinates_24=()\n    local -a temp_coordinates_25=()\n    local -a temp_coordinates_26=()\n    local -a temp_coordinates_27=()\n    local -a temp_coordinates_28=()\n    local -a temp_coordinates_29=()\n    local -a temp_coordinates_30=()\n    local -a temp_coordinates_31=()\n    local -a temp_coordinates_32=()\n    local -a temp_coordinates_33=()\n    local -a temp_coordinates_34=()\n    local -a temp_coordinates_35=()\n    local -a temp_coordinates_36=()\n    local -a temp_coordinates_37=()\n    local -a temp_coordinates_38=()\n    local -a temp_coordinates_39=\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x - 1)),$((y - 1))\n        echo $((x - 1)),$y\n        echo $((x - 1)),$((y + 1))\n        echo $x,$((y - 1))\n        echo $x,$((y + 1))\n        echo $((x + 1)),$((y - 1))\n        echo $((x + 1)),$y\n        echo $((x + 1)),$((y + 1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local COORDINATES=\"$1\"\n  local COORDINATE_LIST=\"\"\n  local COORDINATE=\"\"\n  local X=\"\"\n  local Y=\"\"\n\n  for COORDINATE in $COORDINATES; do\n    X=$(echo $COORDINATE | cut -d, -f1)\n    Y=$(echo $COORDINATE | cut -d, -f2)\n\n    COORDINATE_LIST=\"$COORDINATE_LIST $X,$((Y-1)) $X,$((Y+1)) $((X-1)),$Y $((X+1)),$Y\"\n  done\n\n  echo \"$COORDINATE_LIST\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=\"${coordinate%%,*}\"\n    y=\"${coordinate##*,}\"\n    echo \"$((x - 1)),$((y - 1))\"\n    echo \"$((x - 1)),$y\"\n    echo \"$((x - 1)),$((y + 1))\"\n    echo \"$x,$((y - 1))\"\n    echo \"$x,$((y + 1))\"\n    echo \"$((x + 1)),$((y - 1))\"\n    echo \"$((x + 1)),$y\"\n    echo \"$((x + 1)),$((y + 1))\"\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x - 1)),$((y - 1))\n        echo $((x - 1)),$y\n        echo $((x - 1)),$((y + 1))\n        echo $x,$((y - 1))\n        echo $x,$((y + 1))\n        echo $((x + 1)),$((y - 1))\n        echo $((x + 1)),$y\n        echo $((x + 1)),$((y + 1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x\n  local y\n  local result\n  for coordinate in $coordinates; do\n    x=\"${coordinate%%,*}\"\n    y=\"${coordinate##*,}\"\n    result=\"$result $((x - 1)),$((y - 1)) $x,$((y - 1)) $((x + 1)),$((y - 1)) $((x - 1)),$y $x,$y $((x + 1)),$y $((x - 1)),$((y + 1)) $x,$((y + 1)) $((x + 1)),$((y + 1))\"\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local list=\"$1\"\n    local coordinates=()\n    for coordinate in $list; do\n        local x=${coordinate:1:1}\n        local y=${coordinate:3:1}\n        local x_coordinates=()\n        local y_coordinates=()\n        for ((i=0; i<3; i++)); do\n            x_coordinates+=(\"$x$i\")\n        done\n        for ((i=0; i<3; i++)); do\n            y_coordinates+=(\"$i$y\")\n        done\n        coordinates+=(\"${x_coordinates[@]}\")\n        coordinates+=(\"${y_coordinates[@]}\")\n    done\n    echo \"${coordinates[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x=0\n    local y=0\n    local result=\"\"\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        result=\"$result $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\"\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x=$(echo $coordinates | cut -d ',' -f 1)\n  local y=$(echo $coordinates | cut -d ',' -f 2)\n  local adjacent_coordinates=\"\"\n  for i in $(seq -1 1 1); do\n    for j in $(seq -1 1 1); do\n      if [ $i -eq 0 ] && [ $j -eq 0 ]; then\n        continue\n      fi\n      adjacent_coordinates=\"$adjacent_coordinates $((x+i)),$((y+j))\"\n    done\n  done\n  echo $adjacent_coordinates\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_mkroo2_.sh: line 15: 3 4: syntax error in expression (error token is \"4\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local x y\n  for coord in $1; do\n    x=${coord:0:1}\n    y=${coord:1:1}\n    echo \"$(($x-1))$y $(($x+1))$y $x$(($y-1)) $x$(($y+1))\"\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n\tlocal coordinates=\"$1\"\n\tlocal x y\n\tfor coordinate in $coordinates; do\n\t\tx=${coordinate%%,*}\n\t\ty=${coordinate##*,}\n\t\techo \"$((x-1)),$((y-1))\"\n\t\techo \"$((x-1)),$y\"\n\t\techo \"$((x-1)),$((y+1))\"\n\t\techo \"$x,$((y-1))\"\n\t\techo \"$x,$((y+1))\"\n\t\techo \"$((x+1)),$((y-1))\"\n\t\techo \"$((x+1)),$y\"\n\t\techo \"$((x+1)),$((y+1))\"\n\tdone\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coords=$1\n  local x y\n  for coord in $coords; do\n    x=${coord%%,*}\n    y=${coord##*,}\n    echo \"$((x-1)),$((y-1))\"\n    echo \"$((x-1)),$y\"\n    echo \"$((x-1)),$((y+1))\"\n    echo \"$x,$((y-1))\"\n    echo \"$x,$((y+1))\"\n    echo \"$((x+1)),$((y-1))\"\n    echo \"$((x+1)),$y\"\n    echo \"$((x+1)),$((y+1))\"\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x-1)),$((y-1))\n        echo $((x-1)),$y\n        echo $((x-1)),$((y+1))\n        echo $x,$((y-1))\n        echo $x,$((y+1))\n        echo $((x+1)),$((y-1))\n        echo $((x+1)),$y\n        echo $((x+1)),$((y+1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local list=$1\n    local coordinates=()\n    for coordinate in $list; do\n        local x=${coordinate:0:1}\n        local y=${coordinate:1:1}\n        local x1=$((x-1))\n        local x2=$((x+1))\n        local y1=$((y-1))\n        local y2=$((y+1))\n        coordinates+=($x1$y $x1$y1 $x1$y2 $x$y1 $x$y2 $x2$y $x2$y1 $x2$y2)\n    done\n    echo \"${coordinates[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    local -a xs ys\n    local -a result\n    local i\n\n    while read x y; do\n        xs[${#xs[@]}]=$x\n        ys[${#ys[@]}]=$y\n    done <<< \"$coordinates\"\n\n    for ((i=0; i<${#xs[@]}; i++)); do\n        x=${xs[$i]}\n        y=${ys[$i]}\n\n        result[${#result[@]}]=\"$((x-1)) $y\"\n        result[${#result[@]}]=\"$((x+1)) $y\"\n        result[${#result[@]}]=\"$x $((y-1))\"\n        result[${#result[@]}]=\"$x $((y+1))\"\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo \"$1\" | tr ' ' '\\n' | sed 's/^/\\[/;s/$/\\]/' | tr '\\n' ' '\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coords=\"$1\"\n    local x y\n    for coord in $coords; do\n        x=$(echo $coord | cut -d, -f1)\n        y=$(echo $coord | cut -d, -f2)\n        echo \"$x,$((y-1)) $x,$((y+1)) $((x-1)),$y $((x+1)),$y\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates=($1)\n    local -a adjacent_coordinates=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local x y\n  for coordinate in $coordinates; do\n    x=\"${coordinate%%,*}\"\n    y=\"${coordinate##*,}\"\n    for i in $(seq -1 1 1); do\n      for j in $(seq -1 1 1); do\n        if [[ $i -eq 0 && $j -eq 0 ]]; then\n          continue\n        fi\n        echo \"$((x + i)),$((y + j))\"\n      done\n    done\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local x y\n  for i in $1; do\n    x=$(echo $i | cut -d, -f1)\n    y=$(echo $i | cut -d, -f2)\n    echo $((x-1)),$y $((x+1)),$y $x,$((y-1)) $x,$((y+1))\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo $1 | sed -e 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=\"${coordinate%%,*}\"\n        y=\"${coordinate##*,}\"\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a lines\n    local -a columns\n    local line\n    local column\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n    local ab\n    local ac\n    local ad\n    local ae\n    local af\n    local ag\n    local ah\n    local ai\n    local aj\n    local ak\n    local al\n    local am\n    local an\n    local ao\n    local ap\n    local aq\n    local ar\n    local as\n    local at\n    local au\n    local av\n    local aw\n    local ax\n    local ay\n    local az\n    local ba\n    local bb\n    local bc\n    local bd\n    local be\n    local bf\n    local bg\n    local bh\n    local bi\n    local bj\n    local bk\n    local bl\n    local bm\n    local bn\n    local bo\n    local bp\n    local bq\n    local br\n    local bs\n    local bt\n    local bu\n    local bv\n    local bw\n    local bx\n    local by\n    local bz\n    local ca\n    local cb\n    local cc\n    local cd\n    local ce\n    local cf\n    local cg\n    local ch\n    local ci\n    local cj\n    local ck\n    local cl\n    local cm\n    local cn\n    local co\n    local cp\n    local cq\n    local cr\n    local cs\n    local ct\n    local cu\n    local cv\n    local cw\n    local cx\n    local cy\n    local cz\n    local da\n    local db\n    local dc\n    local dd\n    local de\n    local df\n    local dg\n    local dh\n    local di\n    local dj\n    local dk\n    local dl\n    local dm\n    local dn\n    local do\n    local d\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates=($1)\n    local -a adjacent_coordinates=()\n    for ((i=0; i<${#coordinates[@]}; i++)); do\n        local -a coordinate=(${coordinates[i]})\n        local -a adjacent_coordinate_1=($((${coordinate[0]}-1)) ${coordinate[1]})\n        local -a adjacent_coordinate_2=($((${coordinate[0]}+1)) ${coordinate[1]})\n        local -a adjacent_coordinate_3=(${coordinate[0]} $((${coordinate[1]}-1)))\n        local -a adjacent_coordinate_4=(${coordinate[0]} $((${coordinate[1]}+1)))\n        adjacent_coordinates+=(${adjacent_coordinate_1[@]})\n        adjacent_coordinates+=(${adjacent_coordinate_2[@]})\n        adjacent_coordinates+=(${adjacent_coordinate_3[@]})\n        adjacent_coordinates+=(${adjacent_coordinate_4[@]})\n    done\n    echo ${adjacent_coordinates[@]}\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x=0\n  local y=0\n  local result=\"\"\n  for coordinate in $coordinates; do\n    x=$(echo $coordinate | cut -d, -f1)\n    y=$(echo $coordinate | cut -d, -f2)\n    result=\"$result $((x-1)),$((y-1)) $((x-1)),$y $((x-1)),$((y+1)) $x,$((y-1)) $x,$((y+1)) $((x+1)),$((y-1)) $((x+1)),$y $((x+1)),$((y+1))\"\n  done\n  echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local result=\"\"\n    local x=\"\"\n    local y=\"\"\n    local i=\"\"\n    for i in $coordinates; do\n        x=$(echo $i | cut -d, -f1)\n        y=$(echo $i | cut -d, -f2)\n        result=\"$result $(($x - 1)),$y $(($x + 1)),$y $x,$(($y - 1)) $x,$(($y + 1))\"\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=\"$1\"\n  local coordinate\n  local x\n  local y\n  local x_min\n  local x_max\n  local y_min\n  local y_max\n  for coordinate in $coordinates; do\n    x=$(echo \"$coordinate\" | cut -d, -f1)\n    y=$(echo \"$coordinate\" | cut -d, -f2)\n    if [[ -z \"$x_min\" || \"$x\" -lt \"$x_min\" ]]; then\n      x_min=\"$x\"\n    fi\n    if [[ -z \"$x_max\" || \"$x\" -gt \"$x_max\" ]]; then\n      x_max=\"$x\"\n    fi\n    if [[ -z \"$y_min\" || \"$y\" -lt \"$y_min\" ]]; then\n      y_min=\"$y\"\n    fi\n    if [[ -z \"$y_max\" || \"$y\" -gt \"$y_max\" ]]; then\n      y_max=\"$y\"\n    fi\n  done\n  local x\n  local y\n  for x in $(seq \"$x_min\" \"$x_max\"); do\n    for y in $(seq \"$y_min\" \"$y_max\"); do\n      echo \"$x,$y\"\n    done\n  done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local coordinates=$1\n  local x=0\n  local y=0\n  local result=\"\"\n  for coordinate in $coordinates; do\n    x=$(echo $coordinate | cut -d, -f1)\n    y=$(echo $coordinate | cut -d, -f2)\n    result=\"$result $x,$((y-1)) $x,$((y+1)) $((x-1)),$y $((x+1)),$y\"\n  done\n  echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    echo $1 | sed 's/[^0-9 ]//g'\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates\n    local -a adjacent\n    local -a result\n    local -a tmp\n\n    IFS=' ' read -r -a coordinates <<< \"$1\"\n\n    for coordinate in \"${coordinates[@]}\"; do\n        adjacent=()\n        IFS=',' read -r -a tmp <<< \"$coordinate\"\n        adjacent+=(\"${tmp[0]},${tmp[1]}\")\n        adjacent+=(\"${tmp[0]},$((tmp[1] + 1))\")\n        adjacent+=(\"${tmp[0]},$((tmp[1] - 1))\")\n        adjacent+=(\"$((tmp[0] + 1)),${tmp[1]}\")\n        adjacent+=(\"$((tmp[0] - 1)),${tmp[1]}\")\n        result+=(\"${adjacent[@]}\")\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coords\n    local -a result\n    local -a tmp\n    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local -a tmp70\n    local -a tmp71\n    local\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=\"${coordinate%%,*}\"\n        y=\"${coordinate##*,}\"\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=$1\n    local x\n    local y\n    local result\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        result=\"$result $((x-1)),$((y-1)) $x,$((y-1)) $((x+1)),$((y-1)) $((x-1)),$y $((x+1)),$y $((x-1)),$((y+1)) $x,$((y+1)) $((x+1)),$((y+1))\"\n    done\n    echo $result\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=$(echo $coordinate | cut -d, -f1)\n        y=$(echo $coordinate | cut -d, -f2)\n        echo \"$((x-1)),$((y-1))\"\n        echo \"$((x-1)),$y\"\n        echo \"$((x-1)),$((y+1))\"\n        echo \"$x,$((y-1))\"\n        echo \"$x,$((y+1))\"\n        echo \"$((x+1)),$((y-1))\"\n        echo \"$((x+1)),$y\"\n        echo \"$((x+1)),$((y+1))\"\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191218,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local -a coordinates=()\n    local -a coords=()\n    local -a coord=()\n    local -a adjacents=()\n    local -a adjacent=()\n    local -a adjacent_coords=()\n    local -a adjacent_coord=()\n    local -a adjacent_coordinates=()\n    local -a adjacent_coordinate=()\n    local -a adjacent_coordinate_coords=()\n    local -a adjacent_coordinate_coord=()\n    local -a adjacent_coordinate_coord_coords=()\n    local -a adjacent_coordinate_coord_coord=()\n    local -a adjacent_coordinate_coord_coord_coords=()\n    local -a adjacent_coordinate_coord_coord_coord=()\n    local -a adjacent_coordinate_coord_coord_coord_coords=()\n    local -a adjacent_coordinate_coord_coord_coord_coord=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coords=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coords=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coord=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coord_coords=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coord_coord=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coord_coord_coords=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coord_coord_coord=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coord_coord_coord_coords=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coord_coord_coord_coord=()\n    local -a adjacent_coordinate_coord_coord_coord_coord_coord_coord_coord_coord_coord_coords=()\n    local -a adjacent_\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n    local coordinates=\"$1\"\n    local x y\n    for coordinate in $coordinates; do\n        x=${coordinate%%,*}\n        y=${coordinate##*,}\n        echo $((x - 1)),$((y - 1))\n        echo $((x - 1)),$y\n        echo $((x - 1)),$((y + 1))\n        echo $x,$((y - 1))\n        echo $x,$((y + 1))\n        echo $((x + 1)),$((y - 1))\n        echo $((x + 1)),$y\n        echo $((x + 1)),$((y + 1))\n    done\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate list.\n#\n# $1 is a space-separated list\nget_coordinates() {\n  local -a coords\n  local coord\n  local x\n  local y\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i aa\n  local -i bb\n  local -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n  local -i hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local -i mm\n  local -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n  local -i rr\n  local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n  local -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n  local -i bbb\n  local -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n  local -i ggg\n  local -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n  local -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n  local -i qqq\n  local -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n  local -i vvv\n  local -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n  local -i aaaa\n  local -i bbbb\n  local -i cccc\n  local -i dddd\n\n}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test",
      "timestamp": 1667191219,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}