{
  "name": "mbpp_465_drop_empty",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to drop empty items from a given CSV.\n#\n# $1 is a two column CSV in key,value order\ndrop_empty() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    drop_empty \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"c1,Red\\nc2,Green\\nc3,None\") = \"c1,Red\\nc2,Green\" ]]\n    [[ $(candidate \"c1,Red\\nc2,None\\nc3,None\") = \"c1,Red\" ]]\n    [[ $(candidate \"c1,None\\nc2,Green\\nc3,None\") = \"c2,Green\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local csv=\"$1\"\n    local key\n    local value\n    while IFS=, read -r key value; do\n        if [[ -n \"$value\" ]]; then\n            echo \"$key,$value\"\n        fi\n    done < \"$csv\"",
    "    local csv=\"$1\"\n    local key_col=\"$2\"\n    local val_col=\"$3\"\n    local out_csv=\"$4\"\n    local tmp_csv=\"$(mktemp)\"\n    local tmp_csv2=\"$(mktemp)\"\n    local tmp_csv3=\"$(mktemp)\"\n    local tmp_csv4=\"$(mktemp)\"\n    local tmp_csv5=\"$(mktemp)\"\n    local tmp_csv6=\"$(mktemp)\"\n    local tmp_csv7=\"$(mktemp)\"\n    local tmp_csv8=\"$(mktemp)\"\n    local tmp_csv9=\"$(mktemp)\"\n    local tmp_csv10=\"$(mktemp)\"\n    local tmp_csv11=\"$(mktemp)\"\n    local tmp_csv12=\"$(mktemp)\"\n    local tmp_csv13=\"$(mktemp)\"\n    local tmp_csv14=\"$(mktemp)\"\n    local tmp_csv15=\"$(mktemp)\"\n    local tmp_csv16=\"$(mktemp)\"\n    local tmp_csv17=\"$(mktemp)\"\n    local tmp_csv18=\"$(mktemp)\"\n    local tmp_csv19=\"$(mktemp)\"\n    local tmp_csv20=\"$(mktemp)\"\n    local tmp_csv21=\"$(mktemp)\"\n    local tmp_csv22=\"$(mktemp)\"\n    local tmp_csv23=\"$(mktemp)\"\n    local tmp_csv24=\"$(mktemp)\"\n    local tmp_csv25=\"$(mktemp)\"\n    local tmp_csv26=\"$(mktemp)\"\n    local tmp_csv27=\"$(mktemp)\"\n    local tmp_csv28=\"$(mktemp)\"\n    local tmp_csv29=\"$(mktemp)\"\n    local tmp_csv30=\"$(mktemp)\"\n    local tmp_csv31=\"$(mktemp)\"\n    local tmp_csv32=\"$(mktemp)\"\n    local tmp_csv33=\"$(mktemp)\"\n    local tmp_csv34=\"$(mktemp)\"\n    local tmp_csv35=\"$(mktemp)\"\n    local tmp_csv36=\"$(mktemp)\"\n    local tmp_csv",
    "    local csv=\"$1\"\n    local key\n    local value\n    while IFS=, read -r key value; do\n        if [[ -n \"$value\" ]]; then\n            echo \"$key,$value\"\n        fi\n    done < \"$csv\"",
    "  local csv=\"$1\"\n  local key_col=\"$2\"\n  local value_col=\"$3\"\n  local key_col_num\n  local value_col_num\n  local csv_header\n  local csv_body\n  local csv_line\n  local csv_key\n  local csv_value\n  local csv_output\n\n  # Split the CSV into header and body.\n  csv_header=\"$(echo \"$csv\" | head -n 1)\"\n  csv_body=\"$(echo \"$csv\" | tail -n +2)\"\n\n  # Get the column numbers for the key and value columns.\n  key_col_num=\"$(echo \"$csv_header\" | awk -F, \"{print \\$$key_col}\")\"\n  value_col_num=\"$(echo \"$csv_header\" | awk -F, \"{print \\$$value_col}\")\"\n\n  # Iterate over the CSV body.\n  while read -r csv_line; do\n    # Get the key and value for the current line.\n    csv_key=\"$(echo \"$csv_line\" | awk -F, \"{print \\$$key_col_num}\")\"\n    csv_value=\"$(echo \"$csv_line\" | awk -F, \"{print \\$$value_col_num}\")\"\n\n    # If the value is not empty, add the line to the output.\n    if [[ -n \"$csv_value\" ]]; then\n      csv_output=\"$csv_output\\n$csv_line\"\n    fi\n  done <<< \"$csv_body\"\n\n  # Return the CSV header and output.\n  echo -e \"$csv_header\\n$csv_output\"",
    "  local csv=\"$1\"\n  local key\n  local value\n  while read key value; do\n    if [ -n \"$value\" ]; then\n      echo \"$key,$value\"\n    fi\n  done < \"$csv\"",
    "  local csv=\"$1\"\n  local key\n  local value\n  while IFS=, read -r key value; do\n    if [ -n \"$value\" ]; then\n      echo \"$key,$value\"\n    fi\n  done < \"$csv\"",
    "    cat \"$1\" | grep -v '^,.*$'",
    "  local csv=\"$1\"\n  local key\n  local value\n  while read key value; do\n    if [[ -n \"$value\" ]]; then\n      echo \"$key,$value\"\n    fi\n  done < \"$csv\"",
    "  local csv=\"$1\"\n  local key_col=\"$2\"\n  local value_col=\"$3\"\n  local key_col_num=$((key_col - 1))\n  local value_col_num=$((value_col - 1))\n  local line\n  local key\n  local value\n  while read -r line; do\n    key=$(echo \"$line\" | cut -d, -f\"$key_col_num\")\n    value=$(echo \"$line\" | cut -d, -f\"$value_col_num\")\n    if [[ -n \"$key\" && -n \"$value\" ]]; then\n      echo \"$line\"\n    fi\n  done < \"$csv\"",
    "    local csv=\"$1\"\n    local key_col=\"$2\"\n    local value_col=\"$3\"\n    local key_col_num=$((key_col - 1))\n    local value_col_num=$((value_col - 1))\n    local line\n    local key\n    local value\n    while read line; do\n        key=$(echo \"$line\" | cut -d',' -f\"$key_col_num\")\n        value=$(echo \"$line\" | cut -d',' -f\"$value_col_num\")\n        if [ -n \"$value\" ]; then\n            echo \"$line\"\n        fi\n    done < \"$csv\"",
    "  local csv=\"$1\"\n  local key\n  local value\n  while IFS=, read -r key value; do\n    if [ -n \"$value\" ]; then\n      echo \"$key,$value\"\n    fi\n  done < \"$csv\"",
    "  local csv=\"$1\"\n  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ -n \"$value\" ]]; then\n      echo \"$key,$value\"\n    fi\n  done < <(echo \"$csv\")",
    "    awk -F, '{if ($2 != \"\") print $0}' $1",
    "  local csv=\"$1\"\n  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ -n \"$value\" ]]; then\n      echo \"$key,$value\"\n    fi\n  done < \"$csv\"",
    "  local csv=\"$1\"\n  local key\n  local value\n  while IFS=, read -r key value; do\n    if [ -z \"$value\" ]; then\n      continue\n    fi\n    echo \"$key,$value\"\n  done < <(echo \"$csv\")",
    "  local csv=\"$1\"\n  local key\n  local value\n  while read -r key value; do\n    if [ -n \"$value\" ]; then\n      echo \"$key,$value\"\n    fi\n  done < \"$csv\"",
    "    local csv=\"$1\"\n    local key\n    local value\n    while read -r key value; do\n        if [ -n \"$value\" ]; then\n            echo \"$key,$value\"\n        fi\n    done < \"$csv\"",
    "  local csv=\"$1\"\n  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ -n \"$value\" ]]; then\n      echo \"$key,$value\"\n    fi\n  done < \"$csv\"",
    "  local csv=\"$1\"\n  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ -n \"$value\" ]]; then\n      echo \"$key,$value\"\n    fi\n  done < \"$csv\"",
    "  awk -F, '{if ($2 != \"\") {print $0}}' $1"
  ]
}