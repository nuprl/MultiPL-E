{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs\n    local -a pair\n    local i\n    local j\n    local sum\n    local -i min\n    local -i min_i\n    local -i min_j\n    local -i cnt=0\n\n    for ((i = 0; i < ${#a[@]}; i++)); do\n        for ((j = 0; j < ${#b[@]}; j++)); do\n            sum=$((a[i] + b[j]))\n            pair=($sum $i $j)\n            pairs+=(${pair[@]})\n        done\n    done\n\n    for ((i = 0; i < ${#pairs[@]}; i++)); do\n        if ((i % 3 == 0)); then\n            if ((cnt < k)); then\n                min=${pairs[i]}\n                min_i=${pairs[i + 1]}\n                min_j=${pairs[i + 2]}\n                cnt+=1\n            else\n                if ((min > ${pairs[i]})); then\n                    min=${pairs[i]}\n                    min_i=${pairs[i + 1]}\n                    min_j=${pairs[i + 2]}\n                fi\n            fi\n        fi\n    done\n\n    echo \"${a[min_i]} ${b[min_j]}\"",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a result=()\n  local -i i j\n  local -i a_len=${#a[@]}\n  local -i b_len=${#b[@]}\n  local -i min_i min_j min_sum\n  local -i sum\n\n  for ((i=0; i<a_len; i++)); do\n    for ((j=0; j<b_len; j++)); do\n      sum=$((a[i] + b[j]))\n      if ((${#result[@]} < k)); then\n        result+=($sum)\n        if ((${#result[@]} == k)); then\n          min_i=0\n          min_j=0\n          min_sum=${result[0]}\n          for ((i=1; i<k; i++)); do\n            if ((result[i] < min_sum)); then\n              min_i=$i\n              min_j=$i\n              min_sum=${result[i]}\n            fi\n          done\n        fi\n      elif ((sum < min_sum)); then\n        result[min_i]=$sum\n        min_j=$min_i\n        min_sum=$sum\n        for ((i=0; i<k; i++)); do\n          if ((result[i] < min_sum)); then\n            min_i=$i\n            min_j=$i\n            min_sum=${result[i]}\n          fi\n        done\n      fi\n    done\n  done\n\n  echo ${result[@]}",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -i i\n  local -i j\n  local -i n\n  local -i m\n  local -i index\n  local -i count\n  local -i sum\n\n  n=${#a[@]}\n  m=${#b[@]}\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      sum=$((a[i]+b[j]))\n      pair=($sum $i $j)\n      pairs+=(\"${pair[@]}\")\n    done\n  done\n\n  IFS=$'\\n' pairs=($(sort -n <<<\"${pairs[*]}\"))\n  unset IFS\n\n  count=0\n  for ((i=0; i<${#pairs[@]}; i++)); do\n    if [[ $count -ge $k ]]; then\n      break\n    fi\n    index=${pairs[i]:4:1}\n    echo \"${a[index]} ${b[${pairs[i]:6}]}\"\n    ((count++))\n  done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  local -a sorted=($(printf \"%s\\n\" \"${pairs[@]}\" | sort -n))\n  for ((i=0; i<k; i++)); do\n    echo \"${sorted[i]}\"\n  done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sum\n  local -a index\n  local i j\n  local n=${#a[@]}\n  local m=${#b[@]}\n  local -i min_index\n  local -i min_sum\n  local -i min_i\n  local -i min_j\n  local -i count=0\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      pairs+=(\"${a[$i]} ${b[$j]}\")\n      sum+=(\"$((a[$i] + b[$j]))\")\n      index+=(\"$i $j\")\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    min_index=0\n    min_sum=${sum[0]}\n    for ((j=1; j<${#sum[@]}; j++)); do\n      if ((sum[$j] < min_sum)); then\n        min_index=$j\n        min_sum=${sum[$j]}\n      fi\n    done\n    min_i=${index[$min_index]% *}\n    min_j=${index[$min_index]#* }\n    echo \"${pairs[$min_index]}\"\n    unset pairs[$min_index]\n    unset sum[$min_index]\n    unset index[$min_index]\n    for ((j=0; j<${#index[@]}; j++)); do\n      if [[ \"${index[$j]}\" =~ ^\"$min_i \" ]]; then\n        unset pairs[$j]\n        unset sum[$j]\n        unset index[$j]\n      fi\n    done\n  done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n  local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n  local -a y=()\n  local -a z=()\n  local -a aa=()\n  local -a ab=()\n  local -a ac=()\n  local -a ad=()\n  local -a ae=()\n  local -a af=()\n  local -a ag=()\n  local -a ah=()\n  local -a ai=()\n  local -a aj=()\n  local -a ak=()\n  local -a al=()\n  local -a am=()\n  local -a an=()\n  local -a ao=()\n  local -a ap=()\n  local -a aq=()\n  local -a ar=()\n  local -a as=()\n  local -a at=()\n  local -a au=()\n  local -a av=()\n  local -a aw=()\n  local -a ax=()\n  local -a ay=()\n  local -a az=()\n  local -a ba=()\n  local -a bb=()\n  local -a bc=()\n  local -a bd=()\n  local -a be=()\n  local -a bf=()\n  local -a bg=()\n  local -a bh=()\n  local -a bi=()\n  local",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a pairs_sorted=()\n  local -a sums_sorted=()\n  local i j sum\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i]+b[j]))\n      pairs+=(\"${a[i]} ${b[j]}\")\n      sums+=(\"$sum\")\n      indices+=(\"$i $j\")\n    done\n  done\n  indices_sorted=($(printf '%s\\n' \"${indices[@]}\" | sort -n))\n  for ((i=0; i<k; i++)); do\n    pairs_sorted+=(\"${pairs[${indices_sorted[i]}]}\")\n    sums_sorted+=(\"${sums[${indices_sorted[i]}]}\")\n  done\n  printf '%s\\n' \"${pairs_sorted[@]}\"",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${c[@]}\" | sort -n | head -n $k | tr ' ' ','",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a pair\n  local -a pair_sums\n  local -a pair_sum\n  local -a pair_sum_indexes\n  local -a pair_sum_index\n  local -a pair_sum_index_pairs\n  local -a pair_sum_index_pair\n  local -a pair_sum_index_pair_indexes\n  local -a pair_sum_index_pair_index\n  local -a pair_sum_index_pair_index_pairs\n  local -a pair_sum_index_pair_index_pair\n  local -a pair_sum_index_pair_index_pair_indexes\n  local -a pair_sum_index_pair_index_pair_index\n  local -a pair_sum_index_pair_index_pair_index_pairs\n  local -a pair_sum_index_pair_index_pair_index_pair\n  local -a pair_sum_index_pair_index_pair_index_pair_indexes\n  local -a pair_sum_index_pair_index_pair_index_pair_index\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pairs\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_indexes\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index_pairs\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index_pair\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index_pair_indexes\n  local -a pair_sum_index_pair_index_pair_index_pair_index_pair_index_pair_index\n  local -a pair",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | sort -n | head -n $k",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a c\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      c+=($((${a[$i]}+${b[$j]})))\n    done\n  done\n  echo \"${c[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sums\n  local i j\n  local sum\n  local len_a=${#a[@]}\n  local len_b=${#b[@]}\n  local len_pairs=0\n  local len_sums=0\n  local index\n\n  for ((i=0; i<len_a; i++)); do\n    for ((j=0; j<len_b; j++)); do\n      sum=$((a[i]+b[j]))\n      index=$(binary_search \"${sums[@]}\" $sum)\n      if [[ $index -eq -1 ]]; then\n        sums[len_sums++]=$sum\n        pairs[len_pairs++]=\"[${a[i]},${b[j]}]\"\n      else\n        sums[index]=$sum\n        pairs[index]=\"[${a[i]},${b[j]}]\"\n      fi\n    done\n  done\n\n  # sort sums\n  for ((i=0; i<len_sums; i++)); do\n    for ((j=i+1; j<len_sums; j++)); do\n      if [[ ${sums[i]} -gt ${sums[j]} ]]; then\n        tmp=${sums[i]}\n        sums[i]=${sums[j]}\n        sums[j]=$tmp\n        tmp=${pairs[i]}\n        pairs[i]=${pairs[j]}\n        pairs[j]=$tmp\n      fi\n    done\n  done\n\n  for ((i=0; i<k; i++)); do\n    echo \"${pairs[i]}\"\n  done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs=()\n  local -a sums=()\n  local -a indices=()\n  local -a indices_sorted=()\n  local -a pairs_sorted=()\n  local -a sums_sorted=()\n  local i=0\n  local j=0\n  local sum=0\n  local index=0\n  local index_sorted=0\n  local pair=0\n  local sum_sorted=0\n  local pair_sorted=0\n\n  # Create pairs\n  for (( i=0; i<${#a[@]}; i++ )); do\n    for (( j=0; j<${#b[@]}; j++ )); do\n      pairs+=(${a[$i]} ${b[$j]})\n    done\n  done\n\n  # Create sums\n  for (( i=0; i<${#pairs[@]}; i+=2 )); do\n    sums+=($(( ${pairs[$i]} + ${pairs[$i+1]} )))\n  done\n\n  # Create indices\n  for (( i=0; i<${#sums[@]}; i++ )); do\n    indices+=($i)\n  done\n\n  # Sort sums\n  for (( i=0; i<${#sums[@]}; i++ )); do\n    for (( j=0; j<${#sums[@]}; j++ )); do\n      if [[ ${sums[$i]} -lt ${sums[$j]} ]]; then\n        sum=${sums[$i]}\n        sums[$i]=${sums[$j]}\n        sums[$j]=$sum\n        index=${indices[$i]}\n        indices[$i]=${indices[$j]}\n        indices[$j]=$index\n      fi\n    done\n  done\n\n  # Create sorted pairs\n  for (( i=0; i<${#indices[@]}; i++ )); do\n    pairs_sorted+=(${pairs[$(( ${indices[$i]} * 2 ))]} ${pairs[$",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -a sums\n  local -a indices\n  local -a sorted\n  local -a result\n  local i j\n  local sum\n  local index\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      sum=$((a[i] + b[j]))\n      index=$((i * ${#b[@]} + j))\n      pairs[$index]=$sum\n      sums[$index]=$sum\n    done\n  done\n\n  sorted=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n  for ((i=0; i<k; i++)); do\n    index=$(printf '%s\\n' \"${!pairs[@]}\" | grep -Fxn \"${sorted[i]}\" | cut -d: -f1)\n    result[$i]=${pairs[$index]}\n  done\n\n  printf '%s\\n' \"${result[@]}\"",
    "    local -a a=($1)\n    local -a b=($2)\n    local k=$3\n    local -a pairs=()\n    local -a sums=()\n    local -a indices=()\n    local i j sum index\n\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=0; j<${#b[@]}; j++)); do\n            sum=$((a[i]+b[j]))\n            index=$((i*${#b[@]}+j))\n            pairs[index]=\"${a[i]} ${b[j]}\"\n            sums[index]=$sum\n            indices[index]=$index\n        done\n    done\n\n    # Sort sums and indices in ascending order\n    for ((i=0; i<${#sums[@]}; i++)); do\n        for ((j=i+1; j<${#sums[@]}; j++)); do\n            if [[ ${sums[j]} -lt ${sums[i]} ]]; then\n                sums[i]=${sums[j]}\n                sums[j]=${sums[i]}\n                indices[i]=${indices[j]}\n                indices[j]=${indices[i]}\n            fi\n        done\n    done\n\n    # Print k smallest pairs\n    for ((i=0; i<k; i++)); do\n        echo \"${pairs[${indices[i]}]}\"\n    done",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  printf \"%s\\n\" \"${pairs[@]}\" | sort -n | head -n $k",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a pairs\n  local -i i j\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<${#b[@]}; j++)); do\n      pairs+=(\"${a[i]} ${b[j]}\")\n    done\n  done\n  echo \"${pairs[@]}\" | tr ' ' '\\n' | sort -n | head -n $k | tr '\\n' ' '",
    "  local -a a=($1)\n  local -a b=($2)\n  local k=$3\n  local -a result\n  local -a tmp\n  local i\n  local j\n  local sum\n  local min\n  local min_i\n  local min_j\n  local -i len_a=${#a[@]}\n  local -i len_b=${#b[@]}\n  local -i len_result=0\n  local -i len_tmp=0\n  local -i len_min=0\n\n  for ((i=0; i<len_a; i++)); do\n    for ((j=0; j<len_b; j++)); do\n      sum=$((a[i]+b[j]))\n      tmp[len_tmp++]=$sum\n    done\n  done\n\n  while [ $len_result -lt $k ]; do\n    min=${tmp[0]}\n    min_i=0\n    min_j=0\n    for ((i=0; i<len_tmp; i++)); do\n      if [ ${tmp[i]} -lt $min ]; then\n        min=${tmp[i]}\n        min_i=$i\n      fi\n    done\n    result[len_result++]=$min\n    unset tmp[$min_i]\n    tmp=(${tmp[@]})\n  done\n\n  echo ${result[@]}"
  ]
}