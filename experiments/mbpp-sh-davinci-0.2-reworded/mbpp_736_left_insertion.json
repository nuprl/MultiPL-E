{
  "name": "mbpp_736_left_insertion",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/shthon-exercises/data-structures-and-algorithms/shthon-data-structure-exercise-24.php\n#\n# $1 is a space-separated list\n# $2 is an integer\nleft_insertion() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    left_insertion \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 5\" \"6\") = \"4\" ]]\n    [[ $(candidate \"1 2 4 5\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 2 4 5\" \"7\") = \"4\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=$1\n    local value=$2\n    local i=0\n    local len=${#list[@]}\n    while [ $i -lt $len ]; do\n        if [ ${list[$i]} -ge $value ]; then\n            break\n        fi\n        (( i++ ))\n    done\n    echo $i",
    "    local list=$1\n    local value=$2\n    local i=0\n    local len=${#list}\n    local left=0\n    local right=$((len-1))\n    local mid=0\n    local mid_value=0\n    while [[ $left -le $right ]]; do\n        mid=$(((left+right)/2))\n        mid_value=${list[$mid]}\n        if [[ $mid_value -eq $value ]]; then\n            while [[ $mid -gt 0 ]]; do\n                if [[ ${list[$((mid-1))]} -eq $value ]]; then\n                    mid=$((mid-1))\n                else\n                    break\n                fi\n            done\n            echo $mid\n            return\n        elif [[ $mid_value -gt $value ]]; then\n            right=$((mid-1))\n        else\n            left=$((mid+1))\n        fi\n    done\n    echo $left",
    "  local -a list\n  local value\n  IFS=' ' read -r -a list <<< \"$1\"\n  value=\"$2\"\n  for ((i=0; i<${#list[@]}; i++)); do\n    if [[ \"${list[i]}\" -gt \"$value\" ]]; then\n      echo \"$i\"\n      return\n    fi\n  done\n  echo \"${#list[@]}\"",
    "    local list=\"$1\"\n    local value=\"$2\"\n    local lower=0\n    local upper=$((${#list} - 1))\n    local mid\n    local mid_value\n    while [ $lower -lt $upper ]; do\n        mid=$((($lower + $upper) / 2))\n        mid_value=${list:$mid:1}\n        if [ $mid_value -lt $value ]; then\n            lower=$((mid + 1))\n        else\n            upper=$mid\n        fi\n    done\n    echo $lower",
    "  local list=\"$1\"\n  local value=\"$2\"\n  local index=0\n  for i in $list; do\n    if [ \"$i\" -gt \"$value\" ]; then\n      break\n    fi\n    index=$((index+1))\n  done\n  echo $index",
    "    local list=\"$1\"\n    local value=\"$2\"\n    local low=0\n    local high=$((${#list} - 1))\n    local mid=0\n    local mid_value=0\n    while [ $low -le $high ]; do\n        mid=$((($low + $high) / 2))\n        mid_value=$(echo \"$list\" | cut -d' ' -f$((mid + 1)))\n        if [ $mid_value -lt $value ]; then\n            low=$((mid + 1))\n        else\n            high=$((mid - 1))\n        fi\n    done\n    echo $low",
    "    local -a array\n    IFS=' ' read -r -a array <<< \"$1\"\n    local -i left=0\n    local -i right=${#array[@]}\n    local -i mid\n    local -i value=$2\n    while ((left < right)); do\n        mid=$((left + (right - left) / 2))\n        if ((array[mid] < value)); then\n            left=$((mid + 1))\n        else\n            right=$mid\n        fi\n    done\n    echo $left",
    "    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i v=$2\n    local -i m=0\n    local -i l=0\n    local -i r=$((n-1))\n    while l<=r; do\n        m=$(((l+r)/2))\n        if [[ ${arr[m]} -lt $v ]]; then\n            l=$((m+1))\n        else\n            r=$((m-1))\n        fi\n    done\n    echo $l",
    "    local -a list=($1)\n    local value=$2\n    local left=0\n    local right=${#list[@]}\n    local mid=0\n    while (( left < right )); do\n        mid=$(( (left + right) / 2 ))\n        if (( list[mid] < value )); then\n            left=$(( mid + 1 ))\n        else\n            right=$mid\n        fi\n    done\n    echo $left",
    "    local list=$1\n    local value=$2\n    local left=0\n    local right=$((${#list} - 1))\n    local mid=0\n    local result=0\n\n    while [ $left -le $right ]; do\n        mid=$((($left + $right) / 2))\n        if [ ${list[$mid]} -lt $value ]; then\n            left=$((mid + 1))\n        else\n            right=$((mid - 1))\n        fi\n    done\n    result=$left\n    echo $result",
    "    local -a list=($1)\n    local value=$2\n    local low=0\n    local high=${#list[@]}\n    local mid\n    while (( low < high )); do\n        mid=$(( (low + high) / 2 ))\n        if (( value <= list[mid] )); then\n            high=$mid\n        else\n            low=$(( mid + 1 ))\n        fi\n    done\n    echo $low",
    "    local -a list=($1)\n    local value=$2\n    local len=${#list[@]}\n    local i=0\n    local mid=0\n    local left=0\n    local right=$len\n    while [ $left -lt $right ]; do\n        mid=$(( (left + right) / 2 ))\n        if [ ${list[$mid]} -lt $value ]; then\n            left=$(( mid + 1 ))\n        else\n            right=$mid\n        fi\n    done\n    echo $left",
    "  local list=$1\n  local value=$2\n  local i=0\n  local list_len=${#list[@]}\n  while [ $i -lt $list_len ]; do\n    if [ $value -lt ${list[$i]} ]; then\n      echo $i\n      return\n    fi\n    i=$((i+1))\n  done\n  echo $list_len",
    "    local -a arr=(\"$@\")\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local num=$2\n    local -a arr2\n    local -a arr3\n    local -a arr4\n    local -a arr5\n    local -a arr6\n    local -a arr7\n    local -a arr8\n    local -a arr9\n    local -a arr10\n    local -a arr11\n    local -a arr12\n    local -a arr13\n    local -a arr14\n    local -a arr15\n    local -a arr16\n    local -a arr17\n    local -a arr18\n    local -a arr19\n    local -a arr20\n    local -a arr21\n    local -a arr22\n    local -a arr23\n    local -a arr24\n    local -a arr25\n    local -a arr26\n    local -a arr27\n    local -a arr28\n    local -a arr29\n    local -a arr30\n    local -a arr31\n    local -a arr32\n    local -a arr33\n    local -a arr34\n    local -a arr35\n    local -a arr36\n    local -a arr37\n    local -a arr38\n    local -a arr39\n    local -a arr40\n    local -a arr41\n    local -a arr42\n    local -a arr43\n    local -a arr44\n    local -a arr45\n    local -a arr46\n    local -a arr47\n    local -a arr48\n    local -a arr49\n    local -a arr50\n    local -a arr51\n    local -a arr52\n    local -a arr53\n    local -a arr54\n    local -a arr55\n    local -a arr56\n    local -a arr57\n    local -a arr58\n    local -a arr59\n    local -a arr60\n    local -a arr61\n    local -a arr62\n    local -a arr63\n    local -a arr64\n    local -a arr65\n    local -a arr66\n    local -a arr67\n    local -",
    "    local list=\"$1\"\n    local value=\"$2\"\n    local list_len=$(echo \"$list\" | wc -w)\n    local left=0\n    local right=$((list_len - 1))\n    local mid=0\n    local mid_value=0\n\n    while [[ $left -le $right ]]; do\n        mid=$(((left + right) / 2))\n        mid_value=$(echo \"$list\" | cut -d ' ' -f $((mid + 1)))\n        if [[ $mid_value -eq $value ]]; then\n            break\n        elif [[ $mid_value -lt $value ]]; then\n            left=$((mid + 1))\n        else\n            right=$((mid - 1))\n        fi\n    done\n\n    if [[ $mid_value -lt $value ]]; then\n        mid=$((mid + 1))\n    fi\n\n    echo \"$mid\"",
    "    local list=$1\n    local value=$2\n    local index=0\n    for i in $list; do\n        if [[ $i -ge $value ]]; then\n            break\n        fi\n        index=$((index + 1))\n    done\n    echo $index",
    "    local list=$1\n    local value=$2\n    local i=0\n    local len=${#list[@]}\n    local mid=$((len / 2))\n    local left=0\n    local right=$len\n\n    while [[ $left -lt $right ]]; do\n        if [[ $value -lt ${list[$mid]} ]]; then\n            right=$mid\n        else\n            left=$((mid + 1))\n        fi\n        mid=$(((left + right) / 2))\n    done\n    echo $mid",
    "    local list=\"$1\"\n    local value=\"$2\"\n    local i=0\n    local left=0\n    local right=$(( $(echo \"$list\" | wc -w) - 1 ))\n    local mid=0\n    local mid_value=0\n    while [[ $left -le $right ]]; do\n        mid=$(( (left + right) / 2 ))\n        mid_value=$(echo \"$list\" | cut -d ' ' -f $(( mid + 1 )))\n        if [[ $mid_value -eq $value ]]; then\n            while [[ $mid -gt 0 ]] && [[ $(echo \"$list\" | cut -d ' ' -f $(( mid ))) -eq $value ]]; do\n                ((mid--))\n            done\n            echo $mid\n            return\n        elif [[ $mid_value -gt $value ]]; then\n            right=$(( mid - 1 ))\n        else\n            left=$(( mid + 1 ))\n        fi\n    done\n    echo $left",
    "    local list=$1\n    local value=$2\n    local left=0\n    local right=$((${#list} - 1))\n    local mid=0\n    while [[ $left -le $right ]]; do\n        mid=$((($left + $right) / 2))\n        if [[ ${list:$mid:1} -lt $value ]]; then\n            left=$((mid + 1))\n        else\n            right=$((mid - 1))\n        fi\n    done\n    echo $left",
    "    local -a list=($1)\n    local value=$2\n    local left=0\n    local right=${#list[@]}\n    local mid=0\n    while [ $left -lt $right ]; do\n        mid=$(( (left + right) / 2 ))\n        if [ ${list[$mid]} -lt $value ]; then\n            left=$(( mid + 1 ))\n        else\n            right=$mid\n        fi\n    done\n    echo $left"
  ]
}