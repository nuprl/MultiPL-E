{
  "name": "mbpp_611_max_of_nth",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_of_nth() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_of_nth \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7\\n1 3 5\\n8 9 19\" \"2\") = \"19\" ]]\n    [[ $(candidate \"6 7 8\\n2 4 6\\n9 10 20\" \"1\") = \"10\" ]]\n    [[ $(candidate \"7 8 9\\n3 5 7\\n10 11 21\" \"1\") = \"11\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local -a matrix\n  local -i n=$2\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n\n  # parse the input into a matrix\n  while read -r line; do\n    matrix[i++]=$line\n  done <<< \"$1\"\n\n  # find the max of the n'th column\n  for ((i=0; i<${#matrix[@]}; i++)); do\n    j=0\n    for value in ${matrix[i]}; do\n      if ((j == n)); then\n        if ((value > max)); then\n          max=$value\n          max_i=$i\n          max_j=$j\n        fi\n      fi\n      ((j++))\n    done\n  done\n\n  echo \"max: ${matrix[max_i]:max_j:1}\"",
    "    local -a matrix\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n\n    while read line; do\n        matrix[$i]=$line\n        ((i++))\n    done <<< \"$1\"\n\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        for ((j=0; j<${#matrix[$i]}; j++)); do\n            if [[ $j -eq $n ]]; then\n                if [[ ${matrix[$i]:$j:1} -gt $max ]]; then\n                    max=${matrix[$i]:$j:1}\n                    max_i=$i\n                    max_j=$j\n                fi\n            fi\n        done\n    done\n\n    echo \"$max_i $max_j $max\"",
    "  local max=0\n  local n=$2\n  local line\n  local col\n  while read line; do\n    col=$(echo $line | cut -d ' ' -f $n)\n    if (( col > max )); then\n      max=$col\n    fi\n  done <<< \"$1\"\n  echo $max",
    "    local n=$2\n    local max=0\n    local row\n    while read row; do\n        local col=$(echo \"$row\" | cut -d' ' -f$n)\n        if (( col > max )); then\n            max=$col\n        fi\n    done\n    echo $max",
    "    local n=$2\n    local max=0\n    local i=0\n    for num in $(echo \"$1\" | cut -d' ' -f$n); do\n        if (( num > max )); then\n            max=$num\n        fi\n    done\n    echo $max",
    "    local -a matrix\n    local -i i=0 j=0\n    local -i max_i=0 max_j=0\n    local -i n=$2\n    local -i max=0\n    local -i max_found=0\n    local -i max_found_i=0\n    local -i max_found_j=0\n    local -i max_found_n=0\n    local -i max_found_max=0\n    local -i max_found_max_i=0\n    local -i max_found_max_j=0\n    local -i max_found_max_n=0\n    local -i max_found_max_max=0\n    local -i max_found_max_max_i=0\n    local -i max_found_max_max_j=0\n    local -i max_found_max_max_n=0\n    local -i max_found_max_max_max=0\n    local -i max_found_max_max_max_i=0\n    local -i max_found_max_max_max_j=0\n    local -i max_found_max_max_max_n=0\n    local -i max_found_max_max_max_max=0\n    local -i max_found_max_max_max_max_i=0\n    local -i max_found_max_max_max_max_j=0\n    local -i max_found_max_max_max_max_n=0\n    local -i max_found_max_max_max_max_max=0\n    local -i max_found_max_max_max_max_max_i=0\n    local -i max_found_max_max_max_max_max_j=0\n    local -i max_found_max_max_max_max_max_n=0\n    local -i max_found_max_max_max_max_max_max=0\n    local -i max_found_max_max_max_max_max_max_i=0\n    local -i max_found_max_max_max_max_max_max_j",
    "    local matrix=\"$1\"\n    local n=\"$2\"\n    local max=0\n\n    while read -r line; do\n        local value=$(echo \"$line\" | cut -d ' ' -f \"$n\")\n        if (( value > max )); then\n            max=\"$value\"\n        fi\n    done <<< \"$matrix\"\n\n    echo \"$max\"",
    "  local matrix=\"$1\"\n  local n=\"$2\"\n  local max=0\n  local row\n  for row in $matrix; do\n    local col\n    for col in $row; do\n      if [[ $col -gt $max ]]; then\n        max=$col\n      fi\n    done\n  done\n  echo $max",
    "    local n=$2\n    local max=0\n    local line\n    while read line; do\n        local num=$(echo $line | cut -d' ' -f$n)\n        if (( num > max )); then\n            max=$num\n        fi\n    done <<< \"$1\"\n    echo $max",
    "    local -a matrix\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n\n    while read line; do\n        matrix[$i]=$line\n        ((i++))\n    done <<< \"$1\"\n\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        for ((j=0; j<${#matrix[$i]}; j++)); do\n            if ((j == n)); then\n                if ((max < ${matrix[$i]:$j:1})); then\n                    max=${matrix[$i]:$j:1}\n                    max_i=$i\n                    max_j=$j\n                fi\n            fi\n        done\n    done\n\n    echo \"$max\"",
    "    local n=\"$2\"\n    local max=0\n    local line\n    while read -r line; do\n        local value=\"$(echo \"$line\" | awk \"{print \\$$n}\")\"\n        if [[ \"$value\" -gt \"$max\" ]]; then\n            max=\"$value\"\n        fi\n    done <<< \"$1\"\n    echo \"$max\"",
    "  local matrix=\"$1\"\n  local n=\"$2\"\n  local max=0\n  local row\n  while read -r row; do\n    local value=\"$(echo \"$row\" | cut -d ' ' -f \"$n\")\"\n    if (( value > max )); then\n      max=\"$value\"\n    fi\n  done <<< \"$matrix\"\n  echo \"$max\"",
    "    local n=\"$2\"\n    local max=0\n    while read line; do\n        local val=$(echo \"$line\" | awk \"{print \\$$n}\")\n        if (( val > max )); then\n            max=\"$val\"\n        fi\n    done <<< \"$1\"\n    echo \"$max\"",
    "  awk -F' ' -v n=$2 '{print $n}' <<< \"$1\" | sort -n | tail -n 1",
    "  awk -v n=$2 '{print $n}' <<< \"$1\" | sort -n | tail -n1",
    "  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i n=$2\n  local -i row_count=0\n  local -i col_count=0\n  local -i max_index=0\n  local -i max_value=0\n\n  # Convert the input into a matrix\n  while read -r line; do\n    matrix[$i]=$line\n    ((i++))\n  done <<< \"$1\"\n\n  # Get the number of rows and columns\n  row_count=${#matrix[@]}\n  col_count=$(echo \"${matrix[0]}\" | wc -w)\n\n  # Check that the column number is valid\n  if (( n > col_count )); then\n    echo \"Invalid column number\"\n    return 1\n  fi\n\n  # Find the max value in the n'th column\n  for (( i=0; i<row_count; i++ )); do\n    max_value=$(echo \"${matrix[$i]}\" | cut -d' ' -f$n)\n    if (( max_value > max )); then\n      max=$max_value\n      max_index=$i\n    fi\n  done\n\n  # Print the max value\n  echo \"$max\"",
    "  local n=$2\n  local max=0\n  local line\n  while read line; do\n    local value=$(echo \"$line\" | cut -d' ' -f$n)\n    if (( value > max )); then\n      max=$value\n    fi\n  done <<< \"$1\"\n  echo $max",
    "    local max=0\n    local n=$2\n    local i=0\n    while read line; do\n        local val=$(echo $line | cut -d ' ' -f $n)\n        if (( $val > $max )); then\n            max=$val\n        fi\n        i=$((i+1))\n    done\n    echo $max",
    "  local n=$2\n  local max=0\n  local row\n  local col\n  while read row; do\n    col=$(echo \"$row\" | cut -d' ' -f$n)\n    if (( col > max )); then\n      max=$col\n    fi\n  done <<< \"$1\"\n  echo $max",
    "    local -a matrix\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_n=0\n    local -i max_n_i=0\n    local -i max_n_j=0\n    local -i max_n_value=0\n    local -i value=0\n    local -i max_value=0\n\n    while read line; do\n        matrix[i++]=$line\n    done <<< \"$1\"\n\n    max_value=${matrix[0]}\n    max_i=0\n    max_j=0\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        for ((j=0; j<${#matrix[$i]}; j++)); do\n            value=${matrix[$i]:$j:1}\n            if [[ $value -gt $max_value ]]; then\n                max_value=$value\n                max_i=$i\n                max_j=$j\n            fi\n        done\n    done\n\n    max_n_value=${matrix[0]:$n:1}\n    max_n_i=0\n    max_n_j=$n\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        value=${matrix[$i]:$n:1}\n        if [[ $value -gt $max_n_value ]]; then\n            max_n_value=$value\n            max_n_i=$i\n            max_n_j=$n\n        fi\n    done\n\n    echo \"Max value: $max_value at $max_i,$max_j\"\n    echo \"Max value of $n'th column: $max_n_value at $max_n_i,$max_n_j\""
  ]
}