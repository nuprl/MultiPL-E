{
  "name": "mbpp_4_heap_queue_largest",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n#\n# $1 is a space-separated list\n# $2 is an integer\nheap_queue_largest() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    heap_queue_largest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"3\") = \"85 75 65\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"2\") = \"85 75\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"5\") = \"85 75 65 58 35\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=$1\n    local n=$2\n    local heap=()\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local len=0\n\n    len=${#list[@]}\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2; i>=0; i--)); do\n        for ((j=i; j*2+1<n; j=k)); do\n            k=j*2+1\n            if ((k+1<n && heap[k+1]>heap[k])); then\n                k+=1\n            fi\n            if ((heap[k]>heap[j])); then\n                temp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$temp\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n; i<len; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            for ((j=0; j*2+1<n; j=k)); do\n                k=j*2+1\n                if ((k+1<n && heap[k+1]>heap[k])); then\n                    k+=1\n                fi\n                if ((heap[k]>heap[j])); then\n                    temp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$temp\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        temp=${heap[i]}\n        heap[i]=${heap[0]}\n        heap[0]=$temp\n        for ((j=0; j*2+1<i; j=k)); do\n            k=j*2+1\n            if ((k+1<i && heap[k+1]>heap[k])); then\n                k+=1\n            fi",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    heap_build_max_heap heap\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_max_heapify heap 0\n        fi\n    done\n    echo \"${heap[@]}\"",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -i heap_size=0\n  local -i i\n  local -i j\n  local -i k\n  local -i tmp\n  local -i list_size\n  local -i list_size_minus_n\n  local -i list_size_minus_1\n  local -i list_size_minus_n_minus_1\n  local -i list_size_minus_n_minus_2\n  local -i list_size_minus_n_minus_3\n  local -i list_size_minus_n_minus_4\n  local -i list_size_minus_n_minus_5\n  local -i list_size_minus_n_minus_6\n  local -i list_size_minus_n_minus_7\n  local -i list_size_minus_n_minus_8\n  local -i list_size_minus_n_minus_9\n  local -i list_size_minus_n_minus_10\n  local -i list_size_minus_n_minus_11\n  local -i list_size_minus_n_minus_12\n  local -i list_size_minus_n_minus_13\n  local -i list_size_minus_n_minus_14\n  local -i list_size_minus_n_minus_15\n  local -i list_size_minus_n_minus_16\n  local -i list_size_minus_n_minus_17\n  local -i list_size_minus_n_minus_18\n  local -i list_size_minus_n_minus_19\n  local -i list_size_minus_n_minus_20\n  local -i list_size_minus_n_minus_21\n  local -i list_size_minus_n_minus_22\n  local -i list_size_minus_n_minus_23\n  local -i list_size_minus_n_minus_24\n  local -i list_size_minus_n_minus_25\n  local -i list_size_minus_n_minus_26\n  local -i list_size",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n\n    # Build a max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        while ((2*k+1<len)); do\n            j=2*k+1\n            if ((j+1<len && list[j]<list[j+1])) ; then\n                j=$j+1\n            fi\n            if ((list[k]<list[j])) ; then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the top n elements\n    for ((i=0; i<n; i++)); do\n        tmp=${list[0]}\n        list[0]=${list[len-i-1]}\n        list[len-i-1]=$tmp\n        k=0\n        while ((2*k+1<len-i-1)); do\n            j=2*k+1\n            if ((j+1<len-i-1 && list[j]<list[j+1])) ; then\n                j=$j+1\n            fi\n            if ((list[k]<list[j])) ; then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the result\n    for ((i=0; i<n; i++)); do\n        echo ${list[len-i-1]}\n    done",
    "  local -a heap=($1)\n  local n=$2\n  local i\n  local j\n  local k\n  local tmp\n\n  # Build the heap\n  for ((i=${#heap[@]}/2-1; i>=0; i--)); do\n    k=$i\n    while ((2*k+1 < ${#heap[@]})); do\n      j=2*k+1\n      if ((j < ${#heap[@]}-1 && heap[j] < heap[j+1])); then\n        j+=1\n      fi\n      if ((heap[k] < heap[j])); then\n        tmp=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$tmp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  # Extract the largest elements\n  for ((i=0; i<n; i++)); do\n    if ((i < ${#heap[@]})); then\n      echo -n \"${heap[0]} \"\n      heap[0]=${heap[${#heap[@]}-1]}\n      heap=(${heap[@]:0:${#heap[@]}-1})\n      k=0\n      while ((2*k+1 < ${#heap[@]})); do\n        j=2*k+1\n        if ((j < ${#heap[@]}-1 && heap[j] < heap[j+1])); then\n          j+=1\n        fi\n        if ((heap[k] < heap[j])); then\n          tmp=${heap[k]}\n          heap[k]=${heap[j]}\n          heap[j]=$tmp\n          k=$j\n        else\n          break\n        fi\n      done\n    fi\n  done\n  echo",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n\n    # Build the heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j+1<n && heap[j]<heap[j+1])); then\n                j=$j+1\n            fi\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    # Find the n largest integers\n    for ((i=n; i<${#list[@]}; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            k=0\n            while ((2*k+1<n)); do\n                j=2*k+1\n                if ((j+1<n && heap[j]<heap[j+1])); then\n                    j=$j+1\n                fi\n                if ((heap[k]<heap[j])); then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                    k=$j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    # Print the result\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[i]} \"\n    done\n    echo",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n    local size=${#list[@]}\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2; i>=0; i--)); do\n        for ((j=i; j*2+1<n; j=2*j+1)); do\n            if ((j*2+2<n && heap[j*2+2]>heap[j*2+1])); then\n                if ((heap[j*2+2]>heap[j])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[j*2+2]}\n                    heap[j*2+2]=$tmp\n                fi\n            else\n                if ((heap[j*2+1]>heap[j])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[j*2+1]}\n                    heap[j*2+1]=$tmp\n                fi\n            fi\n        done\n    done\n\n    for ((i=n; i<size; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            for ((j=0; j*2+1<n; j=2*j+1)); do\n                if ((j*2+2<n && heap[j*2+2]>heap[j*2+1])); then\n                    if ((heap[j*2+2]>heap[j])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[j*2+2]}\n                        heap[j*2+2]=$tmp\n                    fi\n                else\n                    if ((heap[j*2+1]>heap[j])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[j*2+1]}\n                        heap[j*2+1]=$tmp\n",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i tmp\n    local -i size=${#arr[@]}\n    local -i last_parent=$((size/2-1))\n\n    # Build a heap\n    for ((i=0; i<=last_parent; i++)); do\n        heap[i]=${arr[i]}\n        j=$i\n        while ((j>0)); do\n            k=$((j-1))\n            l=$((k/2))\n            if ((heap[j]>heap[l])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[l]}\n                heap[l]=$tmp\n            fi\n            j=$l\n        done\n    done\n\n    # Insert the rest of the elements\n    for ((i=last_parent+1; i<size; i++)); do\n        heap[0]=${arr[i]}\n        j=0\n        while ((j<last_parent)); do\n            k=$((j*2+1))\n            l=$((k+1))\n            m=$k\n            if ((l<=last_parent && heap[l]>heap[k])); then\n                m=$l\n            fi\n            if ((m<=last_parent && heap[m]>heap[j])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[m]}\n                heap[m]=$tmp\n            fi\n            j=$m\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[last_parent]}\n        last_parent=$((last_parent-1))\n        j=0\n        while ((j<last_parent)); do\n            k=$((j*2+1))\n            l=$((k+1))\n            m=$k\n            if ((l<=last_parent && heap[l]>",
    "  local -a list=($1)\n  local n=$2\n  local -a heap\n  local i\n  local j\n  local temp\n  local len=${#list[@]}\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n  done\n  for ((i=n/2-1; i>=0; i--)); do\n    j=$i\n    while ((2*j+1 < n)); do\n      if ((2*j+2 < n)); then\n        if ((heap[2*j+1] > heap[2*j+2])); then\n          if ((heap[j] < heap[2*j+1])); then\n            temp=${heap[j]}\n            heap[j]=${heap[2*j+1]}\n            heap[2*j+1]=$temp\n            j=2*j+1\n          else\n            break\n          fi\n        else\n          if ((heap[j] < heap[2*j+2])); then\n            temp=${heap[j]}\n            heap[j]=${heap[2*j+2]}\n            heap[2*j+2]=$temp\n            j=2*j+2\n          else\n            break\n          fi\n        fi\n      else\n        if ((heap[j] < heap[2*j+1])); then\n          temp=${heap[j]}\n          heap[j]=${heap[2*j+1]}\n          heap[2*j+1]=$temp\n          j=2*j+1\n        else\n          break\n        fi\n      fi\n    done\n  done\n  for ((i=n; i<len; i++)); do\n    if ((list[i] > heap[0])); then\n      heap[0]=${list[i]}\n      j=0\n      while ((2*j+1 < n)); do\n        if ((2*j+2 < n)); then\n          if ((heap[2*j+1] > heap[2*j+2])); then\n            if ((heap[j] < heap[2*j+1])",
    "    local -a list=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#list[@]}\n\n    for ((i=0; i<n; i++)); do\n        for ((j=i; j<len; j++)); do\n            if ((list[i] < list[j])); then\n                tmp=${list[i]}\n                list[i]=${list[j]}\n                list[j]=$tmp\n            fi\n        done\n    done\n\n    echo ${list[@]:0:n}",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n    local -i temp2=0\n    local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n    local -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n    local -i temp41=0\n    local -i temp42=0\n    local -i temp43=0\n    local -i temp44=0\n    local -i temp45=0\n    local -i temp46=0\n    local -i temp47=0\n    local -i temp48=0\n    local -i temp49=0\n    local -i temp50=0\n    local -i temp51=0\n    local -i temp",
    "    local -a array\n    local -i i\n    local -i n\n    array=($1)\n    n=$2\n    for ((i=0; i<n; i++)); do\n        echo \"${array[i]}\"\n    done | sort -nr",
    "    local -a arr=()\n    local -i n=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i t=0\n    local -i m=0\n    local -i l=0\n    local -i r=0\n    local -i max=0\n    local -i tmp=0\n\n    arr=($1)\n    n=${#arr[@]}\n    m=$((n / 2))\n\n    for ((i = m; i >= 0; i--)); do\n        k=$i\n        t=${arr[$i]}\n        while ((k < n)); do\n            l=$((2 * k + 1))\n            r=$((2 * k + 2))\n            if ((l < n && arr[l] > t)); then\n                max=l\n            else\n                max=k\n            fi\n            if ((r < n && arr[r] > arr[max])); then\n                max=r\n            fi\n            if ((max != k)); then\n                tmp=${arr[k]}\n                arr[k]=${arr[max]}\n                arr[max]=$tmp\n                k=$max\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = n - 1; i >= n - $2; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        k=0\n        t=${arr[0]}\n        while ((k < i)); do\n            l=$((2 * k + 1))\n            r=$((2 * k + 2))\n            if ((l < i && arr[l] > t)); then\n                max=l\n            else\n                max=k\n            fi\n            if ((r < i && arr[r] > arr[max])); then\n                max=r\n            fi\n            if ((max != k)); then\n                tmp=${arr[k]}\n                arr[k]=${arr[max]}\n                arr[max]=$tmp\n                k=$max\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = 0; i <",
    "  local list=\"$1\"\n  local n=\"$2\"\n\n  # Convert the list into an array\n  local array=($list)\n\n  # Create a heap queue\n  local queue=()\n  for ((i=0; i<${#array[@]}; i++)); do\n    queue[i]=${array[i]}\n  done\n  heap_queue_build queue\n\n  # Extract the largest n elements\n  local result=()\n  for ((i=0; i<n; i++)); do\n    result[i]=$(heap_queue_extract queue)\n  done\n\n  # Print the result in descending order\n  for ((i=${#result[@]}-1; i>=0; i--)); do\n    echo ${result[i]}\n  done",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n    local -a result\n\n    # build a heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[len-1-i]}\n        j=0\n        while ((j<len-1-i)); do\n            k=$((2*j+1))\n            if ((k+1<len-1-i && heap[k+1]>heap[k])); then\n                k=$((k+1))\n            fi\n            if ((k<len-1-i && heap[k]>heap[j])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # print the result\n    for ((i=0; i<n; i++)); do\n        echo ${result[i]}\n    done",
    "  local -a heap\n  local -i i\n  local -i n\n  local -i size\n  local -i tmp\n  local -i tmp2\n  local -i tmp3\n  local -i tmp4\n  local -i tmp5\n  local -i tmp6\n  local -i tmp7\n  local -i tmp8\n  local -i tmp9\n  local -i tmp10\n  local -i tmp11\n  local -i tmp12\n  local -i tmp13\n  local -i tmp14\n  local -i tmp15\n  local -i tmp16\n  local -i tmp17\n  local -i tmp18\n  local -i tmp19\n  local -i tmp20\n  local -i tmp21\n  local -i tmp22\n  local -i tmp23\n  local -i tmp24\n  local -i tmp25\n  local -i tmp26\n  local -i tmp27\n  local -i tmp28\n  local -i tmp29\n  local -i tmp30\n  local -i tmp31\n  local -i tmp32\n  local -i tmp33\n  local -i tmp34\n  local -i tmp35\n  local -i tmp36\n  local -i tmp37\n  local -i tmp38\n  local -i tmp39\n  local -i tmp40\n  local -i tmp41\n  local -i tmp42\n  local -i tmp43\n  local -i tmp44\n  local -i tmp45\n  local -i tmp46\n  local -i tmp47\n  local -i tmp48\n  local -i tmp49\n  local -i tmp50\n  local -i tmp51\n  local -i tmp52\n  local -i tmp53\n  local -i tmp54\n  local -i tmp55\n  local -i tmp56\n  local -i tmp57\n  local -i tmp58\n  local -i tmp59\n  local -i tmp60\n  local -i tmp61\n  local -i tmp62\n  local -i tmp63\n  local -i tmp64\n  local -i tmp65\n  local -i tmp66\n  local -i tmp67\n  local -i tmp68\n  local -i tmp69\n  local -i tmp",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i len=0\n    local -i max=0\n    local -i max_idx=0\n    local -i max_idx_child=0\n    local -i max_idx_child_child=0\n    local -i max_idx_child_child_child=0\n    local -i max_idx_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_",
    "  local list=($1)\n  local n=$2\n  local i\n  local j\n  local temp\n  local len=${#list[@]}\n\n  # Build the heap\n  for ((i = len/2-1; i >= 0; i--)); do\n    j=$i\n    while true; do\n      if [[ $((2*j+1)) -lt $len && ${list[$j]} -lt ${list[$((2*j+1))]} ]]; then\n        temp=${list[$j]}\n        list[$j]=${list[$((2*j+1))]}\n        list[$((2*j+1))]=$temp\n      fi\n      if [[ $((2*j+2)) -lt $len && ${list[$j]} -lt ${list[$((2*j+2))]} ]]; then\n        temp=${list[$j]}\n        list[$j]=${list[$((2*j+2))]}\n        list[$((2*j+2))]=$temp\n      fi\n      if [[ $((2*j+1)) -ge $len && $((2*j+2)) -ge $len ]]; then\n        break\n      fi\n      j=$((2*j+1))\n    done\n  done\n\n  # Extract the largest n elements\n  for ((i = 0; i < n; i++)); do\n    temp=${list[0]}\n    list[0]=${list[$((len-i-1))]}\n    list[$((len-i-1))]=$temp\n    j=0\n    while true; do\n      if [[ $((2*j+1)) -lt $((len-i-1)) && ${list[$j]} -lt ${list[$((2*j+1))]} ]]; then\n        temp=${list[$j]}\n        list[$j]=${list[$((2*j+1))]}\n        list[$((2*j+1))]=$temp\n      fi\n      if [[ $((2*j+2)) -lt $((len-i-1)) && ${list[$j]} -lt ${list[$((2*j",
    "    local -a nums=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#nums[@]}\n    for ((i=0; i<n; i++)); do\n        heap[i]=${nums[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        tmp=${heap[k]}\n        while ((k<n/2)); do\n            j=2*k+1\n            if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n                j++\n            fi\n            if ((tmp>=heap[j])); then\n                break\n            fi\n            heap[k]=${heap[j]}\n            k=j\n        done\n        heap[k]=$tmp\n    done\n    for ((i=n; i<len; i++)); do\n        if ((nums[i]>heap[0])); then\n            heap[0]=${nums[i]}\n            k=0\n            tmp=${heap[k]}\n            while ((k<n/2)); do\n                j=2*k+1\n                if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n                    j++\n                fi\n                if ((tmp>=heap[j])); then\n                    break\n                fi\n                heap[k]=${heap[j]}\n                k=j\n            done\n            heap[k]=$tmp\n        fi\n    done\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        k=0\n        while ((k<i/2)); do\n            j=2*k+1\n            if ((j<i-1)) && ((heap[j]<heap[j+1])); then\n                j++\n            fi\n            if ((tmp>=heap[j])); then\n                break\n            fi\n",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n    local heap_size=0\n    local result_size=0\n\n    for i in $list; do\n        heap[heap_size++]=$i\n        j=$((heap_size-1))\n        while [ $j -gt 0 ]; do\n            k=$(((j-1)/2))\n            if [ ${heap[j]} -gt ${heap[k]} ]; then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    while [ $heap_size -gt 0 ]; do\n        result[result_size++]=${heap[0]}\n        heap[0]=${heap[--heap_size]}\n        j=0\n        while [ $j -lt $heap_size ]; do\n            k=$((2*j+1))\n            if [ $k -ge $heap_size ]; then\n                break\n            fi\n            if [ $((k+1)) -lt $heap_size ] && [ ${heap[k+1]} -gt ${heap[k]} ]; then\n                k=$((k+1))\n            fi\n            if [ ${heap[j]} -lt ${heap[k]} ]; then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${result[i]}\n    done"
  ]
}