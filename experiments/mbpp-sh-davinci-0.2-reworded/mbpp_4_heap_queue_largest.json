{
  "name": "mbpp_4_heap_queue_largest",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n#\n# $1 is a space-separated list\n# $2 is an integer\nheap_queue_largest() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    heap_queue_largest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"3\") = \"85 75 65\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"2\") = \"85 75\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"5\") = \"85 75 65 58 35\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=$1\n    local n=$2\n    local heap=()\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local len=0\n\n    len=${#list[@]}\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2; i>=0; i--)); do\n        for ((j=i; j*2+1<n; j=k)); do\n            k=j*2+1\n            if ((k+1<n && heap[k+1]>heap[k])); then\n                k+=1\n            fi\n            if ((heap[k]>heap[j])); then\n                temp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$temp\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n; i<len; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            for ((j=0; j*2+1<n; j=k)); do\n                k=j*2+1\n                if ((k+1<n && heap[k+1]>heap[k])); then\n                    k+=1\n                fi\n                if ((heap[k]>heap[j])); then\n                    temp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$temp\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        temp=${heap[i]}\n        heap[i]=${heap[0]}\n        heap[0]=$temp\n        for ((j=0; j*2+1<i; j=k)); do\n            k=j*2+1\n            if ((k+1<i && heap[k+1]>heap[k])); then\n                k+=1\n            fi",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    heap_build_max_heap heap\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_max_heapify heap 0\n        fi\n    done\n    echo \"${heap[@]}\"",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -i heap_size=0\n  local -i i\n  local -i j\n  local -i k\n  local -i tmp\n  local -i list_size\n  local -i list_size_minus_n\n  local -i list_size_minus_1\n  local -i list_size_minus_n_minus_1\n  local -i list_size_minus_n_minus_2\n  local -i list_size_minus_n_minus_3\n  local -i list_size_minus_n_minus_4\n  local -i list_size_minus_n_minus_5\n  local -i list_size_minus_n_minus_6\n  local -i list_size_minus_n_minus_7\n  local -i list_size_minus_n_minus_8\n  local -i list_size_minus_n_minus_9\n  local -i list_size_minus_n_minus_10\n  local -i list_size_minus_n_minus_11\n  local -i list_size_minus_n_minus_12\n  local -i list_size_minus_n_minus_13\n  local -i list_size_minus_n_minus_14\n  local -i list_size_minus_n_minus_15\n  local -i list_size_minus_n_minus_16\n  local -i list_size_minus_n_minus_17\n  local -i list_size_minus_n_minus_18\n  local -i list_size_minus_n_minus_19\n  local -i list_size_minus_n_minus_20\n  local -i list_size_minus_n_minus_21\n  local -i list_size_minus_n_minus_22\n  local -i list_size_minus_n_minus_23\n  local -i list_size_minus_n_minus_24\n  local -i list_size_minus_n_minus_25\n  local -i list_size_minus_n_minus_26\n  local -i list_size",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n\n    # Build a max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        while ((2*k+1<len)); do\n            j=2*k+1\n            if ((j+1<len && list[j]<list[j+1])) ; then\n                j=$j+1\n            fi\n            if ((list[k]<list[j])) ; then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the top n elements\n    for ((i=0; i<n; i++)); do\n        tmp=${list[0]}\n        list[0]=${list[len-i-1]}\n        list[len-i-1]=$tmp\n        k=0\n        while ((2*k+1<len-i-1)); do\n            j=2*k+1\n            if ((j+1<len-i-1 && list[j]<list[j+1])) ; then\n                j=$j+1\n            fi\n            if ((list[k]<list[j])) ; then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the result\n    for ((i=0; i<n; i++)); do\n        echo ${list[len-i-1]}\n    done",
    "  local -a heap=($1)\n  local n=$2\n  local i\n  local j\n  local k\n  local tmp\n\n  # Build the heap\n  for ((i=${#heap[@]}/2-1; i>=0; i--)); do\n    k=$i\n    while ((2*k+1 < ${#heap[@]})); do\n      j=2*k+1\n      if ((j < ${#heap[@]}-1 && heap[j] < heap[j+1])); then\n        j+=1\n      fi\n      if ((heap[k] < heap[j])); then\n        tmp=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$tmp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  # Extract the largest elements\n  for ((i=0; i<n; i++)); do\n    if ((i < ${#heap[@]})); then\n      echo -n \"${heap[0]} \"\n      heap[0]=${heap[${#heap[@]}-1]}\n      heap=(${heap[@]:0:${#heap[@]}-1})\n      k=0\n      while ((2*k+1 < ${#heap[@]})); do\n        j=2*k+1\n        if ((j < ${#heap[@]}-1 && heap[j] < heap[j+1])); then\n          j+=1\n        fi\n        if ((heap[k] < heap[j])); then\n          tmp=${heap[k]}\n          heap[k]=${heap[j]}\n          heap[j]=$tmp\n          k=$j\n        else\n          break\n        fi\n      done\n    fi\n  done\n  echo",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n\n    # Build the heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j+1<n && heap[j]<heap[j+1])); then\n                j=$j+1\n            fi\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    # Find the n largest integers\n    for ((i=n; i<${#list[@]}; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            k=0\n            while ((2*k+1<n)); do\n                j=2*k+1\n                if ((j+1<n && heap[j]<heap[j+1])); then\n                    j=$j+1\n                fi\n                if ((heap[k]<heap[j])); then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                    k=$j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    # Print the result\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[i]} \"\n    done\n    echo",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n    local size=${#list[@]}\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2; i>=0; i--)); do\n        for ((j=i; j*2+1<n; j=2*j+1)); do\n            if ((j*2+2<n && heap[j*2+2]>heap[j*2+1])); then\n                if ((heap[j*2+2]>heap[j])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[j*2+2]}\n                    heap[j*2+2]=$tmp\n                fi\n            else\n                if ((heap[j*2+1]>heap[j])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[j*2+1]}\n                    heap[j*2+1]=$tmp\n                fi\n            fi\n        done\n    done\n\n    for ((i=n; i<size; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            for ((j=0; j*2+1<n; j=2*j+1)); do\n                if ((j*2+2<n && heap[j*2+2]>heap[j*2+1])); then\n                    if ((heap[j*2+2]>heap[j])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[j*2+2]}\n                        heap[j*2+2]=$tmp\n                    fi\n                else\n                    if ((heap[j*2+1]>heap[j])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[j*2+1]}\n                        heap[j*2+1]=$tmp\n",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i tmp\n    local -i size=${#arr[@]}\n    local -i last_parent=$((size/2-1))\n\n    # Build a heap\n    for ((i=0; i<=last_parent; i++)); do\n        heap[i]=${arr[i]}\n        j=$i\n        while ((j>0)); do\n            k=$((j-1))\n            l=$((k/2))\n            if ((heap[j]>heap[l])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[l]}\n                heap[l]=$tmp\n            fi\n            j=$l\n        done\n    done\n\n    # Insert the rest of the elements\n    for ((i=last_parent+1; i<size; i++)); do\n        heap[0]=${arr[i]}\n        j=0\n        while ((j<last_parent)); do\n            k=$((j*2+1))\n            l=$((k+1))\n            m=$k\n            if ((l<=last_parent && heap[l]>heap[k])); then\n                m=$l\n            fi\n            if ((m<=last_parent && heap[m]>heap[j])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[m]}\n                heap[m]=$tmp\n            fi\n            j=$m\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[last_parent]}\n        last_parent=$((last_parent-1))\n        j=0\n        while ((j<last_parent)); do\n            k=$((j*2+1))\n            l=$((k+1))\n            m=$k\n            if ((l<=last_parent && heap[l]>",
    "  local -a list=($1)\n  local n=$2\n  local -a heap\n  local i\n  local j\n  local temp\n  local len=${#list[@]}\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n  done\n  for ((i=n/2-1; i>=0; i--)); do\n    j=$i\n    while ((2*j+1 < n)); do\n      if ((2*j+2 < n)); then\n        if ((heap[2*j+1] > heap[2*j+2])); then\n          if ((heap[j] < heap[2*j+1])); then\n            temp=${heap[j]}\n            heap[j]=${heap[2*j+1]}\n            heap[2*j+1]=$temp\n            j=2*j+1\n          else\n            break\n          fi\n        else\n          if ((heap[j] < heap[2*j+2])); then\n            temp=${heap[j]}\n            heap[j]=${heap[2*j+2]}\n            heap[2*j+2]=$temp\n            j=2*j+2\n          else\n            break\n          fi\n        fi\n      else\n        if ((heap[j] < heap[2*j+1])); then\n          temp=${heap[j]}\n          heap[j]=${heap[2*j+1]}\n          heap[2*j+1]=$temp\n          j=2*j+1\n        else\n          break\n        fi\n      fi\n    done\n  done\n  for ((i=n; i<len; i++)); do\n    if ((list[i] > heap[0])); then\n      heap[0]=${list[i]}\n      j=0\n      while ((2*j+1 < n)); do\n        if ((2*j+2 < n)); then\n          if ((heap[2*j+1] > heap[2*j+2])); then\n            if ((heap[j] < heap[2*j+1])",
    "    local -a list=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#list[@]}\n\n    for ((i=0; i<n; i++)); do\n        for ((j=i; j<len; j++)); do\n            if ((list[i] < list[j])); then\n                tmp=${list[i]}\n                list[i]=${list[j]}\n                list[j]=$tmp\n            fi\n        done\n    done\n\n    echo ${list[@]:0:n}",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n    local -i temp2=0\n    local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n    local -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n    local -i temp41=0\n    local -i temp42=0\n    local -i temp43=0\n    local -i temp44=0\n    local -i temp45=0\n    local -i temp46=0\n    local -i temp47=0\n    local -i temp48=0\n    local -i temp49=0\n    local -i temp50=0\n    local -i temp51=0\n    local -i temp",
    "    local -a array\n    local -i i\n    local -i n\n    array=($1)\n    n=$2\n    for ((i=0; i<n; i++)); do\n        echo \"${array[i]}\"\n    done | sort -nr",
    "    local -a arr=()\n    local -i n=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i t=0\n    local -i m=0\n    local -i l=0\n    local -i r=0\n    local -i max=0\n    local -i tmp=0\n\n    arr=($1)\n    n=${#arr[@]}\n    m=$((n / 2))\n\n    for ((i = m; i >= 0; i--)); do\n        k=$i\n        t=${arr[$i]}\n        while ((k < n)); do\n            l=$((2 * k + 1))\n            r=$((2 * k + 2))\n            if ((l < n && arr[l] > t)); then\n                max=l\n            else\n                max=k\n            fi\n            if ((r < n && arr[r] > arr[max])); then\n                max=r\n            fi\n            if ((max != k)); then\n                tmp=${arr[k]}\n                arr[k]=${arr[max]}\n                arr[max]=$tmp\n                k=$max\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = n - 1; i >= n - $2; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        k=0\n        t=${arr[0]}\n        while ((k < i)); do\n            l=$((2 * k + 1))\n            r=$((2 * k + 2))\n            if ((l < i && arr[l] > t)); then\n                max=l\n            else\n                max=k\n            fi\n            if ((r < i && arr[r] > arr[max])); then\n                max=r\n            fi\n            if ((max != k)); then\n                tmp=${arr[k]}\n                arr[k]=${arr[max]}\n                arr[max]=$tmp\n                k=$max\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = 0; i <",
    "  local list=\"$1\"\n  local n=\"$2\"\n\n  # Convert the list into an array\n  local array=($list)\n\n  # Create a heap queue\n  local queue=()\n  for ((i=0; i<${#array[@]}; i++)); do\n    queue[i]=${array[i]}\n  done\n  heap_queue_build queue\n\n  # Extract the largest n elements\n  local result=()\n  for ((i=0; i<n; i++)); do\n    result[i]=$(heap_queue_extract queue)\n  done\n\n  # Print the result in descending order\n  for ((i=${#result[@]}-1; i>=0; i--)); do\n    echo ${result[i]}\n  done",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n    local -a result\n\n    # build a heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[len-1-i]}\n        j=0\n        while ((j<len-1-i)); do\n            k=$((2*j+1))\n            if ((k+1<len-1-i && heap[k+1]>heap[k])); then\n                k=$((k+1))\n            fi\n            if ((k<len-1-i && heap[k]>heap[j])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # print the result\n    for ((i=0; i<n; i++)); do\n        echo ${result[i]}\n    done",
    "  local -a heap\n  local -i i\n  local -i n\n  local -i size\n  local -i tmp\n  local -i tmp2\n  local -i tmp3\n  local -i tmp4\n  local -i tmp5\n  local -i tmp6\n  local -i tmp7\n  local -i tmp8\n  local -i tmp9\n  local -i tmp10\n  local -i tmp11\n  local -i tmp12\n  local -i tmp13\n  local -i tmp14\n  local -i tmp15\n  local -i tmp16\n  local -i tmp17\n  local -i tmp18\n  local -i tmp19\n  local -i tmp20\n  local -i tmp21\n  local -i tmp22\n  local -i tmp23\n  local -i tmp24\n  local -i tmp25\n  local -i tmp26\n  local -i tmp27\n  local -i tmp28\n  local -i tmp29\n  local -i tmp30\n  local -i tmp31\n  local -i tmp32\n  local -i tmp33\n  local -i tmp34\n  local -i tmp35\n  local -i tmp36\n  local -i tmp37\n  local -i tmp38\n  local -i tmp39\n  local -i tmp40\n  local -i tmp41\n  local -i tmp42\n  local -i tmp43\n  local -i tmp44\n  local -i tmp45\n  local -i tmp46\n  local -i tmp47\n  local -i tmp48\n  local -i tmp49\n  local -i tmp50\n  local -i tmp51\n  local -i tmp52\n  local -i tmp53\n  local -i tmp54\n  local -i tmp55\n  local -i tmp56\n  local -i tmp57\n  local -i tmp58\n  local -i tmp59\n  local -i tmp60\n  local -i tmp61\n  local -i tmp62\n  local -i tmp63\n  local -i tmp64\n  local -i tmp65\n  local -i tmp66\n  local -i tmp67\n  local -i tmp68\n  local -i tmp69\n  local -i tmp",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i len=0\n    local -i max=0\n    local -i max_idx=0\n    local -i max_idx_child=0\n    local -i max_idx_child_child=0\n    local -i max_idx_child_child_child=0\n    local -i max_idx_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_child_child_child_child=0\n    local -i max_idx_child_child_child_child_child_child_child_child_child_child_child_",
    "  local list=($1)\n  local n=$2\n  local i\n  local j\n  local temp\n  local len=${#list[@]}\n\n  # Build the heap\n  for ((i = len/2-1; i >= 0; i--)); do\n    j=$i\n    while true; do\n      if [[ $((2*j+1)) -lt $len && ${list[$j]} -lt ${list[$((2*j+1))]} ]]; then\n        temp=${list[$j]}\n        list[$j]=${list[$((2*j+1))]}\n        list[$((2*j+1))]=$temp\n      fi\n      if [[ $((2*j+2)) -lt $len && ${list[$j]} -lt ${list[$((2*j+2))]} ]]; then\n        temp=${list[$j]}\n        list[$j]=${list[$((2*j+2))]}\n        list[$((2*j+2))]=$temp\n      fi\n      if [[ $((2*j+1)) -ge $len && $((2*j+2)) -ge $len ]]; then\n        break\n      fi\n      j=$((2*j+1))\n    done\n  done\n\n  # Extract the largest n elements\n  for ((i = 0; i < n; i++)); do\n    temp=${list[0]}\n    list[0]=${list[$((len-i-1))]}\n    list[$((len-i-1))]=$temp\n    j=0\n    while true; do\n      if [[ $((2*j+1)) -lt $((len-i-1)) && ${list[$j]} -lt ${list[$((2*j+1))]} ]]; then\n        temp=${list[$j]}\n        list[$j]=${list[$((2*j+1))]}\n        list[$((2*j+1))]=$temp\n      fi\n      if [[ $((2*j+2)) -lt $((len-i-1)) && ${list[$j]} -lt ${list[$((2*j",
    "    local -a nums=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#nums[@]}\n    for ((i=0; i<n; i++)); do\n        heap[i]=${nums[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        tmp=${heap[k]}\n        while ((k<n/2)); do\n            j=2*k+1\n            if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n                j++\n            fi\n            if ((tmp>=heap[j])); then\n                break\n            fi\n            heap[k]=${heap[j]}\n            k=j\n        done\n        heap[k]=$tmp\n    done\n    for ((i=n; i<len; i++)); do\n        if ((nums[i]>heap[0])); then\n            heap[0]=${nums[i]}\n            k=0\n            tmp=${heap[k]}\n            while ((k<n/2)); do\n                j=2*k+1\n                if ((j<n-1)) && ((heap[j]<heap[j+1])); then\n                    j++\n                fi\n                if ((tmp>=heap[j])); then\n                    break\n                fi\n                heap[k]=${heap[j]}\n                k=j\n            done\n            heap[k]=$tmp\n        fi\n    done\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        k=0\n        while ((k<i/2)); do\n            j=2*k+1\n            if ((j<i-1)) && ((heap[j]<heap[j+1])); then\n                j++\n            fi\n            if ((tmp>=heap[j])); then\n                break\n            fi\n",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n    local heap_size=0\n    local result_size=0\n\n    for i in $list; do\n        heap[heap_size++]=$i\n        j=$((heap_size-1))\n        while [ $j -gt 0 ]; do\n            k=$(((j-1)/2))\n            if [ ${heap[j]} -gt ${heap[k]} ]; then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    while [ $heap_size -gt 0 ]; do\n        result[result_size++]=${heap[0]}\n        heap[0]=${heap[--heap_size]}\n        j=0\n        while [ $j -lt $heap_size ]; do\n            k=$((2*j+1))\n            if [ $k -ge $heap_size ]; then\n                break\n            fi\n            if [ $((k+1)) -lt $heap_size ] && [ ${heap[k+1]} -gt ${heap[k]} ]; then\n                k=$((k+1))\n            fi\n            if [ ${heap[j]} -lt ${heap[k]} ]; then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${result[i]}\n    done",
    "    local -a heap\n    local -i i n\n    local -i largest\n\n    # Build the heap\n    for i in $1; do\n        heap_queue_insert heap[@] $i\n    done\n\n    # Extract the largest $2 elements\n    for ((n=0; n<$2; n++)); do\n        heap_queue_extract heap[@] largest\n        echo $largest\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n    local len\n\n    # Build a heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        len=${#heap[@]}\n        j=$((len-1))\n        while [ $j -gt 0 ]; do\n            k=$(((j-1)/2))\n            if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        result[$i]=${heap[0]}\n        len=${#heap[@]}\n        heap[0]=${heap[$((len-1))]}\n        unset heap[$((len-1))]\n        len=${#heap[@]}\n        j=0\n        while [ $j -lt $len ]; do\n            k=$((2*j+1))\n            if [ $k -ge $len ]; then\n                break\n            fi\n            if [ $((k+1)) -lt $len ] && [ ${heap[$((k+1))]} -gt ${heap[$k]} ]; then\n                k=$((k+1))\n            fi\n            if [ ${heap[$j]} -lt ${heap[$k]} ]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    echo ${result[@]}",
    "    local -a arr=($1)\n    local n=$2\n    local len=${#arr[@]}\n    local i\n    local j\n    local tmp\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((2 * j + 1 < n)); do\n            if ((2 * j + 2 < n && arr[2 * j + 2] > arr[2 * j + 1])); then\n                tmp=${arr[j]}\n                arr[j]=${arr[2 * j + 2]}\n                arr[2 * j + 2]=$tmp\n                j=2 * j + 2\n            else\n                tmp=${arr[j]}\n                arr[j]=${arr[2 * j + 1]}\n                arr[2 * j + 1]=$tmp\n                j=2 * j + 1\n            fi\n        done\n    done\n\n    for ((i = n; i < len; i++)); do\n        if ((arr[i] > arr[0])); then\n            arr[0]=${arr[i]}\n            j=0\n            while ((2 * j + 1 < n)); do\n                if ((2 * j + 2 < n && arr[2 * j + 2] > arr[2 * j + 1])); then\n                    tmp=${arr[j]}\n                    arr[j]=${arr[2 * j + 2]}\n                    arr[2 * j + 2]=$tmp\n                    j=2 * j + 2\n                else\n                    tmp=${arr[j]}\n                    arr[j]=${arr[2 * j + 1]}\n                    arr[2 * j + 1]=$tmp\n                    j=2 * j + 1\n                fi\n            done\n        fi\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        tmp=${arr[i]}\n        arr[i]=${arr[0]}\n        arr[0]=$tmp\n        j=0\n        while ((2 * j + 1 < i)); do\n            if ((2 * j + 2 < i && arr[2 * j + 2] > arr[2 * j + 1])); then\n                tmp=${arr[j]}\n               ",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i temp=0\n    local -i temp2=0\n    local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n    local -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n    local -i temp41=0\n    local -i temp42=0\n    local -i temp43=0\n    local -i temp44=0\n    local -i temp45=0\n    local -i temp46=0\n    local -i temp47=0\n    local -i temp48",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local l\n    local m\n    local tmp\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((k<n/2)); do\n            j=2*k+1\n            if ((j+1<n && heap[j]<heap[j+1])); then\n                j+=1\n            fi\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            k=j\n        done\n    done\n\n    for ((i=n; i<${#list[@]}; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            k=0\n            while ((k<n/2)); do\n                j=2*k+1\n                if ((j+1<n && heap[j]<heap[j+1])); then\n                    j+=1\n                fi\n                if ((heap[k]<heap[j])); then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                fi\n                k=j\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[i]}\n        k=0\n        while ((k<i/2)); do\n            j=2*k+1\n            if ((j+1<i && heap[j]<heap[j+1])); then\n                j+=1\n            fi\n            if ((heap[k]<heap[j])); then\n                tmp=${",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n    local -i k=0\n    local -i j=0\n    local -i tmp=0\n    local -i largest=0\n    local -i largest_idx=0\n    local -i left=0\n    local -i right=0\n    local -i largest_child=0\n    local -i largest_child_idx=0\n    local -i parent=0\n    local -i parent_idx=0\n    local -i parent_value=0\n    local -i child_value=0\n    local -i child_idx=0\n    local -i child_idx_value=0\n    local -i child_idx_value_idx=0\n    local -i child_idx_value_value=0\n    local -i child_idx_value_value_idx=0\n    local -i child_idx_value_value_value=0\n    local -i child_idx_value_value_value_idx=0\n    local -i child_idx_value_value_value_value=0\n    local -i child_idx_value_value_value_value_idx=0\n    local -i child_idx_value_value_value_value_value=0\n    local -i child_idx_value_value_value_value_value_idx=0\n    local -i child_idx_value_value_value_value_value_value=0\n    local -i child_idx_value_value_value_value_value_value_idx=0\n    local -i child_idx_value_value_value_value_value_value_value=0\n    local -i child_idx_value_value_value_value_value_value_value_idx=0\n    local -i child_idx_value_value_value_value_value_value_value_value=0\n    local -i child_idx_value_value_value_value_value_value_value_value_idx=0\n    local -",
    "  local -a heap\n  local -i i\n  local -i n=$2\n  local -i len=${#1}\n  local -i index=0\n  local -i left\n  local -i right\n  local -i largest\n  local -i temp\n  local -i parent\n\n  for ((i=0; i<len; i++)); do\n    heap[index++]=${1[i]}\n    parent=$((index/2-1))\n    while ((parent>=0)); do\n      if ((heap[parent]<heap[index-1])); then\n        temp=heap[parent]\n        heap[parent]=heap[index-1]\n        heap[index-1]=temp\n      fi\n      index=$parent\n      parent=$((index/2-1))\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    echo ${heap[0]}\n    heap[0]=${heap[--index]}\n    parent=0\n    while ((1)); do\n      left=$((parent*2+1))\n      right=$((parent*2+2))\n      if ((left>=index)); then\n        break\n      elif ((right>=index)); then\n        largest=$left\n      else\n        largest=$((heap[left]>heap[right]?left:right))\n      fi\n      if ((heap[parent]<heap[largest])); then\n        temp=heap[parent]\n        heap[parent]=heap[largest]\n        heap[largest]=temp\n      else\n        break\n      fi\n      parent=$largest\n    done\n  done",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n\n    # build a heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        for ((j=i; j*2+1<n; j=2*j+1)); do\n            if ((j*2+2 < n && heap[j*2+2] > heap[j*2+1])) ; then\n                ((j=j*2+2))\n            fi\n            if ((heap[j] < heap[j*2+1])) ; then\n                tmp=${heap[j]}\n                heap[j]=${heap[j*2+1]}\n                heap[j*2+1]=$tmp\n            fi\n        done\n    done\n\n    # insert the rest of the elements\n    for ((i=n; i<len; i++)); do\n        if ((arr[i] > heap[0])) ; then\n            heap[0]=${arr[i]}\n            for ((j=0; j*2+1<n; j=2*j+1)); do\n                if ((j*2+2 < n && heap[j*2+2] > heap[j*2+1])) ; then\n                    ((j=j*2+2))\n                fi\n                if ((heap[j] < heap[j*2+1])) ; then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[j*2+1]}\n                    heap[j*2+1]=$tmp\n                fi\n            done\n        fi\n    done\n\n    # sort the heap\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$tmp\n        for ((j=0; j*2+1<i; j=2*j+",
    "  local -a heap\n  local -i i=0\n  local -i n=$2\n  local -i size=0\n  local -i temp\n  local -i parent\n  local -i child\n\n  for i in $1; do\n    heap[size]=$i\n    ((size++))\n    child=$size-1\n    parent=$((child/2))\n    while ((parent>=0 && heap[parent]<heap[child])); do\n      temp=heap[parent]\n      heap[parent]=heap[child]\n      heap[child]=$temp\n      ((child=parent))\n      ((parent=child/2))\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    echo ${heap[0]}\n    ((size--))\n    heap[0]=${heap[size]}\n    parent=0\n    child=1\n    while ((child<size)); do\n      if ((child+1<size && heap[child+1]>heap[child])); then\n        ((child++))\n      fi\n      if ((heap[parent]>=heap[child])); then\n        break\n      fi\n      temp=heap[parent]\n      heap[parent]=heap[child]\n      heap[child]=$temp\n      ((parent=child))\n      ((child=parent*2+1))\n    done\n  done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i heap_size=0\n    local -i list_size=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_index_2=0\n    local -i temp_index_3=0\n    local -i temp_index_4=0\n    local -i temp_index_5=0\n    local -i temp_index_6=0\n    local -i temp_index_7=0\n    local -i temp_index_8=0\n    local -i temp_index_9=0\n    local -i temp_index_10=0\n    local -i temp_index_11=0\n    local -i temp_index_12=0\n    local -i temp_index_13=0\n    local -i temp_index_14=0\n    local -i temp_index_15=0\n    local -i temp_index_16=0\n    local -i temp_index_17=0\n    local -i temp_index_18=0\n    local -i temp_index_19=0\n    local -i temp_index_20=0\n    local -i temp_index_21=0\n    local -i temp_index_22=0\n    local -i temp_index_23=0\n    local -i temp_index_24=0\n    local -i temp_index_25=0\n    local -i temp_index_26=0\n    local -i temp_index_27=0\n    local -i temp_index_28=0\n    local -i temp_index_29=0\n    local -i temp_index_30=0\n    local -i temp_index_31=0\n    local -i temp_index_32=0\n    local -i temp_index_33=0\n    local -i temp_index_34=0\n    local -i temp_index_35=0\n    local -i temp_index_36=0\n    local -i temp_index",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i\n\n    for ((i=0; i < ${#list[@]}; i++)); do\n        if (( ${#heap[@]} < n )); then\n            heap_queue_insert heap \"${list[i]}\"\n        else\n            if (( ${list[i]} > ${heap[0]} )); then\n                heap_queue_pop heap\n                heap_queue_insert heap \"${list[i]}\"\n            fi\n        fi\n    done\n\n    for ((i=0; i < n; i++)); do\n        echo -n \"$(heap_queue_pop heap) \"\n    done\n    echo",
    "    local -a array=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local temp\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${array[i]}\n    done\n\n    for ((i=n; i<${#array[@]}; i++)); do\n        if [[ ${array[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${array[i]}\n            j=0\n            while true; do\n                if [[ $((2*j+1)) -lt $n ]]; then\n                    if [[ $((2*j+2)) -lt $n ]]; then\n                        if [[ ${heap[$((2*j+1))]} -gt ${heap[$((2*j+2))]} ]]; then\n                            if [[ ${heap[$((2*j+1))]} -gt ${heap[$j]} ]]; then\n                                temp=${heap[$j]}\n                                heap[$j]=${heap[$((2*j+1))]}\n                                heap[$((2*j+1))]=$temp\n                                j=$((2*j+1))\n                            else\n                                break\n                            fi\n                        else\n                            if [[ ${heap[$((2*j+2))]} -gt ${heap[$j]} ]]; then\n                                temp=${heap[$j]}\n                                heap[$j]=${heap[$((2*j+2))]}\n                                heap[$((2*j+2))]=$temp\n                                j=$((2*j+2))\n                            else\n                                break\n                            fi\n                        fi\n                    else\n                        if [[ ${heap[$((2*j+1))]} -gt ${heap[$j]} ]]; then\n                            temp=${heap[$j]}\n                            heap[$j]=${heap[$((2*j+1))]}\n                            heap[$((2*j+1))]=$temp\n                            j=$((2*j+1))\n                        else\n                            break",
    "  local -a arr=($1)\n  local n=$2\n  local -a heap=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    heap[i]=${arr[i]}\n  done\n\n  for ((i=${#heap[@]}-1; i>0; i--)); do\n    for ((j=i; j>0; j--)); do\n      k=$((j-1))\n      if ((heap[j]>heap[k])); then\n        l=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$l\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    echo ${heap[i]}\n  done",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i max=0\n    local -i max_index=0\n    local -i parent=0\n    local -i child=0\n    local -i child_index=0\n    local -i parent_index=0\n    local -i last_index=0\n    local -i last_parent_index=0\n    local -i last_parent=0\n    local -i last_child_index=0\n    local -i last_child=0\n    local -i last_parent_child_index=0\n    local -i last_parent_child=0\n    local -i last_parent_child_index_2=0\n    local -i last_parent_child_2=0\n    local -i last_parent_child_index_3=0\n    local -i last_parent_child_3=0\n\n    if [[ $# -ne 2 ]]; then\n        echo \"Usage: $0 <space-separated list> <integer>\"\n        return 1\n    fi\n\n    # Convert the space-separated list to an array\n    arr=($1)\n\n    # Get the length of the array\n    len=${#arr[@]}\n\n    # If the length of the array is less than n, return the array\n    if [[ $len -lt $n ]]; then\n        echo \"${arr[@]}\"\n        return 0\n    fi\n\n    # Build the heap\n    for ((i=0; i<n; i++)); do\n        # Get the current element\n        tmp=${arr[i]}\n\n        # Get the index of the current element\n        j=$i\n\n        # Get the index of the parent of the current element\n        parent_index=$(((j-1)/2))\n\n        # Get the parent of the current element\n        parent=${arr[parent_index]}\n\n        # While the current element is greater than its parent, swap the current element with its parent\n        while [[ $tmp -gt $parent ]]; do\n            # Swap the",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i heap_size=0\n    local -i parent\n    local -i child\n    local -i temp\n    local -i temp_index\n    local -i max_index\n    local -i max_value\n    local -i max_value_index\n    local -i max_value_index_temp\n    local -i max_value_index_temp_index\n    local -i max_value_index_temp_index_temp\n    local -i max_value_index_temp_index_temp_index\n    local -i max_value_index_temp_index_temp_index_temp\n    local -i max_value_index_temp_index_temp_index_temp_index\n    local -i max_value_index_temp_index_temp_index_temp_index_temp\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index_temp\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index_temp_index\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp\n    local -i max_value_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#list[@]}\n\n    # build heap\n    for ((i=len/2-1; i>=0; i--)); do\n        j=$i\n        while true; do\n            tmp=${list[j]}\n            local left=$((2*j+1))\n            local right=$((2*j+2))\n            if [[ $left -lt $len && ${list[$left]} -gt $tmp ]]; then\n                tmp=${list[$left]}\n                j=$left\n            fi\n            if [[ $right -lt $len && ${list[$right]} -gt $tmp ]]; then\n                tmp=${list[$right]}\n                j=$right\n            fi\n            if [[ $j -eq $i ]]; then\n                break\n            fi\n            list[$j]=${list[$i]}\n            list[$i]=$tmp\n        done\n    done\n\n    # get the n largest numbers\n    for ((i=0; i<n; i++)); do\n        echo ${list[0]}\n        list[0]=${list[$((len-i-1))]}\n        list[$((len-i-1))]=${list[0]}\n        j=0\n        while true; do\n            tmp=${list[j]}\n            local left=$((2*j+1))\n            local right=$((2*j+2))\n            if [[ $left -lt $((len-i-1)) && ${list[$left]} -gt $tmp ]]; then\n                tmp=${list[$left]}\n                j=$left\n            fi\n            if [[ $right -lt $((len-i-1)) && ${list[$right]} -gt $tmp ]]; then\n                tmp=${list[$right]}\n                j=$right\n            fi\n            if [[ $j -eq $i ]]; then\n                break\n            fi\n            list[$j]=${list[$i]}\n            list[$i]=$tmp\n        done\n    done",
    "    local -a arr\n    local -i i\n    local -i n\n    local -i len\n    local -i max\n    local -i max_index\n    local -i tmp\n    local -i tmp_index\n\n    arr=($1)\n    n=$2\n    len=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n                max_index=$j\n            fi\n        done\n        tmp=${arr[i]}\n        tmp_index=$i\n        arr[i]=$max\n        arr[max_index]=$tmp\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i idx=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i temp=0\n    local -i swap=0\n\n    arr=($1)\n    n=$2\n    len=${#arr[@]}\n\n    # Build a max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        idx=$i\n        while true; do\n            left=$((2*idx+1))\n            right=$((2*idx+2))\n            largest=$idx\n            if [[ $left -lt $len && ${arr[$left]} -gt ${arr[$largest]} ]]; then\n                largest=$left\n            fi\n            if [[ $right -lt $len && ${arr[$right]} -gt ${arr[$largest]} ]]; then\n                largest=$right\n            fi\n            if [[ $largest -ne $idx ]]; then\n                temp=${arr[$idx]}\n                arr[$idx]=${arr[$largest]}\n                arr[$largest]=$temp\n                idx=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the max element n times\n    for ((i=0; i<n; i++)); do\n        temp=${arr[0]}\n        arr[0]=${arr[$((len-i-1))]}\n        arr[$((len-i-1))]=$temp\n        idx=0\n        while true; do\n            left=$((2*idx+1))\n            right=$((2*idx+2))\n            largest=$idx\n            if [[ $left -lt $((len-i-1)) && ${arr[$left]} -gt ${arr[$largest]} ]]; then\n                largest=$left\n            fi\n            if [[ $right -lt $((len-i-1)) && ${arr[$right]} -gt ${arr[$largest]} ]]; then\n                largest=$right\n            fi\n            if [[ $",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i\n    for ((i=0; i < n; i++)); do\n        heap_queue_push heap \"${list[i]}\"\n    done\n    for ((i=n; i < ${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap_queue_pop heap\n            heap_queue_push heap \"${list[i]}\"\n        fi\n    done\n    echo \"${heap[@]}\"",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -a result\n\n  # Create the heap\n  for i in $list; do\n    heap_queue_insert heap \"$i\"\n  done\n\n  # Extract the largest n elements\n  for ((i=0; i<n; i++)); do\n    result[i]=$(heap_queue_extract heap)\n  done\n\n  # Print the result\n  for ((i=n-1; i>=0; i--)); do\n    echo \"${result[i]}\"\n  done",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#list[@]}\n\n    # build heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((j < len / 2)); do\n            if ((2 * j + 2 < len && list[2 * j + 2] > list[2 * j + 1])) && ((list[2 * j + 2] > list[j])); then\n                tmp=${list[j]}\n                list[j]=${list[2 * j + 2]}\n                list[2 * j + 2]=$tmp\n                j=2 * j + 2\n            elif ((list[2 * j + 1] > list[j])); then\n                tmp=${list[j]}\n                list[j]=${list[2 * j + 1]}\n                list[2 * j + 1]=$tmp\n                j=2 * j + 1\n            else\n                break\n            fi\n        done\n    done\n\n    # pop n times\n    for ((i = 0; i < n; i++)); do\n        tmp=${list[0]}\n        list[0]=${list[len - 1]}\n        list[len - 1]=$tmp\n        len=$((len - 1))\n        j=0\n        while ((j < len / 2)); do\n            if ((2 * j + 2 < len && list[2 * j + 2] > list[2 * j + 1])) && ((list[2 * j + 2] > list[j])); then\n                tmp=${list[j]}\n                list[j]=${list[2 * j + 2]}\n                list[2 * j + 2]=$tmp\n                j=2 * j + 2\n            elif ((list[2 * j + 1] > list[j])); then\n                tmp=${list[j]}\n                list[j]=${list[2 * j + 1]}\n                list[2 * j + 1]=$tmp\n                j=2 * j + 1\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]:0:n",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local -a result=()\n\n    for i in ${list[@]}; do\n        heap_queue_insert heap $i\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[i]=$(heap_queue_pop heap)\n    done\n\n    echo ${result[@]}",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        for ((j = i; j * 2 + 1 < len; j = j * 2 + 1)); do\n            if ((j * 2 + 2 < len && arr[j * 2 + 2] > arr[j * 2 + 1])); then\n                ((arr[j] < arr[j * 2 + 2])) && {\n                    tmp=${arr[j]}\n                    arr[j]=${arr[j * 2 + 2]}\n                    arr[j * 2 + 2]=$tmp\n                }\n            else\n                ((arr[j] < arr[j * 2 + 1])) && {\n                    tmp=${arr[j]}\n                    arr[j]=${arr[j * 2 + 1]}\n                    arr[j * 2 + 1]=$tmp\n                }\n            fi\n        done\n    done\n\n    for ((i = 0; i < n; i++)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[len - 1 - i]}\n        arr[len - 1 - i]=$tmp\n        for ((j = 0; j * 2 + 1 < len - i - 1; j = j * 2 + 1)); do\n            if ((j * 2 + 2 < len - i - 1 && arr[j * 2 + 2] > arr[j * 2 + 1])); then\n                ((arr[j] < arr[j * 2 + 2])) && {\n                    tmp=${arr[j]}\n                    arr[j]=${arr[j * 2 + 2]}\n                    arr[j * 2 + 2]=$tmp\n                }\n            else\n                ((arr[j] < arr[j * 2 + 1])) && {\n                    tmp=${arr[j]}\n                    arr[j]=${arr[j * 2 + 1]}\n                    arr[j * 2 + 1]=$tmp\n                }\n            fi\n        done\n    done\n\n    echo ${arr[@]: -$n}",
    "    local -a heap\n    local -i i j k\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_parent=$(( (len - 2) / 2 ))\n    local -i last_leaf=$(( len - 1 ))\n    local -i parent child\n    local -i swap\n    local -i tmp\n\n    # Build a heap from the list\n    for (( i=0; i<len; i++ )); do\n        heap[i]=${1:i:1}\n    done\n    for (( i=last_parent; i>=0; i-- )); do\n        parent=i\n        child=$(( 2 * parent + 1 ))\n        while (( child <= last_leaf )); do\n            if (( child < last_leaf && heap[child] < heap[child+1] )); then\n                child=$(( child + 1 ))\n            fi\n            if (( heap[parent] < heap[child] )); then\n                tmp=heap[parent]\n                heap[parent]=heap[child]\n                heap[child]=$tmp\n                parent=$child\n                child=$(( 2 * parent + 1 ))\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the n largest integers from the heap\n    for (( i=0; i<n; i++ )); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[last_leaf]}\n        last_leaf=$(( last_leaf - 1 ))\n        parent=0\n        child=$(( 2 * parent + 1 ))\n        while (( child <= last_leaf )); do\n            if (( child < last_leaf && heap[child] < heap[child+1] )); then\n                child=$(( child + 1 ))\n            fi\n            if (( heap[parent] < heap[child] )); then\n                tmp=heap[parent]\n                heap[parent]=heap[child]\n                heap[child]=$tmp\n                parent=$child\n                child=$(( 2 * parent + 1 ))\n            else\n                break\n            fi\n        done\n    done\n    echo",
    "    local list=$1\n    local n=$2\n    local -a heap=()\n    local -a result=()\n\n    for i in $list; do\n        heap_push heap $i\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[$i]=$(heap_pop heap)\n    done\n\n    echo \"${result[@]}\"",
    "    local -a list=($1)\n    local n=$2\n    local -a queue=()\n    local i\n    for ((i=0; i<${#list[@]}; i++)); do\n        if (( ${#queue[@]} < n )); then\n            queue+=(${list[i]})\n        elif (( ${list[i]} > ${queue[0]} )); then\n            queue[0]=${list[i]}\n        fi\n        heap_queue_sift_down queue 0 ${#queue[@]}\n    done\n    for ((i=${#queue[@]}-1; i>=0; i--)); do\n        echo ${queue[i]}\n        heap_queue_sift_up queue 0 i\n    done",
    "  local -a arr=($1)\n  local n=$2\n  local len=${#arr[@]}\n  local i\n  local j\n  local tmp\n  local parent\n  local child\n\n  # Build a max heap\n  for ((i = 1; i < len; i++)); do\n    j=$i\n    while ((j > 0)); do\n      parent=$(((j - 1) / 2))\n      if ((arr[j] > arr[parent])); then\n        tmp=${arr[j]}\n        arr[j]=${arr[parent]}\n        arr[parent]=$tmp\n        j=$parent\n      else\n        break\n      fi\n    done\n  done\n\n  # Extract the max element n times\n  for ((i = 0; i < n; i++)); do\n    tmp=${arr[0]}\n    arr[0]=${arr[len - 1 - i]}\n    arr[len - 1 - i]=$tmp\n    j=0\n    while ((j < len - i)); do\n      child=$((2 * j + 1))\n      if ((child >= len - i)); then\n        break\n      fi\n      if ((child + 1 < len - i)) && ((arr[child + 1] > arr[child])); then\n        child=$((child + 1))\n      fi\n      if ((arr[j] < arr[child])); then\n        tmp=${arr[j]}\n        arr[j]=${arr[child]}\n        arr[child]=$tmp\n        j=$child\n      else\n        break\n      fi\n    done\n  done\n\n  # Print the result\n  for ((i = 0; i < n; i++)); do\n    echo ${arr[len - 1 - i]}\n  done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local -i heap_size=0\n\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[heap_size++]=${list[i]}\n        j=heap_size-1\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[--heap_size]}\n        j=0\n        while ((j<heap_size)); do\n            k=$((2*j+1))\n            if ((k>=heap_size)); then\n                break\n            fi\n            if ((k+1<heap_size)) && ((heap[k+1]>heap[k])); then\n                k=$k+1\n            fi\n            if ((heap[j]<heap[k])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$k\n        done\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a arr\n    local -i i\n    local -i j\n    local -i k\n    local -i tmp\n    local -i size\n\n    # Convert the space-separated list to an array\n    arr=($list)\n    size=${#arr[@]}\n\n    # Build the heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        k=i\n        while ((2 * k + 1 < size)); do\n            j=2 * k + 1\n            if ((j < size - 1)) && ((arr[j] < arr[j + 1])); then\n                ((j++))\n            fi\n            if ((arr[k] < arr[j])); then\n                tmp=arr[k]\n                arr[k]=arr[j]\n                arr[j]=tmp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i = 0; i < n; i++)); do\n        tmp=arr[size - 1]\n        arr[size - 1]=arr[0]\n        arr[0]=tmp\n        ((size--))\n        k=0\n        while ((2 * k + 1 < size)); do\n            j=2 * k + 1\n            if ((j < size - 1)) && ((arr[j] < arr[j + 1])); then\n                ((j++))\n            fi\n            if ((arr[k] < arr[j])); then\n                tmp=arr[k]\n                arr[k]=arr[j]\n                arr[j]=tmp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the result\n    for ((i = 0; i < n; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo",
    "    local -a heap\n    local -i i j k\n    local -i n=$2\n    local -i size=0\n    local -i last_index=0\n    local -i parent_index=0\n    local -i left_child_index=0\n    local -i right_child_index=0\n    local -i largest_child_index=0\n    local -i temp=0\n    local -i temp_index=0\n\n    # Build the heap\n    for i in $1; do\n        heap[$size]=$i\n        ((size++))\n        last_index=$((size-1))\n        parent_index=$((last_index/2))\n        while ((parent_index >= 0)); do\n            if ((heap[last_index] > heap[parent_index])); then\n                temp=${heap[last_index]}\n                temp_index=last_index\n                heap[last_index]=${heap[parent_index]}\n                last_index=parent_index\n                heap[parent_index]=$temp\n                parent_index=$((last_index/2))\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[size-1]}\n        ((size--))\n        last_index=0\n        left_child_index=1\n        right_child_index=2\n        while ((left_child_index < size)); do\n            if ((right_child_index >= size)); then\n                largest_child_index=$left_child_index\n            else\n                if ((heap[left_child_index] > heap[right_child_index])); then\n                    largest_child_index=$left_child_index\n                else\n                    largest_child_index=$right_child_index\n                fi\n            fi\n            if ((heap[largest_child_index] > heap[last_index])); then\n                temp=${heap[largest_child_index]}\n                temp_index=largest_child_index\n                heap[largest_child_index]=${heap",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local -a result=()\n    local i\n\n    for ((i=0; i<n; i++)); do\n        heap_queue_insert heap \"${list[i]}\"\n    done\n\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ \"${list[i]}\" -gt \"${heap[0]}\" ]]; then\n            heap_queue_pop heap\n            heap_queue_insert heap \"${list[i]}\"\n        fi\n    done\n\n    for ((i=0; i<n; i++)); do\n        result[i]=$(heap_queue_pop heap)\n    done\n\n    echo \"${result[*]}\"",
    "    local -a heap\n    local -i i j k n\n    local -i max_heap_size=${2:-10}\n    local -i heap_size=0\n\n    for i in ${1// / }; do\n        if (( heap_size < max_heap_size )); then\n            heap[heap_size++]=$i\n            j=heap_size-1\n            while (( j > 0 )); do\n                k=(j-1)/2\n                if (( heap[j] > heap[k] )); then\n                    heap[j]=${heap[k]}\n                    heap[k]=$i\n                    j=k\n                else\n                    break\n                fi\n            done\n        elif (( i > heap[0] )); then\n            heap[0]=$i\n            j=0\n            while (( j < heap_size )); do\n                k=2*j+1\n                if (( k >= heap_size )); then\n                    break\n                elif (( k+1 < heap_size )) && (( heap[k+1] > heap[k] )); then\n                    k+=1\n                fi\n                if (( heap[k] > heap[j] )); then\n                    heap[j]=${heap[k]}\n                    heap[k]=$i\n                    j=k\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for (( i=heap_size-1; i>0; i-- )); do\n        heap[i]=${heap[0]}\n        heap[0]=${heap[i]}\n        heap_size--\n        j=0\n        while (( j < heap_size )); do\n            k=2*j+1\n            if (( k >= heap_size )); then\n                break\n            elif (( k+1 < heap_size )) && (( heap[k+1] > heap[k] )); then\n                k+=1\n            fi\n            if (( heap[k] > heap[j] )); then\n                heap[j]=${heap[k]}\n                heap[k]=${heap[i]}\n                j=k\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${heap[@]}",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i size=0\n    local -i tmp\n    local -i parent\n    local -i child\n    local -i last\n    local -i min\n    local -i max\n    local -i mid\n    local -i median\n    local -i median_index\n    local -i median_count=0\n    local -i median_sum=0\n    local -i median_avg\n\n    for i in $1; do\n        heap[$size]=$i\n        ((size++))\n    done\n\n    # Build the heap\n    for ((i=1; i<size; i++)); do\n        tmp=${heap[i]}\n        child=$i\n        while ((child > 0)); do\n            parent=$(((child - 1) / 2))\n            if ((tmp > heap[parent])); then\n                heap[child]=${heap[parent]}\n                ((child = parent))\n            else\n                break\n            fi\n        done\n        heap[child]=$tmp\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[0]} \"\n        last=$((size - 1))\n        heap[0]=${heap[last]}\n        ((size--))\n        parent=0\n        while ((parent < size)); do\n            child=$((parent * 2 + 1))\n            if ((child >= size)); then\n                break\n            fi\n            if ((child + 1 < size)) && ((heap[child] < heap[child + 1])); then\n                ((child++))\n            fi\n            if ((heap[parent] < heap[child])); then\n                tmp=${heap[parent]}\n                heap[parent]=${heap[child]}\n                heap[child]=$tmp\n                ((parent = child))\n            else\n                break\n            fi\n        done\n    done\n    echo\n\n    # Find the median\n    min=${heap[0]}\n    max=${heap[0]}\n    for ((i=1; i<size; i++)); do\n        if ((he",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i heap_size=0\n    local -i i\n    local -i j\n    local -i k\n    local -i tmp\n    local -i list_size=0\n    local -a list_array\n    local -i list_array_size=0\n    local -i list_array_index=0\n    local -i list_array_index_max=0\n    local -i list_array_index_min=0\n    local -i list_array_index_mid=0\n    local -i list_array_index_mid_left=0\n    local -i list_array_index_mid_right=0\n    local -i list_array_index_mid_left_parent=0\n    local -i list_array_index_mid_right_parent=0\n    local -i list_array_index_mid_left_child=0\n    local -i list_array_index_mid_right_child=0\n    local -i list_array_index_mid_left_child_parent=0\n    local -i list_array_index_mid_right_child_parent=0\n    local -i list_array_index_mid_left_child_left_child=0\n    local -i list_array_index_mid_left_child_right_child=0\n    local -i list_array_index_mid_right_child_left_child=0\n    local -i list_array_index_mid_right_child_right_child=0\n    local -i list_array_index_mid_left_child_left_child_parent=0\n    local -i list_array_index_mid_left_child_right_child_parent=0\n    local -i list_array_index_mid_right_child_left_child_parent=0\n    local -i list_array_index_mid_right_child_right_child_parent=0\n    local -i list_array_index_mid_left_child_left_child_left_child=0\n    local -i list_array_index_mid_left_child_left",
    "    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=$2\n    local -i m=$(echo \"$1\" | wc -w)\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local -i ppp=0",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local temp\n    local temp2\n    local temp3\n    local temp4\n\n    # Convert list to array\n    IFS=' ' read -r -a array <<< \"$list\"\n\n    # Build heap\n    for ((i=0; i<${#array[@]}; i++)); do\n        heap[i]=${array[i]}\n        j=$i\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[j]>heap[k])); then\n                temp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract n largest\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((2*j+1<${#heap[@]})); do\n            if ((2*j+2<${#heap[@]})); then\n                if ((heap[2*j+1]>heap[2*j+2])); then\n                    temp2=${heap[2*j+1]}\n                    temp3=2*j+1\n                else\n                    temp2=${heap[2*j+2]}\n                    temp3=2*j+2\n                fi\n            else\n                temp2=${heap[2*j+1]}\n                temp3=2*j+1\n            fi\n            if ((heap[j]<temp2)); then\n                temp4=${heap[j]}\n                heap[j]=$temp2\n                heap[temp3]=$temp4\n                j=$temp3\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort result\n    for ((i=0; i<${#result[",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i tmp\n    local -i parent\n    local -i child\n\n    for i in $1; do\n        heap[size]=$i\n        ((size++))\n        child=$size-1\n        parent=$((child-1))/2\n        while ((parent >= 0)); do\n            if ((heap[parent] < heap[child])); then\n                tmp=${heap[parent]}\n                heap[parent]=${heap[child]}\n                heap[child]=$tmp\n                child=$parent\n                parent=$((child-1))/2\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[size-1]}\n        ((size--))\n        parent=0\n        child=1\n        while ((child < size)); do\n            if ((child+1 < size)) && ((heap[child+1] > heap[child])); then\n                ((child++))\n            fi\n            if ((heap[parent] < heap[child])); then\n                tmp=${heap[parent]}\n                heap[parent]=${heap[child]}\n                heap[child]=$tmp\n                parent=$child\n                child=$((parent*2+1))\n            else\n                break\n            fi\n        done\n    done",
    "    declare -a heap\n    declare -i heap_size=0\n    declare -i i\n    declare -i j\n    declare -i k\n    declare -i n=$2\n    declare -i tmp\n    declare -i x\n    declare -i y\n\n    for i in $1; do\n        heap[heap_size++]=$i\n        x=heap_size-1\n        while (( x > 0 )); do\n            y=(x-1)/2\n            if (( heap[y] < heap[x] )); then\n                tmp=heap[y]\n                heap[y]=heap[x]\n                heap[x]=tmp\n                x=y\n            else\n                break\n            fi\n        done\n    done\n\n    for (( i=0; i<n; i++ )); do\n        echo ${heap[0]}\n        heap[0]=${heap[--heap_size]}\n        x=0\n        while (( x < heap_size )); do\n            y=2*x+1\n            if (( y >= heap_size )); then\n                break\n            fi\n            if (( y+1 < heap_size )) && (( heap[y+1] > heap[y] )); then\n                y=y+1\n            fi\n            if (( heap[x] < heap[y] )); then\n                tmp=heap[y]\n                heap[y]=heap[x]\n                heap[x]=tmp\n                x=y\n            else\n                break\n            fi\n        done\n    done",
    "    local -a a=($1)\n    local n=$2\n    local i\n    for ((i=${#a[@]}/2-1; i>=0; i--)); do\n        heap_queue_sift_down \"${a[@]}\" $i $n\n    done\n    for ((i=${#a[@]}-1; i>=${#a[@]}-n; i--)); do\n        heap_queue_swap \"${a[@]}\" 0 $i\n        heap_queue_sift_down \"${a[@]}\" 0 $((i-1))\n    done\n    echo \"${a[@]: -n}\"",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i heap_size=0\n    local -i heap_capacity=${#1}\n    local -i parent\n    local -i left_child\n    local -i right_child\n    local -i largest\n    local -i tmp\n    local -i tmp_index\n    local -i tmp_value\n\n    # Build heap\n    for i in $1; do\n        heap[heap_size++]=$i\n        parent=$((heap_size/2-1))\n        while ((parent >= 0)); do\n            if ((heap[parent] < heap[heap_size-1])); then\n                tmp=heap[parent]\n                heap[parent]=heap[heap_size-1]\n                heap[heap_size-1]=$tmp\n            fi\n            parent=$((parent-1))\n        done\n    done\n\n    # Extract n largest\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[--heap_size]}\n        parent=0\n        while ((1)); do\n            left_child=$((2*parent+1))\n            right_child=$((2*parent+2))\n            largest=$parent\n            if ((left_child < heap_size && heap[left_child] > heap[largest])); then\n                largest=$left_child\n            fi\n            if ((right_child < heap_size && heap[right_child] > heap[largest])); then\n                largest=$right_child\n            fi\n            if ((largest == parent)); then\n                break\n            fi\n            tmp=heap[parent]\n            heap[parent]=heap[largest]\n            heap[largest]=$tmp\n            parent=$largest\n        done\n    done\n    echo",
    "    local list=($1)\n    local n=$2\n    local len=${#list[@]}\n    local i\n    local j\n    local tmp\n    for ((i=n/2-1; i>=0; i--)); do\n        tmp=${list[i]}\n        j=$((2*i+1))\n        while ((j<n)); do\n            if ((j+1<n && list[j+1]>list[j])); then\n                ((j++))\n            fi\n            if ((list[j]<=tmp)); then\n                break\n            fi\n            list[i]=${list[j]}\n            ((i=j, j=2*i+1))\n        done\n        list[i]=$tmp\n    done\n    for ((i=n; i<len; i++)); do\n        if ((list[i]>list[0])); then\n            list[0]=${list[i]}\n            j=0\n            while ((j<n)); do\n                tmp=${list[j]}\n                ((j=2*j+1))\n                if ((j<n && list[j]<list[j+1])); then\n                    ((j++))\n                fi\n                if ((j>=n || list[j]<=tmp)); then\n                    break\n                fi\n                list[(j-1)/2]=${list[j]}\n            done\n            list[(j-1)/2]=$tmp\n        fi\n    done\n    for ((i=0; i<n/2; i++)); do\n        tmp=${list[i]}\n        list[i]=${list[n-i-1]}\n        list[n-i-1]=$tmp\n    done\n    echo \"${list[@]:0:n}\"",
    "  local -a arr=($1)\n  local n=$2\n  local -a heap\n  local i\n  local j\n  local k\n  local tmp\n\n  # Build the heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${arr[i]}\n    j=$i\n    while ((j > 0)); do\n      k=$((j-1))/2\n      if ((heap[j] > heap[k])); then\n        tmp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$tmp\n      fi\n      j=$k\n    done\n  done\n\n  # Insert the remaining elements\n  for ((i=n; i<${#arr[@]}; i++)); do\n    if ((arr[i] > heap[0])); then\n      heap[0]=${arr[i]}\n      j=0\n      while ((j < n)); do\n        k=$((j*2+1))\n        if ((k >= n)); then\n          break\n        fi\n        if ((k+1 < n && heap[k+1] > heap[k])); then\n          k=$k+1\n        fi\n        if ((heap[j] < heap[k])); then\n          tmp=${heap[j]}\n          heap[j]=${heap[k]}\n          heap[k]=$tmp\n        fi\n        j=$k\n      done\n    fi\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    tmp=${heap[0]}\n    heap[0]=${heap[i]}\n    heap[i]=$tmp\n    j=0\n    while ((j < i)); do\n      k=$((j*2+1))\n      if ((k >= i)); then\n        break\n      fi\n      if ((k+1 < i && heap[k+1] > heap[k])); then\n        k=$k+1\n      fi\n      if ((heap[j] < heap[k])); then\n        tmp=${heap[j]}\n        heap[j]=${heap[k]}\n",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a arr\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local size\n    local last\n    local parent\n    local left\n    local right\n\n    # convert list to array\n    IFS=' ' read -r -a arr <<< \"$list\"\n\n    # initialize heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n\n    # build heap\n    size=${#heap[@]}\n    last=$((size-1))\n    for ((i=last; i>=0; i--)); do\n        parent=$((i/2))\n        if [[ $parent -ge 0 ]]; then\n            if [[ ${heap[i]} -gt ${heap[parent]} ]]; then\n                tmp=${heap[i]}\n                heap[i]=${heap[parent]}\n                heap[parent]=$tmp\n            fi\n        fi\n    done\n\n    # add remaining elements to heap\n    for ((i=n; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${arr[i]}\n            # heapify\n            for ((j=0; j<size; j++)); do\n                left=$((2*j+1))\n                right=$((2*j+2))\n                if [[ $left -lt $size ]]; then\n                    if [[ ${heap[j]} -lt ${heap[left]} ]]; then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[left]}\n                        heap[left]=$tmp\n                    fi\n                fi\n                if [[ $right -lt $size ]]; then\n                    if [[ ${heap[j]} -lt ${heap[right]} ]]; then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[right]}\n                        heap[right]=$tmp\n                    fi\n                fi\n            done\n        fi\n    done\n\n    # sort heap\n    for ((i=last; i",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    # Build a max-heap\n    for ((i=${#arr[@]}/2; i>=0; i--)); do\n        for ((j=i; j*2+1<${#arr[@]}; j=2*j+1)); do\n            if ((j*2+2<${#arr[@]})) && ((arr[j*2+2]>arr[j*2+1])); then\n                ((arr[j*2+2]>arr[j])) && {\n                    tmp=${arr[j]}\n                    arr[j]=${arr[j*2+2]}\n                    arr[j*2+2]=$tmp\n                }\n            else\n                ((arr[j*2+1]>arr[j])) && {\n                    tmp=${arr[j]}\n                    arr[j]=${arr[j*2+1]}\n                    arr[j*2+1]=$tmp\n                }\n            fi\n        done\n    done\n    # Extract the largest $n elements\n    for ((i=0; i<n; i++)); do\n        echo ${arr[0]}\n        arr[0]=${arr[${#arr[@]}-1]}\n        unset arr[${#arr[@]}-1]\n        # Rebuild the max-heap\n        for ((j=0; j*2+1<${#arr[@]}; j=2*j+1)); do\n            if ((j*2+2<${#arr[@]})) && ((arr[j*2+2]>arr[j*2+1])); then\n                ((arr[j*2+2]>arr[j])) && {\n                    tmp=${arr[j]}\n                    arr[j]=${arr[j*2+2]}\n                    arr[j*2+2]=$tmp\n                }\n            else\n                ((arr[j*2+1]>arr[j])) && {\n                    tmp=${arr[j]}\n                    arr[j]=${arr[j*2+1]}\n                    arr[j*2",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j > 0)); do\n            if ((heap[j] > heap[(j-1)/2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[(j-1)/2]}\n                heap[(j-1)/2]=$tmp\n            fi\n            j=$(((j-1)/2))\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((j < ${#heap[@]})); do\n            if ((2*j+2 < ${#heap[@]})); then\n                if ((heap[j] < heap[2*j+1] || heap[j] < heap[2*j+2])); then\n                    if ((heap[2*j+1] > heap[2*j+2])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+1]}\n                        heap[2*j+1]=$tmp\n                        j=2*j+1\n                    else\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+2]}\n                        heap[2*j+2]=$tmp\n                        j=2*j+2\n                    fi\n                else\n                    break\n                fi\n            elif ((2*j+1 < ${#heap[@]})); then\n                if ((heap[j] < heap[2*j+1])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[2*j+1]}\n                    heap[2*j+1]=$tmp\n                    j=2",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#list[@]}\n    # build the heap\n    for ((i=len/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<len)); do\n            if ((2*j+2<len)); then\n                if ((list[2*j+1]>list[2*j+2])); then\n                    tmp=${list[2*j+1]}\n                    list[2*j+1]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+1\n                else\n                    tmp=${list[2*j+2]}\n                    list[2*j+2]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+2\n                fi\n            else\n                tmp=${list[2*j+1]}\n                list[2*j+1]=${list[j]}\n                list[j]=$tmp\n                j=2*j+1\n            fi\n        done\n    done\n    # extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${list[0]}\n        list[0]=${list[len-1-i]}\n        j=0\n        while ((2*j+1<len-1-i)); do\n            if ((2*j+2<len-1-i)); then\n                if ((list[2*j+1]>list[2*j+2])); then\n                    tmp=${list[2*j+1]}\n                    list[2*j+1]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+1\n                else\n                    tmp=${list[2*j+2]}\n                    list[2*j+2]=${list[j]}\n                    list[j]=$tmp\n                    j=2*j+2\n                fi\n            else\n                tmp=${list[2*j+1]}\n                list[2*j+1]=${list[j]}\n                list[j",
    "    local list=($1)\n    local n=$2\n    local heap=()\n\n    # Build a max heap\n    for i in \"${list[@]}\"; do\n        heap_queue_insert heap \"$i\"\n    done\n\n    # Extract the max element n times\n    for ((i=0; i<n; i++)); do\n        heap_queue_extract heap\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i n_largest=0\n    local -i n_largest_max=0\n    local -i parent=0\n    local -i child=0\n    local -i temp=0\n    local -i temp_parent=0\n    local -i temp_child=0\n    local -i temp_child_left=0\n    local -i temp_child_right=0\n    local -i temp_child_max=0\n    local -i temp_child_max_index=0\n    local -i temp_child_max_value=0\n    local -i temp_child_max_value_left=0\n    local -i temp_child_max_value_right=0\n    local -i temp_child_max_value_parent=0\n    local -i temp_child_max_value_parent_left=0\n    local -i temp_child_max_value_parent_right=0\n    local -i temp_child_max_value_parent_left_index=0\n    local -i temp_child_max_value_parent_right_index=0\n    local -i temp_child_max_value_parent_left_value=0\n    local -i temp_child_max_value_parent_right_value=0\n    local -i temp_child_max_value_parent_left_value_index=0\n    local -i temp_child_max_value_parent_right_value_index=0\n    local -i temp_child_max_value_parent_left_value_index_left=0\n    local -i temp_child_max_value_parent_right_value_index_left=0\n    local -i temp_child_max_value_parent_left_value_index_right=0\n    local -i temp_child_max_value_parent_right_value_",
    "    local -a heap=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n\n    # build heap\n    for ((i=${#heap[@]}/2-1; i>=0; i--)); do\n        # percolate down\n        k=$i\n        while ((2*k+1 < ${#heap[@]})); do\n            j=2*k+1\n            if ((j+1 < ${#heap[@]} && heap[j+1] > heap[j])); then\n                j=$j+1\n            fi\n            if ((heap[k] < heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            else\n                break\n            fi\n            k=$j\n        done\n    done\n\n    # extract n largest\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        heap=(${heap[@]:0:${#heap[@]}-1})\n        # percolate down\n        k=0\n        while ((2*k+1 < ${#heap[@]})); do\n            j=2*k+1\n            if ((j+1 < ${#heap[@]} && heap[j+1] > heap[j])); then\n                j=$j+1\n            fi\n            if ((heap[k] < heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            else\n                break\n            fi\n            k=$j\n        done\n    done",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local -a result\n    local i\n    local j\n    local tmp\n\n    # Build a heap\n    for ((i=0; i<${#arr[@]}; i++)); do\n        heap[i]=${arr[i]}\n        j=$i\n        while ((j>0)); do\n            if ((heap[j]>heap[(j-1)/2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[(j-1)/2]}\n                heap[(j-1)/2]=$tmp\n            fi\n            j=$(((j-1)/2))\n        done\n    done\n\n    # Extract the top n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((j<${#heap[@]})); do\n            if ((j*2+2<${#heap[@]})); then\n                if ((heap[j]<heap[j*2+1] || heap[j]<heap[j*2+2])); then\n                    if ((heap[j*2+1]>heap[j*2+2])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[j*2+1]}\n                        heap[j*2+1]=$tmp\n                        j=j*2+1\n                    else\n                        tmp=${heap[j]}\n                        heap[j]=${heap[j*2+2]}\n                        heap[j*2+2]=$tmp\n                        j=j*2+2\n                    fi\n                else\n                    break\n                fi\n            elif ((j*2+1<${#heap[@]})); then\n                if ((heap[j]<heap[j*2+1])); then\n                    tmp=${heap[j]}\n                    heap[j",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a queue\n  local i\n  local j\n  local temp\n  local queue_size=0\n\n  for i in $list; do\n    queue[$queue_size]=$i\n    ((queue_size++))\n    j=$((queue_size-1))\n    while [ $j -gt 0 ]; do\n      if [ ${queue[$j]} -gt ${queue[$((j-1))]} ]; then\n        temp=${queue[$j]}\n        queue[$j]=${queue[$((j-1))]}\n        queue[$((j-1))]=$temp\n      fi\n      j=$((j-1))\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    echo ${queue[$i]}\n  done",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n    for ((i=n/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<n)); do\n            if ((2*j+2<n)); then\n                if ((arr[2*j+1]<arr[2*j+2])); then\n                    ((j=2*j+2))\n                else\n                    ((j=2*j+1))\n                fi\n            else\n                ((j=2*j+1))\n            fi\n            if ((arr[j]>arr[i])); then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n        done\n    done\n    for ((i=n; i<len; i++)); do\n        if ((arr[i]>arr[0])); then\n            arr[0]=${arr[i]}\n            j=0\n            while ((2*j+1<n)); do\n                if ((2*j+2<n)); then\n                    if ((arr[2*j+1]<arr[2*j+2])); then\n                        ((j=2*j+2))\n                    else\n                        ((j=2*j+1))\n                    fi\n                else\n                    ((j=2*j+1))\n                fi\n                if ((arr[j]>arr[i])); then\n                    tmp=${arr[i]}\n                    arr[i]=${arr[j]}\n                    arr[j]=$tmp\n                fi\n            done\n        fi\n    done\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${arr[i]}\n        arr[i]=${arr[0]}\n        arr[0]=$tmp\n        j=0\n        while ((2*j+1<i)); do\n            if ((2*j+2<i)); then\n                if ((arr[2*j+1]<arr[2*j+2])); then\n                    ((j",
    "    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n\n    # Build the heap\n    for ((i=${#list[@]}/2-1; i>=0; i--)); do\n        # Sift down\n        j=$i\n        while ((2*j+1 < ${#list[@]})); do\n            k=$((2*j+1))\n            if ((k+1 < ${#list[@]} && list[k] < list[k+1])); then\n                k=$((k+1))\n            fi\n            if ((list[j] < list[k])); then\n                temp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$temp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the top n\n    for ((i=0; i<n; i++)); do\n        # Sift down\n        j=0\n        while ((2*j+1 < ${#list[@]})); do\n            k=$((2*j+1))\n            if ((k+1 < ${#list[@]} && list[k] < list[k+1])); then\n                k=$((k+1))\n            fi\n            if ((list[j] < list[k])); then\n                temp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$temp\n                j=$k\n            else\n                break\n            fi\n        done\n        # Swap the top with the last\n        temp=${list[0]}\n        list[0]=${list[${#list[@]}-1]}\n        list[${#list[@]}-1]=$temp\n        # Remove the last\n        unset list[${#list[@]}-1]\n    done\n\n    # Print the result\n    for ((i=0; i<${#list[@]}; i++)); do\n        echo ${list[i]}\n    done",
    "    local -a list=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local temp=0\n    local len=${#list[@]}\n    local -a result=()\n\n    # build heap\n    for ((i=len/2-1; i>=0; i--))\n    do\n        heap_adjust ${list[@]:i} $i $len\n    done\n\n    # get the n largest\n    for ((i=len-1; i>=len-n; i--))\n    do\n        result[j]=${list[0]}\n        ((j++))\n        temp=${list[i]}\n        list[i]=${list[0]}\n        list[0]=$temp\n        heap_adjust ${list[@]:0:i} 0 $i\n    done\n\n    echo ${result[@]}",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1 < n)); do\n            j=2*k+1\n            if ((j+1 < n && heap[j] < heap[j+1])); then\n                j+=1\n            fi\n            if ((heap[k] < heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n; i<${#arr[@]}; i++)); do\n        if ((arr[i] > heap[0])); then\n            heap[0]=${arr[i]}\n            k=0\n            while ((2*k+1 < n)); do\n                j=2*k+1\n                if ((j+1 < n && heap[j] < heap[j+1])); then\n                    j+=1\n                fi\n                if ((heap[k] < heap[j])); then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                    k=j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        heap[0]=$tmp\n        k=0\n        while ((2*k+1 < i)); do\n            j=2*k+1\n            if ((j+1 < i && heap[j] < heap[j+1])); then\n                j+=1\n            fi\n            if ((heap[k] < heap[j])); then\n               ",
    "    local -a array=($1)\n    local n=$2\n\n    # Build a max heap\n    local i\n    for ((i = ${#array[@]} / 2 - 1; i >= 0; i--)); do\n        heap_sift_down \"${array[@]}\" $i ${#array[@]}\n    done\n\n    # Extract the largest n elements\n    local result=()\n    for ((i = 0; i < n; i++)); do\n        result+=(${array[0]})\n        array[0]=${array[${#array[@]} - 1]}\n        heap_sift_down \"${array[@]}\" 0 $(( ${#array[@]} - 1 ))\n    done\n\n    echo \"${result[@]}\"",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local i\n    local j\n    local tmp\n    local len=${#list[@]}\n    local last_idx=$((len - 1))\n\n    # build the heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j > 0)); do\n            if ((heap[j] > heap[j/2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[j/2]}\n                heap[j/2]=$tmp\n            fi\n            j=$((j/2))\n        done\n    done\n\n    # extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        list[i]=${heap[0]}\n        heap[0]=${heap[last_idx]}\n        last_idx=$((last_idx - 1))\n        j=0\n        while ((j < last_idx)); do\n            if ((heap[j] < heap[j*2+1])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[j*2+1]}\n                heap[j*2+1]=$tmp\n            fi\n            if ((heap[j] < heap[j*2+2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[j*2+2]}\n                heap[j*2+2]=$tmp\n            fi\n            j=$((j+1))\n        done\n    done\n\n    # reverse the list\n    for ((i=0; i<n/2; i++)); do\n        tmp=${list[i]}\n        list[i]=${list[n-i-1]}\n        list[n-i-1]=$tmp\n    done\n\n    echo ${list[@]}",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a array\n  local -a heap\n  local i\n  local j\n  local k\n  local tmp\n\n  # Convert the list to an array\n  IFS=' ' read -r -a array <<< \"$list\"\n\n  # Build the heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${array[i]}\n  done\n  for ((i=n-1; i>=0; i--)); do\n    for ((j=i; j<n; j++)); do\n      if [[ ${heap[j]} -gt ${heap[i]} ]]; then\n        tmp=${heap[i]}\n        heap[i]=${heap[j]}\n        heap[j]=$tmp\n      fi\n    done\n  done\n\n  # Insert the remaining elements\n  for ((i=n; i<${#array[@]}; i++)); do\n    if [[ ${array[i]} -gt ${heap[0]} ]]; then\n      heap[0]=${array[i]}\n      for ((j=0; j<n; j++)); do\n        for ((k=j; k<n; k++)); do\n          if [[ ${heap[k]} -gt ${heap[j]} ]]; then\n            tmp=${heap[j]}\n            heap[j]=${heap[k]}\n            heap[k]=$tmp\n          fi\n        done\n      done\n    fi\n  done\n\n  # Print the result\n  for ((i=0; i<n; i++)); do\n    echo \"${heap[i]}\"\n  done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_index=$((len-1))\n    local -i last_parent_index=$((last_index/2))\n    local -i left_child_index\n    local -i right_child_index\n    local -i largest_child_index\n\n    # Build the heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1[i]}\n        # Bubble up\n        while ((i > 0)); do\n            parent_index=$((i/2))\n            if ((heap[i] > heap[parent_index])); then\n                # Swap\n                tmp=${heap[i]}\n                heap[i]=${heap[parent_index]}\n                heap[parent_index]=$tmp\n            fi\n            i=$parent_index\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        # Swap the root with the last element\n        tmp=${heap[0]}\n        heap[0]=${heap[last_index]}\n        heap[last_index]=$tmp\n        last_index=$((last_index-1))\n        last_parent_index=$((last_index/2))\n        # Bubble down\n        for ((j=0; j<=last_parent_index; j++)); do\n            left_child_index=$((j*2+1))\n            right_child_index=$((j*2+2))\n            if ((right_child_index <= last_index)); then\n                if ((heap[left_child_index] > heap[right_child_index])); then\n                    largest_child_index=$left_child_index\n                else\n                    largest_child_index=$right_child_index\n                fi\n            else\n                largest_child_index=$left_child_index\n            fi\n            if ((heap[j] < heap[largest_child_index])); then\n                # Swap\n                tmp=${heap[j]}\n                heap[j]=${heap[largest_child",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local heap_size=${#list[@]}\n    local temp\n    local largest\n\n    # Build max heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $heap_size\n    done\n\n    # Extract elements\n    for ((i = heap_size - 1; i >= heap_size - n; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    # Print largest n elements\n    for ((i = heap_size - 1; i >= heap_size - n; i--)); do\n        echo ${list[i]}\n    done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap_queue\n  local i\n  local j\n  local k\n  local tmp\n  local heap_size\n  local heap_size_minus_one\n  local heap_size_minus_two\n  local heap_size_minus_three\n  local heap_size_minus_four\n  local heap_size_minus_five\n  local heap_size_minus_six\n  local heap_size_minus_seven\n  local heap_size_minus_eight\n  local heap_size_minus_nine\n  local heap_size_minus_ten\n  local heap_size_minus_eleven\n  local heap_size_minus_twelve\n  local heap_size_minus_thirteen\n  local heap_size_minus_fourteen\n  local heap_size_minus_fifteen\n  local heap_size_minus_sixteen\n  local heap_size_minus_seventeen\n  local heap_size_minus_eighteen\n  local heap_size_minus_nineteen\n  local heap_size_minus_twenty\n  local heap_size_minus_twenty_one\n  local heap_size_minus_twenty_two\n  local heap_size_minus_twenty_three\n  local heap_size_minus_twenty_four\n  local heap_size_minus_twenty_five\n  local heap_size_minus_twenty_six\n  local heap_size_minus_twenty_seven\n  local heap_size_minus_twenty_eight\n  local heap_size_minus_twenty_nine\n  local heap_size_minus_thirty\n  local heap_size_minus_thirty_one\n  local heap_size_minus_thirty_two\n  local heap_size_minus_thirty_three\n  local heap_size_minus_thirty_four\n  local heap_size_minus_thirty_five\n  local heap_size_minus_thirty_six\n  local heap_size_minus_thirty_seven\n  local heap_size_minus_thirty_eight\n  local heap_size_minus_thirty_nine\n  local heap_size_minus_fort",
    "    local -a heap\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i t=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i len=0\n    local -i size=0\n    local -i tmp=0\n    local -i parent=0\n    local -i child=0\n    local -i left=0\n    local -i right=0\n    local -i largest=0\n    local -i smallest=0\n    local -i swap=0\n    local -i max=0\n    local -i min=0\n    local -i mid=0\n    local -i cmp=0\n    local -i p=0\n    local -i c=0\n    local -i l=0\n    local -i r=0\n    local -i lg=0\n    local -i sm=0\n    local -i sw=0\n    local -i mx=0\n    local -i mn=0\n    local -i md=0\n    local -i cp=0\n    local -i pn=0\n    local -i cn=0\n    local -i ln=0\n    local -i rn=0\n    local -i lgn=0\n    local -i smn=0\n    local -i swn=0\n    local -i mxn=0\n    local -i mnn=0\n    local -i mdn=0\n    local -i cpn=0\n    local -i pnn=0\n    local -i cnn=0\n    local -i lnn=0\n    local -i rnn=0\n    local -i lgnn=0\n    local -i smnn=0\n    local -i swnn=0\n    local -i mxnn=0\n    local -i mnnn=0\n    local -i mdnn=0\n    local -i cpp=0\n    local -i ppp=0\n    local -i cppp=0\n    local -i lpp=",
    "    local -a array=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n    local len=${#array[@]}\n    for ((i=len/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<len)); do\n            if ((2*j+2<len && array[2*j+2]>array[2*j+1])); then\n                if ((array[2*j+2]>array[j])); then\n                    temp=${array[j]}\n                    array[j]=${array[2*j+2]}\n                    array[2*j+2]=$temp\n                    j=2*j+2\n                else\n                    break\n                fi\n            else\n                if ((array[2*j+1]>array[j])); then\n                    temp=${array[j]}\n                    array[j]=${array[2*j+1]}\n                    array[2*j+1]=$temp\n                    j=2*j+1\n                else\n                    break\n                fi\n            fi\n        done\n    done\n    for ((i=0; i<n; i++)); do\n        temp=${array[0]}\n        array[0]=${array[len-i-1]}\n        array[len-i-1]=$temp\n        j=0\n        while ((2*j+1<len-i-1)); do\n            if ((2*j+2<len-i-1 && array[2*j+2]>array[2*j+1])); then\n                if ((array[2*j+2]>array[j])); then\n                    temp=${array[j]}\n                    array[j]=${array[2*j+2]}\n                    array[2*j+2]=$temp\n                    j=2*j+2\n                else\n                    break\n                fi\n            else\n                if ((array[2*j+1]>array[j])); then\n                    temp=${array[j]}\n                    array[j]=${array[2*j+1]}\n                    array[2*j+1]=$temp\n                    j=2",
    "    local list=($1)\n    local n=$2\n    local len=${#list[@]}\n    local i\n    local j\n    local tmp\n    local largest\n\n    # Build heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((2 * j + 1 < len)); do\n            largest=$((2 * j + 1))\n            if ((2 * j + 2 < len && list[2 * j + 2] > list[largest])); then\n                largest=$((2 * j + 2))\n            fi\n            if ((list[j] < list[largest])); then\n                tmp=${list[j]}\n                list[j]=${list[largest]}\n                list[largest]=$tmp\n                j=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract top n\n    for ((i = 0; i < n; i++)); do\n        echo ${list[0]}\n        list[0]=${list[len - 1 - i]}\n        j=0\n        while ((2 * j + 1 < len - 1 - i)); do\n            largest=$((2 * j + 1))\n            if ((2 * j + 2 < len - 1 - i && list[2 * j + 2] > list[largest])); then\n                largest=$((2 * j + 2))\n            fi\n            if ((list[j] < list[largest])); then\n                tmp=${list[j]}\n                list[j]=${list[largest]}\n                list[largest]=$tmp\n                j=$largest\n            else\n                break\n            fi\n        done\n    done",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j<n-1)) && ((arr[j]<arr[j+1])); then\n                ((j++))\n            fi\n            if ((arr[k]<arr[j])); then\n                tmp=${arr[k]}\n                arr[k]=${arr[j]}\n                arr[j]=$tmp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n    for ((i=n-1; i>0; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j<i-1)) && ((arr[j]<arr[j+1])); then\n                ((j++))\n            fi\n            if ((arr[k]<arr[j])); then\n                tmp=${arr[k]}\n                arr[k]=${arr[j]}\n                arr[j]=$tmp\n                ((k=j))\n            else\n                break\n            fi\n        done\n    done\n    echo ${arr[@]:0:n}",
    "    local list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n    local last_parent=$((len / 2 - 1))\n    local last_child=$((len - 1))\n\n    # build heap\n    for ((i=last_parent; i>=0; i--)); do\n        j=$i\n        while true; do\n            k=$((2 * j + 1))\n            if [[ $k -gt $last_child ]]; then\n                break\n            fi\n            if [[ $k -lt $last_child ]] && [[ ${list[$k]} -lt ${list[$((k + 1))]} ]]; then\n                k=$((k + 1))\n            fi\n            if [[ ${list[$j]} -ge ${list[$k]} ]]; then\n                break\n            fi\n            tmp=${list[$j]}\n            list[$j]=${list[$k]}\n            list[$k]=$tmp\n            j=$k\n        done\n    done\n\n    # extract n largest\n    for ((i=0; i<n; i++)); do\n        tmp=${list[0]}\n        list[0]=${list[$last_child]}\n        list[$last_child]=$tmp\n        last_child=$((last_child - 1))\n        j=0\n        while true; do\n            k=$((2 * j + 1))\n            if [[ $k -gt $last_child ]]; then\n                break\n            fi\n            if [[ $k -lt $last_child ]] && [[ ${list[$k]} -lt ${list[$((k + 1))]} ]]; then\n                k=$((k + 1))\n            fi\n            if [[ ${list[$j]} -ge ${list[$k]} ]]; then\n                break\n            fi\n            tmp=${list[$j]}\n            list[$j]=${list[$k]}\n            list[$k]=$tmp\n            j=$k\n        done\n    done\n\n    echo ${list[@]}",
    "  local -a heap\n  local -i i\n  local -i n=$2\n  local -i size=0\n  local -i tmp\n  local -i parent\n  local -i child\n\n  for i in $1; do\n    heap[size++]=$i\n    child=$size-1\n    parent=$((child-1)/2))\n    while (( child > 0 )); do\n      if (( heap[parent] < heap[child] )); then\n        tmp=heap[parent]\n        heap[parent]=heap[child]\n        heap[child]=$tmp\n        child=$parent\n        parent=$((child-1)/2))\n      else\n        break\n      fi\n    done\n  done\n\n  while (( size > 0 )); do\n    echo ${heap[0]}\n    heap[0]=${heap[--size]}\n    parent=0\n    child=1\n    while (( child < size )); do\n      if (( child+1 < size && heap[child+1] > heap[child] )); then\n        child+=1\n      fi\n      if (( heap[parent] < heap[child] )); then\n        tmp=heap[parent]\n        heap[parent]=heap[child]\n        heap[child]=$tmp\n        parent=$child\n        child=$((parent*2+1))\n      else\n        break\n      fi\n    done\n  done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local i\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    heap_sort heap\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_sort heap\n        fi\n    done\n    echo \"${heap[@]}\"",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i len=0\n    local -i len_half=0\n    local -i len_minus_one=0\n    local -i len_minus_two=0\n    local -i len_minus_three=0\n    local -i len_minus_four=0\n    local -i len_minus_five=0\n    local -i len_minus_six=0\n    local -i len_minus_seven=0\n    local -i len_minus_eight=0\n    local -i len_minus_nine=0\n    local -i len_minus_ten=0\n    local -i len_minus_eleven=0\n    local -i len_minus_twelve=0\n    local -i len_minus_thirteen=0\n    local -i len_minus_fourteen=0\n    local -i len_minus_fifteen=0\n    local -i len_minus_sixteen=0\n    local -i len_minus_seventeen=0\n    local -i len_minus_eighteen=0\n    local -i len_minus_nineteen=0\n    local -i len_minus_twenty=0\n    local -i len_minus_twenty_one=0\n    local -i len_minus_twenty_two=0\n    local -i len_minus_twenty_three=0\n    local -i len_minus_twenty_four=0\n    local -i len_minus_twenty_five=0\n    local -i len_minus_twenty_six=0\n    local -i len_minus_twenty_seven=0\n    local -i len_minus_twenty_eight=0\n    local -i len_minus_twenty_nine=0\n    local -i len_minus_thirty=0\n    local -i len_minus_thirty_one=0\n    local -i len_minus_thirty_two=0\n    local -i len_minus_thirty_three=0\n   ",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local -i heap_size=0\n    local -i list_size=${#list[@]}\n\n    # build a heap\n    for ((i=0; i<list_size; i++)); do\n        heap[heap_size++]=${list[i]}\n        j=$((heap_size-1))\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # extract the largest n numbers\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[--heap_size]}\n        j=0\n        while ((j<heap_size)); do\n            k=$((2*j+1))\n            if ((k>=heap_size)); then\n                break\n            fi\n            if ((k+1<heap_size)) && ((heap[k+1]>heap[k])); then\n                k=$((k+1))\n            fi\n            if ((heap[k]>heap[j])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done",
    "  local -a heap\n  local -i i\n  local -i n=$2\n  local -i heap_size=0\n  local -i tmp\n  local -i largest_index\n  local -i left_child_index\n  local -i right_child_index\n  local -i parent_index\n  local -i parent_value\n  local -i left_child_value\n  local -i right_child_value\n  local -i largest_value\n  local -i tmp_value\n\n  # Create a heap from the list\n  for i in $1; do\n    heap[heap_size++]=$i\n    # Bubble up the new element\n    tmp=$heap_size-1\n    while [ $tmp -gt 0 ]; do\n      parent_index=$((tmp-1))/2\n      parent_value=${heap[$parent_index]}\n      if [ $i -gt $parent_value ]; then\n        heap[$tmp]=$parent_value\n        heap[$parent_index]=$i\n        tmp=$parent_index\n      else\n        break\n      fi\n    done\n  done\n\n  # Extract the largest n elements\n  for ((i=0; i<n; i++)); do\n    # Extract the largest element\n    largest_value=${heap[0]}\n    echo $largest_value\n    # Replace it with the last element\n    heap[0]=${heap[--heap_size]}\n    # Bubble down the new element\n    tmp=0\n    while [ $tmp -lt $heap_size ]; do\n      left_child_index=$((tmp*2+1))\n      right_child_index=$((tmp*2+2))\n      largest_index=$tmp\n      largest_value=${heap[$tmp]}\n      if [ $left_child_index -lt $heap_size ]; then\n        left_child_value=${heap[$left_child_index]}\n        if [ $left_child_value -gt $largest_value ]; then\n          largest_index=$left_child_index\n          largest_value=$left_child_value\n        fi\n      fi\n      if [ $right_child_index -lt $he",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i last_parent\n    local -i parent\n    local -i left_child\n    local -i right_child\n    local -i largest_child\n    local -i tmp\n\n    for i in $1; do\n        heap[size]=$i\n        ((size++))\n        last_parent=$((size / 2 - 1))\n        for ((parent=last_parent; parent>=0; parent--)); do\n            left_child=$((parent * 2 + 1))\n            right_child=$((parent * 2 + 2))\n            if [[ $right_child -lt $size ]]; then\n                if [[ ${heap[$left_child]} -gt ${heap[$right_child]} ]]; then\n                    largest_child=$left_child\n                else\n                    largest_child=$right_child\n                fi\n            elif [[ $left_child -lt $size ]]; then\n                largest_child=$left_child\n            else\n                break\n            fi\n            if [[ ${heap[$parent]} -lt ${heap[$largest_child]} ]]; then\n                tmp=${heap[$parent]}\n                heap[$parent]=${heap[$largest_child]}\n                heap[$largest_child]=$tmp\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[size-1]}\n        ((size--))\n        last_parent=$((size / 2 - 1))\n        for ((parent=0; parent<=last_parent; parent++)); do\n            left_child=$((parent * 2 + 1))\n            right_child=$((parent * 2 + 2))\n            if [[ $right_child -lt $size ]]; then\n                if [[ ${heap[$left_child]} -gt ${heap[$right_child]} ]]; then\n                    largest_child=$left_child\n                else\n                    largest_child=$right_child\n                fi\n            elif [[ $left_child -lt $size ]",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a array\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_heap\n    local -i temp\n\n    array=($list)\n    n_heap=0\n    for ((i=0; i<${#array[@]}; i++)); do\n        if ((n_heap < n)); then\n            heap[n_heap]=${array[i]}\n            ((n_heap++))\n            for ((j=n_heap-1; j>0; j=k)); do\n                k=$(((j-1)/2))\n                if ((heap[j] > heap[k])); then\n                    temp=${heap[j]}\n                    heap[j]=${heap[k]}\n                    heap[k]=$temp\n                fi\n            done\n        else\n            if ((array[i] > heap[0])); then\n                heap[0]=${array[i]}\n                for ((j=0; j<n_heap; j=k)); do\n                    k=$((2*j+1))\n                    if ((k+1 < n_heap && heap[k+1] > heap[k])); then\n                        ((k++))\n                    fi\n                    if ((k < n_heap && heap[k] > heap[j])); then\n                        temp=${heap[j]}\n                        heap[j]=${heap[k]}\n                        heap[k]=$temp\n                    fi\n                done\n            fi\n        fi\n    done\n    for ((i=n_heap-1; i>0; i--)); do\n        temp=${heap[i]}\n        heap[i]=${heap[0]}\n        heap[0]=$temp\n        for ((j=0; j<i; j=k)); do\n            k=$((2*j+1))\n            if ((k+1 < i && heap[k+1] > heap[k])); then\n                ((k++))\n            fi\n            if ((k < i && heap",
    "    local -a arr=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i tmp=0\n    local -i len=0\n    local -i max=0\n    local -i max_index=0\n    local -i len_arr=0\n    local -i len_arr_minus_1=0\n    local -i len_arr_minus_2=0\n    local -i len_arr_minus_3=0\n    local -i len_arr_minus_4=0\n    local -i len_arr_minus_5=0\n    local -i len_arr_minus_6=0\n    local -i len_arr_minus_7=0\n    local -i len_arr_minus_8=0\n    local -i len_arr_minus_9=0\n    local -i len_arr_minus_10=0\n    local -i len_arr_minus_11=0\n    local -i len_arr_minus_12=0\n    local -i len_arr_minus_13=0\n    local -i len_arr_minus_14=0\n    local -i len_arr_minus_15=0\n    local -i len_arr_minus_16=0\n    local -i len_arr_minus_17=0\n    local -i len_arr_minus_18=0\n    local -i len_arr_minus_19=0\n    local -i len_arr_minus_20=0\n    local -i len_arr_minus_21=0\n    local -i len_arr_minus_22=0\n    local -i len_arr_minus_23=0\n    local -i len_arr_minus_24=0\n    local -i len_arr_minus_25=0\n    local -i len_arr_minus_26=0\n    local -i len_arr_minus_27=0\n    local -i len_arr_minus_28=0\n    local -i len_arr_minus_29=0\n    local -i len_arr_minus_30=0\n    local -i len_arr",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local i\n    local j\n\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        j=$(( ${#heap[@]} - 1 ))\n        while [ $j -gt 0 ] && [ ${heap[$(( j - 1 ))]} -lt ${heap[$j]} ]; do\n            heap[$j]=${heap[$(( j - 1 ))]}\n            heap[$(( j - 1 ))]=$i\n            j=$(( j - 1 ))\n        done\n    done\n\n    for (( i = 0; i < n; i++ )); do\n        echo ${heap[$i]}\n    done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap\n  local i\n  local j\n  local temp\n  local size=${#list[@]}\n  local index\n  local parent\n  local left\n  local right\n\n  # Build heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n    index=$i\n    while ((index > 0)); do\n      parent=$(((index - 1) / 2))\n      if ((heap[index] > heap[parent])); then\n        temp=${heap[index]}\n        heap[index]=${heap[parent]}\n        heap[parent]=$temp\n        index=$parent\n      else\n        break\n      fi\n    done\n  done\n\n  # Insert remaining elements\n  for ((i=n; i<size; i++)); do\n    if ((list[i] > heap[0])); then\n      heap[0]=${list[i]}\n      index=0\n      while ((index < n)); do\n        left=$((2 * index + 1))\n        right=$((2 * index + 2))\n        if ((left < n)); then\n          if ((right < n)); then\n            if ((heap[left] > heap[right])); then\n              if ((heap[left] > heap[index])); then\n                temp=${heap[index]}\n                heap[index]=${heap[left]}\n                heap[left]=$temp\n                index=$left\n              else\n                break\n              fi\n            else\n              if ((heap[right] > heap[index])); then\n                temp=${heap[index]}\n                heap[index]=${heap[right]}\n                heap[right]=$temp\n                index=$right\n              else\n                break\n              fi\n            fi\n          else\n            if ((heap[left] > heap[index])); then\n              temp=${heap[index]}\n              heap[index]=${heap[left]}\n              heap[left]=$temp\n              index=$left\n            else\n              break\n            fi\n          fi\n        else\n          break\n        fi\n      done\n    fi\n",
    "    local -a a=($1)\n    local n=$2\n    local i j k\n    local -a h\n    local -a r\n\n    # build heap\n    for ((i=0; i<n; i++)); do\n        h[i]=${a[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j+1<n && h[j]<h[j+1])); then\n                j=$j+1\n            fi\n            if ((h[k]<h[j])); then\n                h[k]=${h[j]}\n                h[j]=${h[k]}\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    # sort\n    for ((i=n; i<${#a[@]}; i++)); do\n        if ((a[i]>h[0])); then\n            h[0]=${a[i]}\n            k=0\n            while ((2*k+1<n)); do\n                j=2*k+1\n                if ((j+1<n && h[j]<h[j+1])); then\n                    j=$j+1\n                fi\n                if ((h[k]<h[j])); then\n                    h[k]=${h[j]}\n                    h[j]=${h[k]}\n                    k=j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    # output\n    for ((i=0; i<n; i++)); do\n        r[i]=${h[0]}\n        h[0]=${h[n-i-1]}\n        k=0\n        while ((2*k+1<n-i-1)); do\n            j=2*k+1\n            if ((j+1<n-i-1 && h[j]<h[j+1])); then\n                j=$j+1\n            fi\n            if ((h[k]<h[j])); then\n                h[k",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local len=${#list[@]}\n\n    for (( i=0; i<n; i++ )); do\n        heap[i]=${list[i]}\n    done\n\n    for (( i=n/2-1; i>=0; i-- )); do\n        k=$i\n        tmp=${heap[k]}\n        while (( k*2+1 < n )); do\n            j=$(( k*2+1 ))\n            if (( j+1 < n && heap[j] < heap[j+1] )) ; then\n                j=$(( j+1 ))\n            fi\n            if (( tmp > heap[j] )) ; then\n                break\n            fi\n            heap[k]=${heap[j]}\n            k=$j\n        done\n        heap[k]=$tmp\n    done\n\n    for (( i=n; i<len; i++ )); do\n        if (( list[i] > heap[0] )) ; then\n            heap[0]=${list[i]}\n            k=0\n            tmp=${heap[k]}\n            while (( k*2+1 < n )); do\n                j=$(( k*2+1 ))\n                if (( j+1 < n && heap[j] < heap[j+1] )) ; then\n                    j=$(( j+1 ))\n                fi\n                if (( tmp > heap[j] )) ; then\n                    break\n                fi\n                heap[k]=${heap[j]}\n                k=$j\n            done\n            heap[k]=$tmp\n        fi\n    done\n\n    for (( i=n-1; i>=0; i-- )); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        k=0\n        while (( k*2+1 < i )); do\n            j=$(( k*2+1 ))\n            if (( j+1 < i && heap[j] < heap[j+1] )) ; then\n                j=$(( j+1 ))\n            fi\n            if ((",
    "    local list=($1)\n    local n=$2\n\n    # Create a heap queue\n    local heap_queue=()\n    local heap_queue_size=0\n    local heap_queue_push() {\n        local value=$1\n        local i=$heap_queue_size\n        heap_queue[$i]=$value\n        ((heap_queue_size++))\n        while ((i > 0)); do\n            local parent=$(((i - 1) / 2))\n            if ((heap_queue[$parent] >= heap_queue[$i])); then\n                break\n            fi\n            local tmp=${heap_queue[$parent]}\n            heap_queue[$parent]=${heap_queue[$i]}\n            heap_queue[$i]=$tmp\n            i=$parent\n        done\n    }\n    local heap_queue_pop() {\n        local value=${heap_queue[0]}\n        heap_queue[0]=${heap_queue[$((heap_queue_size - 1))]}\n        ((heap_queue_size--))\n        local i=0\n        while ((i < heap_queue_size)); do\n            local left=$((2 * i + 1))\n            local right=$((2 * i + 2))\n            if ((left >= heap_queue_size)); then\n                break\n            fi\n            local largest=$i\n            if ((heap_queue[$left] > heap_queue[$largest])); then\n                largest=$left\n            fi\n            if ((right < heap_queue_size && heap_queue[$right] > heap_queue[$largest])); then\n                largest=$right\n            fi\n            if ((largest == i)); then\n                break\n            fi\n            local tmp=${heap_queue[$largest]}\n            heap_queue[$largest]=${heap_queue[$i]}\n            heap_queue[$i]=$tmp\n            i=$largest\n        done\n        echo $value\n    }\n\n    # Push the first n elements into the heap queue\n    local i\n    for ((i = 0; i < n && i < ${#list[@]}; i++)); do\n        heap_queue_push ${list",
    "    local -a arr\n    local -i i\n    local -i n\n    local -i len\n    local -i max_i\n    local -i tmp\n    local -i max_val\n\n    arr=($1)\n    n=$2\n    len=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        max_i=$i\n        max_val=${arr[$i]}\n        for ((j=i+1; j<len; j++)); do\n            if ((arr[j] > max_val)); then\n                max_i=$j\n                max_val=${arr[$j]}\n            fi\n        done\n        tmp=${arr[$i]}\n        arr[$i]=${arr[$max_i]}\n        arr[$max_i]=$tmp\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${arr[$i]}\n    done",
    "    if [[ $# -ne 2 ]]; then\n        echo \"Usage: $0 <list> <n>\"\n        return 1\n    fi\n\n    local list=\"$1\"\n    local n=\"$2\"\n\n    local -a heap\n    local -i heap_size=0\n\n    local -a result\n    local -i result_size=0\n\n    local -i i\n\n    # Build a min-heap\n    for i in $list; do\n        if (( heap_size == n )); then\n            if (( i > heap[0] )); then\n                heap[0]=$i\n                heap_sift_down 0\n            fi\n        else\n            heap[heap_size]=$i\n            heap_sift_up $heap_size\n            (( heap_size++ ))\n        fi\n    done\n\n    # Pop the heap\n    for (( i=0; i<heap_size; i++ )); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[heap_size-1]}\n        (( heap_size-- ))\n        heap_sift_down 0\n    done\n\n    # Reverse the result\n    for (( i=0; i<heap_size; i++ )); do\n        echo ${result[heap_size-i-1]}\n    done",
    "    local -a nums=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n\n    # Build the heap\n    for ((i=0; i<${#nums[@]}; i++)); do\n        heap[i]=${nums[i]}\n        j=$i\n        while ((j > 0)); do\n            if ((heap[j] > heap[(j-1)/2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[(j-1)/2]}\n                heap[(j-1)/2]=$tmp\n            fi\n            j=$(((j-1)/2))\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((2*j+1 < ${#heap[@]})); do\n            if ((2*j+2 < ${#heap[@]})); then\n                if ((heap[2*j+1] > heap[2*j+2])); then\n                    if ((heap[j] < heap[2*j+1])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+1]}\n                        heap[2*j+1]=$tmp\n                        j=2*j+1\n                    else\n                        break\n                    fi\n                else\n                    if ((heap[j] < heap[2*j+2])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+2]}\n                        heap[2*j+2]=$tmp\n                        j=2*j+2\n                    else\n                        break\n                    fi\n                fi\n            else\n                if ((heap[j] < heap[2*j+1])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[2*j+",
    "    local -a arr=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local len=${#arr[@]}\n    local heap_size=$((len-1))\n    local left=0\n    local right=0\n    local largest=0\n\n    # build a max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        heap_size=$((len-1))\n        while ((1)); do\n            left=$((2*i+1))\n            right=$((2*i+2))\n            largest=$i\n            if ((left<=heap_size && arr[left]>arr[largest])); then\n                largest=$left\n            fi\n            if ((right<=heap_size && arr[right]>arr[largest])); then\n                largest=$right\n            fi\n            if ((largest!=i)); then\n                tmp=${arr[i]}\n                arr[i]=${arr[largest]}\n                arr[largest]=$tmp\n                i=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # extract the max element and put it at the end of the array\n    for ((i=len-1; i>=len-n; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        heap_size=$((i-1))\n        j=0\n        while ((1)); do\n            left=$((2*j+1))\n            right=$((2*j+2))\n            largest=$j\n            if ((left<=heap_size && arr[left]>arr[largest])); then\n                largest=$left\n            fi\n            if ((right<=heap_size && arr[right]>arr[largest])); then\n                largest=$right\n            fi\n            if ((largest!=j)); then\n                tmp=${arr[j]}\n                arr[j]=${arr[largest]}\n                arr[largest]=$tmp\n                j=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    #",
    "    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    for ((i=n/2-1; i>=0; i--)); do\n        tmp=${list[i]}\n        j=$((i*2+1))\n        while ((j<n)); do\n            if ((j+1<n && list[j+1]>list[j])); then\n                j=$((j+1))\n            fi\n            if ((list[j]<=tmp)); then\n                break\n            fi\n            list[$((j/2))]=${list[j]}\n            j=$((j*2+1))\n        done\n        list[$((j/2))]=$tmp\n    done\n    for ((i=n-1; i>0; i--)); do\n        tmp=${list[i]}\n        list[i]=${list[0]}\n        j=0\n        while ((j<i)); do\n            if ((j+1<i && list[j+1]>list[j])); then\n                j=$((j+1))\n            fi\n            if ((list[j]<=tmp)); then\n                break\n            fi\n            list[$((j/2))]=${list[j]}\n            j=$((j*2+1))\n        done\n        list[$((j/2))]=$tmp\n    done\n    echo ${list[@]:0:$n}",
    "    local -a heap\n    local -i i=0\n    local -i n=$2\n    local -i len=${#1}\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i parent=0\n    local -i child=0\n    local -i child_r=0\n    local -i child_l=0\n    local -i max_child=0\n    local -i max_child_i=0\n    local -i max_child_r=0\n    local -i max_child_l=0\n    local -i max_child_i_r=0\n    local -i max_child_i_l=0\n\n    # build the heap\n    for i in $1; do\n        heap[$j]=$i\n        j=$j+1\n        parent=$((j/2-1))\n        while [ $parent -ge 0 ]; do\n            if [ ${heap[$parent]} -lt ${heap[$j-1]} ]; then\n                tmp=${heap[$parent]}\n                heap[$parent]=${heap[$j-1]}\n                heap[$j-1]=$tmp\n                j=$parent\n                parent=$((j/2-1))\n            else\n                break\n            fi\n        done\n    done\n\n    # extract the largest n elements\n    for i in $(seq 1 $n); do\n        echo ${heap[0]}\n        heap[0]=${heap[$len-1]}\n        len=$len-1\n        child_l=1\n        child_r=2\n        while [ $child_l -lt $len ]; do\n            max_child_i_l=$child_l\n            max_child_i_r=$child_r\n            max_child_l=${heap[$child_l]}\n            max_child_r=${heap[$child_r]}\n            if [ $child_r -lt $len ]; then\n                if [ $max_child_l -lt $max_child_r ]; then\n                    max_child_i=$max_child_i_r\n                    max_child=$max_child_r",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local temp=0\n    local temp_index=0\n\n    # Build a max heap\n    for (( i=0; i<${#list[@]}; i++ )); do\n        heap[$i]=${list[$i]}\n        j=$i\n        while [ $j -gt 0 ]; do\n            k=$(( (j-1)/2 ))\n            if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract the largest n elements\n    for (( i=0; i<$n; i++ )); do\n        echo ${heap[0]}\n        heap[0]=${heap[$(( ${#heap[@]}-1 ))]}\n        unset heap[$(( ${#heap[@]}-1 ))]\n        heap=(${heap[@]})\n        j=0\n        while [ $j -lt $(( ${#heap[@]}-1 )) ]; do\n            k=$(( 2*j+1 ))\n            l=$(( 2*j+2 ))\n            if [ $k -lt ${#heap[@]} ] && [ $l -lt ${#heap[@]} ]; then\n                if [ ${heap[$k]} -gt ${heap[$l]} ]; then\n                    temp_index=$k\n                else\n                    temp_index=$l\n                fi\n            elif [ $k -lt ${#heap[@]} ]; then\n                temp_index=$k\n            elif [ $l -lt ${#heap[@]} ]; then\n                temp_index=$l\n            else\n                break\n            fi\n            if [ ${heap[$j]} -lt ${heap[$temp_index]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a queue=()\n    local -a result=()\n    local i\n    local j\n    local k\n    local tmp\n\n    for i in $list; do\n        queue[${#queue[@]}]=$i\n        j=$(( ${#queue[@]} - 1 ))\n        while [ $j -gt 0 ]; do\n            k=$(( (j - 1) / 2 ))\n            if [ ${queue[$j]} -gt ${queue[$k]} ]; then\n                tmp=${queue[$j]}\n                queue[$j]=${queue[$k]}\n                queue[$k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    for i in $(seq 1 $n); do\n        result[$(( $i - 1 ))]=${queue[0]}\n        queue[0]=${queue[${#queue[@]} - 1]}\n        queue=(${queue[@]:0:${#queue[@]} - 1})\n        j=0\n        while [ $j -lt ${#queue[@]} ]; do\n            k=$(( 2 * $j + 1 ))\n            if [ $k -ge ${#queue[@]} ]; then\n                break\n            fi\n            if [ $(( $k + 1 )) -lt ${#queue[@]} ] && [ ${queue[$(( $k + 1 ))]} -gt ${queue[$k]} ]; then\n                k=$(( $k + 1 ))\n            fi\n            if [ ${queue[$j]} -lt ${queue[$k]} ]; then\n                tmp=${queue[$j]}\n                queue[$j]=${queue[$k]}\n                queue[$k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    echo ${result[@]}",
    "  local -a list=($1)\n  local n=$2\n  local -a heap=()\n  local i\n  local j\n  local tmp\n  for ((i = 0; i < n; i++)); do\n    heap[i]=\"${list[i]}\"\n  done\n  for ((i = n; i < ${#list[@]}; i++)); do\n    if ((list[i] > heap[0])); then\n      heap[0]=\"${list[i]}\"\n      j=0\n      while ((2 * j + 1 < n)); do\n        if ((2 * j + 2 < n)); then\n          if ((heap[2 * j + 1] > heap[2 * j + 2])); then\n            if ((heap[j] < heap[2 * j + 1])); then\n              tmp=\"${heap[j]}\"\n              heap[j]=\"${heap[2 * j + 1]}\"\n              heap[2 * j + 1]=\"$tmp\"\n              j=2 * j + 1\n            else\n              break\n            fi\n          else\n            if ((heap[j] < heap[2 * j + 2])); then\n              tmp=\"${heap[j]}\"\n              heap[j]=\"${heap[2 * j + 2]}\"\n              heap[2 * j + 2]=\"$tmp\"\n              j=2 * j + 2\n            else\n              break\n            fi\n          fi\n        else\n          if ((heap[j] < heap[2 * j + 1])); then\n            tmp=\"${heap[j]}\"\n            heap[j]=\"${heap[2 * j + 1]}\"\n            heap[2 * j + 1]=\"$tmp\"\n            j=2 * j + 1\n          else\n            break\n          fi\n        fi\n      done\n    fi\n  done\n  echo \"${heap[@]}\"",
    "    local -a arr=()\n    local -a heap=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local -i tmp49=0\n    local -i tmp50=0\n    local -i tmp51",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$(((j-1)/2))\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[len-i-1]}\n        j=0\n        while ((j<len-i-1)); do\n            k=$((2*j+1))\n            if ((k>=len-i-1)); then\n                break\n            fi\n            if ((k+1<len-i-1)) && ((heap[k+1]>heap[k])); then\n                k=$((k+1))\n            fi\n            if ((heap[k]>heap[j])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n_minus_one=\"$n - 1\"\n  local -i size=0\n  local -i tmp=0\n  local -i tmp2=0\n  local -i tmp3=0\n\n  for i in $list; do\n    heap[size++]=$i\n    j=$size\n    while (( j > 0 )); do\n      k=$(( (j - 1) / 2 ))\n      if (( heap[j] > heap[k] )); then\n        tmp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$tmp\n      fi\n      j=$k\n    done\n  done\n\n  for (( i = 0; i < n_minus_one; i++ )); do\n    tmp=${heap[0]}\n    heap[0]=${heap[--size]}\n    heap[size]=$tmp\n    j=0\n    while (( j < size )); do\n      k=$(( 2 * j + 1 ))\n      l=$(( 2 * j + 2 ))\n      if (( k >= size )); then\n        break\n      elif (( l >= size )); then\n        m=$k\n      elif (( heap[k] > heap[l] )); then\n        m=$k\n      else\n        m=$l\n      fi\n      if (( heap[j] < heap[m] )); then\n        tmp2=${heap[j]}\n        heap[j]=${heap[m]}\n        heap[m]=$tmp2\n      fi\n      j=$m\n    done\n  done\n\n  for (( i = 0; i < n; i++ )); do\n    echo -n \"${heap[i]} \"\n  done\n  echo",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n\n    # build a heap\n    for ((i=0; i<${#arr[@]}; i++)); do\n        heap[i]=${arr[i]}\n        j=$i\n        while ((j>0)); do\n            if ((heap[j]>heap[(j-1)/2])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[(j-1)/2]}\n                heap[(j-1)/2]=$tmp\n            fi\n            j=$(((j-1)/2))\n        done\n    done\n\n    # extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        heap=(\"${heap[@]:0:${#heap[@]}-1}\")\n        j=0\n        while ((j<${#heap[@]})); do\n            if ((j*2+1<${#heap[@]})); then\n                if ((j*2+2<${#heap[@]})); then\n                    if ((heap[j]<heap[j*2+1] || heap[j]<heap[j*2+2])); then\n                        if ((heap[j*2+1]>heap[j*2+2])); then\n                            tmp=${heap[j]}\n                            heap[j]=${heap[j*2+1]}\n                            heap[j*2+1]=$tmp\n                            j=j*2+1\n                        else\n                            tmp=${heap[j]}\n                            heap[j]=${heap[j*2+2]}\n                            heap[j*2+2]=$tmp\n                            j=j*2+2\n                        fi\n                    else\n                        break\n                    fi\n                else\n                    if ((heap[j]<heap[j*2+1])); then\n                        tmp=${he",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=$(echo \"$list\" | wc -w)\n    local -i parent=0\n    local -i child=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n\n    if [[ $n -gt $n_list ]]; then\n        echo \"n is greater than the number of elements in the list\" >&2\n        return 1\n    fi\n\n    for i in $list; do\n        heap[$n_heap]=$i\n        n_heap=$((n_heap + 1))\n        child=$n_heap\n        parent=$((child / 2))\n        while [[ $parent -gt 0 ]]; do\n            if [[ ${heap[$parent]} -lt ${heap[$child]} ]]; then\n                tmp=${heap[$parent]}\n                heap[$parent]=${heap[$child]}\n                heap[$child]=$tmp\n                child=$parent\n                parent=$((child / 2))\n            else\n                break\n            fi\n        done\n    done\n\n    for i in $(seq 1 $n); do\n        echo ${heap[0]}\n        heap[0]=${heap[$((n_heap - 1))]}\n        n_heap=$((n_heap - 1))\n        parent=0\n        child=$((2 * parent))\n        while [[ $child -lt $n_heap ]]; do\n            if [[ $child -lt $((n_heap - 1)) ]]; then\n                if [[ ${heap[$child]} -lt ${heap[$((child + 1))]} ]]; then\n                    tmp2=${heap[$child]}\n                    tmp3=${heap[$((child + 1))]}\n                    child=$((child + 1))\n                else\n                    tmp2=${heap[$((child + 1))]}\n                    tmp3",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n    local -i max=0\n    local -i max_index=0\n    local -i temp=0\n    for i in $1; do\n        arr[len]=$i\n        len=$len+1\n    done\n    for ((i=0; i<n; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n                max_index=$j\n            fi\n        done\n        temp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_index]=$temp\n    done\n    for ((i=0; i<n; i++)); do\n        echo ${arr[len-i-1]}\n    done",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n    for ((i=n/2-1; i>=0; i--)); do\n        j=$i\n        while ((j<n/2)); do\n            if ((2*j+2<n && arr[2*j+2]>arr[2*j+1])) && ((arr[2*j+2]>arr[j])); then\n                tmp=${arr[j]}\n                arr[j]=${arr[2*j+2]}\n                arr[2*j+2]=$tmp\n                j=2*j+2\n            elif ((arr[2*j+1]>arr[j])); then\n                tmp=${arr[j]}\n                arr[j]=${arr[2*j+1]}\n                arr[2*j+1]=$tmp\n                j=2*j+1\n            else\n                break\n            fi\n        done\n    done\n    for ((i=n; i<len; i++)); do\n        if ((arr[i]>arr[0])); then\n            arr[0]=${arr[i]}\n            j=0\n            while ((j<n/2)); do\n                if ((2*j+2<n && arr[2*j+2]>arr[2*j+1])) && ((arr[2*j+2]>arr[j])); then\n                    tmp=${arr[j]}\n                    arr[j]=${arr[2*j+2]}\n                    arr[2*j+2]=$tmp\n                    j=2*j+2\n                elif ((arr[2*j+1]>arr[j])); then\n                    tmp=${arr[j]}\n                    arr[j]=${arr[2*j+1]}\n                    arr[2*j+1]=$tmp\n                    j=2*j+1\n                else\n                    break\n                fi\n            done\n        fi\n    done\n    for ((i=n-1; i>0; i--)); do\n        tmp=${arr[i]}\n        arr[",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_index=$((len-1))\n    local -i last_parent_index=$((last_index/2))\n    local -i parent_index\n    local -i left_child_index\n    local -i right_child_index\n    local -i max_child_index\n    local -i max_child_value\n    local -i temp\n    local -i temp_index\n    local -i temp_value\n\n    # Initialize the heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1[i]}\n    done\n\n    # Heapify the array\n    for ((i=last_parent_index; i>=0; i--)); do\n        parent_index=$i\n        left_child_index=$((2*parent_index+1))\n        right_child_index=$((2*parent_index+2))\n        while true; do\n            max_child_index=-1\n            max_child_value=-1\n            if [[ $left_child_index -le $last_index ]]; then\n                max_child_index=$left_child_index\n                max_child_value=${heap[$left_child_index]}\n            fi\n            if [[ $right_child_index -le $last_index ]]; then\n                if [[ ${heap[$right_child_index]} -gt $max_child_value ]]; then\n                    max_child_index=$right_child_index\n                    max_child_value=${heap[$right_child_index]}\n                fi\n            fi\n            if [[ $max_child_index -eq -1 ]]; then\n                break\n            fi\n            if [[ ${heap[$parent_index]} -lt $max_child_value ]]; then\n                temp_index=$parent_index\n                temp_value=${heap[$parent_index]}\n                heap[$parent_index]=$max_child_value\n                heap[$max_child_index]=$temp_value\n                parent_index=$max_child_",
    "    local -a arr\n    local -i i=0\n    local -i n=$2\n    local -i len=$(echo \"$1\" | wc -w)\n    local -i max_i=0\n    local -i max_v=0\n    local -i tmp_i=0\n    local -i tmp_v=0\n    local -i tmp_i2=0\n    local -i tmp_v2=0\n    local -i tmp_i3=0\n    local -i tmp_v3=0\n    local -i tmp_i4=0\n    local -i tmp_v4=0\n    local -i tmp_i5=0\n    local -i tmp_v5=0\n    local -i tmp_i6=0\n    local -i tmp_v6=0\n    local -i tmp_i7=0\n    local -i tmp_v7=0\n    local -i tmp_i8=0\n    local -i tmp_v8=0\n    local -i tmp_i9=0\n    local -i tmp_v9=0\n    local -i tmp_i10=0\n    local -i tmp_v10=0\n    local -i tmp_i11=0\n    local -i tmp_v11=0\n    local -i tmp_i12=0\n    local -i tmp_v12=0\n    local -i tmp_i13=0\n    local -i tmp_v13=0\n    local -i tmp_i14=0\n    local -i tmp_v14=0\n    local -i tmp_i15=0\n    local -i tmp_v15=0\n    local -i tmp_i16=0\n    local -i tmp_v16=0\n    local -i tmp_i17=0\n    local -i tmp_v17=0\n    local -i tmp_i18=0\n    local -i tmp_v18=0\n    local -i tmp_i19=0\n    local -i tmp_v19=0\n    local -i tmp_i20=0\n    local -i tmp_v20=0\n    local -i tmp_i21=0\n    local",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local temp\n    local size\n    local parent\n    local left\n    local right\n    local parent_value\n    local left_value\n    local right_value\n    local min_value\n    local min_index\n    local min_child\n    local min_child_value\n\n    # Build a max heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        size=${#heap[@]}\n        j=$((size - 1))\n        while [ $j -gt 0 ]; do\n            parent=$(((j - 1) / 2))\n            if [ ${heap[$j]} -gt ${heap[$parent]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$parent]}\n                heap[$parent]=$temp\n            fi\n            j=$parent\n        done\n    done\n\n    # Extract the n largest elements\n    for i in $(seq 1 $n); do\n        result[$((i - 1))]=${heap[0]}\n        heap[0]=${heap[$((size - 1))]}\n        unset heap[$((size - 1))]\n        size=$((size - 1))\n        j=0\n        while [ $j -lt $size ]; do\n            parent=$j\n            left=$((2 * j + 1))\n            right=$((2 * j + 2))\n            parent_value=${heap[$parent]}\n            left_value=${heap[$left]}\n            right_value=${heap[$right]}\n            min_value=$parent_value\n            min_index=$parent\n            if [ $left -lt $size ] && [ $left_value -lt $min_value ]; then\n                min_value=$left_value\n                min_index=$left\n            fi\n            if [ $right -lt $size ] && [ $right_value -lt $min_value ]; then\n                min_value=$right_value\n                min_index=$right\n            fi\n",
    "  local list=($1)\n  local n=$2\n  local len=${#list[@]}\n  local i\n  local j\n  local tmp\n  local result=()\n\n  # build a max heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    j=$i\n    while ((2 * j + 1 < len)); do\n      if ((2 * j + 2 < len)); then\n        if ((list[2 * j + 1] > list[2 * j + 2])); then\n          tmp=${list[2 * j + 1]}\n          list[2 * j + 1]=${list[j]}\n          list[j]=$tmp\n          j=2 * j + 1\n        else\n          tmp=${list[2 * j + 2]}\n          list[2 * j + 2]=${list[j]}\n          list[j]=$tmp\n          j=2 * j + 2\n        fi\n      else\n        tmp=${list[2 * j + 1]}\n        list[2 * j + 1]=${list[j]}\n        list[j]=$tmp\n        j=2 * j + 1\n      fi\n    done\n  done\n\n  # extract the largest n elements\n  for ((i = 0; i < n; i++)); do\n    result[i]=${list[0]}\n    list[0]=${list[len - 1 - i]}\n    j=0\n    while ((2 * j + 1 < len - 1 - i)); do\n      if ((2 * j + 2 < len - 1 - i)); then\n        if ((list[2 * j + 1] > list[2 * j + 2])); then\n          tmp=${list[2 * j + 1]}\n          list[2 * j + 1]=${list[j]}\n          list[j]=$tmp\n          j=2 * j + 1\n        else\n          tmp=${list[2 * j + 2]}\n          list[2 * j + 2]=${list[j]}\n          list[j]=$tmp\n          j=2 * j + 2\n        fi\n      else\n        tmp=${list[2 * j + 1]}\n        list[2 * j + 1]=${",
    "  local list=$1\n  local n=$2\n  local -a heap=()\n  local i\n  for i in $list; do\n    heap_queue_insert heap $i\n  done\n  for ((i=0; i<n; i++)); do\n    echo -n \"${heap[0]} \"\n    heap_queue_extract heap\n  done\n  echo",
    "    local -a array=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n\n    # Build a max-heap\n    for ((i = ${#array[@]} / 2 - 1; i >= 0; i--)); do\n        for ((j = i; j * 2 + 1 < ${#array[@]};)); do\n            if ((j * 2 + 2 < ${#array[@]})) && ((array[j * 2 + 2] > array[j * 2 + 1])); then\n                if ((array[j * 2 + 2] > array[j])); then\n                    temp=${array[j]}\n                    array[j]=${array[j * 2 + 2]}\n                    array[j * 2 + 2]=$temp\n                    j=j * 2 + 2\n                else\n                    break\n                fi\n            elif ((array[j * 2 + 1] > array[j])); then\n                temp=${array[j]}\n                array[j]=${array[j * 2 + 1]}\n                array[j * 2 + 1]=$temp\n                j=j * 2 + 1\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the max element n times\n    for ((i = 0; i < n; i++)); do\n        if ((i > 0)); then\n            printf ' '\n        fi\n        printf '%d' ${array[0]}\n        array[0]=${array[${#array[@]} - 1]}\n        unset array[${#array[@]} - 1]\n        for ((j = 0; j * 2 + 1 < ${#array[@]};)); do\n            if ((j * 2 + 2 < ${#array[@]})) && ((array[j * 2 + 2] > array[j * 2 + 1])); then\n                if ((array[j * 2 + 2] > array[j])); then\n                    temp=${array[j]}\n                    array[j]=${array[j * 2 + 2]}\n                    array[j * 2 + 2]=$temp\n                    j=j * 2 + 2\n                else\n                    break\n                fi\n            elif ((array[j * 2 + 1] > array",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1 < n)); do\n            j=2*k+1\n            if ((j+1 < n && heap[j+1] > heap[j])); then\n                j+=1\n            fi\n            if ((heap[k] < heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n; i<${#arr[@]}; i++)); do\n        if ((arr[i] > heap[0])); then\n            heap[0]=${arr[i]}\n            k=0\n            while ((2*k+1 < n)); do\n                j=2*k+1\n                if ((j+1 < n && heap[j+1] > heap[j])); then\n                    j+=1\n                fi\n                if ((heap[k] < heap[j])); then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                    k=j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        heap[0]=$tmp\n        k=0\n        while ((2*k+1 < i)); do\n            j=2*k+1\n            if ((j+1 < i && heap[j+1] > heap[j])); then\n                j+=1\n            fi\n            if ((heap[k] < heap[j])); then\n               ",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a heap\n  local -a result\n  local i\n  local j\n  local tmp\n  local len\n\n  # create a heap\n  for i in $list; do\n    heap+=($i)\n    len=${#heap[@]}\n    j=$((len - 1))\n    while [ $j -gt 0 ]; do\n      if [ ${heap[$j]} -gt ${heap[$((j-1))]} ]; then\n        tmp=${heap[$j]}\n        heap[$j]=${heap[$((j-1))]}\n        heap[$((j-1))]=$tmp\n      fi\n      j=$((j-1))\n    done\n  done\n\n  # extract the largest n elements\n  for i in $(seq 1 $n); do\n    result+=(${heap[0]})\n    heap[0]=${heap[-1]}\n    unset heap[-1]\n    len=${#heap[@]}\n    j=0\n    while [ $j -lt $len ]; do\n      if [ ${heap[$j]} -lt ${heap[$((j+1))]} ]; then\n        tmp=${heap[$j]}\n        heap[$j]=${heap[$((j+1))]}\n        heap[$((j+1))]=$tmp\n      fi\n      j=$((j+1))\n    done\n  done\n\n  # print the result\n  for i in ${result[@]}; do\n    echo $i\n  done",
    "  local -a input=($1)\n  local n=$2\n  local -a heap\n  local -a output\n\n  for i in \"${input[@]}\"; do\n    heap_queue_insert heap \"$i\"\n  done\n\n  for ((i=0; i<n; i++)); do\n    output[i]=$(heap_queue_pop heap)\n  done\n\n  echo \"${output[@]}\"",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -a queue\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list}\n\n    # build heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        j=${#heap[@]}\n        while (( j > 1 )); do\n            k=$(( j / 2 ))\n            if (( heap[k-1] < heap[j-1] )); then\n                tmp=${heap[k-1]}\n                heap[k-1]=${heap[j-1]}\n                heap[j-1]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # extract n largest\n    for (( i=0; i<n; i++ )); do\n        queue[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=1\n        while (( j < ${#heap[@]} )); do\n            k=$(( j * 2 ))\n            if (( k < ${#heap[@]} )); then\n                if (( heap[k-1] < heap[k] )); then\n                    k=$(( k + 1 ))\n                fi\n            fi\n            if (( k <= ${#heap[@]} )); then\n                if (( heap[j-1] < heap[k-1] )); then\n                    tmp=${heap[j-1]}\n                    heap[j-1]=${heap[k-1]}\n                    heap[k-1]=$tmp\n                fi\n            fi\n            j=$k\n        done\n    done\n\n    # output\n    for (( i=0; i<n; i++ )); do\n        echo ${queue[i]}\n    done",
    "    local -a heap\n    local -i i\n    local -i n=\"$2\"\n    local -i len=\"$(wc -w <<< \"$1\")\"\n    local -i max_idx\n    local -i left_child_idx\n    local -i right_child_idx\n    local -i tmp\n    local -i tmp_idx\n\n    # build heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=\"$(cut -d' ' -f$((i+1)) <<< \"$1\")\"\n        max_idx=\"$i\"\n        while ((max_idx > 0)); do\n            tmp_idx=\"$((max_idx - 1))\"\n            if ((heap[max_idx] > heap[tmp_idx])); then\n                tmp=\"${heap[max_idx]}\"\n                heap[max_idx]=\"${heap[tmp_idx]}\"\n                heap[tmp_idx]=\"$tmp\"\n                max_idx=\"$tmp_idx\"\n            else\n                break\n            fi\n        done\n    done\n\n    # extract n largest\n    for ((i=0; i<n; i++)); do\n        echo \"${heap[0]}\"\n        heap[0]=\"${heap[-1]}\"\n        heap=(\"${heap[@]:0:$len}\")\n        len=\"$((len - 1))\"\n        max_idx=0\n        while ((max_idx < len)); do\n            left_child_idx=\"$((max_idx * 2 + 1))\"\n            right_child_idx=\"$((max_idx * 2 + 2))\"\n            if ((left_child_idx >= len)); then\n                break\n            elif ((right_child_idx >= len)); then\n                if ((heap[max_idx] < heap[left_child_idx])); then\n                    tmp=\"${heap[max_idx]}\"\n                    heap[max_idx]=\"${heap[left_child_idx]}\"\n                    heap[left_child_idx",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n    local len=${#list[@]}\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<n)); do\n            if ((2*j+2<n)); then\n                if ((heap[2*j+1]>heap[2*j+2])); then\n                    if ((heap[j]<heap[2*j+1])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+1]}\n                        heap[2*j+1]=$tmp\n                        j=2*j+1\n                    else\n                        break\n                    fi\n                else\n                    if ((heap[j]<heap[2*j+2])); then\n                        tmp=${heap[j]}\n                        heap[j]=${heap[2*j+2]}\n                        heap[2*j+2]=$tmp\n                        j=2*j+2\n                    else\n                        break\n                    fi\n                fi\n            else\n                if ((heap[j]<heap[2*j+1])); then\n                    tmp=${heap[j]}\n                    heap[j]=${heap[2*j+1]}\n                    heap[2*j+1]=$tmp\n                    j=2*j+1\n                else\n                    break\n                fi\n            fi\n        done\n    done\n\n    for ((i=n; i<len; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            j=0\n            while ((2*j+1<n)); do\n                if ((2*j+2<n)); then\n                    if ((heap[2*j+1]>heap[2*j+2])); then\n                        if ((heap[j]<heap",
    "    local -a heap\n    local -i heap_size=0\n    local -i i\n    local -i n=$2\n    local -i tmp\n    local -i tmp_index\n    local -i tmp_parent_index\n    local -i tmp_child_index\n    local -i tmp_child_index2\n    local -i tmp_child_index3\n    local -i tmp_child_index4\n    local -i tmp_child_index5\n    local -i tmp_child_index6\n    local -i tmp_child_index7\n    local -i tmp_child_index8\n    local -i tmp_child_index9\n    local -i tmp_child_index10\n    local -i tmp_child_index11\n    local -i tmp_child_index12\n    local -i tmp_child_index13\n    local -i tmp_child_index14\n    local -i tmp_child_index15\n    local -i tmp_child_index16\n    local -i tmp_child_index17\n    local -i tmp_child_index18\n    local -i tmp_child_index19\n    local -i tmp_child_index20\n    local -i tmp_child_index21\n    local -i tmp_child_index22\n    local -i tmp_child_index23\n    local -i tmp_child_index24\n    local -i tmp_child_index25\n    local -i tmp_child_index26\n    local -i tmp_child_index27\n    local -i tmp_child_index28\n    local -i tmp_child_index29\n    local -i tmp_child_index30\n    local -i tmp_child_index31\n    local -i tmp_child_index32\n    local -i tmp_child_index33\n    local -i tmp_child_index34\n    local -i tmp_child_index35\n    local -i tmp_child_index36\n    local -i tmp_child_index37\n    local -i tmp_child_index38\n    local -i tmp_child_index39\n    local -i tmp_child_index40\n    local -i tmp_child_index41\n    local -i tmp_child",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a queue=()\n  local -a heap=()\n  local -a result=()\n  local i\n\n  # Initialize the queue with the first n elements\n  for i in $(seq 1 \"$n\"); do\n    queue+=(\"${list%% *}\")\n    list=\"${list#* }\"\n  done\n\n  # Build the heap\n  for i in \"${queue[@]}\"; do\n    heap_insert heap \"$i\"\n  done\n\n  # Process the rest of the list\n  while [[ -n \"$list\" ]]; do\n    local next=\"${list%% *}\"\n    list=\"${list#* }\"\n\n    if [[ \"$next\" -gt \"${heap[0]}\" ]]; then\n      heap_replace heap \"$next\"\n    fi\n  done\n\n  # Extract the elements from the heap\n  while [[ \"${#heap[@]}\" -gt 0 ]]; do\n    result+=(\"$(heap_extract heap)\")\n  done\n\n  echo \"${result[*]}\"",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i mid=$(( (len-1)/2 ))\n    local -i left\n    local -i right\n    local -i largest\n    local -i tmp\n\n    # Build the heap\n    for (( i=0; i<len; i++ )); do\n        heap[i]=${1:i:1}\n    done\n    for (( i=mid; i>=0; i-- )); do\n        left=$(( 2*i+1 ))\n        right=$(( 2*i+2 ))\n        if [[ $left -lt len && ${heap[$left]} -gt ${heap[$i]} ]]; then\n            largest=$left\n        else\n            largest=$i\n        fi\n        if [[ $right -lt len && ${heap[$right]} -gt ${heap[$largest]} ]]; then\n            largest=$right\n        fi\n        if [[ $largest -ne $i ]]; then\n            tmp=${heap[$i]}\n            heap[$i]=${heap[$largest]}\n            heap[$largest]=$tmp\n        fi\n    done\n\n    # Extract the largest elements\n    for (( i=0; i<n; i++ )); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[$(( len-i-1 ))]}\n        len=$(( len-1 ))\n        largest=0\n        left=$(( 2*largest+1 ))\n        right=$(( 2*largest+2 ))\n        if [[ $left -lt len && ${heap[$left]} -gt ${heap[$largest]} ]]; then\n            largest=$left\n        fi\n        if [[ $right -lt len && ${heap[$right]} -gt ${heap[$largest]} ]]; then\n            largest=$right\n        fi\n        if [[ $largest -ne 0 ]]; then\n            tmp=${heap[0]}\n            heap[0]=${heap[$largest]}\n            heap[$largest]=$tmp\n        fi\n    done\n    echo",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_index=len-1\n    local -i last_parent_index=$((last_index/2))\n    local -i parent_index\n    local -i left_child_index\n    local -i right_child_index\n    local -i largest_child_index\n    local -i tmp\n    local -i tmp_index\n\n    # Build a max-heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1[i]}\n        parent_index=$((i/2))\n        while ((parent_index >= 0)); do\n            if ((heap[i] > heap[parent_index])); then\n                tmp=heap[i]\n                heap[i]=heap[parent_index]\n                heap[parent_index]=tmp\n                i=parent_index\n                parent_index=$((i/2))\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the n largest elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[last_index-i]}\n        tmp_index=0\n        while true; do\n            left_child_index=$((tmp_index*2+1))\n            right_child_index=$((tmp_index*2+2))\n            if ((left_child_index > last_index-i)); then\n                break\n            elif ((right_child_index > last_index-i)); then\n                largest_child_index=$left_child_index\n            else\n                if ((heap[left_child_index] > heap[right_child_index])); then\n                    largest_child_index=$left_child_index\n                else\n                    largest_child_index=$right_child_index\n                fi\n            fi\n            if ((heap[largest_child_index] > heap[tmp_index])); then\n                tmp=heap[largest_child_index]\n                heap[largest_child_index]=heap[tmp_",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    heap_sort heap\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_sort heap\n        fi\n    done\n    echo ${heap[@]}",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local tmp\n\n    # initialize the heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n    done\n\n    # build the heap\n    for ((i=${#heap[@]}/2-1; i>=0; i--)); do\n        for ((j=i; j<${#heap[@]}/2; )); do\n            k=$((j*2+1))\n            if [[ $k -lt ${#heap[@]}-1 && ${heap[$k]} -lt ${heap[$k+1]} ]]; then\n                k=$k+1\n            fi\n            if [[ ${heap[$j]} -lt ${heap[$k]} ]]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # get the largest n elements\n    for ((i=0; i<n; i++)); do\n        result[$i]=${heap[0]}\n\n        # remove the largest element\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n\n        # heapify\n        for ((j=0; j<${#heap[@]}/2; )); do\n            k=$((j*2+1))\n            if [[ $k -lt ${#heap[@]}-1 && ${heap[$k]} -lt ${heap[$k+1]} ]]; then\n                k=$k+1\n            fi\n            if [[ ${heap[$j]} -lt ${heap[$k]} ]]; then\n                tmp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # print",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n\n    # build the heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j+1<n && heap[j]<heap[j+1])); then\n                j+=1\n            fi\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    # replace the root with the next element in the list\n    for ((i=n; i<${#list[@]}; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            k=0\n            while ((2*k+1<n)); do\n                j=2*k+1\n                if ((j+1<n && heap[j]<heap[j+1])); then\n                    j+=1\n                fi\n                if ((heap[k]<heap[j])); then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                    k=j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    # sort the heap\n    for ((i=n-1; i>0; i--)); do\n        tmp=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$tmp\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j+1<i && heap[j]<heap[j+",
    "  local list=($1)\n  local n=$2\n  local len=${#list[@]}\n  local i=0\n  local j=0\n  local k=0\n  local tmp=0\n  local result=()\n\n  # build a max heap\n  for ((i=len/2-1; i>=0; i--)); do\n    k=$i\n    while [ $k -lt $len ]; do\n      j=$((2*k+1))\n      if [ $j -lt $len ]; then\n        if [ $((j+1)) -lt $len ]; then\n          if [ ${list[$j]} -lt ${list[$((j+1))]} ]; then\n            j=$((j+1))\n          fi\n        fi\n        if [ ${list[$k]} -lt ${list[$j]} ]; then\n          tmp=${list[$k]}\n          list[$k]=${list[$j]}\n          list[$j]=$tmp\n          k=$j\n        else\n          break\n        fi\n      else\n        break\n      fi\n    done\n  done\n\n  # extract the max element n times\n  for ((i=0; i<n; i++)); do\n    result[$i]=${list[0]}\n    list[0]=${list[$((len-i-1))]}\n    list[$((len-i-1))]=${result[$i]}\n    k=0\n    while [ $k -lt $((len-i-1)) ]; do\n      j=$((2*k+1))\n      if [ $j -lt $((len-i-1)) ]; then\n        if [ $((j+1)) -lt $((len-i-1)) ]; then\n          if [ ${list[$j]} -lt ${list[$((j+1))]} ]; then\n            j=$((j+1))\n          fi\n        fi\n        if [ ${list[$k]} -lt ${list[$j]} ]; then\n          tmp=${list[$k]}\n          list[$k]=${list[$j]}\n          list[$j]=$tmp\n          k=$j\n        else\n          break\n        fi",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n\n    arr=($1)\n    n=$2\n    len=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        max=${arr[i]}\n        max_i=$i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n                max_i=$j\n            fi\n        done\n        tmp=${arr[i]}\n        tmp_i=$i\n        tmp_j=$max_i\n        arr[i]=${arr[max_i]}\n        arr[max_i]=$tmp\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo",
    "    local -a arr=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i tmp=0\n    local -i len=0\n    local -i len_half=0\n\n    arr=($1)\n    len=${#arr[@]}\n    len_half=$((len / 2))\n\n    # Build heap\n    for ((i = len_half - 1; i >= 0; i--)); do\n        k=$i\n        while ((2 * k + 1 < len)); do\n            j=$((2 * k + 1))\n            if ((j < len - 1)) && ((arr[j] < arr[j + 1])); then\n                ((j++))\n            fi\n            if ((arr[k] < arr[j])); then\n                tmp=${arr[k]}\n                arr[k]=${arr[j]}\n                arr[j]=$tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract n largest elements\n    for ((i = len - 1; i > len - 1 - n; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        k=0\n        while ((2 * k + 1 < i)); do\n            j=$((2 * k + 1))\n            if ((j < i - 1)) && ((arr[j] < arr[j + 1])); then\n                ((j++))\n            fi\n            if ((arr[k] < arr[j])); then\n                tmp=${arr[k]}\n                arr[k]=${arr[j]}\n                arr[j]=$tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${arr[@]:len - n:n}",
    "    local -a array=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n\n    # build the heap\n    for ((i=0; i<${#array[@]}; i++)); do\n        heap[$i]=${array[$i]}\n        j=$i\n        while ((j>0)); do\n            if ((heap[$((j-1))] < heap[$j])); then\n                tmp=${heap[$((j-1))]}\n                heap[$((j-1))]=${heap[$j]}\n                heap[$j]=$tmp\n            fi\n            j=$((j-1))\n        done\n    done\n\n    # extract the largest n\n    for ((i=0; i<n; i++)); do\n        echo ${heap[$i]}\n    done",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -a result\n    local i\n    local j\n    local k\n    local temp\n\n    # Build a min-heap\n    for i in $list; do\n        heap[${#heap[@]}]=$i\n        j=$(( ${#heap[@]} - 1 ))\n        while [ $j -gt 0 ]; do\n            k=$(( (j - 1) / 2 ))\n            if [ ${heap[$j]} -lt ${heap[$k]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract the n largest elements\n    for (( i=0; i<n; i++ )); do\n        result[$i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]} - 1]}\n        heap=(\"${heap[@]:0:${#heap[@]} - 1}\")\n        j=0\n        while [ $j -lt ${#heap[@]} ]; do\n            k=$(( 2 * j + 1 ))\n            if [ $k -ge ${#heap[@]} ]; then\n                break\n            fi\n            if [ $(( k + 1 )) -lt ${#heap[@]} ] && [ ${heap[$(( k + 1 ))]} -lt ${heap[$k]} ]; then\n                k=$(( k + 1 ))\n            fi\n            if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n                temp=${heap[$j]}\n                heap[$j]=${heap[$k]}\n                heap[$k]=$temp\n            fi\n            j=$k\n        done\n    done\n\n    # Print the result\n    for (( i=${#result[@]} - 1; i>=0; i-- )); do\n        echo ${result[$i]}\n    done",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap=()\n    local i\n    local len=${#arr[@]}\n    local j\n    local k\n    local tmp\n    local heap_size=0\n\n    for ((i=0; i<len; i++)); do\n        if [ $heap_size -lt $n ]; then\n            heap[$heap_size]=${arr[$i]}\n            ((heap_size++))\n            j=$heap_size\n            while [ $j -gt 0 ]; do\n                k=$((j-1))\n                if [ $((k/2)) -ge 0 ] && [ ${heap[$k]} -lt ${heap[$((k/2))]} ]; then\n                    tmp=${heap[$k]}\n                    heap[$k]=${heap[$((k/2))]}\n                    heap[$((k/2))]=$tmp\n                fi\n                j=$((k/2))\n            done\n        else\n            if [ ${arr[$i]} -gt ${heap[0]} ]; then\n                heap[0]=${arr[$i]}\n                j=0\n                while [ $((2*j+1)) -lt $heap_size ]; do\n                    if [ $((2*j+2)) -lt $heap_size ] && [ ${heap[$((2*j+1))]} -gt ${heap[$((2*j+2))]} ]; then\n                        k=$((2*j+2))\n                    else\n                        k=$((2*j+1))\n                    fi\n                    if [ ${heap[$j]} -gt ${heap[$k]} ]; then\n                        tmp=${heap[$j]}\n                        heap[$j]=${heap[$k]}\n                        heap[$k]=$tmp\n                    fi\n                    j=$k\n                done\n            fi\n        fi\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[$i]} \"\n    done\n    echo",
    "    local list=($1)\n    local n=$2\n    local heap=()\n    local i=0\n    local len=${#list[@]}\n    local largest=0\n    local largest_index=0\n    local temp=0\n    local temp_index=0\n    local temp_index_left=0\n    local temp_index_right=0\n    local temp_index_parent=0\n    local temp_index_child=0\n    local temp_index_child_left=0\n    local temp_index_child_right=0\n    local temp_index_child_largest=0\n    local temp_index_child_largest_left=0\n    local temp_index_child_largest_right=0\n\n    # Initialize heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n\n    # Heapify\n    for ((i=n/2; i>=0; i--)); do\n        temp_index=$i\n        temp=${heap[$temp_index]}\n        temp_index_child_left=$((2*temp_index+1))\n        temp_index_child_right=$((2*temp_index+2))\n        temp_index_child_largest=$temp_index_child_left\n        while [[ $temp_index_child_largest -lt $n ]]; do\n            temp_index_child_largest_left=$((2*temp_index_child_largest+1))\n            temp_index_child_largest_right=$((2*temp_index_child_largest+2))\n            if [[ $temp_index_child_largest_left -lt $n && ${heap[$temp_index_child_largest_left]} -gt ${heap[$temp_index_child_largest]} ]]; then\n                temp_index_child_largest=$temp_index_child_largest_left\n            fi\n            if [[ $temp_index_child_largest_right -lt $n && ${heap[$temp_index_child_largest_right]} -gt ${heap[$temp_index_child_largest]} ]]; then\n                temp_index_child_largest=$temp_",
    "    local -a arr=(\"$@\")\n    local -i n=${#arr[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n    local -i m\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i x\n    local -i y\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        x = arr[i]\n        j = i\n        while ((j <= n / 2 - 1)) do\n            k = 2 * j + 1\n            if ((k < n - 1 && arr[k] < arr[k + 1])) then\n                ((k++))\n            fi\n            if ((x >= arr[k])) then\n                break\n            fi\n            arr[j] = arr[k]\n            ((j = k))\n        done\n        arr[j] = x\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        x = arr[0]\n        arr[0] = arr[i]\n        arr[i] = x\n        j = 0\n        while ((j <= i / 2 - 1)) do\n            k = 2 * j + 1\n            if ((k < i - 1 && arr[k] < arr[k + 1])) then\n                ((k++))\n            fi\n            if ((arr[j] >= arr[k])) then\n                break\n            fi\n            x = arr[j]\n            arr[j] = arr[k]\n            arr[k] = x\n            ((j = k))\n        done\n    done\n\n    for ((i = 0; i < n; i++)); do\n        echo -n \"${arr[i]} \"\n    done\n    echo",
    "    local -a heap\n    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$((i+1))\n        while ((j>0)); do\n            k=$((j-1))\n            if ((heap[k]<heap[i])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[i]}\n                heap[i]=$tmp\n            fi\n            j=$((k/2))\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[len-i-1]}\n        j=0\n        while ((j<len-i-1)); do\n            k=$((j*2+1))\n            if ((k+1<len-i-1 && heap[k+1]>heap[k])); then\n                k=$((k+1))\n            fi\n            if ((k<len-i-1 && heap[k]>heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$((j+1))\n        done\n    done",
    "    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n    # Build a max-heap\n    for ((i=${#list[@]}/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<${#list[@]})); do\n            if ((2*j+2<${#list[@]})); then\n                if ((list[2*j+1]>list[2*j+2])); then\n                    if ((list[j]<list[2*j+1])); then\n                        temp=${list[j]}\n                        list[j]=${list[2*j+1]}\n                        list[2*j+1]=$temp\n                        j=2*j+1\n                    else\n                        break\n                    fi\n                else\n                    if ((list[j]<list[2*j+2])); then\n                        temp=${list[j]}\n                        list[j]=${list[2*j+2]}\n                        list[2*j+2]=$temp\n                        j=2*j+2\n                    else\n                        break\n                    fi\n                fi\n            else\n                if ((list[j]<list[2*j+1])); then\n                    temp=${list[j]}\n                    list[j]=${list[2*j+1]}\n                    list[2*j+1]=$temp\n                    j=2*j+1\n                else\n                    break\n                fi\n            fi\n        done\n    done\n    # Extract the n largest integers\n    for ((i=0; i<n; i++)); do\n        echo ${list[0]}\n        list[0]=${list[${#list[@]}-1]}\n        list=(${list[@]:0:${#list[@]}-1})\n        j=0\n        while ((2*j+1<${#list[@]})); do\n            if ((2*j+2<${#list[@]})); then\n                if ((list[2*j+1]>list[2*j+2])); then\n                    if ((list[j]<list[2*j",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a array\n  local -a queue\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i len=0\n  local -i len_queue=0\n  local -i len_array=0\n  local -i len_queue_half=0\n  local -i len_array_half=0\n  local -i len_queue_third=0\n  local -i len_array_third=0\n  local -i len_queue_third_times_two=0\n  local -i len_array_third_times_two=0\n  local -i len_queue_third_times_three=0\n  local -i len_array_third_times_three=0\n  local -i len_queue_third_times_four=0\n  local -i len_array_third_times_four=0\n  local -i len_queue_third_times_five=0\n  local -i len_array_third_times_five=0\n  local -i len_queue_third_times_six=0\n  local -i len_array_third_times_six=0\n  local -i len_queue_third_times_seven=0\n  local -i len_array_third_times_seven=0\n  local -i len_queue_third_times_eight=0\n  local -i len_array_third_times_eight=0\n  local -i len_queue_third_times_nine=0\n  local -i len_array_third_times_nine=0\n  local -i len_queue_third_times_ten=0\n  local -i len_array",
    "  local -a heap\n  local -i i\n  local -i n=$2\n  local -i len=${#1}\n  local -i last_parent=$((n / 2 - 1))\n  local -i parent\n  local -i child\n  local -i tmp\n\n  # Build the heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${1[i]}\n  done\n  for ((i=last_parent; i>=0; i--)); do\n    parent=$i\n    while ((1)); do\n      child=$((2 * parent + 1))\n      if ((child >= n)); then\n        break\n      fi\n      if ((child + 1 < n && heap[child] < heap[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((heap[parent] < heap[child])); then\n        tmp=${heap[parent]}\n        heap[parent]=${heap[child]}\n        heap[child]=$tmp\n        parent=$child\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i=n; i<len; i++)); do\n    if ((heap[0] < ${1[i]})); then\n      heap[0]=${1[i]}\n      parent=0\n      while ((1)); do\n        child=$((2 * parent + 1))\n        if ((child >= n)); then\n          break\n        fi\n        if ((child + 1 < n && heap[child] < heap[child + 1])); then\n          child=$((child + 1))\n        fi\n        if ((heap[parent] < heap[child])); then\n          tmp=${heap[parent]}\n          heap[parent]=${heap[child]}\n          heap[child]=$tmp\n          parent=$child\n        else\n          break\n        fi\n      done\n    fi\n  done\n\n  # Print the result\n  for ((i=0; i<n; i++)); do\n    echo ${heap[i]}\n  done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap\n\n  # Build a max heap\n  for ((i=0; i<${#list[@]}; i++)); do\n    heap_queue_insert heap \"${list[i]}\"\n  done\n\n  # Extract the largest n elements\n  for ((i=0; i<n; i++)); do\n    heap_queue_extract heap\n  done",
    "    local -a arr=()\n    local -i i=0\n    local -i n=0\n    local -i len=0\n    local -i max=0\n    local -i max_i=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_l=0\n    local -i tmp_m=0\n    local -i tmp_n=0\n    local -i tmp_o=0\n    local -i tmp_p=0\n    local -i tmp_q=0\n    local -i tmp_r=0\n    local -i tmp_s=0\n    local -i tmp_t=0\n    local -i tmp_u=0\n    local -i tmp_v=0\n    local -i tmp_w=0\n    local -i tmp_x=0\n    local -i tmp_y=0\n    local -i tmp_z=0\n    local -i tmp_aa=0\n    local -i tmp_ab=0\n    local -i tmp_ac=0\n    local -i tmp_ad=0\n    local -i tmp_ae=0\n    local -i tmp_af=0\n    local -i tmp_ag=0\n    local -i tmp_ah=0\n    local -i tmp_ai=0\n    local -i tmp_aj=0\n    local -i tmp_ak=0\n    local -i tmp_al=0\n    local -i tmp_am=0\n    local -i tmp_an=0\n    local -i tmp_ao=0\n    local -i tmp_ap=0\n    local -i tmp_aq=0\n    local -i tmp_ar=0\n    local -i tmp_as=0\n    local -i tmp_at=0\n    local -i tmp_au=0\n    local -i tmp_av=0\n    local -i tmp_aw=0\n    local -i tmp_ax=0\n    local -i tmp_ay=0\n    local -i tmp_az=0\n    local -i tmp_ba=0\n    local -",
    "    local -a heap=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local len=${#heap[@]}\n\n    # Build a heap\n    for ((i=len/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<len)); do\n            k=2*j+1\n            if ((k+1<len && heap[k]<heap[k+1])); then\n                ((k++))\n            fi\n            if ((heap[j]<heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                ((j=k))\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the top n elements\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[len-1-i]}\n        ((j=0))\n        while ((2*j+1<len-1-i)); do\n            k=2*j+1\n            if ((k+1<len-1-i && heap[k]<heap[k+1])); then\n                ((k++))\n            fi\n            if ((heap[j]<heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n                ((j=k))\n            else\n                break\n            fi\n        done\n    done\n    echo",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local i\n    local j\n    local temp\n    local size=${#list[@]}\n\n    # Build a max heap\n    for ((i=1; i<size; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>1)); do\n            if ((heap[j]>heap[j/2])); then\n                temp=${heap[j]}\n                heap[j]=${heap[j/2]}\n                heap[j/2]=$temp\n            fi\n            j=$j/2\n        done\n    done\n\n    # Extract the n largest elements\n    for ((i=0; i<n; i++)); do\n        echo ${heap[1]}\n        heap[1]=${heap[size-i-1]}\n        j=1\n        while ((2*j<size-i-1)); do\n            if ((2*j+1<size-i-1)); then\n                if ((heap[2*j]>heap[2*j+1])); then\n                    if ((heap[j]<heap[2*j])); then\n                        temp=${heap[j]}\n                        heap[j]=${heap[2*j]}\n                        heap[2*j]=$temp\n                        j=2*j\n                    else\n                        break\n                    fi\n                else\n                    if ((heap[j]<heap[2*j+1])); then\n                        temp=${heap[j]}\n                        heap[j]=${heap[2*j+1]}\n                        heap[2*j+1]=$temp\n                        j=2*j+1\n                    else\n                        break\n                    fi\n                fi\n            else\n                if ((heap[j]<heap[2*j])); then\n                    temp=${heap[j]}\n                    heap[j]=${heap[2*j]}\n                    heap[2*j]=$temp\n                    j=2*j\n                else\n                    break\n                fi\n            fi\n        done\n    done",
    "  local -a arr=()\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i t=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo=0\n  local -i ppp=0",
    "  local -a array=($1)\n  local n=$2\n  local i\n  local j\n  local tmp\n  local len=${#array[@]}\n  local last_parent=$((len/2-1))\n  local last_child=$((len-1))\n\n  # build heap\n  for ((i=last_parent; i>=0; i--)); do\n    j=$i\n    while ((j<=last_parent)); do\n      local left=$((2*j+1))\n      local right=$((2*j+2))\n      if ((left<=last_child && array[left]>array[j])); then\n        tmp=${array[j]}\n        array[j]=${array[left]}\n        array[left]=$tmp\n      fi\n      if ((right<=last_child && array[right]>array[j])); then\n        tmp=${array[j]}\n        array[j]=${array[right]}\n        array[right]=$tmp\n      fi\n      j=$((j+1))\n    done\n  done\n\n  # extract n largest\n  for ((i=0; i<n; i++)); do\n    tmp=${array[0]}\n    array[0]=${array[last_child]}\n    array[last_child]=$tmp\n    last_child=$((last_child-1))\n    j=0\n    while ((j<=last_parent)); do\n      local left=$((2*j+1))\n      local right=$((2*j+2))\n      if ((left<=last_child && array[left]>array[j])); then\n        tmp=${array[j]}\n        array[j]=${array[left]}\n        array[left]=$tmp\n      fi\n      if ((right<=last_child && array[right]>array[j])); then\n        tmp=${array[j]}\n        array[j]=${array[right]}\n        array[right]=$tmp\n      fi\n      j=$((j+1))\n    done\n  done\n\n  # print n largest\n  for ((i=0; i<n; i++)); do\n    echo ${array[i]}\n ",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=0\n    local -i temp=0\n    local -i temp2=0\n    local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n    local -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n    local -i temp41=0\n    local -i temp42=0\n    local -i temp43=0\n    local -i temp44=0\n    local -i temp45=0\n    local -i temp46=0\n    local -i temp47=0\n    local -i temp48=0\n   ",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i m\n    local -i t\n    local -i x\n    local -i y\n    local -i z\n\n    i=0\n    for x in $list; do\n        heap[i]=$x\n        ((i++))\n    done\n\n    ((m = i / 2))\n    for ((i = m; i >= 0; i--)); do\n        x=${heap[i]}\n        k=i\n        while ((k <= m)); do\n            j=2 * k\n            if ((j < i && heap[j] < heap[j + 1])); then\n                ((j++))\n            fi\n            if ((x >= heap[j])); then\n                break\n            fi\n            heap[k]=${heap[j]}\n            ((k = j))\n        done\n        heap[k]=$x\n    done\n\n    for ((i = i - 1; i >= 0; i--)); do\n        x=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$x\n        k=0\n        while ((k <= i)); do\n            j=2 * k\n            if ((j < i && heap[j] < heap[j + 1])); then\n                ((j++))\n            fi\n            if ((x >= heap[j])); then\n                break\n            fi\n            heap[k]=${heap[j]}\n            ((k = j))\n        done\n        heap[k]=$x\n    done\n\n    for ((i = 0; i < n; i++)); do\n        echo -n \"${heap[i]} \"\n    done\n    echo",
    "  local list=($1)\n  local n=$2\n  local heap=()\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n\n  # Build heap\n  for ((i=0; i<${#list[@]}; i++)); do\n    heap[i]=${list[i]}\n    j=$((i-1))\n    while ((j>=0)); do\n      k=$(((j-1)/2))\n      if ((heap[j]>heap[k])); then\n        temp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$temp\n      fi\n      j=$k\n    done\n  done\n\n  # Extract largest n elements\n  for ((i=0; i<n; i++)); do\n    echo ${heap[0]}\n    heap[0]=${heap[${#heap[@]}-1]}\n    unset heap[${#heap[@]}-1]\n    j=0\n    while ((j<${#heap[@]})); do\n      k=$((2*j+1))\n      if ((k>=${#heap[@]})); then\n        break\n      fi\n      if ((k+1<${#heap[@]})); then\n        if ((heap[k]<heap[k+1])); then\n          k=$((k+1))\n        fi\n      fi\n      if ((heap[j]<heap[k])); then\n        temp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$temp\n      fi\n      j=$k\n    done\n  done",
    "    local list=$1\n    local n=$2\n    local -a heap=()\n    local -a result=()\n    local i\n    local j\n    local tmp\n    local len=${#list}\n    local len_heap=0\n    local len_result=0\n\n    for i in ${list}; do\n        if [[ ${len_heap} -lt ${n} ]]; then\n            heap[${len_heap}]=${i}\n            len_heap=$((len_heap + 1))\n            if [[ ${len_heap} -eq ${n} ]]; then\n                for ((j = ${len_heap} / 2 - 1; j >= 0; j--)); do\n                    tmp=${heap[${j}]}\n                    if [[ ${tmp} -lt ${heap[$((2 * j + 1))]} ]]; then\n                        heap[${j}]=${heap[$((2 * j + 1))]}\n                        heap[$((2 * j + 1))]=${tmp}\n                    fi\n                    if [[ ${tmp} -lt ${heap[$((2 * j + 2))]} ]]; then\n                        heap[${j}]=${heap[$((2 * j + 2))]}\n                        heap[$((2 * j + 2))]=${tmp}\n                    fi\n                done\n            fi\n        else\n            if [[ ${i} -gt ${heap[0]} ]]; then\n                heap[0]=${i}\n                for ((j = 0; j < ${len_heap} / 2; j++)); do\n                    tmp=${heap[${j}]}\n                    if [[ ${tmp} -lt ${heap[$((2 * j + 1))]} ]]; then\n                        heap[${j}]=${heap[$((2 * j + 1))]}\n                        heap[$((2 * j + 1))]=${tmp}\n                    fi\n                    if [[ ${tmp} -lt ${heap[$((2 * j + 2))]} ]]; then\n                        heap[${j}]=${heap[$((2 * j + 2))]}\n                        heap[$((2 * j + 2))]=${tmp}\n                    fi\n                done\n",
    "    local -a heap\n    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        k=$i\n        while ((k>0)); do\n            j=$(((k-1)/2))\n            if ((heap[k]>heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            k=$j\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo ${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        k=0\n        while ((k<${#heap[@]})); do\n            j=$((2*k+1))\n            if ((j>=${#heap[@]})); then\n                break\n            fi\n            if ((j+1<${#heap[@]})); then\n                if ((heap[j]<heap[j+1])); then\n                    j=$((j+1))\n                fi\n            fi\n            if ((heap[k]<heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            k=$j\n        done\n    done",
    "  local -a list=($1)\n  local n=$2\n  local -a heap\n  local -a result\n  local i\n  local j\n  local tmp\n  local len=${#list[@]}\n\n  # build heap\n  for ((i=0; i<len; i++)); do\n    heap[i]=${list[i]}\n    j=$i\n    while ((j > 0)); do\n      if ((heap[j] > heap[(j-1)/2])); then\n        tmp=${heap[j]}\n        heap[j]=${heap[(j-1)/2]}\n        heap[(j-1)/2]=$tmp\n      fi\n      j=$(((j-1)/2))\n    done\n  done\n\n  # extract n largest elements\n  for ((i=0; i<n; i++)); do\n    result[i]=${heap[0]}\n    heap[0]=${heap[len-i-1]}\n    j=0\n    while ((2*j+1 < len-i-1)); do\n      if ((2*j+2 < len-i-1)); then\n        if ((heap[2*j+1] > heap[2*j+2])); then\n          if ((heap[2*j+1] > heap[j])); then\n            tmp=${heap[j]}\n            heap[j]=${heap[2*j+1]}\n            heap[2*j+1]=$tmp\n            j=2*j+1\n          else\n            break\n          fi\n        else\n          if ((heap[2*j+2] > heap[j])); then\n            tmp=${heap[j]}\n            heap[j]=${heap[2*j+2]}\n            heap[2*j+2]=$tmp\n            j=2*j+2\n          else\n            break\n          fi\n        fi\n      else\n        if ((heap[2*j+1] > heap[j])); then\n          tmp=${heap[j]}\n          heap[j]=${heap[2*j+1]}\n          heap[2*j+1]=$tmp",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a array\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i m\n    local -i t\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i x\n    local -i y\n\n    # Convert list to array\n    array=($list)\n\n    # Initialize heap\n    heap=(0)\n\n    # Insert elements into heap\n    for ((i=0; i<${#array[@]}; i++)); do\n        # Insert element\n        heap[${#heap[@]}]=${array[i]}\n\n        # Bubble up\n        j=${#heap[@]}-1\n        while ((j>1)); do\n            k=j/2\n            if ((heap[k]<heap[j])); then\n                t=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$t\n            fi\n            j=k\n        done\n    done\n\n    # Extract elements from heap\n    for ((i=0; i<n; i++)); do\n        # Extract element\n        echo -n \"${heap[1]} \"\n\n        # Replace root with last element\n        heap[1]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n\n        # Bubble down\n        j=1\n        while ((j<${#heap[@]})); do\n            k=j\n            p=2*j\n            q=p+1\n            if ((p<${#heap[@]} && heap[p]>heap[k])); then\n                k=p\n            fi\n            if ((q<${#heap[@]} && heap[q]>heap[k])); then\n                k=q\n            fi\n            if ((k==j)); then\n                break\n            fi\n            t=${heap[k]}\n            heap[k]=${heap[j]}\n            heap[j]=$t\n            j=k",
    "    local -a array=($1)\n    local n=$2\n    local i\n    local j\n    local temp\n    local len=${#array[@]}\n\n    # Build a max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        j=$i\n        while ((2*j+1<len)); do\n            if ((2*j+2<len && array[2*j+2]>array[2*j+1])) ; then\n                ((temp=2*j+2))\n            else\n                ((temp=2*j+1))\n            fi\n            if ((array[temp]>array[j])) ; then\n                ((array[temp],array[j]=array[j],array[temp]))\n                ((j=temp))\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the max element and heapify\n    for ((i=0; i<n; i++)); do\n        ((array[0],array[len-i-1]=array[len-i-1],array[0]))\n        j=0\n        while ((2*j+1<len-i-1)); do\n            if ((2*j+2<len-i-1 && array[2*j+2]>array[2*j+1])) ; then\n                ((temp=2*j+2))\n            else\n                ((temp=2*j+1))\n            fi\n            if ((array[temp]>array[j])) ; then\n                ((array[temp],array[j]=array[j],array[temp]))\n                ((j=temp))\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the result\n    for ((i=0; i<n; i++)); do\n        echo ${array[len-i-1]}\n    done",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a queue=()\n    local -a result=()\n    local item\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local -a aa\n    local -a bb\n    local -a cc\n    local -a dd\n    local -a ee\n    local -a ff\n    local -a gg\n    local -a hh\n    local -a ii\n    local -a jj\n    local -a kk\n    local -a ll\n    local -a mm\n    local -a nn\n    local -a oo\n    local -a pp\n    local -a qq\n    local -a rr\n    local -a ss\n    local -a tt\n    local -a uu\n    local -a vv\n    local -a ww\n    local -a xx\n    local -a yy\n    local -a zz\n    local -a aaa\n    local -a bbb\n    local -a ccc\n    local -a ddd\n    local -a eee\n    local -a fff\n    local -a ggg\n    local -a hhh\n    local -a iii\n    local -a jjj\n    local -a kkk\n    local -a lll\n    local -a mmm\n    local -a nnn\n    local -a ooo\n    local -a ppp\n    local -a qqq\n    local -a rrr\n    local -a sss\n    local -a ttt\n    local -a uuu\n    local -a vvv\n    local -a www\n    local -a xxx\n    local -a yyy\n    local -a zzz\n    local -a aaaa\n    local -a bbbb\n    local -a cccc\n    local -a dddd\n    local -a eeee\n    local -a ffff\n    local -a",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a arr=()\n    local -a heap=()\n    local -a result=()\n    local i\n    local j\n    local k\n    local tmp\n\n    # Convert the list to an array\n    IFS=' ' read -r -a arr <<< \"$list\"\n\n    # Build a min-heap\n    for ((i=0; i<${#arr[@]}; i++)); do\n        heap[i]=${arr[i]}\n        j=$i\n        while ((j > 0)); do\n            k=$(((j - 1) / 2))\n            if ((heap[k] > heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # Extract the largest n elements\n    for ((i=0; i<n; i++)); do\n        result[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        heap=(\"${heap[@]:0:${#heap[@]}-1}\")\n        j=0\n        while ((2*j+1 < ${#heap[@]})); do\n            k=$((2*j+1))\n            if ((2*j+2 < ${#heap[@]} && heap[2*j+2] < heap[k])); then\n                k=$((2*j+2))\n            fi\n            if ((heap[j] > heap[k])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # Print the result\n    for ((i=0; i<${#result[@]}; i++)); do\n        echo \"${result[i]}\"\n    done",
    "  local -a array=($1)\n  local n=$2\n  local -i i\n  local -i j\n  local -i k\n  local -i heap_size=${#array[@]}\n  local -i temp\n  local -i largest\n  local -i left\n  local -i right\n\n  # Build heap\n  for ((i=heap_size/2; i>=0; i--)); do\n    k=$i\n    while ((k<heap_size)); do\n      left=$((2*k+1))\n      right=$((2*k+2))\n      if ((left<heap_size && array[left]>array[k])); then\n        largest=$left\n      else\n        largest=$k\n      fi\n      if ((right<heap_size && array[right]>array[largest])); then\n        largest=$right\n      fi\n      if ((largest!=k)); then\n        temp=${array[k]}\n        array[k]=${array[largest]}\n        array[largest]=$temp\n        k=$largest\n      else\n        break\n      fi\n    done\n  done\n\n  # Extract n largest\n  for ((i=0; i<n; i++)); do\n    temp=${array[0]}\n    array[0]=${array[heap_size-1]}\n    array[heap_size-1]=$temp\n    heap_size=$((heap_size-1))\n    k=0\n    while ((k<heap_size)); do\n      left=$((2*k+1))\n      right=$((2*k+2))\n      if ((left<heap_size && array[left]>array[k])); then\n        largest=$left\n      else\n        largest=$k\n      fi\n      if ((right<heap_size && array[right]>array[largest])); then\n        largest=$right\n      fi\n      if ((largest!=k)); then\n        temp=${array[k]}\n        array[k]=${array[largest]}\n        array[largest]=$temp\n        k=$largest\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${array[@",
    "    local -a arr=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#arr[@]}\n\n    # build a heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n        k=$i\n        while ((k>0)); do\n            j=$(((k-1)/2))\n            if ((heap[k]>heap[j])); then\n                tmp=${heap[k]}\n                heap[k]=${heap[j]}\n                heap[j]=$tmp\n            fi\n            k=$j\n        done\n    done\n\n    # add the rest of the elements\n    for ((i=n; i<len; i++)); do\n        if ((arr[i]>heap[0])); then\n            heap[0]=${arr[i]}\n            k=0\n            while ((k<n)); do\n                j=$((2*k+1))\n                if ((j>=n)); then\n                    break\n                fi\n                if ((j+1<n && heap[j]<heap[j+1])); then\n                    j=$((j+1))\n                fi\n                if ((heap[k]<heap[j])); then\n                    tmp=${heap[k]}\n                    heap[k]=${heap[j]}\n                    heap[j]=$tmp\n                fi\n                k=$j\n            done\n        fi\n    done\n\n    # sort the heap\n    for ((i=n-1; i>0; i--)); do\n        tmp=${heap[i]}\n        heap[i]=${heap[0]}\n        heap[0]=$tmp\n        k=0\n        while ((k<i)); do\n            j=$((2*k+1))\n            if ((j>=i)); then\n                break\n            fi\n            if ((j+1<i && heap[j]<heap[j+1])); then\n                j=$((j+1))\n            fi\n            if ((heap[k]<heap[j])); then\n               ",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n    local last_parent=$((len / 2 - 1))\n\n    # build max heap\n    for ((i = last_parent; i >= 0; i--)); do\n        j=$i\n        while ((j < len)); do\n            tmp=$j\n            if ((2 * j + 1 < len && arr[j] < arr[2 * j + 1])); then\n                tmp=2*j+1\n            fi\n            if ((2 * j + 2 < len && arr[tmp] < arr[2 * j + 2])); then\n                tmp=2*j+2\n            fi\n            if ((tmp == j)); then\n                break\n            fi\n            arr[j]=${arr[tmp]}\n            arr[tmp]=${arr[j]}\n            j=$tmp\n        done\n    done\n\n    # sort\n    for ((i = len - 1; i >= len - n; i--)); do\n        tmp=${arr[0]}\n        arr[0]=${arr[i]}\n        arr[i]=$tmp\n        j=0\n        while ((j < i)); do\n            tmp=$j\n            if ((2 * j + 1 < i && arr[j] < arr[2 * j + 1])); then\n                tmp=2*j+1\n            fi\n            if ((2 * j + 2 < i && arr[tmp] < arr[2 * j + 2])); then\n                tmp=2*j+2\n            fi\n            if ((tmp == j)); then\n                break\n            fi\n            arr[j]=${arr[tmp]}\n            arr[tmp]=${arr[j]}\n            j=$tmp\n        done\n    done\n\n    echo ${arr[@]:len-n:n}",
    "  local -a heap=($1)\n  local n=$2\n  local i=0\n  local j=0\n  local tmp=0\n  local len=${#heap[@]}\n\n  # build heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    # heapify\n    for ((j = i; j < len;)); do\n      local left=$((2 * j + 1))\n      local right=$((2 * j + 2))\n      local largest=$j\n\n      if [[ $left -lt $len && ${heap[$left]} -gt ${heap[$largest]} ]]; then\n        largest=$left\n      fi\n\n      if [[ $right -lt $len && ${heap[$right]} -gt ${heap[$largest]} ]]; then\n        largest=$right\n      fi\n\n      if [[ $largest -ne $j ]]; then\n        tmp=${heap[$j]}\n        heap[$j]=${heap[$largest]}\n        heap[$largest]=$tmp\n        j=$largest\n      else\n        break\n      fi\n    done\n  done\n\n  # extract top n\n  for ((i = 0; i < n; i++)); do\n    echo -n \"${heap[0]} \"\n    heap[0]=${heap[$((len - i - 1))]}\n    len=$((len - 1))\n\n    # heapify\n    for ((j = 0; j < len;)); do\n      local left=$((2 * j + 1))\n      local right=$((2 * j + 2))\n      local largest=$j\n\n      if [[ $left -lt $len && ${heap[$left]} -gt ${heap[$largest]} ]]; then\n        largest=$left\n      fi\n\n      if [[ $right -lt $len && ${heap[$right]} -gt ${heap[$largest]} ]]; then\n        largest=$right\n      fi\n\n      if [[ $largest -ne $j ]]; then\n        tmp=${heap[$j]}\n        heap[$j]=${heap[$largest]}\n        heap[$largest]=$tmp\n        j=$largest\n      else\n        break\n      fi",
    "    local -a heap\n    local -i n=$2\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i t\n    local -i x\n    local -i y\n\n    # Initialize the heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${1%% *}\n        shift\n    done\n\n    # Heapify the heap\n    for ((i=n/2-1; i>=0; i--)); do\n        x=${heap[i]}\n        j=i\n        while ((j<n/2)); do\n            k=2*j+1\n            l=2*j+2\n            if ((l<n && heap[l]>heap[k])); then\n                k=l\n            fi\n            if ((heap[k]<=x)); then\n                break\n            fi\n            heap[j]=${heap[k]}\n            j=k\n        done\n        heap[j]=$x\n    done\n\n    # Sort the heap\n    for ((i=n-1; i>0; i--)); do\n        t=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$t\n        x=${heap[0]}\n        j=0\n        while ((j<i/2)); do\n            k=2*j+1\n            l=2*j+2\n            if ((l<i && heap[l]>heap[k])); then\n                k=l\n            fi\n            if ((heap[k]<=x)); then\n                break\n            fi\n            heap[j]=${heap[k]}\n            j=k\n        done\n        heap[j]=$x\n    done\n\n    # Print the result\n    for ((i=0; i<n; i++)); do\n        echo ${heap[i]}\n    done",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i tmp=0\n\n    # Build a heap from the list\n    for ((i=0; i<${#list[@]}; i++)); do\n        heap[i]=${list[i]}\n        j=i\n        while ((j>0)); do\n            k=(j-1)/2\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=k\n        done\n    done\n\n    # Extract the n largest elements\n    for ((i=0; i<n; i++)); do\n        list[i]=${heap[0]}\n        heap[0]=${heap[${#heap[@]}-1]}\n        unset heap[${#heap[@]}-1]\n        j=0\n        while ((j<${#heap[@]})); do\n            k=j\n            if ((2*j+1<${#heap[@]} && heap[2*j+1]>heap[k])); then\n                k=2*j+1\n            fi\n            if ((2*j+2<${#heap[@]} && heap[2*j+2]>heap[k])); then\n                k=2*j+2\n            fi\n            if ((k==j)); then\n                break\n            fi\n            tmp=${heap[j]}\n            heap[j]=${heap[k]}\n            heap[k]=$tmp\n            j=k\n        done\n    done\n\n    # Sort the n largest elements\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((list[j]>list[i])); then\n                tmp=${list[i]}\n                list[i]=${list[j]}\n                list",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i index\n    local -i parent\n    local -i child\n    local -i temp\n\n    for i in $1; do\n        heap[size]=$i\n        index=$size\n        ((size++))\n\n        while ((index > 0)); do\n            ((parent=(index-1)/2))\n            if ((heap[index] > heap[parent])); then\n                temp=${heap[index]}\n                heap[index]=${heap[parent]}\n                heap[parent]=$temp\n            fi\n            ((index=parent))\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[size-1]}\n        ((size--))\n        index=0\n\n        while ((index < size)); do\n            ((child=index*2+1))\n            if ((child >= size)); then\n                break\n            fi\n            if ((child+1 < size)) && ((heap[child+1] > heap[child])); then\n                ((child++))\n            fi\n            if ((heap[index] < heap[child])); then\n                temp=${heap[index]}\n                heap[index]=${heap[child]}\n                heap[child]=$temp\n            fi\n            ((index=child))\n        done\n    done",
    "    local -a heap\n    local -i i j k\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_idx=$((len-1))\n    local -i parent_idx\n    local -i child_idx\n    local -i tmp\n    local -i largest_idx\n\n    # initialize heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1:i:1}\n    done\n\n    # build heap\n    for ((i=0; i<len; i++)); do\n        parent_idx=$((i-1))\n        child_idx=$i\n        while ((parent_idx >= 0)); do\n            if ((heap[child_idx] > heap[parent_idx])); then\n                tmp=${heap[parent_idx]}\n                heap[parent_idx]=${heap[child_idx]}\n                heap[child_idx]=$tmp\n            fi\n            child_idx=$parent_idx\n            parent_idx=$((parent_idx-1))\n        done\n    done\n\n    # extract n largest elements\n    for ((i=0; i<n; i++)); do\n        largest_idx=$last_idx\n        echo -n \"${heap[largest_idx]} \"\n        heap[largest_idx]=${heap[0]}\n        parent_idx=0\n        while ((parent_idx < last_idx)); do\n            child_idx=$((parent_idx*2+1))\n            if ((child_idx < last_idx)); then\n                if ((heap[child_idx] < heap[child_idx+1])); then\n                    child_idx=$((child_idx+1))\n                fi\n            fi\n            if ((child_idx > last_idx)); then\n                break\n            fi\n            if ((heap[parent_idx] < heap[child_idx])); then\n                tmp=${heap[parent_idx]}\n                heap[parent_idx]=${heap[child_idx]}\n                heap",
    "  local list=($1)\n  local n=$2\n\n  # create a heap queue\n  local queue=()\n  for ((i=0; i<${#list[@]}; i++)); do\n    queue[i]=${list[i]}\n  done\n  heap_queue_build_max_heap queue[@]\n\n  # extract the largest n elements\n  local largest=()\n  for ((i=0; i<n; i++)); do\n    largest[i]=${queue[0]}\n    queue[0]=${queue[${#queue[@]}-1]}\n    unset queue[${#queue[@]}-1]\n    heap_queue_max_heapify queue[@] 0\n  done\n\n  # return the largest elements in descending order\n  for ((i=${#largest[@]}-1; i>=0; i--)); do\n    echo ${largest[i]}\n  done",
    "    local -a arr=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local len=${#arr[@]}\n    local -a heap=()\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${arr[i]}\n    done\n\n    for ((i=n/2-1; i>=0; i--)); do\n        heap_adjust ${heap[@]} $i $n\n    done\n\n    for ((i=n; i<len; i++)); do\n        if [[ ${arr[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${arr[i]}\n            heap_adjust ${heap[@]} 0 $n\n        fi\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        tmp=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$tmp\n        heap_adjust ${heap[@]} 0 $i\n    done\n\n    echo ${heap[@]}",
    "    local list=$1\n    local n=$2\n    local -a heap\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n_heap=0\n    local -i n_list=$(echo \"$list\" | wc -w)\n    local -i parent=0\n    local -i child=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_index2=0\n    local -i temp_index3=0\n\n    if [[ $n -gt $n_list ]]; then\n        n=$n_list\n    fi\n\n    for i in $list; do\n        if [[ $n_heap -lt $n ]]; then\n            heap[$n_heap]=$i\n            ((n_heap++))\n        else\n            if [[ $i -gt ${heap[0]} ]]; then\n                heap[0]=$i\n            fi\n        fi\n        for ((j=0; j<n_heap; j++)); do\n            parent=$j\n            child=$((2*parent+1))\n            while [[ $child -lt $n_heap ]]; do\n                if [[ $child -lt $((n_heap-1)) ]] && [[ ${heap[$child]} -lt ${heap[$((child+1))]} ]]; then\n                    ((child++))\n                fi\n                if [[ ${heap[$parent]} -lt ${heap[$child]} ]]; then\n                    temp=${heap[$parent]}\n                    temp_index=$parent\n                    heap[$parent]=${heap[$child]}\n                    parent=$child\n                    heap[$parent]=$temp\n                    child=$((2*parent+1))\n                else\n                    break\n                fi\n            done\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[$i]} \"\n    done\n    echo",
    "    local -a heap\n    local -i i n\n    local -i -a list=($1)\n    n=${#list[@]}\n    for ((i=0; i<n; i++)); do\n        heap_queue_insert heap \"${list[i]}\"\n    done\n    for ((i=0; i<$2; i++)); do\n        heap_queue_extract heap\n    done\n    echo \"${heap[@]}\"",
    "  local -a heap\n  local -i i\n  local -i n=$2\n  local -i heap_size=0\n  local -i heap_capacity=${#1}\n  local -i parent\n  local -i child\n  local -i temp\n  local -i temp_index\n  local -i temp_index_2\n  local -i temp_index_3\n  local -i temp_index_4\n  local -i temp_index_5\n  local -i temp_index_6\n  local -i temp_index_7\n  local -i temp_index_8\n  local -i temp_index_9\n  local -i temp_index_10\n  local -i temp_index_11\n  local -i temp_index_12\n  local -i temp_index_13\n  local -i temp_index_14\n  local -i temp_index_15\n  local -i temp_index_16\n  local -i temp_index_17\n  local -i temp_index_18\n  local -i temp_index_19\n  local -i temp_index_20\n  local -i temp_index_21\n  local -i temp_index_22\n  local -i temp_index_23\n  local -i temp_index_24\n  local -i temp_index_25\n  local -i temp_index_26\n  local -i temp_index_27\n  local -i temp_index_28\n  local -i temp_index_29\n  local -i temp_index_30\n  local -i temp_index_31\n  local -i temp_index_32\n  local -i temp_index_33\n  local -i temp_index_34\n  local -i temp_index_35\n  local -i temp_index_36\n  local -i temp_index_37\n  local -i temp_index_38\n  local -i temp_index_39\n  local -i temp_index_40\n  local -i temp_index_41\n  local -i temp_index_42\n  local -i temp_index_43\n  local -i temp_index_44\n  local -i temp_index_45\n  local",
    "    local -a arr=()\n    local -a heap=()\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i t=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i len=0\n    local -i len_heap=0\n    local -i len_arr=0\n    local -i len_arr_n=0\n    local -i len_arr_n_1=0\n    local -i len_arr_n_2=0\n    local -i len_arr_n_3=0\n    local -i len_arr_n_4=0\n    local -i len_arr_n_5=0\n    local -i len_arr_n_6=0\n    local -i len_arr_n_7=0\n    local -i len_arr_n_8=0\n    local -i len_arr_n_9=0\n    local -i len_arr_n_10=0\n    local -i len_arr_n_11=0\n    local -i len_arr_n_12=0\n    local -i len_arr_n_13=0\n    local -i len_arr_n_14=0\n    local -i len_arr_n_15=0\n    local -i len_arr_n_16=0\n    local -i len_arr_n_17=0\n    local -i len_arr_n_18=0\n    local -i len_arr_n_19=0\n    local -i len_arr_n_20=0\n    local -i len_arr_n_21=0\n    local -i len_arr_n_22=0\n    local -i len_arr_n_23=0\n    local -i len_arr_n_24=0\n    local -i len_arr_n_25=0\n    local -i len_arr_n_26=0\n    local -i len_arr_n_",
    "    local -a arr=()\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n    local -i j=0\n    local -i k=0\n    local -i t=0\n    local -i m=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local -i tmp49=0\n    local -i tmp50=",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i t\n\n    # build the heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n/2; i>=0; i--)); do\n        m=$i\n        while ((2*m+1<n)); do\n            j=2*m+1\n            if ((j+1<n && heap[j]<heap[j+1])); then\n                j=j+1\n            fi\n            if ((heap[m]<heap[j])); then\n                t=heap[m]\n                heap[m]=heap[j]\n                heap[j]=t\n                m=j\n            else\n                break\n            fi\n        done\n    done\n\n    # replace the root with the last element and heapify\n    for ((i=n; i<${#list[@]}; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            m=0\n            while ((2*m+1<n)); do\n                j=2*m+1\n                if ((j+1<n && heap[j]<heap[j+1])); then\n                    j=j+1\n                fi\n                if ((heap[m]<heap[j])); then\n                    t=heap[m]\n                    heap[m]=heap[j]\n                    heap[j]=t\n                    m=j\n                else\n                    break\n                fi\n            done\n        fi\n    done\n\n    # sort the heap\n    for ((i=n-1; i>0; i--)); do\n        t=heap[0]\n        heap[0]=heap[i]\n        heap[i]=t\n        m=0\n        while ((2*m+1<i)); do\n            j=2*m+1\n            if ((j+1",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i len\n    local -i tmp\n    local -i t\n    local -i x\n    local -i y\n    local -i z\n    local -i zz\n    len=${#list}\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list:i:1}\n    done\n    for ((i=len/2-1; i>=0; i--)); do\n        x=${heap[i]}\n        k=i\n        while ((k<len/2)); do\n            j=2*k+1\n            if ((j<len-1)) && ((heap[j]<heap[j+1])); then\n                j+=1\n            fi\n            if ((x>=heap[j])); then\n                break\n            fi\n            heap[k]=${heap[j]}\n            k=j\n        done\n        heap[k]=$x\n    done\n    for ((i=0; i<n; i++)); do\n        x=${heap[0]}\n        heap[0]=${heap[len-1]}\n        len-=1\n        k=0\n        while ((k<len/2)); do\n            j=2*k+1\n            if ((j<len-1)) && ((heap[j]<heap[j+1])); then\n                j+=1\n            fi\n            if ((heap[k]>=heap[j])); then\n                break\n            fi\n            tmp=${heap[k]}\n            heap[k]=${heap[j]}\n            heap[j]=$tmp\n            k=j\n        done\n        echo -n \"$x \"\n    done\n    echo",
    "    local list=($1)\n    local n=$2\n    local heap_size=${#list[@]}\n    local i\n    local j\n    local temp\n    local largest\n\n    # Build the heap\n    for ((i=heap_size/2-1; i>=0; i--)); do\n        # Sift down\n        j=$i\n        while ((2*j+1<heap_size)); do\n            largest=$((2*j+1))\n            if ((2*j+2<heap_size && list[2*j+2]>list[largest])); then\n                largest=$((2*j+2))\n            fi\n            if ((list[j]<list[largest])); then\n                temp=${list[j]}\n                list[j]=${list[largest]}\n                list[largest]=$temp\n                j=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the n largest elements\n    for ((i=0; i<n; i++)); do\n        # Swap the root with the last element\n        temp=${list[0]}\n        list[0]=${list[heap_size-1]}\n        list[heap_size-1]=$temp\n        heap_size=$((heap_size-1))\n\n        # Sift down\n        j=0\n        while ((2*j+1<heap_size)); do\n            largest=$((2*j+1))\n            if ((2*j+2<heap_size && list[2*j+2]>list[largest])); then\n                largest=$((2*j+2))\n            fi\n            if ((list[j]<list[largest])); then\n                temp=${list[j]}\n                list[j]=${list[largest]}\n                list[largest]=$temp\n                j=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the n largest elements\n    for ((i=heap_size; i<${#list[@]}; i++)); do\n        echo ${list[i]}\n    done",
    "    local -a arr=($1)\n    local n=$2\n    local i\n    local j\n    local tmp\n    local len=${#arr[@]}\n    local last_parent=$((len / 2 - 1))\n    local last_child=$((len - 1))\n\n    # build max heap\n    for ((i = last_parent; i >= 0; i--)); do\n        j=$i\n        while true; do\n            local left=$((j * 2 + 1))\n            local right=$((j * 2 + 2))\n            local max=$j\n            if [[ $left -le $last_child && ${arr[$left]} -gt ${arr[$max]} ]]; then\n                max=$left\n            fi\n            if [[ $right -le $last_child && ${arr[$right]} -gt ${arr[$max]} ]]; then\n                max=$right\n            fi\n            if [[ $max -eq $j ]]; then\n                break\n            fi\n            tmp=${arr[$j]}\n            arr[$j]=${arr[$max]}\n            arr[$max]=$tmp\n            j=$max\n        done\n    done\n\n    # extract max\n    for ((i = 0; i < n; i++)); do\n        echo ${arr[0]}\n        arr[0]=${arr[$last_child]}\n        last_child=$((last_child - 1))\n        j=0\n        while true; do\n            local left=$((j * 2 + 1))\n            local right=$((j * 2 + 2))\n            local max=$j\n            if [[ $left -le $last_child && ${arr[$left]} -gt ${arr[$max]} ]]; then\n                max=$left\n            fi\n            if [[ $right -le $last_child && ${arr[$right]} -gt ${arr[$max]} ]]; then\n                max=$right\n            fi\n            if [[ $max -eq $j ]]; then\n                break\n            fi\n            tmp=${arr[$j]}\n            arr[$j]=${arr[$max]}\n            arr[$max]=$tmp\n            j=$max\n        done\n    done",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i j\n    local -i k\n    local -i temp\n    local -i index\n    local -i largest\n    local -i left\n    local -i right\n    local -i heap_size=0\n\n    # build heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${1:i:1}\n        ((heap_size++))\n    done\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<heap_size)); do\n            left=2*k+1\n            right=2*k+2\n            largest=$k\n            if ((heap[left]>heap[largest])); then\n                largest=$left\n            fi\n            if ((right<heap_size && heap[right]>heap[largest])); then\n                largest=$right\n            fi\n            if ((largest!=k)); then\n                temp=heap[k]\n                heap[k]=heap[largest]\n                heap[largest]=$temp\n                k=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # insert remaining elements\n    for ((i=n; i<len; i++)); do\n        if ((${1:i:1}>heap[0])); then\n            heap[0]=${1:i:1}\n            k=0\n            while ((2*k+1<heap_size)); do\n                left=2*k+1\n                right=2*k+2\n                largest=$k\n                if ((heap[left]>heap[largest])); then\n                    largest=$left\n                fi\n                if ((right<heap_size && heap[right]>heap[largest])); then\n                    largest=$right\n                fi\n                if ((largest!=k)); then\n                    temp=heap[k]\n                    heap[k]=heap[largest]\n                    heap[largest]=$temp\n                    k=$largest\n                else\n                    break\n",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n_heap\n    local -i n_list\n    local -i temp\n\n    n_list=${#list[@]}\n    n_heap=$((n_list/2))\n    for ((i=0; i<n_heap; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n_heap-1; i>=0; i--)); do\n        temp=${heap[i]}\n        j=$i\n        while ((j<n_heap)); do\n            k=$((2*j+1))\n            l=$((2*j+2))\n            if ((k<n_heap)); then\n                if ((l<n_heap)); then\n                    if ((heap[k]<heap[l])); then\n                        m=l\n                    else\n                        m=k\n                    fi\n                else\n                    m=k\n                fi\n                if ((temp<heap[m])); then\n                    heap[j]=${heap[m]}\n                    j=m\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n        heap[j]=$temp\n    done\n    for ((i=n_heap; i<n_list; i++)); do\n        if ((list[i]>heap[0])); then\n            heap[0]=${list[i]}\n            temp=${heap[0]}\n            j=0\n            while ((j<n_heap)); do\n                k=$((2*j+1))\n                l=$((2*j+2))\n                if ((k<n_heap)); then\n                    if ((l<n_heap)); then\n                        if ((heap[k]<heap[l])); then\n                            m=l\n                        else\n                            m=k\n                        fi\n                    else\n                        m=k\n                    fi\n                    if ((temp<heap[m",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i len=${#1}\n    local -i last_idx=$((len-1))\n    local -i parent_idx\n    local -i left_idx\n    local -i right_idx\n    local -i swap_idx\n    local -i tmp\n\n    # build heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${1:i:1}\n        parent_idx=$(((i-1)/2))\n        while ((i>0 && heap[i]>heap[parent_idx])); do\n            tmp=${heap[i]}\n            heap[i]=${heap[parent_idx]}\n            heap[parent_idx]=$tmp\n            i=$parent_idx\n            parent_idx=$(((i-1)/2))\n        done\n    done\n\n    # pop n largest\n    for ((i=0; i<n; i++)); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[last_idx]}\n        last_idx=$((last_idx-1))\n        parent_idx=0\n        left_idx=1\n        right_idx=2\n        while ((left_idx<=last_idx)); do\n            swap_idx=$left_idx\n            if ((right_idx<=last_idx && heap[right_idx]>heap[left_idx])); then\n                swap_idx=$right_idx\n            fi\n            if ((heap[swap_idx]>heap[parent_idx])); then\n                tmp=${heap[parent_idx]}\n                heap[parent_idx]=${heap[swap_idx]}\n                heap[swap_idx]=$tmp\n                parent_idx=$swap_idx\n                left_idx=$((2*parent_idx+1))\n                right_idx=$((2*parent_idx+2))\n            else\n                break\n            fi\n",
    "    local -a heap\n    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    local size=${#list[@]}\n\n    # Initialize the heap\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    for ((i=n; i<size; i++)); do\n        if ((list[i] > heap[0])); then\n            heap[0]=${list[i]}\n        fi\n        for ((j=0; j<n; j++)); do\n            k=$((2*j+1))\n            if ((k+1 < n && heap[k+1] < heap[k])); then\n                k=$((k+1))\n            fi\n            if ((k < n && heap[j] > heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n        done\n    done\n    for ((i=0; i<n; i++)); do\n        echo ${heap[i]}\n    done",
    "  local list=\"$1\"\n  local n=\"$2\"\n  local -a arr\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i tmp=0\n  local -i len=0\n  local -i max=0\n  local -i min=0\n  local -i mid=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll",
    "  local -a heap\n  local -i i\n  local -i n=$2\n  local -i size=0\n  local -i tmp\n  local -i parent\n  local -i child\n\n  for i in $1; do\n    heap[size++]=$i\n    child=$size-1\n    while (( child > 0 )); do\n      parent=$(( (child-1)/2 ))\n      if (( heap[child] > heap[parent] )); then\n        tmp=${heap[child]}\n        heap[child]=${heap[parent]}\n        heap[parent]=$tmp\n        child=$parent\n      else\n        break\n      fi\n    done\n  done\n\n  while (( n > 0 )); do\n    echo ${heap[0]}\n    heap[0]=${heap[--size]}\n    parent=0\n    while (( parent < size )); do\n      child=$(( parent*2+1 ))\n      if (( child >= size )); then\n        break\n      elif (( child+1 < size )); then\n        if (( heap[child] < heap[child+1] )); then\n          child+=1\n        fi\n      fi\n      if (( heap[parent] < heap[child] )); then\n        tmp=${heap[parent]}\n        heap[parent]=${heap[child]}\n        heap[child]=$tmp\n        parent=$child\n      else\n        break\n      fi\n    done\n    (( n-- ))\n  done",
    "    local -a heap\n    local -i heap_size=0\n    local -i i\n    local -i n=$2\n    local -i tmp\n    local -i tmp_index\n    local -i tmp_index_child\n    local -i tmp_index_child_1\n    local -i tmp_index_child_2\n    local -i tmp_index_parent\n    local -i tmp_index_parent_1\n    local -i tmp_index_parent_2\n    local -i tmp_index_parent_3\n    local -i tmp_index_parent_4\n    local -i tmp_index_parent_5\n    local -i tmp_index_parent_6\n    local -i tmp_index_parent_7\n    local -i tmp_index_parent_8\n    local -i tmp_index_parent_9\n    local -i tmp_index_parent_10\n    local -i tmp_index_parent_11\n    local -i tmp_index_parent_12\n    local -i tmp_index_parent_13\n    local -i tmp_index_parent_14\n    local -i tmp_index_parent_15\n    local -i tmp_index_parent_16\n    local -i tmp_index_parent_17\n    local -i tmp_index_parent_18\n    local -i tmp_index_parent_19\n    local -i tmp_index_parent_20\n    local -i tmp_index_parent_21\n    local -i tmp_index_parent_22\n    local -i tmp_index_parent_23\n    local -i tmp_index_parent_24\n    local -i tmp_index_parent_25\n    local -i tmp_index_parent_26\n    local -i tmp_index_parent_27\n    local -i tmp_index_parent_28\n    local -i tmp_index_parent_29\n    local -i tmp_index_parent_30\n    local -i tmp_index_parent_31\n    local -i tmp_index_parent_32\n    local -i tmp_index_parent_33\n    local -i tmp_index_parent_34\n    local -i tmp_index_parent_35\n    local -",
    "  local list=($1)\n  local n=$2\n  local heap=()\n  local i\n  for ((i=0; i<n; i++)); do\n    heap_queue_insert heap \"${list[i]}\"\n  done\n  for ((; i<${#list[@]}; i++)); do\n    if [[ \"${list[i]}\" -gt \"${heap[0]}\" ]]; then\n      heap_queue_pop heap\n      heap_queue_insert heap \"${list[i]}\"\n    fi\n  done\n  heap_queue_print heap",
    "    local -a heap\n    local -a list=($1)\n    local n=$2\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n    local last_parent=$((len/2-1))\n\n    # build heap\n    for ((i=0; i<len; i++)); do\n        heap[i]=${list[i]}\n        j=$i\n        while ((j>0)); do\n            k=$((j-1))/2\n            if ((heap[j]>heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # extract n largest\n    for ((i=0; i<n; i++)); do\n        list[i]=${heap[0]}\n        heap[0]=${heap[last_parent]}\n        heap[last_parent]=${list[i]}\n        last_parent=$((last_parent-1))\n        j=0\n        while ((j<=last_parent)); do\n            k=$((j*2+1))\n            if ((k>last_parent)); then\n                break\n            fi\n            if ((k<last_parent)) && ((heap[k]<heap[k+1])); then\n                k=$k+1\n            fi\n            if ((heap[j]<heap[k])); then\n                tmp=${heap[j]}\n                heap[j]=${heap[k]}\n                heap[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # sort n largest\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((list[i]<list[j])); then\n                tmp=${list[i]}\n                list[i]=${list[j]}\n                list[j]=$tmp\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local -a list=($1)\n    local n=$2\n    local -a heap=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n_list=${#list[@]}\n    local -i n_heap=0\n    local -i n_max=0\n    local -i n_min=0\n    local -i n_swap=0\n    local -i n_tmp=0\n    local -i n_tmp2=0\n    local -i n_tmp3=0\n    local -i n_tmp4=0\n    local -i n_tmp5=0\n    local -i n_tmp6=0\n    local -i n_tmp7=0\n    local -i n_tmp8=0\n    local -i n_tmp9=0\n    local -i n_tmp10=0\n    local -i n_tmp11=0\n    local -i n_tmp12=0\n    local -i n_tmp13=0\n    local -i n_tmp14=0\n    local -i n_tmp15=0\n    local -i n_tmp16=0\n    local -i n_tmp17=0\n    local -i n_tmp18=0\n    local -i n_tmp19=0\n    local -i n_tmp20=0\n    local -i n_tmp21=0\n    local -i n_tmp22=0\n    local -i n_tmp23=0\n    local -i n_tmp24=0\n    local -i n_tmp25=0\n    local -i n_tmp26=0\n    local -i n_tmp27=0\n    local -i n_tmp28=0\n    local -i n_tmp29=0\n    local -i n_tmp30=0\n    local -i n_tmp31=0\n    local -i n_tmp32=0\n    local -i n_tmp33=0\n    local -i n_tmp34=0\n    local -i n_tmp35=0\n    local -i n_",
    "  local list=($1)\n  local n=$2\n  local i=0\n  local j=0\n  local temp=0\n  local len=${#list[@]}\n  local largest=()\n\n  for ((i=0; i<n; i++)); do\n    largest[i]=${list[i]}\n  done\n\n  for ((i=n; i<len; i++)); do\n    if [[ ${list[i]} -gt ${largest[0]} ]]; then\n      largest[0]=${list[i]}\n      for ((j=0; j<n; j++)); do\n        if [[ ${largest[j]} -gt ${largest[j+1]} ]]; then\n          temp=${largest[j]}\n          largest[j]=${largest[j+1]}\n          largest[j+1]=$temp\n        fi\n      done\n    fi\n  done\n\n  echo ${largest[@]}",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i tmp\n    local -i parent\n    local -i child\n    local -i last\n\n    for i in $1; do\n        heap[size++]=$i\n        child=$size-1\n        parent=$((child-1)/2))\n        while (( child > 0 && heap[parent] < heap[child] )); do\n            tmp=heap[parent]\n            heap[parent]=heap[child]\n            heap[child]=$tmp\n            child=$parent\n            parent=$((child-1)/2))\n        done\n    done\n\n    for (( i=0; i<n; i++ )); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[--size]}\n        parent=0\n        child=1\n        while (( child < size )); do\n            if (( child+1 < size && heap[child+1] > heap[child] )); then\n                child++\n            fi\n            if (( heap[parent] >= heap[child] )); then\n                break\n            fi\n            tmp=heap[parent]\n            heap[parent]=heap[child]\n            heap[child]=$tmp\n            parent=$child\n            child=$((parent*2+1))\n        done\n    done\n    echo",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i tmp\n    local -i parent\n    local -i child\n    local -i last_parent\n    local -i last_child\n    for i in $1; do\n        heap[size++]=$i\n        child=$size-1\n        parent=$((child-1)/2))\n        while (( child > 0 )); do\n            if (( heap[child] > heap[parent] )); then\n                tmp=heap[child]\n                heap[child]=heap[parent]\n                heap[parent]=tmp\n                child=parent\n                parent=$((child-1)/2))\n            else\n                break\n            fi\n        done\n    done\n    for (( i=0; i<n; i++ )); do\n        echo -n \"${heap[0]} \"\n        heap[0]=${heap[--size]}\n        parent=0\n        last_parent=$((size-1)/2))\n        while (( parent <= last_parent )); do\n            child=$((parent*2+1))\n            if (( child < size )); then\n                last_child=$((parent*2+2))\n                if (( last_child < size )); then\n                    if (( heap[last_child] > heap[child] )); then\n                        child=$last_child\n                    fi\n                fi\n                if (( heap[child] > heap[parent] )); then\n                    tmp=heap[child]\n                    heap[child]=heap[parent]\n                    heap[parent]=tmp\n                    parent=child\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n    done\n    echo",
    "  local -a arr=()\n  local -i i=0\n  local -i n=$2\n  local -i len=0\n  local -i j=0\n  local -i k=0\n  local -i tmp=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_m=0\n  local -i max_n=0\n  local -i max_o=0\n  local -i max_p=0\n  local -i max_q=0\n  local -i max_r=0\n  local -i max_s=0\n  local -i max_t=0\n  local -i max_u=0\n  local -i max_v=0\n  local -i max_w=0\n  local -i max_x=0\n  local -i max_y=0\n  local -i max_z=0\n  local -i max_aa=0\n  local -i max_ab=0\n  local -i max_ac=0\n  local -i max_ad=0\n  local -i max_ae=0\n  local -i max_af=0\n  local -i max_ag=0\n  local -i max_ah=0\n  local -i max_ai=0\n  local -i max_aj=0\n  local -i max_ak=0\n  local -i max_al=0\n  local -i max_am=0\n  local -i max_an=0\n  local -i max_ao=0\n  local -i max_ap=0\n  local -i max_aq=0\n  local -i max_ar=0\n  local -i max_as=0\n  local -i max_at=0\n  local -i max_au=0\n  local -i max_av=0\n  local -i max_aw=0\n  local -i max_ax=0\n  local -i max_ay=0\n  local -i max_az=0\n  local -i max_ba",
    "    local -a list=($1)\n    local n=$2\n    local -a heap\n    local i\n    local j\n    local tmp\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n    done\n    heap_build_max_heap heap\n\n    for ((i=n; i<${#list[@]}; i++)); do\n        if [[ ${list[i]} -gt ${heap[0]} ]]; then\n            heap[0]=${list[i]}\n            heap_max_heapify heap 0\n        fi\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        tmp=${heap[0]}\n        heap[0]=${heap[i]}\n        heap[i]=$tmp\n        heap_max_heapify heap 0 ${i}\n    done\n\n    echo ${heap[@]}",
    "    local list=($1)\n    local n=$2\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local result=()\n\n    if [ $len -lt $n ]; then\n        echo \"Not enough numbers in the list\"\n        return 1\n    fi\n\n    # Build a max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        while [ $k -lt $len ]; do\n            j=$((2*k+1))\n            if [ $j -lt $len ]; then\n                if [ $((j+1)) -lt $len ]; then\n                    if [ ${list[j]} -lt ${list[j+1]} ]; then\n                        j=$((j+1))\n                    fi\n                fi\n                if [ ${list[k]} -lt ${list[j]} ]; then\n                    tmp=${list[k]}\n                    list[k]=${list[j]}\n                    list[j]=$tmp\n                    k=$j\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n    done\n\n    # Extract the top n numbers\n    for ((i=0; i<n; i++)); do\n        result[i]=${list[0]}\n        list[0]=${list[len-1-i]}\n        k=0\n        while [ $k -lt $((len-1-i)) ]; do\n            j=$((2*k+1))\n            if [ $j -lt $((len-1-i)) ]; then\n                if [ $((j+1)) -lt $((len-1-i)) ]; then\n                    if [ ${list[j]} -lt ${list[j+1]} ]; then\n                        j=$((j+1))\n                    fi\n                fi\n                if [ ${list[k]} -lt ${list[j]} ]; then\n                    tmp=${list[k]}\n                    list[k]=${list[j]}\n                    list[j]=$tmp\n                    k=$j\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n   ",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i max\n    local -i max_index\n    local -i size=0\n    local -i tmp\n    local -i tmp_index\n    local -i tmp_size\n    local -i tmp_value\n    local -i value\n    local -i value_index\n    local -i value_size\n    local -i value_value\n\n    for i in $1; do\n        if (( size < n )); then\n            heap[size++]=$i\n        else\n            max=${heap[0]}\n            max_index=0\n            for (( i=1; i < size; i++ )); do\n                if (( heap[i] > max )); then\n                    max=${heap[i]}\n                    max_index=$i\n                fi\n            done\n            if (( i > max )); then\n                heap[max_index]=$i\n                tmp_index=$max_index\n                tmp_size=$size\n                tmp_value=${heap[tmp_index]}\n                while (( tmp_index > 0 )); do\n                    value_index=$(( (tmp_index - 1) / 2 ))\n                    value_size=$tmp_size\n                    value_value=${heap[value_index]}\n                    if (( tmp_value > value_value )); then\n                        heap[value_index]=$tmp_value\n                        heap[tmp_index]=$value_value\n                        tmp_index=$value_index\n                        tmp_size=$value_size\n                        tmp_value=$value_value\n                    else\n                        break\n                    fi\n                done\n            fi\n        fi\n    done\n\n    for (( i=0; i < size; i++ )); do\n        echo -n \"${heap[i]} \"\n    done\n    echo",
    "    local -a heap\n    local -i i\n    local -i n=$2\n    local -i size=0\n    local -i index\n    local -i parent\n    local -i child\n    local -i temp\n    local -i value\n    local -i max_index\n    local -i max_value\n\n    for i in $1; do\n        heap[size++]=$i\n        index=size-1\n        parent=$(( (index-1)/2 ))\n        while (( index > 0 && heap[parent] < heap[index] )); do\n            temp=heap[parent]\n            heap[parent]=heap[index]\n            heap[index]=$temp\n            index=$parent\n            parent=$(( (index-1)/2 ))\n        done\n    done\n\n    for (( i=0; i<n; i++ )); do\n        max_index=0\n        max_value=heap[0]\n        for (( j=1; j<size; j++ )); do\n            if (( heap[j] > max_value )); then\n                max_index=$j\n                max_value=heap[j]\n            fi\n        done\n        echo $max_value\n        heap[max_index]=$(( -1 * $(($RANDOM % 100)) ))\n        index=max_index\n        while (( index < size )); do\n            child=$(( 2*index+1 ))\n            if (( child < size )); then\n                if (( child+1 < size && heap[child+1] > heap[child] )); then\n                    child=$(( child+1 ))\n                fi\n                if (( heap[index] < heap[child] )); then\n                    temp=heap[index]\n                    heap[index]=heap[child]\n                    heap[child]=$temp\n                    index=$child\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n    done"
  ]
}