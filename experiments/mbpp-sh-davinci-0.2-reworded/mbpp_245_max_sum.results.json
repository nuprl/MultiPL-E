{
  "name": "mbpp_245_max_sum",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n\n  while [[ $i -lt ${#arr[@]} ]]; do\n    if [[ ${arr[$i]} -gt ${inc[-1]} ]]; then\n      inc+=(${arr[$i]})\n    else\n      inc[-1]=${arr[$i]}\n    fi\n    if [[ ${arr[$j]} -gt ${dec[-1]} ]]; then\n      dec+=(${arr[$j]})\n    else\n      dec[-1]=${arr[$j]}\n    fi\n    ((i++))\n    ((j--))\n  done\n\n  for ((i=0; i<${#inc[@]}; i++)); do\n    for ((j=0; j<${#dec[@]}; j++)); do\n      if [[ $i -eq $j ]]; then\n        continue\n      fi\n      if [[ $((inc[$i] + dec[$j])) -gt $max_sum ]]; then\n        max_sum=$((inc[$i] + dec[$j]))\n      fi\n    done\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a left\n  local -a right\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i n=${#arr[@]}\n\n  # left[i] = max sum of increasing subsequence ending at arr[i]\n  left[0]=${arr[0]}\n  for ((i=1; i<n; i++)); do\n    left[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        left[i]=$(( left[i] + left[j] ))\n      fi\n    done\n  done\n\n  # right[i] = max sum of decreasing subsequence starting at arr[i]\n  right[n-1]=${arr[n-1]}\n  for ((i=n-2; i>=0; i--)); do\n    right[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        right[i]=$(( right[i] + right[j] ))\n      fi\n    done\n  done\n\n  # max sum of bitonic subsequence = max(left[i] + right[i] - arr[i])\n  for ((i=0; i<n; i++)); do\n    sum=$(( left[i] + right[i] - arr[i] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n  local -i max_inc=0\n  local -i max_dec=0\n\n  for ((i=1; i<len; i++)); do\n    max_inc=0\n    max_dec=0\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        if ((inc[j] > max_inc)); then\n          max_inc=inc[j]\n        fi\n      fi\n    done\n    inc[i]=$((arr[i] + max_inc))\n    for ((k=i+1; k<len; k++)); do\n      if ((arr[k] < arr[i])); then\n        if ((dec[k] > max_dec)); then\n          max_dec=dec[k]\n        fi\n      fi\n    done\n    dec[i]=$((arr[i] + max_dec))\n  done\n\n  for ((i=0; i<len; i++)); do\n    sum=${inc[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n    sum=${dec[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=0\n    local -i sum=0\n    while (( i < ${#arr[@]} )); do\n        if (( arr[i] > arr[i-1] )); then\n            inc[i]=$(( inc[i-1] + arr[i] ))\n        else\n            inc[i]=${arr[i]}\n        fi\n        if (( arr[j] > arr[j+1] )); then\n            dec[j]=$(( dec[j+1] + arr[j] ))\n        else\n            dec[j]=${arr[j]}\n        fi\n        (( i++ ))\n        (( j-- ))\n    done\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        sum=$(( inc[i] + dec[i] - arr[i] ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n  done\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if (( arr[i] > arr[j] )); then\n        inc[i]=$(( inc[i] + arr[j] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[i] > arr[j] )); then\n        dec[i]=$(( dec[i] + arr[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( inc[i] + dec[i] - arr[i] > max )); then\n      max=$(( inc[i] + dec[i] - arr[i] ))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n\n  while (( i < len )); do\n    if (( arr[i] > inc[-1] )); then\n      inc+=(${arr[i]})\n    else\n      inc[-1]=${arr[i]}\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > dec[-1] )); then\n      dec+=(${arr[j]})\n    else\n      dec[-1]=${arr[j]}\n    fi\n    (( j-- ))\n  done\n\n  for (( i = 0; i < len; i++ )); do\n    sum=${inc[i]}+${dec[len-i-1]}\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmprfo7z_je.sh: line 34: 1+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n  local -i sum=0\n\n  for ((i=1;i<${#arr[@]};i++)); do\n    inc[i]=${arr[i]}\n    dec[j]=${arr[j]}\n    ((j--))\n    for ((k=0;k<i;k++)); do\n      if ((arr[i]>arr[k])); then\n        ((sum=inc[k]+arr[i]))\n        if ((sum>inc[i])); then\n          inc[i]=$sum\n        fi\n      fi\n    done\n    for ((k=${#arr[@]}-1;k>j;k--)); do\n      if ((arr[j]>arr[k])); then\n        ((sum=dec[k]+arr[j]))\n        if ((sum>dec[j])); then\n          dec[j]=$sum\n        fi\n      fi\n    done\n  done\n\n  for ((i=0;i<${#arr[@]};i++)); do\n    ((sum=inc[i]+dec[i]-arr[i]))\n    if ((sum>max_sum)); then\n      max_sum=$sum\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                (( inc[i] = inc[j] + arr[i] ))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if (( arr[j] < arr[i] )); then\n                (( dec[i] = dec[j] + arr[i] ))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        (( max = max > inc[i] + dec[i] - arr[i] ? max : inc[i] + dec[i] - arr[i] ))\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a array=( $1 )\n  local -a lis\n  local -a lds\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i n=${#array[@]}\n\n  # find the longest increasing subsequence\n  for (( i=0; i<n; i++ )); do\n    lis[i]=1\n    for (( j=0; j<i; j++ )); do\n      if (( array[j] < array[i] && lis[i] < lis[j]+1 )); then\n        lis[i]=$(( lis[j]+1 ))\n      fi\n    done\n  done\n\n  # find the longest decreasing subsequence\n  for (( i=n-1; i>=0; i-- )); do\n    lds[i]=1\n    for (( j=n-1; j>i; j-- )); do\n      if (( array[j] < array[i] && lds[i] < lds[j]+1 )); then\n        lds[i]=$(( lds[j]+1 ))\n      fi\n    done\n  done\n\n  # find the maximum sum\n  for (( i=0; i<n; i++ )); do\n    if (( max < lis[i]+lds[i]-1 )); then\n      max=$(( lis[i]+lds[i]-1 ))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=${arr[0]}\n    local -i sum=0\n    while (( i < ${#arr[@]} )); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n        fi\n        inc[i]=$max\n        (( i++ ))\n    done\n    max=${arr[-1]}\n    while (( j >= 0 )); do\n        if (( arr[j] > max )); then\n            max=${arr[j]}\n        fi\n        dec[j]=$max\n        (( j-- ))\n    done\n    i=0\n    while (( i < ${#arr[@]} )); do\n        sum=$(( inc[i] + dec[i] - arr[i] ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n        (( i++ ))\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > inc[-1] )); then\n      inc+=(${arr[i]})\n    else\n      inc[-1]=${arr[i]}\n    fi\n    if (( arr[j] > dec[-1] )); then\n      dec+=(${arr[j]})\n    else\n      dec[-1]=${arr[j]}\n    fi\n    (( i++, j-- ))\n  done\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    local -i sum=$(( inc[i] + dec[i] - arr[i] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        (( inc[i] = inc[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        (( dec[i] = dec[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    (( max = (inc[i] + dec[i] - arr[i]) > max ? (inc[i] + dec[i] - arr[i]) : max ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc\n  local -a dec\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n\n  inc[0]=${arr[0]}\n  dec[len-1]=${arr[len-1]}\n\n  for ((i=1; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc[i]=$(( inc[i] + inc[j] ))\n      fi\n    done\n  done\n\n  for ((i=len-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        dec[i]=$(( dec[i] + dec[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    sum=$(( inc[i] + dec[i] - arr[i] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2vpua6sl.sh: line 37: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n      if ((arr[j] > arr[i])); then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n    if ((inc[i] > max)); then\n      max=${inc[i]}\n    fi\n    if ((dec[i] > max)); then\n      max=${dec[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n    local i=0\n    local j=0\n    local sum=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                inc[i]=$(( inc[i] + inc[j] ))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if (( arr[j] < arr[i] )); then\n                dec[i]=$(( dec[i] + dec[j] ))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=$(( inc[i] + dec[i] - arr[i] ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j]<arr[i] && inc[i]<inc[j]+arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=len-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if ((arr[j]<arr[i] && dec[i]<dec[j]+arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    if ((max<inc[i]+dec[i]-arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[j]<arr[i] && inc[i]<inc[j]+arr[i])); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j]<arr[i] && dec[i]<dec[j]+arr[i])); then\n        dec[i]=dec[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max<inc[i]+dec[i]-arr[i])); then\n      max=inc[i]+dec[i]-arr[i]\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3h1ifk7v.sh: line 15: j: expression recursion level exceeded (error token is \"j\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n  done\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n    done\n  done\n\n  for ((i=$((${#arr[@]} - 2)); i>=0; i--)); do\n    for ((j=$((${#arr[@]} - 1)); j>i; j--)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ $((inc[i] + dec[i] - arr[i])) -gt $max ]]; then\n      max=$((inc[i] + dec[i] - arr[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=${arr[0]}\n    local -i sum=0\n\n    while (( i < ${#arr[@]} )); do\n        if (( arr[i] > arr[i-1] )); then\n            inc[i]=${inc[i-1]}+${arr[i]}\n        else\n            inc[i]=${arr[i]}\n        fi\n        (( i++ ))\n    done\n\n    while (( j >= 0 )); do\n        if (( arr[j] > arr[j+1] )); then\n            dec[j]=${dec[j+1]}+${arr[j]}\n        else\n            dec[j]=${arr[j]}\n        fi\n        (( j-- ))\n    done\n\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        sum=${inc[i]}+${dec[i]}\n        if (( sum > max )); then\n            max=sum\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmperboitwl.sh: line 33: 9+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i max=0\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((a[j] < a[i])); then\n        if ((b[i] < b[j] + a[i])); then\n          b[i]=b[j] + a[i]\n        fi\n      fi\n    done\n  done\n\n  for ((k=${#c[@]}-1; k>=0; k--)); do\n    for ((l=${#c[@]}-1; l>k; l--)); do\n      if ((c[l] < c[k])); then\n        if ((d[k] < d[l] + c[k])); then\n          d[k]=d[l] + c[k]\n        fi\n      fi\n    done\n  done\n\n  for ((m=0; m<${#a[@]}; m++)); do\n    for ((n=0; n<${#a[@]}; n++)); do\n      if ((m != n)); then\n        if ((b[m] + d[n] > max)); then\n          max=b[m] + d[n]\n        fi\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 32: `b[i]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 32: +: command not found\\n/tmp/tmpz2u_q9mm.sh: line 42: `d[k]': not a valid identifier\\n/tmp/tmpz2u_q9mm.sh: line 42: +: command not f",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=${arr[0]}\n  local -i sum=0\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt ${inc[$j-1]} ]; then\n      inc[$j]=${arr[$i]}\n      j=$j+1\n    else\n      inc[$j]=${inc[$j-1]}\n    fi\n    if [ ${arr[$i]} -lt ${dec[$k-1]} ]; then\n      dec[$k]=${arr[$i]}\n      k=$k+1\n    else\n      dec[$k]=${dec[$k-1]}\n    fi\n    i=$i+1\n  done\n  i=0\n  while [ $i -lt ${#arr[@]} ]; do\n    sum=${inc[$i]}+${dec[$(( ${#arr[@]}-$i-1 ))]}\n    if [ $sum -gt $max ]; then\n      max=$sum\n    fi\n    i=$i+1\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp98xrdrpt.sh: line 31: 1+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > arr[i-1] )); then\n      inc[i]=$(( inc[i-1] + arr[i] ))\n    else\n      inc[i]=${arr[i]}\n    fi\n\n    if (( arr[j] > arr[j+1] )); then\n      dec[j]=$(( dec[j+1] + arr[j] ))\n    else\n      dec[j]=${arr[j]}\n    fi\n\n    (( i++ ))\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    if (( inc[i] > max_inc )); then\n      max_inc=${inc[i]}\n    fi\n\n    if (( dec[i] > max_dec )); then\n      max_dec=${dec[i]}\n    fi\n  done\n\n  max_sum=$(( max_inc + max_dec - arr[${#arr[@]}/2] ))\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i])) && ((inc[i] < inc[j] + arr[i])); then\n                inc[i]=${inc[j]}+${arr[i]}\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((arr[j] < arr[i])) && ((dec[i] < dec[j] + arr[i])); then\n                dec[i]=${dec[j]}+${arr[i]}\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((max < inc[i] + dec[i] - arr[i])); then\n            max=${inc[i]}+${dec[i]}-${arr[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n\n  while (( i < ${#arr[@]} )); do\n    inc[i]=${arr[i]}\n    dec[j]=${arr[j]}\n    (( i++ ))\n    (( j-- ))\n  done\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    for (( j=0; j<i; j++ )); do\n      if (( arr[i] > arr[j] )); then\n        (( inc[i] += inc[j] ))\n      fi\n    done\n  done\n\n  for (( i=${#arr[@]}-2; i>=0; i-- )); do\n    for (( j=${#arr[@]}-1; j>i; j-- )); do\n      if (( arr[i] > arr[j] )); then\n        (( dec[i] += dec[j] ))\n      fi\n    done\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    if (( inc[i] > max_inc )); then\n      max_inc=${inc[i]}\n    fi\n    if (( dec[i] > max_dec )); then\n      max_dec=${dec[i]}\n    fi\n  done\n\n  (( max_sum = max_inc + max_dec - arr[0] - arr[-1] ))\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a array=($1)\n  local -a left=(0)\n  local -a right=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i n=${#array[@]}\n  local -i mid=0\n  local -i mid_sum=0\n\n  for ((i=1; i<n; i++)); do\n    left[i]=$((left[i-1] + array[i]))\n    for ((j=0; j<i; j++)); do\n      if ((array[j] < array[i])); then\n        left[i]=$((left[i] - array[j]))\n      fi\n    done\n  done\n\n  for ((i=n-2; i>=0; i--)); do\n    right[i]=$((right[i+1] + array[i]))\n    for ((j=n-1; j>i; j--)); do\n      if ((array[j] < array[i])); then\n        right[i]=$((right[i] - array[j]))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    sum=${left[i]}\n    for ((j=i+1; j<n; j++)); do\n      if ((array[j] > array[i])); then\n        sum=$((sum + array[j]))\n      fi\n    done\n    for ((j=i-1; j>=0; j--)); do\n      if ((array[j] > array[i])); then\n        sum=$((sum + array[j]))\n      fi\n    done\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n\n  for ((i=0; i<n; i++)); do\n    sum=${left[i]}\n    for ((j=i+1; j<n; j++)); do\n      if ((array[j] < array[i])); then\n        sum=$((sum + array[j]))\n      fi\n    done\n    for ((\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmppv7rvdoz.sh: line 59: unexpected EOF while looking for matching `)'\\n/tmp/tmppv7rvdoz.sh: line 74: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[$i]=${arr[$i]}\n    for ((j=0; j<$i; j++)); do\n      if (( arr[$j] < arr[$i] )); then\n        (( inc[$i] = inc[$i] > inc[$j] + arr[$i] ? inc[$i] : inc[$j] + arr[$i] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[$i]=${arr[$i]}\n    for ((j=${#arr[@]}-1; j>$i; j--)); do\n      if (( arr[$j] < arr[$i] )); then\n        (( dec[$i] = dec[$i] > dec[$j] + arr[$i] ? dec[$i] : dec[$j] + arr[$i] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    (( sum = inc[$i] + dec[$i] - arr[$i] ))\n    (( max = max > sum ? max : sum ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  local -i sum=0\n\n  while [[ $i -lt ${#arr[@]} ]]; do\n    if [[ ${arr[$i]} -gt ${inc[-1]} ]]; then\n      inc+=(\"${arr[$i]}\")\n    else\n      inc[-1]=${arr[$i]}\n    fi\n    if [[ ${arr[$j]} -gt ${dec[-1]} ]]; then\n      dec+=(\"${arr[$j]}\")\n    else\n      dec[-1]=${arr[$j]}\n    fi\n    (( i++ ))\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    sum=${inc[$i]}+${dec[$i]}\n    if [[ $sum -gt $max ]]; then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpsy0_xztq.sh: line 30: +: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local array=($1)\n  local len=${#array[@]}\n  local i=0\n  local j=0\n  local max=0\n  local sum=0\n  local max_i=0\n  local max_j=0\n\n  while (( i < len )); do\n    sum=0\n    j=$i\n    while (( j < len )); do\n      sum=$(( sum + array[j] ))\n      if (( sum > max )); then\n        max=$sum\n        max_i=$i\n        max_j=$j\n      fi\n      (( j++ ))\n    done\n    (( i++ ))\n  done\n\n  echo \"Max sum is $max from $max_i to $max_j\"\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]} + ${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]} + ${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]} + ${dec[i]} - ${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 17: `inc[i]': not a valid identifier\\n/tmp/tmph7f_253b.sh: line 17: +: command not found\\n/tmp/tmph7f_253b.sh: line 26: `dec[i]': not a valid identifier\\n/tmp/tmph7",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc_sum=(${arr[0]})\n    local -a dec_sum=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max_sum=${arr[0]}\n    local -i sum=0\n\n    while (( i < ${#arr[@]} )); do\n        inc_sum[i]=$(( inc_sum[i-1] > 0 ? inc_sum[i-1] + arr[i] : arr[i] ))\n        dec_sum[j]=$(( dec_sum[j+1] > 0 ? dec_sum[j+1] + arr[j] : arr[j] ))\n        (( i++, j-- ))\n    done\n\n    for (( i = 0; i < ${#arr[@]}-1; i++ )); do\n        sum=$(( inc_sum[i] + dec_sum[i+1] ))\n        (( sum > max_sum )) && max_sum=$sum\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum\n  local -a dec_sum\n  local max_sum=0\n\n  inc_sum[0]=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])) && ((inc_sum[i] < inc_sum[j] + arr[i])); then\n        inc_sum[i]=$((inc_sum[j] + arr[i]))\n      fi\n    done\n  done\n\n  dec_sum[${#arr[@]}-1]=${arr[${#arr[@]}-1]}\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec_sum[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[i] > arr[j])) && ((dec_sum[i] < dec_sum[j] + arr[i])); then\n        dec_sum[i]=$((dec_sum[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max_sum < inc_sum[i] + dec_sum[i] - arr[i])); then\n      max_sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpbsqha6t0.sh: line 32: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n\n  while (( i < ${#arr[@]} )); do\n    (( inc[i] = arr[i] > arr[i-1] ? inc[i-1] + arr[i] : arr[i] ))\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    (( dec[j] = arr[j] > arr[j+1] ? dec[j+1] + arr[j] : arr[j] ))\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    (( max_inc = inc[i] > max_inc ? inc[i] : max_inc ))\n    (( max_dec = dec[i] > max_dec ? dec[i] : max_dec ))\n  done\n\n  (( max_sum = max_inc + max_dec - arr[${#arr[@]}/2] ))\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=${arr[0]}\n    local -i sum=0\n    local -i tmp=0\n\n    while (( i < ${#arr[@]} )); do\n        if (( arr[i] > arr[i-1] )); then\n            inc[i]=$(( inc[i-1] + arr[i] ))\n        else\n            inc[i]=${arr[i]}\n        fi\n        (( i++ ))\n    done\n\n    while (( j >= 0 )); do\n        if (( arr[j] > arr[j+1] )); then\n            dec[j]=$(( dec[j+1] + arr[j] ))\n        else\n            dec[j]=${arr[j]}\n        fi\n        (( j-- ))\n    done\n\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        tmp=$(( inc[i] + dec[i] - arr[i] ))\n        if (( tmp > max )); then\n            max=$tmp\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc[i]=$(( inc[i] + inc[j] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        dec[i]=$(( dec[i] + dec[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( inc[i] + dec[i] - arr[i] > max )); then\n      max=$(( inc[i] + dec[i] - arr[i] ))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc_sum=(0)\n  local -a dec_sum=(0)\n  local max_sum=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc_sum[j] + arr[i] > inc_sum[i])); then\n        inc_sum[i]=$((inc_sum[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec_sum[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec_sum[j] + arr[i] > dec_sum[i])); then\n        dec_sum[i]=$((dec_sum[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc_sum[i] + dec_sum[i] - arr[i] > max_sum)); then\n      max_sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[$i]=${arr[$i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[j] + arr[i] > inc[i])); then\n        inc[$i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[$i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[j] + arr[i] > dec[i])); then\n        dec[$i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] - arr[i] > max)); then\n      max=$((inc[i] + dec[i] - arr[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc[i]=0\n        for ((j=0; j<i; j++)); do\n            if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n                inc[i]=$(( ${inc[i]} > ${inc[j]} + ${arr[i]} ? ${inc[i]} : ${inc[j]} + ${arr[i]} ))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-2; i>=0; i--)); do\n        dec[i]=0\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n                dec[i]=$(( ${dec[i]} > ${dec[j]} + ${arr[i]} ? ${dec[i]} : ${dec[j]} + ${arr[i]} ))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        max=$(( ${inc[i]} + ${dec[i]} > $max ? ${inc[i]} + ${dec[i]} : $max ))\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3cxpfeok.sh: line 30: 9 +  > 284 ? 9 +  : 284 : syntax error: operand expected (error token is \"> 284 ? 9 +  : 284 \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum=(0)\n  local -a dec_sum=(0)\n  local max_sum=0\n  local i=0\n  local j=0\n  local sum=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if (( arr[i] > arr[j] )); then\n        sum=$((inc_sum[j] + arr[i]))\n        if (( sum > inc_sum[i] )); then\n          inc_sum[i]=$sum\n        fi\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[i] > arr[j] )); then\n        sum=$((dec_sum[j] + arr[i]))\n        if (( sum > dec_sum[i] )); then\n          dec_sum[i]=$sum\n        fi\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n    if (( sum > max_sum )); then\n      max_sum=$sum\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3x62tqs4.sh: line 37: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=${inc[i]}+${dec[i]}-${arr[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n                inc[i]=$((inc[i] + inc[j]))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n                dec[i]=$((dec[i] + dec[j]))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${inc[i]} -gt $max ]]; then\n            max=${inc[i]}\n        fi\n        if [[ ${dec[i]} -gt $max ]]; then\n            max=${dec[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc_sum=(${arr[0]})\n    local -a dec_sum=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max_sum=${arr[0]}\n    local -i inc_sum_i=0\n    local -i dec_sum_j=0\n    while ((i < ${#arr[@]})); do\n        inc_sum[i]=$((inc_sum[i-1] > 0 ? inc_sum[i-1] + arr[i] : arr[i]))\n        dec_sum[j]=$((dec_sum[j+1] > 0 ? dec_sum[j+1] + arr[j] : arr[j]))\n        if ((inc_sum[i] > max_sum)); then\n            max_sum=${inc_sum[i]}\n            inc_sum_i=i\n        fi\n        if ((dec_sum[j] > max_sum)); then\n            max_sum=${dec_sum[j]}\n            dec_sum_j=j\n        fi\n        ((i++))\n        ((j--))\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[j] + arr[i] > inc[i])); then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[j] + arr[i] > dec[i])); then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] - arr[i] > max)); then\n      max=$((inc[i] + dec[i] - arr[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i max=${arr[0]}\n  local -i i\n  local -i j\n  local -i k\n  local -i sum\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        inc[i]=$(( ${inc[j]} + ${arr[i]} ))\n      fi\n    done\n    if [[ ${inc[i]} -gt $max ]]; then\n      max=${inc[i]}\n    fi\n  done\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        dec[i]=$(( ${dec[j]} + ${arr[i]} ))\n      fi\n    done\n    if [[ ${dec[i]} -gt $max ]]; then\n      max=${dec[i]}\n    fi\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      sum=${arr[i]}\n      for ((k=i+1; k<j; k++)); do\n        if [[ ${arr[k]} -gt ${arr[k-1]} ]]; then\n          sum=$(( sum + ${arr[k]} ))\n        else\n          break\n        fi\n      done\n      if [[ $k -eq $j ]]; then\n        for ((k=j; k<${#arr[@]}; k++)); do\n          if [[ ${arr[k]} -lt ${arr[k-1]} ]]; then\n            sum=$(( sum + ${arr[\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpd5brmhfv.sh: line 49: unexpected EOF while looking for matching `)'\\n/tmp/tmpd5brmhfv.sh: line 64: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc_sum\n  local -a dec_sum\n  local -i max_sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#arr[@]}\n\n  inc_sum[0]=${arr[0]}\n  dec_sum[n-1]=${arr[n-1]}\n\n  for ((i=1; i<n; i++)); do\n    inc_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc_sum[j] + arr[i] > inc_sum[i])); then\n        inc_sum[i]=$((inc_sum[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=n-2; i>=0; i--)); do\n    dec_sum[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec_sum[j] + arr[i] > dec_sum[i])); then\n        dec_sum[i]=$((dec_sum[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    if ((inc_sum[i] + dec_sum[i] - arr[i] > max_sum)); then\n      max_sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc[i]=$(( inc[i] + inc[j] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        dec[i]=$(( dec[i] + dec[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( inc[i] + dec[i] - arr[i] > max )); then\n      max=$(( inc[i] + dec[i] - arr[i] ))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i cur=0\n  local -i len=${#arr[@]}\n\n  for ((i=1; i<len; i++)); do\n    cur=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((cur > arr[j])) && ((inc[j] + cur > inc[i])); then\n        inc[i]=${inc[j]}+cur\n      fi\n    done\n  done\n\n  for ((i=len-2; i>=0; i--)); do\n    cur=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if ((cur > arr[j])) && ((dec[j] + cur > dec[i])); then\n        dec[i]=${dec[j]}+cur\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    if ((inc[i] + dec[i] > max)); then\n      max=${inc[i]}+${dec[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=1\n  local -i max=0\n  local -i sum=0\n\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt ${arr[$i-1]} ]; then\n      inc[$i]=$(( inc[$i-1] + arr[$i] ))\n    else\n      inc[$i]=${arr[$i]}\n    fi\n    i=$(( i + 1 ))\n  done\n\n  while [ $j -lt ${#arr[@]} ]; do\n    if [ ${arr[-j]} -gt ${arr[-$(( j + 1 ))]} ]; then\n      dec[-j]=$(( dec[-$(( j + 1 ))] + arr[-j] ))\n    else\n      dec[-j]=${arr[-j]}\n    fi\n    j=$(( j + 1 ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    sum=$(( inc[$i] + dec[$i] - arr[$i] ))\n    if [ $sum -gt $max ]; then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp8bc1ov6c.sh: line 25: dec: bad array subscript\\n/tmp/tmp8bc1ov6c.sh: line 25: dec[-j]: bad array subscript\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[$i]=${arr[$i]}\n    for ((j=0; j<$i; j++)); do\n      if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n        if [[ ${inc[$j]} -gt ${inc[$i]} ]]; then\n          inc[$i]=${inc[$j]}\n        fi\n      fi\n    done\n    inc[$i]=$((inc[$i] + arr[$i]))\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[$i]=${arr[$i]}\n    for ((j=${#arr[@]}-1; j>$i; j--)); do\n      if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n        if [[ ${dec[$j]} -gt ${dec[$i]} ]]; then\n          dec[$i]=${dec[$j]}\n        fi\n      fi\n    done\n    dec[$i]=$((dec[$i] + arr[$i]))\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${inc[$i]} -gt ${dec[$i]} ]]; then\n      if [[ ${inc[$i]} -gt $max ]]; then\n        max=${inc[$i]}\n      fi\n    else\n      if [[ ${dec[$i]} -gt $max ]]; then\n        max=${dec[$i]}\n      fi\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])) && ((inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=len-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if ((arr[j] < arr[i])) && ((dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp6o4lnuj1.sh: line 33: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=0\n  local -i curr=0\n\n  while [ $i -lt ${#arr[@]} ]; do\n    curr=${arr[$i]}\n    if [ $curr -gt ${inc[$j-1]} ]; then\n      inc[$j]=$curr\n      ((j++))\n    else\n      inc[$j]=${inc[$j-1]}\n    fi\n    ((i++))\n  done\n\n  while [ $k -lt ${#arr[@]} ]; do\n    curr=${arr[$k]}\n    if [ $curr -gt ${dec[$j-1]} ]; then\n      dec[$j]=$curr\n      ((j++))\n    else\n      dec[$j]=${dec[$j-1]}\n    fi\n    ((k++))\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    curr=${inc[$i]}+${dec[$i]}\n    if [ $curr -gt $max ]; then\n      max=$curr\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpg2988gvc.sh: line 28: [: 15: unary operator expected\\n/tmp/tmpg2988gvc.sh: line 28: [: 51: unary operator expected\\n/tmp/tmpg2988gvc.sh: line 28: [: 45: unary operator expected\\n/tmp/tmpg2988gvc.sh: line 28: [: 33: unary operator expected\\n/tmp/tmpg2988gvc.sh: line 28: [: 100: unary operator expected\\n/tmp/tmpg2988gvc.sh: line 28: [: 12: unary operator expected\\n/tmp/tmpg2988gvc.sh: line 28: [: 18: unary operator expected\\n/tmp/tmpg2988gvc.sh: line 28: [: 9: unary operator expected\\n/tmp/tmpg2988gvc.sh: line 38: 15+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n\tlocal -a arr=($1)\n\tlocal -a inc=(0)\n\tlocal -a dec=(0)\n\tlocal max=0\n\tlocal i=0\n\tlocal j=0\n\tlocal len=${#arr[@]}\n\tfor ((i=0; i<len; i++)); do\n\t\tinc[i]=${arr[i]}\n\t\tfor ((j=0; j<i; j++)); do\n\t\t\tif ((arr[j] < arr[i])) && ((inc[i] < inc[j] + arr[i])); then\n\t\t\t\tinc[i]=${inc[j]}+${arr[i]}\n\t\t\tfi\n\t\tdone\n\tdone\n\tfor ((i=len-1; i>=0; i--)); do\n\t\tdec[i]=${arr[i]}\n\t\tfor ((j=len-1; j>i; j--)); do\n\t\t\tif ((arr[j] < arr[i])) && ((dec[i] < dec[j] + arr[i])); then\n\t\t\t\tdec[i]=${dec[j]}+${arr[i]}\n\t\t\tfi\n\t\tdone\n\tdone\n\tfor ((i=0; i<len; i++)); do\n\t\tif ((max < inc[i] + dec[i] - arr[i])); then\n\t\t\tmax=${inc[i]}+${dec[i]}-${arr[i]}\n\t\tfi\n\tdone\n\techo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=${inc[0]}\n  local -i max_dec=${dec[0]}\n  local -i max_sum=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > max_inc )); then\n      max_inc=${arr[i]}\n    fi\n    inc+=($max_inc)\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > max_dec )); then\n      max_dec=${arr[j]}\n    fi\n    dec+=($max_dec)\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    if (( inc[i] + dec[i] > max_sum )); then\n      max_sum=$(( inc[i] + dec[i] ))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i n=${#arr[@]}\n  local -i sum=0\n\n  for ((i=1; i<n; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        (( inc[i] = ${inc[j]} + ${arr[i]} ))\n      fi\n    done\n  done\n\n  for ((i=n-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        (( dec[i] = ${dec[j]} + ${arr[i]} ))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    (( sum = ${inc[i]} + ${dec[i]} - ${arr[i]} ))\n    if [[ $sum -gt $max ]]; then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i max=0\n    local -i sum=0\n    local -i len=${#arr[@]}\n    for ((i=1; i<len; i++)); do\n        sum=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((sum < inc[j] + arr[i])); then\n                sum=inc[j] + arr[i]\n            fi\n        done\n        inc[i]=sum\n    done\n    for ((i=len-2; i>=0; i--)); do\n        sum=${arr[i]}\n        for ((j=len-1; j>i; j--)); do\n            if ((sum < dec[j] + arr[i])); then\n                sum=dec[j] + arr[i]\n            fi\n        done\n        dec[i]=sum\n    done\n    for ((i=0; i<len; i++)); do\n        if ((max < inc[i] + dec[i] - arr[i])); then\n            max=inc[i] + dec[i] - arr[i]\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 34: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 43: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 43: +: command not found\\n/tmp/tmp4jk0dcwn.sh: line 43: +: command not found\\n/tmp/tmp4jk0dcwn.s",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n  local sum=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        (( inc[i] += inc[j] ))\n      fi\n    done\n  done\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        (( dec[i] += dec[j] ))\n      fi\n    done\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    (( sum = inc[i] + dec[i] - arr[i] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp117d2tek.sh: line 30: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc_sum=(0)\n  local -a dec_sum=(0)\n  local max_sum=0\n  local i=0\n  local j=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc_sum[j] + arr[i] > inc_sum[i])); then\n        inc_sum[i]=$((inc_sum[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec_sum[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec_sum[j] + arr[i] > dec_sum[i])); then\n        dec_sum[i]=$((dec_sum[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc_sum[i] + dec_sum[i] - arr[i] > max_sum)); then\n      max_sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc[i]=$(( inc[i] + inc[j] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        dec[i]=$(( dec[i] + dec[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( inc[i] + dec[i] - arr[i] > max )); then\n      max=$(( inc[i] + dec[i] - arr[i] ))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  local -i sum=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > arr[i-1] )); then\n      inc[i]=$(( inc[i-1] + arr[i] ))\n    else\n      inc[i]=${arr[i]}\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > arr[j+1] )); then\n      dec[j]=$(( dec[j+1] + arr[j] ))\n    else\n      dec[j]=${arr[j]}\n    fi\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    sum=$(( inc[i] + dec[i] - arr[i] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local max=${arr[0]}\n  local sum=0\n\n  for (( i=1; i<${#arr[@]}; i++ )); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for (( j=0; j<i; j++ )); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        if [[ ${inc[i]} -lt $(( ${inc[j]} + ${arr[i]} )) ]]; then\n          inc[i]=$(( ${inc[j]} + ${arr[i]} ))\n        fi\n      fi\n      if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n        if [[ ${dec[i]} -lt $(( ${dec[j]} + ${arr[i]} )) ]]; then\n          dec[i]=$(( ${dec[j]} + ${arr[i]} ))\n        fi\n      fi\n    done\n    if [[ ${inc[i]} -gt $max ]]; then\n      max=${inc[i]}\n    fi\n    if [[ ${dec[i]} -gt $max ]]; then\n      max=${dec[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc_sum=(${arr[0]})\n    local -a dec_sum=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max_sum=${inc_sum[0]}\n    while (( i < ${#arr[@]} )); do\n        inc_sum[i]=$(( arr[i] > arr[i-1] + inc_sum[i-1] ? arr[i] : arr[i-1] + inc_sum[i-1] ))\n        dec_sum[j]=$(( arr[j] > arr[j+1] + dec_sum[j+1] ? arr[j] : arr[j+1] + dec_sum[j+1] ))\n        max_sum=$(( max_sum > inc_sum[i] + dec_sum[j] ? max_sum : inc_sum[i] + dec_sum[j] ))\n        (( i++ ))\n        (( j-- ))\n    done\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum\n  local -a dec_sum\n  local -i max_sum=0\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n\n  inc_sum[0]=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    sum=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        (( sum = inc_sum[j] + arr[i] ))\n      fi\n    done\n    inc_sum[i]=$sum\n  done\n\n  dec_sum[${#arr[@]}-1]=${arr[${#arr[@]}-1]}\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    sum=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        (( sum = dec_sum[j] + arr[i] ))\n      fi\n    done\n    dec_sum[i]=$sum\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    (( sum = inc_sum[i] + dec_sum[i] - arr[i] ))\n    if (( sum > max_sum )); then\n      max_sum=$sum\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpocj5jgw9.sh: line 37: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=0\n  local -i sum=0\n\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt ${inc[$j-1]} ]; then\n      inc[$j]=${arr[$i]}\n      ((j++))\n    else\n      inc[$j]=${arr[$i]}\n      while [ $j -gt 1 -a ${inc[$j]} -lt ${inc[$j-1]} ]; do\n        ((j--))\n      done\n    fi\n    ((i++))\n  done\n\n  while [ $k -lt ${#arr[@]} ]; do\n    if [ ${arr[$k]} -gt ${dec[$j-1]} ]; then\n      dec[$j]=${arr[$k]}\n      ((j++))\n    else\n      dec[$j]=${arr[$k]}\n      while [ $j -gt 1 -a ${dec[$j]} -lt ${dec[$j-1]} ]; do\n        ((j--))\n      done\n    fi\n    ((k++))\n  done\n\n  for ((i=0; i<${#inc[@]}; i++)); do\n    for ((j=0; j<${#dec[@]}; j++)); do\n      if [ ${inc[$i]} -eq ${dec[$j]} ]; then\n        sum=$(( ${inc[$i]} + ${dec[$j]} ))\n        if [ $sum -gt $max ]; then\n          max=$sum\n        fi\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n\n  while (( i < ${#arr[@]} )); do\n    inc[i]=${arr[i]}\n    if (( inc[i-1] > inc[i] )); then\n      inc[i]=inc[i-1]\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    dec[j]=${arr[j]}\n    if (( dec[j+1] > dec[j] )); then\n      dec[j]=dec[j+1]\n    fi\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    if (( inc[i]+dec[i] > max )); then\n      max=inc[i]+dec[i]\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpipsr1iy6.sh: line 15: i-1: expression recursion level exceeded (error token is \"i-1\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=1\n  local -i max=0\n  local -i sum=0\n\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt ${arr[$i-1]} ]; then\n      inc[$i]=$(( ${inc[$i-1]} + ${arr[$i]} ))\n    else\n      inc[$i]=${arr[$i]}\n    fi\n    (( i++ ))\n  done\n\n  while [ $j -lt ${#arr[@]} ]; do\n    if [ ${arr[-j]} -gt ${arr[-$((j+1))]} ]; then\n      dec[-j]=$(( ${dec[-$((j+1))]} + ${arr[-j]} ))\n    else\n      dec[-j]=${arr[-j]}\n    fi\n    (( j++ ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    sum=$(( ${inc[$i]} + ${dec[$i]} - ${arr[$i]} ))\n    if [ $sum -gt $max ]; then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_z1qad0p.sh: line 25: dec: bad array subscript\\n/tmp/tmp_z1qad0p.sh: line 25: dec[-j]: bad array subscript\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n  local n=${#arr[@]}\n  for ((i=1; i<n; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        inc[i]=$((inc[i] > inc[j] + arr[i] ? inc[i] : inc[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=n-2; i>=0; i--)); do\n    for ((j=n-1; j>i; j--)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        dec[i]=$((dec[i] > dec[j] + arr[i] ? dec[i] : dec[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=0; i<n; i++)); do\n    max=$((max > inc[i] + dec[i] - arr[i] ? max : inc[i] + dec[i] - arr[i]))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum\n  local -a dec_sum\n  local max_sum=0\n  local max_sum_index=0\n  local i=0\n  local j=0\n  local sum=0\n\n  # Find the increasing sum\n  inc_sum[0]=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[$i]=${arr[$i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n        if [[ ${inc_sum[$j]} -gt ${inc_sum[$i]} ]]; then\n          inc_sum[$i]=${inc_sum[$j]}\n        fi\n      fi\n    done\n    inc_sum[$i]=$((inc_sum[$i] + arr[$i]))\n  done\n\n  # Find the decreasing sum\n  dec_sum[$(( ${#arr[@]} - 1 ))]=${arr[$(( ${#arr[@]} - 1 ))]}\n  for ((i=$(( ${#arr[@]} - 2 )); i>=0; i--)); do\n    dec_sum[$i]=${arr[$i]}\n    for ((j=$(( ${#arr[@]} - 1 )); j>i; j--)); do\n      if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n        if [[ ${dec_sum[$j]} -gt ${dec_sum[$i]} ]]; then\n          dec_sum[$i]=${dec_sum[$j]}\n        fi\n      fi\n    done\n    dec_sum[$i]=$((dec_sum[$i] + arr[$i]))\n  done\n\n  # Find the max sum\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$((inc_sum[$i] + dec_sum[$i] - arr[$i]))\n    if [[ $sum -gt $max_sum ]]; then\n      max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpnv41sxor.sh: line 48: syntax error near unexpected token `}'\\n/tmp/tmpnv41sxor.sh: line 48: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i max=${arr[0]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i sum=0\n  local -i n=${#arr[@]}\n\n  for ((i=1; i<n; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=n-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    sum=${inc[i]}+${dec[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpoj4j19hy.sh: line 35: 1+9+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local max=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n    done\n    if [[ ${inc[i]} -gt $max ]]; then\n      max=${inc[i]}\n    fi\n  done\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n    if [[ ${dec[i]} -gt $max ]]; then\n      max=${dec[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n  local k=0\n  local n=${#arr[@]}\n  for ((i=0; i<n; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        if [[ ${inc[j]} -gt ${inc[i]} ]]; then\n          inc[i]=${inc[j]}\n        fi\n      fi\n    done\n    inc[i]=$((inc[i]+arr[i]))\n  done\n  for ((i=n-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        if [[ ${dec[j]} -gt ${dec[i]} ]]; then\n          dec[i]=${dec[j]}\n        fi\n      fi\n    done\n    dec[i]=$((dec[i]+arr[i]))\n  done\n  for ((i=0; i<n; i++)); do\n    if [[ $((inc[i]+dec[i]-arr[i])) -gt $max ]]; then\n      max=$((inc[i]+dec[i]-arr[i]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n  for ((i=1; i<len; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        if ((inc[i] < inc[j] + arr[i])); then\n          inc[i]=${inc[j]}+${arr[i]}\n        fi\n      fi\n      if ((arr[i] < arr[j])); then\n        if ((dec[i] < dec[j] + arr[i])); then\n          dec[i]=${dec[j]}+${arr[i]}\n        fi\n      fi\n    done\n  done\n  for ((i=0; i<len; i++)); do\n    sum=${inc[i]}+${dec[i]}-${arr[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a a=($1)\n  local -a l=(0)\n  local -a r=(0)\n  local -i i=0\n  local -i j=0\n  local -i n=${#a[@]}\n  local -i max=0\n  local -i sum=0\n\n  for ((i=0; i<n; i++)); do\n    l[i]=${a[i]}\n    for ((j=0; j<i; j++)); do\n      if ((a[j] < a[i] && l[i] < l[j] + a[i])); then\n        l[i]=${l[j]}+${a[i]}\n      fi\n    done\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    r[i]=${a[i]}\n    for ((j=n-1; j>i; j--)); do\n      if ((a[j] < a[i] && r[i] < r[j] + a[i])); then\n        r[i]=${r[j]}+${a[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    sum=${l[i]}+${r[i]}-${a[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum=()\n  local -a dec_sum=()\n  local max_sum=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc_sum[$i]=${arr[$i]}\n    dec_sum[$i]=${arr[$i]}\n    for ((j=0; j<$i; j++)); do\n      if (( ${arr[$j]} < ${arr[$i]} )); then\n        if (( ${inc_sum[$i]} < ${inc_sum[$j]} + ${arr[$i]} )); then\n          inc_sum[$i]=${inc_sum[$j]} + ${arr[$i]}\n        fi\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>$i; j--)); do\n      if (( ${arr[$j]} < ${arr[$i]} )); then\n        if (( ${dec_sum[$i]} < ${dec_sum[$j]} + ${arr[$i]} )); then\n          dec_sum[$i]=${dec_sum[$j]} + ${arr[$i]}\n        fi\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( ${inc_sum[$i]} + ${dec_sum[$i]} - ${arr[$i]} > $max_sum )); then\n      max_sum=${inc_sum[$i]} + ${dec_sum[$i]} - ${arr[$i]}\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpaao0f_ye.sh: line 34: ((: 1 15 51 45 33 100 12 18 9 + 1 15 51 45 33 100 12 18 9 - 1 15 51 45 33 100 12 18 9 > 0 : syntax error in expression (error token is \"15 51 45 33 100 12 18 9 + 1 15 51 45 33 100 12 18 9 - 1 15 51 45 33 100 12 18 9 > 0 \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  local -i sum=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > inc[-1] )); then\n      inc+=(${arr[i]})\n    else\n      inc[-1]=${arr[i]}\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > dec[-1] )); then\n      dec+=(${arr[j]})\n    else\n      dec[-1]=${arr[j]}\n    fi\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    sum=${inc[i]}+${dec[i]}\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmppgfuspck.sh: line 33: +: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=${arr[0]}\n  local -i sum=0\n  local -i n=${#arr[@]}\n\n  while (( i < n )); do\n    if (( arr[i] > arr[i-1] )); then\n      inc[j++]=${arr[i]}\n    else\n      inc[j++]=${arr[i-1]}\n    fi\n    (( i++ ))\n  done\n\n  while (( k < n )); do\n    if (( arr[n-k] > arr[n-k-1] )); then\n      dec[j++]=${arr[n-k]}\n    else\n      dec[j++]=${arr[n-k-1]}\n    fi\n    (( k++ ))\n  done\n\n  for (( i=0; i<n; i++ )); do\n    sum=$(( inc[i] + dec[n-i-1] ))\n    if (( sum > max )); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n    done\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    max=$((max > inc[i] + dec[i] - arr[i] ? max : inc[i] + dec[i] - arr[i]))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -i i j k\n  local -i max_sum=0\n  local -i max_sum_i=0\n  local -i max_sum_j=0\n  local -i sum=0\n  local -i sum_i=0\n  local -i sum_j=0\n  local -i len=${#arr[@]}\n  local -i is_increasing=1\n  local -i is_decreasing=1\n  for ((i=0; i<len; i++)); do\n    sum_i=$i\n    sum_j=$i\n    sum=${arr[i]}\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j] > arr[j-1])); then\n        is_increasing=1\n        is_decreasing=0\n      elif ((arr[j] < arr[j-1])); then\n        is_increasing=0\n        is_decreasing=1\n      else\n        is_increasing=0\n        is_decreasing=0\n      fi\n      if ((is_increasing)); then\n        sum_j=$j\n        sum=$((sum + arr[j]))\n      elif ((is_decreasing)); then\n        sum_j=$j\n        sum=$((sum + arr[j]))\n      else\n        break\n      fi\n    done\n    if ((sum > max_sum)); then\n      max_sum=$sum\n      max_sum_i=$sum_i\n      max_sum_j=$sum_j\n    fi\n  done\n  echo \"max_sum=$max_sum\"\n  echo \"max_sum_i=$max_sum_i\"\n  echo \"max_sum_j=$max_sum_j\"\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(${1// / })\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=0\n    dec[i]=0\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        inc[i]=$((inc[i] > inc[j] + arr[i] ? inc[i] : inc[j] + arr[i]))\n      fi\n      if ((arr[i] < arr[j])); then\n        dec[i]=$((dec[i] > dec[j] + arr[i] ? dec[i] : dec[j] + arr[i]))\n      fi\n    done\n    max=$((max > inc[i] + dec[i] - arr[i] ? max : inc[i] + dec[i] - arr[i]))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc\n  local -a dec\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i len=${#arr[@]}\n  local -i sum=0\n\n  inc[0]=${arr[0]}\n  dec[len-1]=${arr[len-1]}\n\n  for ((i=1; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[i] > arr[j] )); then\n        if (( inc[i] < inc[j] + arr[i] )); then\n          inc[i]=inc[j]+arr[i]\n        fi\n      fi\n    done\n  done\n\n  for ((i=len-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if (( arr[i] > arr[j] )); then\n        if (( dec[i] < dec[j] + arr[i] )); then\n          dec[i]=dec[j]+arr[i]\n        fi\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    sum=inc[i]+dec[i]-arr[i]\n    if (( sum > max )); then\n      max=sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmphn_b5_hk.sh: line 41: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1 j=${#arr[@]}\n  while ((i < j)); do\n    inc[i]=$((inc[i-1] > arr[i] + inc[i-1] ? inc[i-1] : arr[i] + inc[i-1]))\n    dec[j-1]=$((dec[j] > arr[j-1] + dec[j] ? dec[j] : arr[j-1] + dec[j]))\n    ((i++, j--))\n  done\n  local -i max=0\n  for ((i=0; i < ${#arr[@]}; i++)); do\n    local -i sum=$((inc[i] + dec[i] - arr[i]))\n    max=$((max > sum ? max : sum))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i] && inc[j] + arr[i] > inc[i])); then\n                inc[i]=$((inc[j] + arr[i]))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((arr[j] < arr[i] && dec[j] + arr[i] > dec[i])); then\n                dec[i]=$((dec[j] + arr[i]))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((inc[i] + dec[i] - arr[i] > max)); then\n            max=$((inc[i] + dec[i] - arr[i]))\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -a d=($1)\n  local -a e=($1)\n  local -a f=($1)\n  local -a g=($1)\n  local -a h=($1)\n  local -a i=($1)\n  local -a j=($1)\n  local -a k=($1)\n  local -a l=($1)\n  local -a m=($1)\n  local -a n=($1)\n  local -a o=($1)\n  local -a p=($1)\n  local -a q=($1)\n  local -a r=($1)\n  local -a s=($1)\n  local -a t=($1)\n  local -a u=($1)\n  local -a v=($1)\n  local -a w=($1)\n  local -a x=($1)\n  local -a y=($1)\n  local -a z=($1)\n  local -a A=($1)\n  local -a B=($1)\n  local -a C=($1)\n  local -a D=($1)\n  local -a E=($1)\n  local -a F=($1)\n  local -a G=($1)\n  local -a H=($1)\n  local -a I=($1)\n  local -a J=($1)\n  local -a K=($1)\n  local -a L=($1)\n  local -a M=($1)\n  local -a N=($1)\n  local -a O=($1)\n  local -a P=($1)\n  local -a Q=($1)\n  local -a R=($1)\n  local -a S=($1)\n  local -a T=($1)\n  local -a U=($1)\n  local -a V=($1)\n  local -a W=($1)\n  local -a X=($1)\n  local -a Y=($1)\n \n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr\n  local -i i j k\n  local -i max_sum=0\n  local -i sum=0\n  local -i len=0\n  local -i index=0\n  local -i max_index=0\n  local -i max_len=0\n  local -i max_sum_index=0\n  local -i max_sum_len=0\n\n  arr=($1)\n  len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    sum=0\n    for ((j=i; j<len; j++)); do\n      sum=$((sum + arr[j]))\n      if ((sum > max_sum)); then\n        max_sum=$sum\n        max_index=$i\n        max_len=$((j - i + 1))\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    sum=0\n    for ((j=i; j<len; j++)); do\n      sum=$((sum + arr[j]))\n      if ((sum == max_sum)); then\n        if ((j - i + 1 > max_sum_len)); then\n          max_sum_index=$i\n          max_sum_len=$((j - i + 1))\n        fi\n      fi\n    done\n  done\n\n  for ((i=max_sum_index; i<max_sum_index + max_sum_len; i++)); do\n    echo -n \"${arr[i]} \"\n  done\n  echo\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${inc[i]} -gt 0 && ${dec[i]} -gt 0 ]]; then\n      max=$((max > inc[i] + dec[i] ? max : inc[i] + dec[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n    local i=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        dec[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i])); then\n                inc[i]=$((inc[i] + inc[j]))\n            fi\n            if ((arr[j] > arr[i])); then\n                dec[i]=$((dec[i] + dec[j]))\n            fi\n        done\n        if ((inc[i] > max)); then\n            max=${inc[i]}\n        fi\n        if ((dec[i] > max)); then\n            max=${dec[i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=${arr[0]}\n\n    while ((i < ${#arr[@]})); do\n        if ((arr[i] > arr[i-1])); then\n            inc[i]=$((inc[i-1]+arr[i]))\n        else\n            inc[i]=${arr[i]}\n        fi\n        ((i++))\n    done\n\n    while ((j >= 0)); do\n        if ((arr[j] > arr[j+1])); then\n            dec[j]=$((dec[j+1]+arr[j]))\n        else\n            dec[j]=${arr[j]}\n        fi\n        ((j--))\n    done\n\n    for ((i=0; i < ${#arr[@]}; i++)); do\n        if ((inc[i]+dec[i]-arr[i] > max)); then\n            max=$((inc[i]+dec[i]-arr[i]))\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i n=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc[i]=$(( inc[i] + inc[j] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        dec[i]=$(( dec[i] + dec[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( inc[i] + dec[i] - arr[i] > max )); then\n      max=$(( inc[i] + dec[i] - arr[i] ))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a array=(\"$@\")\n  local -a inc_sum=()\n  local -a dec_sum=()\n  local max_sum=0\n\n  inc_sum[0]=${array[0]}\n  for ((i=1; i<${#array[@]}; i++)); do\n    inc_sum[i]=${array[i]}\n    for ((j=0; j<i; j++)); do\n      if ((array[i] > array[j])) && ((inc_sum[i] < inc_sum[j] + array[i])); then\n        inc_sum[i]=$((inc_sum[j] + array[i]))\n      fi\n    done\n  done\n\n  dec_sum[${#array[@]}-1]=${array[${#array[@]}-1]}\n  for ((i=${#array[@]}-2; i>=0; i--)); do\n    dec_sum[i]=${array[i]}\n    for ((j=${#array[@]}-1; j>i; j--)); do\n      if ((array[i] > array[j])) && ((dec_sum[i] < dec_sum[j] + array[i])); then\n        dec_sum[i]=$((dec_sum[j] + array[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#array[@]}; i++)); do\n    if ((max_sum < inc_sum[i] + dec_sum[i] - array[i])); then\n      max_sum=$((inc_sum[i] + dec_sum[i] - array[i]))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplg5u8tm3.sh: line 32: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[i] > arr[j])); then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] > max)); then\n      max=$((inc[i] + dec[i]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a lis=(${arr[0]})\n  local -a lds=(${arr[0]})\n  local -a lis_index=(0)\n  local -a lds_index=(0)\n  local -a lis_index_rev=(0)\n  local -a lds_index_rev=(0)\n  local -a lis_rev=(${arr[0]})\n  local -a lds_rev=(${arr[0]})\n  local max_sum=0\n  local max_sum_index=0\n  local max_sum_index_rev=0\n  local max_sum_rev=0\n  local max_sum_rev_index=0\n  local max_sum_rev_index_rev=0\n  local max_sum_rev_rev=0\n  local max_sum_rev_rev_index=0\n  local max_sum_rev_rev_index_rev=0\n  local max_sum_rev_rev_rev=0\n  local max_sum_rev_rev_rev_index=0\n  local max_sum_rev_rev_rev_index_rev=0\n  local max_sum_rev_rev_rev_rev=0\n  local max_sum_rev_rev_rev_rev_index=0\n  local max_sum_rev_rev_rev_rev_index_rev=0\n  local max_sum_rev_rev_rev_rev_rev=0\n  local max_sum_rev_rev_rev_rev_rev_index=0\n  local max_sum_rev_rev_rev_rev_rev_index_rev=0\n  local max_sum_rev_rev_rev_rev_rev_rev=0\n  local max_sum_rev_rev_rev_rev_rev_rev_index=0\n  local max_sum_rev_rev_rev_rev_rev_rev_index_rev=0\n  local max_sum_rev_rev_rev_rev_rev_rev_rev=0\n  local max_sum_rev_rev_rev_rev_rev_rev_rev_index=0\n  local max_sum_rev\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a left=(${arr[0]})\n    local -a right=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=0\n    local -i sum=0\n\n    while (( i < ${#arr[@]} )); do\n        left[i]=$(( ${arr[i]} > ${arr[i-1]} + ${left[i-1]} ? ${arr[i]} : ${arr[i-1]} + ${left[i-1]} ))\n        (( i++ ))\n    done\n\n    while (( j >= 0 )); do\n        right[j]=$(( ${arr[j]} > ${arr[j+1]} + ${right[j+1]} ? ${arr[j]} : ${arr[j+1]} + ${right[j+1]} ))\n        (( j-- ))\n    done\n\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        sum=$(( ${left[i]} + ${right[i]} - ${arr[i]} ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmg0bsfj9.sh: line 20: 18 > 9 +  ? 18 : 9 +  : syntax error: operand expected (error token is \"? 18 : 9 +  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i])); then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] > max)); then\n      max=$((inc[i] + dec[i]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[0]})\n    local -i max=${arr[0]}\n    local -i i=1\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n    local -i len=${#arr[@]}\n\n    for ((i=1; i<len; i++)); do\n        inc[i]=${arr[i]}\n        dec[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                inc[i]=$(( inc[i] > inc[j] + arr[i] ? inc[i] : inc[j] + arr[i] ))\n            fi\n            if (( arr[j] > arr[i] )); then\n                dec[i]=$(( dec[i] > dec[j] + arr[i] ? dec[i] : dec[j] + arr[i] ))\n            fi\n        done\n    done\n\n    for ((i=0; i<len; i++)); do\n        sum=$(( inc[i] + dec[i] - arr[i] ))\n        max=$(( max > sum ? max : sum ))\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=${arr[0]}\n  local -i sum=0\n  local -i inc_sum=0\n  local -i dec_sum=0\n\n  while (( i < ${#arr[@]} )); do\n    inc[i]=$(( ${arr[i]} > ${inc[i-1]} + ${arr[i]} ? ${arr[i]} : ${inc[i-1]} + ${arr[i]} ))\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    dec[j]=$(( ${arr[j]} > ${dec[j+1]} + ${arr[j]} ? ${arr[j]} : ${dec[j+1]} + ${arr[j]} ))\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    inc_sum=${inc[i]}\n    dec_sum=${dec[i]}\n    sum=$(( inc_sum + dec_sum - ${arr[i]} ))\n    max=$(( sum > max ? sum : max ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        for ((j=0; j<i; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                if [[ ${inc[i]} -lt ${inc[j]} ]]; then\n                    inc[i]=${inc[j]}\n                fi\n            fi\n        done\n        inc[i]=$((inc[i]+arr[i]))\n    done\n\n    for ((i=${#arr[@]}-2; i>=0; i--)); do\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                if [[ ${dec[i]} -lt ${dec[j]} ]]; then\n                    dec[i]=${dec[j]}\n                fi\n            fi\n        done\n        dec[i]=$((dec[i]+arr[i]))\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${inc[i]}+${dec[i]} -gt $max ]]; then\n            max=${inc[i]}+${dec[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpjp3zxh1r.sh: line 36: [[: 9+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i inc_max=0\n    local -i dec_max=0\n    local -i curr=0\n    local -i curr_inc=0\n    local -i curr_dec=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        curr=${arr[i]}\n        curr_inc=${inc[i-1]}\n        curr_dec=${dec[i-1]}\n        if ((curr > curr_inc)); then\n            inc[i]=$curr\n            inc_max=$((inc_max + curr))\n        else\n            inc[i]=$curr_inc\n        fi\n        if ((curr < curr_dec)); then\n            dec[i]=$curr\n            dec_max=$((dec_max + curr))\n        else\n            dec[i]=$curr_dec\n        fi\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        curr_inc=${inc[i]}\n        curr_dec=${dec[i]}\n        if ((curr_inc + curr_dec - arr[i] > max)); then\n            max=$((curr_inc + curr_dec - arr[i]))\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=0\n\n  while [[ $i -lt ${#arr[@]} ]]; do\n    if [[ ${arr[$i]} -gt ${inc[$j-1]} ]]; then\n      inc[$j]=${arr[$i]}\n      ((j++))\n    else\n      inc[$j]=${inc[$j-1]}\n    fi\n    ((i++))\n  done\n\n  while [[ $k -lt ${#arr[@]} ]]; do\n    if [[ ${arr[$k]} -lt ${dec[$j-1]} ]]; then\n      dec[$j]=${arr[$k]}\n      ((j++))\n    else\n      dec[$j]=${dec[$j-1]}\n    fi\n    ((k++))\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${inc[$i]}+${dec[$i]} -gt $max ]]; then\n      max=${inc[$i]}+${dec[$i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpl5dzxiwm.sh: line 35: [[: 15+: syntax error: operand expected (error token is \"+\")\\n/tmp/tmpl5dzxiwm.sh: line 35: [[: 51+: syntax error: operand expected (error token is \"+\")\\n/tmp/tmpl5dzxiwm.sh: line 35: [[: 100+: syntax error: operand expected (error token is \"+\")\\n/tmp/tmpl5dzxiwm.sh: line 35: [[: 100+: syntax error: operand expected (error token is \"+\")\\n/tmp/tmpl5dzxiwm.sh: line 35: [[: +: syntax error: operand expected (error token is \"+\")\\n/tmp/tmpl5dzxiwm.sh: line 35: [[: +: syntax error: operand expected (error token is \"+\")\\n/tmp/tmpl5dzxiwm.sh: line 35: [[: +: syntax error: operand expected (error token is \"+\")\\n/tmp/tmpl5dzxiwm.sh: line 35: [[: +: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=${arr[0]}\n  local -i sum=0\n  local -i tmp=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > arr[i-1] )); then\n      inc[i]=$(( inc[i-1] + arr[i] ))\n    else\n      inc[i]=${arr[i]}\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > arr[j+1] )); then\n      dec[j]=$(( dec[j+1] + arr[j] ))\n    else\n      dec[j]=${arr[j]}\n    fi\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    tmp=$(( inc[i] + dec[i] - arr[i] ))\n    if (( tmp > max )); then\n      max=$tmp\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc_sum=(0)\n  local -a dec_sum=(0)\n  local -a max_sum=(0)\n  local i\n  local j\n  local max_sum=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[i]=0\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j]) && ((inc_sum[j] + arr[i]) > inc_sum[i])); then\n        inc_sum[i]=inc_sum[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec_sum[i]=0\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[i] > arr[j]) && ((dec_sum[j] + arr[i]) > dec_sum[i])); then\n        dec_sum[i]=dec_sum[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    max_sum[i]=inc_sum[i]+dec_sum[i]-arr[i]\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max_sum[i] > max_sum)); then\n      max_sum=max_sum[i]\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not found\\n/tmp/tmpj5o06dqp.sh: line 17: arr[i]: command not f",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        inc[i]=$((inc[j]+arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[i] > arr[j])); then\n        dec[i]=$((dec[j]+arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i]+dec[i] > max)); then\n      max=$((inc[i]+dec[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i n=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n                inc[i]=${inc[j]}+${arr[i]}\n            fi\n        done\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=n-1; j>i; j--)); do\n            if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n                dec[i]=${dec[j]}+${arr[i]}\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        if ((max < inc[i] + dec[i] - arr[i])); then\n            max=${inc[i]}+${dec[i]}-${arr[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n    local i=0\n    local j=0\n    local sum=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[$i]=${arr[$i]}\n        for ((j=0; j<$i; j++)); do\n            if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n                if [[ ${inc[$j]} -gt ${inc[$i]} ]]; then\n                    inc[$i]=${inc[$j]}\n                fi\n            fi\n        done\n        inc[$i]=$((inc[$i]+arr[$i]))\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[$i]=${arr[$i]}\n        for ((j=${#arr[@]}-1; j>$i; j--)); do\n            if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n                if [[ ${dec[$j]} -gt ${dec[$i]} ]]; then\n                    dec[$i]=${dec[$j]}\n                fi\n            fi\n        done\n        dec[$i]=$((dec[$i]+arr[$i]))\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=$((inc[$i]+dec[$i]-arr[$i]))\n        if [[ $sum -gt $max ]]; then\n            max=$sum\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n\tlocal -a arr=($1)\n\tlocal -a inc=(0)\n\tlocal -a dec=(0)\n\tlocal max=0\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal len=${#arr[@]}\n\tfor ((i=0; i<len; i++)); do\n\t\tinc[i]=${arr[i]}\n\t\tdec[i]=${arr[i]}\n\tdone\n\tfor ((i=1; i<len; i++)); do\n\t\tfor ((j=0; j<i; j++)); do\n\t\t\tif [[ ${arr[i]} -gt ${arr[j]} ]]; then\n\t\t\t\tinc[i]=$((inc[i] + inc[j]))\n\t\t\tfi\n\t\tdone\n\tdone\n\tfor ((i=len-2; i>=0; i--)); do\n\t\tfor ((j=len-1; j>i; j--)); do\n\t\t\tif [[ ${arr[i]} -gt ${arr[j]} ]]; then\n\t\t\t\tdec[i]=$((dec[i] + dec[j]))\n\t\t\tfi\n\t\tdone\n\tdone\n\tfor ((i=0; i<len; i++)); do\n\t\tif [[ $((inc[i] + dec[i] - arr[i])) -gt $max ]]; then\n\t\t\tmax=$((inc[i] + dec[i] - arr[i]))\n\t\tfi\n\tdone\n\techo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local sum=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=${inc[i]}+${dec[i]}-${arr[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum=()\n  local -a dec_sum=()\n  local max_sum=0\n\n  inc_sum[0]=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc_sum[i]=$(( inc_sum[i] + inc_sum[j] ))\n      fi\n    done\n  done\n\n  dec_sum[-1]=${arr[-1]}\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec_sum[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        dec_sum[i]=$(( dec_sum[i] + dec_sum[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    max_sum=$(( max_sum > inc_sum[i] + dec_sum[i] ? max_sum : inc_sum[i] + dec_sum[i] ))\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpxdzs1fxk.sh: line 21: dec_sum[-1]: bad array subscript\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i\n  local -i j\n  local -i max=0\n  local -i n=${#arr[@]}\n\n  for ((i=1; i<n; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=n-2; i>=0; i--)); do\n    for ((j=n-1; j>i; j--)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    if [[ ${inc[i]} -gt 0 && ${dec[i]} -gt 0 ]]; then\n      max=$((max > inc[i] + dec[i] ? max : inc[i] + dec[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a array=($1)\n  local -a lis\n  local -a lds\n  local max=0\n\n  # Compute lis[i] and lds[i]\n  for ((i=0; i<${#array[@]}; i++)); do\n    lis[i]=1\n    lds[i]=1\n    for ((j=0; j<i; j++)); do\n      if ((array[j] < array[i] && lis[i] < lis[j] + 1)); then\n        lis[i]=$((lis[j] + 1))\n      fi\n    done\n    for ((j=${#array[@]}-1; j>i; j--)); do\n      if ((array[j] < array[i] && lds[i] < lds[j] + 1)); then\n        lds[i]=$((lds[j] + 1))\n      fi\n    done\n  done\n\n  # Compute max sum\n  for ((i=0; i<${#array[@]}; i++)); do\n    if ((lis[i] + lds[i] - 1 > max)); then\n      max=$((lis[i] + lds[i] - 1))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local i\n    local j\n    local max=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                inc[i]=$(( inc[i] + inc[j] ))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if (( arr[j] < arr[i] )); then\n                dec[i]=$(( dec[i] + dec[j] ))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( inc[i] + dec[i] - arr[i] > max )); then\n            max=$(( inc[i] + dec[i] - arr[i] ))\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        ((inc[i] = inc[j] + arr[i]))\n      fi\n      if ((arr[i] < arr[j])); then\n        ((dec[i] = dec[j] + arr[i]))\n      fi\n    done\n    ((max = inc[i] > max ? inc[i] : max))\n    ((max = dec[i] > max ? dec[i] : max))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a a=($1)\n  local -a l=(0)\n  local -a r=(0)\n  local -i i=0\n  local -i j=0\n  local -i n=${#a[@]}\n  local -i max=0\n\n  for ((i=1; i<n; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((a[i] > a[j] && l[i] < l[j] + a[i])); then\n        l[i]=l[j]+a[i]\n      fi\n    done\n  done\n\n  for ((i=n-2; i>=0; i--)); do\n    for ((j=n-1; j>i; j--)); do\n      if ((a[i] > a[j] && r[i] < r[j] + a[i])); then\n        r[i]=r[j]+a[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    if ((max < l[i] + r[i] - a[i])); then\n      max=l[i]+r[i]-a[i]\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpul5kzj8s.sh: line 16: j: expression recursion level exceeded (error token is \"j\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a a=($1)\n  local -a l=(0)\n  local -a r=(0)\n  local i=0\n  local j=0\n  local max=0\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    l[i]=${a[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${a[j]} -lt ${a[i]} ]]; then\n        l[i]=$((l[i] + l[j]))\n      fi\n    done\n  done\n\n  for ((i=${#a[@]}-1; i>=0; i--)); do\n    r[i]=${a[i]}\n    for ((j=${#a[@]}-1; j>i; j--)); do\n      if [[ ${a[j]} -lt ${a[i]} ]]; then\n        r[i]=$((r[i] + r[j]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    if [[ $((l[i] + r[i] - a[i])) -gt $max ]]; then\n      max=$((l[i] + r[i] - a[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i sum=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                (( inc[i] = inc[i] + arr[j] ))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if (( arr[j] < arr[i] )); then\n                (( dec[i] = dec[i] + arr[j] ))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        (( sum = inc[i] + dec[i] - arr[i] ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i n=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        (( inc[i] = inc[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        (( dec[i] = dec[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    (( max = max > inc[i] + dec[i] - arr[i] ? max : inc[i] + dec[i] - arr[i] ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i len=${#arr[@]}\n\n    for ((i=0; i<len; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((arr[i] > arr[j])); then\n                inc[i]=$((inc[i] + inc[j]))\n            fi\n        done\n    done\n\n    for ((i=len-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=len-1; j>i; j--)); do\n            if ((arr[i] > arr[j])); then\n                dec[i]=$((dec[i] + dec[j]))\n            fi\n        done\n    done\n\n    for ((i=0; i<len; i++)); do\n        if ((inc[i] + dec[i] > max)); then\n            max=$((inc[i] + dec[i]))\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j]) && ((inc[i] < inc[j] + arr[i]))); then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[i] > arr[j]) && ((dec[i] < dec[j] + arr[i]))); then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=$((inc[i] + dec[i] - arr[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not found\\n/tmp/tmpii2541hx.sh: line 13: arr[i]: command not f",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j]<arr[i] && inc[j]+arr[i]>inc[i])); then\n        inc[i]=$((inc[j]+arr[i]))\n      fi\n    done\n  done\n  for ((i=len-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if ((arr[j]<arr[i] && dec[j]+arr[i]>dec[i])); then\n        dec[i]=$((dec[j]+arr[i]))\n      fi\n    done\n  done\n  for ((i=0; i<len; i++)); do\n    if ((inc[i]+dec[i]>max)); then\n      max=$((inc[i]+dec[i]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc_sum=(${arr[0]})\n  local -a dec_sum=(${arr[-1]})\n  local -i max_sum=${arr[0]}\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i l=1\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    inc[$i]=${arr[$i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[$j] < arr[$i] && inc[$j] + arr[$i] > inc[$i])); then\n        inc[$i]=$((inc[$j] + arr[$i]))\n      fi\n    done\n  done\n  for ((i=len-1; i>=0; i--)); do\n    dec[$i]=${arr[$i]}\n    for ((j=len-1; j>i; j--)); do\n      if ((arr[$j] < arr[$i] && dec[$j] + arr[$i] > dec[$i])); then\n        dec[$i]=$((dec[$j] + arr[$i]))\n      fi\n    done\n  done\n  for ((i=0; i<len; i++)); do\n    if ((inc[$i] + dec[$i] - arr[$i] > max)); then\n      max=$((inc[$i] + dec[$i] - arr[$i]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[0]})\n    local -i max=${arr[0]}\n    local -i sum=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        dec[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                inc[i]=$((inc[i] + inc[j]))\n            fi\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                dec[i]=$((dec[i] + dec[j]))\n            fi\n        done\n        sum=$((inc[i] + dec[i] - arr[i]))\n        if [[ $sum -gt $max ]]; then\n            max=$sum\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local max=0\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n      if ((arr[i] < arr[j])); then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n    if ((inc[i] > max)); then\n      max=${inc[i]}\n    fi\n    if ((dec[i] > max)); then\n      max=${dec[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local i=0\n  local j=0\n  local k=0\n  local sum=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        sum=$((inc[j] + arr[i]))\n        if [[ $sum -gt ${inc[i]} ]]; then\n          inc[i]=$sum\n        fi\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        sum=$((dec[j] + arr[i]))\n        if [[ $sum -gt ${dec[i]} ]]; then\n          dec[i]=$sum\n        fi\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$((inc[i] + dec[i] - arr[i]))\n    if [[ $sum -gt $max ]]; then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc[i]=0\n        dec[i]=0\n        for ((j=0; j<i; j++)); do\n            if ((arr[i] > arr[j])); then\n                inc[i]=$((inc[i] > inc[j] + arr[i] ? inc[i] : inc[j] + arr[i]))\n            fi\n            if ((arr[i] < arr[j])); then\n                dec[i]=$((dec[i] > dec[j] + arr[i] ? dec[i] : dec[j] + arr[i]))\n            fi\n        done\n        max=$((max > inc[i] + dec[i] - arr[i] ? max : inc[i] + dec[i] - arr[i]))\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  while ((i < ${#arr[@]})); do\n    inc[i]=${arr[i]}\n    dec[j]=${arr[j]}\n    if ((inc[i-1] > inc[i])); then\n      inc[i]=inc[i-1]\n    fi\n    if ((dec[j+1] > dec[j])); then\n      dec[j]=dec[j+1]\n    fi\n    if ((inc[i]+dec[j] > max)); then\n      max=inc[i]+dec[j]\n    fi\n    ((i++))\n    ((j--))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmprma2yc_a.sh: line 18: j+1: expression recursion level exceeded (error token is \"j+1\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local max=${arr[0]}\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i n=${#arr[@]}\n  while (( i < n )); do\n    if (( arr[i] > max )); then\n      max=${arr[i]}\n    fi\n    if (( arr[i] > inc[j-1] )); then\n      inc[j]=${arr[i]}\n      (( j++ ))\n    else\n      inc[j-1]=${arr[i]}\n    fi\n    if (( arr[n-i] > dec[k-1] )); then\n      dec[k]=${arr[n-i]}\n      (( k++ ))\n    else\n      dec[k-1]=${arr[n-i]}\n    fi\n    (( i++ ))\n  done\n  local -i sum=0\n  local -i l=${#inc[@]}\n  local -i m=${#dec[@]}\n  for (( i=0; i<l; i++ )); do\n    for (( j=0; j<m; j++ )); do\n      if (( inc[i] == dec[j] )); then\n        (( sum += inc[i] ))\n      fi\n    done\n  done\n  echo $sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max=0\n\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt ${inc[-1]} ]; then\n      inc+=(${arr[$i]})\n    else\n      inc[-1]=${arr[$i]}\n    fi\n\n    if [ ${arr[$i]} -gt ${dec[0]} ]; then\n      dec=(${arr[$i]} ${dec[@]})\n    else\n      dec[0]=${arr[$i]}\n    fi\n\n    if [ ${inc[-1]} -gt $max_inc ]; then\n      max_inc=${inc[-1]}\n    fi\n\n    if [ ${dec[0]} -gt $max_dec ]; then\n      max_dec=${dec[0]}\n    fi\n\n    i=$((i + 1))\n  done\n\n  while [ $j -lt ${#dec[@]} ]; do\n    if [ ${dec[$j]} -gt $max_dec ]; then\n      max_dec=${dec[$j]}\n    fi\n\n    j=$((j + 1))\n  done\n\n  max=$((max_inc + max_dec))\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n\n  while [[ $i -lt ${#arr[@]} ]]; do\n    if [[ ${arr[$i]} -gt ${inc[-1]} ]]; then\n      inc+=(${arr[$i]})\n    else\n      inc[-1]=${arr[$i]}\n    fi\n    if [[ ${arr[$j]} -gt ${dec[-1]} ]]; then\n      dec+=(${arr[$j]})\n    else\n      dec[-1]=${arr[$j]}\n    fi\n    ((i++))\n    ((j--))\n  done\n\n  for ((i=0; i<${#inc[@]}; i++)); do\n    for ((j=0; j<${#dec[@]}; j++)); do\n      if [[ $i -eq $j ]]; then\n        continue\n      fi\n      if [[ ${inc[$i]} -eq ${dec[$j]} ]]; then\n        continue\n      fi\n      if [[ ${inc[$i]} -gt ${dec[$j]} ]]; then\n        continue\n      fi\n      if [[ $max_sum -lt ${inc[$i]}+${dec[$j]} ]]; then\n        max_sum=${inc[$i]}+${dec[$j]}\n      fi\n    done\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=$(( ${#arr[@]} - 2 ))\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n\n  while (( i < ${#arr[@]} )); do\n    inc[i]=${arr[i]}\n    dec[j]=${arr[j]}\n    (( i++ ))\n    (( j-- ))\n  done\n\n  for (( i=1; i < ${#arr[@]}; i++ )); do\n    for (( j=0; j < i; j++ )); do\n      if (( arr[j] < arr[i] )); then\n        (( inc[i] += inc[j] ))\n      fi\n    done\n  done\n\n  for (( i=${#arr[@]} - 2; i >= 0; i-- )); do\n    for (( j=${#arr[@]} - 1; j > i; j-- )); do\n      if (( arr[j] < arr[i] )); then\n        (( dec[i] += dec[j] ))\n      fi\n    done\n  done\n\n  for (( i=0; i < ${#arr[@]}; i++ )); do\n    if (( inc[i] > max_inc )); then\n      max_inc=${inc[i]}\n    fi\n    if (( dec[i] > max_dec )); then\n      max_dec=${dec[i]}\n    fi\n  done\n\n  (( max_sum = max_inc + max_dec - arr[0] - arr[-1] ))\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n    local i=0\n\n    inc[0]=${arr[0]}\n    dec[0]=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        dec[i]=${arr[i]}\n\n        for ((j=0; j<i; j++)); do\n            if [ ${arr[i]} -gt ${arr[j]} ]; then\n                inc[i]=$(( inc[i] + inc[j] ))\n            fi\n\n            if [ ${arr[i]} -lt ${arr[j]} ]; then\n                dec[i]=$(( dec[i] + dec[j] ))\n            fi\n        done\n\n        if [ ${inc[i]} -gt $max ]; then\n            max=${inc[i]}\n        fi\n\n        if [ ${dec[i]} -gt $max ]; then\n            max=${dec[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=dec[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=${inc[i]}+${dec[i]}-${arr[i]}\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmppk3edbvf.sh: line 17: j: expression recursion level exceeded (error token is \"j\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc[i]=$(( inc[i] + inc[j] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        dec[i]=$(( dec[i] + dec[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( inc[i] + dec[i] - arr[i] > max )); then\n      max=$(( inc[i] + dec[i] - arr[i] ))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum\n  local -a dec_sum\n  local -i max_sum=0\n  local -i i\n  local -i j\n  local -i len=${#arr[@]}\n\n  inc_sum[0]=${arr[0]}\n  dec_sum[len-1]=${arr[len-1]}\n\n  for ((i=1; i<len; i++)); do\n    inc_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[i] > arr[j] )); then\n        inc_sum[i]=$(( inc_sum[i] + inc_sum[j] ))\n      fi\n    done\n  done\n\n  for ((i=len-2; i>=0; i--)); do\n    dec_sum[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if (( arr[i] > arr[j] )); then\n        dec_sum[i]=$(( dec_sum[i] + dec_sum[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    if (( inc_sum[i] + dec_sum[i] > max_sum )); then\n      max_sum=$(( inc_sum[i] + dec_sum[i] ))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpql778ux8.sh: line 36: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[0]})\n    local -i i=1\n    local -i j=1\n    local -i k=1\n    local -i max=${arr[0]}\n    local -i sum=0\n\n    while [ $i -lt ${#arr[@]} ]; do\n        if [ ${arr[$i]} -gt ${arr[$((i-1))]} ]; then\n            inc[$j]=${arr[$i]}\n            ((j++))\n        else\n            inc[$j]=${arr[$((i-1))]}\n            ((j++))\n            break\n        fi\n        ((i++))\n    done\n\n    while [ $i -lt ${#arr[@]} ]; do\n        if [ ${arr[$i]} -lt ${arr[$((i-1))]} ]; then\n            dec[$k]=${arr[$i]}\n            ((k++))\n        else\n            dec[$k]=${arr[$((i-1))]}\n            ((k++))\n            break\n        fi\n        ((i++))\n    done\n\n    while [ $i -lt ${#arr[@]} ]; do\n        if [ ${arr[$i]} -gt ${arr[$((i-1))]} ]; then\n            inc[$j]=${arr[$i]}\n            ((j++))\n        else\n            inc[$j]=${arr[$((i-1))]}\n            ((j++))\n            break\n        fi\n        ((i++))\n    done\n\n    while [ $i -lt ${#arr[@]} ]; do\n        if [ ${arr[$i]} -lt ${arr[$((i-1))]} ]; then\n            dec[$k]=${arr[$i]}\n            ((k++))\n        else\n            dec[$k]=${arr[$((i-1))]}\n            ((k++))\n            break\n        fi\n        ((i++))\n    done\n\n    for ((i=0; i<${#inc[@]}; i++)); do\n        for ((j=i; j<${\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpz60fjo9t.sh: line 64: unexpected EOF while looking for matching `)'\\n/tmp/tmpz60fjo9t.sh: line 79: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n    local sum=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((${arr[j]} < ${arr[i]})); then\n                inc[i]=$((inc[i] + inc[j]))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-1; i>=0; i--)); do\n        dec[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((${arr[j]} < ${arr[i]})); then\n                dec[i]=$((dec[i] + dec[j]))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        sum=$((inc[i] + dec[i] - arr[i]))\n        if ((sum > max)); then\n            max=$sum\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=(\"$@\")\n    local -a inc=()\n    local -a dec=()\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    inc[0]=${arr[0]}\n    dec[0]=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc[i]=${arr[i]}\n        dec[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                inc[i]=$((inc[i] + inc[j]))\n            fi\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                dec[i]=$((dec[i] + dec[j]))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${inc[i]} -gt $max ]]; then\n            max=${inc[i]}\n        fi\n        if [[ ${dec[i]} -gt $max ]]; then\n            max=${dec[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpuig2zxew.sh: line 30: [[: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n/tmp/tmpuig2zxew.sh: line 33: [[: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i n=${#arr[@]}\n  local -i i=1\n  local -i j=0\n  local -i k=0\n  local -i max=0\n  local -i sum=0\n\n  for ((i=1; i<n; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j]) && ((inc[i] < inc[j] + arr[i]))); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=n-2; i>=0; i--)); do\n    for ((k=n-1; k>i; k--)); do\n      if ((arr[i] > arr[k]) && ((dec[i] < dec[k] + arr[i]))); then\n        dec[i]=dec[k]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    sum=inc[i]+dec[i]-arr[i]\n    if ((sum > max)); then\n      max=sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not found\\n/tmp/tmp75_8r2ap.sh: line 18: arr[i]: command not f",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > inc[-1] )); then\n      inc+=(${arr[i]})\n    else\n      inc[-1]=${arr[i]}\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > dec[-1] )); then\n      dec+=(${arr[j]})\n    else\n      dec[-1]=${arr[j]}\n    fi\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    (( max < inc[i] + dec[i] )) && max=${inc[i]}+${dec[i]}\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=${arr[0]}\n  local -i sum=0\n\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt ${inc[$j-1]} ]; then\n      inc[$j]=${arr[$i]}\n      j=$j+1\n    else\n      inc[$j]=${inc[$j-1]}\n    fi\n    i=$i+1\n  done\n\n  while [ $k -lt ${#arr[@]} ]; do\n    if [ ${arr[$k]} -gt ${dec[$j-1]} ]; then\n      dec[$j]=${arr[$k]}\n      j=$j+1\n    else\n      dec[$j]=${dec[$j-1]}\n    fi\n    k=$k+1\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    sum=${inc[$i]}+${dec[$i]}\n    if [ $sum -gt $max ]; then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpypgbg95f.sh: line 26: [: 15: unary operator expected\\n/tmp/tmpypgbg95f.sh: line 26: [: 51: unary operator expected\\n/tmp/tmpypgbg95f.sh: line 26: [: 45: unary operator expected\\n/tmp/tmpypgbg95f.sh: line 26: [: 33: unary operator expected\\n/tmp/tmpypgbg95f.sh: line 26: [: 100: unary operator expected\\n/tmp/tmpypgbg95f.sh: line 26: [: 12: unary operator expected\\n/tmp/tmpypgbg95f.sh: line 26: [: 18: unary operator expected\\n/tmp/tmpypgbg95f.sh: line 26: [: 9: unary operator expected\\n/tmp/tmpypgbg95f.sh: line 36: 15+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc_sum=(0)\n    local -a dec_sum=(0)\n    local max_sum=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc_sum[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i] && inc_sum[j] + arr[i] > inc_sum[i])); then\n                inc_sum[i]=$((inc_sum[j] + arr[i]))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-2; i>=0; i--)); do\n        dec_sum[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((arr[j] < arr[i] && dec_sum[j] + arr[i] > dec_sum[i])); then\n                dec_sum[i]=$((dec_sum[j] + arr[i]))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((inc_sum[i] + dec_sum[i] - arr[i] > max_sum)); then\n            max_sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc\n  local -a dec\n  local -i i\n  local -i j\n  local -i max_inc\n  local -i max_dec\n  local -i max_sum\n\n  inc[0]=${arr[0]}\n  dec[0]=${arr[0]}\n  max_inc=${arr[0]}\n  max_dec=${arr[0]}\n  max_sum=${arr[0]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        if [[ ${inc[j]} -gt ${inc[i]} ]]; then\n          inc[i]=${inc[j]}\n        fi\n      fi\n      if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n        if [[ ${dec[j]} -gt ${dec[i]} ]]; then\n          dec[i]=${dec[j]}\n        fi\n      fi\n    done\n    inc[i]=$((inc[i]+arr[i]))\n    dec[i]=$((dec[i]+arr[i]))\n    if [[ ${inc[i]} -gt $max_inc ]]; then\n      max_inc=${inc[i]}\n    fi\n    if [[ ${dec[i]} -gt $max_dec ]]; then\n      max_dec=${dec[i]}\n    fi\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ $((max_inc+max_dec-arr[i])) -gt $max_sum ]]; then\n      max_sum=$((max_inc+max_dec-arr[i]))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=${arr[0]}\n\n  while [[ $i -lt ${#arr[@]} ]]; do\n    if [[ ${arr[$i]} -gt ${inc[$j-1]} ]]; then\n      inc[$j]=${arr[$i]}\n      ((j++))\n    else\n      inc[$j]=${inc[$j-1]}\n    fi\n    ((i++))\n  done\n\n  while [[ $k -lt ${#arr[@]} ]]; do\n    if [[ ${arr[$k]} -gt ${dec[$j-1]} ]]; then\n      dec[$j]=${arr[$k]}\n      ((j++))\n    else\n      dec[$j]=${dec[$j-1]}\n    fi\n    ((k++))\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${inc[$i]} + ${dec[$i]} -gt $max ]]; then\n      max=$((inc[$i] + dec[$i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmporjbnqeb.sh: line 35: conditional binary operator expected\\n/tmp/tmporjbnqeb.sh: line 35: syntax error near `+'\\n/tmp/tmporjbnqeb.sh: line 35: `    if [[ ${inc[$i]} + ${dec[$i]} -gt $max ]]; then'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a array=($1)\n    local -a lis=(0)\n    local -a lds=(0)\n    local -i max_sum=0\n    local -i i=0\n    local -i j=0\n    local -i n=${#array[@]}\n\n    for ((i=0; i<n; i++)); do\n        lis[i]=${array[i]}\n        for ((j=0; j<i; j++)); do\n            if [[ ${array[j]} -lt ${array[i]} ]]; then\n                if [[ ${lis[i]} -lt ${lis[j]} + ${array[i]} ]]; then\n                    lis[i]=${lis[j]} + ${array[i]}\n                fi\n            fi\n        done\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        lds[i]=${array[i]}\n        for ((j=n-1; j>i; j--)); do\n            if [[ ${array[j]} -lt ${array[i]} ]]; then\n                if [[ ${lds[i]} -lt ${lds[j]} + ${array[i]} ]]; then\n                    lds[i]=${lds[j]} + ${array[i]}\n                fi\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        if [[ ${lis[i]} + ${lds[i]} -gt $max_sum ]]; then\n            max_sum=${lis[i]} + ${lds[i]}\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp84zn7ecb.sh: line 18: syntax error in conditional expression\\n/tmp/tmp84zn7ecb.sh: line 18: syntax error near `+'\\n/tmp/tmp84zn7ecb.sh: line 18: `                if [[ ${lis[i]} -lt ${lis[j]} + ${array[i]} ]]; then'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc_sum=(${arr[0]})\n  local -a dec_sum=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_sum=0\n  local -i max_inc_sum=0\n  local -i max_dec_sum=0\n\n  while (( i < ${#arr[@]} )); do\n    inc_sum[i]=$(( inc_sum[i-1] > arr[i] ? inc_sum[i-1] : arr[i] ))\n    dec_sum[j]=$(( dec_sum[j+1] > arr[j] ? dec_sum[j+1] : arr[j] ))\n    (( i++ ))\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    max_inc_sum=$(( inc_sum[i] > max_inc_sum ? inc_sum[i] : max_inc_sum ))\n    max_dec_sum=$(( dec_sum[i] > max_dec_sum ? dec_sum[i] : max_dec_sum ))\n    max_sum=$(( max_inc_sum + max_dec_sum - arr[i] > max_sum ? max_inc_sum + max_dec_sum - arr[i] : max_sum ))\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i max=${arr[0]}\n  local -i i=1\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        if ((inc[i] < inc[j] + arr[i])); then\n          inc[i]=${inc[j]}+${arr[i]}\n        fi\n      fi\n      if ((arr[i] < arr[j])); then\n        if ((dec[i] < dec[j] + arr[i])); then\n          dec[i]=${dec[j]}+${arr[i]}\n        fi\n      fi\n    done\n    if ((max < inc[i])); then\n      max=${inc[i]}\n    fi\n    if ((max < dec[i])); then\n      max=${dec[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr\n  local -i i j k l m n\n  local -i max_sum=0\n  local -i sum=0\n  arr=($1)\n  n=${#arr[@]}\n  for ((i=0; i<n; i++)); do\n    for ((j=i; j<n; j++)); do\n      sum=0\n      for ((k=i; k<=j; k++)); do\n        sum+=${arr[k]}\n      done\n      if ((sum>max_sum)); then\n        max_sum=sum\n      fi\n    done\n  done\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local max=0\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n      if ((arr[i] < arr[j])); then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n    max=$((max > inc[i] ? max : inc[i]))\n    max=$((max > dec[i] ? max : dec[i]))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc_sum=(0)\n    local -a dec_sum=(0)\n    local max_sum=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc_sum[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i] && inc_sum[i] < inc_sum[j] + arr[i])); then\n                inc_sum[i]=$((inc_sum[j] + arr[i]))\n            fi\n        done\n    done\n\n    for ((i=${#arr[@]}-2; i>=0; i--)); do\n        dec_sum[i]=${arr[i]}\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((arr[j] < arr[i] && dec_sum[i] < dec_sum[j] + arr[i])); then\n                dec_sum[i]=$((dec_sum[j] + arr[i]))\n            fi\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((max_sum < inc_sum[i] + dec_sum[i] - arr[i])); then\n            max_sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a lis=(${arr[0]})\n    local -a lds=(${arr[0]})\n    local max=${arr[0]}\n    for ((i=1; i<${#arr[@]}; i++)); do\n        lis[i]=${arr[i]}\n        lds[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[i] > arr[j] )); then\n                lis[i]=$(( lis[i] > lis[j] + arr[i] ? lis[i] : lis[j] + arr[i] ))\n            fi\n            if (( arr[i] < arr[j] )); then\n                lds[i]=$(( lds[i] > lds[j] + arr[i] ? lds[i] : lds[j] + arr[i] ))\n            fi\n        done\n        max=$(( max > lis[i] ? max : lis[i] ))\n        max=$(( max > lds[i] ? max : lds[i] ))\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local max=0\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[j] > max)); then\n        max=${inc[j]}\n      fi\n    done\n    inc[i]=$((arr[i] + max))\n  done\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    local max=0\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[j] > max)); then\n        max=${dec[j]}\n      fi\n    done\n    dec[i]=$((arr[i] + max))\n  done\n  local max=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] - arr[i] > max)); then\n      max=$((inc[i] + dec[i] - arr[i]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        (( inc[i] = inc[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=len-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        (( dec[i] = dec[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    (( max = inc[i] + dec[i] - arr[i] ))\n    if (( max > max_sum )); then\n      max_sum=$max\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum=()\n  local -a dec_sum=()\n  local max_sum=0\n\n  inc_sum[0]=${arr[0]}\n  dec_sum[${#arr[@]}-1]=${arr[${#arr[@]}-1]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[$i]=${arr[$i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[$i] > arr[$j] )); then\n        if (( inc_sum[$i] < inc_sum[$j] + arr[$i] )); then\n          inc_sum[$i]=$(( inc_sum[$j] + arr[$i] ))\n        fi\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec_sum[$i]=${arr[$i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[$i] > arr[$j] )); then\n        if (( dec_sum[$i] < dec_sum[$j] + arr[$i] )); then\n          dec_sum[$i]=$(( dec_sum[$j] + arr[$i] ))\n        fi\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( max_sum < inc_sum[$i] + dec_sum[$i] - arr[$i] )); then\n      max_sum=$(( inc_sum[$i] + dec_sum[$i] - arr[$i] ))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp0ufqe5z7.sh: line 37: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=dec[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=inc[i]+dec[i]-arr[i]\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmptprlmy03.sh: line 16: j: expression recursion level exceeded (error token is \"j\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=0\n    local -i j=0\n    local -i max_inc=0\n    local -i max_dec=0\n    local -i max_sum=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        max_inc=0\n        for ((j=0; j<i; j++)); do\n            if ((arr[i] > arr[j] && inc[j] > max_inc)); then\n                max_inc=inc[j]\n            fi\n        done\n        inc[i]=$((arr[i]+max_inc))\n    done\n\n    for ((i=${#arr[@]}-2; i>=0; i--)); do\n        max_dec=0\n        for ((j=${#arr[@]}-1; j>i; j--)); do\n            if ((arr[i] > arr[j] && dec[j] > max_dec)); then\n                max_dec=dec[j]\n            fi\n        done\n        dec[i]=$((arr[i]+max_dec))\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((inc[i]+dec[i]-arr[i] > max_sum)); then\n            max_sum=inc[i]+dec[i]-arr[i]\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc\n  local -a dec\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n\n  inc[0]=${arr[0]}\n  dec[0]=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        if [[ ${inc[i]} -lt $(( ${inc[j]} + ${arr[i]} )) ]]; then\n          inc[i]=$(( ${inc[j]} + ${arr[i]} ))\n        fi\n      fi\n      if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n        if [[ ${dec[i]} -lt $(( ${dec[j]} + ${arr[i]} )) ]]; then\n          dec[i]=$(( ${dec[j]} + ${arr[i]} ))\n        fi\n      fi\n    done\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$(( ${inc[i]} + ${dec[i]} - ${arr[i]} ))\n    if [[ $sum -gt $max ]]; then\n      max=$sum\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc_sum=(${arr[0]})\n    local -a dec_sum=(${arr[-1]})\n    local -i i\n    local -i j\n    local -i max_sum=${arr[0]}\n    local -i inc_sum_i\n    local -i dec_sum_i\n    local -i inc_sum_j\n    local -i dec_sum_j\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        inc_sum_i=${inc_sum[i-1]}\n        dec_sum_i=${dec_sum[i-1]}\n        inc_sum[i]=${arr[i]}\n        dec_sum[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            inc_sum_j=${inc_sum[j]}\n            dec_sum_j=${dec_sum[j]}\n            if ((arr[i] > arr[j])) && ((inc_sum_i < inc_sum_j + arr[i])); then\n                inc_sum[i]=$((inc_sum_j + arr[i]))\n            fi\n            if ((arr[i] < arr[j])) && ((dec_sum_i < dec_sum_j + arr[i])); then\n                dec_sum[i]=$((dec_sum_j + arr[i]))\n            fi\n        done\n        if ((max_sum < inc_sum[i] + dec_sum[i] - arr[i])); then\n            max_sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n        fi\n    done\n\n    echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc_sum=(${arr[0]})\n  local -a dec_sum=(${arr[0]})\n  local -i i=1\n  local -i max_sum=${arr[0]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[i]=${arr[i]}\n    dec_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        inc_sum[i]=$(( inc_sum[i] + inc_sum[j] ))\n      fi\n      if [[ ${arr[j]} -gt ${arr[i]} ]]; then\n        dec_sum[i]=$(( dec_sum[i] + dec_sum[j] ))\n      fi\n    done\n    if [[ ${inc_sum[i]} -gt ${dec_sum[i]} ]]; then\n      max_sum=$(( max_sum > inc_sum[i] ? max_sum : inc_sum[i] ))\n    else\n      max_sum=$(( max_sum > dec_sum[i] ? max_sum : dec_sum[i] ))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=0\n  local -i sum=0\n  local -i len=${#arr[@]}\n\n  while [ $i -lt $len ]; do\n    if [ ${arr[$i]} -gt ${inc[$j-1]} ]; then\n      inc[$j]=${arr[$i]}\n      ((j++))\n    fi\n    ((i++))\n  done\n\n  while [ $k -lt $len ]; do\n    if [ ${arr[$k]} -gt ${dec[$j-1]} ]; then\n      dec[$j]=${arr[$k]}\n      ((j++))\n    fi\n    ((k++))\n  done\n\n  for ((i=0; i<j; i++)); do\n    sum=${inc[$i]}+${dec[$i]}\n    if [ $sum -gt $max ]; then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpq4036fl8.sh: line 25: [: 15: unary operator expected\\n/tmp/tmpq4036fl8.sh: line 25: [: 51: unary operator expected\\n/tmp/tmpq4036fl8.sh: line 25: [: 45: unary operator expected\\n/tmp/tmpq4036fl8.sh: line 25: [: 33: unary operator expected\\n/tmp/tmpq4036fl8.sh: line 25: [: 100: unary operator expected\\n/tmp/tmpq4036fl8.sh: line 25: [: 12: unary operator expected\\n/tmp/tmpq4036fl8.sh: line 25: [: 18: unary operator expected\\n/tmp/tmpq4036fl8.sh: line 25: [: 9: unary operator expected\\n/tmp/tmpq4036fl8.sh: line 33: 15+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc\n  local -a dec\n  local -i i\n  local -i j\n  local -i max=0\n  local -i sum=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        inc[i]=$((inc[i] + inc[j]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i])); then\n        dec[i]=$((dec[i] + dec[j]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$((inc[i] + dec[i] - arr[i]))\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n  local -i sum=0\n\n  while [[ $i -lt ${#arr[@]} ]]; do\n    inc[$i]=$(( ${arr[$i]} > ${inc[$((i-1))]} ? ${arr[$i]} : ${inc[$((i-1))]} ))\n    i=$((i+1))\n  done\n\n  while [[ $j -ge 0 ]]; do\n    dec[$j]=$(( ${arr[$j]} > ${dec[$((j+1))]} ? ${arr[$j]} : ${dec[$((j+1))]} ))\n    j=$((j-1))\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$(( ${inc[$i]} + ${dec[$i]} - ${arr[$i]} ))\n    max=$(( $sum > $max ? $sum : $max ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpvy0mebxk.sh: line 20: 18 >  ? 18 :  : syntax error: operand expected (error token is \"? 18 :  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_arr\n  local -a dec_arr\n  local -i i=0\n  local -i j=0\n  local -i max_sum=0\n  local -i curr_sum=0\n  local -i inc_sum=0\n  local -i dec_sum=0\n  local -i len=${#arr[@]}\n\n  inc_arr[0]=${arr[0]}\n  dec_arr[0]=${arr[0]}\n\n  for ((i=1; i<len; i++)); do\n    inc_arr[i]=${arr[i]}\n    dec_arr[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n        inc_arr[i]=$(( inc_arr[i] + inc_arr[j] ))\n      fi\n      if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n        dec_arr[i]=$(( dec_arr[i] + dec_arr[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    inc_sum=${inc_arr[i]}\n    dec_sum=${dec_arr[i]}\n    for ((j=0; j<len; j++)); do\n      if [[ $i -ne $j ]]; then\n        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n          dec_sum=$(( dec_sum - inc_arr[j] ))\n        fi\n        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n          inc_sum=$(( inc_sum - dec_arr[j] ))\n        fi\n      fi\n    done\n    curr_sum=$(( inc_sum + dec_sum - arr[i] ))\n    if [[ $curr_sum -gt $max_sum ]]; then\n      max_sum=$curr_sum\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp79n259_b.sh: line 34: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local max=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        inc[i]=$(( inc[i] + inc[j] ))\n      fi\n      if (( arr[j] > arr[i] )); then\n        dec[i]=$(( dec[i] + dec[j] ))\n      fi\n    done\n    if (( inc[i] > max )); then\n      max=${inc[i]}\n    fi\n    if (( dec[i] > max )); then\n      max=${dec[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=${arr[0]}\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > arr[i-1] )); then\n      inc[j]=${arr[i]}\n      (( j++ ))\n    else\n      inc[j]=${arr[i-1]}\n      (( j++ ))\n    fi\n    (( i++ ))\n  done\n\n  (( i-- ))\n  while (( i > 0 )); do\n    if (( arr[i] > arr[i-1] )); then\n      dec[k]=${arr[i-1]}\n      (( k++ ))\n    else\n      dec[k]=${arr[i]}\n      (( k++ ))\n    fi\n    (( i-- ))\n  done\n\n  for (( i=0; i<${#inc[@]}; i++ )); do\n    for (( j=0; j<${#dec[@]}; j++ )); do\n      (( max < inc[i] + dec[j] )) && max=$(( inc[i] + dec[j] ))\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > inc[-1] )); then\n      inc+=(${arr[i]})\n    else\n      inc[-1]=${arr[i]}\n    fi\n    if (( arr[j] > dec[-1] )); then\n      dec+=(${arr[j]})\n    else\n      dec[-1]=${arr[j]}\n    fi\n    (( i++ ))\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    (( max = inc[i] + dec[i] > max ? inc[i] + dec[i] : max ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum=(0)\n  local -a dec_sum=(0)\n  local -i max_sum=0\n  local -i i=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[i]=0\n    dec_sum[i]=0\n    local -i j=0\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])) && ((inc_sum[j] > inc_sum[i])); then\n        inc_sum[i]=${inc_sum[j]}\n      fi\n    done\n    inc_sum[i]=$((inc_sum[i] + arr[i]))\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    local -i j=0\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i])) && ((dec_sum[j] > dec_sum[i])); then\n        dec_sum[i]=${dec_sum[j]}\n      fi\n    done\n    dec_sum[i]=$((dec_sum[i] + arr[i]))\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    local -i sum=$((inc_sum[i] + dec_sum[i] - arr[i]))\n    if ((sum > max_sum)); then\n      max_sum=$sum\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpfkkt7xt8.sh: line 35: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i inc_max=0\n  local -i dec_max=0\n\n  for (( i = 0; i < ${#arr[@]}; i++ )); do\n    inc_max=0\n    for (( j = 0; j < i; j++ )); do\n      if (( arr[j] < arr[i] )); then\n        inc_max=$(( inc[j] > inc_max ? inc[j] : inc_max ))\n      fi\n    done\n    inc[i]=$(( inc_max + arr[i] ))\n  done\n\n  for (( i = ${#arr[@]} - 1; i >= 0; i-- )); do\n    dec_max=0\n    for (( j = ${#arr[@]} - 1; j > i; j-- )); do\n      if (( arr[j] < arr[i] )); then\n        dec_max=$(( dec[j] > dec_max ? dec[j] : dec_max ))\n      fi\n    done\n    dec[i]=$(( dec_max + arr[i] ))\n  done\n\n  for (( i = 0; i < ${#arr[@]}; i++ )); do\n    max=$(( inc[i] + dec[i] - arr[i] > max ? inc[i] + dec[i] - arr[i] : max ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a a=($1)\n  local -a l=(0)\n  local -a r=(0)\n  local i j\n  for ((i=1; i<${#a[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((a[j] < a[i])) && ((l[i] < l[j] + a[i])); then\n        l[i]=${l[j]}+${a[i]}\n      fi\n    done\n  done\n  for ((i=${#a[@]}-2; i>=0; i--)); do\n    for ((j=${#a[@]}-1; j>i; j--)); do\n      if ((a[j] < a[i])) && ((r[i] < r[j] + a[i])); then\n        r[i]=${r[j]}+${a[i]}\n      fi\n    done\n  done\n  local max=0\n  for ((i=0; i<${#a[@]}; i++)); do\n    ((max < l[i] + r[i] - a[i])) && max=${l[i]}+${r[i]}-${a[i]}\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -a d=($1)\n  local -a e=($1)\n  local -a f=($1)\n  local -a g=($1)\n  local -a h=($1)\n  local -a i=($1)\n  local -a j=($1)\n  local -a k=($1)\n  local -a l=($1)\n  local -a m=($1)\n  local -a n=($1)\n  local -a o=($1)\n  local -a p=($1)\n  local -a q=($1)\n  local -a r=($1)\n  local -a s=($1)\n  local -a t=($1)\n  local -a u=($1)\n  local -a v=($1)\n  local -a w=($1)\n  local -a x=($1)\n  local -a y=($1)\n  local -a z=($1)\n  local -a aa=($1)\n  local -a ab=($1)\n  local -a ac=($1)\n  local -a ad=($1)\n  local -a ae=($1)\n  local -a af=($1)\n  local -a ag=($1)\n  local -a ah=($1)\n  local -a ai=($1)\n  local -a aj=($1)\n  local -a ak=($1)\n  local -a al=($1)\n  local -a am=($1)\n  local -a an=($1)\n  local -a ao=($1)\n  local -a ap=($1)\n  local -a aq=($1)\n  local -a ar=($1)\n  local -a as=($1)\n  local -a at=($1)\n  local -a au=($1)\n  local -a av=($1)\n  local -a aw=($1)\n  local -a ax=($1)\n  local -a ay\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i n=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[i] > arr[j])); then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] > max)); then\n      max=$((inc[i] + dec[i]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i sum=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        if ((inc[j] + arr[i] > inc[i])); then\n          inc[i]=inc[j]+arr[i]\n        fi\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i])); then\n        if ((dec[j] + arr[i] > dec[i])); then\n          dec[i]=dec[j]+arr[i]\n        fi\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] - arr[i] > max)); then\n      max=inc[i]+dec[i]-arr[i]\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpxmob838o.sh: line 17: j: expression recursion level exceeded (error token is \"j\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a lis=(${arr[0]})\n  local -a lds=(${arr[0]})\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    lis[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        if (( lis[i] < lis[j] + arr[i] )); then\n          lis[i]=${lis[j]}+${arr[i]}\n        fi\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    lds[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        if (( lds[i] < lds[j] + arr[i] )); then\n          lds[i]=${lds[j]}+${arr[i]}\n        fi\n      fi\n    done\n  done\n\n  local max=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( max < lis[i] + lds[i] - arr[i] )); then\n      max=${lis[i]}+${lds[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i max=${arr[0]}\n  local -i sum=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    dec[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        if [[ ${inc[j]} -gt ${inc[i]} ]]; then\n          inc[i]=${inc[j]}\n        fi\n      fi\n      if [[ ${arr[j]} -gt ${arr[i]} ]]; then\n        if [[ ${dec[j]} -gt ${dec[i]} ]]; then\n          dec[i]=${dec[j]}\n        fi\n      fi\n    done\n    inc[i]=$((inc[i] + arr[i]))\n    dec[i]=$((dec[i] + arr[i]))\n  done\n\n  for ((k=0; k<${#arr[@]}; k++)); do\n    sum=$((inc[k] + dec[k] - arr[k]))\n    if [[ $sum -gt $max ]]; then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc_sum=()\n  local -a dec_sum=()\n  local max_sum=0\n\n  inc_sum[0]=${arr[0]}\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc_sum[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[i] > arr[j] )); then\n        inc_sum[i]=$(( inc_sum[i] + inc_sum[j] ))\n      fi\n    done\n  done\n\n  dec_sum[${#arr[@]}-1]=${arr[${#arr[@]}-1]}\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec_sum[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[i] > arr[j] )); then\n        dec_sum[i]=$(( dec_sum[i] + dec_sum[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    max_sum=$(( max_sum > inc_sum[i] + dec_sum[i] - arr[i] ? max_sum : inc_sum[i] + dec_sum[i] - arr[i] ))\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpts5a3ooo.sh: line 32: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a lis=(0)\n  local -a lds=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    lis[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && lis[j] + arr[i] > lis[i])); then\n        lis[i]=$((lis[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    lds[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && lds[j] + arr[i] > lds[i])); then\n        lds[i]=$((lds[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((lis[i] + lds[i] - arr[i] > max)); then\n      max=$((lis[i] + lds[i] - arr[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a a=($1)\n    local -a inc=(0)\n    local -a dec=(0)\n    local max=0\n    local i\n    local j\n    for ((i=1; i<${#a[@]}; i++)); do\n        inc[$i]=0\n        dec[$i]=0\n        for ((j=0; j<i; j++)); do\n            if ((a[$i] > a[$j])); then\n                if ((inc[$j] > inc[$i])); then\n                    inc[$i]=${inc[$j]}\n                fi\n            fi\n            if ((a[$i] < a[$j])); then\n                if ((dec[$j] > dec[$i])); then\n                    dec[$i]=${dec[$j]}\n                fi\n            fi\n        done\n        inc[$i]=$((inc[$i] + a[$i]))\n        dec[$i]=$((dec[$i] + a[$i]))\n        if ((inc[$i] > max)); then\n            max=${inc[$i]}\n        fi\n        if ((dec[$i] > max)); then\n            max=${dec[$i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a array=($1)\n  local -a inc_sum\n  local -a dec_sum\n  local max_sum=0\n  local inc_sum_i=0\n  local dec_sum_i=0\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n\n  for (( i=0; i<${#array[@]}; i++ )); do\n    inc_sum[$i]=${array[$i]}\n    for (( j=0; j<$i; j++ )); do\n      if [[ ${array[$j]} -lt ${array[$i]} ]]; then\n        sum=$(( ${inc_sum[$j]} + ${array[$i]} ))\n        if [[ $sum -gt ${inc_sum[$i]} ]]; then\n          inc_sum[$i]=$sum\n        fi\n      fi\n    done\n  done\n\n  for (( i=${#array[@]}-1; i>=0; i-- )); do\n    dec_sum[$i]=${array[$i]}\n    for (( j=${#array[@]}-1; j>$i; j-- )); do\n      if [[ ${array[$j]} -lt ${array[$i]} ]]; then\n        sum=$(( ${dec_sum[$j]} + ${array[$i]} ))\n        if [[ $sum -gt ${dec_sum[$i]} ]]; then\n          dec_sum[$i]=$sum\n        fi\n      fi\n    done\n  done\n\n  for (( i=0; i<${#array[@]}; i++ )); do\n    sum=$(( ${inc_sum[$i]} + ${dec_sum[$i]} - ${array[$i]} ))\n    if [[ $sum -gt $max_sum ]]; then\n      max_sum=$sum\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a a=($1)\n  local -a l=(0)\n  local -a r=(0)\n  local -a s=(0)\n  local n=${#a[@]}\n  local i=1\n  local j=0\n  local max=0\n\n  while [ $i -lt $n ]; do\n    j=0\n    while [ $j -lt $i ]; do\n      if [ ${a[$j]} -lt ${a[$i]} ]; then\n        l[$i]=$((${l[$j]} + ${a[$i]}))\n      fi\n      j=$(($j + 1))\n    done\n    i=$(($i + 1))\n  done\n\n  i=$(($n - 2))\n  while [ $i -ge 0 ]; do\n    j=$(($n - 1))\n    while [ $j -gt $i ]; do\n      if [ ${a[$j]} -lt ${a[$i]} ]; then\n        r[$i]=$((${r[$j]} + ${a[$i]}))\n      fi\n      j=$(($j - 1))\n    done\n    i=$(($i - 1))\n  done\n\n  i=0\n  while [ $i -lt $n ]; do\n    s[$i]=$((${l[$i]} + ${r[$i]} - ${a[$i]}))\n    if [ ${s[$i]} -gt $max ]; then\n      max=${s[$i]}\n    fi\n    i=$(($i + 1))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local i=0\n  local j=0\n  local max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        (( inc[i] = inc[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[j] < arr[i] )); then\n        (( dec[i] = dec[j] + arr[i] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    (( max = inc[i] + dec[i] - arr[i] > max ? inc[i] + dec[i] - arr[i] : max ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[j] + arr[i] > inc[i])); then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[j] + arr[i] > dec[i])); then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((inc[i] + dec[i] - arr[i] > max)); then\n      max=$((inc[i] + dec[i] - arr[i]))\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a array=($1)\n  local -a left\n  local -a right\n  local max=0\n\n  # Find the max sum of increasing subsequence from left to right\n  for (( i=0; i<${#array[@]}; i++ )); do\n    local sum=0\n    for (( j=0; j<i; j++ )); do\n      if (( array[j] < array[i] )); then\n        (( sum = left[j] > sum ? left[j] : sum ))\n      fi\n    done\n    (( left[i] = array[i] + sum ))\n  done\n\n  # Find the max sum of increasing subsequence from right to left\n  for (( i=${#array[@]}-1; i>=0; i-- )); do\n    local sum=0\n    for (( j=${#array[@]}-1; j>i; j-- )); do\n      if (( array[j] < array[i] )); then\n        (( sum = right[j] > sum ? right[j] : sum ))\n      fi\n    done\n    (( right[i] = array[i] + sum ))\n  done\n\n  # Find the max sum of bitonic subsequence\n  for (( i=0; i<${#array[@]}; i++ )); do\n    (( max = left[i] + right[i] - array[i] > max ? left[i] + right[i] - array[i] : max ))\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -a sum=(${arr[0]})\n  local -i i=1\n  local -i j=1\n  local -i k=1\n  local -i n=${#arr[@]}\n\n  while (( i < n )); do\n    if (( arr[i] > inc[i-1] )); then\n      inc[i]=$(( inc[i-1] + arr[i] ))\n    else\n      inc[i]=${arr[i]}\n    fi\n    (( i++ ))\n  done\n\n  while (( j < n )); do\n    if (( arr[-j] > dec[-j+1] )); then\n      dec[-j]=$(( dec[-j+1] + arr[-j] ))\n    else\n      dec[-j]=${arr[-j]}\n    fi\n    (( j++ ))\n  done\n\n  while (( k < n )); do\n    sum[k]=$(( inc[k] + dec[k] - arr[k] ))\n    (( k++ ))\n  done\n\n  echo ${sum[@]} | tr ' ' '\\n' | sort -nr | head -n1\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp32bshvmw.sh: line 26: dec[-j]: bad array subscript\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=0\n  local -i max_dec=0\n  local -i max_sum=0\n  local -i sum_inc=0\n  local -i sum_dec=0\n  local -i sum=0\n\n  while (( i < ${#arr[@]} )); do\n    if (( arr[i] > arr[i-1] )); then\n      (( inc[i] = inc[i-1] + arr[i] ))\n      (( max_inc = inc[i] ))\n    else\n      (( inc[i] = arr[i] ))\n    fi\n    (( i++ ))\n  done\n\n  while (( j >= 0 )); do\n    if (( arr[j] > arr[j+1] )); then\n      (( dec[j] = dec[j+1] + arr[j] ))\n      (( max_dec = dec[j] ))\n    else\n      (( dec[j] = arr[j] ))\n    fi\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    (( sum_inc = inc[i] + dec[i] - arr[i] ))\n    (( sum_dec = inc[i-1] + dec[i+1] - arr[i] ))\n    (( sum = inc[i] + dec[i] ))\n    if (( sum_inc > max_sum )); then\n      (( max_sum = sum_inc ))\n    fi\n    if (( sum_dec > max_sum )); then\n      (( max_sum = sum_dec ))\n    fi\n    if (( sum > max_sum )); then\n      (( max_sum = sum ))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max=${arr[0]}\n  local -i sum=0\n  while ((i < ${#arr[@]})); do\n    if ((arr[i] > arr[i-1])); then\n      inc[i]=$((inc[i-1]+arr[i]))\n    else\n      inc[i]=${arr[i]}\n    fi\n    if ((arr[j] > arr[j+1])); then\n      dec[j]=$((dec[j+1]+arr[j]))\n    else\n      dec[j]=${arr[j]}\n    fi\n    ((i++, j--))\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$((inc[i]+dec[i]-arr[i]))\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local len=${#arr[@]}\n  for ((i=1; i<len; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        inc[i]=$((inc[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=len-2; i>=0; i--)); do\n    for ((j=len-1; j>i; j--)); do\n      if ((arr[i] > arr[j])); then\n        dec[i]=$((dec[j] + arr[i]))\n      fi\n    done\n  done\n  for ((i=0; i<len; i++)); do\n    if ((inc[i] + dec[i] > max)); then\n      max=$((inc[i] + dec[i]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n  local sum=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=0\n    dec[i]=0\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j]) && ((inc[i] < inc[j] + arr[i]))); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[i] > arr[j]) && ((dec[i] < dec[j] + arr[i]))); then\n        dec[i]=dec[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    sum=$((inc[i]+dec[i]-arr[i]))\n    if ((sum > max)); then\n      max=$sum\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not found\\n/tmp/tmpastzn6wm.sh: line 16: arr[i]: command not f",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=inc[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=dec[j]+arr[i]\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=inc[i] + dec[i] - arr[i]\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3dhamtnv.sh: line 17: j: expression recursion level exceeded (error token is \"j\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local -i i=1\n    local -i j=${#arr[@]}-2\n    local -i max=0\n\n    while (( i < ${#arr[@]} )); do\n        if (( arr[i] > inc[-1] )); then\n            inc+=(${arr[i]})\n        else\n            inc[-1]=${arr[i]}\n        fi\n        if (( arr[j] > dec[-1] )); then\n            dec+=(${arr[j]})\n        else\n            dec[-1]=${arr[j]}\n        fi\n        (( i++, j-- ))\n    done\n\n    for (( i=0; i < ${#arr[@]}; i++ )); do\n        local -i sum=$(( inc[i] + dec[i] - arr[i] ))\n        if (( sum > max )); then\n            max=$sum\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=1\n  local -i j=1\n  local -i max=0\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i n=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        ((inc[i] = inc[j] + arr[i] > inc[i] ? inc[j] + arr[i] : inc[i]))\n      fi\n    done\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=n-1; j>i; j--)); do\n      if ((arr[j] < arr[i])); then\n        ((dec[i] = dec[j] + arr[i] > dec[i] ? dec[j] + arr[i] : dec[i]))\n      fi\n    done\n  done\n\n  for ((i=0; i<n; i++)); do\n    ((max = inc[i] + dec[i] - arr[i] > max ? inc[i] + dec[i] - arr[i] : max))\n  done\n\n  echo \"$max\"\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpnuz30soh.sh: line 33: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc\n  local -a dec\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i len=${#arr[@]}\n\n  inc[0]=${arr[0]}\n  dec[len-1]=${arr[len-1]}\n\n  for ((i=1; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])) && ((inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=len-2; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if ((arr[j] < arr[i])) && ((dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<len; i++)); do\n    if ((inc[i] + dec[i] - arr[i] > max)); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpjgo3xofa.sh: line 36: ((: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=(\"$@\")\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        if [[ ${inc[j]} -gt ${inc[i]} ]]; then\n          inc[i]=${inc[j]}\n        fi\n      fi\n    done\n    inc[i]=$((inc[i] + arr[i]))\n  done\n\n  for ((i=len-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=len-1; j>i; j--)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        if [[ ${dec[j]} -gt ${dec[i]} ]]; then\n          dec[i]=${dec[j]}\n        fi\n      fi\n    done\n    dec[i]=$((dec[i] + arr[i]))\n  done\n\n  for ((i=0; i<len; i++)); do\n    if [[ ${inc[i]} -gt ${dec[i]} ]]; then\n      if [[ ${inc[i]} -gt $max ]]; then\n        max=${inc[i]}\n      fi\n    else\n      if [[ ${dec[i]} -gt $max ]]; then\n        max=${dec[i]}\n      fi\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_n6cqcha.sh: line 23: 1 15 51 45 33 100 12 18 9: syntax error in expression (error token is \"15 51 45 33 100 12 18 9\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    inc[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && inc[i] < inc[j] + arr[i])); then\n        inc[i]=${inc[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    dec[i]=${arr[i]}\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if ((arr[j] < arr[i] && dec[i] < dec[j] + arr[i])); then\n        dec[i]=${dec[j]}+${arr[i]}\n      fi\n    done\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((max < inc[i] + dec[i] - arr[i])); then\n      max=${inc[i]}+${dec[i]}-${arr[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(0)\n  local -a dec=(0)\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    inc[i]=${arr[i]}\n    for (( j=0; j<i; j++ )); do\n      if (( arr[j] < arr[i] )); then\n        (( inc[i] += inc[j] ))\n      fi\n    done\n  done\n\n  for (( i=${#arr[@]}-1; i>=0; i-- )); do\n    dec[i]=${arr[i]}\n    for (( j=${#arr[@]}-1; j>i; j-- )); do\n      if (( arr[j] < arr[i] )); then\n        (( dec[i] += dec[j] ))\n      fi\n    done\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    if (( inc[i] + dec[i] - arr[i] > max )); then\n      max=inc[i] + dec[i] - arr[i]\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmymklapw.sh: line 33: +: command not found\\n/tmp/tmpmymklapw.sh: line 33: +: command not found\\n/tmp/tmpmymklapw.sh: line 33: +: command not found\\n/tmp/tmpmymklapw.sh: line 33: +: command not found\\n/tmp/tmpmymklapw.sh: line 33: +: command not found\\n/tmp/tmpmymklapw.sh: line 33: +: command not found\\n/tmp/tmpmymklapw.sh: line 33: +: command not found\\n/tmp/tmpmymklapw.sh: line 33: +: command not found\\n/tmp/tmpmymklapw.sh: line 33: +: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[-1]})\n  local -i i=1\n  local -i j=${#arr[@]}-2\n  local -i max_inc=${arr[0]}\n  local -i max_dec=${arr[-1]}\n  local -i max_sum=0\n\n  while (( i < j )); do\n    if (( arr[i] > max_inc )); then\n      max_inc=${arr[i]}\n    fi\n    inc[i]=$max_inc\n    if (( arr[j] > max_dec )); then\n      max_dec=${arr[j]}\n    fi\n    dec[j]=$max_dec\n    (( i++ ))\n    (( j-- ))\n  done\n\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    if (( inc[i] + dec[i] > max_sum )); then\n      max_sum=$(( inc[i] + dec[i] ))\n    fi\n  done\n\n  echo $max_sum\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n  local -a arr=($1)\n  local -a inc=(${arr[0]})\n  local -a dec=(${arr[0]})\n  local max=0\n  for ((i=1; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if (( arr[i] > arr[j] )); then\n        inc[i]=$(( inc[j] + arr[i] ))\n      fi\n    done\n  done\n  for ((i=${#arr[@]}-2; i>=0; i--)); do\n    for ((j=${#arr[@]}-1; j>i; j--)); do\n      if (( arr[i] > arr[j] )); then\n        dec[i]=$(( dec[j] + arr[i] ))\n      fi\n    done\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if (( inc[i] + dec[i] > max )); then\n      max=$(( inc[i] + dec[i] ))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[-1]})\n    local i=1\n    local j=${#arr[@]}-2\n    local max=0\n\n    while (( i < ${#arr[@]} )); do\n        inc[i]=${arr[i]}\n        dec[j]=${arr[j]}\n        for (( k=0; k < i; k++ )); do\n            if (( arr[i] > arr[k] )); then\n                inc[i]=$(( inc[i] + inc[k] ))\n            fi\n        done\n        for (( k=j+1; k < ${#arr[@]}; k++ )); do\n            if (( arr[j] > arr[k] )); then\n                dec[j]=$(( dec[j] + dec[k] ))\n            fi\n        done\n        (( i++ ))\n        (( j-- ))\n    done\n\n    for (( i=0; i < ${#arr[@]}; i++ )); do\n        if (( inc[i] + dec[i] - arr[i] > max )); then\n            max=$(( inc[i] + dec[i] - arr[i] ))\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test",
      "timestamp": 1667190696,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}