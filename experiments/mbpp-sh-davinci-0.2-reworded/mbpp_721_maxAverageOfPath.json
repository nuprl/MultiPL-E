{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local matrix=\"$1\"\n  local -a matrix\n  local -a path\n  local -i i j\n  local -i max_i max_j\n  local -i max_avg\n  local -i avg\n  local -i sum\n  local -i count\n  local -i max_count\n  local -i max_sum\n  local -i max_avg_i\n  local -i max_avg_j\n  local -i max_avg_count\n  local -i max_avg_sum\n  local -i max_avg_avg\n  local -i max_avg_max_i\n  local -i max_avg_max_j\n  local -i max_avg_max_avg\n  local -i max_avg_max_count\n  local -i max_avg_max_sum\n  local -i max_avg_max_avg_i\n  local -i max_avg_max_avg_j\n  local -i max_avg_max_avg_count\n  local -i max_avg_max_avg_sum\n  local -i max_avg_max_avg_avg\n  local -i max_avg_max_avg_max_i\n  local -i max_avg_max_avg_max_j\n  local -i max_avg_max_avg_max_avg\n  local -i max_avg_max_avg_max_count\n  local -i max_avg_max_avg_max_sum\n  local -i max_avg_max_avg_max_avg_i\n  local -i max_avg_max_avg_max_avg_j\n  local -i max_avg_max_avg_max_avg_count\n  local -i max_avg_max_avg_max_avg_sum\n  local -i max_avg_max_avg_max_avg_avg\n  local -i max_avg_max_avg_max_avg_max_i\n  local -i max_av",
    "  local matrix=\"$1\"\n  local rows=\"$(echo \"$matrix\" | wc -l)\"\n  local cols=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n  local maxAverage=0\n  local maxAveragePath=()\n  local maxAveragePathCost=0\n  local maxAveragePathLength=0\n  local maxAveragePathLengths=()\n  local maxAveragePathCosts=()\n  local maxAveragePaths=()\n  local maxAveragePathsLength=0\n  local maxAveragePathsCost=0\n  local maxAveragePathsLengths=()\n  local maxAveragePathsCosts=()\n  local maxAveragePathsAverages=()\n  local maxAveragePathsAveragesLength=0\n  local maxAveragePathsAveragesCost=0\n  local maxAveragePathsAveragesLengths=()\n  local maxAveragePathsAveragesCosts=()\n  local maxAveragePathsAveragesAverages=()\n  local maxAveragePathsAveragesAveragesLength=0\n  local maxAveragePathsAveragesAveragesCost=0\n  local maxAveragePathsAveragesAveragesLengths=()\n  local maxAveragePathsAveragesAveragesCosts=()\n  local maxAveragePathsAveragesAveragesAverages=()\n  local maxAveragePathsAveragesAveragesAveragesLength=0\n  local maxAveragePathsAveragesAveragesAveragesCost=0\n  local maxAveragePathsAveragesAveragesAveragesLengths=()\n  local maxAveragePathsAveragesAveragesAveragesCosts=()\n  local maxAveragePathsAveragesAveragesAveragesAverages=()\n  local maxAveragePathsAveragesAveragesAveragesAveragesLength=0\n  local maxAveragePathsAveragesAveragesAveragesAveragesCost=0\n  local maxAveragePathsAveragesAveragesAveragesAveragesLengths=()\n  local maxAveragePathsAveragesAveragesAveragesAveragesCosts=()\n  local maxAveragePathsAveragesAveragesAveragesAveragesAverages=()\n  local maxAveragePathsAveragesAveragesAveragesAveragesAveragesLength=0\n  local maxAveragePathsAveragesAveragesAveragesAverages",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -n1 | wc -w)\n  local -a dp\n  local -a path\n  local i j k\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<m;j++)); do\n      k=$((i*m+j))\n      dp[k]=$(echo \"$matrix\" | head -n$((i+1)) | tail -n1 | awk \"{print \\$$((j+1))}\")\n      if ((i>0)); then\n        dp[k]=$(echo \"${dp[k]} ${dp[k-m]}\")\n      fi\n      if ((j>0)); then\n        dp[k]=$(echo \"${dp[k]} ${dp[k-1]}\")\n      fi\n      dp[k]=$(echo \"${dp[k]}\" | tr ' ' '\\n' | sort -n | tail -n1)\n      path[k]=$(echo \"${dp[k]}\" | tr ' ' '\\n' | sort -n | tail -n1 | wc -l)\n    done\n  done\n  echo \"${dp[-1]}\" | tr ' ' '\\n' | sort -n | tail -n1 | awk '{print $1/'${path[-1]}'}'",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j k\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i*n+j]}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+matrix[i*n+j]))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n        dp[j]=$((dp[j]+matrix[i*n+j]))\n      fi\n    done\n  done\n  echo \"${dp[n-1]} $((n*n))\" | awk '{printf \"%.2f\\n\", $1/$2}'",
    "  local matrix=\"$1\"\n  local -i n=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_l=0\n  local -i max_sum=0\n  local -i max_n=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_l=0\n  local -i max_max_sum=0\n  local -i max_max_n=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_l=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_n=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_l=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_n=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_k=0\n  local -i max_max_max_max_max_l=0\n  local -i max_max_max_max",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(echo \"$matrix\" | wc -l)\"\n  local -r m=\"$(echo \"$matrix\" | head -n 1 | wc -w)\"\n\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n\n  while read -r line; do\n    j=0\n    for cost in $line; do\n      (( sum += cost ))\n      if (( i == n-1 && j == m-1 )); then\n        (( max = sum ))\n        (( max_i = i ))\n        (( max_j = j ))\n      elif (( i == n-1 )); then\n        (( sum -= cost ))\n      elif (( j == m-1 )); then\n        (( sum -= cost ))\n      fi\n      (( j++ ))\n    done\n    (( i++ ))\n  done <<< \"$matrix\"\n\n  echo \"$max\"",
    "  local -r input=\"$1\"\n  local -r n=\"$(wc -l <<< \"$input\")\"\n  local -r m=\"$(head -n 1 <<< \"$input\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n  local -r min_average=\"$(bc -l <<< \"scale=2; $max / $max\")\"\n  local -r max_path=\"$(for i in $(seq 1 \"$n\"); do echo \"$(head -n \"$i\" <<< \"$input\" | tail -n 1 | tr ' ' '\\n')\"; done | tr '\\n' ' ')\"\n  local -r min_path=\"$(for i in $(seq 1 \"$n\"); do echo \"$(head -n \"$i\" <<< \"$input\" | tail -n 1 | tr ' ' '\\n' | tac)\"; done | tr '\\n' ' ')\"\n  local -r max_path_average=\"$(bc -l <<< \"scale=2; $(echo \"$max_path\" | tr ' ' '+') / $max\")\"\n  local -r min_path_average=\"$(bc -l <<< \"scale=2; $(echo \"$min_path\" | tr ' ' '+') / $max\")\"\n  local -r max_path_average_rounded=\"$(bc -l <<< \"scale=0; $max_path_average + 0.5\")\"\n  local -r min_path_average_rounded=\"$(bc -l <<< \"scale=0; $min_path_average + 0.5\")\"\n  local -r max_path_average_rounded_int=\"$(bc -l <<< \"scale=0; $max_path_average_rounded / 1\")\"\n  local -r min_path_average_rounded_int=\"$(bc -l <<< \"scale=0; $min_path_average_rounded / 1\")\"\n  local -r max_path_average_rounded_int_diff=\"$(bc -l <<< \"scale=0; $max_path",
    "  local -a arr=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i max=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_sum=0\n  local -i max_max=0\n  local -i max_max_i=0\n  local -i max_max_j=0\n  local -i max_max_k=0\n  local -i max_max_sum=0\n  local -i max_max_max=0\n  local -i max_max_max_i=0\n  local -i max_max_max_j=0\n  local -i max_max_max_k=0\n  local -i max_max_max_sum=0\n  local -i max_max_max_max=0\n  local -i max_max_max_max_i=0\n  local -i max_max_max_max_j=0\n  local -i max_max_max_max_k=0\n  local -i max_max_max_max_sum=0\n  local -i max_max_max_max_max=0\n  local -i max_max_max_max_max_i=0\n  local -i max_max_max_max_max_j=0\n  local -i max_max_max_max_max_k=0\n  local -i max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max=0\n  local -i max_max_max_max_max_max_i=0\n  local -i max_max_max_max_max_max_j=0\n  local -i max_max_max_max_max_max_k=0\n  local -i max_max_max_max_max_max_sum=0\n  local -i max_max_max_max_max_max_max=0\n  local -i max_max_max_max_max",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  for ((i=0;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      if ((i==0 && j==0)); then\n        dp[j]=${matrix[i]:j:1}\n      elif ((i==0)); then\n        dp[j]=$((dp[j-1]+${matrix[i]:j:1}))\n      elif ((j==0)); then\n        dp[j]=$((dp[j]+${matrix[i]:j:1}))\n      else\n        dp[j]=$((dp[j-1]>dp[j]?dp[j-1]+${matrix[i]:j:1}:dp[j]+${matrix[i]:j:1}))\n      fi\n    done\n  done\n  echo $((dp[n-1]/(2*n-1)))",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n 1)\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=0;j<n;j++)); do\n      local -i left=${dp[j]}\n      local -i top=${dp[j+1]}\n      local -i cur=$(echo \"${matrix[i]}\" | tr ' ' '\\n' | sort -n | head -n $((i+1)) | tail -n 1)\n      dp[j]=$(((left+top+cur)/3))\n    done\n  done\n  echo \"${dp[0]}\"",
    "  local -n matrix=$1\n  local n=${#matrix[@]}\n  local -a dp=(0)\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i][0]))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<n;j++)); do\n      dp[j]=$((dp[j-1]>dp[j]?dp[j-1]:dp[j]))\n      dp[j]=$((dp[j]+matrix[i][j]))\n    done\n  done\n  echo $((dp[n-1]/n))",
    "  local -r matrix=\"$1\"\n  local -r n=\"$(wc -l <<< \"$matrix\")\"\n  local -r m=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r max=\"$((n * m))\"\n  local -r max_average=\"$(bc -l <<< \"scale=2; $max / 2\")\"\n\n  local -A matrix_map\n  local -i i=0\n  while read -r line; do\n    local -i j=0\n    for cell in $line; do\n      matrix_map[\"$i,$j\"]=\"$cell\"\n      j+=1\n    done\n    i+=1\n  done <<< \"$matrix\"\n\n  local -A cache\n  local -i cache_hits=0\n\n  local -i max_average_path_cost=0\n  local -i max_average_path_length=0\n\n  local -i max_average_path_cost_cache=0\n  local -i max_average_path_length_cache=0\n\n  local -i max_average_path_cost_cache_hits=0\n  local -i max_average_path_length_cache_hits=0\n\n  local -i max_average_path_cost_cache_misses=0\n  local -i max_average_path_length_cache_misses=0\n\n  local -i max_average_path_cost_cache_misses_total=0\n  local -i max_average_path_length_cache_misses_total=0\n\n  local -i max_average_path_cost_cache_misses_total_hits=0\n  local -i max_average_path_length_cache_misses_total_hits=0\n\n  local -i max_average_path_cost_cache_misses_total_misses=0\n  local -i max_average_path_length_cache_misses_total_misses=0\n\n  local -i max_average_path_cost_cache_misses_total_misses_total=0\n  local -i max_average_path_length_cache_misses_total",
    "  local -n matrix=$1\n  local -a path=()\n  local -i maxAverage=0\n  local -i totalCost=0\n  local -i numCells=0\n  local -i i=0\n  local -i j=0\n  local -i currentCost=0\n  local -i currentAverage=0\n  local -i currentNumCells=0\n  local -i currentTotalCost=0\n\n  # Start at the top left cell\n  path+=(\"${matrix[0]}\")\n  totalCost+=${matrix[0]}\n  numCells=1\n\n  # Iterate over the matrix\n  while [[ $i -lt ${#matrix[@]} ]]; do\n    currentCost=${matrix[i]}\n    currentTotalCost=$totalCost\n    currentNumCells=$numCells\n    # If we're not at the end of the row\n    if [[ $j -lt ${#matrix[0]} ]]; then\n      # If we're not at the end of the column\n      if [[ $i -lt ${#matrix[@]} ]]; then\n        # If we're not at the end of the row\n        if [[ $j -lt ${#matrix[0]} ]]; then\n          # Add the cost of the current cell to the total cost\n          currentTotalCost+=$currentCost\n          # Increment the number of cells\n          ((currentNumCells++))\n          # Calculate the average\n          currentAverage=$((currentTotalCost/currentNumCells))\n          # If the average is greater than the max average\n          if [[ $currentAverage -gt $maxAverage ]]; then\n            # Set the max average to the current average\n            maxAverage=$currentAverage\n          fi\n        fi\n      fi\n    fi\n    # If we're not at the end of the row\n    if [[ $j -lt ${#matrix[0]} ]]; then\n      # If we're not at the end of the column\n      if [[ $i -lt ${#matrix[@]} ]]; then\n        # Add the cost of the current cell to the total cost\n        currentTotalCost+=$currentCost\n        # Increment the number of cells\n        ((currentNumCells++))\n        #",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i j\n  local -a dp\n  for ((i=0;i<n;i++)); do\n    dp[i]=0\n  done\n  dp[0]=${matrix[0]}\n  for ((i=1;i<n;i++)); do\n    dp[i]=$((dp[i-1]+matrix[i]))\n  done\n  for ((i=n;i<n*n;i++)); do\n    dp[i]=$((dp[i-n]+matrix[i]))\n  done\n  for ((i=n;i<n*n;i++)); do\n    for ((j=i-n+1;j<i;j++)); do\n      if ((dp[j]+matrix[i]>dp[i])); then\n        dp[i]=$((dp[j]+matrix[i]))\n      fi\n    done\n  done\n  echo $((dp[n*n-1]/(2*n-1)))",
    "  local matrix=\"$1\"\n  local -i rows=$(wc -l <<< \"$matrix\")\n  local -i cols=$(head -n1 <<< \"$matrix\" | wc -w)\n  local -i i=0 j=0\n  local -i total=0\n  local -i max=0\n  local -a path\n  local -a maxPath\n  local -a row\n  local -a col\n  local -a cost\n  local -a maxCost\n  local -a next\n  local -a maxNext\n  local -a nextRow\n  local -a nextCol\n  local -a nextCost\n  local -a nextMaxCost\n  local -a nextMaxNext\n  local -a nextMaxRow\n  local -a nextMaxCol\n  local -a nextMaxPath\n  local -a nextPath\n  local -a nextNext\n  local -a nextNextRow\n  local -a nextNextCol\n  local -a nextNextCost\n  local -a nextNextNext\n  local -a nextNextNextRow\n  local -a nextNextNextCol\n  local -a nextNextNextCost\n  local -a nextNextNextNext\n  local -a nextNextNextNextRow\n  local -a nextNextNextNextCol\n  local -a nextNextNextNextCost\n  local -a nextNextNextNextNext\n  local -a nextNextNextNextNextRow\n  local -a nextNextNextNextNextCol\n  local -a nextNextNextNextNextCost\n  local -a nextNextNextNextNextNext\n  local -a nextNextNextNextNextNextRow\n  local -a nextNextNextNextNextNextCol\n  local -a nextNextNextNextNextNextCost\n  local -a nextNextNextNextNextNextNext\n  local -a nextNextNextNextNextNextNextRow\n  local -a nextNextNextNextNextNextNextCol\n  local -a nextNextNextNextNextNextNextCost\n  local -a nextNextNextNextNextNextNextNext\n  local -a nextNextNextNextNextNextNextNextRow\n  local -a nextNextNextNextNextNextNextNextCol\n  local -a nextNextNextNextNextNextNextNextCost\n  local -a nextNextNextNextNextNextNextNextNext",
    "  local -n matrix=$1\n  local -i n=${#matrix[@]}\n  local -i i=0 j=0\n  local -i max=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_n=0\n  local -i max_sum_n=0\n  local -i max_sum_i=0\n  local -i max_sum_j=0\n  local -i max_sum_max=0\n  local -i max_sum_sum=0\n  local -i max_sum_max_i=0\n  local -i max_sum_max_j=0\n  local -i max_sum_max_n=0\n  local -i max_sum_max_sum=0\n  local -i max_sum_max_max=0\n  local -i max_sum_max_max_i=0\n  local -i max_sum_max_max_j=0\n  local -i max_sum_max_max_n=0\n  local -i max_sum_max_max_sum=0\n  local -i max_sum_max_max_max=0\n  local -i max_sum_max_max_max_i=0\n  local -i max_sum_max_max_max_j=0\n  local -i max_sum_max_max_max_n=0\n  local -i max_sum_max_max_max_sum=0\n  local -i max_sum_max_max_max_max=0\n  local -i max_sum_max_max_max_max_i=0\n  local -i max_sum_max_max_max_max_j=0\n  local -i max_sum_max_max_max_max_n=0\n  local -i max_sum_max_max_max_max_sum=0\n  local -i max_sum_max_max_max_max_max=0\n  local -i max_sum_max_max_max_max_max_i=0\n",
    "  local -r matrix=\"$1\"\n  local -r n=$(wc -l <<< \"$matrix\")\n  local -r m=$(head -n 1 <<< \"$matrix\" | wc -w)\n  local -r max=$((n * m))\n  local -r max_average=$(bc -l <<< \"scale=2; ($(tr ' ' '+' <<< \"$matrix\") / $max)\")\n  local -r max_average_rounded=$(printf '%.*f\\n' 0 $max_average)\n  local -r max_average_rounded_plus_one=$((max_average_rounded + 1))\n  local -r max_average_rounded_plus_one_decimal=$(bc -l <<< \"scale=2; ($max_average_rounded_plus_one / 1)\")\n  local -r max_average_rounded_plus_one_decimal_rounded=$(printf '%.*f\\n' 2 $max_average_rounded_plus_one_decimal)\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one=$(bc -l <<< \"scale=2; ($max_average_rounded_plus_one_decimal_rounded + 0.01)\")\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one_rounded=$(printf '%.*f\\n' 2 $max_average_rounded_plus_one_decimal_rounded_plus_one)\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one_rounded_plus_one=$(bc -l <<< \"scale=2; ($max_average_rounded_plus_one_decimal_rounded_plus_one_rounded + 0.01)\")\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one_rounded_plus_one_rounded=$(printf '%.*f\\n' 2 $max_average_rounded_plus_one_decimal_rounded_plus_one_rounded_plus_one)\n  local -r max_average_rounded_plus_one_decimal_rounded_plus_one_",
    "  local -n _map=$1\n  local -i _n=${#_map[@]}\n  local -i _i _j\n  local -a _dp\n  for ((_i=0;_i<_n;_i++)); do\n    _dp[$_i]=$(echo \"${_map[$_i]}\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  done\n  for ((_i=1;_i<_n;_i++)); do\n    for ((_j=0;_j<_n;_j++)); do\n      local -i _val=${_dp[$_j]}\n      if ((_j>0)); then\n        _val=$((_val+${_dp[$_j-1]}))\n      fi\n      _dp[$_j]=$((_val/$((_i+1))))\n    done\n  done\n  echo \"${_dp[@]}\" | tr ' ' '\\n' | sort -n | tail -n 1",
    "  local matrix=\"$1\"\n  local n=$(echo \"$matrix\" | wc -l)\n  local m=$(echo \"$matrix\" | head -1 | wc -w)\n  local -a costs=()\n  local -a paths=()\n  local -a path=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i cost=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_cost=0\n  local -i max_path_len=0\n  local -i path_len=0\n  local -i path_cost=0\n  local -i path_avg=0\n  local -i max_path_avg=0\n  local -i max_path_i=0\n  local -i max_path_j=0\n  local -i max_path_cost=0\n  local -i max_path_len=0\n  local -i max_path_avg=0\n  local -i max_path_avg_i=0\n  local -i max_path_avg_j=0\n  local -i max_path_avg_cost=0\n  local -i max_path_avg_len=0\n  local -i max_path_avg_avg=0\n  local -i max_path_avg_avg_i=0\n  local -i max_path_avg_avg_j=0\n  local -i max_path_avg_avg_cost=0\n  local -i max_path_avg_avg_len=0\n  local -i max_path_avg_avg_avg=0\n  local -i max_path_avg_avg_avg_i=0\n  local -i max_path_avg_avg_avg_j=0\n  local -i max_path_avg_avg_avg_cost=0\n  local -i max_path_avg_avg_avg",
    "  local -n matrix=$1\n  local n=${#matrix[@]}\n  for ((i=1;i<n;i++)); do\n    matrix[0][i]=$((matrix[0][i-1]+matrix[0][i]))\n    matrix[i][0]=$((matrix[i-1][0]+matrix[i][0]))\n  done\n  for ((i=1;i<n;i++)); do\n    for ((j=1;j<n;j++)); do\n      matrix[i][j]=$((matrix[i-1][j]+matrix[i][j]))\n      if ((matrix[i][j]<matrix[i][j-1]+matrix[i][j])); then\n        matrix[i][j]=$((matrix[i][j-1]+matrix[i][j]))\n      fi\n    done\n  done\n  echo $((matrix[n-1][n-1]/(2*n-1)))"
  ]
}