{
  "name": "mbpp_12_sort_matrix",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -a sums\n    local -a temp\n    local -a row\n    local -a new_matrix\n    local -i new_n=0\n    local -i new_m=0\n\n    # Split the input into a 2D array\n    while read -a row; do\n        matrix[i++]=$(printf \"%s\\n\" \"${row[@]}\")\n    done <<< \"$1\"\n\n    # Get the dimensions of the matrix\n    n=${#matrix[@]}\n    m=${#matrix[0]}\n\n    # Calculate the sum of each row\n    for ((i=0; i<n; i++)); do\n        sum=0\n        for ((j=0; j<m; j++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        sums[i]=$sum\n    done\n\n    # Sort the sums\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((sums[i] > sums[j])); then\n                temp=${sums[i]}\n                sums[i]=${sums[j]}\n                sums[j]=$temp\n                temp=${matrix[i]}\n                matrix[i]=${matrix[j]}\n                matrix[j]=$temp\n            fi\n        done\n    done\n\n    # Print the matrix\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            printf \"%s \" \"${matrix[i]:j:1}\"\n        done\n        printf \"\\n\"\n    done",
    "    declare -a matrix\n    declare -a sums\n    declare -i i=0\n    declare -i j=0\n    declare -i k=0\n    declare -i m=0\n    declare -i n=0\n    declare -i sum=0\n    declare -i max=0\n    declare -i min=0\n    declare -i tmp=0\n    declare -i tmp_i=0\n    declare -i tmp_j=0\n    declare -i tmp_k=0\n    declare -i tmp_m=0\n    declare -i tmp_n=0\n    declare -i tmp_sum=0\n    declare -i tmp_max=0\n    declare -i tmp_min=0\n    declare -i tmp_tmp=0\n    declare -i tmp_tmp_i=0\n    declare -i tmp_tmp_j=0\n    declare -i tmp_tmp_k=0\n    declare -i tmp_tmp_m=0\n    declare -i tmp_tmp_n=0\n    declare -i tmp_tmp_sum=0\n    declare -i tmp_tmp_max=0\n    declare -i tmp_tmp_min=0\n    declare -i tmp_tmp_tmp=0\n    declare -i tmp_tmp_tmp_i=0\n    declare -i tmp_tmp_tmp_j=0\n    declare -i tmp_tmp_tmp_k=0\n    declare -i tmp_tmp_tmp_m=0\n    declare -i tmp_tmp_tmp_n=0\n    declare -i tmp_tmp_tmp_sum=0\n    declare -i tmp_tmp_tmp_max=0\n    declare -i tmp_tmp_tmp_min=0\n    declare -i tmp_tmp_tmp_tmp=0\n    declare -i tmp_tmp_tmp_tmp_i=0\n    declare -i tmp_tmp_tmp_tmp_j=0\n    declare -i tmp_tmp_tmp_tmp_k=0\n    declare -i tmp_tmp_tmp_tmp_m=0\n    declare -i tmp_tmp_tmp_tmp_n=0\n    declare -i tmp_tmp_tmp_tmp_sum=0\n    declare -i tmp_tmp",
    "    local matrix=$1\n    local -a rows\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_rows\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_index=0\n    local -i max_index_prev=0\n    local -i max_index_next=0\n    local -i max_index_prev_prev=0\n    local -i max_index_next_next=0\n    local -i max_index_prev_prev_prev=0\n    local -i max_index_next_next_next=0\n    local -i max_index_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_",
    "    local -a matrix=()\n    local -a sums=()\n    local -a sorted=()\n    local -a sorted_matrix=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_index=0\n    local -i max_index_prev=0\n    local -i max_index_next=0\n    local -i max_index_prev_prev=0\n    local -i max_index_next_next=0\n    local -i max_index_prev_prev_prev=0\n    local -i max_index_next_next_next=0\n    local -i max_index_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_",
    "    local matrix=\"$1\"\n    local rows=()\n    local sums=()\n    local row_index=0\n    local row_sum=0\n    local row_sums_sorted=()\n    local row_sums_sorted_index=0\n    local row_sums_sorted_length=0\n    local row_sums_sorted_row_index=0\n    local row_sums_sorted_row_sum=0\n    local row_sums_sorted_row_value=0\n    local row_sums_sorted_row_values=()\n    local row_sums_sorted_row_values_index=0\n    local row_sums_sorted_row_values_length=0\n    local row_sums_sorted_row_values_value=0\n    local row_value=0\n    local row_values=()\n    local row_values_index=0\n    local row_values_length=0\n    local row_values_value=0\n    local row_values_value_index=0\n    local row_values_value_length=0\n    local row_values_value_value=0\n    local row_values_value_value_index=0\n    local row_values_value_value_length=0\n    local row_values_value_value_value=0\n    local row_values_value_value_value_index=0\n    local row_values_value_value_value_length=0\n    local row_values_value_value_value_value=0\n    local row_values_value_value_value_value_index=0\n    local row_values_value_value_value_value_length=0\n    local row_values_value_value_value_value_value=0\n    local row_values_value_value_value_value_value_index=0\n    local row_values_value_value_value_value_value_length=0\n    local row_values_value_value_value_value_value_value=0\n    local row_values_value_value_value_value_value_value_index=0\n    local row_values_value_value",
    "  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i sum=0\n  local -i sums=()\n  local -i tmp=0\n  local -i tmp_sum=0\n  local -i tmp_sums=()\n  local -i tmp_matrix=()\n  local -i matrix_size=0\n  local -i matrix_size_sqrt=0\n  local -i matrix_size_sqrt_int=0\n  local -i matrix_size_sqrt_int_sqrt=0\n\n  # Read the input into an array\n  while read -a row; do\n    matrix[$i]=\"${row[@]}\"\n    ((i++))\n  done <<< \"$1\"\n\n  # Calculate the size of the matrix\n  matrix_size=${#matrix[@]}\n  matrix_size_sqrt=$(echo \"sqrt($matrix_size)\" | bc)\n  matrix_size_sqrt_int=$(echo \"$matrix_size_sqrt\" | cut -d '.' -f 1)\n  matrix_size_sqrt_int_sqrt=$(echo \"sqrt($matrix_size_sqrt_int)\" | bc)\n\n  # Check if the matrix is square\n  if [[ $matrix_size_sqrt_int_sqrt -ne $matrix_size_sqrt_int ]]; then\n    echo \"The matrix is not square\"\n    return 1\n  fi\n\n  # Calculate the sums of the rows\n  for ((i=0; i<$matrix_size; i++)); do\n    sum=0\n    for ((j=0; j<$matrix_size_sqrt_int; j++)); do\n      sum=$((sum + ${matrix[$i]:$j:1}))\n    done\n    sums[$i]=$sum\n  done\n\n  # Sort the matrix\n  for ((i=0; i<$matrix_size; i++)); do\n    for ((j=0; j<$matrix_size; j++",
    "  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_sum_index=0\n  local -i max_sum_index_prev=0\n  local -i tmp=0\n  local -i tmp_index=0\n  local -i tmp_index_prev=0\n  local -i tmp_sum=0\n  local -i tmp_sum_prev=0\n  local -i tmp_sum_index=0\n  local -i tmp_sum_index_prev=0\n  local -i tmp_sum_index_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev",
    "    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i sums=()\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local -i tmp49=0\n    local -i tmp50=0\n",
    "    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max=0\n    local -i min=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_sum=0\n    local -i tmp_max=0\n    local -i tmp_min=0\n    local -i tmp_tmp=0\n    local -i tmp_tmp_i=0\n    local -i tmp_tmp_j=0\n    local -i tmp_tmp_k=0\n    local -i tmp_tmp_n=0\n    local -i tmp_tmp_m=0\n    local -i tmp_tmp_sum=0\n    local -i tmp_tmp_max=0\n    local -i tmp_tmp_min=0\n    local -i tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_k=0\n    local -i tmp_tmp_tmp_n=0\n    local -i tmp_tmp_tmp_m=0\n    local -i tmp_tmp_tmp_sum=0\n    local -i tmp_tmp_tmp_max=0\n    local -i tmp_tmp_tmp_min=0\n    local -i tmp_tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_tmp_k=0\n    local -i tmp_tmp_tmp_tmp_n=0\n    local -i tmp_tmp_tmp_tmp_m=0\n    local -i tmp_tmp_tmp_tmp_sum=0\n    local -i tmp_tmp",
    "    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_rows\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local row=''\n\n    # Split the matrix into rows\n    while read -r row; do\n        rows[$i]=\"$row\"\n        ((i++))\n    done <<< \"$matrix\"\n\n    # Calculate the sum of each row\n    for ((i=0; i<${#rows[@]}; i++)); do\n        sum=0\n        for ((j=0; j<${#rows[$i]}; j++)); do\n            sum=$((sum + ${rows[$i]:$j:1}))\n        done\n        sums[$i]=\"$sum\"\n    done\n\n    # Sort the sums\n    sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n    # Sort the rows according to the sums\n    for ((i=0; i<${#sorted_sums[@]}; i++)); do\n        for ((j=0; j<${#sums[@]}; j++)); do\n            if [[ \"${sorted_sums[$i]}\" == \"${sums[$j]}\" ]]; then\n                sorted_rows[$k]=\"${rows[$j]}\"\n                ((k++))\n            fi\n        done\n    done\n\n    # Print the sorted matrix\n    for ((i=0; i<${#sorted_rows[@]}; i++)); do\n        echo \"${sorted_rows[$i]}\"\n    done",
    "    local -a matrix\n    local -i i j\n    local -i nrows ncols\n    local -i sum\n    local -i max_sum\n    local -i max_row\n    local -i max_col\n    local -i tmp\n    local -i tmp_row\n    local -i tmp_col\n    local -i tmp_sum\n\n    # Split the input into an array of rows\n    IFS=$'\\n' read -d '' -r -a matrix <<< \"$1\"\n    nrows=${#matrix[@]}\n    ncols=${#matrix[0]}\n\n    # Sort the rows by their sums\n    for ((i = 0; i < nrows; i++)); do\n        sum=0\n        for ((j = 0; j < ncols; j++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        if ((i == 0)); then\n            max_sum=$sum\n            max_row=$i\n        else\n            if ((sum > max_sum)); then\n                tmp=${matrix[i]}\n                matrix[i]=${matrix[max_row]}\n                matrix[max_row]=$tmp\n                max_sum=$sum\n                max_row=$i\n            fi\n        fi\n    done\n\n    # Sort the columns by their sums\n    for ((j = 0; j < ncols; j++)); do\n        sum=0\n        for ((i = 0; i < nrows; i++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        if ((j == 0)); then\n            max_sum=$sum\n            max_col=$j\n        else\n            if ((sum > max_sum)); then\n                for ((i = 0; i < nrows; i++)); do\n                    tmp=${matrix[i]:j:1}\n                    matrix[i]=${matrix[i]:0:j}${matrix[i]:j+1}\n                    matrix[i]=${matrix[i]:0:max_col}$tmp${matrix[i]:max_col}\n                done\n                max_sum=$sum\n               ",
    "  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_index=0\n  local -a sums\n  local -a indices\n  local -a sorted_matrix\n  local -a row\n  local -a sorted_row\n  local -a sorted_rows\n\n  # read the matrix into an array\n  while read -r line; do\n    row=($line)\n    matrix[$i]=\"${row[@]}\"\n    ((i++))\n  done <<< \"$1\"\n\n  # get the number of rows and columns\n  n=${#matrix[@]}\n  m=${#matrix[0]}\n\n  # calculate the sums of the rows\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=0; j<m; j++)); do\n      sum=$(($sum + ${matrix[$i]:$j:1}))\n    done\n    sums[$i]=$sum\n  done\n\n  # sort the sums\n  indices=($(printf \"%s\\n\" \"${!sums[@]}\" | sort -n))\n\n  # sort the matrix\n  for ((i=0; i<n; i++)); do\n    sorted_row=(${matrix[${indices[$i]}]})\n    sorted_rows[$i]=\"${sorted_row[@]}\"\n  done\n\n  # print the sorted matrix\n  for ((i=0; i<n; i++)); do\n    echo \"${sorted_rows[$i]}\"\n  done",
    "    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row_sum=0\n    local row_count=0\n    local col_count=0\n    local col_index=0\n    local col_value=0\n    local col_values=()\n    local col_value_index=0\n    local col_value_count=0\n    local sorted_matrix=()\n    local sorted_matrix_index=0\n    local sorted_matrix_count=0\n    local sorted_matrix_row_index=0\n    local sorted_matrix_row_count=0\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value",
    "  local matrix=\"$1\"\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local row_count=0\n  local row_sums_string=''\n  local row_sums_sorted=''\n  local row_sums_sorted_index=0\n  local row_sums_sorted_index_count=0\n  local sorted_matrix=''\n\n  # Calculate the sum of each row\n  while read -r row; do\n    row_sums[$row_index]=0\n    for number in $row; do\n      row_sum=$((row_sum + number))\n    done\n    row_sums[$row_index]=$row_sum\n    row_sum=0\n    row_index=$((row_index + 1))\n  done <<< \"$matrix\"\n\n  # Convert the row sums array to a string\n  row_sums_string=\"${row_sums[@]}\"\n\n  # Sort the row sums string\n  row_sums_sorted=$(echo \"$row_sums_string\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n\n  # Convert the sorted row sums string to an array\n  read -r -a row_sums_sorted <<< \"$row_sums_sorted\"\n\n  # Get the number of rows in the matrix\n  row_count=$(echo \"$matrix\" | wc -l)\n\n  # Iterate through the sorted row sums array\n  for row_sums_sorted_index in \"${row_sums_sorted[@]}\"; do\n    # Iterate through the row sums array\n    for row_index in \"${!row_sums[@]}\"; do\n      # If the current row sum matches the current sorted row sum,\n      # add the corresponding row to the sorted matrix\n      if [ \"${row_sums[$row_index]}\" = \"$row_sums_sorted_index\" ]; then\n        sorted_matrix=\"$sorted_matrix$(echo \"$matrix\" | sed -n \"$((row_index + 1))p\")\\n\"\n     ",
    "  local matrix=$1\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local sums=()\n  local i=0\n  while read -r row; do\n    sums[i]=$(echo \"$row\" | tr ' ' '+' | bc)\n    ((i++))\n  done <<< \"$matrix\"\n  local sorted_sums=($(for i in \"${!sums[@]}\"; do echo \"${sums[i]} $i\"; done | sort -n | cut -d' ' -f2))\n  local sorted_matrix=()\n  for i in \"${sorted_sums[@]}\"; do\n    sorted_matrix+=($(echo \"$matrix\" | head -n $((i + 1)) | tail -n 1))\n  done\n  echo \"${sorted_matrix[@]}\"",
    "  local matrix=\"$1\"\n  local -i i=0\n  local -i j=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i tmp=0\n  local -i tmp_i=0\n  local -i tmp_j=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -",
    "    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row_sum=0\n    local row=''\n    local row_count=0\n    local row_sorted=''\n    local row_sorted_count=0\n    local row_sorted_index=0\n    local row_sorted_sum=0\n    local row_sorted_sum_index=0\n    local row_sorted_sum_count=0\n    local row_sorted_sum_sorted=''\n    local row_sorted_sum_sorted_count=0\n    local row_sorted_sum_sorted_index=0\n    local row_sorted_sum_sorted_sum=0\n    local row_sorted_sum_sorted_sum_index=0\n    local row_sorted_sum_sorted_sum_count=0\n    local row_sorted_sum_sorted_sum_sorted=''\n    local row_sorted_sum_sorted_sum_sorted_count=0\n    local row_sorted_sum_sorted_sum_sorted_index=0\n    local row_sorted_sum_sorted_sum_sorted_sum=0\n    local row_sorted_sum_sorted_sum_sorted_sum_index=0\n    local row_sorted_sum_sorted_sum_sorted_sum_count=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted=''\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_count=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_index=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_sum=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_sum_index=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_sum_count=0\n    local row_sorted_sum_sorted_",
    "\tlocal matrix=\"$1\"\n\tlocal -a rows\n\tlocal -a sums\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i max_sum=0\n\tlocal -i max_index=0\n\tlocal -i tmp=0\n\tlocal -i tmp_index=0\n\tlocal -i tmp_sum=0\n\tlocal -i tmp_max_sum=0\n\tlocal -i tmp_max_index=0\n\tlocal -i tmp_tmp=0\n\tlocal -i tmp_tmp_index=0\n\tlocal -i tmp_tmp_sum=0\n\tlocal -i tmp_tmp_max_sum=0\n\tlocal -i tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_max_sum=0\n\tlocal -i tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_max_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_max_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp",
    "  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i sums=0\n  local -i sumt=0\n  local -i sumu=0\n  local -i sumv=0\n  local -i sumw=0\n  local -i sumx=0\n  local -i sumy=0\n  local -i sumz=0\n  local -i suma=0\n  local -i sumb=0\n  local -i sumc=0\n  local -i sumd=0\n  local -i sume=0\n  local -i sumf=0\n  local -i sumg=0\n  local -i sumh=0\n  local -i sumi=0\n  local -i sumj=0\n  local -i sumk=0\n  local -i suml=0\n  local -i summ=0\n  local -i sumn=0\n  local -i sumo=0\n  local -i sump=0\n  local -i sumq=0\n  local -i sumr=0\n  local -i sums=0\n  local -i sumt=0\n  local -i sumu=0\n  local -i sumv=0\n  local -i sumw=0\n  local -i sumx=0\n  local -i sumy=0\n  local -i sumz=0\n  local -i sumaa=0\n  local -i sumab=0\n  local -i sumac=0\n  local -i sumad=0\n  local -i sumae=0\n  local -i sum",
    "  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_rows\n  local row\n  local sum\n  local i\n  local j\n\n  # Split the matrix into rows\n  IFS=$'\\n' read -d '' -ra rows <<< \"$matrix\"\n\n  # Calculate the sum of each row\n  for ((i=0; i<${#rows[@]}; i++)); do\n    row=\"${rows[$i]}\"\n    sum=0\n    for j in $row; do\n      sum=$((sum+j))\n    done\n    sums[$i]=$sum\n  done\n\n  # Sort the sums\n  sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n  # Sort the rows according to the sums\n  for ((i=0; i<${#sorted_sums[@]}; i++)); do\n    sum=\"${sorted_sums[$i]}\"\n    for ((j=0; j<${#sums[@]}; j++)); do\n      if [[ \"${sums[$j]}\" == \"$sum\" ]]; then\n        sorted_rows[$i]=\"${rows[$j]}\"\n        sums[$j]=\n        break\n      fi\n    done\n  done\n\n  # Print the sorted rows\n  for row in \"${sorted_rows[@]}\"; do\n    echo \"$row\"\n  done"
  ]
}