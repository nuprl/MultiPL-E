{
  "name": "mbpp_59_is_octagonal",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the nth octagonal number.\n#\n# $1 is an integer\nis_octagonal() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    is_octagonal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"65\" ]]\n    [[ $(candidate \"10\") = \"280\" ]]\n    [[ $(candidate \"15\") = \"645\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    local a=1\n    local b=1\n    local c=1\n    local d=1\n    local e=1\n    local f=1\n    local g=1\n    local h=1\n    local i=1\n    local j=1\n    local k=1\n    local l=1\n    local m=1\n    local o=1\n    local p=1\n    local q=1\n    local r=1\n    local s=1\n    local t=1\n    local u=1\n    local v=1\n    local w=1\n    local x=1\n    local y=1\n    local z=1\n    local A=1\n    local B=1\n    local C=1\n    local D=1\n    local E=1\n    local F=1\n    local G=1\n    local H=1\n    local I=1\n    local J=1\n    local K=1\n    local L=1\n    local M=1\n    local O=1\n    local P=1\n    local Q=1\n    local R=1\n    local S=1\n    local T=1\n    local U=1\n    local V=1\n    local W=1\n    local X=1\n    local Y=1\n    local Z=1\n    local nth_octagonal=$((a*1+b*8+c*64+d*512+e*4096+f*32768+g*262144+h*2097152+i*16777216+j*134217728+k*1073741824+l*8589934592+m*68719476736+o*549755813888+p*4398046511104+q*35184372088832+r*281474976710656+s*2251799813685248+t*18014398509481984+u*144115188075855872+v*1152921504606846976+w*9223372036854775808+x*73786976294838206464+y*590295810358705651712+z*4722366482869645213696",
    "    local n=$1\n    local n_sqrt=$(echo \"sqrt($n)\" | bc)\n    local n_sqrt_int=$(echo \"$n_sqrt\" | cut -d. -f1)\n    local n_sqrt_dec=$(echo \"$n_sqrt\" | cut -d. -f2)\n    if [ \"$n_sqrt_dec\" != \"0\" ]; then\n        return 1\n    fi\n    local n_sqrt_plus_1=$(echo \"$n_sqrt_int + 1\" | bc)\n    local n_sqrt_plus_1_sq=$(echo \"$n_sqrt_plus_1 * $n_sqrt_plus_1\" | bc)\n    local n_sqrt_plus_1_sq_div_2=$(echo \"$n_sqrt_plus_1_sq / 2\" | bc)\n    if [ \"$n\" -eq \"$n_sqrt_plus_1_sq_div_2\" ]; then\n        return 0\n    else\n        return 1\n    fi",
    "    local n=$1\n    local n_sqrt=$(echo \"sqrt($n)\" | bc)\n    local n_sqrt_int=$(echo \"$n_sqrt\" | sed 's/\\..*//')\n    local n_sqrt_dec=$(echo \"$n_sqrt\" | sed 's/^[0-9]*\\.//')\n    [[ $n_sqrt_dec == 0 ]] && [[ $n_sqrt_int == 3*$n_sqrt_int+1 ]] && return 0\n    return 1",
    "    local n=$1\n    local nth_octagonal=$(echo \"scale=0; (sqrt(1+24*$n)+1)/6\" | bc)\n    if [ \"$nth_octagonal\" -eq \"$nth_octagonal\" ] 2>/dev/null; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    local n=$1\n    local nth=$(echo \"sqrt(2*$n+1/3)+1/3\" | bc -l)\n    local int_nth=$(echo \"$nth\" | awk '{printf(\"%d\", $1)}')\n    if [ \"$nth\" == \"$int_nth\" ]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local n=$1\n    local nth=$(echo \"scale=0; sqrt(1 + 24 * $n) + 1\" | bc)\n    local nth_mod=$(echo \"$nth % 6\" | bc)\n    if [ $nth_mod -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    local n=$1\n    local nth_octagonal\n    local nth_triangular\n    local nth_square\n    local nth_pentagonal\n    local nth_hexagonal\n    local nth_heptagonal\n\n    nth_octagonal=$(echo \"scale=0; (sqrt(1+24*$n)+1)/6\" | bc)\n    nth_triangular=$(echo \"scale=0; (sqrt(1+8*$n)+1)/2\" | bc)\n    nth_square=$(echo \"scale=0; sqrt($n)\" | bc)\n    nth_pentagonal=$(echo \"scale=0; (sqrt(1+24*$n)+1)/6\" | bc)\n    nth_hexagonal=$(echo \"scale=0; (sqrt(1+8*$n)+1)/4\" | bc)\n    nth_heptagonal=$(echo \"scale=0; (sqrt(9+40*$n)+3)/10\" | bc)\n\n    if [[ $nth_octagonal -eq $nth_triangular ]] ||\n       [[ $nth_octagonal -eq $nth_square ]] ||\n       [[ $nth_octagonal -eq $nth_pentagonal ]] ||\n       [[ $nth_octagonal -eq $nth_hexagonal ]] ||\n       [[ $nth_octagonal -eq $nth_heptagonal ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    local n=$1\n    local x=$(echo \"sqrt(2*$n+0.125)+0.5\" | bc)\n    local y=$(echo \"$x*$x\" | bc)\n    local z=$(echo \"$y+$x+0.5\" | bc)\n    if [ \"$z\" -eq \"$n\" ]; then\n        return 0\n    else\n        return 1\n    fi",
    "  local n=$1\n  local n_sqrt=$(echo \"sqrt($n)\" | bc)\n  local n_sqrt_int=$(echo \"$n_sqrt\" | cut -d. -f1)\n  local n_sqrt_dec=$(echo \"$n_sqrt\" | cut -d. -f2)\n  if [ \"$n_sqrt_dec\" != \"0\" ]; then\n    return 1\n  fi\n  local n_sqrt_plus_1=$(echo \"$n_sqrt_int + 1\" | bc)\n  local n_sqrt_plus_1_sqrt=$(echo \"sqrt($n_sqrt_plus_1)\" | bc)\n  local n_sqrt_plus_1_sqrt_int=$(echo \"$n_sqrt_plus_1_sqrt\" | cut -d. -f1)\n  local n_sqrt_plus_1_sqrt_dec=$(echo \"$n_sqrt_plus_1_sqrt\" | cut -d. -f2)\n  if [ \"$n_sqrt_plus_1_sqrt_dec\" != \"0\" ]; then\n    return 1\n  fi\n  local n_sqrt_plus_1_sqrt_plus_1=$(echo \"$n_sqrt_plus_1_sqrt_int + 1\" | bc)\n  local n_sqrt_plus_1_sqrt_plus_1_sqrt=$(echo \"sqrt($n_sqrt_plus_1_sqrt_plus_1)\" | bc)\n  local n_sqrt_plus_1_sqrt_plus_1_sqrt_int=$(echo \"$n_sqrt_plus_1_sqrt_plus_1_sqrt\" | cut -d. -f1)\n  local n_sqrt_plus_1_sqrt_plus_1_sqrt_dec=$(echo \"$n_sqrt_plus_1_sqrt_plus_1_sqrt\" | cut -d. -f2)\n  if [ \"$n_sqrt_plus_1_sqrt_plus_1_sqrt_dec\" != \"0\" ]; then\n    return 1",
    "  local n=$1\n  local nth_octagonal=$(echo \"scale=0; (sqrt(1+24*$n)+1)/6\" | bc)\n  local octagonal=$(echo \"scale=0; $nth_octagonal*(3*$nth_octagonal-2)/2\" | bc)\n  if [ $octagonal -eq $n ]; then\n    echo 1\n  else\n    echo 0\n  fi",
    "    local n=$1\n    local a=$(echo \"scale=0; sqrt(2*$n)\" | bc)\n    local b=$(echo \"scale=0; $a*(3*$a-2)\" | bc)\n    [ $b -eq $n ]",
    "    local n=$1\n    local x=$(echo \"scale=0; sqrt(1+24*$n)\" | bc)\n    local y=$(echo \"scale=0; $x % 6\" | bc)\n    if [ $y -eq 0 ]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local n=$1\n    local octagonal=$(echo \"scale=0; (sqrt(1+24*$n)+1)/6\" | bc)\n    if [ $octagonal -eq $(echo \"scale=0; (sqrt(1+24*$n)+1)/6\" | bc) ]; then\n        echo 1\n    else\n        echo 0\n    fi",
    "    local n=$1\n    local x=$(echo \"sqrt(2*$n+0.125)+0.5\" | bc -l)\n    local y=$(echo \"$x*$x\" | bc -l)\n    local z=$(echo \"$y+0.125\" | bc -l)\n    local w=$(echo \"sqrt($z)\" | bc -l)\n    local v=$(echo \"$w*$w\" | bc -l)\n    local u=$(echo \"$v+0.125\" | bc -l)\n    local t=$(echo \"sqrt($u)\" | bc -l)\n    local s=$(echo \"$t*$t\" | bc -l)\n    local r=$(echo \"$s+0.125\" | bc -l)\n    local q=$(echo \"sqrt($r)\" | bc -l)\n    local p=$(echo \"$q*$q\" | bc -l)\n    local o=$(echo \"$p+0.125\" | bc -l)\n    local m=$(echo \"sqrt($o)\" | bc -l)\n    local l=$(echo \"$m*$m\" | bc -l)\n    local k=$(echo \"$l+0.125\" | bc -l)\n    local j=$(echo \"sqrt($k)\" | bc -l)\n    local i=$(echo \"$j*$j\" | bc -l)\n    local h=$(echo \"$i+0.125\" | bc -l)\n    local g=$(echo \"sqrt($h)\" | bc -l)\n    local f=$(echo \"$g*$g\" | bc -l)\n    local e=$(echo \"$f+0.125\" | bc -l)\n    local d=$(echo \"sqrt($e)\" | bc -l)\n    local c=$(echo \"$d*$d\" | bc -l)\n    local b=$(echo \"$c+0.125\" | bc -l)\n    local a=$(echo \"sqrt($b)\" | bc -l)\n    local aa=$(echo \"$a*$a\" | bc -l)\n    local ab=$(echo \"$aa+0.125\" | bc -l",
    "  local n=$1\n  local n_sqrt=$(echo \"sqrt($n)\" | bc)\n  local n_sqrt_int=$(echo \"$n_sqrt / 1\" | bc)\n  local n_sqrt_int_sqrt=$(echo \"$n_sqrt_int * $n_sqrt_int\" | bc)\n  if [ $n_sqrt_int_sqrt -eq $n ]; then\n    return 0\n  else\n    return 1\n  fi",
    "    local n=$1\n    local n_sqrt=$(echo \"sqrt($n)\" | bc)\n    local n_sqrt_int=$(echo \"$n_sqrt / 1\" | bc)\n    local n_sqrt_int_sqr=$(echo \"$n_sqrt_int * $n_sqrt_int\" | bc)\n    local n_sqrt_int_sqr_plus_n_sqrt_int=$(echo \"$n_sqrt_int_sqr + $n_sqrt_int\" | bc)\n    local n_sqrt_int_sqr_plus_n_sqrt_int_div_2=$(echo \"$n_sqrt_int_sqr_plus_n_sqrt_int / 2\" | bc)\n    local n_sqrt_int_sqr_plus_n_sqrt_int_div_2_times_8=$(echo \"$n_sqrt_int_sqr_plus_n_sqrt_int_div_2 * 8\" | bc)\n    if [ \"$n\" -eq \"$n_sqrt_int_sqr_plus_n_sqrt_int_div_2_times_8\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    local n=$1\n    local nth_octagonal=$(echo \"scale=0; (sqrt(1+24*$n)+1)/6\" | bc)\n    local octagonal=$(echo \"scale=0; $nth_octagonal*(3*$nth_octagonal-2)\" | bc)\n    if [ $n -eq $octagonal ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "  local n=$1\n  local x\n  x=$(echo \"sqrt(2*$n+1/3)\" | bc -l)\n  if [[ $(echo \"$x % 1\" | bc -l) == 0 ]]; then\n    echo \"$n is octagonal\"\n  else\n    echo \"$n is not octagonal\"\n  fi",
    "    local n=$1\n    local a=$(echo \"scale=0; sqrt(2*$n)\" | bc)\n    local b=$(echo \"scale=0; $a*$a\" | bc)\n    local c=$(echo \"scale=0; $b+$a\" | bc)\n    local d=$(echo \"scale=0; $c/2\" | bc)\n    local e=$(echo \"scale=0; $d*$d\" | bc)\n    local f=$(echo \"scale=0; $e-$n\" | bc)\n    local g=$(echo \"scale=0; $f/2\" | bc)\n    local h=$(echo \"scale=0; $g*$g\" | bc)\n    local i=$(echo \"scale=0; $h+$n\" | bc)\n    local j=$(echo \"scale=0; $i/2\" | bc)\n    local k=$(echo \"scale=0; $j*$j\" | bc)\n    local l=$(echo \"scale=0; $k-$n\" | bc)\n    local m=$(echo \"scale=0; $l/2\" | bc)\n    local o=$(echo \"scale=0; $m*$m\" | bc)\n    if [ $o -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
    "    local n=$1\n    local x\n    x=$(echo \"sqrt(2*$n+1/3)\" | bc -l)\n    if [[ $x == *.* ]]; then\n        return 1\n    fi\n    return 0"
  ]
}