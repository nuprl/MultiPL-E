{
  "name": "mbpp_635_heap_sort",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort the given list.\n#\n# $1 is a space-separated list\nheap_sort() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    heap_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9 2 4 6 8 0\") = \"0 1 2 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 25 58\") = \"14 22 25 25 35 58 65 75 85\" ]]\n    [[ $(candidate \"7 1 9 5\") = \"1 5 7 9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local list=$1\n  local length=${#list}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify $list $length $i\n  done\n\n  # Extract the elements from the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list:0:1}\n    list=${list:1}\n    list=${list:0:i}${temp}${list:i}\n    heapify $list $i 0\n  done\n\n  echo $list",
    "    local list=($1)\n    local i\n    local j\n    local tmp\n    local n=${#list[@]}\n    local parent\n    local child\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while ((child < n)); do\n            if ((child + 1 < n && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                tmp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$tmp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        parent=0\n        child=$((2 * parent + 1))\n        while ((child < i)); do\n            if ((child + 1 < i && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                tmp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$tmp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local n=${#list[@]}\n    local temp\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        temp=${list[$i]}\n\n        while ((2*k+1<n)); do\n            j=$((2*k+1))\n            if ((j<n-1)) && ((${list[$j]}<${list[$((j+1))]})); then\n                j=$((j+1))\n            fi\n            if ((temp>=${list[$j]})); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$temp\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        temp=${list[$i]}\n        list[$i]=${list[0]}\n        list[0]=$temp\n\n        k=0\n        while ((2*k+1<i)); do\n            j=$((2*k+1))\n            if ((j<i-1)) && ((${list[$j]}<${list[$((j+1))]})); then\n                j=$((j+1))\n            fi\n            if ((${list[$k]}>=${list[$j]})); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$temp\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local tmp\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  # Heap sort\n  for ((i = n - 1; i > 0; i--)); do\n    tmp = list[0]\n    list[0] = list[i]\n    list[i] = tmp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i i j k\n    local -i n=${#list[@]}\n    local -i last_parent=$((n/2-1))\n    local -i max_child\n    local -i tmp\n\n    # Build the heap\n    for ((i=last_parent; i>=0; i--)); do\n        j=$i\n        while ((j<=last_parent)); do\n            k=$((2*j+1))\n            if ((k<n-1 && list[k]<list[k+1])); then\n                k=$((k+1))\n            fi\n            if ((list[j]>=list[k])); then\n                break\n            fi\n            tmp=list[j]\n            list[j]=list[k]\n            list[k]=$tmp\n            j=$k\n        done\n    done\n\n    # Sort the heap\n    for ((i=n-1; i>0; i--)); do\n        tmp=list[0]\n        list[0]=list[i]\n        list[i]=$tmp\n        j=0\n        while ((j<=last_parent)); do\n            k=$((2*j+1))\n            if ((k<i-1 && list[k]<list[k+1])); then\n                k=$((k+1))\n            fi\n            if ((k>=i || list[j]>=list[k])); then\n                break\n            fi\n            tmp=list[j]\n            list[j]=list[k]\n            list[k]=$tmp\n            j=$k\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # Extract the elements from the heap\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $length\n  done\n\n  # Extract the elements from the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local temp\n    local n=${#list[@]}\n    for (( i = n / 2 - 1; i >= 0; i-- )); do\n        heapify \"${list[@]}\" $i $n\n    done\n    for (( i = n - 1; i >= 0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < n)); do\n      if ((child + 1 < n && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local t\n    local heap_size\n    local l\n    local r\n    local largest\n\n    # Build heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heap_size=$n\n        while true; do\n            l=$((2 * i + 1))\n            r=$((2 * i + 2))\n            largest=$i\n            if [[ $l -lt $heap_size && ${list[$l]} -gt ${list[$largest]} ]]; then\n                largest=$l\n            fi\n            if [[ $r -lt $heap_size && ${list[$r]} -gt ${list[$largest]} ]]; then\n                largest=$r\n            fi\n            if [[ $largest -eq $i ]]; then\n                break\n            fi\n            t=${list[$i]}\n            list[$i]=${list[$largest]}\n            list[$largest]=$t\n            i=$largest\n        done\n    done\n\n    # Sort\n    for ((i = n - 1; i > 0; i--)); do\n        t=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$t\n        heap_size=$i\n        j=0\n        while true; do\n            l=$((2 * j + 1))\n            r=$((2 * j + 2))\n            largest=$j\n            if [[ $l -lt $heap_size && ${list[$l]} -gt ${list[$largest]} ]]; then\n                largest=$l\n            fi\n            if [[ $r -lt $heap_size && ${list[$r]} -gt ${list[$largest]} ]]; then\n                largest=$r\n            fi\n            if [[ $largest -eq $j ]]; then\n                break\n            fi\n            t=${list[$j]}\n            list[$j]=${list[$largest]}\n            list[$largest]=$t\n            j=$largest\n        done\n    done\n\n    # Print\n    for ((i = 0; i < n; i",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $len\n    done\n    for ((i = len - 1; i >= 0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" 0 $i\n    done\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local heap_size=\"$2\"\n    local i\n    local j\n    local tmp\n\n    # Build the heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" \"$heap_size\" \"$i\"\n    done\n\n    # Extract the elements one by one\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        # Move the root to the end\n        tmp=\"${list[$i]}\"\n        list[$i]=\"${list[0]}\"\n        list[0]=\"$tmp\"\n\n        # Heapify the remaining elements\n        heapify \"$list\" \"$i\" \"0\"\n    done",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n    # Build the heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < len)); do\n            j = 2 * k + 1\n            if ((j < len - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n    # Sort the heap\n    for ((i = len - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = tmp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n    echo \"${list[@]}\"",
    "    local list=$1\n    local size=${#list}\n    local i\n    local j\n    local temp\n\n    # Build max heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" \"$size\" \"$i\"\n    done\n\n    # One by one extract an element from heap\n    for ((i = size - 1; i > 0; i--)); do\n        # Move current root to end\n        temp=${list:0:1}\n        list=${list:1}\n        list=${list:0:$i}${temp}${list:$i}\n\n        # call max heapify on the reduced heap\n        heapify \"$list\" \"$i\" \"0\"\n    done",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j + 1 < n && list[j] < list[j + 1])); then\n                j += 1\n            fi\n            if ((list[k] < list[j])); then\n                t = list[k]\n                list[k] = list[j]\n                list[j] = t\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = n - 1; i > 0; i--)); do\n        t = list[0]\n        list[0] = list[i]\n        list[i] = t\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j + 1 < i && list[j] < list[j + 1])); then\n                j += 1\n            fi\n            if ((list[k] < list[j])); then\n                t = list[k]\n                list[k] = list[j]\n                list[j] = t\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=$1\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local n=0\n  local m=0\n  local l=0\n  local r=0\n  local s=0\n  local t=0\n  local heap=()\n\n  # Convert the list to an array.\n  read -a array <<< \"$list\"\n\n  # Get the length of the array.\n  n=${#array[@]}\n\n  # Build the heap.\n  for ((i=n/2-1; i>=0; i--)); do\n    # Initialize the index of the parent node.\n    j=$i\n\n    # Initialize the index of the child node.\n    k=$j*2+1\n\n    # Save the value of the parent node.\n    temp=${array[$j]}\n\n    # While the child node is less than the length of the array.\n    while ((k<n)); do\n      # If the right child node exists and is greater than the left child node.\n      if ((k+1<n && array[k]<array[k+1])); then\n        # Increment the index of the child node.\n        ((k++))\n      fi\n\n      # If the value of the child node is greater than the value of the parent node.\n      if ((array[k]>temp)); then\n        # Swap the values of the parent node and the child node.\n        array[$j]=${array[k]}\n        array[$k]=$temp\n\n        # Update the index of the parent node.\n        j=$k\n\n        # Update the index of the child node.\n        k=$j*2+1\n      else\n        # Break out of the loop.\n        break\n      fi\n    done\n  done\n\n  # Sort the heap.\n  for ((i=n-1; i>=0; i--)); do\n    # Swap the first and last elements.\n    temp=${array[0]}\n    array[0]=${array[i]}\n    array[i]=$temp\n\n    # Initialize the index of the parent node.\n    j=0\n\n    # Initialize the index of the child node.\n    k=$",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local n=${#list[@]}\n  local temp=0\n\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n  local left\n  local right\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Extract the elements from the heap\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    # Build heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Heap sort\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local array=()\n    local i=0\n    for item in $1; do\n        array[$i]=$item\n        ((i++))\n    done\n\n    local length=${#array[@]}\n    for ((i=length/2-1; i>=0; i--)); do\n        heapify ${array[@]} $i $length\n    done\n\n    for ((i=length-1; i>=0; i--)); do\n        swap ${array[@]} 0 $i\n        heapify ${array[@]} 0 $i\n    done\n\n    echo ${array[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local heap_size=${#list[@]}\n  local largest\n\n  for ((i=n/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i-1))\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local tmp=0\n\n    # Build heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Heap sort\n    for ((i = length - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#list[@]}\n    local -i temp=0\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = n - 1; i > 0; i--)); do\n        temp = list[0]\n        list[0] = list[i]\n        list[i] = temp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local size=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build the heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while [[ $child -lt $size ]]; do\n            if [[ $child -lt $((size - 1)) ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n                child=$((child + 1))\n            fi\n            if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n                temp=${list[$parent]}\n                list[$parent]=${list[$child]}\n                list[$child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = size - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        parent=0\n        child=$((2 * parent + 1))\n        while [[ $child -lt $i ]]; do\n            if [[ $child -lt $((i - 1)) ]] && [[ ${list[$child]} -lt ${list[$((child + 1))]} ]]; then\n                child=$((child + 1))\n            fi\n            if [[ ${list[$parent]} -lt ${list[$child]} ]]; then\n                temp=${list[$parent]}\n                list[$parent]=${list[$child]}\n                list[$child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((${list[j]} < ${list[j + 1]})); then\n        ((j++))\n      fi\n      if ((${list[k]} < ${list[j]})); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    k=0\n    while ((2 * k + 1 < i)); do\n      j=2*k+1\n      if ((j < i - 1)) && ((${list[j]} < ${list[j + 1]})); then\n        ((j++))\n      fi\n      if ((${list[k]} < ${list[j]})); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i=1; i<n; i++))\n  do\n    j=$i\n    while ((j>0))\n    do\n      parent=$((j-1))\n      if ((${list[$parent]} < ${list[$j]}))\n      then\n        temp=${list[$parent]}\n        list[$parent]=${list[$j]}\n        list[$j]=$temp\n      fi\n      j=$parent\n    done\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--))\n  do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    parent=0\n    while ((1))\n    do\n      child=$((2*parent+1))\n      if ((child >= i))\n      then\n        break\n      fi\n      if ((child+1 < i)) && ((${list[$child]} < ${list[$((child+1))]}))\n      then\n        ((child++))\n      fi\n      if ((${list[$parent]} < ${list[$child]}))\n      then\n        temp=${list[$parent]}\n        list[$parent]=${list[$child]}\n        list[$child]=$temp\n      else\n        break\n      fi\n      parent=$child\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local tmp\n  local k\n\n  # build heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    k = $i\n    while ((2 * k + 1 < len)); do\n      j = 2 * k + 1\n      if ((j < len - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = ${list[k]}\n        list[k] = ${list[j]}\n        list[j] = $tmp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  # sort\n  for ((i = len - 1; i > 0; i--)); do\n    tmp = ${list[0]}\n    list[0] = ${list[i]}\n    list[i] = $tmp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = ${list[k]}\n        list[k] = ${list[j]}\n        list[j] = $tmp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build the max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        while true; do\n            child=$((parent * 2 + 1))\n            if ((child >= n)); then\n                break\n            fi\n            if ((child + 1 < n && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n            else\n                break\n            fi\n        done\n    done\n\n    # Heap sort\n    for ((i = n - 1; i >= 1; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        parent=0\n        while true; do\n            child=$((parent * 2 + 1))\n            if ((child >= i)); then\n                break\n            fi\n            if ((child + 1 < i && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the result\n    for ((i = 0; i < n; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n=${#list[@]}\n  local temp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp = list[0]\n    list[0] = list[i]\n    list[i] = temp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n    local heap_size=${#list[@]}\n\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        tmp=${list[$i]}\n        while ((2*k+1<heap_size)); do\n            j=$((2*k+1))\n            if ((j<heap_size-1)) && ((list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((tmp>=list[j])); then\n                break\n            else\n                list[k]=${list[j]}\n                k=$j\n            fi\n        done\n        list[k]=$tmp\n    done\n\n    for ((i=len-1; i>=0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heap_size=$((heap_size-1))\n        k=0\n        while ((2*k+1<heap_size)); do\n            j=$((2*k+1))\n            if ((j<heap_size-1)) && ((list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((list[k]>=list[j])); then\n                break\n            else\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=($1)\n    local heap_size=${#list[@]}\n    local i\n    local temp\n    local left\n    local right\n    local largest\n\n    # Build a max heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify list[@] $i $heap_size\n    done\n\n    # Extract elements one by one\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify list[@] 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "  local -a list=($1)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#list[@]}\n  local -i temp=0\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # One by one extract an element from heap\n  for ((i = n - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    # call max heapify on the reduced heap\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local length=$(echo \"$list\" | wc -w)\n    local i\n    local j\n    local k\n    local temp\n    local heap_size=$length\n\n    # Build a max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" $i $heap_size\n    done\n\n    # One by one extract an element from heap\n    for ((i = length - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=$(echo \"$list\" | cut -d ' ' -f 1)\n        list=$(echo \"$list\" | cut -d ' ' -f 2-)\n        list=\"$list $temp\"\n\n        # call max heapify on the reduced heap\n        heapify \"$list\" 0 $i\n    done\n\n    echo \"$list\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n\n  local tmp\n\n  n=${#list[@]}\n\n  # Build the heap in array list, where:\n  # list[0] is the root of the heap\n  # the subtrees of list[i] are list[2*i+1] and list[2*i+2]\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k=$i\n    tmp=${list[k]}\n\n    while ((2 * k + 1 < n)); do\n      j=$((2 * k + 1))\n\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j=$((j + 1))\n      fi\n\n      if [[ ${list[j]} -le $tmp ]]; then\n        break\n      fi\n\n      list[k]=${list[j]}\n      k=$j\n    done\n\n    list[k]=$tmp\n  done\n\n  # Delete the root and rebuild the heap\n  while ((n > 0)); do\n    tmp=${list[n - 1]}\n    list[n - 1]=${list[0]}\n    list[0]=$tmp\n    n=$((n - 1))\n\n    k=0\n    tmp=${list[k]}\n\n    while ((2 * k + 1 < n)); do\n      j=$((2 * k + 1))\n\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j=$((j + 1))\n      fi\n\n      if [[ ${list[j]} -le $tmp ]]; then\n        break\n      fi\n\n      list[k]=${list[j]}\n      k=$j\n    done\n\n    list[k]=$tmp\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    for ((i=n-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i-1))\n    done\n\n    echo \"${list[@]}\"",
    "  local list=$1\n  local i=0\n  local j=0\n  local tmp=0\n  local len=0\n  local left=0\n  local right=0\n  local largest=0\n\n  len=`echo $list | wc -w`\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    heapify $list $i $len\n  done\n  for ((i = len - 1; i >= 0; i--)); do\n    tmp=`echo $list | cut -d ' ' -f $i`\n    list=`echo $list | sed \"s/\\b$tmp\\b//g\"`\n    list=\"$tmp $list\"\n    heapify $list 0 $i\n  done\n  echo $list",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local tmp\n    local n=${#list[@]}\n\n    # build max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((2 * j + 1 < n)); do\n            k=2 * j + 1\n            if ((k + 1 < n && list[k] < list[k + 1])); then\n                k=$k + 1\n            fi\n            if ((list[j] < list[k])); then\n                tmp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    # sort\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        j=0\n        while ((2 * j + 1 < i)); do\n            k=2 * j + 1\n            if ((k + 1 < i && list[k] < list[k + 1])); then\n                k=$k + 1\n            fi\n            if ((list[j] < list[k])); then\n                tmp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$tmp\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=$1\n    local n=$(echo $list | wc -w)\n    local i\n    local j\n    local k\n    local tmp\n\n    # Build the heap\n    for ((i = n/2; i >= 0; i--)); do\n        for ((j = i; j < n; )); do\n            k = $((2 * j + 1))\n            if [[ $k -lt $n ]]; then\n                if [[ $((k + 1)) -lt $n ]] && [[ ${list[k]} -lt ${list[k + 1]} ]]; then\n                    k=$((k + 1))\n                fi\n                if [[ ${list[j]} -lt ${list[k]} ]]; then\n                    tmp=${list[j]}\n                    list[j]=${list[k]}\n                    list[k]=$tmp\n                    j=$k\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        for ((j = 0; j < i; )); do\n            k=$((2 * j + 1))\n            if [[ $k -lt $i ]]; then\n                if [[ $((k + 1)) -lt $i ]] && [[ ${list[k]} -lt ${list[k + 1]} ]]; then\n                    k=$((k + 1))\n                fi\n                if [[ ${list[j]} -lt ${list[k]} ]]; then\n                    tmp=${list[j]}\n                    list[j]=${list[k]}\n                    list[k]=$tmp\n                    j=$k\n                else\n                    break\n                fi\n            else\n                break\n            fi\n        done\n    done\n    echo $list",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n    for ((i=n/2-1; i>=0; i--))\n    do\n        heapify \"${list[@]}\" $i $n\n    done\n    for ((i=n-1; i>=0; i--))\n    do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i-1))\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local largest=0\n    local left=0\n    local right=0\n    local heap_size=$length\n\n    # Build the heap\n    for ((i=$((length/2-1)); i>=0; i--)); do\n        heapify \"${list[@]}\" $i $length\n    done\n\n    # Extract the elements from the heap\n    for ((i=$((length-1)); i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        heap_size=$((heap_size-1))\n        heapify \"${list[@]}\" 0 $heap_size\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local size=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = size / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < size)); do\n      if ((child + 1 < size && list[child] < list[child + 1])); then\n        ((child++))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        ((parent = child))\n        ((child = 2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = size - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    ((parent = 0))\n    ((child = 2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        ((child++))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        ((parent = child))\n        ((child = 2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  for ((i=len/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $len $i\n  done\n  for ((i=len-1; i>=0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" $i 0\n  done\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n\n    # Build max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Heap sort\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        k = $i\n        while ((2 * k + 1 < length)); do\n            j = 2 * k + 1\n            if ((j < length - 1)) && ((list[j] < list[j + 1])); then\n                j = $j + 1\n            fi\n            if ((list[k] < list[j])); then\n                temp = ${list[k]}\n                list[k] = ${list[j]}\n                list[j] = $temp\n                k = $j\n            else\n                break\n            fi\n        done\n    done\n    # Sort the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp = ${list[0]}\n        list[0] = ${list[i]}\n        list[i] = $temp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j = $j + 1\n            fi\n            if ((list[k] < list[j])); then\n                temp = ${list[k]}\n                list[k] = ${list[j]}\n                list[j] = $temp\n                k = $j\n            else\n                break\n            fi\n        done\n    done\n    echo ${list[@]}",
    "  local list=($1)\n  local i\n  local j\n  local tmp\n  local n=${#list[@]}\n\n  # Build max heap\n  for ((i=n/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Heap sort\n  for ((i=n-1; i>=0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$tmp\n    heapify \"${list[@]}\" 0 $((i-1))\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root element and heapify the remaining elements\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local temp\n    local heap_size=$n\n\n    # Build heap\n    for ((i = n/2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Heap sort\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((--heap_size))\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $length\n  done\n  for ((i = length - 1; i >= 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" 0 $i\n  done\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n\n        while [ $child -lt $n ]; do\n            if [ $((child + 1)) -lt $n ] && [ ${list[$child]} -lt ${list[$((child + 1))]} ]; then\n                child=$((child + 1))\n            fi\n\n            if [ ${list[$parent]} -lt ${list[$child]} ]; then\n                temp=${list[$parent]}\n                list[$parent]=${list[$child]}\n                list[$child]=$temp\n            else\n                break\n            fi\n\n            parent=$child\n            child=$((2 * parent + 1))\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        parent=0\n        child=$((2 * parent + 1))\n\n        while [ $child -lt $i ]; do\n            if [ $((child + 1)) -lt $i ] && [ ${list[$child]} -lt ${list[$((child + 1))]} ]; then\n                child=$((child + 1))\n            fi\n\n            if [ ${list[$parent]} -lt ${list[$child]} ]; then\n                temp=${list[$parent]}\n                list[$parent]=${list[$child]}\n                list[$child]=$temp\n            else\n                break\n            fi\n\n            parent=$child\n            child=$((2 * parent + 1))\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n  local left\n  local right\n\n  # Build the heap\n  for ((i=length/2-1; i>=0; i--)); do\n    largest=$i\n    left=$((2*i+1))\n    right=$((2*i+2))\n\n    if [ $left -lt $length ] && [ ${list[$left]} -gt ${list[$largest]} ]; then\n      largest=$left\n    fi\n\n    if [ $right -lt $length ] && [ ${list[$right]} -gt ${list[$largest]} ]; then\n      largest=$right\n    fi\n\n    if [ $largest -ne $i ]; then\n      temp=${list[$i]}\n      list[$i]=${list[$largest]}\n      list[$largest]=$temp\n    fi\n  done\n\n  # Sort the heap\n  for ((i=$length-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n\n    # Rebuild the heap\n    largest=0\n    left=$((2*largest+1))\n    right=$((2*largest+2))\n\n    while [ $left -lt $i ]; do\n      if [ $right -lt $i ] && [ ${list[$right]} -gt ${list[$left]} ]; then\n        largest=$right\n      else\n        largest=$left\n      fi\n\n      if [ ${list[$largest]} -gt ${list[$((largest/2))]} ]; then\n        temp=${list[$((largest/2))]}\n        list[$((largest/2))]=${list[$largest]}\n        list[$largest]=$temp\n      else\n        break\n      fi\n\n      largest=$((largest*2+1))\n      left=$((2*largest+1))\n      right=$((2*largest+2))\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local k=0\n    local l=0\n\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=$1\n    local heap_size=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build a max heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify $i $heap_size\n    done\n\n    # One by one extract an element from heap\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify 0 $((i - 1))\n    done",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n  local largest=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the max element from the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract elements from the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  # Print the sorted list\n  echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n    local -i heap_size\n    local -i l\n    local -i r\n    local -i largest\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heap_size=$n\n        while ((1)); do\n            l=$((2 * i + 1))\n            r=$((2 * i + 2))\n            largest=$i\n            if ((l < heap_size && list[l] > list[largest])); then\n                largest=$l\n            fi\n            if ((r < heap_size && list[r] > list[largest])); then\n                largest=$r\n            fi\n            if ((largest != i)); then\n                t=${list[i]}\n                list[i]=${list[largest]}\n                list[largest]=$t\n                i=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # One by one extract an element from heap\n    for ((i = n - 1; i >= 0; i--)); do\n        # Move current root to end\n        t=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$t\n\n        # call max heapify on the reduced heap\n        heap_size=$i\n        j=0\n        while ((1)); do\n            l=$((2 * j + 1))\n            r=$((2 * j + 2))\n            largest=$j\n            if ((l < heap_size && list[l] > list[largest])); then\n                largest=$l\n            fi\n            if ((r < heap_size && list[r] > list[largest])); then\n                largest=$r\n            fi\n            if ((largest != j)); then\n                t=${list[j]}\n                list[j]=${list[largest]}\n                list[largest]=$t\n                j=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < length)); do\n      if ((child + 1 < length && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local k=0\n    local heap_size=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heap_size=$length\n        while ((2 * i + 1 < heap_size)); do\n            j=2 * i + 1\n            if ((j + 1 < heap_size && list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[i] < list[j])); then\n                temp=${list[i]}\n                list[i]=${list[j]}\n                list[j]=$temp\n                ((i = j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$i\n        k=0\n        while ((2 * k + 1 < heap_size)); do\n            j=2 * k + 1\n            if ((j + 1 < heap_size && list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                temp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$temp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n  local k\n  local heap_size\n\n  # Build heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heap_size=$length\n    while true; do\n      k=$i\n      j=$((2 * k + 1))\n      if [ $j -lt $heap_size ] && [ ${list[j]} -gt ${list[k]} ]; then\n        k=$j\n      fi\n      if [ $j -lt $heap_size ] && [ $((j + 1)) -lt $heap_size ] && \\\n        [ ${list[j + 1]} -gt ${list[k]} ]; then\n        k=$((j + 1))\n      fi\n      if [ $k -eq $i ]; then\n        break\n      fi\n      temp=${list[i]}\n      list[i]=${list[k]}\n      list[k]=$temp\n      i=$k\n    done\n  done\n\n  # Sort heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heap_size=$((heap_size - 1))\n    k=0\n    while true; do\n      j=$((2 * k + 1))\n      if [ $j -lt $heap_size ] && [ ${list[j]} -gt ${list[k]} ]; then\n        k=$j\n      fi\n      if [ $j -lt $heap_size ] && [ $((j + 1)) -lt $heap_size ] && \\\n        [ ${list[j + 1]} -gt ${list[k]} ]; then\n        k=$((j + 1))\n      fi\n      if [ $k -eq $i ]; then\n        break\n      fi\n      temp=${list[i]}\n      list[i]=${list[k]}\n      list[k]=$temp\n      i=$k\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local temp\n    local temp_index\n    local parent_index\n    local left_child_index\n    local right_child_index\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        # Move the current node down the heap\n        temp_index=$i\n        temp=${list[$i]}\n        while ((temp_index < n)); do\n            parent_index=$temp_index\n            left_child_index=$((2 * parent_index + 1))\n            right_child_index=$((2 * parent_index + 2))\n\n            # Find the largest child\n            if ((left_child_index < n && list[left_child_index] > temp)); then\n                temp_index=$left_child_index\n                temp=${list[$left_child_index]}\n            fi\n            if ((right_child_index < n && list[right_child_index] > temp)); then\n                temp_index=$right_child_index\n                temp=${list[$right_child_index]}\n            fi\n\n            # If the largest child is not the current node, swap\n            if ((temp_index != parent_index)); then\n                list[$temp_index]=${list[$parent_index]}\n                list[$parent_index]=$temp\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        # Swap the first and last elements\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        # Move the new first element down the heap\n        temp_index=0\n        temp=${list[0]}\n        while ((temp_index < i)); do\n            parent_index=$temp_index\n            left_child_index=$((2 * parent_index + 1))\n            right_child_index=$((2 * parent_index + 2))\n\n            # Find the largest child\n            if ((left_child_index",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n\n    # Build the heap\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the elements from the heap\n    for ((i=n-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i-1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local temp\n    local j\n    local k\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local size=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i=size/2-1; i>=0; i--)); do\n    parent=$i\n    child=$((2*parent+1))\n    while ((child<size)); do\n      if ((child+1<size && list[child]<list[child+1])); then\n        ((child++))\n      fi\n      if ((list[parent]<list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i=size-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2*parent+1))\n    while ((child<i)); do\n      if ((child+1<i && list[child]<list[child+1])); then\n        ((child++))\n      fi\n      if ((list[parent]<list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2*parent+1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    while ((2 * parent + 1 < n)); do\n      child=$((2 * parent + 1))\n      if ((child + 1 < n && list[child] < list[child + 1])); then\n        ((child++))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        ((parent = child))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    while ((2 * parent + 1 < i)); do\n      child=$((2 * parent + 1))\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        ((child++))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        ((parent = child))\n      else\n        break\n      fi\n    done\n  done\n\n  # Print the sorted list\n  for ((i = 0; i < n; i++)); do\n    echo -n \"${list[i]} \"\n  done\n  echo",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local tmp\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # Extract the root element and heapify the heap\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n=${#list[@]}\n  local tmp\n\n  # Build the heap\n  for ((i=n/2-1; i>=0; i--)); do\n    k=$i\n    while ((2*k+1<n)); do\n      j=2*k+1\n      if ((j<n-1)) && ((list[j]<list[j+1])); then\n        ((j++))\n      fi\n      if ((list[k]<list[j])); then\n        tmp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$tmp\n        ((k=j))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort\n  for ((i=n-1; i>0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    k=0\n    while ((2*k+1<i)); do\n      j=2*k+1\n      if ((j<i-1)) && ((list[j]<list[j+1])); then\n        ((j++))\n      fi\n      if ((list[k]<list[j])); then\n        tmp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$tmp\n        ((k=j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local -a list=($1)\n  local -a heap\n  local -i i=0 j=0 k=0\n  local -i n=${#list[@]}\n  local -i m=0\n  local -i t=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n\n  # Build the heap\n  for ((i=0; i<n; i++)); do\n    heap[i]=${list[i]}\n    j=i\n    while ((j>0)); do\n      k=(j-1)/2\n      if ((heap[k]<heap[j])); then\n        t=${heap[k]}\n        heap[k]=${heap[j]}\n        heap[j]=$t\n      fi\n      ((j=k))\n    done\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    t=${heap[0]}\n    heap[0]=${heap[i]}\n    heap[i]=$t\n    m=$i\n    j=0\n    while ((j<m)); do\n      k=2*j+1\n      if ((k+1<m && heap[k]<heap[k+1])); then\n        ((k++))\n      fi\n      if ((k<m && heap[j]<heap[k])); then\n        t=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$t\n      fi\n      ((j=k))\n    done\n  done\n\n  # Print the sorted list\n  for ((i=0; i<n; i++)); do\n    echo ${heap[i]}\n  done",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local tmp\n  local n=${#list[@]}\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Extract the max element from the heap\n  for ((i = n - 1; i >= 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "  local -a list\n  local -i i\n  local -i j\n  local -i k\n  local -i n\n  local -i m\n  local -i t\n  list=($1)\n  n=${#list[@]}\n  for ((i=n/2; i>=0; i--)); do\n    k=i\n    m=2*k\n    while ((m<n)); do\n      if ((m+1<n && list[m]<list[m+1])); then\n        ((m++))\n      fi\n      if ((list[k]<list[m])); then\n        t=list[k]\n        list[k]=list[m]\n        list[m]=t\n        ((k=m))\n        ((m=2*k))\n      else\n        break\n      fi\n    done\n  done\n  for ((i=n-1; i>0; i--)); do\n    t=list[0]\n    list[0]=list[i]\n    list[i]=t\n    k=0\n    m=2*k\n    while ((m<i)); do\n      if ((m+1<i && list[m]<list[m+1])); then\n        ((m++))\n      fi\n      if ((list[k]<list[m])); then\n        t=list[k]\n        list[k]=list[m]\n        list[m]=t\n        ((k=m))\n        ((m=2*k))\n      else\n        break\n      fi\n    done\n  done\n  for ((i=0; i<n; i++)); do\n    echo -n \"${list[i]} \"\n  done\n  echo",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < length)); do\n      if ((child + 1 < length && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    # Build the heap\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract elements from the heap\n    for ((i=n-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i-1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=$1\n    local length=${#list}\n    local i=0\n    local j=0\n    local temp=0\n    local temp_list=()\n    local result=()\n\n    # Build a max heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify $list $length $i\n    done\n\n    # Extract elements from the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        heapify $list $i 0\n    done\n\n    # Convert array to string\n    for ((i = 0; i < length; i++)); do\n        result[$i]=${list[$i]}\n    done\n\n    echo ${result[@]}",
    "    local list=$1\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local largest=0\n    local left=0\n    local right=0\n\n    # Build the heap\n    for ((i=length/2-1; i>=0; i--)); do\n        heapify $list $length $i\n    done\n\n    # Extract the elements\n    for ((i=length-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify $list $i 0\n    done",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local largest\n    local left\n    local right\n\n    # Build a heap\n    for ((i=length/2-1; i>=0; i--)); do\n        largest=$i\n        left=$((2*i+1))\n        right=$((2*i+2))\n        if [[ $left -lt $length && ${list[$left]} -gt ${list[$largest]} ]]; then\n            largest=$left\n        fi\n        if [[ $right -lt $length && ${list[$right]} -gt ${list[$largest]} ]]; then\n            largest=$right\n        fi\n        if [[ $largest -ne $i ]]; then\n            temp=${list[$i]}\n            list[$i]=${list[$largest]}\n            list[$largest]=$temp\n        fi\n    done\n\n    # Extract the elements from the heap\n    for ((i=length-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        largest=0\n        left=$((2*largest+1))\n        right=$((2*largest+2))\n        if [[ $left -lt $i && ${list[$left]} -gt ${list[$largest]} ]]; then\n            largest=$left\n        fi\n        if [[ $right -lt $i && ${list[$right]} -gt ${list[$largest]} ]]; then\n            largest=$right\n        fi\n        if [[ $largest -ne 0 ]]; then\n            temp=${list[0]}\n            list[0]=${list[$largest]}\n            list[$largest]=$temp\n        fi\n    done\n\n    # Print the sorted list\n    for ((i=0; i<length; i++)); do\n        echo -n \"${list[$i]} \"\n    done\n    echo",
    "    local list=\"$1\"\n    local size=\"$2\"\n    local i\n    local j\n    local tmp\n\n    for ((i=size/2-1; i>=0; i--)); do\n        heapify \"$list\" \"$size\" \"$i\"\n    done\n\n    for ((i=size-1; i>=0; i--)); do\n        tmp=\"$(echo \"$list\" | cut -d' ' -f1)\"\n        list=\"$(echo \"$list\" | cut -d' ' -f2-)\"\n        list=\"$(echo \"$list\" | sed -e \"s/^$tmp / /\" -e \"s/ $tmp$/ /\" -e \"s/ $tmp / /\")\"\n        list=\"$tmp $list\"\n        heapify \"$list\" \"$i\" \"0\"\n    done\n\n    echo \"$list\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n\n  # Build a max heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Heap sort\n  for ((i = length - 1; i > 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local len=${#list[@]}\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local heap_size=0\n\n  # Build a heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    heap_size=$len\n    while ((1)); do\n      k=$i\n      j=$((2 * k + 1))\n      if ((j < heap_size && list[j] < list[j + 1])); then\n        j=$((j + 1))\n      fi\n      if ((j < heap_size && list[k] < list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = len - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heap_size=$i\n    k=0\n    while ((1)); do\n      j=$((2 * k + 1))\n      if ((j < heap_size && list[j] < list[j + 1])); then\n        j=$((j + 1))\n      fi\n      if ((j < heap_size && list[k] < list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=$j\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n\n  # Build the heap\n  for ((i = n/2 - 1; i >= 0; i--)); do\n    heapify $i $n \"${list[@]}\"\n  done\n\n  # Heap sort\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify 0 $i \"${list[@]}\"\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local temp\n    local n=${#list[@]}\n\n    for ((i = n / 2 - 1; i >= 0; i--))\n    do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    for ((i = n - 1; i >= 0; i--))\n    do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract the root element and heapify the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n    for ((i=n-1; i>=0; i--)); do\n        list[0]=$((${list[0]} ^ ${list[i]}))\n        list[i]=$((${list[0]} ^ ${list[i]}))\n        list[0]=$((${list[0]} ^ ${list[i]}))\n        heapify \"${list[@]}\" $i 0\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n    local l\n    local m\n    local heap_size=$n\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        temp=${list[k]}\n        while ((k<n/2)); do\n            j=$((2*k+1))\n            if ((j<n-1 && list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((temp>=list[j])); then\n                break\n            fi\n            list[k]=${list[j]}\n            k=$j\n        done\n        list[k]=$temp\n    done\n\n    while ((heap_size>1)); do\n        temp=${list[0]}\n        list[0]=${list[heap_size-1]}\n        list[heap_size-1]=$temp\n        heap_size=$((heap_size-1))\n        k=0\n        temp=${list[k]}\n        while ((k<heap_size/2)); do\n            j=$((2*k+1))\n            if ((j<heap_size-1 && list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((temp>=list[j])); then\n                break\n            fi\n            list[k]=${list[j]}\n            k=$j\n        done\n        list[k]=$temp\n    done\n\n    echo ${list[@]}",
    "    local list=\"$1\"\n    local heap_size=\"$2\"\n    local i\n    local j\n    local temp\n    for ((i=heap_size/2-1; i>=0; i--)); do\n        heapify \"$list\" \"$heap_size\" \"$i\"\n    done\n    for ((i=heap_size-1; i>=0; i--)); do\n        temp=\"$(echo \"$list\" | cut -d' ' -f1)\"\n        list=\"$(echo \"$list\" | cut -d' ' -f2-)\"\n        list=\"$(echo \"$list\" | cut -d' ' -f1-$i)\"\n        list=\"$temp $list\"\n        heapify \"$list\" \"$i\" \"0\"\n    done\n    echo \"$list\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract the elements from the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=$1\n  local heap_size=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build a max heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    heapify $list $heap_size $i\n  done\n\n  # One by one extract an element from heap\n  for ((i = heap_size - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    # call max heapify on the reduced heap\n    heapify $list $i 0\n  done",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n\n    for ((i = n/2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "  local list=$1\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local n=0\n  local n2=0\n  local n3=0\n  local n4=0\n  local n5=0\n  local n6=0\n  local n7=0\n  local n8=0\n  local n9=0\n  local n10=0\n  local n11=0\n  local n12=0\n  local n13=0\n  local n14=0\n  local n15=0\n  local n16=0\n  local n17=0\n  local n18=0\n  local n19=0\n  local n20=0\n  local n21=0\n  local n22=0\n  local n23=0\n  local n24=0\n  local n25=0\n  local n26=0\n  local n27=0\n  local n28=0\n  local n29=0\n  local n30=0\n  local n31=0\n  local n32=0\n  local n33=0\n  local n34=0\n  local n35=0\n  local n36=0\n  local n37=0\n  local n38=0\n  local n39=0\n  local n40=0\n  local n41=0\n  local n42=0\n  local n43=0\n  local n44=0\n  local n45=0\n  local n46=0\n  local n47=0\n  local n48=0\n  local n49=0\n  local n50=0\n  local n51=0\n  local n52=0\n  local n53=0\n  local n54=0\n  local n55=0\n  local n56=0\n  local n57=0\n  local n58=0\n  local n59=0\n  local n60=0\n  local n61=0\n  local n62=0\n  local n63=0\n  local n64=0\n  local n65=0\n  local n66=0\n  local n67=0\n  local n68=0\n  local n69=0",
    "    local list=($1)\n    local i=0\n    local j=0\n    local tmp=0\n    local n=${#list[@]}\n    local parent=0\n    local child=0\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while [ $child -lt $n ]; do\n            if [ $((child + 1)) -lt $n ] && [ ${list[$child]} -lt ${list[$((child + 1))]} ]; then\n                child=$((child + 1))\n            fi\n            if [ ${list[$parent]} -lt ${list[$child]} ]; then\n                tmp=${list[$parent]}\n                list[$parent]=${list[$child]}\n                list[$child]=$tmp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$tmp\n\n        parent=0\n        child=$((2 * parent + 1))\n        while [ $child -lt $i ]; do\n            if [ $((child + 1)) -lt $i ] && [ ${list[$child]} -lt ${list[$((child + 1))]} ]; then\n                child=$((child + 1))\n            fi\n            if [ ${list[$parent]} -lt ${list[$child]} ]; then\n                tmp=${list[$parent]}\n                list[$parent]=${list[$child]}\n                list[$child]=$tmp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n  local left=0\n  local right=0\n  local largest=0\n\n  # Build a max heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract elements one by one\n  for ((i = length - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    # Call max heapify on the reduced heap\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=$1\n    local length=${#list}\n    local i=0\n    local j=0\n    local temp=0\n    local k=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify $list $length $i\n    done\n\n    # Extract elements one by one\n    for ((i = length - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list:0:1}\n        list=${list:1}\n        list=${list:0:$i}${temp}${list:$i}\n\n        # call max heapify on the reduced heap\n        heapify $list $i 0\n    done",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local tmp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < n)); do\n      if ((child + 1 < n && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n  local heap_size=$n\n\n  # Build a max heap\n  for ((i = n/2 - 1; i >= 0; i--)); do\n    heapify $i $n \"${list[@]}\"\n  done\n\n  # One by one extract an element from heap\n  for ((i = n - 1; i > 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    # call max heapify on the reduced heap\n    heapify 0 $((i - 1)) \"${list[@]}\"\n  done\n\n  echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i temp\n    local -i largest\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # Extract elements one by one\n    for ((i = n - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # Call max heapify on the reduced heap\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local temp\n    local n=${#list[@]}\n\n    # Build max-heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = $i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                temp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$temp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Heap sort\n    while ((n > 0)); do\n        temp=${list[0]}\n        list[0]=${list[n - 1]}\n        list[n - 1]=$temp\n        ((n--))\n        k=0\n        while ((2 * k + 1 < n)); do\n            j=2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                temp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$temp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local n\n    local temp\n    n=${#list[@]}\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n    while ((n > 0)); do\n        temp = list[0]\n        list[0] = list[n - 1]\n        list[n - 1] = temp\n        n--\n        k = 0\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                temp = list[k]\n                list[k] = list[j]\n                list[j] = temp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n    echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local length=$(echo \"$list\" | wc -w)\n  local i=0\n  local j=0\n  local temp=0\n  local parent=0\n  local child=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while [ $child -lt $length ]; do\n      if [ $child -lt $((length - 1)) ] && \\\n        [ $(echo \"$list\" | cut -d ' ' -f $((child + 1))) -gt $(echo \"$list\" | cut -d ' ' -f $((child + 2))) ]; then\n        child=$((child + 1))\n      fi\n      if [ $(echo \"$list\" | cut -d ' ' -f $((parent + 1))) -lt $(echo \"$list\" | cut -d ' ' -f $((child + 1))) ]; then\n        temp=$(echo \"$list\" | cut -d ' ' -f $((parent + 1)))\n        list=$(echo \"$list\" | sed -e \"s/\\b$temp\\b/$(echo \"$list\" | cut -d ' ' -f $((child + 1)))/\")\n        list=$(echo \"$list\" | sed -e \"s/\\b$(echo \"$list\" | cut -d ' ' -f $((child + 1)))\\b/$temp/\")\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=$(echo \"$list\" | cut -d ' ' -f 1)\n    list=$(echo \"$list\" | sed -e \"s/\\b$temp\\b/$(echo \"$list\" | cut -d ' ' -f $((i + 1)))/\")\n    list=$(echo \"$list\" | sed -e \"s/\\b$(echo \"$list\" | cut -d ' ' -f $((i + 1)))\\b/$temp/\")\n    parent=0\n    child=1\n",
    "  local list=($1)\n  local size=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  for ((i = size / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $size $i\n  done\n\n  for ((i = size - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=$1\n    local i\n    local j\n    local k\n    local n\n    local tmp\n    local heap_size\n\n    # Build the heap\n    n=0\n    for i in $list; do\n        n=$((n+1))\n        heap[$n]=$i\n    done\n    heap_size=$n\n\n    for ((i=heap_size; i>=2; i--)); do\n        # Swap the first and the last element\n        tmp=${heap[1]}\n        heap[1]=${heap[$i]}\n        heap[$i]=$tmp\n\n        # Heapify the heap\n        k=1\n        while true; do\n            j=$((2*k))\n            if [ $j -gt $((i-1)) ]; then\n                break\n            fi\n            if [ $j -lt $((i-1)) ] && [ ${heap[$j]} -lt ${heap[$((j+1))]} ]; then\n                j=$((j+1))\n            fi\n            if [ ${heap[$k]} -lt ${heap[$j]} ]; then\n                tmp=${heap[$k]}\n                heap[$k]=${heap[$j]}\n                heap[$j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the heap\n    for ((i=1; i<=heap_size; i++)); do\n        echo -n \"${heap[$i]} \"\n    done\n    echo",
    "    local list=$1\n    local heap_size=${#list[@]}\n    local i\n    local j\n    local temp\n\n    build_max_heap $list\n\n    for (( i = heap_size - 1; i > 0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$(( heap_size - 1 ))\n        max_heapify $list 0 $heap_size\n    done",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local tmp=0\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local temp=0\n  local n=${#list[@]}\n\n  # Build the heap\n  for ((i=n/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Extract the root element and heapify the remaining elements\n  for ((i=n-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp = list[0]\n    list[0] = list[i]\n    list[i] = temp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n  local largest=0\n  local left=0\n  local right=0\n\n  for ((i=length/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $length\n  done\n\n  for ((i=length-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i-1))\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local tmp\n\n  # build heap\n  for ((i=n/2-1; i>=0; i--)); do\n    k=$i\n    tmp=${list[$i]}\n    while [[ 2*$k+1 -lt $n ]]; do\n      j=2*$k+1\n      if [[ $j -lt $n-1 ]] && [[ ${list[$j]} -lt ${list[$j+1]} ]]; then\n        j=$j+1\n      fi\n      if [[ $tmp -lt ${list[$j]} ]]; then\n        list[$k]=${list[$j]}\n        k=$j\n      else\n        break\n      fi\n    done\n    list[$k]=$tmp\n  done\n\n  # sort\n  for ((i=n-1; i>=0; i--)); do\n    tmp=${list[$i]}\n    list[$i]=${list[0]}\n    k=0\n    while [[ 2*$k+1 -lt $i ]]; do\n      j=2*$k+1\n      if [[ $j -lt $i-1 ]] && [[ ${list[$j]} -lt ${list[$j+1]} ]]; then\n        j=$j+1\n      fi\n      if [[ $tmp -lt ${list[$j]} ]]; then\n        list[$k]=${list[$j]}\n        k=$j\n      else\n        break\n      fi\n    done\n    list[$k]=$tmp\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local tmp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Extract the max element from the heap\n  for ((i = n - 1; i > 0; i--)); do\n    # Move the root to the end\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n\n    # Heapify the root element\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local tmp\n    local k\n\n    # build heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = $i\n        while ((2 * k + 1 < n)); do\n            j = $((2 * k + 1))\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                j = $((j + 1))\n            fi\n            if ((list[k] < list[j])); then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    # sort\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        k=0\n        while ((2 * k + 1 < i)); do\n            j=$((2 * k + 1))\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j=$((j + 1))\n            fi\n            if ((list[k] < list[j])); then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -a heap\n    local -i i\n    local -i j\n    local -i k\n    local -i n=${#list[@]}\n\n    for ((i=0; i<n; i++)); do\n        heap[i]=${list[i]}\n        for ((j=i; j>0; j>>=1)); do\n            k=$((j>>1))\n            if [[ ${heap[j]} -lt ${heap[k]} ]]; then\n                heap[j]=${heap[k]}\n                heap[k]=${list[i]}\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        list[i]=${heap[0]}\n        heap[0]=${heap[i]}\n        for ((j=0; j<i; )); do\n            k=$((j<<1))\n            if [[ $k -ge $i ]]; then\n                break\n            fi\n            if [[ $((k+1)) -lt $i && ${heap[k+1]} -lt ${heap[k]} ]]; then\n                k=$((k+1))\n            fi\n            if [[ ${heap[k]} -lt ${heap[j]} ]]; then\n                heap[j]=${heap[k]}\n                heap[k]=${heap[0]}\n                j=$k\n            else\n                break\n            fi\n        done\n    done\n    list[0]=${heap[0]}\n\n    echo ${list[@]}",
    "    local list=($1)\n    local i j k temp\n    local n=${#list[@]}\n\n    # Build the heap\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        temp=${list[$i]}\n        while ((2*k+1<n)); do\n            j=$((2*k+1))\n            if ((j<n-1 && list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((temp>=list[j])); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$temp\n    done\n\n    # Sort the heap\n    for ((i=n-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        k=0\n        while ((2*k+1<i)); do\n            j=$((2*k+1))\n            if ((j<i-1 && list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((list[k]>=list[j])); then\n                break\n            fi\n            temp=${list[$k]}\n            list[$k]=${list[$j]}\n            list[$j]=$temp\n            k=$j\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root element and heapify the remaining elements\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp = list[0]\n    list[0] = list[i]\n    list[i] = temp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local heap_size=${#list[@]}\n  local i\n  local temp\n\n  # Build a max heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $heap_size $i\n  done\n\n  # One by one extract an element from heap\n  for ((i = heap_size - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n\n    # call max heapify on the reduced heap\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root element and heapify the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local sorted=\"\"\n  local heap=\"\"\n  local i=\"\"\n  local j=\"\"\n  local k=\"\"\n  local l=\"\"\n  local m=\"\"\n  local n=\"\"\n  local o=\"\"\n  local p=\"\"\n  local q=\"\"\n  local r=\"\"\n  local s=\"\"\n  local t=\"\"\n  local u=\"\"\n  local v=\"\"\n  local w=\"\"\n  local x=\"\"\n  local y=\"\"\n  local z=\"\"\n  local aa=\"\"\n  local ab=\"\"\n  local ac=\"\"\n  local ad=\"\"\n  local ae=\"\"\n  local af=\"\"\n  local ag=\"\"\n  local ah=\"\"\n  local ai=\"\"\n  local aj=\"\"\n  local ak=\"\"\n  local al=\"\"\n  local am=\"\"\n  local an=\"\"\n  local ao=\"\"\n  local ap=\"\"\n  local aq=\"\"\n  local ar=\"\"\n  local as=\"\"\n  local at=\"\"\n  local au=\"\"\n  local av=\"\"\n  local aw=\"\"\n  local ax=\"\"\n  local ay=\"\"\n  local az=\"\"\n  local ba=\"\"\n  local bb=\"\"\n  local bc=\"\"\n  local bd=\"\"\n  local be=\"\"\n  local bf=\"\"\n  local bg=\"\"\n  local bh=\"\"\n  local bi=\"\"\n  local bj=\"\"\n  local bk=\"\"\n  local bl=\"\"\n  local bm=\"\"\n  local bn=\"\"\n  local bo=\"\"\n  local bp=\"\"\n  local bq=\"\"\n  local br=\"\"\n  local bs=\"\"\n  local bt=\"\"\n  local bu=\"\"\n  local bv=\"\"\n  local bw=\"\"\n  local bx=\"\"\n  local by=\"\"\n  local bz=\"\"\n  local ca=\"\"\n  local cb=\"\"\n  local cc=\"\"\n  local cd=\"\"\n  local ce=\"\"\n  local cf=\"\"\n  local cg=\"\"\n  local ch=\"\"\n  local ci=\"\"\n  local cj=\"\"\n  local ck=\"\"\n  local cl=\"\"\n  local cm=\"\"\n  local cn=\"\"\n  local co=\"\"\n  local cp=\"\"\n  local cq=\"\"\n  local cr=\"\"\n  local cs=\"\"\n  local ct=\"\"\n  local cu=\"\"\n  local cv=\"\"\n ",
    "    local list=$1\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=0\n    local heap_size=0\n    local left=0\n    local right=0\n    local largest=0\n\n    n=${#list[@]}\n    heap_size=$((n - 1))\n\n    for ((i = heap_size / 2; i >= 0; i--)); do\n        while ((1)); do\n            left=$((2 * i + 1))\n            right=$((2 * i + 2))\n            largest=$i\n            if [[ $left -le $heap_size && ${list[$left]} -gt ${list[$largest]} ]]; then\n                largest=$left\n            fi\n            if [[ $right -le $heap_size && ${list[$right]} -gt ${list[$largest]} ]]; then\n                largest=$right\n            fi\n            if [[ $largest -ne $i ]]; then\n                temp=${list[$i]}\n                list[$i]=${list[$largest]}\n                list[$largest]=$temp\n                i=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = heap_size; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        heap_size=$((heap_size - 1))\n        k=0\n        while ((1)); do\n            left=$((2 * k + 1))\n            right=$((2 * k + 2))\n            largest=$k\n            if [[ $left -le $heap_size && ${list[$left]} -gt ${list[$largest]} ]]; then\n                largest=$left\n            fi\n            if [[ $right -le $heap_size && ${list[$right]} -gt ${list[$largest]} ]]; then\n                largest=$right\n            fi\n            if [[ $largest -ne $k ]]; then\n                temp=${list[$k]}\n                list[$k]=${list[$largest]}\n                list[$largest]=$temp\n                k=$largest\n            else",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $length\n    done\n\n    # Extract the root element\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while ((child < length)); do\n            if ((child + 1 < length && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n            fi\n            parent=$child\n            child=$((2 * parent + 1))\n        done\n    done\n\n    # Sort the heap\n    for ((i = length - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        parent=0\n        child=$((2 * parent + 1))\n        while ((child < i)); do\n            if ((child + 1 < i && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n            fi\n            parent=$child\n            child=$((2 * parent + 1))\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n=${#list[@]}\n  local temp\n\n  # Build the heap\n  for ((i=n/2-1; i>=0; i--)); do\n    k=$i\n    temp=${list[i]}\n    while ((2*k+1<n)); do\n      j=$((2*k+1))\n      if ((j<n-1)) && ((${list[j]}<${list[j+1]})); then\n        j=$((j+1))\n      fi\n      if ((temp>=${list[j]})); then\n        break\n      fi\n      list[k]=${list[j]}\n      k=$j\n    done\n    list[k]=$temp\n  done\n\n  # Sort the heap\n  for ((i=n-1; i>0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    k=0\n    while ((2*k+1<i)); do\n      j=$((2*k+1))\n      if ((j<i-1)) && ((${list[j]}<${list[j+1]})); then\n        j=$((j+1))\n      fi\n      if ((${list[k]}>=${list[j]})); then\n        break\n      fi\n      temp=${list[k]}\n      list[k]=${list[j]}\n      list[j]=$temp\n      k=$j\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local len=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $len $i\n  done\n\n  # One by one extract an element from heap\n  for ((i = len - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    # call max heapify on the reduced heap\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Extract the max element from the heap and put it at the end of the list\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    for ((i=n/2-1; i>=0; i--)); do\n        heapify \"$i\" \"$n\"\n    done\n    for ((i=n-1; i>=0; i--)); do\n        list[0]=${list[i]}\n        list[i]=${list[n-1]}\n        list[n-1]=${list[0]}\n        n=$((n-1))\n        heapify 0 $n\n    done\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n    local l\n    local m\n\n    for ((i = length / 2 - 1; i >= 0; i--)) {\n        k = i\n        temp = list[i]\n        while ((k * 2 + 1 < length)) {\n            l = k * 2 + 1\n            if ((l + 1 < length && list[l] < list[l + 1])) {\n                l++\n            }\n            if ((temp < list[l])) {\n                list[k] = list[l]\n                k = l\n            } else {\n                break\n            }\n        }\n        list[k] = temp\n    }\n\n    for ((i = length - 1; i > 0; i--)) {\n        temp = list[i]\n        list[i] = list[0]\n        list[0] = temp\n        k = 0\n        while ((k * 2 + 1 < i)) {\n            l = k * 2 + 1\n            if ((l + 1 < i && list[l] < list[l + 1])) {\n                l++\n            }\n            if ((temp < list[l])) {\n                list[k] = list[l]\n                k = l\n            } else {\n                break\n            }\n        }\n        list[k] = temp\n    }\n\n    for ((i = 0; i < length; i++)) {\n        echo -n \"${list[i]} \"\n    }\n    echo",
    "  local -a list=($1)\n  local -a heap\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n ",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local n=${#list[@]}\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n  # Heap sort\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i - 1))\n  done\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local temp\n    local heap_size=$n\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # One by one extract an element from heap\n    for ((i = n - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local list=$1\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n\n    # Build a max heap\n    for ((i = length/2 - 1; i >= 0; i--)); do\n        heapify $list $length $i\n    done\n\n    # Extract elements one by one\n    for ((i = length - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify $list $i 0\n    done",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local k\n  local tmp\n  local parent\n  local child\n\n  # build heap\n  for ((i = 1; i < len; i++)) {\n    j = i\n    while ((j > 0)) {\n      k = ((j - 1) / 2)\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n      fi\n      j = k\n    }\n  }\n\n  # sort\n  for ((i = len - 1; i > 0; i--)) {\n    tmp = list[0]\n    list[0] = list[i]\n    list[i] = tmp\n    parent = 0\n    while ((1)) {\n      child = (parent * 2) + 1\n      if ((child >= i)); then\n        break\n      fi\n      if ((child + 1 < i)) && ((list[child] < list[child + 1])); then\n        child++\n      fi\n      if ((list[parent] < list[child])); then\n        tmp = list[parent]\n        list[parent] = list[child]\n        list[child] = tmp\n      fi\n      parent = child\n    }\n  }\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n\n  local tmp\n\n  # Build the heap\n  for ((i = ${#list[@]} / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < ${#list[@]})); do\n      j = 2 * k + 1\n      if ((j < ${#list[@]} - 1 && list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((n = ${#list[@]}; n > 0; n--)); do\n    tmp = list[0]\n    list[0] = list[n - 1]\n    list[n - 1] = tmp\n    k = 0\n    while ((2 * k + 1 < n - 1)); do\n      j = 2 * k + 1\n      if ((j < n - 1 && list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local temp=0\n  local n=${#list[@]}\n\n  # Build the heap\n  for ((i = n/2-1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Extract the root element and heapify\n  for ((i = n-1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local heap_size=${#list}\n    local i\n\n    build_heap \"$list\"\n    for ((i=heap_size-1; i>0; i--)); do\n        swap \"$list\" 0 $i\n        heap_size=$((heap_size-1))\n        heapify \"$list\" 0 $heap_size\n    done",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root element and heapify the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local i\n    local j\n    local k\n    local tmp\n    local len=${#list[@]}\n\n    # build heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heap_adjust \"$i\" \"$len\"\n    done\n\n    # sort\n    for ((i = len - 1; i >= 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        heap_adjust 0 $i\n    done",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i = n - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = tmp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local k=0\n\n    # Build max heap\n    for ((i=length/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $length $i\n    done\n\n    # Extract elements from heap\n    for ((i=length-1; i>=0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n\n    # build heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # extract elements\n    for ((i = n - 1; i >= 0; i--)); do\n        list[0]=$((${list[0]} + ${list[i]}))\n        list[i]=$((${list[0]} - ${list[i]}))\n        list[0]=$((${list[0]} - ${list[i]}))\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local length=${#list}\n    local i\n    local j\n    local temp\n    # Build the heap\n    for ((i=length/2-1; i>=0; i--)); do\n        # Heapify\n        j=$i\n        while ((2*j+1<length)); do\n            if ((2*j+2<length)); then\n                if ((${list:2*j+1:1}<${list:2*j+2:1})); then\n                    j=$((2*j+2))\n                else\n                    j=$((2*j+1))\n                fi\n            else\n                j=$((2*j+1))\n            fi\n            if ((${list:i:1}<${list:j:1})); then\n                temp=${list:i:1}\n                list=${list:0:i}${list:j:1}${list:i+1:j-i-1}${temp}${list:j+1}\n            else\n                break\n            fi\n        done\n    done\n    # Sort\n    for ((i=length-1; i>0; i--)); do\n        # Swap the root with the last element\n        temp=${list:i:1}\n        list=${list:0:i}${list:0:1}${list:1:i-1}${temp}\n        # Heapify\n        j=0\n        while ((2*j+1<i)); do\n            if ((2*j+2<i)); then\n                if ((${list:2*j+1:1}<${list:2*j+2:1})); then\n                    j=$((2*j+2))\n                else\n                    j=$((2*j+1))\n                fi\n            else\n                j=$((2*j+1))\n            fi\n            if ((${list:j:1}<${list:i:1})); then\n                temp=${list:j:1}\n                list=${list:0:j}${list:i:1}${list:j+1:i-j-1}${temp}${list:i+1}",
    "  local list=$1\n  local size=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = size / 2 - 1; i >= 0; i--)); do\n    heapify $list $size $i\n  done\n\n  # Extract the root element and heapify the heap\n  for ((i = size - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify $list $i 0\n  done",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n\n  # Extract the root\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=(\"$@\")\n    local len=${#list[@]}\n    local i=0\n    local j=0\n    local tmp=0\n\n    # Build max heap\n    for ((i=len/2-1; i>=0; i--)); do\n        heapify \"${list[@]}\" $len $i\n    done\n\n    # Extract elements one by one\n    for ((i=len-1; i>=0; i--)); do\n        # Move current root to end\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n\n        # Call max heapify on the reduced heap\n        heapify \"${list[@]}\" $((i)) 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local heap_size=${#list[@]}\n  local i\n  local temp\n\n  # Build a max heap\n  for (( i=heap_size/2-1; i>=0; i-- )); do\n    max_heapify \"$list\" $i $heap_size\n  done\n\n  # Heap sort\n  for (( i=heap_size-1; i>=1; i-- )); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    max_heapify \"$list\" 0 $((i-1))\n  done",
    "  local list=($1)\n  local len=${#list[@]}\n  local i j k t\n  local heap_size=$len\n  local largest\n\n  # build heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $len\n  done\n\n  # sort\n  for ((i = len - 1; i > 0; i--)); do\n    t=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$t\n    heapify \"${list[@]}\" 0 $((--heap_size))\n  done\n\n  echo \"${list[@]}\"",
    "  local list=$1\n  local length=$(echo $list | wc -w)\n  local heap_size=$length\n  local i\n  local j\n  local temp\n\n  # Build a max heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify $list $i $length\n  done\n\n  # One by one extract an element from heap\n  for ((i = length - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=$(echo $list | cut -d ' ' -f $i)\n    list=$(echo $list | sed \"s/$temp//g\")\n    list=\"$list $temp\"\n\n    # call max heapify on the reduced heap\n    heapify $list 0 $i\n  done\n\n  echo $list",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n    local -i s\n    local -i e\n    local -i r\n    local -i c1\n    local -i c2\n\n    # build heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        t = list[i]\n        while ((k < n / 2)) do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((t >= list[j])); then\n                break\n            fi\n            list[k] = list[j]\n            k = j\n        done\n        list[k] = t\n    done\n\n    # sort\n    for ((i = n - 1; i > 0; i--)); do\n        t = list[i]\n        list[i] = list[0]\n        k = 0\n        while ((k < i / 2)) do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((t >= list[j])); then\n                break\n            fi\n            list[k] = list[j]\n            k = j\n        done\n        list[k] = t\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $length\n  done\n\n  # Extract the root element and heapify the remaining elements\n  for ((i = length - 1; i > 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "  local list=$1\n  local i=0\n  local j=0\n  local k=0\n  local n=0\n  local temp=0\n  local list_length=0\n  local list_array=()\n\n  list_length=$(echo $list | wc -w)\n  list_array=($list)\n\n  for ((i=list_length/2-1; i>=0; i--)); do\n    k=$i\n    temp=${list_array[$i]}\n    while ((2*k+1<list_length)); do\n      j=$((2*k+1))\n      if ((j<list_length-1)) && ((${list_array[$j]}<${list_array[$j+1]})); then\n        j=$((j+1))\n      fi\n      if ((temp>=${list_array[$j]})); then\n        break\n      fi\n      list_array[$k]=${list_array[$j]}\n      k=$j\n    done\n    list_array[$k]=$temp\n  done\n\n  for ((i=list_length-1; i>=0; i--)); do\n    temp=${list_array[0]}\n    list_array[0]=${list_array[$i]}\n    list_array[$i]=$temp\n    k=0\n    while ((2*k+1<i)); do\n      j=$((2*k+1))\n      if ((j<i-1)) && ((${list_array[$j]}<${list_array[$j+1]})); then\n        j=$((j+1))\n      fi\n      if ((${list_array[$k]}>=${list_array[$j]})); then\n        break\n      fi\n      temp=${list_array[$k]}\n      list_array[$k]=${list_array[$j]}\n      list_array[$j]=$temp\n      k=$j\n    done\n  done\n\n  echo ${list_array[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while ((child < n)); do\n            if ((child + 1 < n && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        parent=0\n        child=$((2 * parent + 1))\n        while ((child < i)); do\n            if ((child + 1 < i && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "\tlocal -a list=($1)\n\tlocal -a heap\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal n\n\tlocal tmp\n\n\t# Build a heap\n\tfor ((i=0; i<${#list[@]}; i++)); do\n\t\theap[i]=${list[i]}\n\t\tn=i\n\t\twhile ((n > 0)); do\n\t\t\tj=$(((n - 1) / 2))\n\t\t\tif ((heap[j] < heap[n])); then\n\t\t\t\ttmp=${heap[j]}\n\t\t\t\theap[j]=${heap[n]}\n\t\t\t\theap[n]=$tmp\n\t\t\t\tn=$j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tdone\n\n\t# Sort the heap\n\tfor ((i=${#list[@]}-1; i>0; i--)); do\n\t\ttmp=${heap[0]}\n\t\theap[0]=${heap[i]}\n\t\theap[i]=$tmp\n\t\tn=0\n\t\twhile ((n < i)); do\n\t\t\tj=$((2 * n + 1))\n\t\t\tif ((j >= i)); then\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\tk=$((j + 1))\n\t\t\tif ((k < i && heap[j] < heap[k])); then\n\t\t\t\tj=$k\n\t\t\tfi\n\t\t\tif ((heap[n] < heap[j])); then\n\t\t\t\ttmp=${heap[n]}\n\t\t\t\theap[n]=${heap[j]}\n\t\t\t\theap[j]=$tmp\n\t\t\t\tn=$j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tdone\n\n\techo \"${heap[@]}\"",
    "    local -a list=($1)\n    local -a heap_list\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#list[@]}\n    local -i temp=0\n\n    # Build a heap\n    for ((i=0; i<n; i++)); do\n        heap_list[i]=${list[i]}\n        j=i\n        while ((j>0)); do\n            k=(j-1)/2\n            if ((heap_list[j]>heap_list[k])); then\n                temp=${heap_list[j]}\n                heap_list[j]=${heap_list[k]}\n                heap_list[k]=$temp\n            fi\n            j=k\n        done\n    done\n\n    # Sort the heap\n    for ((i=n-1; i>0; i--)); do\n        temp=${heap_list[0]}\n        heap_list[0]=${heap_list[i]}\n        heap_list[i]=$temp\n        j=0\n        while ((j<i)); do\n            k=2*j+1\n            if ((k+1<i && heap_list[k]<heap_list[k+1])); then\n                k++\n            fi\n            if ((k<i && heap_list[j]<heap_list[k])); then\n                temp=${heap_list[j]}\n                heap_list[j]=${heap_list[k]}\n                heap_list[k]=$temp\n            fi\n            j=k\n        done\n    done\n\n    echo ${heap_list[@]}",
    "  local list=($1)\n  local i\n  local j\n  local k\n  local n=${#list[@]}\n\n  # build heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # sort\n  for ((i = n - 1; i >= 0; i--)); do\n    swap \"${list[@]}\" 0 $i\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "  local list=$1\n  local i\n  local j\n  local k\n  local temp\n  local size=${#list[@]}\n  local -a heap\n\n  # Build a heap from the list\n  for ((i=0; i<size; i++)); do\n    heap[i]=${list[i]}\n    j=$((i-1))\n    while ((j>=0)); do\n      k=$(((j-1)/2))\n      if ((heap[j]<heap[k])); then\n        temp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$temp\n      fi\n      j=$k\n    done\n  done\n\n  # Sort the heap\n  for ((i=size-1; i>0; i--)); do\n    temp=${heap[0]}\n    heap[0]=${heap[i]}\n    heap[i]=$temp\n    j=0\n    while ((j<i)); do\n      k=$((2*j+1))\n      if ((k>=i)); then\n        break\n      fi\n      if ((k+1<i && heap[k+1]<heap[k])); then\n        k=$((k+1))\n      fi\n      if ((heap[j]>heap[k])); then\n        temp=${heap[j]}\n        heap[j]=${heap[k]}\n        heap[k]=$temp\n      fi\n      j=$k\n    done\n  done\n\n  # Print the sorted list\n  for ((i=0; i<size; i++)); do\n    echo ${heap[i]}\n  done",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp = list[0]\n    list[0] = list[i]\n    list[i] = temp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i=0\n  local j=0\n  local temp=0\n  local parent=0\n  local child=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < length)); do\n      if ((child + 1 < length && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = length - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local length=$(echo \"$list\" | wc -w)\n    local i\n    local j\n    local temp\n\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" $length $i\n    done\n\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=$(echo \"$list\" | awk '{print $1}')\n        list=$(echo \"$list\" | awk '{$1 = $2; print}')\n        list=$(echo \"$list\" | awk '{$NF = \"'$temp'\"; print}')\n        heapify \"$list\" $i 0\n    done\n\n    echo \"$list\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local tmp\n    local k\n    local l\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        j=$i\n        while ((2 * j + 1 < n)); do\n            k=2 * j + 1\n            if ((k + 1 < n && list[k] < list[k + 1])); then\n                k=k + 1\n            fi\n            if ((list[j] < list[k])); then\n                tmp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        j=0\n        while ((2 * j + 1 < i)); do\n            k=2 * j + 1\n            if ((k + 1 < i && list[k] < list[k + 1])); then\n                k=k + 1\n            fi\n            if ((list[j] < list[k])); then\n                tmp=${list[j]}\n                list[j]=${list[k]}\n                list[k]=$tmp\n            fi\n            j=$k\n        done\n    done\n\n    echo ${list[@]}",
    "    local -a list=($1)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#list[@]}\n    local -i temp=0\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $length\n    done\n\n    # Extract the elements from the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    # Print the sorted list\n    for ((i = 0; i < length; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  for ((i=length/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $length $i\n  done\n  for ((i=length-1; i>=0; i--)); do\n    list[0]=$((${list[0]} + ${list[$i]}))\n    list[$i]=$((${list[0]} - ${list[$i]}))\n    list[0]=$((${list[0]} - ${list[$i]}))\n    heapify \"${list[@]}\" $i 0\n  done\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local k\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = $i\n    temp = ${list[$i]}\n\n    while [[ $k < $n && ${list[$k]} -lt ${list[$((2 * k + 1))]} ]]; do\n      list[$k] = ${list[$((2 * k + 1))]}\n      k = $((2 * k + 1))\n    done\n\n    list[$k] = $temp\n  done\n\n  # Sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp = ${list[$i]}\n    list[$i] = ${list[0]}\n    list[0] = $temp\n\n    k = 0\n    while [[ $k < $i && ${list[$k]} -lt ${list[$((2 * k + 1))]} ]]; do\n      list[$k] = ${list[$((2 * k + 1))]}\n      k = $((2 * k + 1))\n    done\n\n    list[$k] = $temp\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local heap_size=${#list[@]}\n  local i\n  local temp\n\n  # Build a max heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    max_heapify \"${list[@]}\" $i $heap_size\n  done\n\n  # Heap sort\n  for ((i = heap_size - 1; i >= 1; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    max_heapify \"${list[@]}\" 0 $((i - 1))\n  done\n\n  echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                j += 1\n            fi\n            if ((list[k] < list[j])); then\n                t = list[k]\n                list[k] = list[j]\n                list[j] = t\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = n - 1; i > 0; i--)); do\n        t = list[0]\n        list[0] = list[i]\n        list[i] = t\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j += 1\n            fi\n            if ((list[k] < list[j])); then\n                t = list[k]\n                list[k] = list[j]\n                list[j] = t\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=\"$1\"\n  local heap_size=${#list}\n  local i\n  local temp\n\n  # Build a max heap\n  for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" \"$i\" \"$heap_size\"\n  done\n\n  # One by one extract an element from heap\n  for ((i = heap_size - 1; i >= 0; i--)); do\n    # Move current root to end\n    temp=\"${list[i]}\"\n    list[i]=\"${list[0]}\"\n    list[0]=\"$temp\"\n\n    # call max heapify on the reduced heap\n    heapify \"$list\" 0 $((i - 1))\n  done",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local n=${#list[@]}\n    local temp\n\n    # Build the heap\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j+1<n && list[j]<list[j+1])); then\n                j+=1\n            fi\n            if ((list[k]<list[j])); then\n                temp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$temp\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i=n-1; i>0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j+1<i && list[j]<list[j+1])); then\n                j+=1\n            fi\n            if ((list[k]<list[j])); then\n                temp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$temp\n                k=j\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=$1\n    local heap_size=${#list}\n    local i\n    local j\n    local temp\n    local parent\n    local child\n\n    # Build the heap\n    for ((i=heap_size/2-1; i>=0; i--)); do\n        parent=$i\n        while ((1)); do\n            child=$((2*parent+1))\n            if ((child>=heap_size)); then\n                break\n            fi\n            if ((child+1<heap_size && list[child]<list[child+1])); then\n                child=$((child+1))\n            fi\n            if ((list[parent]<list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i=heap_size-1; i>0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$i\n        parent=0\n        while ((1)); do\n            child=$((2*parent+1))\n            if ((child>=heap_size)); then\n                break\n            fi\n            if ((child+1<heap_size && list[child]<list[child+1])); then\n                child=$((child+1))\n            fi\n            if ((list[parent]<list[child])); then\n                temp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$temp\n                parent=$child\n            else\n                break\n            fi\n        done\n    done\n\n    # Print the result\n    for ((i=0; i<${#list}; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "  local list=($1)\n  local i=0\n  local j=0\n  local temp=0\n  local n=${#list[@]}\n\n  for ((i=0; i<n; i++))\n  do\n    for ((j=0; j<n-i-1; j++))\n    do\n      if [[ ${list[j]} -gt ${list[$((j+1))]} ]]\n      then\n        temp=${list[j]}\n        list[$j]=${list[$((j+1))]}\n        list[$((j+1))]=$temp\n      fi\n    done\n  done\n  echo ${list[@]}",
    "\tlocal list=($1)\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal n=${#list[@]}\n\tlocal tmp=0\n\n\tfor ((i = n / 2 - 1; i >= 0; i--)); do\n\t\theapify \"${list[@]}\" $i $n\n\tdone\n\n\tfor ((i = n - 1; i >= 0; i--)); do\n\t\ttmp=${list[0]}\n\t\tlist[0]=${list[i]}\n\t\tlist[i]=$tmp\n\t\theapify \"${list[@]}\" 0 $((i - 1))\n\tdone\n\n\techo \"${list[@]}\"",
    "  local list=\"$1\"\n  local length=$(echo \"$list\" | wc -w)\n  local i\n  local j\n  local k\n  local temp\n  local heap_size=$length\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"$list\" $i $heap_size\n  done\n\n  # Extract the elements from the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=$(echo \"$list\" | cut -d' ' -f$i)\n    list=$(echo \"$list\" | sed \"s/$temp//\")\n    list=\"$temp $list\"\n    heap_size=$((heap_size - 1))\n    heapify \"$list\" 0 $heap_size\n  done\n\n  echo \"$list\"",
    "    local list=\"$1\"\n    local size=${#list}\n    local i\n    local j\n    local tmp\n\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" \"$size\" \"$i\"\n    done\n\n    for ((i = size - 1; i >= 0; i--)); do\n        tmp=\"${list:$i:1}\"\n        list=\"${list:0:$i}${list:$((i + 1))}\"\n        list=\"${tmp}${list:0:$((size - 1))}\"\n        size=$((size - 1))\n        heapify \"$list\" \"$size\" \"0\"\n    done\n\n    echo \"$list\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local tmp=0\n  local n=${#list[@]}\n  local n2=$((n/2))\n  local n1=$((n-1))\n  local n3=$((n1-1))\n\n  # Build the heap\n  for ((i=n2; i>=0; i--)); do\n    j=$i\n    while ((j<n2)); do\n      k=$((2*j+1))\n      if ((k<n1)) && ((list[k]<list[k+1])); then\n        ((k++))\n      fi\n      if ((list[j]>=list[k])); then\n        break\n      fi\n      tmp=${list[j]}\n      list[j]=${list[k]}\n      list[k]=$tmp\n      ((j=k))\n    done\n  done\n\n  # Sort the heap\n  for ((i=n1; i>0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    j=0\n    while ((j<n2)); do\n      k=$((2*j+1))\n      if ((k<i-1)) && ((list[k]<list[k+1])); then\n        ((k++))\n      fi\n      if ((list[j]>=list[k])); then\n        break\n      fi\n      tmp=${list[j]}\n      list[j]=${list[k]}\n      list[k]=$tmp\n      ((j=k))\n    done\n  done\n\n  # Print the result\n  for ((i=0; i<n; i++)); do\n    echo -n \"${list[i]} \"\n  done\n  echo",
    "  local list=($1)\n  local i\n  local j\n  local tmp\n  local n=${#list[@]}\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Extract the elements from the heap\n  for ((i = n - 1; i > 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    heapify \"${list[@]}\" 0 $((i - 1))\n  done\n\n  # Print the sorted list\n  for ((i = 0; i < n; i++)); do\n    echo ${list[i]}\n  done",
    "    local list=(\"$@\")\n    local size=${#list[@]}\n    local i\n    local j\n    local temp\n\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $size $i\n    done\n\n    for ((i = size - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n\n    # Build max-heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $len $i\n    done\n\n    # Heap sort\n    for ((i = len - 1; i > 0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i i=0\n    local -i j=0\n    local -i n=${#list[@]}\n    local -i temp=0\n\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "\tlocal list=($1)\n\tlocal i\n\tlocal j\n\tlocal temp\n\tlocal n=${#list[@]}\n\tlocal parent\n\tlocal child\n\n\t# Build the heap\n\tfor ((i=n/2-1; i>=0; i--)); do\n\t\tparent=$i\n\t\tchild=$((2*parent+1))\n\t\twhile ((child<n)); do\n\t\t\tif ((child+1<n && list[child]<list[child+1])); then\n\t\t\t\tchild=$((child+1))\n\t\t\tfi\n\t\t\tif ((list[parent]<list[child])); then\n\t\t\t\ttemp=${list[parent]}\n\t\t\t\tlist[parent]=${list[child]}\n\t\t\t\tlist[child]=$temp\n\t\t\t\tparent=$child\n\t\t\t\tchild=$((2*parent+1))\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tdone\n\n\t# Sort the heap\n\tfor ((i=n-1; i>0; i--)); do\n\t\ttemp=${list[0]}\n\t\tlist[0]=${list[i]}\n\t\tlist[i]=$temp\n\t\tparent=0\n\t\tchild=$((2*parent+1))\n\t\twhile ((child<i)); do\n\t\t\tif ((child+1<i && list[child]<list[child+1])); then\n\t\t\t\tchild=$((child+1))\n\t\t\tfi\n\t\t\tif ((list[parent]<list[child])); then\n\t\t\t\ttemp=${list[parent]}\n\t\t\t\tlist[parent]=${list[child]}\n\t\t\t\tlist[child]=$temp\n\t\t\t\tparent=$child\n\t\t\t\tchild=$((2*parent+1))\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tdone\n\n\t# Print the result\n\tfor ((i=0; i<n; i++)); do\n\t\techo -n \"${list[i]} \"\n\tdone\n\techo",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build a max heap\n  for ((i = len/2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $len $i\n  done\n\n  # One by one extract an element from heap\n  for ((i = len - 1; i > 0; i--)); do\n    # Move current root to end\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n\n    # call max heapify on the reduced heap\n    heapify \"${list[@]}\" $i 0\n  done",
    "    local list=($1)\n    local i j temp\n    local n=${#list[@]}\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # One by one extract an element from heap\n    for ((i = n - 1; i >= 0; i--)); do\n        # Move current root to end\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local k\n\n  for ((i=n/2-1; i>=0; i--)); do\n    k=$i\n    temp=${list[$i]}\n    while ((k*2+1<n)); do\n      j=$((k*2+1))\n      if ((j+1<n && list[j]<list[j+1])); then\n        j=$((j+1))\n      fi\n      if ((temp>=list[j])); then\n        break\n      fi\n      list[$k]=${list[$j]}\n      k=$j\n    done\n    list[$k]=$temp\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    k=0\n    while ((k*2+1<i)); do\n      j=$((k*2+1))\n      if ((j+1<i && list[j]<list[j+1])); then\n        j=$((j+1))\n      fi\n      if ((list[k]>=list[j])); then\n        break\n      fi\n      temp=${list[$k]}\n      list[$k]=${list[$j]}\n      list[$j]=$temp\n      k=$j\n    done\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Heap sort\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i - 1))\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local k\n    local temp\n\n    for ((i=len/2-1; i>=0; i--)); do\n        k=$i\n        while ((2*k+1<len)); do\n            j=$((2*k+1))\n            if ((j<len-1)) && ((list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((list[k]<list[j])); then\n                temp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$temp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=len-1; i>0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        k=0\n        while ((2*k+1<i)); do\n            j=$((2*k+1))\n            if ((j<i-1)) && ((list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((list[k]<list[j])); then\n                temp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$temp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=$1\n    local heap_size=${#list[@]}\n    local i\n\n    build_max_heap \"$list\"\n\n    for ((i=heap_size-1; i>0; i--)); do\n        swap \"$list\" 0 $i\n        heap_size=$((heap_size-1))\n        max_heapify \"$list\" 0 $heap_size\n    done",
    "    local list=$1\n    local length=${#list}\n    local i=0\n    local j=0\n    local temp=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=",
    "  local -a list=($1)\n  local -i i\n  local -i j\n  local -i k\n  local -i n\n  local -i temp\n\n  n=${#list[@]}\n\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k=i\n    while ((2 * k + 1 < n)); do\n      j=2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j+=1\n      fi\n      if ((list[k] < list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=j\n      else\n        break\n      fi\n    done\n  done\n\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    k=0\n    while ((2 * k + 1 < i)); do\n      j=2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        j+=1\n      fi\n      if ((list[k] < list[j])); then\n        temp=${list[k]}\n        list[k]=${list[j]}\n        list[j]=$temp\n        k=j\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local tmp\n  local parent\n  local child\n\n  # Build the max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < n)); do\n      if ((child + 1 < n && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the list\n  for ((i = n - 1; i > 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        tmp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$tmp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local temp\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # Extract the root element and heapify the reduced heap\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=$1\n    local length=$(echo $list | wc -w)\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local heap_size=0\n    local left=0\n    local right=0\n    local largest=0\n\n    # Build the heap\n    for ((i=length/2-1; i>=0; i--)); do\n        heap_size=$length\n        temp=$(echo $list | cut -d ' ' -f $((i+1)))\n        j=$i\n        while [ $((2*j+1)) -lt $heap_size ]; do\n            left=$((2*j+1))\n            right=$((2*j+2))\n            if [ $right -lt $heap_size ] && [ $(echo $list | cut -d ' ' -f $((right+1))) -gt $(echo $list | cut -d ' ' -f $((left+1))) ]; then\n                largest=$right\n            else\n                largest=$left\n            fi\n            if [ $(echo $list | cut -d ' ' -f $((largest+1))) -gt $temp ]; then\n                list=$(echo $list | sed \"s/\\(\\s*\\)\\([0-9]*\\)\\(\\s*\\)/\\1$(echo $list | cut -d ' ' -f $((largest+1)))\\3\\2/\")\n                j=$largest\n            else\n                break\n            fi\n        done\n        list=$(echo $list | sed \"s/\\(\\s*\\)\\([0-9]*\\)\\(\\s*\\)/\\1$temp\\3\\2/\")\n    done\n\n    # Sort the heap\n    for ((i=$length-1; i>=0; i--)); do\n        temp=$(echo $list | cut -d ' ' -f $((i+1)))\n        list=$(echo $list | sed \"s/\\(\\s*\\)\\([0-9]*\\)\\(\\s*\\)/\\1$(echo $list | cut -d ' ' -f 1)\\3\\2/\")\n        list=$(echo $list | sed \"s/\\(\\",
    "    local list=($1)\n    local length=${#list[@]}\n    local i=0\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $length\n    done\n\n    # Extract the root of the heap and put it at the end of the list\n    for ((i = length - 1; i > 0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "    local list=$1\n    local heap_size=${#list[@]}\n    local i\n    local temp\n\n    build_max_heap $list\n\n    for (( i=heap_size-1; i>0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heap_size=$((heap_size-1))\n        max_heapify $list 0 $heap_size\n    done",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n  local heap_size=${#list[@]}\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  # Extract elements from the heap\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heap_size=$((heap_size - 1))\n    heapify \"${list[@]}\" 0 $heap_size\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local temp\n    local size=${#list[@]}\n    local parent\n    local child\n\n    # Build the heap\n    for ((i=1; i<size; i++))\n    do\n        j=$i\n        while [ $j -gt 0 ]\n        do\n            parent=$((j-1))\n            parent=$((parent/2))\n            if [ ${list[$j]} -gt ${list[$parent]} ]\n            then\n                temp=${list[$j]}\n                list[$j]=${list[$parent]}\n                list[$parent]=$temp\n            fi\n            j=$parent\n        done\n    done\n\n    # Sort the heap\n    for ((i=size-1; i>0; i--))\n    do\n        temp=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$temp\n\n        j=0\n        while [ $j -lt $i ]\n        do\n            child=$((j*2+1))\n            if [ $child -ge $i ]\n            then\n                break\n            fi\n            if [ $child -lt $((i-1)) ]\n            then\n                if [ ${list[$child]} -lt ${list[$((child+1))]} ]\n                then\n                    child=$((child+1))\n                fi\n            fi\n            if [ ${list[$j]} -lt ${list[$child]} ]\n            then\n                temp=${list[$j]}\n                list[$j]=${list[$child]}\n                list[$child]=$temp\n            fi\n            j=$child\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local len=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # Build the heap\n  for ((i = len / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < len)); do\n      if ((child + 1 < len && list[child] < list[child + 1])); then\n        ((child++))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # Sort the heap\n  for ((i = len - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        ((child++))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local length=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n\n    # Build the heap\n    for ((i = length / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $length\n    done\n\n    # Extract the root element and heapify the heap\n    for ((i = length - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    # Print the sorted list\n    for ((i = 0; i < length; i++)); do\n        echo -n \"${list[i]} \"\n    done\n    echo",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n\n    # Build max heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $len $i\n    done\n\n    # Heap sort\n    for ((i = len - 1; i >= 0; i--)); do\n        # Move current root to end\n        list[0]=${list[i]}\n        list[i]=${list[0]}\n\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" $((i - 1)) 0\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n\n    # build max heap\n    for ((i = n/2-1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # extract elements from heap\n    for ((i = n-1; i >= 0; i--)); do\n        # move current root to end\n        list[0]=$((${list[0]} + ${list[i]}))\n        list[i]=$((${list[0]} - ${list[i]}))\n        list[0]=$((${list[0]} - ${list[i]}))\n\n        # call max heapify on the reduced heap\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local temp\n\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  for ((i = n - 1; i > 0; i--)); do\n    temp = list[0]\n    list[0] = list[i]\n    list[i] = temp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        ((j++))\n      fi\n      if ((list[k] < list[j])); then\n        temp = list[k]\n        list[k] = list[j]\n        list[j] = temp\n        ((k = j))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Extract the elements\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $i\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local n=${#list[@]}\n\n  for ((i=n/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n\n  for ((i=n-1; i>=0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" 0 $((i-1))\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local n=${#list[@]}\n    local tmp\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=i\n        while ((2*k+1<n)); do\n            j=2*k+1\n            if ((j<n-1)) && ((list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((list[k]<list[j])); then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        k=0\n        while ((2*k+1<i)); do\n            j=2*k+1\n            if ((j<i-1)) && ((list[j]<list[j+1])); then\n                j=$((j+1))\n            fi\n            if ((list[k]<list[j])); then\n                tmp=${list[k]}\n                list[k]=${list[j]}\n                list[j]=$tmp\n                k=$j\n            else\n                break\n            fi\n        done\n    done\n\n    echo ${list[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local left\n    local right\n    local largest\n\n    # Build the heap\n    for ((i = n/2-1; i >= 0; i--)); do\n        while ((2*i+1 < n)); do\n            left=2*i+1\n            right=2*i+2\n            largest=$i\n            if ((list[left] > list[largest])); then\n                largest=$left\n            fi\n            if ((right < n && list[right] > list[largest])); then\n                largest=$right\n            fi\n            if ((largest != i)); then\n                temp=${list[i]}\n                list[i]=${list[largest]}\n                list[largest]=$temp\n                i=$largest\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = n-1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        n=$i\n        for ((j = n/2-1; j >= 0; j--)); do\n            while ((2*j+1 < n)); do\n                left=2*j+1\n                right=2*j+2\n                largest=$j\n                if ((list[left] > list[largest])); then\n                    largest=$left\n                fi\n                if ((right < n && list[right] > list[largest])); then\n                    largest=$right\n                fi\n                if ((largest != j)); then\n                    temp=${list[j]}\n                    list[j]=${list[largest]}\n                    list[largest]=$temp\n                    j=$largest\n                else\n                    break\n                fi\n            done\n        done\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local tmp\n\n  # Build max-heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"$i\" \"$n\"\n  done\n\n  # Heap sort\n  for ((i = n - 1; i > 0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    heapify 0 $((i - 1))\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local i\n  local j\n  local tmp\n  local n=${#list[@]}\n  for ((i=n/2-1; i>=0; i--)); do\n    heapify \"${list[@]}\" $i $n\n  done\n  for ((i=n-1; i>=0; i--)); do\n    tmp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$tmp\n    heapify \"${list[@]}\" 0 $((i-1))\n  done\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local n=${#list[@]}\n    local tmp\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort the heap\n    for ((i = n - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = tmp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                ((j++))\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                ((k = j))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\""
  ]
}