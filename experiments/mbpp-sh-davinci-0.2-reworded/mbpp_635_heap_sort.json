{
  "name": "mbpp_635_heap_sort",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort the given list.\n#\n# $1 is a space-separated list\nheap_sort() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    heap_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9 2 4 6 8 0\") = \"0 1 2 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 25 58\") = \"14 22 25 25 35 58 65 75 85\" ]]\n    [[ $(candidate \"7 1 9 5\") = \"1 5 7 9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local list=$1\n  local length=${#list}\n  local i=0\n  local j=0\n  local temp=0\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify $list $length $i\n  done\n\n  # Extract the elements from the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list:0:1}\n    list=${list:1}\n    list=${list:0:i}${temp}${list:i}\n    heapify $list $i 0\n  done\n\n  echo $list",
    "    local list=($1)\n    local i\n    local j\n    local tmp\n    local n=${#list[@]}\n    local parent\n    local child\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        parent=$i\n        child=$((2 * parent + 1))\n        while ((child < n)); do\n            if ((child + 1 < n && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                tmp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$tmp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = n - 1; i > 0; i--)); do\n        tmp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$tmp\n        parent=0\n        child=$((2 * parent + 1))\n        while ((child < i)); do\n            if ((child + 1 < i && list[child] < list[child + 1])); then\n                child=$((child + 1))\n            fi\n            if ((list[parent] < list[child])); then\n                tmp=${list[parent]}\n                list[parent]=${list[child]}\n                list[child]=$tmp\n                parent=$child\n                child=$((2 * parent + 1))\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local k\n    local n=${#list[@]}\n    local temp\n\n    for ((i=n/2-1; i>=0; i--)); do\n        k=$i\n        temp=${list[$i]}\n\n        while ((2*k+1<n)); do\n            j=$((2*k+1))\n            if ((j<n-1)) && ((${list[$j]}<${list[$((j+1))]})); then\n                j=$((j+1))\n            fi\n            if ((temp>=${list[$j]})); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$temp\n    done\n\n    for ((i=n-1; i>0; i--)); do\n        temp=${list[$i]}\n        list[$i]=${list[0]}\n        list[0]=$temp\n\n        k=0\n        while ((2*k+1<i)); do\n            j=$((2*k+1))\n            if ((j<i-1)) && ((${list[$j]}<${list[$((j+1))]})); then\n                j=$((j+1))\n            fi\n            if ((${list[$k]}>=${list[$j]})); then\n                break\n            fi\n            list[$k]=${list[$j]}\n            k=$j\n        done\n        list[$k]=$temp\n    done\n\n    echo ${list[@]}",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local k\n  local tmp\n\n  # Build a max heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    k = i\n    while ((2 * k + 1 < n)); do\n      j = 2 * k + 1\n      if ((j < n - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  # Heap sort\n  for ((i = n - 1; i > 0; i--)); do\n    tmp = list[0]\n    list[0] = list[i]\n    list[i] = tmp\n    k = 0\n    while ((2 * k + 1 < i)); do\n      j = 2 * k + 1\n      if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n        j++\n      fi\n      if ((list[k] < list[j])); then\n        tmp = list[k]\n        list[k] = list[j]\n        list[j] = tmp\n        k = j\n      else\n        break\n      fi\n    done\n  done\n\n  echo \"${list[@]}\"",
    "    local -a list=($1)\n    local -i i j k\n    local -i n=${#list[@]}\n    local -i last_parent=$((n/2-1))\n    local -i max_child\n    local -i tmp\n\n    # Build the heap\n    for ((i=last_parent; i>=0; i--)); do\n        j=$i\n        while ((j<=last_parent)); do\n            k=$((2*j+1))\n            if ((k<n-1 && list[k]<list[k+1])); then\n                k=$((k+1))\n            fi\n            if ((list[j]>=list[k])); then\n                break\n            fi\n            tmp=list[j]\n            list[j]=list[k]\n            list[k]=$tmp\n            j=$k\n        done\n    done\n\n    # Sort the heap\n    for ((i=n-1; i>0; i--)); do\n        tmp=list[0]\n        list[0]=list[i]\n        list[i]=$tmp\n        j=0\n        while ((j<=last_parent)); do\n            k=$((2*j+1))\n            if ((k<i-1 && list[k]<list[k+1])); then\n                k=$((k+1))\n            fi\n            if ((k>=i || list[j]>=list[k])); then\n                break\n            fi\n            tmp=list[j]\n            list[j]=list[k]\n            list[k]=$tmp\n            j=$k\n        done\n    done\n\n    echo \"${list[@]}\"",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local temp\n    local k\n\n    # Build the heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $n $i\n    done\n\n    # Extract the elements from the heap\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" $i 0\n    done\n\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local length=${#list[@]}\n  local i\n  local j\n  local temp\n\n  # Build the heap\n  for ((i = length / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $i $length\n  done\n\n  # Extract the elements from the heap\n  for ((i = length - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[$i]}\n    list[$i]=$temp\n    heapify \"${list[@]}\" 0 $i\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i\n    local j\n    local temp\n    local n=${#list[@]}\n    for (( i = n / 2 - 1; i >= 0; i-- )); do\n        heapify \"${list[@]}\" $i $n\n    done\n    for (( i = n - 1; i >= 0; i-- )); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n    echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local parent\n  local child\n\n  # build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    parent=$i\n    child=$((2 * parent + 1))\n    while ((child < n)); do\n      if ((child + 1 < n && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  # sort the heap\n  for ((i = n - 1; i > 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    parent=0\n    child=$((2 * parent + 1))\n    while ((child < i)); do\n      if ((child + 1 < i && list[child] < list[child + 1])); then\n        child=$((child + 1))\n      fi\n      if ((list[parent] < list[child])); then\n        temp=${list[parent]}\n        list[parent]=${list[child]}\n        list[child]=$temp\n        parent=$child\n        child=$((2 * parent + 1))\n      else\n        break\n      fi\n    done\n  done\n\n  echo ${list[@]}",
    "    local list=($1)\n    local n=${#list[@]}\n    local i\n    local j\n    local k\n    local t\n    local heap_size\n    local l\n    local r\n    local largest\n\n    # Build heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heap_size=$n\n        while true; do\n            l=$((2 * i + 1))\n            r=$((2 * i + 2))\n            largest=$i\n            if [[ $l -lt $heap_size && ${list[$l]} -gt ${list[$largest]} ]]; then\n                largest=$l\n            fi\n            if [[ $r -lt $heap_size && ${list[$r]} -gt ${list[$largest]} ]]; then\n                largest=$r\n            fi\n            if [[ $largest -eq $i ]]; then\n                break\n            fi\n            t=${list[$i]}\n            list[$i]=${list[$largest]}\n            list[$largest]=$t\n            i=$largest\n        done\n    done\n\n    # Sort\n    for ((i = n - 1; i > 0; i--)); do\n        t=${list[0]}\n        list[0]=${list[$i]}\n        list[$i]=$t\n        heap_size=$i\n        j=0\n        while true; do\n            l=$((2 * j + 1))\n            r=$((2 * j + 2))\n            largest=$j\n            if [[ $l -lt $heap_size && ${list[$l]} -gt ${list[$largest]} ]]; then\n                largest=$l\n            fi\n            if [[ $r -lt $heap_size && ${list[$r]} -gt ${list[$largest]} ]]; then\n                largest=$r\n            fi\n            if [[ $largest -eq $j ]]; then\n                break\n            fi\n            t=${list[$j]}\n            list[$j]=${list[$largest]}\n            list[$largest]=$t\n            j=$largest\n        done\n    done\n\n    # Print\n    for ((i = 0; i < n; i",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $len\n    done\n    for ((i = len - 1; i >= 0; i--)); do\n        swap \"${list[@]}\" 0 $i\n        heapify \"${list[@]}\" 0 $i\n    done\n    echo \"${list[@]}\"",
    "    local list=\"$1\"\n    local heap_size=\"$2\"\n    local i\n    local j\n    local tmp\n\n    # Build the heap\n    for ((i = heap_size / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" \"$heap_size\" \"$i\"\n    done\n\n    # Extract the elements one by one\n    for ((i = heap_size - 1; i >= 0; i--)); do\n        # Move the root to the end\n        tmp=\"${list[$i]}\"\n        list[$i]=\"${list[0]}\"\n        list[0]=\"$tmp\"\n\n        # Heapify the remaining elements\n        heapify \"$list\" \"$i\" \"0\"\n    done",
    "    local list=($1)\n    local len=${#list[@]}\n    local i\n    local j\n    local k\n    local tmp\n    # Build the heap\n    for ((i = len / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < len)); do\n            j = 2 * k + 1\n            if ((j < len - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n    # Sort the heap\n    for ((i = len - 1; i > 0; i--)); do\n        tmp = list[0]\n        list[0] = list[i]\n        list[i] = tmp\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j < i - 1)) && ((list[j] < list[j + 1])); then\n                j++\n            fi\n            if ((list[k] < list[j])); then\n                tmp = list[k]\n                list[k] = list[j]\n                list[j] = tmp\n                k = j\n            else\n                break\n            fi\n        done\n    done\n    echo \"${list[@]}\"",
    "    local list=$1\n    local size=${#list}\n    local i\n    local j\n    local temp\n\n    # Build max heap\n    for ((i = size / 2 - 1; i >= 0; i--)); do\n        heapify \"$list\" \"$size\" \"$i\"\n    done\n\n    # One by one extract an element from heap\n    for ((i = size - 1; i > 0; i--)); do\n        # Move current root to end\n        temp=${list:0:1}\n        list=${list:1}\n        list=${list:0:$i}${temp}${list:$i}\n\n        # call max heapify on the reduced heap\n        heapify \"$list\" \"$i\" \"0\"\n    done",
    "    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i i\n    local -i j\n    local -i k\n    local -i t\n\n    # Build a max heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        k = i\n        while ((2 * k + 1 < n)); do\n            j = 2 * k + 1\n            if ((j + 1 < n && list[j] < list[j + 1])); then\n                j += 1\n            fi\n            if ((list[k] < list[j])); then\n                t = list[k]\n                list[k] = list[j]\n                list[j] = t\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    # Sort\n    for ((i = n - 1; i > 0; i--)); do\n        t = list[0]\n        list[0] = list[i]\n        list[i] = t\n        k = 0\n        while ((2 * k + 1 < i)); do\n            j = 2 * k + 1\n            if ((j + 1 < i && list[j] < list[j + 1])); then\n                j += 1\n            fi\n            if ((list[k] < list[j])); then\n                t = list[k]\n                list[k] = list[j]\n                list[j] = t\n                k = j\n            else\n                break\n            fi\n        done\n    done\n\n    echo \"${list[@]}\"",
    "  local list=$1\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local n=0\n  local m=0\n  local l=0\n  local r=0\n  local s=0\n  local t=0\n  local heap=()\n\n  # Convert the list to an array.\n  read -a array <<< \"$list\"\n\n  # Get the length of the array.\n  n=${#array[@]}\n\n  # Build the heap.\n  for ((i=n/2-1; i>=0; i--)); do\n    # Initialize the index of the parent node.\n    j=$i\n\n    # Initialize the index of the child node.\n    k=$j*2+1\n\n    # Save the value of the parent node.\n    temp=${array[$j]}\n\n    # While the child node is less than the length of the array.\n    while ((k<n)); do\n      # If the right child node exists and is greater than the left child node.\n      if ((k+1<n && array[k]<array[k+1])); then\n        # Increment the index of the child node.\n        ((k++))\n      fi\n\n      # If the value of the child node is greater than the value of the parent node.\n      if ((array[k]>temp)); then\n        # Swap the values of the parent node and the child node.\n        array[$j]=${array[k]}\n        array[$k]=$temp\n\n        # Update the index of the parent node.\n        j=$k\n\n        # Update the index of the child node.\n        k=$j*2+1\n      else\n        # Break out of the loop.\n        break\n      fi\n    done\n  done\n\n  # Sort the heap.\n  for ((i=n-1; i>=0; i--)); do\n    # Swap the first and last elements.\n    temp=${array[0]}\n    array[0]=${array[i]}\n    array[i]=$temp\n\n    # Initialize the index of the parent node.\n    j=0\n\n    # Initialize the index of the child node.\n    k=$",
    "  local list=($1)\n  local i=0\n  local j=0\n  local k=0\n  local n=${#list[@]}\n  local temp=0\n\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $((i - 1)) 0\n  done\n\n  echo \"${list[@]}\"",
    "  local list=($1)\n  local n=${#list[@]}\n  local i\n  local j\n  local temp\n  local largest\n  local left\n  local right\n\n  # Build the heap\n  for ((i = n / 2 - 1; i >= 0; i--)); do\n    heapify \"${list[@]}\" $n $i\n  done\n\n  # Extract the elements from the heap\n  for ((i = n - 1; i >= 0; i--)); do\n    temp=${list[0]}\n    list[0]=${list[i]}\n    list[i]=$temp\n    heapify \"${list[@]}\" $i 0\n  done\n\n  echo \"${list[@]}\"",
    "    local list=($1)\n    local i=0\n    local j=0\n    local k=0\n    local n=${#list[@]}\n    local temp=0\n\n    # Build heap\n    for ((i = n / 2 - 1; i >= 0; i--)); do\n        heapify \"${list[@]}\" $i $n\n    done\n\n    # Heap sort\n    for ((i = n - 1; i >= 0; i--)); do\n        temp=${list[0]}\n        list[0]=${list[i]}\n        list[i]=$temp\n        heapify \"${list[@]}\" 0 $((i - 1))\n    done\n\n    echo \"${list[@]}\"",
    "    local array=()\n    local i=0\n    for item in $1; do\n        array[$i]=$item\n        ((i++))\n    done\n\n    local length=${#array[@]}\n    for ((i=length/2-1; i>=0; i--)); do\n        heapify ${array[@]} $i $length\n    done\n\n    for ((i=length-1; i>=0; i--)); do\n        swap ${array[@]} 0 $i\n        heapify ${array[@]} 0 $i\n    done\n\n    echo ${array[@]}"
  ]
}