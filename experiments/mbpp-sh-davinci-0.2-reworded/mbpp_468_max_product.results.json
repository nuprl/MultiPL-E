{
  "name": "mbpp_468_max_product",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod\n    local -a max_prod\n\n    prod[0]=${arr[0]}\n    max_prod[0]=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        prod[i]=$(( ${arr[i]} * ${prod[i-1]} ))\n        max_prod[i]=$(( ${prod[i]} > ${max_prod[i-1]} ? ${prod[i]} : ${max_prod[i-1]} ))\n    done\n\n    echo ${max_prod[@]}\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=()\n  local -a max=()\n  local -a min=()\n  local -i i=0\n  local -i j=0\n  local -i max_product=0\n  local -i max_product_temp=0\n  local -i max_product_temp_1=0\n  local -i max_product_temp_2=0\n  local -i max_product_temp_3=0\n  local -i max_product_temp_4=0\n  local -i max_product_temp_5=0\n  local -i max_product_temp_6=0\n  local -i max_product_temp_7=0\n  local -i max_product_temp_8=0\n  local -i max_product_temp_9=0\n  local -i max_product_temp_10=0\n  local -i max_product_temp_11=0\n  local -i max_product_temp_12=0\n  local -i max_product_temp_13=0\n  local -i max_product_temp_14=0\n  local -i max_product_temp_15=0\n  local -i max_product_temp_16=0\n  local -i max_product_temp_17=0\n  local -i max_product_temp_18=0\n  local -i max_product_temp_19=0\n  local -i max_product_temp_20=0\n  local -i max_product_temp_21=0\n  local -i max_product_temp_22=0\n  local -i max_product_temp_23=0\n  local -i max_product_temp_24=0\n  local -i max_product_temp_25=0\n  local -i max_product_temp_26=0\n  local -i max_product_temp_27=0\n  local -i max_product_temp_28=0\n  local -i max_product_temp_29=0\n  local -i max_product_temp_30=0\n  local -i max_product_temp_31=0\n  local -i max_product_temp_32=0\n \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local max=0\n  local product=1\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    product=1\n    for ((j=i; j<len; j++)); do\n      product=$((product * arr[j]))\n      if [[ $product -gt $max ]]; then\n        max=$product\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array=($1)\n    local -a products=(1)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i product=0\n    local -i len=${#array[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((array[j] < array[i])); then\n                product=${products[j]}*${array[i]}\n                if ((product > max)); then\n                    max=$product\n                fi\n            fi\n        done\n        products[i]=max\n    done\n    echo ${products[@]}\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=()\n    local -a inc=()\n    local -a dec=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i max=0\n    local -i prod=0\n    local -i n=0\n    local -i m=0\n    local -i p=0\n    local -i q=0\n\n    arr=($1)\n    n=${#arr[@]}\n    inc[0]=1\n    dec[0]=1\n\n    for ((i=1; i<n; i++)); do\n        inc[i]=1\n        dec[i]=1\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                inc[i]=$(( inc[i] > inc[j]*arr[i] ? inc[i] : inc[j]*arr[i] ))\n            fi\n            if (( arr[j] > arr[i] )); then\n                dec[i]=$(( dec[i] > dec[j]*arr[i] ? dec[i] : dec[j]*arr[i] ))\n            fi\n        done\n    done\n\n    for ((k=0; k<n; k++)); do\n        prod=$(( inc[k]*dec[k] ))\n        max=$(( max > prod ? max : prod ))\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local -a max_prod_idx_len\n    local -a max_prod_idx_len_idx\n    local -a max_prod_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local -a prod\n  local -i i\n  local -i j\n  local -i max\n  local -i prod_max\n  local -i prod_min\n  local -i prod_curr\n\n  prod[0]=1\n  max=arr[0]\n  prod_max=arr[0]\n  prod_min=arr[0]\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    if ((arr[i] > 0)); then\n      prod_max=prod_max*arr[i]\n      prod_min=prod_min*arr[i]\n    else\n      prod_max=prod_min*arr[i]\n      prod_min=prod_max*arr[i]\n    fi\n    prod[i]=prod_max\n    if ((prod_max > max)); then\n      max=prod_max\n    fi\n  done\n\n  echo \"$max\"\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpdsrhc75a.sh: line 16: 3 100 4 5 150 6: syntax error in expression (error token is \"100 4 5 150 6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a\n    local i j k\n    local max_product=0\n    local product=0\n    IFS=' ' read -r -a a <<< \"$1\"\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=i+1; j<${#a[@]}; j++)); do\n            if ((a[j] > a[i])); then\n                product=1\n                for ((k=i; k<=j; k++)); do\n                    ((product *= a[k]))\n                done\n                if ((product > max_product)); then\n                    max_product=$product\n                fi\n            fi\n        done\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product\n    local -a max_product_index\n    local -a max_product_length\n    local -a max_product_length_index\n    local -a max_product_length_index_product\n    local -a max_product_length_index_product_length\n    local -a max_product_length_index_product_length_index\n    local -a max_product_length_index_product_length_index_product\n    local -a max_product_length_index_product_length_index_product_length\n    local -a max_product_length_index_product_length_index_product_length_index\n    local -a max_product_length_index_product_length_index_product_length_index_product\n    local -a max_product_length_index_product_length_index_product_length_index_product_length\n    local -a max_product_length_index_product_length_index_product_length_index_product_length_index\n    local -a max_product_length_index_product_length_index_product_length_index_product_length_index_product\n    local -a max_product_length_index_product_length_index_product_length_index_product_length_index_product_length\n    local -a max_product_length_index_product_length_index_product_length_index_product_length_index_product_length_index\n    local -a max_product_length_index_product_length_index_product_length_index_product_length_index_product_length_index_product\n    local -a max_product_length_index_product_length_index_product_length_index_product_length_index_product_length_index_product_length\n    local -a max_product_length_index_product_length_index_product_length_index_product_length_index_product_length_index_product_length_index\n    local -a max_product_length_index_product_length_index_product_length_index_product_length_index_product_length_index_product_length_index\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i product=0\n  local -i len=0\n  local -i len_max=0\n  local -i len_max_idx=0\n  local -i len_max_prev=0\n  local -i len_max_prev_idx=0\n  local -i len_max_prev_prev=0\n  local -i len_max_prev_prev_idx=0\n  local -i len_max_prev_prev_prev=0\n  local -i len_max_prev_prev_prev_idx=0\n  local -i len_max_prev_prev_prev_prev=0\n  local -i len_max_prev_prev_prev_prev_idx=0\n  local -i len_max_prev_prev_prev_prev_prev=0\n  local -i len_max_prev_prev_prev_prev_prev_idx=0\n  local -i len_max_prev_prev_prev_prev_prev_prev=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_idx=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_prev=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_prev_idx=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_prev_prev_idx=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_idx=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i len_max_prev_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_idx_len\n    local -a max_prod_idx_len_idx\n    local -a max_prod_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i prod=0\n\n  while read -r num; do\n    arr[i++]=$num\n  done <<< \"$1\"\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      prod=${arr[i]}*${arr[j]}\n      if ((prod > max)); then\n        max=$prod\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product\n    local -a max_product_index\n    local -a max_product_count\n    local -a max_product_count_index\n    local -a max_product_count_index_count\n    local -a max_product_count_index_count_index\n    local -a max_product_count_index_count_index_count\n    local -a max_product_count_index_count_index_count_index\n    local -a max_product_count_index_count_index_count_index_count\n    local -a max_product_count_index_count_index_count_index_count_index\n    local -a max_product_count_index_count_index_count_index_count_index_count\n    local -a max_product_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local max=0\n    local product=1\n    local i=0\n    local j=0\n    for ((i=0; i<${#a[@]}; i++)); do\n        for ((j=i; j<${#a[@]}; j++)); do\n            product=$((product * a[j]))\n            if [[ $product -gt $max ]]; then\n                max=$product\n            fi\n        done\n        product=1\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n    local -a A=($1)\n    local -a B=($1)\n    local -a C=($1)\n    local -a D=($1)\n    local -a E=($1)\n    local -a F=($1)\n    local -a G=($1)\n    local -a H=($1)\n    local -a I=($1)\n    local -a J=($1)\n    local -a K=($1)\n    local -a L=($1)\n    local -a M=($1)\n    local -a N=($1)\n    local -a O=($1)\n    local -a P=($1)\n    local -a Q=($1)\n    local -a R=($1)\n    local -a S=($1)\n    local -a T=($1)\n    local -a U=($1)\n    local -a V=($1)\n    local -a W=($1)\n    local -a X=($1)\n    local -a Y=($1)\n   \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local max=${arr[0]}\n  local i=1\n  local j=0\n  local product=1\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt ${arr[$j]} ]; then\n      product=$((product*arr[$i]))\n      if [ $product -gt $max ]; then\n        max=$product\n      fi\n    else\n      product=1\n      j=$i\n    fi\n    i=$((i+1))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod\n    local -i i j\n    local -i max=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        prod[$i]=${arr[$i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                if (( prod[i] < prod[j] * arr[i] )); then\n                    prod[i]=${prod[j]} * ${arr[i]}\n                fi\n            fi\n        done\n        if (( max < prod[i] )); then\n            max=${prod[i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n/tmp/tmprxxmeebq.sh: line 16: `prod[i]': not a valid identifier\\n/tmp/tmprxxmeebq.sh: line 16: 1: command not found\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local -i i j k\n    local -i max_product max_product_i max_product_j\n    local -i product\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    max_product=0\n    max_product_i=0\n    max_product_j=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            product=1\n            for ((k=i; k<=j; k++)); do\n                product=$((product * arr[k]))\n            done\n            if ((product > max_product)); then\n                max_product=$product\n                max_product_i=$i\n                max_product_j=$j\n            fi\n        done\n    done\n\n    echo \"$max_product_i $max_product_j\"\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -i max=0\n  local -i prod=1\n  local -i i=0\n  local -i j=0\n  local -i len=${#arr[@]}\n  local -i k=0\n\n  for ((i=0; i<len; i++)); do\n    prod=1\n    for ((j=i; j<len; j++)); do\n      prod=$((prod * arr[j]))\n      if ((prod > max)); then\n        max=prod\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod=(${arr[0]})\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i len=${#arr[@]}\n\n    for ((i=1; i<len; i++)); do\n        for ((j=0; j<i; j++)); do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                if [[ ${prod[i]} -lt ${prod[j]}*${arr[i]} ]]; then\n                    prod[i]=${prod[j]}*${arr[i]}\n                fi\n            fi\n        done\n    done\n\n    for ((i=0; i<len; i++)); do\n        if [[ ${prod[i]} -gt $max ]]; then\n            max=${prod[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local -a max_prod_val\n    local -a max_prod_idx_len\n    local -a max_prod_idx_val\n    local -a max_prod_len_val\n    local -a max_prod_idx_len_val\n    local -a max_prod_idx_len_val_idx\n    local -a max_prod_idx_len_val_len\n    local -a max_prod_idx_len_val_val\n    local -a max_prod_idx_len_val_idx_len\n    local -a max_prod_idx_len_val_idx_val\n    local -a max_prod_idx_len_val_len_val\n    local -a max_prod_idx_len_val_idx_len_val\n    local -a max_prod_idx_len_val_idx_len_val_idx\n    local -a max_prod_idx_len_val_idx_len_val_len\n    local -a max_prod_idx_len_val_idx_len_val_val\n    local -a max_prod_idx_len_val_idx_len_val_idx_len\n    local -a max_prod_idx_len_val_idx_len_val_idx_val\n    local -a max_prod_idx_len_val_idx_len_val_len_val\n    local -a max_prod_idx_len_val_idx_len_val_idx_len_val\n    local -a max_prod_idx_len_val_idx_len_val_idx_len_val_idx\n    local -a max_prod_idx_len_val_idx_len_val_idx_len_val_len\n   \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product\n    local -a max_product_index\n    local -a max_product_length\n    local -a max_product_length_index\n\n    max_product[0]=${arr[0]}\n    max_product_index[0]=0\n    max_product_length[0]=1\n    max_product_length_index[0]=0\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        max_product[i]=${arr[i]}\n        max_product_index[i]=$i\n        max_product_length[i]=1\n        max_product_length_index[i]=$i\n\n        for ((j=0; j<i; j++)); do\n            if (( arr[i] > arr[j] )); then\n                if (( max_product[i] < max_product[j] * arr[i] )); then\n                    max_product[i]=${max_product[j]}*${arr[i]}\n                    max_product_index[i]=$j\n                    max_product_length[i]=${max_product_length[j]}+1\n                    max_product_length_index[i]=$j\n                fi\n            fi\n        done\n    done\n\n    local max_product_length_max=0\n    local max_product_length_max_index=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( max_product_length[i] > max_product_length_max )); then\n            max_product_length_max=${max_product_length[i]}\n            max_product_length_max_index=$i\n        fi\n    done\n\n    local max_product_max=0\n    local max_product_max_index=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( max_product_length[i] == max_product_length_max )); then\n            if (( max_product[i] > max_product_max )); then\n                max_product_max=${max_product[i]}\n                max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp2uavb1sa.sh: line 51: syntax error near unexpected token `}'\\n/tmp/tmp2uavb1sa.sh: line 51: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a list=($1)\n    local -a products=(1)\n    local -a max_products=(1)\n    local -i i=0\n    local -i j=0\n    local -i max_product=0\n    local -i product=0\n\n    for ((i=1; i<${#list[@]}; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((list[j] < list[i])); then\n                product=${products[j]}*${list[i]}\n                if ((product > products[i])); then\n                    products[i]=$product\n                fi\n            fi\n        done\n    done\n\n    for ((i=0; i<${#products[@]}; i++)); do\n        if ((products[i] > max_product)); then\n            max_product=${products[i]}\n        fi\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local max_prod=1\n    local prod=1\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        prod=1\n        for ((j=i; j<len; j++)); do\n            prod=$((prod * arr[j]))\n            if [[ $prod -gt $max_prod ]]; then\n                max_prod=$prod\n            fi\n        done\n    done\n    echo $max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod\n    local -i i j\n    for ((i=0; i<${#arr[@]}; i++)); do\n        prod[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if (( arr[j] < arr[i] )); then\n                (( prod[i] = prod[i] > prod[j]*arr[i] ? prod[i] : prod[j]*arr[i] ))\n            fi\n        done\n    done\n    echo ${prod[@]} | tr ' ' '\\n' | sort -nr | head -n1\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a array\n  IFS=' ' read -r -a array <<< \"$1\"\n  local max_product=1\n  local product=1\n  local i\n  for ((i=0; i<${#array[@]}; i++)); do\n    if (( array[i] > 0 )); then\n      product=$(( product * array[i] ))\n    else\n      product=1\n    fi\n    if (( product > max_product )); then\n      max_product=$product\n    fi\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product\n    local -a max_product_index\n    local -a max_product_count\n    local -a max_product_index_count\n    local -a max_product_index_count_index\n    local -a max_product_index_count_index_count\n    local -a max_product_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a prod=(0)\n  local max=0\n  local i=0\n  local j=0\n  local k=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[$j]} -lt ${arr[$i]} ]]; then\n        if [[ ${prod[$j]} -eq 0 ]]; then\n          prod[$i]=${arr[$i]}\n        else\n          prod[$i]=$(( ${prod[$j]} * ${arr[$i]} ))\n        fi\n        if [[ ${prod[$i]} -gt $max ]]; then\n          max=${prod[$i]}\n        fi\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max=(0 0 0)\n  local -a min=(0 0 0)\n  local -a result=(0 0 0)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i tmp=0\n  local -i max_product=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if ((arr[i] > 0)); then\n      max[0]=${max[0]}\n      max[1]=${max[1]}\n      max[2]=${max[2]}\n      min[0]=${min[0]}\n      min[1]=${min[1]}\n      min[2]=${min[2]}\n    elif ((arr[i] < 0)); then\n      max[0]=${min[0]}\n      max[1]=${min[1]}\n      max[2]=${min[2]}\n      min[0]=${max[0]}\n      min[1]=${max[1]}\n      min[2]=${max[2]}\n    fi\n\n    max[0]=$((arr[i] * max[0]))\n    max[1]=$((arr[i] * max[1]))\n    max[2]=$((arr[i] * max[2]))\n    min[0]=$((arr[i] * min[0]))\n    min[1]=$((arr[i] * min[1]))\n    min[2]=$((arr[i] * min[2]))\n\n    for ((j=0; j<3; j++)); do\n      for ((k=j+1; k<3; k++)); do\n        if ((max[j] < max[k])); then\n          tmp=${max[j]}\n          max[j]=${max[k]}\n          max[k]=$tmp\n        fi\n        if ((min[j] > min[k])); then\n          tmp=${min[j]}\n          min[j]=${min[k]}\n          min[k]=$tmp\n        fi\n      done\n    done\n\n    if ((max[\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp7lr1__nx.sh: line 55: unexpected EOF while looking for matching `)'\\n/tmp/tmp7lr1__nx.sh: line 70: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i max=0\n    local -i product=0\n    local -i len=0\n    local -i len_max=0\n    local -i len_max_index=0\n    local -i len_max_index_prev=0\n    local -i len_max_index_prev_prev=0\n    local -i len_max_index_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i len_max_index_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a nums=($1)\n    local -a products=(${nums[0]})\n    local -a max_products=(${nums[0]})\n    local -i i=1\n    local -i j=0\n    local -i max_product=${nums[0]}\n    local -i product=0\n\n    while (( i < ${#nums[@]} )); do\n        (( j = i - 1 ))\n        while (( j >= 0 )); do\n            if (( nums[j] < nums[i] )); then\n                (( product = products[j] * nums[i] ))\n                if (( product > products[i] )); then\n                    products[i]=$product\n                fi\n            fi\n            (( j -= 1 ))\n        done\n        if (( products[i] == 0 )); then\n            products[i]=${nums[i]}\n        fi\n        if (( products[i] > max_product )); then\n            max_product=${products[i]}\n        fi\n        (( i += 1 ))\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local i j k\n    local max_product\n    local product\n    arr=($1)\n    max_product=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            product=${arr[i]}\n            for ((k=i+1; k<=j; k++)); do\n                product=$((product * arr[k]))\n            done\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product_arr\n    local -a max_product_arr_index\n    local -a max_product_arr_index_count\n    local -a max_product_arr_index_count_index\n    local -a max_product_arr_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local -i max=0\n  local -i cur=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      for ((k=j+1; k<len; k++)); do\n        cur=${arr[i]}*${arr[j]}*${arr[k]}\n        if ((cur>max)); then\n          max=cur\n        fi\n      done\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -a p=(${a[0]})\n  local -a n=(${a[0]})\n  local max=${a[0]}\n  for ((i=1; i<${#a[@]}; i++)); do\n    p[i]=$(( ${a[i]} * ${p[i-1]} ))\n    n[i]=$(( ${a[i]} * ${n[i-1]} ))\n    if [[ ${p[i]} -gt ${n[i]} ]]; then\n      max=$(( ${p[i]} > ${max} ? ${p[i]} : ${max} ))\n    else\n      max=$(( ${n[i]} > ${max} ? ${n[i]} : ${max} ))\n    fi\n  done\n  echo ${max}\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod=(0)\n    local -a max=(0)\n    local -a min=(0)\n    local -i max_prod=0\n    local -i i=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((arr[i] > 0)); then\n            prod[i]=${prod[i-1]}*arr[i]\n            max[i]=${max[i-1]}*arr[i]\n            min[i]=${min[i-1]}*arr[i]\n        elif ((arr[i] < 0)); then\n            prod[i]=${min[i-1]}*arr[i]\n            max[i]=${prod[i-1]}*arr[i]\n            min[i]=${max[i-1]}*arr[i]\n        else\n            prod[i]=0\n            max[i]=0\n            min[i]=0\n        fi\n\n        if ((prod[i] > max_prod)); then\n            max_prod=${prod[i]}\n        fi\n    done\n\n    echo $max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -i i\n  local -i j\n  local -i max_prod_i\n  local -i max_prod_j\n  local -i max_prod_val\n  local -i curr_prod_val\n  local -i max_prod_len\n  local -i curr_prod_len\n  local -i arr_len=${#arr[@]}\n  local -i max_prod_idx\n  local -i curr_prod_idx\n  local -i curr_prod_start_idx\n  local -i max_prod_start_idx\n  local -i max_prod_end_idx\n  local -i curr_prod_end_idx\n  local -i max_prod_i_idx\n  local -i max_prod_j_idx\n  local -i curr_prod_i_idx\n  local -i curr_prod_j_idx\n  local -i max_prod_i_val\n  local -i max_prod_j_val\n  local -i curr_prod_i_val\n  local -i curr_prod_j_val\n  local -i max_prod_i_len\n  local -i max_prod_j_len\n  local -i curr_prod_i_len\n  local -i curr_prod_j_len\n  local -i max_prod_i_start_idx\n  local -i max_prod_j_start_idx\n  local -i curr_prod_i_start_idx\n  local -i curr_prod_j_start_idx\n  local -i max_prod_i_end_idx\n  local -i max_prod_j_end_idx\n  local -i curr_prod_i_end_idx\n  local -i curr_prod_j_end_idx\n  local -i max_prod_i_idx_diff\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local -i i=0 j=0 k=0\n  local -i max=0\n  local -i prod=0\n  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      prod=1\n      for ((k=i; k<=j; k++)); do\n        prod=$((prod * arr[k]))\n      done\n      if ((prod > max)); then\n        max=$prod\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local max=0\n    local product=1\n    local i=0\n    local j=0\n    local nums=($1)\n    local len=${#nums[@]}\n    for ((i=0; i<len; i++)); do\n        product=1\n        for ((j=i; j<len; j++)); do\n            product=$((product * nums[j]))\n            if [[ $product -gt $max ]]; then\n                max=$product\n            fi\n        done\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a products\n  local -i i\n  local -i j\n  local -i max=0\n  local -i prod\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    prod=1\n    for ((j=i; j<${#arr[@]}; j++)); do\n      prod=$((prod * arr[j]))\n      products[j]=$prod\n    done\n    max=$((max > prod ? max : prod))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a prod\n  local max=0\n  local i=0\n  local j=0\n  local k=0\n  local n=${#arr[@]}\n  local tmp=0\n\n  for ((i=0; i<n; i++)); do\n    prod[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[j]} -lt ${arr[i]} ]]; then\n        tmp=$(( ${prod[j]} * ${arr[i]} ))\n        if [[ $tmp -gt ${prod[i]} ]]; then\n          prod[i]=$tmp\n        fi\n      fi\n    done\n    if [[ ${prod[i]} -gt $max ]]; then\n      max=${prod[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -i i=0 j=0 max=0\n    local -i len=${#arr[@]}\n    local -i prod=1\n\n    for ((i=0; i<len; i++)); do\n        prod=1\n        for ((j=i; j<len; j++)); do\n            prod=$((prod * arr[j]))\n            if ((prod > max)); then\n                max=$prod\n            fi\n        done\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local -a max_prod_end\n    local -a max_prod_start\n    local -a max_prod_arr\n    local -a max_prod_arr_idx\n    local -a max_prod_arr_len\n    local -a max_prod_arr_end\n    local -a max_prod_arr_start\n    local -a max_prod_arr_arr\n    local -a max_prod_arr_arr_idx\n    local -a max_prod_arr_arr_len\n    local -a max_prod_arr_arr_end\n    local -a max_prod_arr_arr_start\n    local -a max_prod_arr_arr_arr\n    local -a max_prod_arr_arr_arr_idx\n    local -a max_prod_arr_arr_arr_len\n    local -a max_prod_arr_arr_arr_end\n    local -a max_prod_arr_arr_arr_start\n    local -a max_prod_arr_arr_arr_arr\n    local -a max_prod_arr_arr_arr_arr_idx\n    local -a max_prod_arr_arr_arr_arr_len\n    local -a max_prod_arr_arr_arr_arr_end\n    local -a max_prod_arr_arr_arr_arr_start\n    local -a max_prod_arr_arr_arr_arr_arr\n    local -a max_prod_arr_arr_arr_arr_arr_idx\n    local -a max_prod_arr_arr_arr_arr_arr_len\n    local -a max_prod_arr_arr_arr_arr_arr_end\n    local -a max_prod_arr_arr_arr_arr_arr_start\n    local -a max_prod_arr_arr_arr_arr_arr_arr\n    local -a max_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local -a max_prod_idx_len\n    local -a max_prod_idx_len_idx\n    local -a max_prod_idx_len_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\n    local -a max_prod_idx_len_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -a max_prod_prev\n  local -a max_prod_next\n  local -a max_prod_prev_prev\n  local -a max_prod_next_next\n  local -a max_prod_prev_prev_prev\n  local -a max_prod_next_next_next\n  local -a max_prod_prev_prev_prev_prev\n  local -a max_prod_next_next_next_next\n  local -a max_prod_prev_prev_prev_prev_prev\n  local -a max_prod_next_next_next_next_next\n  local -a max_prod_prev_prev_prev_prev_prev_prev\n  local -a max_prod_next_next_next_next_next_next\n  local -a max_prod_prev_prev_prev_prev_prev_prev_prev\n  local -a max_prod_next_next_next_next_next_next_next\n  local -a max_prod_prev_prev_prev_prev_prev_prev_prev_prev\n  local -a max_prod_next_next_next_next_next_next_next_next\n  local -a max_prod_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -a max_prod_next_next_next_next_next_next_next_next_next\n  local -a max_prod_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -a max_prod_next_next_next_next_next_next_next_next_next_next\n  local -a max_prod_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -a max_prod_next_next_next_next_next_next_next_next_next_next_next\n  local -a max_prod_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product\n    local -a max_product_index\n    local -a max_product_length\n    local -a max_product_end_index\n    local -a max_product_end_index_length\n    local -a max_product_end_index_product\n    local -a max_product_end_index_product_length\n    local -a max_product_end_index_product_index\n    local -a max_product_end_index_product_index_length\n    local -a max_product_end_index_product_index_product\n    local -a max_product_end_index_product_index_product_length\n    local -a max_product_end_index_product_index_product_index\n    local -a max_product_end_index_product_index_product_index_length\n    local -a max_product_end_index_product_index_product_index_product\n    local -a max_product_end_index_product_index_product_index_product_length\n    local -a max_product_end_index_product_index_product_index_product_index\n    local -a max_product_end_index_product_index_product_index_product_index_length\n    local -a max_product_end_index_product_index_product_index_product_index_product\n    local -a max_product_end_index_product_index_product_index_product_index_product_length\n    local -a max_product_end_index_product_index_product_index_product_index_product_index\n    local -a max_product_end_index_product_index_product_index_product_index_product_index_length\n    local -a max_product_end_index_product_index_product_index_product_index_product_index_product\n    local -a max_product_end_index_product_index_product_index_product_index_product_index_product_length\n    local -a max_product_end_index_product_index_product_index_product_index_product_index_product_index\n   \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a res=()\n  local -a tmp=()\n  local i j k\n  for ((i=0; i<${#arr[@]}; i++)); do\n    tmp=()\n    for ((j=0; j<${#res[@]}; j++)); do\n      for ((k=0; k<${#res[j]}; k++)); do\n        if ((arr[i] > res[j][k])); then\n          tmp+=(${res[j]} ${arr[i]})\n        fi\n      done\n    done\n    res+=(${tmp[@]})\n  done\n  local max=1\n  for ((i=0; i<${#res[@]}; i++)); do\n    local prod=1\n    for ((j=0; j<${#res[i]}; j++)); do\n      ((prod *= res[i][j]))\n    done\n    if ((prod > max)); then\n      max=$prod\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=()\n    local i=0\n    local max=0\n    local product=1\n    local n=0\n    for i in $1; do\n        arr[$n]=$i\n        ((n++))\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[$i]} -lt ${arr[$j]} ]]; then\n                product=$((product * arr[$j]))\n            fi\n        done\n        if [[ $product -gt $max ]]; then\n            max=$product\n        fi\n        product=1\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a list=($1)\n    local -a max_product_list=()\n    local max_product=0\n    local product=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -i i=0 j=0 max_prod=0 prod=0\n  local -i len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    prod=1\n    for ((j=i; j<len; j++)); do\n      prod=$((prod * arr[j]))\n      if ((prod > max_prod)); then\n        max_prod=$prod\n      fi\n    done\n  done\n  echo $max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=${#arr[@]}\n  local -i prod=0\n\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${arr[j]} -gt ${arr[i]} ]]; then\n        prod=1\n        for ((k=i; k<=j; k++)); do\n          prod=$((prod * arr[k]))\n        done\n        if [[ $prod -gt $max ]]; then\n          max=$prod\n        fi\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local product=1\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]} -gt $max ]]; then\n      max=${arr[i]}\n    fi\n    product=$((product * ${arr[i]}))\n  done\n  echo $((max * product))\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local max=0\n  local product=1\n  local i=0\n  local j=0\n  local n=0\n  local array=()\n  local len=0\n\n  array=($1)\n  len=${#array[@]}\n\n  for ((i=0; i<len; i++)); do\n    product=1\n    for ((j=i; j<len; j++)); do\n      product=$((product * array[j]))\n      if [[ $product -gt $max ]]; then\n        max=$product\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product\n    local -a max_product_index\n    local -a max_product_index_temp\n    local -a max_product_temp\n    local -a max_product_temp_index\n    local -a max_product_temp_index_temp\n    local -a max_product_temp_temp\n    local -a max_product_temp_temp_index\n    local -a max_product_temp_temp_index_temp\n    local -a max_product_temp_temp_temp\n    local -a max_product_temp_temp_temp_index\n    local -a max_product_temp_temp_temp_index_temp\n    local -a max_product_temp_temp_temp_temp\n    local -a max_product_temp_temp_temp_temp_index\n    local -a max_product_temp_temp_temp_temp_index_temp\n    local -a max_product_temp_temp_temp_temp_temp\n    local -a max_product_temp_temp_temp_temp_temp_index\n    local -a max_product_temp_temp_temp_temp_temp_index_temp\n    local -a max_product_temp_temp_temp_temp_temp_temp\n    local -a max_product_temp_temp_temp_temp_temp_temp_index\n    local -a max_product_temp_temp_temp_temp_temp_temp_index_temp\n    local -a max_product_temp_temp_temp_temp_temp_temp_temp\n    local -a max_product_temp_temp_temp_temp_temp_temp_temp_index\n    local -a max_product_temp_temp_temp_temp_temp_temp_temp_index_temp\n    local -a max_product_temp_temp_temp_temp_temp_temp_temp_temp\n    local -a max_product_temp_temp_temp_temp_temp_temp_temp_temp_index\n    local -a max_product_temp_temp_temp_temp_temp_temp_temp_temp_index_temp\n    local -a max_product_temp_temp_temp_temp\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a\n  local i j k\n  IFS=' ' read -r -a a <<< \"$1\"\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=i+1; j<${#a[@]}; j++)); do\n      for ((k=j+1; k<${#a[@]}; k++)); do\n        if ((a[i] < a[j] && a[j] < a[k])); then\n          echo $((a[i] * a[j] * a[k]))\n          return\n        fi\n      done\n    done\n  done\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr\n  local i j k\n  local max=0\n  local prod=1\n  arr=($1)\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i; j<${#arr[@]}; j++)); do\n      prod=1\n      for ((k=i; k<=j; k++)); do\n        prod=$((prod * arr[k]))\n      done\n      if ((prod > max)); then\n        max=$prod\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -a max_prod_idx\n  local -a max_prod_len\n  local -a max_prod_len_idx\n  local -a max_prod_len_idx_len\n  local -a max_prod_len_idx_len_idx\n  local -a max_prod_len_idx_len_idx_len\n  local -a max_prod_len_idx_len_idx_len_idx\n  local -a max_prod_len_idx_len_idx_len_idx_len\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -a max_prod_idx\n  local -a max_prod_len\n  local -a max_prod_start\n  local -a max_prod_end\n  local -a max_prod_arr\n  local -a max_prod_arr_idx\n  local -a max_prod_arr_len\n  local -a max_prod_arr_start\n  local -a max_prod_arr_end\n  local -a max_prod_arr_arr\n  local -a max_prod_arr_arr_idx\n  local -a max_prod_arr_arr_len\n  local -a max_prod_arr_arr_start\n  local -a max_prod_arr_arr_end\n  local -a max_prod_arr_arr_arr\n  local -a max_prod_arr_arr_arr_idx\n  local -a max_prod_arr_arr_arr_len\n  local -a max_prod_arr_arr_arr_start\n  local -a max_prod_arr_arr_arr_end\n  local -a max_prod_arr_arr_arr_arr\n  local -a max_prod_arr_arr_arr_arr_idx\n  local -a max_prod_arr_arr_arr_arr_len\n  local -a max_prod_arr_arr_arr_arr_start\n  local -a max_prod_arr_arr_arr_arr_end\n  local -a max_prod_arr_arr_arr_arr_arr\n  local -a max_prod_arr_arr_arr_arr_arr_idx\n  local -a max_prod_arr_arr_arr_arr_arr_len\n  local -a max_prod_arr_arr_arr_arr_arr_start\n  local -a max_prod_arr_arr_arr_arr_arr_end\n  local -a max_prod_arr_arr_arr_arr_arr_arr\n  local -a max_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array=($1)\n    local -a products\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i max=0\n    local -i product=0\n\n    for ((i=0; i<${#array[@]}; i++)); do\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            if ((array[j] > array[i])); then\n                product=1\n                for ((k=i; k<=j; k++)); do\n                    product=$((product * array[k]))\n                done\n                products[${#products[@]}]=$product\n            fi\n        done\n    done\n\n    for ((i=0; i<${#products[@]}; i++)); do\n        if ((products[i] > max)); then\n            max=${products[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -i n=${#a[@]}\n  local -i i j k\n  local -i max_product=0\n  local -i product\n\n  for ((i=0; i<n; i++)); do\n    for ((j=i+1; j<n; j++)); do\n      product=1\n      for ((k=i; k<=j; k++)); do\n        product*=${a[k]}\n      done\n      if ((product>max_product)); then\n        max_product=product\n      fi\n    done\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp1jvhz3nh.sh: line 16: product*=3: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=3: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=4: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=3: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=4: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=5: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=3: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=4: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=5: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=150: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=3: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=4: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=5: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=150: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=6: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=4: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=4: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=5: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=4: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=5: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=150: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=100: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=4: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=5: command not found\\n/tmp/tmp1jvhz3nh.sh: line 16: product*=150: command not found\\n/tmp/tm",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a dp=(0)\n    local -a dp_min=(0)\n    local max_product=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local curr_product=${arr[i]}\n        if ((curr_product > max_product)); then\n            max_product=$curr_product\n        fi\n        if ((curr_product > 0)); then\n            if ((dp[i-1] > 0)); then\n                curr_product=$((curr_product * dp[i-1]))\n            fi\n            if ((curr_product > max_product)); then\n                max_product=$curr_product\n            fi\n        fi\n        if ((curr_product < 0)); then\n            if ((dp_min[i-1] < 0)); then\n                curr_product=$((curr_product * dp_min[i-1]))\n            fi\n            if ((curr_product > max_product)); then\n                max_product=$curr_product\n            fi\n        fi\n        dp[i]=$curr_product\n        if ((curr_product < 0)); then\n            dp_min[i]=$curr_product\n        else\n            dp_min[i]=0\n        fi\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a products\n  local i j\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    products[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        if (( products[i] < products[j] * arr[i] )); then\n          products[i]=$(( products[j] * arr[i] ))\n        fi\n      fi\n    done\n  done\n\n  echo ${products[@]} | tr ' ' '\\n' | sort -nr | head -n1\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local i j k\n    local max_prod\n    local prod\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n\n    max_prod=${arr[0]}\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            prod=${arr[i]}\n            for (( k=i+1; k<=j; k++ )); do\n                prod=$(( prod * arr[k] ))\n            done\n            if (( prod > max_prod )); then\n                max_prod=$prod\n            fi\n        done\n    done\n\n    echo $max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a array=($1)\n  local -i max_product=0\n  local -i product=1\n  local -i i=0\n  local -i j=0\n\n  for ((i = 0; i < ${#array[@]}; i++)); do\n    product=1\n    for ((j = i; j < ${#array[@]}; j++)); do\n      product=$((product * array[j]))\n      if ((product > max_product)); then\n        max_product=$product\n      fi\n    done\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -a max_prod_idx\n  local -a max_prod_len\n  local -a max_prod_idx_len\n  local -a max_prod_idx_len_idx\n  local -a max_prod_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -i n=${#a[@]}\n    local -i i j k\n    local -i max_product=0\n    local -i product=0\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            product=${a[i]}\n            for ((k=i+1; k<=j; k++)); do\n                product=$((product * a[k]))\n            done\n            if ((product > max_product)); then\n                max_product=$product\n            fi\n        done\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product_arr\n    local -a max_product_arr_index\n    local -a max_product_arr_index_index\n    local -a max_product_arr_index_index_index\n    local -a max_product_arr_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local -a max_product_arr_index_index_index\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local max=0\n  local product=1\n  for i in $1; do\n    product=$((product * i))\n    if [[ $product -gt $max ]]; then\n      max=$product\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a res=()\n  local -a max=()\n  local -a min=()\n  local -i i\n  local -i j\n  local -i max_product\n  local -i max_product_tmp\n  local -i min_product\n  local -i min_product_tmp\n\n  res[0]=${arr[0]}\n  max[0]=${arr[0]}\n  min[0]=${arr[0]}\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    max_product=${max[i-1]}\n    min_product=${min[i-1]}\n\n    max_product_tmp=${arr[i]}\n    min_product_tmp=${arr[i]}\n\n    for ((j=0; j<i; j++)); do\n      max_product_tmp=$((max_product_tmp * ${arr[j]}))\n      min_product_tmp=$((min_product_tmp * ${arr[j]}))\n\n      if [[ $max_product_tmp -gt $max_product ]]; then\n        max_product=$max_product_tmp\n      fi\n\n      if [[ $min_product_tmp -lt $min_product ]]; then\n        min_product=$min_product_tmp\n      fi\n    done\n\n    max[i]=$max_product\n    min[i]=$min_product\n    res[i]=$max_product\n  done\n\n  echo ${res[@]} | tr ' ' '\\n' | sort -nr | head -n1\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local product=1\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[i]} -gt $max ]]; then\n      max=${arr[i]}\n    fi\n    product=$((product * ${arr[i]}))\n  done\n  echo $((max * product))\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a list=($1)\n    local max=0\n    for ((i=0; i<${#list[@]}; i++)); do\n        for ((j=i+1; j<${#list[@]}; j++)); do\n            local product=$((list[i] * list[j]))\n            if ((product > max)); then\n                max=$product\n            fi\n        done\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local max=0\n  local product=1\n  local i=0\n  local j=0\n  local k=0\n  local len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j] > arr[i])); then\n        product=1\n        for ((k=i; k<=j; k++)); do\n          ((product *= arr[k]))\n        done\n        if ((product > max)); then\n          max=$product\n        fi\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n    local -a A=($1)\n    local -a B=($1)\n    local -a C=($1)\n    local -a D=($1)\n    local -a E=($1)\n    local -a F=($1)\n    local -a G=($1)\n    local -a H=($1)\n    local -a I=($1)\n    local -a J=($1)\n    local -a K=($1)\n    local -a L=($1)\n    local -a M=($1)\n    local -a N=($1)\n    local -a O=($1)\n    local -a P=($1)\n    local -a Q=($1)\n    local -a R=($1)\n    local -a S=($1)\n    local -a T=($1)\n    local -a U=($1)\n    local -a V=($1)\n    local -a W=($1)\n    local -a X=($1)\n    local -a Y=($1)\n   \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local max=${arr[0]}\n  local max_product=${arr[0]}\n  local min=${arr[0]}\n  local min_product=${arr[0]}\n  local product=${arr[0]}\n  local i=1\n  while [ $i -lt ${#arr[@]} ]; do\n    if [ ${arr[$i]} -gt 0 ]; then\n      max_product=$((max_product * arr[i]))\n      min_product=$((min_product * arr[i]))\n    elif [ ${arr[$i]} -lt 0 ]; then\n      local tmp=$max_product\n      max_product=$((min_product * arr[i]))\n      min_product=$((tmp * arr[i]))\n    else\n      max_product=0\n      min_product=0\n    fi\n    if [ $max_product -gt $max ]; then\n      max=$max_product\n    fi\n    if [ $min_product -lt $min ]; then\n      min=$min_product\n    fi\n    i=$((i + 1))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local -a max_prod_len_idx\n    local -a max_prod_len_idx_len\n    local -a max_prod_len_idx_len_idx\n    local -a max_prod_len_idx_len_idx_len\n    local -a max_prod_len_idx_len_idx_len_idx\n    local -a max_prod_len_idx_len_idx_len_idx_len\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr\n  local -i i j k\n  local -i max_product max_product_tmp\n  local -i max_product_start max_product_end\n  local -i max_product_start_tmp max_product_end_tmp\n  local -i max_product_start_tmp2 max_product_end_tmp2\n  local -i max_product_start_tmp3 max_product_end_tmp3\n  local -i max_product_start_tmp4 max_product_end_tmp4\n  local -i max_product_start_tmp5 max_product_end_tmp5\n  local -i max_product_start_tmp6 max_product_end_tmp6\n  local -i max_product_start_tmp7 max_product_end_tmp7\n  local -i max_product_start_tmp8 max_product_end_tmp8\n  local -i max_product_start_tmp9 max_product_end_tmp9\n  local -i max_product_start_tmp10 max_product_end_tmp10\n  local -i max_product_start_tmp11 max_product_end_tmp11\n  local -i max_product_start_tmp12 max_product_end_tmp12\n  local -i max_product_start_tmp13 max_product_end_tmp13\n  local -i max_product_start_tmp14 max_product_end_tmp14\n  local -i max_product_start_tmp15 max_product_end_tmp15\n  local -i max_product_start_tmp16 max_product_end_tmp16\n  local -i max_product_start_tmp17 max_product_end_tmp17\n  local -i max_product_start_tmp18 max_product_end_tmp18\n  local -i max_product_start_tmp19 max_product_end_tmp19\n  local -i max_product_start_tmp20 max_product_end_tmp20\n  local -i max_product_start_tmp21 max_product_end_tmp21\n  local -i max_product_start_tmp22 max_product_end_tmp22\n  local -i max_product_start\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local max=0\n  local product=1\n  for ((i=0; i<${#arr[@]}; i++)); do\n    product=$((product * arr[i]))\n    if ((product > max)); then\n      max=$product\n    fi\n    if ((arr[i] == 0)); then\n      product=1\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local max=0\n    local product=1\n    local i=0\n    local j=0\n    local k=0\n    local len=${#1}\n    local arr=($1)\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            product=1\n            for ((k=i; k<=j; k++)); do\n                product=$((product * arr[k]))\n            done\n            if ((product > max)); then\n                max=$product\n            fi\n        done\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local max_product=1\n  local max_product_ending_here=1\n\n  for i in \"${arr[@]}\"; do\n    max_product_ending_here=$((max_product_ending_here * i))\n    if [[ $max_product_ending_here -gt $max_product ]]; then\n      max_product=$max_product_ending_here\n    fi\n    if [[ $max_product_ending_here -eq 0 ]]; then\n      max_product_ending_here=1\n    fi\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a prods=()\n  local -a max_prods=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    prods[i]=${arr[i]}\n    max_prods[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        prods[i]=$((prods[i] * arr[j]))\n        if ((prods[i] > max_prods[i])); then\n          max_prods[i]=${prods[i]}\n        fi\n      fi\n    done\n    if ((max_prods[i] > max)); then\n      max=${max_prods[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a numbers=($1)\n  local -a products=(${numbers[0]})\n  local max_product=${numbers[0]}\n  local i=1\n  local j=0\n  local product=0\n  while [ $i -lt ${#numbers[@]} ]; do\n    for j in $(seq 0 $((i-1))); do\n      if [ ${numbers[$j]} -lt ${numbers[$i]} ]; then\n        product=$((numbers[$i] * products[$j]))\n        if [ $product -gt ${products[$i]} ]; then\n          products[$i]=$product\n        fi\n      fi\n    done\n    if [ ${products[$i]} -gt $max_product ]; then\n      max_product=${products[$i]}\n    fi\n    i=$((i+1))\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpp_swea_0.sh: line 16: [: 300: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 12: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 15: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 0: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 450: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 0: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 0: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 0: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 21: [: -gt: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 18: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 0: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 16: [: 0: unary operator expected\\n/tmp/tmpp_swea_0.sh: line 21: [: -gt: unary operator expected\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n    local -a A=($1)\n    local -a B=($1)\n    local -a C=($1)\n    local -a D=($1)\n    local -a E=($1)\n    local -a F=($1)\n    local -a G=($1)\n    local -a H=($1)\n    local -a I=($1)\n    local -a J=($1)\n    local -a K=($1)\n    local -a L=($1)\n    local -a M=($1)\n    local -a N=($1)\n    local -a O=($1)\n    local -a P=($1)\n    local -a Q=($1)\n    local -a R=($1)\n    local -a S=($1)\n    local -a T=($1)\n    local -a U=($1)\n    local -a V=($1)\n    local -a W=($1)\n    local -a X=($1)\n    local -a Y=($1)\n   \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod\n    local -a max\n    local -a min\n    local -i i\n    local -i j\n    local -i max_prod\n\n    prod[0]=${arr[0]}\n    max[0]=${arr[0]}\n    min[0]=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        prod[i]=${arr[i]}\n        max[i]=${arr[i]}\n        min[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n            if [[ ${arr[i]} -gt 0 ]]; then\n                prod[i]=$((prod[i] * arr[j]))\n                max[i]=$((max[i] * arr[j]))\n                min[i]=$((min[i] * arr[j]))\n            else\n                prod[i]=$((prod[i] * arr[j]))\n                max[i]=$((max[i] * arr[j]))\n                min[i]=$((min[i] * arr[j]))\n            fi\n        done\n    done\n\n    max_prod=${prod[0]}\n    for ((i=1; i<${#prod[@]}; i++)); do\n        if [[ ${prod[i]} -gt $max_prod ]]; then\n            max_prod=${prod[i]}\n        fi\n    done\n\n    echo $max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=()\n    local -i i=0\n    local -i max=0\n    local -i prod=1\n    local -i len=0\n    local -i max_len=0\n    local -i max_prod=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n\n    arr=($1)\n    n=${#arr[@]}\n\n    for ((i=0; i<n; i++)); do\n        max=${arr[i]}\n        prod=1\n        len=0\n        for ((j=i; j<n; j++)); do\n            if ((arr[j] > max)); then\n                max=${arr[j]}\n            fi\n            prod=$((prod * arr[j]))\n            len=$((len + 1))\n            if ((prod > max_prod)); then\n                max_prod=$prod\n                max_len=$len\n                max_i=$i\n                max_j=$j\n            fi\n        done\n    done\n\n    for ((k=max_i; k<=max_j; k++)); do\n        echo -n \"${arr[k]} \"\n    done\n    echo\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -a d=($1)\n  local -a e=($1)\n  local -a f=($1)\n  local -a g=($1)\n  local -a h=($1)\n  local -a i=($1)\n  local -a j=($1)\n  local -a k=($1)\n  local -a l=($1)\n  local -a m=($1)\n  local -a n=($1)\n  local -a o=($1)\n  local -a p=($1)\n  local -a q=($1)\n  local -a r=($1)\n  local -a s=($1)\n  local -a t=($1)\n  local -a u=($1)\n  local -a v=($1)\n  local -a w=($1)\n  local -a x=($1)\n  local -a y=($1)\n  local -a z=($1)\n  local -a aa=($1)\n  local -a ab=($1)\n  local -a ac=($1)\n  local -a ad=($1)\n  local -a ae=($1)\n  local -a af=($1)\n  local -a ag=($1)\n  local -a ah=($1)\n  local -a ai=($1)\n  local -a aj=($1)\n  local -a ak=($1)\n  local -a al=($1)\n  local -a am=($1)\n  local -a an=($1)\n  local -a ao=($1)\n  local -a ap=($1)\n  local -a aq=($1)\n  local -a ar=($1)\n  local -a as=($1)\n  local -a at=($1)\n  local -a au=($1)\n  local -a av=($1)\n  local -a aw=($1)\n  local -a ax=($1)\n  local -a ay\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a list=($1)\n  local -a products\n  local -i i=0\n  local -i j=0\n  local -i max=0\n\n  for ((i=0; i<${#list[@]}; i++)); do\n    for ((j=i+1; j<${#list[@]}; j++)); do\n      if (( list[j] > list[i] )); then\n        products[i]=$(( list[i] * list[j] ))\n      fi\n    done\n  done\n\n  for ((i=0; i<${#products[@]}; i++)); do\n    if (( products[i] > max )); then\n      max=${products[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=()\n    local -a max_product=()\n    local -a max_product_index=()\n    local -a max_product_index_prev=()\n    local -a max_product_index_next=()\n    local -a max_product_index_prev_next=()\n    local -a max_product_index_prev_prev=()\n    local -a max_product_index_next_next=()\n    local -a max_product_index_prev_prev_next=()\n    local -a max_product_index_prev_next_next=()\n    local -a max_product_index_prev_prev_next_next=()\n    local -a max_product_index_prev_prev_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next_next_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next=()\n    local -a max_product_index_prev_prev_next_next_next_next_next_next_next_next_next_next_next_next_next\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -a d=($1)\n  local -a e=($1)\n  local -a f=($1)\n  local -a g=($1)\n  local -a h=($1)\n  local -a i=($1)\n  local -a j=($1)\n  local -a k=($1)\n  local -a l=($1)\n  local -a m=($1)\n  local -a n=($1)\n  local -a o=($1)\n  local -a p=($1)\n  local -a q=($1)\n  local -a r=($1)\n  local -a s=($1)\n  local -a t=($1)\n  local -a u=($1)\n  local -a v=($1)\n  local -a w=($1)\n  local -a x=($1)\n  local -a y=($1)\n  local -a z=($1)\n  local -a aa=($1)\n  local -a ab=($1)\n  local -a ac=($1)\n  local -a ad=($1)\n  local -a ae=($1)\n  local -a af=($1)\n  local -a ag=($1)\n  local -a ah=($1)\n  local -a ai=($1)\n  local -a aj=($1)\n  local -a ak=($1)\n  local -a al=($1)\n  local -a am=($1)\n  local -a an=($1)\n  local -a ao=($1)\n  local -a ap=($1)\n  local -a aq=($1)\n  local -a ar=($1)\n  local -a as=($1)\n  local -a at=($1)\n  local -a au=($1)\n  local -a av=($1)\n  local -a aw=($1)\n  local -a ax=($1)\n  local -a ay\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -i i=0 j=0 k=0\n  local -i max=0\n  local -i product=0\n\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=i+1; j<${#a[@]}; j++)); do\n      if ((a[j] > a[i])); then\n        product=1\n        for ((k=i; k<=j; k++)); do\n          ((product *= a[k]))\n        done\n        if ((product > max)); then\n          max=$product\n        fi\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=(\"$@\")\n    local max_product=1\n    local max_product_so_far=1\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        max_product_so_far=$((max_product_so_far * arr[i]))\n        if ((max_product_so_far > max_product)); then\n            max_product=$max_product_so_far\n        fi\n        if ((max_product_so_far == 0)); then\n            max_product_so_far=1\n        fi\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpt_cbonpd.sh: line 11: 3 100 4 5 150 6: syntax error in expression (error token is \"100 4 5 150 6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_product_arr\n  local -a max_product_arr_prev\n  local -a max_product_arr_next\n  local -a max_product_arr_prev_next\n  local -a max_product_arr_prev_prev\n  local -a max_product_arr_next_next\n  local -a max_product_arr_prev_prev_next\n  local -a max_product_arr_prev_next_next\n  local -a max_product_arr_prev_prev_next_next\n  local -a max_product_arr_prev_prev_prev_next\n  local -a max_product_arr_prev_prev_next_next_next\n  local -a max_product_arr_prev_prev_prev_next_next\n  local -a max_product_arr_prev_prev_prev_prev_next\n  local -a max_product_arr_prev_prev_prev_next_next_next\n  local -a max_product_arr_prev_prev_prev_prev_next_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_next\n  local -a max_product_arr_prev_prev_prev_prev_next_next_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_next_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_prev_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_next_next_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_prev_next_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_prev_prev_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_prev_next_next_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_prev_prev_next_next\n  local -a max_product_arr_prev_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -a d=($1)\n  local -a e=($1)\n  local -a f=($1)\n  local -a g=($1)\n  local -a h=($1)\n  local -a i=($1)\n  local -a j=($1)\n  local -a k=($1)\n  local -a l=($1)\n  local -a m=($1)\n  local -a n=($1)\n  local -a o=($1)\n  local -a p=($1)\n  local -a q=($1)\n  local -a r=($1)\n  local -a s=($1)\n  local -a t=($1)\n  local -a u=($1)\n  local -a v=($1)\n  local -a w=($1)\n  local -a x=($1)\n  local -a y=($1)\n  local -a z=($1)\n  local -a aa=($1)\n  local -a ab=($1)\n  local -a ac=($1)\n  local -a ad=($1)\n  local -a ae=($1)\n  local -a af=($1)\n  local -a ag=($1)\n  local -a ah=($1)\n  local -a ai=($1)\n  local -a aj=($1)\n  local -a ak=($1)\n  local -a al=($1)\n  local -a am=($1)\n  local -a an=($1)\n  local -a ao=($1)\n  local -a ap=($1)\n  local -a aq=($1)\n  local -a ar=($1)\n  local -a as=($1)\n  local -a at=($1)\n  local -a au=($1)\n  local -a av=($1)\n  local -a aw=($1)\n  local -a ax=($1)\n  local -a ay\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr\n  local -i i j k\n  local -i max_product=0\n  local -i product\n\n  arr=($1)\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[j] > arr[i])); then\n        product=1\n        for ((k=i; k<=j; k++)); do\n          product=$((product * arr[k]))\n        done\n        if ((product > max_product)); then\n          max_product=$product\n        fi\n      fi\n    done\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_product=(${arr[0]})\n  local -a max_product_idx=(0)\n  local -a max_product_len=(1)\n  local -a max_product_end=(0)\n  local -a max_product_start=(0)\n  local -a max_product_sum=(${arr[0]})\n  local -a max_product_prod=(${arr[0]})\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    local -a cur_product=(${arr[i]})\n    local -a cur_product_idx=($i)\n    local -a cur_product_len=(1)\n    local -a cur_product_end=($i)\n    local -a cur_product_start=($i)\n    local -a cur_product_sum=(${arr[i]})\n    local -a cur_product_prod=(${arr[i]})\n\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        if ((max_product_len[j] + 1 > cur_product_len[j])); then\n          cur_product[j]=${max_product[j]}\n          cur_product_idx[j]=${max_product_idx[j]}\n          cur_product_len[j]=${max_product_len[j]}\n          cur_product_end[j]=${max_product_end[j]}\n          cur_product_start[j]=${max_product_start[j]}\n          cur_product_sum[j]=${max_product_sum[j]}\n          cur_product_prod[j]=${max_product_prod[j]}\n        fi\n      fi\n    done\n\n    for ((j=0; j<i; j++)); do\n      if ((arr[i] > arr[j])); then\n        if ((cur_product_len[j] + 1 > cur_product_len[i])); then\n          cur_product[i]=${cur_product[j]}\n          cur\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpfyqrwjqf.sh: line 43: syntax error near unexpected token `}'\\n/tmp/tmpfyqrwjqf.sh: line 43: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local -a products=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i max=0\n  local -i product=0\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[j] > arr[i])); then\n        product=1\n        for ((k=i; k<=j; k++)); do\n          product=$((product * arr[k]))\n        done\n        products+=($product)\n      fi\n    done\n  done\n\n  for ((i=0; i<${#products[@]}; i++)); do\n    if ((products[i] > max)); then\n      max=${products[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array=($1)\n    local -a products\n    local -a products_indexes\n    local -a products_lengths\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i max_product=0\n    local -i max_product_index=0\n    local -i max_product_length=0\n    local -i product=0\n    local -i product_index=0\n    local -i product_length=0\n    local -i array_length=${#array[@]}\n    local -i array_length_minus_one=$((array_length - 1))\n    local -i array_length_minus_two=$((array_length - 2))\n    local -i array_length_minus_three=$((array_length - 3))\n    local -i array_length_minus_four=$((array_length - 4))\n    local -i array_length_minus_five=$((array_length - 5))\n    local -i array_length_minus_six=$((array_length - 6))\n    local -i array_length_minus_seven=$((array_length - 7))\n    local -i array_length_minus_eight=$((array_length - 8))\n    local -i array_length_minus_nine=$((array_length - 9))\n    local -i array_length_minus_ten=$((array_length - 10))\n    local -i array_length_minus_eleven=$((array_length - 11))\n    local -i array_length_minus_twelve=$((array_length - 12))\n    local -i array_length_minus_thirteen=$((array_length - 13))\n    local -i array_length_minus_fourteen=$((array_length - 14))\n    local -i array_length_minus_fifteen=$((array_length - 15))\n    local -i array_length_minus_sixteen=$((array_length - 16))\n    local -i array_length_minus_seventeen=$((array_length - 17))\n    local -i array_length_minus_eighteen=$((array_length - 18))\n    local -i array_length\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=()\n  local -a res=()\n  local -a tmp=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i max=0\n  local -i prod=0\n  local -i len=0\n  local -i len_tmp=0\n  local -i len_res=0\n  local -i len_arr=0\n  local -i len_res_tmp=0\n  local -i len_res_max=0\n  local -i len_res_max_tmp=0\n  local -i len_res_max_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local -i len_res_max_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local list=$1\n    local max_product=1\n    local product=1\n    local prev=0\n    local curr=0\n    for i in $list; do\n        if (( i > prev )); then\n            product=$(( product * i ))\n        else\n            if (( product > max_product )); then\n                max_product=$product\n            fi\n            product=1\n        fi\n        prev=$i\n    done\n    if (( product > max_product )); then\n        max_product=$product\n    fi\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n    local -a A=($1)\n    local -a B=($1)\n    local -a C=($1)\n    local -a D=($1)\n    local -a E=($1)\n    local -a F=($1)\n    local -a G=($1)\n    local -a H=($1)\n    local -a I=($1)\n    local -a J=($1)\n    local -a K=($1)\n    local -a L=($1)\n    local -a M=($1)\n    local -a N=($1)\n    local -a O=($1)\n    local -a P=($1)\n    local -a Q=($1)\n    local -a R=($1)\n    local -a S=($1)\n    local -a T=($1)\n    local -a U=($1)\n    local -a V=($1)\n    local -a W=($1)\n    local -a X=($1)\n    local -a Y=($1)\n   \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local max=0\n  local product=1\n  local i=0\n  local j=0\n  local k=0\n  local len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${arr[j]} -gt ${arr[i]} ]]; then\n        product=1\n        for ((k=i; k<=j; k++)); do\n          product=$((product * arr[k]))\n        done\n        if [[ $product -gt $max ]]; then\n          max=$product\n        fi\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=()\n  local -a max_product=()\n  local -a max_product_index=()\n  local -a max_product_index_prev=()\n  local -a max_product_index_prev_prev=()\n  local -a max_product_index_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=()\n  local -a max_product_index_prev_prev_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array\n    local -i i j k\n    local -i max_product=0\n    local -i product\n    local -i max_index=0\n    local -i max_value=0\n    array=($1)\n    for ((i=0; i<${#array[@]}; i++)); do\n        if ((array[i] > max_value)); then\n            max_value=array[i]\n            max_index=i\n        fi\n    done\n    for ((i=0; i<${#array[@]}; i++)); do\n        if ((i == max_index)); then\n            continue\n        fi\n        product=array[i]\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            if ((array[j] > array[i])); then\n                product=product*array[j]\n            fi\n        done\n        if ((product > max_product)); then\n            max_product=product\n        fi\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array\n    local -i i j k\n    local -i max_product=0\n    local -i product\n    local -i max_product_i=0\n    local -i max_product_j=0\n    local -i max_product_k=0\n    local -i max_product_l=0\n    local -i max_product_m=0\n    local -i max_product_n=0\n    local -i max_product_o=0\n    local -i max_product_p=0\n    local -i max_product_q=0\n    local -i max_product_r=0\n    local -i max_product_s=0\n    local -i max_product_t=0\n    local -i max_product_u=0\n    local -i max_product_v=0\n    local -i max_product_w=0\n    local -i max_product_x=0\n    local -i max_product_y=0\n    local -i max_product_z=0\n\n    array=($1)\n    for ((i=0; i<${#array[@]}; i++)); do\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            for ((k=j+1; k<${#array[@]}; k++)); do\n                product=$((array[i] * array[j] * array[k]))\n                if ((product > max_product)); then\n                    max_product=$product\n                    max_product_i=$i\n                    max_product_j=$j\n                    max_product_k=$k\n                fi\n            done\n        done\n    done\n    echo \"${array[max_product_i]} ${array[max_product_j]} ${array[max_product_k]}\"\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n    local -a A=($1)\n    local -a B=($1)\n    local -a C=($1)\n    local -a D=($1)\n    local -a E=($1)\n    local -a F=($1)\n    local -a G=($1)\n    local -a H=($1)\n    local -a I=($1)\n    local -a J=($1)\n    local -a K=($1)\n    local -a L=($1)\n    local -a M=($1)\n    local -a N=($1)\n    local -a O=($1)\n    local -a P=($1)\n    local -a Q=($1)\n    local -a R=($1)\n    local -a S=($1)\n    local -a T=($1)\n    local -a U=($1)\n    local -a V=($1)\n    local -a W=($1)\n    local -a X=($1)\n    local -a Y=($1)\n   \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local max=0\n  local prod=1\n  for ((i=0; i<${#a[@]}; i++)); do\n    prod=$((prod*a[i]))\n    if ((prod > max)); then\n      max=$prod\n    fi\n    if ((a[i] == 0)); then\n      prod=1\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a list=($1)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i max=0\n    local -i product=0\n    local -i len=${#list[@]}\n\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${list[j]} -gt ${list[i]} ]]; then\n                product=1\n                for ((k=i; k<=j; k++)); do\n                    product=$((product * list[k]))\n                done\n                if [[ $product -gt $max ]]; then\n                    max=$product\n                fi\n            fi\n        done\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product_arr\n    local -a max_product_arr_index\n    local -a max_product_arr_index_count\n    local -a max_product_arr_index_count_index\n    local -a max_product_arr_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_arr_index_count_index\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local -i i j k\n    local -i max_product=0\n    local -i product\n    local -i len=0\n    IFS=' ' read -r -a arr <<< \"$1\"\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[j] > arr[i])); then\n                product=1\n                for ((k=i; k<=j; k++)); do\n                    ((product *= arr[k]))\n                done\n                if ((product > max_product)); then\n                    max_product=$product\n                    len=$((j-i+1))\n                fi\n            fi\n        done\n    done\n    echo \"$max_product $len\"\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod=(${arr[0]})\n    local -a max_prod_idx=(0)\n    local -a max_prod_len=(1)\n    local -a max_prod_end=(0)\n    local -a max_prod_start=(0)\n    local -a max_prod_end_idx=(0)\n    local -a max_prod_start_idx=(0)\n    local -a max_prod_end_len=(1)\n    local -a max_prod_start_len=(1)\n    local -a max_prod_end_start=(0)\n    local -a max_prod_start_start=(0)\n    local -a max_prod_end_end=(0)\n    local -a max_prod_start_end=(0)\n    local -a max_prod_end_start_idx=(0)\n    local -a max_prod_start_start_idx=(0)\n    local -a max_prod_end_end_idx=(0)\n    local -a max_prod_start_end_idx=(0)\n    local -a max_prod_end_start_len=(1)\n    local -a max_prod_start_start_len=(1)\n    local -a max_prod_end_end_len=(1)\n    local -a max_prod_start_end_len=(1)\n    local -a max_prod_end_start_end=(0)\n    local -a max_prod_start_start_end=(0)\n    local -a max_prod_end_end_start=(0)\n    local -a max_prod_start_end_start=(0)\n    local -a max_prod_end_start_start=(0)\n    local -a max_prod_start_start_start=(0)\n    local -a max_prod_end_end_end=(0)\n    local -a max_prod_start_end_end=(0)\n    local -a max_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a min_prod\n    local -a min_prod_idx\n    local -a max_prod_idx_stack\n    local -a min_prod_idx_stack\n    local -i max_prod_idx_stack_top=0\n    local -i min_prod_idx_stack_top=0\n    local -i max_prod_idx_stack_bottom=0\n    local -i min_prod_idx_stack_bottom=0\n    local -i i\n    local -i j\n    local -i k\n    local -i max_prod_idx_stack_top_val\n    local -i min_prod_idx_stack_top_val\n    local -i max_prod_idx_stack_bottom_val\n    local -i min_prod_idx_stack_bottom_val\n    local -i max_prod_idx_stack_top_val_idx\n    local -i min_prod_idx_stack_top_val_idx\n    local -i max_prod_idx_stack_bottom_val_idx\n    local -i min_prod_idx_stack_bottom_val_idx\n    local -i max_prod_idx_stack_top_val_idx_prev\n    local -i min_prod_idx_stack_top_val_idx_prev\n    local -i max_prod_idx_stack_bottom_val_idx_prev\n    local -i min_prod_idx_stack_bottom_val_idx_prev\n    local -i max_prod_idx_stack_top_val_idx_prev_prev\n    local -i min_prod_idx_stack_top_val_idx_prev_prev\n    local -i max_prod_idx_stack_bottom_val_idx_prev_prev\n    local -i min_prod_idx_stack_bottom_val_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array=($1)\n    local -a products=($1)\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=1; i<${#array[@]}; i++)); do\n        for ((j=0; j<i; j++)); do\n            if (( array[j] < array[i] )); then\n                if (( products[i] < products[j] * array[i] )); then\n                    products[i]=${products[j]} * ${array[i]}\n                fi\n            fi\n        done\n    done\n\n    for ((i=0; i<${#products[@]}; i++)); do\n        if (( products[i] > max )); then\n            max=${products[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n/tmp/tmpjjqx6785.sh: line 16: `products[i]': not a valid identifier\\n/tmp/tmpjjqx6785.sh: line 16: 1: command not found\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a prod=(${arr[0]})\n  local max=${arr[0]}\n  local i=1\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n  local cccc=0\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array=($1)\n    local -a products\n    local -i i\n    local -i j\n    local -i max=0\n    local -i product\n\n    for ((i=0; i<${#array[@]}; i++)); do\n        products[i]=${array[i]}\n        for ((j=0; j<i; j++)); do\n            if ((array[j] < array[i])); then\n                product=${products[j]}*${array[i]}\n                if ((product > products[i])); then\n                    products[i]=$product\n                fi\n            fi\n        done\n        if ((products[i] > max)); then\n            max=${products[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a products\n  local -i i j k\n  local -i len=${#arr[@]}\n  local -i max=0\n  for ((i=0; i<len; i++)); do\n    products[i]=${arr[i]}\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j] > arr[i])); then\n        products[j]=$((products[i] * arr[j]))\n      fi\n    done\n    for ((k=i; k<len; k++)); do\n      if ((products[k] > max)); then\n        max=${products[k]}\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local max=0\n    local product=1\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        product=1\n        for ((j=i; j<len; j++)); do\n            product=$((product * arr[j]))\n            if [[ $product -gt $max ]]; then\n                max=$product\n            fi\n        done\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local -a max_prod_idx_len\n    local -a max_prod_idx_len_idx\n    local -a max_prod_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a\n  a=($1)\n  local -a b\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a aa\n  local -a ab\n  local -a ac\n  local -a ad\n  local -a ae\n  local -a af\n  local -a ag\n  local -a ah\n  local -a ai\n  local -a aj\n  local -a ak\n  local -a al\n  local -a am\n  local -a an\n  local -a ao\n  local -a ap\n  local -a aq\n  local -a ar\n  local -a as\n  local -a at\n  local -a au\n  local -a av\n  local -a aw\n  local -a ax\n  local -a ay\n  local -a az\n  local -a ba\n  local -a bb\n  local -a bc\n  local -a bd\n  local -a be\n  local -a bf\n  local -a bg\n  local -a bh\n  local -a bi\n  local -a bj\n  local -a bk\n  local -a bl\n  local -a bm\n  local -a bn\n  local -a bo\n  local -a bp\n  local -a bq\n  local -a br\n  local -a bs\n  local -a bt\n  local -a bu\n  local -a bv\n  local -a bw\n  local -a bx\n  local -a by\n  local -a bz\n  local -a ca\n  local -a cb\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array=($1)\n    local -i max_product=0\n    local -i product=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#array[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${array[j]} -gt ${array[i]} ]]; then\n                product=${array[i]}\n                for ((k=i+1; k<=j; k++)); do\n                    product=$((product * array[k]))\n                done\n                if [[ product -gt max_product ]]; then\n                    max_product=product\n                fi\n            fi\n        done\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local max_product=0\n  local current_product=1\n  local i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    current_product=$((current_product * arr[i]))\n    if [[ $current_product -gt $max_product ]]; then\n      max_product=$current_product\n    fi\n  done\n  echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpg2m2wujn.sh: line 11: 3 100 4 5 150 6: syntax error in expression (error token is \"100 4 5 150 6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -i max=0\n  local -i i=0\n  local -i j=0\n  local -i prod=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    prod=1\n    for ((j=i; j<${#arr[@]}; j++)); do\n      prod=$((prod * arr[j]))\n      if ((prod > max)); then\n        max=$prod\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -a max_prod_idx\n  local -a max_prod_len\n  local -a max_prod_idx_len\n  local -a max_prod_idx_len_idx\n  local -a max_prod_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_index\n    local -a max_prod_len\n    local -a max_prod_len_index\n    local -a max_prod_len_index_len\n    local -a max_prod_len_index_len_index\n    local -a max_prod_len_index_len_index_len\n    local -a max_prod_len_index_len_index_len_index\n    local -a max_prod_len_index_len_index_len_index_len\n    local -a max_prod_len_index_len_index_len_index_len_index\n    local -a max_prod_len_index_len_index_len_index_len_index_len\n    local -a max_prod_len_index_len_index_len_index_len_index_len_index\n    local -a max_prod_len_index_len_index_len_index_len_index_len_index_len\n    local -a max_prod_len_index_len_index_len_index_len_index_len_index_len_index\n    local -a max_prod_len_index_len_index_len_index_len_index_len_index_len_index_len\n    local -a max_prod_len_index_len_index_len_index_len_index_len_index_len_index_len_index\n    local -a max_prod_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len\n    local -a max_prod_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index\n    local -a max_prod_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len\n    local -a max_prod_len_index_len_index_len_index_len\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local max=1\n  local current_max=1\n  local current_min=1\n  for i in $@; do\n    if (( i > 0 )); then\n      current_max=$(( current_max * i ))\n      current_min=$(( current_min * i ))\n    else\n      local temp=$current_max\n      current_max=$(( current_min * i ))\n      current_min=$(( temp * i ))\n    fi\n    if (( current_max > max )); then\n      max=$current_max\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local -a max_product_arr\n  local -a max_product_arr_index\n  local -a max_product_arr_index_count\n  local -a max_product_arr_index_count_index\n  local -a max_product_arr_index_count_index_count\n  local -a max_product_arr_index_count_index_count_index\n  local -a max_product_arr_index_count_index_count_index_count\n  local -a max_product_arr_index_count_index_count_index_count_index\n  local -a max_product_arr_index_count_index_count_index_count_index_count\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index_count\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n  local -a max_product_arr_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n  local -a max_product_arr_index_count_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array=($1)\n    local -i max_product=0\n    local -i product=1\n    local -i i=0\n    local -i j=0\n\n    while [ $i -lt ${#array[@]} ]; do\n        while [ $j -lt ${#array[@]} ]; do\n            if [ ${array[$i]} -lt ${array[$j]} ]; then\n                product=$((product * array[j]))\n                j=$((j + 1))\n            else\n                if [ $product -gt $max_product ]; then\n                    max_product=$product\n                fi\n                product=1\n                i=$((i + 1))\n                j=$((i + 1))\n                break\n            fi\n        done\n    done\n\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190974,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=15>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=(\"$@\")\n    local max=0\n    local product=1\n    local i=0\n    local j=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        product=1\n        for ((j=i; j<${#arr[@]}; j++)); do\n            product=$((product*arr[j]))\n            if [[ $product -gt $max ]]; then\n                max=$product\n            fi\n        done\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2r2iyyqz.sh: line 15: 3 100 4 5 150 6: syntax error in expression (error token is \"100 4 5 150 6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -a prod\n  local -a max_prod_idx\n  local -a prod_idx\n  local -a max_prod_idx_len\n  local -a prod_idx_len\n  local -a max_prod_len\n  local -a prod_len\n  local -a max_prod_idx_len_idx\n  local -a prod_idx_len_idx\n  local -a max_prod_len_idx\n  local -a prod_len_idx\n  local -a max_prod_idx_len_idx_len\n  local -a prod_idx_len_idx_len\n  local -a max_prod_len_idx_len\n  local -a prod_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx\n  local -a prod_idx_len_idx_len_idx\n  local -a max_prod_len_idx_len_idx\n  local -a prod_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len\n  local -a prod_idx_len_idx_len_idx_len\n  local -a max_prod_len_idx_len_idx_len\n  local -a prod_len_idx_len_idx_len\n  local -a max_prod_idx_len_idx_len_idx_len_idx\n  local -a prod_idx_len_idx_len_idx_len_idx\n  local -a max_prod_len_idx_len_idx_len_idx\n  local -a prod_len_idx_len_idx_len_idx\n  local -a max_prod_idx_len_idx_len_idx_len_idx_len\n  local -a prod_idx_len_idx_len_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a products=(1)\n  local -a max_products=(1)\n  local max=1\n  local i=0\n  local j=0\n  local product=1\n  local max_product=1\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i])); then\n        product=$((products[j] * arr[i]))\n        if ((product > max_product)); then\n          max_product=$product\n        fi\n      fi\n    done\n    products[i]=$max_product\n    if ((max_product > max)); then\n      max=$max_product\n    fi\n    max_product=1\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local max=0\n  local i=0\n  local j=0\n  local prod=1\n  for ((i=0; i<${#arr[@]}; i++)); do\n    prod=1\n    for ((j=i; j<${#arr[@]}; j++)); do\n      prod=$((prod * arr[j]))\n      if [[ $prod -gt $max ]]; then\n        max=$prod\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpgh_r7xtn.sh: line 14: 3 100 4 5 150 6: syntax error in expression (error token is \"100 4 5 150 6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product_arr\n    local max_product=0\n    local i=0\n    local j=0\n    local k=0\n    local product=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((arr[j] > arr[i])); then\n                product=1\n                for ((k=i; k<=j; k++)); do\n                    product=$((product * arr[k]))\n                done\n                if ((product > max_product)); then\n                    max_product=$product\n                    max_product_arr=(\"${arr[@]:i:j-i+1}\")\n                fi\n            fi\n        done\n    done\n\n    echo \"${max_product_arr[@]}\"\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -a b=($1)\n    local -a c=($1)\n    local -a d=($1)\n    local -a e=($1)\n    local -a f=($1)\n    local -a g=($1)\n    local -a h=($1)\n    local -a i=($1)\n    local -a j=($1)\n    local -a k=($1)\n    local -a l=($1)\n    local -a m=($1)\n    local -a n=($1)\n    local -a o=($1)\n    local -a p=($1)\n    local -a q=($1)\n    local -a r=($1)\n    local -a s=($1)\n    local -a t=($1)\n    local -a u=($1)\n    local -a v=($1)\n    local -a w=($1)\n    local -a x=($1)\n    local -a y=($1)\n    local -a z=($1)\n    local -a A=($1)\n    local -a B=($1)\n    local -a C=($1)\n    local -a D=($1)\n    local -a E=($1)\n    local -a F=($1)\n    local -a G=($1)\n    local -a H=($1)\n    local -a I=($1)\n    local -a J=($1)\n    local -a K=($1)\n    local -a L=($1)\n    local -a M=($1)\n    local -a N=($1)\n    local -a O=($1)\n    local -a P=($1)\n    local -a Q=($1)\n    local -a R=($1)\n    local -a S=($1)\n    local -a T=($1)\n    local -a U=($1)\n    local -a V=($1)\n    local -a W=($1)\n    local -a X=($1)\n    local -a Y=($1)\n   \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a list=($1)\n    local -a product_list\n    local -i i=0\n    local -i j=0\n    local -i max_product=0\n    local -i product=0\n    local -i len=${#list[@]}\n\n    for (( i=0; i<len; i++ )); do\n        product_list[i]=1\n        for (( j=0; j<i; j++ )); do\n            if (( list[j] < list[i] )); then\n                product=${product_list[j]}*${list[i]}\n                if (( product > product_list[i] )); then\n                    product_list[i]=$product\n                fi\n            fi\n        done\n        if (( product_list[i] > max_product )); then\n            max_product=${product_list[i]}\n        fi\n    done\n    echo \"$max_product\"\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local i j\n    local max_product=1\n    local product=1\n    local max_index=0\n    local index=0\n    local max_len=0\n    local len=0\n    local max_start=0\n    local start=0\n    local max_end=0\n    local end=0\n    local max_value=0\n    local value=0\n    local max_value_index=0\n    local value_index=0\n    local max_value_len=0\n    local value_len=0\n    local max_value_start=0\n    local value_start=0\n    local max_value_end=0\n    local value_end=0\n    local max_value_product=0\n    local value_product=0\n    local max_value_index_product=0\n    local value_index_product=0\n    local max_value_len_product=0\n    local value_len_product=0\n    local max_value_start_product=0\n    local value_start_product=0\n    local max_value_end_product=0\n    local value_end_product=0\n    local max_value_index_len_product=0\n    local value_index_len_product=0\n    local max_value_index_start_product=0\n    local value_index_start_product=0\n    local max_value_index_end_product=0\n    local value_index_end_product=0\n    local max_value_len_start_product=0\n    local value_len_start_product=0\n    local max_value_len_end_product=0\n    local value_len_end_product=0\n    local max_value_start_end_product=0\n    local value_start_end_product=0\n    local max_value_index_len_start_product=0\n    local value_index_len_start_product=0\n    local max_value_index_len_end_product=0\n    local value_index_len_end_product=0\n    local max_value_index_start_end_product=0\n    local value_index_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a dp=(0)\n    local -a dp_min=(0)\n    local max=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((arr[i] > 0)); then\n            dp[i]=${dp[i-1]:-1}*arr[i]\n            dp_min[i]=${dp_min[i-1]:-1}*arr[i]\n        elif ((arr[i] < 0)); then\n            dp[i]=${dp_min[i-1]:-1}*arr[i]\n            dp_min[i]=${dp[i-1]:-1}*arr[i]\n        else\n            dp[i]=0\n            dp_min[i]=0\n        fi\n        if ((dp[i] > max)); then\n            max=${dp[i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -a max_prod_idx\n  local -a min_prod\n  local -a min_prod_idx\n  local -a max_prod_idx_tmp\n  local -a min_prod_idx_tmp\n  local -i i\n  local -i j\n  local -i max_prod_idx_len\n  local -i min_prod_idx_len\n  local -i max_prod_len\n  local -i min_prod_len\n  local -i max_prod_idx_tmp_len\n  local -i min_prod_idx_tmp_len\n  local -i max_prod_tmp\n  local -i min_prod_tmp\n  local -i max_prod_tmp_idx\n  local -i min_prod_tmp_idx\n  local -i max_prod_tmp_idx_len\n  local -i min_prod_tmp_idx_len\n  local -i max_prod_tmp_len\n  local -i min_prod_tmp_len\n  local -i max_prod_tmp_idx_len\n  local -i min_prod_tmp_idx_len\n  local -i max_prod_tmp_idx_len\n  local -i min_prod_tmp_idx_len\n  local -i max_prod_tmp_idx_len\n  local -i min_prod_tmp_idx_len\n  local -i max_prod_tmp_idx_len\n  local -i min_prod_tmp_idx_len\n  local -i max_prod_tmp_idx_len\n  local -i min_prod_tmp_idx_len\n  local -i max_prod_tmp_idx_len\n  local -i min_prod_tmp_idx_len\n  local -i max_prod_tmp_idx_len\n  local -i min_prod_tmp_idx_len\n  local -i max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=()\n    local -i i=0 j=0 k=0 max=0 product=0\n    arr=($1)\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            product=1\n            for ((k=i; k<=j; k++)); do\n                product=$((product*arr[k]))\n            done\n            if ((product>max)); then\n                max=$product\n            fi\n        done\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a prod\n  local -i i j k\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    prod[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        prod[i]=$(( prod[i] * arr[j] ))\n      fi\n    done\n  done\n\n  local max=${prod[0]}\n  for ((i=1; i<${#prod[@]}; i++)); do\n    if (( prod[i] > max )); then\n      max=${prod[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local -a max_prod_idx_len\n    local -a max_prod_idx_len_idx\n    local -a max_prod_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx_len_idx_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr\n  local i j\n  local max=0\n  local product=1\n  local -i len\n  local -i max_len=0\n  local -i max_index=0\n  local -i max_product=0\n\n  arr=($1)\n  len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if ((arr[j] > arr[j-1])); then\n        product=$((product * arr[j]))\n        max_len=$((max_len + 1))\n      else\n        break\n      fi\n    done\n    if ((max_len > max)); then\n      max=$max_len\n      max_index=$i\n      max_product=$product\n    fi\n    max_len=0\n    product=1\n  done\n\n  echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local i j k\n    local max_product=0\n    local product=0\n    local -i len=0\n    local -i max_len=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n\n    arr=($1)\n    len=${#arr[@]}\n\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            for ((k=j+1; k<len; k++)); do\n                product=${arr[i]}*${arr[j]}*${arr[k]}\n                if ((product > max_product)); then\n                    max_product=$product\n                    max_i=$i\n                    max_j=$j\n                    max_k=$k\n                    max_len=3\n                fi\n            done\n        done\n    done\n\n    echo \"Max product: $max_product\"\n    echo \"Max subsequence: ${arr[max_i]} ${arr[max_j]} ${arr[max_k]}\"\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=()\n  local -i i=0 max=0\n  for i in $1; do\n    arr+=($i)\n  done\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[j] > arr[i])); then\n        ((max < arr[j] * arr[i])) && max=${arr[j]}*${arr[i]}\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -a p=(${a[0]})\n    local -a n=(${a[0]})\n    local -i i=0\n    local -i j=0\n    local -i max=0\n\n    for ((i=1; i<${#a[@]}; i++)); do\n        if ((a[i] > 0)); then\n            p[i]=$((p[i-1] * a[i]))\n            n[i]=$((n[i-1] * a[i]))\n        else\n            p[i]=$((n[i-1] * a[i]))\n            n[i]=$((p[i-1] * a[i]))\n        fi\n        if ((p[i] > max)); then\n            max=${p[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a min_prod\n    local -a min_prod_idx\n    local -a max_prod_idx_stack\n    local -a min_prod_idx_stack\n    local -a max_prod_stack\n    local -a min_prod_stack\n    local -a max_prod_idx_stack_top\n    local -a min_prod_idx_stack_top\n    local -a max_prod_stack_top\n    local -a min_prod_stack_top\n    local -a max_prod_idx_stack_top_prev\n    local -a min_prod_idx_stack_top_prev\n    local -a max_prod_stack_top_prev\n    local -a min_prod_stack_top_prev\n    local -a max_prod_idx_stack_top_prev_prev\n    local -a min_prod_idx_stack_top_prev_prev\n    local -a max_prod_stack_top_prev_prev\n    local -a min_prod_stack_top_prev_prev\n    local -a max_prod_idx_stack_top_prev_prev_prev\n    local -a min_prod_idx_stack_top_prev_prev_prev\n    local -a max_prod_stack_top_prev_prev_prev\n    local -a min_prod_stack_top_prev_prev_prev\n    local -a max_prod_idx_stack_top_prev_prev_prev_prev\n    local -a min_prod_idx_stack_top_prev_prev_prev_prev\n    local -a max_prod_stack_top_prev_prev_prev_prev\n    local -a min_prod_stack_top_prev_prev_prev_prev\n    local -a max_prod_idx_stack_top_prev_prev_prev_prev_prev\n    local -a min_prod_idx_stack\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local max=0\n  local product=1\n  local i=0\n  local j=0\n  local k=0\n  local len=${#arr[@]}\n  for ((i=0; i<len; i++)); do\n    product=1\n    for ((j=i; j<len; j++)); do\n      product=$((product*arr[j]))\n      if [[ $product -gt $max ]]; then\n        max=$product\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a inc=(${arr[0]})\n    local -a dec=(${arr[0]})\n    local max=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if (( ${arr[i]} > ${inc[-1]} )); then\n            inc+=(\"${arr[i]}\")\n        else\n            inc[-1]=${arr[i]}\n        fi\n\n        if (( ${arr[i]} < ${dec[-1]} )); then\n            dec+=(\"${arr[i]}\")\n        else\n            dec[-1]=${arr[i]}\n        fi\n\n        if (( ${inc[-1]} > max )); then\n            max=${inc[-1]}\n        fi\n\n        if (( ${dec[-1]} > max )); then\n            max=${dec[-1]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr\n  local max_prod=1\n  local prod=1\n  local i\n  local j\n  local k\n  local n\n\n  arr=($1)\n  n=${#arr[@]}\n\n  for ((i=0; i<n; i++)); do\n    for ((j=i+1; j<n; j++)); do\n      prod=1\n      for ((k=i; k<=j; k++)); do\n        prod=$((prod * arr[k]))\n      done\n      if [[ $prod -gt $max_prod ]]; then\n        max_prod=$prod\n      fi\n    done\n  done\n\n  echo $max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod\n  local -a max_prod_idx\n  local -a min_prod\n  local -a min_prod_idx\n  local -a max_prod_prev\n  local -a min_prod_prev\n  local -a max_prod_prev_idx\n  local -a min_prod_prev_idx\n  local -a max_prod_prev_prev\n  local -a min_prod_prev_prev\n  local -a max_prod_prev_prev_idx\n  local -a min_prod_prev_prev_idx\n  local -a max_prod_prev_prev_prev\n  local -a min_prod_prev_prev_prev\n  local -a max_prod_prev_prev_prev_idx\n  local -a min_prod_prev_prev_prev_idx\n  local -a max_prod_prev_prev_prev_prev\n  local -a min_prod_prev_prev_prev_prev\n  local -a max_prod_prev_prev_prev_prev_idx\n  local -a min_prod_prev_prev_prev_prev_idx\n  local -a max_prod_prev_prev_prev_prev_prev\n  local -a min_prod_prev_prev_prev_prev_prev\n  local -a max_prod_prev_prev_prev_prev_prev_idx\n  local -a min_prod_prev_prev_prev_prev_prev_idx\n  local -a max_prod_prev_prev_prev_prev_prev_prev\n  local -a min_prod_prev_prev_prev_prev_prev_prev\n  local -a max_prod_prev_prev_prev_prev_prev_prev_idx\n  local -a min_prod_prev_prev_prev_prev_prev_prev_idx\n  local -a max_prod_prev_prev_prev_prev_prev_prev_prev\n  local -a min_prod_prev_prev_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local arr=($1)\n  local len=${#arr[@]}\n  local max=0\n  local product=1\n  for ((i=0; i<len; i++)); do\n    for ((j=i; j<len; j++)); do\n      product=$((product * arr[j]))\n      if [[ $product -gt $max ]]; then\n        max=$product\n      fi\n    done\n    product=1\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product\n    local -a max_product_index\n    local -a max_product_count\n    local -a max_product_index_count\n    local -a max_product_index_count_index\n    local -a max_product_index_count_index_count\n    local -a max_product_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n    local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=( $1 )\n    local -a p=( ${a[0]} )\n    local -a n=( ${a[0]} )\n    local max=${a[0]}\n\n    for (( i=1; i<${#a[@]}; i++ )); do\n        if (( a[i] > 0 )); then\n            p[i]=$(( p[i-1] * a[i] ))\n            n[i]=$(( n[i-1] * a[i] ))\n        else\n            p[i]=$(( n[i-1] * a[i] ))\n            n[i]=$(( p[i-1] * a[i] ))\n        fi\n        if (( p[i] > max )); then\n            max=${p[i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod=(0)\n    local max=0\n    local i=0\n    local j=0\n    local k=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[i] > arr[j])); then\n                if ((prod[j] * arr[i] > prod[i])); then\n                    prod[i]=${prod[j]}*${arr[i]}\n                fi\n            fi\n        done\n        if ((prod[i] == 0)); then\n            prod[i]=${arr[i]}\n        fi\n        if ((prod[i] > max)); then\n            max=${prod[i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a prod\n  local -i i j k\n  local -i max=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    prod[i]=${arr[i]}\n    for ((j=0; j<i; j++)); do\n      if (( arr[j] < arr[i] )); then\n        prod[i]=$(( prod[i] * arr[j] ))\n      fi\n    done\n    if (( prod[i] > max )); then\n      max=${prod[i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=()\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i prod=0\n    local -i len=0\n\n    arr=($1)\n    len=${#arr[@]}\n\n    for ((i=0; i<len; i++)); do\n        prod=1\n        for ((j=i; j<len; j++)); do\n            prod=$((prod * arr[j]))\n            if [[ $prod -gt $max ]]; then\n                max=$prod\n            fi\n        done\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr\n  local i j k\n  local max\n  local product\n  IFS=' ' read -r -a arr <<< \"$1\"\n  max=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      product=1\n      for ((k=i; k<=j; k++)); do\n        (( product *= arr[k] ))\n      done\n      (( max < product )) && max=$product\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a dp=(0)\n    local -a dp_min=(0)\n    local max=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -gt 0 ]]; then\n            dp[i]=$((dp[i-1]*arr[i]))\n            dp_min[i]=$((dp_min[i-1]*arr[i]))\n        elif [[ ${arr[i]} -lt 0 ]]; then\n            dp[i]=$((dp_min[i-1]*arr[i]))\n            dp_min[i]=$((dp[i-1]*arr[i]))\n        else\n            dp[i]=0\n            dp_min[i]=0\n        fi\n        if [[ ${dp[i]} -gt $max ]]; then\n            max=${dp[i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local max=0\n    local product=1\n    local i\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n            product=$(( product * max ))\n        fi\n    done\n    echo $product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=()\n  local -i i=0\n  local -i max=0\n  local -i product=0\n  local -i len=0\n  local -i j=0\n  local -i k=0\n\n  arr=($1)\n  len=${#arr[@]}\n\n  for ((i=0; i<len; i++)); do\n    product=1\n    for ((j=i; j<len; j++)); do\n      product=$((product * arr[j]))\n      if ((product > max)); then\n        max=$product\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=()\n  local -i i=0\n  local -i j=0\n  local -i max=0\n  local -i product=0\n\n  for i in $1; do\n    arr+=($i)\n  done\n\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      product=$((arr[i] * arr[j]))\n      if ((product > max)); then\n        max=$product\n      fi\n    done\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local -i i j k\n    local -i max_product=0\n    local -i product=1\n    local -i max_product_len=0\n    local -i product_len=0\n    local -i max_product_start=0\n    local -i product_start=0\n    local -i max_product_end=0\n    local -i product_end=0\n    local -i max_product_start_index=0\n    local -i product_start_index=0\n    local -i max_product_end_index=0\n    local -i product_end_index=0\n    local -i max_product_len_index=0\n    local -i product_len_index=0\n    local -i max_product_start_index_len=0\n    local -i product_start_index_len=0\n    local -i max_product_end_index_len=0\n    local -i product_end_index_len=0\n    local -i max_product_len_index_len=0\n    local -i product_len_index_len=0\n    local -i max_product_start_index_len_len=0\n    local -i product_start_index_len_len=0\n    local -i max_product_end_index_len_len=0\n    local -i product_end_index_len_len=0\n    local -i max_product_len_index_len_len=0\n    local -i product_len_index_len_len=0\n    local -i max_product_start_index_len_len_len=0\n    local -i product_start_index_len_len_len=0\n    local -i max_product_end_index_len_len_len=0\n    local -i product_end_index_len_len_len=0\n    local -i max_product_len_index_len_len_len=0\n    local -i product_len_index_len_len_len=0\n    local -i max_product_start_index_len_len_len_len=0\n    local -i product_start\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local -i i j k\n    local -i max_product=0\n    local -i product\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_len=0\n    local -i len=0\n    local -i max_len_i=0\n    local -i max_len_j=0\n    local -i max_len_k=0\n    local -i max_len_product=0\n    local -i max_len_len=0\n\n    IFS=' ' read -r -a arr <<< \"$1\"\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            for ((k=j+1; k<${#arr[@]}; k++)); do\n                product=$((arr[i] * arr[j] * arr[k]))\n                if ((product > max_product)); then\n                    max_product=$product\n                    max_i=$i\n                    max_j=$j\n                    max_k=$k\n                fi\n            done\n        done\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            for ((k=j+1; k<${#arr[@]}; k++)); do\n                if ((arr[i] < arr[j] && arr[j] < arr[k])); then\n                    len=$((k - i + 1))\n                    product=$((arr[i] * arr[j] * arr[k]))\n                    if ((len > max_len || (len == max_len && product > max_len_product))); then\n                        max_len=$len\n                        max_len_i=$i\n                        max_len_j=$j\n                        max_len_k=$k\n                        max_len_product=$product\n                    fi\n                fi\n            done\n        done\n    done\n\n    echo \"Max product: $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp6z70kpbi.sh: line 65: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmp6z70kpbi.sh: line 69: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -i max=${a[0]}\n  local -i product=1\n  for ((i=0; i<${#a[@]}; i++)); do\n    product=${a[i]}\n    for ((j=i+1; j<${#a[@]}; j++)); do\n      ((product *= a[j]))\n      ((product > max)) && max=$product\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod=()\n    local -a max_prod_idx=()\n    local -a max_prod_idx_len=()\n    local -a max_prod_idx_len_idx=()\n    local -a max_prod_idx_len_idx_prod=()\n    local -a max_prod_idx_len_idx_prod_idx=()\n    local -a max_prod_idx_len_idx_prod_idx_len=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx_prod=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx_prod_idx=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx_prod_idx_len=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx_prod_idx_len_idx=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx_prod_idx_len_idx_prod=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx_prod_idx_len_idx_prod_idx=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx_prod_idx_len_idx_prod_idx_len=()\n    local -a max_prod_idx_len_idx_prod_idx_len_idx_prod_idx_len_idx_prod_idx_len_idx\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local max=1\n    local product=1\n    local num\n    for num in $1; do\n        if (( num > 0 )); then\n            product=$(( product * num ))\n        else\n            max=$(( max > product ? max : product ))\n            product=1\n        fi\n    done\n    max=$(( max > product ? max : product ))\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -a p=(${a[0]})\n  local -a n=(${a[0]})\n  local max=${a[0]}\n  for ((i=1; i<${#a[@]}; i++)); do\n    if [[ ${a[$i]} -gt 0 ]]; then\n      p[$i]=$((${p[$((i-1))]} * ${a[$i]}))\n      n[$i]=$((${n[$((i-1))]} * ${a[$i]}))\n    else\n      p[$i]=$((${n[$((i-1))]} * ${a[$i]}))\n      n[$i]=$((${p[$((i-1))]} * ${a[$i]}))\n    fi\n    if [[ ${p[$i]} -gt $max ]]; then\n      max=${p[$i]}\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=()\n    local -i i=0 j=0 max_product=0\n    local -i arr_len=0\n    local -i max_product_len=0\n    local -i max_product_start=0\n    local -i max_product_end=0\n    local -i cur_product_len=0\n    local -i cur_product_start=0\n    local -i cur_product_end=0\n    local -i cur_product=1\n    local -i cur_product_max=0\n    local -i cur_product_min=0\n\n    # Convert space-separated list to array\n    arr=($1)\n\n    # Get length of array\n    arr_len=${#arr[@]}\n\n    # Iterate over array\n    for ((i=0; i<arr_len; i++)); do\n        # Get current product\n        cur_product=${arr[i]}\n\n        # Get current product max and min\n        cur_product_max=${arr[i]}\n        cur_product_min=${arr[i]}\n\n        # Iterate over array starting from next element\n        for ((j=i+1; j<arr_len; j++)); do\n            # Get current product\n            cur_product=$((cur_product * arr[j]))\n\n            # Get current product max and min\n            if ((cur_product > cur_product_max)); then\n                cur_product_max=${arr[j]}\n            fi\n            if ((cur_product < cur_product_min)); then\n                cur_product_min=${arr[j]}\n            fi\n\n            # If current product is greater than max product\n            if ((cur_product > max_product)); then\n                # Set max product\n                max_product=${cur_product}\n\n                # Set max product length\n                max_product_len=$((j - i + 1))\n\n                # Set max product start and end\n                max_product_start=${i}\n                max_product_end=${j}\n            fi\n        done\n    done\n\n    # Print max product\n    echo \"${max_product}\"\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod=()\n    local max_prod_val=0\n    local max_prod_idx=0\n    local max_prod_len=0\n    local max_prod_len_idx=0\n    local max_prod_len_val=0\n    local max_prod_len_val_idx=0\n    local max_prod_len_val_len=0\n    local max_prod_len_val_len_idx=0\n    local max_prod_len_val_len_val=0\n    local max_prod_len_val_len_val_idx=0\n    local max_prod_len_val_len_val_len=0\n    local max_prod_len_val_len_val_len_idx=0\n    local max_prod_len_val_len_val_len_val=0\n    local max_prod_len_val_len_val_len_val_idx=0\n    local max_prod_len_val_len_val_len_val_len=0\n    local max_prod_len_val_len_val_len_val_len_idx=0\n    local max_prod_len_val_len_val_len_val_len_val=0\n    local max_prod_len_val_len_val_len_val_len_val_idx=0\n    local max_prod_len_val_len_val_len_val_len_val_len=0\n    local max_prod_len_val_len_val_len_val_len_val_len_idx=0\n    local max_prod_len_val_len_val_len_val_len_val_len_val=0\n    local max_prod_len_val_len_val_len_val_len_val_len_val_idx=0\n    local max_prod_len_val_len_val_len_val_len_val_len_val_len=0\n    local max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr\n  arr=($1)\n  local -i i j max_prod\n  max_prod=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      if ((arr[j] > arr[i])); then\n        ((max_prod < arr[j] * arr[i])) && max_prod=arr[j] * arr[i]\n      fi\n    done\n  done\n  echo $max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n/tmp/tmpb6wshsax.sh: line 13: 1: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product=(${arr[0]})\n    local -a max_product_index=(0)\n    local -a max_product_length=(1)\n    local -a max_product_end=(0)\n    local -a max_product_start=(0)\n    local -a max_product_sum=(${arr[0]})\n    local -a max_product_sum_index=(0)\n    local -a max_product_sum_length=(1)\n    local -a max_product_sum_end=(0)\n    local -a max_product_sum_start=(0)\n    local -a max_product_sum_product=(${arr[0]})\n    local -a max_product_sum_product_index=(0)\n    local -a max_product_sum_product_length=(1)\n    local -a max_product_sum_product_end=(0)\n    local -a max_product_sum_product_start=(0)\n    local -a max_product_sum_product_sum=(${arr[0]})\n    local -a max_product_sum_product_sum_index=(0)\n    local -a max_product_sum_product_sum_length=(1)\n    local -a max_product_sum_product_sum_end=(0)\n    local -a max_product_sum_product_sum_start=(0)\n    local -a max_product_sum_product_sum_product=(${arr[0]})\n    local -a max_product_sum_product_sum_product_index=(0)\n    local -a max_product_sum_product_sum_product_length=(1)\n    local -a max_product_sum_product_sum_product_end=(0)\n    local -a max_product_sum_product_sum_product_start=(0)\n    local -a max_product_sum_product_sum_product_sum=(${arr[0]})\n    local -a max_product_sum_product_sum_product_sum_index=(0)\n    local -a max_product_sum_product_sum_product_sum_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array=($1)\n    local -a products\n    local -i i\n    local -i j\n    local -i max=0\n    local -i product\n    local -i len=${#array[@]}\n    for ((i=0; i<len; i++)); do\n        products[$i]=${array[$i]}\n        for ((j=0; j<i; j++)); do\n            if ((array[j] < array[i])); then\n                product=${products[$j]}*${array[$i]}\n                if ((product > products[$i])); then\n                    products[$i]=$product\n                fi\n            fi\n        done\n        if ((products[$i] > max)); then\n            max=${products[$i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=($1)\n  local -a b=($1)\n  local -a c=($1)\n  local -a d=($1)\n  local -a e=($1)\n  local -a f=($1)\n  local -a g=($1)\n  local -a h=($1)\n  local -a i=($1)\n  local -a j=($1)\n  local -a k=($1)\n  local -a l=($1)\n  local -a m=($1)\n  local -a n=($1)\n  local -a o=($1)\n  local -a p=($1)\n  local -a q=($1)\n  local -a r=($1)\n  local -a s=($1)\n  local -a t=($1)\n  local -a u=($1)\n  local -a v=($1)\n  local -a w=($1)\n  local -a x=($1)\n  local -a y=($1)\n  local -a z=($1)\n  local -a A=($1)\n  local -a B=($1)\n  local -a C=($1)\n  local -a D=($1)\n  local -a E=($1)\n  local -a F=($1)\n  local -a G=($1)\n  local -a H=($1)\n  local -a I=($1)\n  local -a J=($1)\n  local -a K=($1)\n  local -a L=($1)\n  local -a M=($1)\n  local -a N=($1)\n  local -a O=($1)\n  local -a P=($1)\n  local -a Q=($1)\n  local -a R=($1)\n  local -a S=($1)\n  local -a T=($1)\n  local -a U=($1)\n  local -a V=($1)\n  local -a W=($1)\n  local -a X=($1)\n  local -a Y=($1)\n \n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod=(${arr[0]})\n    local -a max_prod_index=(0)\n    local -a max_prod_len=(1)\n    local -a max_prod_end=(0)\n    local -a max_prod_start=(0)\n    local -a max_prod_arr=()\n    local -a max_prod_arr_index=()\n    local -a max_prod_arr_len=()\n    local -a max_prod_arr_end=()\n    local -a max_prod_arr_start=()\n    local -a max_prod_arr_arr=()\n    local -a max_prod_arr_arr_index=()\n    local -a max_prod_arr_arr_len=()\n    local -a max_prod_arr_arr_end=()\n    local -a max_prod_arr_arr_start=()\n    local -a max_prod_arr_arr_arr=()\n    local -a max_prod_arr_arr_arr_index=()\n    local -a max_prod_arr_arr_arr_len=()\n    local -a max_prod_arr_arr_arr_end=()\n    local -a max_prod_arr_arr_arr_start=()\n    local -a max_prod_arr_arr_arr_arr=()\n    local -a max_prod_arr_arr_arr_arr_index=()\n    local -a max_prod_arr_arr_arr_arr_len=()\n    local -a max_prod_arr_arr_arr_arr_end=()\n    local -a max_prod_arr_arr_arr_arr_start=()\n    local -a max_prod_arr_arr_arr_arr_arr=()\n    local -a max_prod_arr_arr_arr_arr_arr_index=()\n    local -a max_prod_arr_arr_arr_arr_arr_len=()\n    local -a max_prod_arr\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -i max_product=0\n  local -i product=1\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -a arr\n  local -i arr_len=0\n  local -i arr_max=0\n  local -i arr_min=0\n  local -i arr_max_idx=0\n  local -i arr_min_idx=0\n  local -i arr_max_idx_prev=0\n  local -i arr_min_idx_prev=0\n  local -i arr_max_idx_prev_prev=0\n  local -i arr_min_idx_prev_prev=0\n  local -i arr_max_idx_prev_prev_prev=0\n  local -i arr_min_idx_prev_prev_prev=0\n  local -i arr_max_idx_prev_prev_prev_prev=0\n  local -i arr_min_idx_prev_prev_prev_prev=0\n  local -i arr_max_idx_prev_prev_prev_prev_prev=0\n  local -i arr_min_idx_prev_prev_prev_prev_prev=0\n  local -i arr_max_idx_prev_prev_prev_prev_prev_prev=0\n  local -i arr_min_idx_prev_prev_prev_prev_prev_prev=0\n  local -i arr_max_idx_prev_prev_prev_prev_prev_prev_prev=0\n  local -i arr_min_idx_prev_prev_prev_prev_prev_prev_prev=0\n  local -i arr_max_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i arr_min_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i arr_max_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i arr_min_idx_prev_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a dp=(1)\n    local -i i=0 j=0\n    local -i max=0\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] < arr[i])); then\n                dp[i]=$((dp[j] * arr[i]))\n            fi\n        done\n        if ((dp[i] > max)); then\n            max=${dp[i]}\n        fi\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a dp=(1)\n  local max=1\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n\n  for ((i=1; i<len; i++)); do\n    dp[i]=1\n    for ((j=0; j<i; j++)); do\n      if ((arr[j] < arr[i] && dp[j]*arr[i] > dp[i])); then\n        dp[i]=dp[j]*arr[i]\n      fi\n    done\n    if ((dp[i] > max)); then\n      max=${dp[i]}\n    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp30i6x5xt.sh: line 20: j: expression recursion level exceeded (error token is \"j\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a prod\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local i\n    local j\n    local k\n    local len\n    local max_len\n    local max_prod_val\n    local prod_val\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n        prod[i]=${arr[i]}\n        max_prod[i]=${arr[i]}\n        max_prod_idx[i]=$i\n        max_prod_len[i]=1\n    done\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[i] > arr[j])); then\n                if ((max_prod_len[j] + 1 > max_prod_len[i])); then\n                    max_prod_len[i]=$((max_prod_len[j] + 1))\n                    max_prod_idx[i]=$j\n                    max_prod[i]=$((max_prod[j] * arr[i]))\n                elif ((max_prod_len[j] + 1 == max_prod_len[i])); then\n                    prod_val=$((max_prod[j] * arr[i]))\n                    if ((prod_val > max_prod[i])); then\n                        max_prod[i]=$prod_val\n                        max_prod_idx[i]=$j\n                    fi\n                fi\n            fi\n        done\n    done\n\n    max_len=0\n    max_prod_val=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((max_prod_len[i] > max_len)); then\n            max_len=${max_prod_len[i]}\n            max_prod_val=${max_prod[i]}\n        elif ((max_prod_len\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpfcrw199g.sh: line 50: unexpected EOF while looking for matching `)'\\n/tmp/tmpfcrw199g.sh: line 65: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local max=0\n  local product=1\n  local i=0\n  local j=0\n  local len=${#arr[@]}\n  while [ $i -lt $len ]; do\n    j=$i\n    product=1\n    while [ $j -lt $len ]; do\n      product=$(( product * arr[j] ))\n      if [ $product -gt $max ]; then\n        max=$product\n      fi\n      j=$(( j + 1 ))\n    done\n    i=$(( i + 1 ))\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_products\n  local -a max_products_indexes\n  local -a max_products_indexes_indexes\n  local -a max_products_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes\n  local -a max_products_indexes_indexes\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_product=(${arr[0]})\n  local -a max_product_index=(0)\n  local -a max_product_count=(1)\n  local -a max_product_index_count=(1)\n  local -a max_product_index_count_index=(0)\n  local -a max_product_index_count_index_count=(1)\n  local -a max_product_index_count_index_count_index=(0)\n  local -a max_product_index_count_index_count_index_count=(1)\n  local -a max_product_index_count_index_count_index_count_index=(0)\n  local -a max_product_index_count_index_count_index_count_index_count=(1)\n  local -a max_product_index_count_index_count_index_count_index_count_index=(0)\n  local -a max_product_index_count_index_count_index_count_index_count_index_count=(1)\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index=(0)\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count=(1)\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index=(0)\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count=(1)\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=(0)\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=(1)\n  local -a max_product_index_count_index_count_index_count_index_count_index\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local -i i=0 j=0 k=0 max=0\n  local -i len=${#arr[@]}\n  local -i prod=1\n  for ((i=0; i<len; i++)); do\n    prod=1\n    for ((j=i; j<len; j++)); do\n      prod=$((prod * arr[j]))\n      if ((prod > max)); then\n        max=$prod\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmhwa5qq8.sh: line 13: 3 100 4 5 150 6: syntax error in expression (error token is \"100 4 5 150 6\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_product\n    local -a max_product_index\n    local -a max_product_index_stack\n    local -a max_product_stack\n    local -a max_product_stack_index\n    local -a max_product_stack_index_stack\n    local -a max_product_stack_stack\n    local -a max_product_stack_stack_index\n    local -a max_product_stack_stack_index_stack\n    local -a max_product_stack_stack_stack\n    local -a max_product_stack_stack_stack_index\n    local -a max_product_stack_stack_stack_index_stack\n    local -a max_product_stack_stack_stack_stack\n    local -a max_product_stack_stack_stack_stack_index\n    local -a max_product_stack_stack_stack_stack_index_stack\n    local -a max_product_stack_stack_stack_stack_stack\n    local -a max_product_stack_stack_stack_stack_stack_index\n    local -a max_product_stack_stack_stack_stack_stack_index_stack\n    local -a max_product_stack_stack_stack_stack_stack_stack\n    local -a max_product_stack_stack_stack_stack_stack_stack_index\n    local -a max_product_stack_stack_stack_stack_stack_stack_index_stack\n    local -a max_product_stack_stack_stack_stack_stack_stack_stack\n    local -a max_product_stack_stack_stack_stack_stack_stack_stack_index\n    local -a max_product_stack_stack_stack_stack_stack_stack_stack_index_stack\n    local -a max_product_stack_stack_stack_stack_stack_stack_stack_stack\n    local -a max_product_stack_stack_stack_stack_stack_stack_stack_stack_index\n    local -a max_product_stack_stack_stack_stack_stack_stack_stack_stack_index_stack\n    local -a max_product_stack_stack_stack_stack\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a min_prod\n    local -a min_prod_idx\n    local -a max_prod_idx_prev\n    local -a min_prod_idx_prev\n    local -a max_prod_idx_prev_prev\n    local -a min_prod_idx_prev_prev\n    local -a max_prod_idx_prev_prev_prev\n    local -a min_prod_idx_prev_prev_prev\n    local -a max_prod_idx_prev_prev_prev_prev\n    local -a min_prod_idx_prev_prev_prev_prev\n    local -a max_prod_idx_prev_prev_prev_prev_prev\n    local -a min_prod_idx_prev_prev_prev_prev_prev\n    local -a max_prod_idx_prev_prev_prev_prev_prev_prev\n    local -a min_prod_idx_prev_prev_prev_prev_prev_prev\n    local -a max_prod_idx_prev_prev_prev_prev_prev_prev_prev\n    local -a min_prod_idx_prev_prev_prev_prev_prev_prev_prev\n    local -a max_prod_idx_prev_prev_prev_prev_prev_prev_prev_prev\n    local -a min_prod_idx_prev_prev_prev_prev_prev_prev_prev_prev\n    local -a max_prod_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -a min_prod_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -a max_prod_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local -a min_prod_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=($1)\n  local -a max_prod=()\n  local -a max_prod_idx=()\n  local -a max_prod_idx_idx=()\n  local -a max_prod_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=()\n  local -a max_prod_idx_idx_idx_idx_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local i j k\n    local max_product=0\n    local product=0\n    local -i n=0\n\n    arr=( $1 )\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        for (( j=i+1; j<${#arr[@]}; j++ )); do\n            if (( arr[j] > arr[i] )); then\n                product=1\n                for (( k=i; k<=j; k++ )); do\n                    (( product *= arr[k] ))\n                done\n                if (( product > max_product )); then\n                    max_product=$product\n                fi\n            fi\n        done\n    done\n    echo $max_product\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a a=()\n  local i j k\n  for i in $1; do\n    a[${#a[@]}]=$i\n  done\n  for ((i=0; i<${#a[@]}; i++)); do\n    for ((j=i+1; j<${#a[@]}; j++)); do\n      if ((a[i] > a[j])); then\n        k=${a[i]}\n        a[i]=${a[j]}\n        a[j]=$k\n      fi\n    done\n  done\n  local max=1\n  for ((i=0; i<${#a[@]}-1; i++)); do\n    if ((a[i] < a[i+1])); then\n      max=$((max * a[i+1]))\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local max=0\n    local product=1\n    local i=0\n    local j=0\n    local k=0\n    local n=0\n    local len=0\n    local -a temp\n    arr=($1)\n    len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -gt ${arr[i]} ]]; then\n                temp[k]=${arr[j]}\n                k=$((k+1))\n            fi\n        done\n        for ((n=0; n<k; n++)); do\n            product=$((product*temp[n]))\n        done\n        if [[ $product -gt $max ]]; then\n            max=$product\n        fi\n        product=1\n        k=0\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_rev\n    local -a max_prod_rev_rev\n    local -a max_prod_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\n    local -a max_prod_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local max=0\n  local product=1\n  local i=0\n  local j=0\n  local n=0\n  local a=()\n  local b=()\n  local c=()\n  local d=()\n  local e=()\n  local f=()\n  local g=()\n  local h=()\n  local i=()\n  local j=()\n  local k=()\n  local l=()\n  local m=()\n  local n=()\n  local o=()\n  local p=()\n  local q=()\n  local r=()\n  local s=()\n  local t=()\n  local u=()\n  local v=()\n  local w=()\n  local x=()\n  local y=()\n  local z=()\n  local A=()\n  local B=()\n  local C=()\n  local D=()\n  local E=()\n  local F=()\n  local G=()\n  local H=()\n  local I=()\n  local J=()\n  local K=()\n  local L=()\n  local M=()\n  local N=()\n  local O=()\n  local P=()\n  local Q=()\n  local R=()\n  local S=()\n  local T=()\n  local U=()\n  local V=()\n  local W=()\n  local X=()\n  local Y=()\n  local Z=()\n  local aa=()\n  local ab=()\n  local ac=()\n  local ad=()\n  local ae=()\n  local af=()\n  local ag=()\n  local ah=()\n  local ai=()\n  local aj=()\n  local ak=()\n  local al=()\n  local am=()\n  local an=()\n  local ao=()\n  local ap=()\n  local aq=()\n  local ar=()\n  local as=()\n  local at=()\n  local au=()\n  local av=()\n  local aw=()\n  local ax=()\n  local ay=()\n  local az=()\n  local aA=()\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n\n    max_prod[0]=${arr[0]}\n    max_prod_idx[0]=0\n    max_prod_len[0]=1\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        max_prod[i]=${arr[i]}\n        max_prod_idx[i]=i\n        max_prod_len[i]=1\n\n        for ((j=0; j<i; j++)); do\n            if ((arr[i] > arr[j])) && ((max_prod[i] < max_prod[j] * arr[i])); then\n                max_prod[i]=${max_prod[j]} * ${arr[i]}\n                max_prod_idx[i]=${max_prod_idx[j]}\n                max_prod_len[i]=${max_prod_len[j]} + 1\n            fi\n        done\n    done\n\n    local max_prod_idx_max=0\n    local max_prod_len_max=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((max_prod_len[i] > max_prod_len_max)); then\n            max_prod_idx_max=${max_prod_idx[i]}\n            max_prod_len_max=${max_prod_len[i]}\n        fi\n    done\n\n    echo ${max_prod[@]}\n    echo ${max_prod_idx[@]}\n    echo ${max_prod_len[@]}\n    echo ${max_prod_idx_max}\n    echo ${max_prod_len_max}\n    echo ${arr[@]:${max_prod_idx_max}:${max_prod_len_max}}\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 22: 1: command not found\\n/tmp/tmpb4m4pj8q.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 24: +: command not found\\n/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 22: 1: command not found\\n/tmp/tmpb4m4pj8q.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 24: +: command not found\\n/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 22: 1: command not found\\n/tmp/tmpb4m4pj8q.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 24: +: command not found\\n/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 22: 1: command not found\\n/tmp/tmpb4m4pj8q.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 24: +: command not found\\n/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 22: 1: command not found\\n/tmp/tmpb4m4pj8q.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 24: +: command not found\\n/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 22: 1: command not found\\n/tmp/tmpb4m4pj8q.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 24: +: command not found\\n/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 22: 1: command not found\\n/tmp/tmpb4m4pj8q.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 24: +: command not found\\n/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 22: 1: command not found\\n/tmp/tmpb4m4pj8q.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpb4m4pj8q.sh: line 24: +: command not found\\n/tmp/tmpb4m4pj8q.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a arr=(\"$@\")\n  local -a max_product=()\n  local -a max_product_index=()\n  local -a max_product_index_count=()\n  local -a max_product_index_count_index=()\n  local -a max_product_index_count_index_count=()\n  local -a max_product_index_count_index_count_index=()\n  local -a max_product_index_count_index_count_index_count=()\n  local -a max_product_index_count_index_count_index_count_index=()\n  local -a max_product_index_count_index_count_index_count_index_count=()\n  local -a max_product_index_count_index_count_index_count_index_count_index=()\n  local -a max_product_index_count_index_count_index_count_index_count_index_count=()\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index=()\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count=()\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=()\n  local -a max_product_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=()\n  local -a max_product_index_count_index_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -a list=($1)\n  local -a products=(1)\n  local max=1\n  for ((i=0; i<${#list[@]}; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${list[j]} -lt ${list[i]} ]]; then\n        products[i]=$(( ${products[j]} * ${list[i]} ))\n        if [[ ${products[i]} -gt $max ]]; then\n          max=${products[i]}\n        fi\n      fi\n    done\n  done\n  echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n\n    max_prod[0]=${arr[0]}\n    max_prod_idx[0]=0\n    max_prod_len[0]=1\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        max_prod[i]=${arr[i]}\n        max_prod_idx[i]=i\n        max_prod_len[i]=1\n        for ((j=0; j<i; j++)); do\n            if (( arr[i] > arr[j] )); then\n                if (( max_prod[i] < max_prod[j] * arr[i] )); then\n                    max_prod[i]=${max_prod[j]} * ${arr[i]}\n                    max_prod_idx[i]=${max_prod_idx[j]}\n                    max_prod_len[i]=${max_prod_len[j]} + 1\n                fi\n            fi\n        done\n    done\n\n    local max_prod_idx_max=0\n    local max_prod_len_max=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( max_prod_len[i] > max_prod_len_max )); then\n            max_prod_idx_max=${max_prod_idx[i]}\n            max_prod_len_max=${max_prod_len[i]}\n        fi\n    done\n\n    echo ${max_prod[@]}\n    echo ${max_prod_idx[@]}\n    echo ${max_prod_len[@]}\n    echo ${max_prod_idx_max}\n    echo ${max_prod_len_max}\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 22: 1: command not found\\n/tmp/tmpbcw6v5d9.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 24: +: command not found\\n/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 22: 1: command not found\\n/tmp/tmpbcw6v5d9.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 24: +: command not found\\n/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 22: 1: command not found\\n/tmp/tmpbcw6v5d9.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 24: +: command not found\\n/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 22: 1: command not found\\n/tmp/tmpbcw6v5d9.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 24: +: command not found\\n/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 22: 1: command not found\\n/tmp/tmpbcw6v5d9.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 24: +: command not found\\n/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 22: 1: command not found\\n/tmp/tmpbcw6v5d9.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 24: +: command not found\\n/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 22: 1: command not found\\n/tmp/tmpbcw6v5d9.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 24: +: command not found\\n/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 22: 1: command not found\\n/tmp/tmpbcw6v5d9.sh: line 24: `max_prod_len[i]': not a valid identifier\\n/tmp/tmpbcw6v5d9.sh: line 24: +: command not found\\n/tmp/tmpbcw6v5d9.sh: line 22: `max_prod[i]': not a valid identifier\\n/tmp/tmpb",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr\n    local -i i j k\n    local -i max_prod\n    local -i prod\n    arr=($1)\n    max_prod=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        prod=1\n        for ((j=i; j<${#arr[@]}; j++)); do\n            prod=$((prod * arr[j]))\n            if ((prod > max_prod)); then\n                max_prod=$prod\n            fi\n        done\n    done\n    echo $max_prod\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_prev\n    local -a min_prod\n    local -a min_prod_prev\n    local -a max_prod_curr\n    local -a min_prod_curr\n    local -a max_prod_final\n    local -a min_prod_final\n    local -a max_prod_final_prev\n    local -a min_prod_final_prev\n    local -a max_prod_final_curr\n    local -a min_prod_final_curr\n    local -a max_prod_final_prev_curr\n    local -a min_prod_final_prev_curr\n    local -a max_prod_final_prev_curr_prev\n    local -a min_prod_final_prev_curr_prev\n    local -a max_prod_final_prev_curr_prev_prev\n    local -a min_prod_final_prev_curr_prev_prev\n    local -a max_prod_final_prev_curr_prev_prev_prev\n    local -a min_prod_final_prev_curr_prev_prev_prev\n    local -a max_prod_final_prev_curr_prev_prev_prev_prev\n    local -a min_prod_final_prev_curr_prev_prev_prev_prev\n    local -a max_prod_final_prev_curr_prev_prev_prev_prev_prev\n    local -a min_prod_final_prev_curr_prev_prev_prev_prev_prev\n    local -a max_prod_final_prev_curr_prev_prev_prev_prev_prev_prev\n    local -a min_prod_final_prev_curr_prev_prev_prev_prev_prev_prev\n    local -a max_prod_final_prev_curr_prev_prev_prev_prev_prev_prev_prev\n    local -a min_prod_final_prev_curr_prev_prev_prev_prev\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a a=($1)\n    local -a p=(${a[0]})\n    local -a n=(${a[0]})\n    local -i max=${a[0]}\n    local -i i\n    for ((i=1; i<${#a[@]}; i++)); do\n        if ((a[i] > 0)); then\n            p[i]=$((p[i-1] * a[i]))\n            n[i]=$((n[i-1] * a[i]))\n        else\n            p[i]=$((n[i-1] * a[i]))\n            n[i]=$((p[i-1] * a[i]))\n        fi\n        if ((p[i] > max)); then\n            max=${p[i]}\n        fi\n    done\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n  local -i max=0\n  local -i product=1\n  local -i i\n  local -i j\n  local -i k\n  local -i n\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i aa\n  local -i ab\n  local -i ac\n  local -i ad\n  local -i ae\n  local -i af\n  local -i ag\n  local -i ah\n  local -i ai\n  local -i aj\n  local -i ak\n  local -i al\n  local -i am\n  local -i an\n  local -i ao\n  local -i ap\n  local -i aq\n  local -i ar\n  local -i as\n  local -i at\n  local -i au\n  local -i av\n  local -i aw\n  local -i ax\n  local -i ay\n  local -i az\n  local -i ba\n  local -i bb\n  local -i bc\n  local -i bd\n  local -i be\n  local -i bf\n  local -i bg\n  local -i bh\n  local -i bi\n  local -i bj\n  local -i bk\n  local -i bl\n  local -i bm\n  local -i bn\n  local -i bo\n  local -i bp\n  local -i bq\n  local -i br\n  local -i bs\n  local -i bt\n  local -i bu\n  local -i bv\n  local -i bw\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_arr\n    local -a min_arr\n    local max_product=${arr[0]}\n    local min_product=${arr[0]}\n    local max_product_so_far=${arr[0]}\n    local i\n    local j\n    local temp\n\n    max_arr[0]=${arr[0]}\n    min_arr[0]=${arr[0]}\n\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]} -gt 0 ]]; then\n            max_arr[i]=$((max_product * arr[i]))\n            min_arr[i]=$((min_product * arr[i]))\n        else\n            max_arr[i]=$((min_product * arr[i]))\n            min_arr[i]=$((max_product * arr[i]))\n        fi\n\n        if [[ ${max_arr[i]} -gt ${arr[i]} ]]; then\n            max_product=${max_arr[i]}\n        else\n            max_product=${arr[i]}\n        fi\n\n        if [[ ${min_arr[i]} -lt ${arr[i]} ]]; then\n            min_product=${min_arr[i]}\n        else\n            min_product=${arr[i]}\n        fi\n\n        if [[ $max_product -gt $max_product_so_far ]]; then\n            max_product_so_far=$max_product\n        fi\n    done\n\n    echo $max_product_so_far\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a prod\n    local -a max_prod_idx\n    local -a prod_idx\n    local -a max_prod_len\n    local -a prod_len\n    local -a max_prod_idx_len\n    local -a prod_idx_len\n    local -a max_prod_idx_len_idx\n    local -a prod_idx_len_idx\n    local -a max_prod_idx_len_idx_len\n    local -a prod_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx\n    local -a prod_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len\n    local -a prod_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx\n    local -a prod_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len\n    local -a prod_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx\n    local -a prod_idx_len_idx_len_idx_len_idx_len_idx\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a prod_idx_len_idx_len_idx_len_idx_len_idx_len\n    local -a max_prod_idx_len_idx_len_idx_len_idx_len_idx_len_idx\n\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a array\n    local -i i j k\n    local -i max_product=0\n    local -i product=0\n    local -i max_product_index=0\n    local -i product_index=0\n    local -i max_product_index_end=0\n    local -i product_index_end=0\n    local -i max_product_index_start=0\n    local -i product_index_start=0\n    local -i max_product_index_length=0\n    local -i product_index_length=0\n    local -i max_product_index_length_end=0\n    local -i product_index_length_end=0\n    local -i max_product_index_length_start=0\n    local -i product_index_length_start=0\n    local -i max_product_index_length_end_start=0\n    local -i product_index_length_end_start=0\n    local -i max_product_index_length_end_start_end=0\n    local -i product_index_length_end_start_end=0\n    local -i max_product_index_length_end_start_end_start=0\n    local -i product_index_length_end_start_end_start=0\n    local -i max_product_index_length_end_start_end_start_end=0\n    local -i product_index_length_end_start_end_start_end=0\n    local -i max_product_index_length_end_start_end_start_end_start=0\n    local -i product_index_length_end_start_end_start_end_start=0\n    local -i max_product_index_length_end_start_end_start_end_start_end=0\n    local -i product_index_length_end_start_end_start_end_start_end=0\n    local -i max_product_index_length_end_start_end_start_end_start_end_start=0\n    local -i product_index_length_end_start_end_start_end_start_end_start\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a list=($1)\n    local -i max=0\n    local -i product=1\n    local -i i=0\n    local -i j=0\n\n    for ((i=0; i<${#list[@]}; i++)); do\n        for ((j=i; j<${#list[@]}; j++)); do\n            product=$((product * list[j]))\n            if ((product > max)); then\n                max=$product\n            fi\n        done\n        product=1\n    done\n\n    echo $max\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n    local -a arr=($1)\n    local -a max_prod\n    local -a max_prod_idx\n    local -a max_prod_len\n    local -a max_prod_end\n    local -a max_prod_start\n    local -a max_prod_arr\n    local -a max_prod_arr_idx\n    local -a max_prod_arr_len\n    local -a max_prod_arr_end\n    local -a max_prod_arr_start\n    local -a max_prod_arr_arr\n    local -a max_prod_arr_arr_idx\n    local -a max_prod_arr_arr_len\n    local -a max_prod_arr_arr_end\n    local -a max_prod_arr_arr_start\n    local -a max_prod_arr_arr_arr\n    local -a max_prod_arr_arr_arr_idx\n    local -a max_prod_arr_arr_arr_len\n    local -a max_prod_arr_arr_arr_end\n    local -a max_prod_arr_arr_arr_start\n    local -a max_prod_arr_arr_arr_arr\n    local -a max_prod_arr_arr_arr_arr_idx\n    local -a max_prod_arr_arr_arr_arr_len\n    local -a max_prod_arr_arr_arr_arr_end\n    local -a max_prod_arr_arr_arr_arr_start\n    local -a max_prod_arr_arr_arr_arr_arr\n    local -a max_prod_arr_arr_arr_arr_arr_idx\n    local -a max_prod_arr_arr_arr_arr_arr_len\n    local -a max_prod_arr_arr_arr_arr_arr_end\n    local -a max_prod_arr_arr_arr_arr_arr_start\n    local -a max_prod_arr_arr_arr_arr_arr_arr\n    local -a max_\n}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test",
      "timestamp": 1667190969,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}