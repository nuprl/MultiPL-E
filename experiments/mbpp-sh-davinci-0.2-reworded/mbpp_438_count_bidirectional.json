{
  "name": "mbpp_438_count_bidirectional",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to count bidirectional list pairs.\n#\n# $1 is a newline-separated, space-separated list\ncount_bidirectional() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    count_bidirectional \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6\\n1 2\\n6 5\\n9 1\\n6 5\\n2 1\") = \"3\" ]]\n    [[ $(candidate \"5 6\\n1 3\\n6 5\\n9 1\\n6 5\\n2 1\") = \"2\" ]]\n    [[ $(candidate \"5 6\\n1 2\\n6 5\\n9 2\\n6 5\\n2 1\") = \"4\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local list=\"$1\"\n  local count=0\n  while read -r line; do\n    local -a words=($line)\n    local word1=\"${words[0]}\"\n    local word2=\"${words[1]}\"\n    if [[ \"$list\" =~ \"$word2 $word1\" ]]; then\n      ((count++))\n    fi\n  done <<< \"$list\"\n  echo \"$count\"",
    "    local list=\"$1\"\n    local count=0\n    local pair\n    local pair_rev\n    local pair_count\n    local pair_count_rev\n    local pair_count_total\n    local pair_count_total_max=0\n    local pair_count_total_max_pair\n    local pair_count_total_max_pair_rev\n\n    # Create a list of pairs and their counts\n    while read pair; do\n        pair_count=$(echo \"$list\" | grep -c \"$pair\")\n        echo \"$pair $pair_count\"\n    done < <(echo \"$list\" | tr ' ' '\\n' | sort | uniq -d) | sort -n -k2 -r > /tmp/pairs_counts\n\n    # Find the pair with the highest count\n    while read pair pair_count; do\n        pair_count_total_max_pair=\"$pair\"\n        pair_count_total_max_pair_rev=\"$(echo \"$pair\" | rev)\"\n        pair_count_total_max=\"$pair_count\"\n        break\n    done < /tmp/pairs_counts\n\n    # Find the highest count of the pair and its reverse\n    while read pair pair_count; do\n        pair_rev=\"$(echo \"$pair\" | rev)\"\n        if [ \"$pair\" = \"$pair_count_total_max_pair\" ] || [ \"$pair_rev\" = \"$pair_count_total_max_pair\" ]; then\n            pair_count_total=$((pair_count_total + pair_count))\n        fi\n    done < /tmp/pairs_counts\n\n    # The count is the highest count of the pair and its reverse divided by 2\n    count=$((pair_count_total / 2))\n    echo \"$count\"",
    "  local -i count=0\n  local -a list=($1)\n  local -i i=0\n  local -i j=0\n  local -i len=${#list[@]}\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n ",
    "    local -i count=0\n    local -a list\n    local -a pairs\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i ab\n    local -i ac\n    local -i ad\n    local -i ae\n    local -i af\n    local -i ag\n    local -i ah\n    local -i ai\n    local -i aj\n    local -i ak\n    local -i al\n    local -i am\n    local -i an\n    local -i ao\n    local -i ap\n    local -i aq\n    local -i ar\n    local -i as\n    local -i at\n    local -i au\n    local -i av\n    local -i aw\n    local -i ax\n    local -i ay\n    local -i az\n    local -i ba\n    local -i bb\n    local -i bc\n    local -i bd\n    local -i be\n    local -i bf\n    local -i bg\n    local -i bh\n    local -i bi\n    local -i bj\n    local -i bk\n    local -i bl\n    local -i bm\n    local -i bn\n    local -i bo\n    local -i bp\n    local -i bq\n    local -i br\n    local -i bs\n    local -i bt\n    local -i bu\n    local -i bv\n    local -i bw\n    local -i bx\n    local -i by\n    local -i bz\n    local -i ca\n    local -i cb\n    local -i cc\n    local -i cd\n    local -i ce\n    local -i cf\n    local -i cg\n    local -i",
    "    local list=\"$1\"\n    local count=0\n    local -A pairs\n    while read -r line; do\n        local pair=($line)\n        local key=\"${pair[0]} ${pair[1]}\"\n        local revkey=\"${pair[1]} ${pair[0]}\"\n        if [[ -z \"${pairs[$key]}\" ]]; then\n            pairs[$key]=1\n        else\n            pairs[$key]=$((pairs[$key] + 1))\n        fi\n        if [[ -z \"${pairs[$revkey]}\" ]]; then\n            pairs[$revkey]=1\n        else\n            pairs[$revkey]=$((pairs[$revkey] + 1))\n        fi\n    done <<< \"$list\"\n    for pair in \"${!pairs[@]}\"; do\n        if [[ \"${pairs[$pair]}\" -gt 1 ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo \"$count\"",
    "  local list=$1\n  local count=0\n  local pair\n  while read pair; do\n    local a=$(echo $pair | cut -d' ' -f1)\n    local b=$(echo $pair | cut -d' ' -f2)\n    if [[ $list =~ \"$b $a\" ]]; then\n      count=$((count + 1))\n    fi\n  done <<< \"$list\"\n  echo $count",
    "    local list=\"$1\"\n    local count=0\n    local pair\n    local pair_rev\n    local pair_count\n    local pair_count_rev\n    local pair_count_total\n    local pair_count_total_max=0\n    local pair_count_total_max_pair\n    local pair_count_total_max_pair_rev\n    local pair_count_total_max_pair_count\n    local pair_count_total_max_pair_count_rev\n    local pair_count_total_max_pair_count_total\n    local pair_count_total_max_pair_count_total_max\n    local pair_count_total_max_pair_count_total_max_pair\n    local pair_count_total_max_pair_count_total_max_pair_rev\n    local pair_count_total_max_pair_count_total_max_pair_count\n    local pair_count_total_max_pair_count_total_max_pair_count_rev\n    local pair_count_total_max_pair_count_total_max_pair_count_total\n    local pair_count_total_max_pair_count_total_max_pair_count_total_max\n    local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair\n    local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_rev\n    local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count\n    local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count_rev\n    local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count_total\n    local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count_total_max\n    local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count_total_max_pair\n    local pair",
    "    local -i count=0\n    local -i i=0\n    local -a list\n    local -a list_rev\n    local -a pair\n    local -a pair_rev\n\n    # Split the list into an array\n    IFS=$'\\n' read -d '' -r -a list < <(printf '%s\\n' \"$1\")\n\n    # Reverse the list\n    for ((i=0; i<${#list[@]}; i++)); do\n        list_rev[$i]=\"${list[$(( ${#list[@]} - 1 - $i ))]}\"\n    done\n\n    # Count the number of bidirectional pairs\n    for ((i=0; i<${#list[@]}; i++)); do\n        IFS=$' ' read -d '' -r -a pair < <(printf '%s\\n' \"${list[$i]}\")\n        IFS=$' ' read -d '' -r -a pair_rev < <(printf '%s\\n' \"${list_rev[$i]}\")\n        if [[ \"${pair[0]}\" == \"${pair_rev[1]}\" && \"${pair[1]}\" == \"${pair_rev[0]}\" ]]; then\n            count=$(( count + 1 ))\n        fi\n    done\n\n    echo $count",
    "  local list=\"$1\"\n  local count=0\n  local pair\n  while read -r pair; do\n    local a=\"${pair%% *}\"\n    local b=\"${pair#* }\"\n    if [[ \"$list\" =~ \"$b $a\" ]]; then\n      count=$((count + 1))\n    fi\n  done <<< \"$list\"\n  echo \"$count\"",
    "  local list=$1\n  local count=0\n  local line\n  local pair\n  local pair_rev\n  local pair_count\n  local pair_count_rev\n  local pair_count_total\n  local pair_count_total_max\n  local pair_count_total_max_pair\n  while read line; do\n    pair=$(echo $line | awk '{print $1 \" \" $2}')\n    pair_rev=$(echo $line | awk '{print $2 \" \" $1}')\n    pair_count=$(echo \"$list\" | grep -c \"$pair\")\n    pair_count_rev=$(echo \"$list\" | grep -c \"$pair_rev\")\n    pair_count_total=$((pair_count + pair_count_rev))\n    if [[ $pair_count_total -gt $pair_count_total_max ]]; then\n      pair_count_total_max=$pair_count_total\n      pair_count_total_max_pair=$pair\n    fi\n  done <<< \"$list\"\n  echo \"$pair_count_total_max_pair\"",
    "    local list=\"$1\"\n    local count=0\n    local pair\n    local pair_reverse\n    local pair_count=0\n    local pair_reverse_count=0\n    local pair_count_max=0\n    local pair_reverse_count_max=0\n    local pair_count_max_pair\n    local pair_reverse_count_max_pair\n    local pair_count_max_pair_reverse\n    local pair_reverse_count_max_pair_reverse\n    local pair_count_max_pair_count\n    local pair_reverse_count_max_pair_count\n    local pair_count_max_pair_reverse_count\n    local pair_reverse_count_max_pair_reverse_count\n    local pair_count_max_pair_count_max\n    local pair_reverse_count_max_pair_count_max\n    local pair_count_max_pair_reverse_count_max\n    local pair_reverse_count_max_pair_reverse_count_max\n    local pair_count_max_pair_count_max_pair\n    local pair_reverse_count_max_pair_count_max_pair\n    local pair_count_max_pair_reverse_count_max_pair\n    local pair_reverse_count_max_pair_reverse_count_max_pair\n    local pair_count_max_pair_count_max_pair_reverse\n    local pair_reverse_count_max_pair_count_max_pair_reverse\n    local pair_count_max_pair_reverse_count_max_pair_reverse\n    local pair_reverse_count_max_pair_reverse_count_max_pair_reverse\n    local pair_count_max_pair_count_max_pair_count\n    local pair_reverse_count_max_pair_count_max_pair_count\n    local pair_count_max_pair_reverse_count_max_pair_count\n    local pair_reverse_count_max_pair_reverse_count_max_pair_count\n    local pair_count_max_pair_count_max_pair_reverse_count\n    local pair_reverse_count_max_pair_count_max_pair_reverse_count\n    local pair_count",
    "    local list=\"$1\"\n    local count=0\n    local pair\n    local pair_reverse\n    local pair_count\n    local pair_count_reverse\n    local pair_count_total\n    local pair_count_total_max=0\n    local pair_count_total_max_pair\n    local pair_count_total_max_pair_reverse\n    local pair_count_total_max_pair_count\n    local pair_count_total_max_pair_count_reverse\n    local pair_count_total_max_pair_count_total\n\n    while read -r pair; do\n        pair_reverse=\"$(echo \"$pair\" | awk '{print $2 \" \" $1}')\"\n        pair_count=\"$(echo \"$list\" | grep -c \"^$pair \")\"\n        pair_count_reverse=\"$(echo \"$list\" | grep -c \"^$pair_reverse \")\"\n        pair_count_total=\"$((pair_count + pair_count_reverse))\"\n        if [ \"$pair_count_total\" -gt \"$pair_count_total_max\" ]; then\n            pair_count_total_max=\"$pair_count_total\"\n            pair_count_total_max_pair=\"$pair\"\n            pair_count_total_max_pair_reverse=\"$pair_reverse\"\n            pair_count_total_max_pair_count=\"$pair_count\"\n            pair_count_total_max_pair_count_reverse=\"$pair_count_reverse\"\n            pair_count_total_max_pair_count_total=\"$pair_count_total\"\n        fi\n    done < <(echo \"$list\" | awk '{print $1 \" \" $2}' | sort -u)\n\n    echo \"pair_count_total_max_pair: $pair_count_total_max_pair\"\n    echo \"pair_count_total_max_pair_reverse: $pair_count_total_max_pair_reverse\"\n    echo \"pair_count_total_max_pair_count: $pair_count_total_max_pair_count\"\n    echo \"pair_count_total_max_pair_count_reverse: $pair_count",
    "  local list=\"$1\"\n  local count=0\n  local line\n  local pair\n  local pair_rev\n  local pair_count=0\n  local pair_count_rev=0\n  local pair_count_sum=0\n  local pair_count_sum_max=0\n  local pair_count_sum_max_pair=''\n  local pair_count_sum_max_pair_rev=''\n  local pair_count_sum_max_pair_count=0\n  local pair_count_sum_max_pair_count_rev=0\n  local pair_count_sum_max_pair_count_sum=0\n\n  # Sort the list and count the number of times each pair occurs.\n  while read -r line; do\n    pair=\"$(echo \"$line\" | sort | tr ' ' '-')\"\n    pair_rev=\"$(echo \"$line\" | sort -r | tr ' ' '-')\"\n    pair_count=\"$(echo \"$list\" | grep -c \"^$pair$\")\"\n    pair_count_rev=\"$(echo \"$list\" | grep -c \"^$pair_rev$\")\"\n    pair_count_sum=\"$((pair_count + pair_count_rev))\"\n    if [[ \"$pair_count_sum\" -gt \"$pair_count_sum_max\" ]]; then\n      pair_count_sum_max=\"$pair_count_sum\"\n      pair_count_sum_max_pair=\"$pair\"\n      pair_count_sum_max_pair_rev=\"$pair_rev\"\n      pair_count_sum_max_pair_count=\"$pair_count\"\n      pair_count_sum_max_pair_count_rev=\"$pair_count_rev\"\n      pair_count_sum_max_pair_count_sum=\"$pair_count_sum\"\n    fi\n  done <<< \"$(echo \"$list\" | sort | uniq)\"\n\n  # Count the number of times the most common pair occurs.\n  count=\"$((pair_count_sum_max_pair_count_sum / 2))\"\n\n  # Print the results.\n  echo \"Most common pair: $pair_count_sum_max_",
    "    local list=\"$1\"\n    local count=0\n    local pair\n    local pair_reverse\n    local pair_count\n    for pair in $(echo \"$list\" | sort | uniq -c | awk '{print $2}'); do\n        pair_reverse=$(echo \"$pair\" | awk '{print $2\" \"$1}')\n        pair_count=$(echo \"$list\" | grep -c \"$pair\")\n        if [ \"$pair_count\" -gt 0 ] && [ \"$pair_reverse\" != \"$pair\" ]; then\n            pair_count=$(echo \"$list\" | grep -c \"$pair_reverse\")\n            if [ \"$pair_count\" -gt 0 ]; then\n                count=$((count + 1))\n            fi\n        fi\n    done\n    echo \"$count\"",
    "  local list=\"$1\"\n  local count=0\n  local -a pairs\n  local -a seen\n  local pair\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\n  # Split the list into pairs.\n  while read -r i j; do\n    pairs+=(\"$i $j\")\n  done <<< \"$list\"\n\n  # For each pair, check if the reverse pair has been seen.\n  for ((k=0; k<${#pairs[@]}; k++)); do\n    pair=\"${pairs[$k]}\"\n    i=\"${pair%% *}\"\n    j=\"${pair#* }\"\n    for ((l=0; l<${#seen[@]}; l++)); do\n      m=\"${seen[$l]}\"\n      n=\"${m%% *}\"\n      o=\"${m#* }\"\n      if [[ \"$i\" == \"$o\" && \"$j\" == \"$n\" ]]; then\n        ((count++))\n      fi\n    done\n    seen+=(\"$i $j\")\n  done\n\n  echo \"$count\"",
    "    local -i count=0\n    local -a list\n    local -a seen\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local -i ab\n    local -i ac\n    local -i ad\n    local -i ae\n    local -i af\n    local -i ag\n    local -i ah\n    local -i ai\n    local -i aj\n    local -i ak\n    local -i al\n    local -i am\n    local -i an\n    local -i ao\n    local -i ap\n    local -i aq\n    local -i ar\n    local -i as\n    local -i at\n    local -i au\n    local -i av\n    local -i aw\n    local -i ax\n    local -i ay\n    local -i az\n    local -i ba\n    local -i bb\n    local -i bc\n    local -i bd\n    local -i be\n    local -i bf\n    local -i bg\n    local -i bh\n    local -i bi\n    local -i bj\n    local -i bk\n    local -i bl\n    local -i bm\n    local -i bn\n    local -i bo\n    local -i bp\n    local -i bq\n    local -i br\n    local -i bs\n    local -i bt\n    local -i bu\n    local -i bv\n    local -i bw\n    local -i bx\n    local -i by\n    local -i bz\n    local -i ca\n    local -i cb\n    local -i cc\n    local -i cd\n    local -i ce\n    local -i cf\n    local -i cg\n    local -i",
    "    local list=\"$1\"\n    local count=0\n    local pair\n    local pair_rev\n    local pair_count\n    local pair_count_rev\n    while read pair; do\n        pair_count=$(echo \"$list\" | grep -c \"$pair\")\n        pair_rev=$(echo \"$pair\" | rev)\n        pair_count_rev=$(echo \"$list\" | grep -c \"$pair_rev\")\n        if [[ $pair_count -gt 0 && $pair_count_rev -gt 0 ]]; then\n            count=$((count + 1))\n        fi\n    done <<< \"$(echo \"$list\" | sort -u)\"\n    echo $count",
    "    local count=0\n    local -A pairs\n    local -A reverse\n    local pair\n    local reverse_pair\n    local line\n    while read line; do\n        pair=\"$(echo \"$line\" | awk '{print $1, $2}')\"\n        reverse_pair=\"$(echo \"$line\" | awk '{print $2, $1}')\"\n        if [[ -z \"${pairs[$pair]}\" ]]; then\n            pairs[$pair]=1\n        else\n            pairs[$pair]=$((pairs[$pair] + 1))\n        fi\n        if [[ -z \"${reverse[$reverse_pair]}\" ]]; then\n            reverse[$reverse_pair]=1\n        else\n            reverse[$reverse_pair]=$((reverse[$reverse_pair] + 1))\n        fi\n    done <<< \"$1\"\n    for pair in \"${!pairs[@]}\"; do\n        reverse_pair=\"$(echo \"$pair\" | awk '{print $2, $1}')\"\n        if [[ -n \"${reverse[$reverse_pair]}\" ]]; then\n            count=$((count + pairs[$pair] * reverse[$reverse_pair]))\n        fi\n    done\n    echo \"$count\"",
    "    local list=\"$1\"\n    local count=0\n    local -a pairs=()\n    local -a pair\n    local -a pair_reverse\n    local -a pair_reverse_sorted\n    local -a pair_sorted\n    local -a pair_sorted_reverse\n    local -a pair_sorted_reverse_sorted\n    local -a pair_sorted_sorted\n    local -a pair_sorted_sorted_reverse\n    local -a pair_sorted_sorted_reverse_sorted\n    local -a pair_sorted_sorted_sorted\n    local -a pair_sorted_sorted_sorted_reverse\n    local -a pair_sorted_sorted_sorted_reverse_sorted\n    local -a pair_sorted_sorted_sorted_sorted\n    local -a pair_sorted_sorted_sorted_sorted_reverse\n    local -a pair_sorted_sorted_sorted_sorted_reverse_sorted\n    local -a pair_sorted_sorted_sorted_sorted_sorted\n    local -a pair_sorted_sorted_sorted_sorted_sorted_reverse\n    local -a pair_sorted_sorted_sorted_sorted_sorted_reverse_sorted\n    local -a pair_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a pair_sorted_sorted_sorted_sorted_sorted_sorted_reverse\n    local -a pair_sorted_sorted_sorted_sorted_sorted_sorted_reverse_sorted\n    local -a pair_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a pair_sorted_sorted_sorted_sorted_sorted_sorted_sorted_reverse\n    local -a pair_sorted_sorted_sorted_sorted_sorted_sorted_sorted_reverse_sorted\n    local -a pair_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a pair_s",
    "  local list=\"$1\"\n  local count=0\n  local pair\n  local pair_reverse\n  local pair_count\n  local pair_count_reverse\n  local pair_count_total\n  local pair_count_total_max=0\n  local pair_count_total_max_pair\n  local pair_count_total_max_pair_reverse\n  local pair_count_total_max_pair_count\n  local pair_count_total_max_pair_count_reverse\n  local pair_count_total_max_pair_count_total\n  local pair_count_total_max_pair_count_total_max\n  local pair_count_total_max_pair_count_total_max_pair\n  local pair_count_total_max_pair_count_total_max_pair_reverse\n  local pair_count_total_max_pair_count_total_max_pair_count\n  local pair_count_total_max_pair_count_total_max_pair_count_reverse\n  local pair_count_total_max_pair_count_total_max_pair_count_total\n  local pair_count_total_max_pair_count_total_max_pair_count_total_max\n  local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair\n  local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_reverse\n  local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count\n  local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count_reverse\n  local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count_total\n  local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count_total_max\n  local pair_count_total_max_pair_count_total_max_pair_count_total_max_pair_count_total_max_pair\n  local pair"
  ]
}