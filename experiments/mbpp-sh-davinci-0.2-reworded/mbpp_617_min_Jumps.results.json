{
  "name": "mbpp_617_min_Jumps",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local list=$1\n    local length=$2\n    local jumps=0\n    local i=0\n    local j=0\n    local temp=0\n    local max=0\n    local max_index=0\n    local flag=0\n\n    while [ $i -lt $length ]\n    do\n        if [ $i -eq $((length - 1)) ]\n        then\n            ((jumps++))\n            break\n        fi\n\n        max=0\n        max_index=0\n        flag=0\n        for ((j = i + 1; j <= i + ${list[i]}; j++))\n        do\n            if [ $j -eq $((length - 1)) ]\n            then\n                flag=1\n                break\n            fi\n            if [ ${list[j]} -gt $max ]\n            then\n                max=${list[j]}\n                max_index=$j\n            fi\n        done\n\n        if [ $flag -eq 1 ]\n        then\n            ((jumps++))\n            break\n        fi\n\n        i=$max_index\n        ((jumps++))\n    done\n\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "<_io.BufferedReader name=5>",
      "stderr": "<_io.BufferedReader name=7>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local step=0\n    local max=0\n    local max_i=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        max=0\n        max_i=0\n        for ((j=1; j<=$2; j++))\n        do\n            if [ $((i+j)) -lt $n ] && [ $((arr[i+j]+j)) -gt $max ]\n            then\n                max=$((arr[i+j]+j))\n                max_i=$((i+j))\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local k=0\n    local min=0\n    local jumps=0\n    local temp=0\n    local flag=0\n    local min_jumps=0\n    local temp_jumps=0\n    local temp_min=0\n    local temp_flag=0\n    local temp_i=0\n    local temp_j=0\n    local temp_k=0\n    local temp_min_jumps=0\n    local temp_temp=0\n    local temp_temp_jumps=0\n    local temp_temp_min=0\n    local temp_temp_flag=0\n    local temp_temp_i=0\n    local temp_temp_j=0\n    local temp_temp_k=0\n    local temp_temp_min_jumps=0\n    local temp_temp_temp=0\n    local temp_temp_temp_jumps=0\n    local temp_temp_temp_min=0\n    local temp_temp_temp_flag=0\n    local temp_temp_temp_i=0\n    local temp_temp_temp_j=0\n    local temp_temp_temp_k=0\n    local temp_temp_temp_min_jumps=0\n    local temp_temp_temp_temp=0\n    local temp_temp_temp_temp_jumps=0\n    local temp_temp_temp_temp_min=0\n    local temp_temp_temp_temp_flag=0\n    local temp_temp_temp_temp_i=0\n    local temp_temp_temp_temp_j=0\n    local temp_temp_temp_temp_k=0\n    local temp_temp_temp_temp_min_jumps=0\n    local temp_temp_temp_temp_temp=0\n    local temp_temp_temp_temp_temp_jumps=0\n    local temp_temp_temp_temp_temp_min=0\n    local temp_temp_temp_temp_temp_flag=0\n    local temp_temp_temp_temp_temp_i=0\n    local temp_temp_temp_temp_temp_j\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpnlptouyg.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i min=0\n  local -i temp=0\n  local -i res=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmprk5w7ch_.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local min_jumps=0\n    local min_jumps_arr=()\n    local min_jumps_arr_index=0\n    local min_jumps_arr_size=0\n    local min_jumps_arr_last_index=0\n    local min_jumps_arr_last_value=0\n    local min_jumps_arr_last_value_index=0\n    local min_jumps_arr_last_value_index_plus_one=0\n    local min_jumps_arr_last_value_index_plus_one_value=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one_value=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one_value_plus_one=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one_value_plus_one_value=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one_value_plus_one_value_plus_one=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one_value_plus_one_value_plus_one_value=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one_value_plus_one_value_plus_one_value_plus_one=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one_value_plus_one_value_plus_one_value_plus_one_value=0\n    local min_jumps_arr_last_value_index_plus_one_value_plus_one_value_plus_one_value_plus_one_value_plus_one_value_plus_one=0\n   \n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp3tf9xwis.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]; do\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpjfg95r5b.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpjfg95r5b.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpjfg95r5b.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -a arr=($1)\n  local n=${#arr[@]}\n  local jump=0\n  local i=0\n  local maxReach=0\n  local steps=0\n  local jump_arr=()\n  while [ $i -lt $n ]\n  do\n    if [ $i -eq $((n-1)) ]\n    then\n      jump_arr+=($jump)\n      break\n    fi\n    maxReach=$((i+arr[i]))\n    steps=$((arr[i]))\n    while [ $steps -gt 0 ]\n    do\n      if [ $((i+steps)) -eq $((n-1)) ]\n      then\n        jump_arr+=($((jump+1)))\n        break 2\n      fi\n      if [ $((i+steps)) -gt $maxReach ]\n      then\n        maxReach=$((i+steps))\n      fi\n      steps=$((steps-1))\n    done\n    i=$((i+1))\n    jump=$((jump+1))\n  done\n  echo ${jump_arr[@]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n array=$1\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n    local -i jumps=0\n    local -i maxReach=0\n    local -i steps=0\n    local -i flag=0\n    while [ $i -lt $n ]\n    do\n        maxReach=$((i+array[i]))\n        if [ $maxReach -gt $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        steps=$maxReach\n        for (( j=i+1; j<=maxReach; j++ ))\n        do\n            if [ $((j+array[j])) -gt $steps ]\n            then\n                steps=$((j+array[j]))\n                flag=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$flag\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "<_io.BufferedReader name=18>",
      "stderr": "<_io.BufferedReader name=20>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if (( i + arr[i] >= n-1 ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for (( j=1; j<=arr[i]; j++ ))\n        do\n            if (( arr[i+j] + j > max ))\n            then\n                max=$(( arr[i+j] + j ))\n                max_index=$(( i + j ))\n            fi\n        done\n        jumps=$(( jumps + 1 ))\n        i=$max_index\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpwvvbuwr5.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local jumps=0\n  local max_reach=0\n  local steps=0\n\n  while i < n - 1 {\n    max_reach = arr[i] + i\n    if i + arr[i] >= n - 1 {\n      jumps = 1\n      break\n    }\n    steps = arr[i]\n    for j in $(seq $((i + 1)) $((i + arr[i]))) {\n      if j + arr[j] > steps {\n        steps = j + arr[j]\n        max_reach = j\n      }\n    }\n    i = max_reach\n    jumps = jumps + 1\n  }\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpam3sc5tt.sh: line 20: syntax error near unexpected token `}'\\n/tmp/tmpam3sc5tt.sh: line 20: `    }'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]\n        then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j=$((i+1)); j<=$((i+arr[$i])); j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "<_io.BufferedReader name=9>",
      "stderr": "<_io.BufferedReader name=12>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local step=${arr[$i]}\n        for ((j=i+1; j<=max_reach; j++)); do\n            if [ $((j+arr[j])) -gt $((max_reach+step)) ]; then\n                max_reach=$((j+arr[j]))\n                step=${arr[$j]}\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_reach\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "<_io.BufferedReader name=8>",
      "stderr": "<_io.BufferedReader name=14>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local len=${#arr[@]}\n    local jump=$2\n    local i=0\n    local j=0\n    local count=0\n    local flag=0\n    for ((i=0;i<len;i++))\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            continue\n        else\n            for ((j=i+1;j<len;j++))\n            do\n                if [ ${arr[$j]} -eq 0 ]\n                then\n                    flag=1\n                    break\n                fi\n            done\n            if [ $flag -eq 1 ]\n            then\n                i=$j\n                flag=0\n            else\n                count=$((count+1))\n                i=$((i+jump))\n            fi\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i jumps=0\n    local -i i=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local -i max_reach=i+${arr[$i]}\n        local -i steps=${arr[$i]}\n        local -i j=i+1\n        while [ $j -lt $((i+steps)) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[$j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[$j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp4xnej0km.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmp4xnej0km.sh: line 17: [: -eq: unary operator expected\\n/tmp/tmp4xnej0km.sh: line 22: local: i+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        for ((j=$i+1; j<=$((i+arr[i])); j++))\n        do\n            if [ $j -ge $n ]\n            then\n                break\n            fi\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=16>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i j=0\n    local -i min_jumps=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n    local -i pos=0\n\n    while (( i < n-1 ))\n    do\n        max_reach=$i+${arr[i]}\n        jumps=$(( jumps+1 ))\n        if (( max_reach >= n-1 ))\n        then\n            echo $jumps\n            return\n        fi\n        for (( j=i+1; j<=max_reach; j++ ))\n        do\n            steps=$(( j+${arr[j]} ))\n            if (( steps > pos ))\n            then\n                pos=$steps\n                min_jumps=$jumps\n            fi\n        done\n        i=$min_jumps\n    done\n    echo -1\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp6ncj80xy.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmp6ncj80xy.sh: line 19: 0+: syntax error: operand expected (error token is \"+\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local len=$2\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    while (( i < len ))\n    do\n        max_reach=$(( i + arr[i] ))\n        if (( max_reach >= len-1 ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        steps=$(( max_reach + 1 ))\n        while (( steps <= len ))\n        do\n            if (( steps + arr[steps] > max_reach ))\n            then\n                max_reach=$(( steps + arr[steps] ))\n            fi\n            (( steps++ ))\n        done\n        (( jumps++ ))\n        i=$(( i + 1 ))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpz8wf5wka.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local x=$2\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq $x ]\n        then\n            jumps=$((jumps+1))\n            break\n        elif [ ${arr[$i]} -gt $x ]\n        then\n            jumps=$((jumps+1))\n            break\n        else\n            jumps=$((jumps+1))\n            x=$((x-arr[$i]))\n        fi\n        i=$((i+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            i=$((i+arr[i]))\n            jumps=$((jumps+1))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "<_io.BufferedReader name=17>",
      "stderr": "<_io.BufferedReader name=21>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local list=$1\n    local length=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $length ]; do\n        local j=$i\n        local max=0\n        while [ $j -lt $length ] && [ $j -le $((i+list[i])) ]; do\n            if [ ${list[j]} -gt $max ]; then\n                max=${list[j]}\n                max_index=$j\n            fi\n            j=$((j+1))\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n        if [ $i -ge $length ]; then\n            break\n        fi\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpyi_lsn72.sh: line 14: 3 4: syntax error in expression (error token is \"4\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]\n        then\n            echo $((jumps+1))\n            return\n        fi\n        if [ $i -eq $((n-3)) ]\n        then\n            echo $((jumps+1))\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max=${arr[$i]}\n        local max_index=$i\n        for j in $(seq $((i+1)) $((i+arr[$i])))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                echo $((jumps+1))\n                return\n            fi\n            if [ $j -eq $((n-2)) ]\n            then\n                echo $((jumps+2))\n                return\n            fi\n            if [ $j -eq $((n-3)) ]\n            then\n                echo $((jumps+2))\n                return\n            fi\n            if [ $j -gt $((n-1)) ]\n            then\n                break\n            fi\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_index\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "<_io.BufferedReader name=27>",
      "stderr": "<_io.BufferedReader name=29>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a list=($1)\n    local -i n=${#list[@]}\n    local -i m=$2\n    local -i i=0\n    local -i j=0\n    local -i jumps=0\n    local -i min_jumps=0\n    local -i min_jumps_index=0\n    local -i min_jumps_value=0\n    local -i max_jumps=0\n    local -i max_jumps_index=0\n    local -i max_jumps_value=0\n    local -i max_jumps_index_temp=0\n    local -i max_jumps_value_temp=0\n    local -i max_jumps_temp=0\n    local -i max_jumps_index_temp_temp=0\n    local -i max_jumps_value_temp_temp=0\n    local -i max_jumps_temp_temp=0\n    local -i max_jumps_index_temp_temp_temp=0\n    local -i max_jumps_value_temp_temp_temp=0\n    local -i max_jumps_temp_temp_temp=0\n    local -i max_jumps_index_temp_temp_temp_temp=0\n    local -i max_jumps_value_temp_temp_temp_temp=0\n    local -i max_jumps_temp_temp_temp_temp=0\n    local -i max_jumps_index_temp_temp_temp_temp_temp=0\n    local -i max_jumps_value_temp_temp_temp_temp_temp=0\n    local -i max_jumps_temp_temp_temp_temp_temp=0\n    local -i max_jumps_index_temp_temp_temp_temp_temp_temp=0\n    local -i max_jumps_value_temp_temp_temp_temp_temp_temp=0\n    local -i max_jumps_temp_temp_temp_temp_temp_temp=0\n    local -i max_jumps_index_temp_temp_temp_temp_temp_temp_temp=0\n    local -i max_j\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -a dp\n    local i j\n\n    for ((i = 0; i < n; i++)); do\n        dp[i]=$((2**31-1))\n    done\n    dp[0]=0\n\n    for ((i = 1; i < n; i++)); do\n        for ((j = 0; j < i; j++)); do\n            if ((arr[j] >= i-j)); then\n                dp[i]=$((dp[i] < dp[j] + 1 ? dp[i] : dp[j] + 1))\n            fi\n        done\n    done\n    echo ${dp[n-1]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp1aoshovv.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpwg1a2g0u.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpwg1a2g0u.sh: line 18: [: -eq: unary operator expected\\n/tmp/tmpwg1a2g0u.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n\n    while (( i < n ))\n    do\n        if (( arr[i+2] == 0 ))\n        then\n            jumps=$(( jumps+1 ))\n            i=$(( i+2 ))\n        else\n            jumps=$(( jumps+1 ))\n            i=$(( i+1 ))\n        fi\n    done\n\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpu73dhu30.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    local IFS=$'\\n'\n    local -a arr=($1)\n    local -i n=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i d=$2\n    local -i min=0\n    local -i max=0\n    local -i sum=0\n    local -i count=0\n    local -i temp=0\n    local -i temp1=0\n    local -i temp2=0\n    local -i temp3=0\n    local -i temp4=0\n    local -i temp5=0\n    local -i temp6=0\n    local -i temp7=0\n    local -i temp8=0\n    local -i temp9=0\n    local -i temp10=0\n    local -i temp11=0\n    local -i temp12=0\n    local -i temp13=0\n    local -i temp14=0\n    local -i temp15=0\n    local -i temp16=0\n    local -i temp17=0\n    local -i temp18=0\n    local -i temp19=0\n    local -i temp20=0\n    local -i temp21=0\n    local -i temp22=0\n    local -i temp23=0\n    local -i temp24=0\n    local -i temp25=0\n    local -i temp26=0\n    local -i temp27=0\n    local -i temp28=0\n    local -i temp29=0\n    local -i temp30=0\n    local -i temp31=0\n    local -i temp32=0\n    local -i temp33=0\n    local -i temp34=0\n    local -i temp35=0\n    local -i temp36=0\n    local -i temp37=0\n    local -i temp38=0\n    local -i temp39=0\n    local -i temp40=0\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            i=$((i+arr[i]))\n            jumps=$((jumps+1))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "<_io.BufferedReader name=17>",
      "stderr": "<_io.BufferedReader name=21>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local d=$3\n    local i=0\n    local j=0\n    local jumps=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        if [ $flag -eq 1 ]\n        then\n            break\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Invalid\"\n            break\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            flag=1\n            break\n        fi\n        j=$((i+1))\n        while [ $j -le $((i+arr[$i])) ]\n        do\n            if [ $((arr[$j]+j)) -gt $((arr[$i]+i)) ]\n            then\n                i=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo $jumps\n    fi\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "<_io.BufferedReader name=19>",
      "stderr": "<_io.BufferedReader name=25>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a list=($1)\n    local len=${#list[@]}\n    local target=$2\n    local jumps=0\n    local i=0\n    local j=0\n    local k=0\n    local max_reach=0\n    local steps=0\n\n    while [ $i -lt $len ]; do\n        max_reach=$((i + list[i]))\n        if [ $max_reach -ge $target ]; then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach + 1))\n        for ((j=i+1; j<steps; j++)); do\n            if [ $((j + list[j])) -gt $max_reach ]; then\n                max_reach=$((j + list[j]))\n                k=$j\n            fi\n        done\n        i=$k\n        jumps=$((jumps + 1))\n    done\n\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "<_io.BufferedReader name=24>",
      "stderr": "<_io.BufferedReader name=28>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local max_reach=$i\n        local steps=$((arr[$i]))\n        local j=$((i+1))\n        while [ $j -le $((i+steps)) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[$j])) -gt $((max_reach+arr[$max_reach])) ]\n            then\n                max_reach=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$max_reach\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n _array=$1\n  local _n=$2\n  local _i _j _k _l _m _n _o _p _q _r _s _t _u _v _w _x _y _z\n  local _max_jumps=0\n  local _max_jumps_i=0\n  local _max_jumps_j=0\n  local _max_jumps_k=0\n  local _max_jumps_l=0\n  local _max_jumps_m=0\n  local _max_jumps_n=0\n  local _max_jumps_o=0\n  local _max_jumps_p=0\n  local _max_jumps_q=0\n  local _max_jumps_r=0\n  local _max_jumps_s=0\n  local _max_jumps_t=0\n  local _max_jumps_u=0\n  local _max_jumps_v=0\n  local _max_jumps_w=0\n  local _max_jumps_x=0\n  local _max_jumps_y=0\n  local _max_jumps_z=0\n  local _jumps=0\n  local _jumps_i=0\n  local _jumps_j=0\n  local _jumps_k=0\n  local _jumps_l=0\n  local _jumps_m=0\n  local _jumps_n=0\n  local _jumps_o=0\n  local _jumps_p=0\n  local _jumps_q=0\n  local _jumps_r=0\n  local _jumps_s=0\n  local _jumps_t=0\n  local _jumps_u=0\n  local _jumps_v=0\n  local _jumps_w=0\n  local _jumps_x=0\n  local _jumps_y=0\n  local _jumps_z=0\n  for ((_i=0; _i<_n; _i++)) do\n    for ((_j=0; _j<_n; _j++)) do\n      for\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8sga33yp.sh: line 50: syntax error near unexpected token `newline'\\n/tmp/tmp8sga33yp.sh: line 50: `      for'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local len=${#arr[@]}\n    local i=0\n    local jumps=0\n    local curr_pos=0\n    local next_pos=0\n    while [ $curr_pos -lt $2 ]; do\n        next_pos=$curr_pos\n        for ((i=1; i<=arr[curr_pos]; i++)); do\n            if [ $((curr_pos+i)) -eq $2 ]; then\n                jumps=$((jumps+1))\n                return\n            fi\n            if [ $((curr_pos+i)) -gt $next_pos ] && [ $((curr_pos+i)) -le $2 ]; then\n                next_pos=$((curr_pos+i))\n            fi\n        done\n        curr_pos=$next_pos\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "<_io.BufferedReader name=5>",
      "stderr": "<_io.BufferedReader name=8>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            i=$((i+arr[i]))\n            jumps=$((jumps+1))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "<_io.BufferedReader name=17>",
      "stderr": "<_io.BufferedReader name=21>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    while ((i < n))\n    do\n        max_reach=$((i + arr[i]))\n        if ((max_reach >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach))\n        for ((j = i + 1; j <= max_reach; j++))\n        do\n            if ((j + arr[j] > steps))\n            then\n                steps=$((j + arr[j]))\n                i=$((j))\n            fi\n        done\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "<_io.BufferedReader name=9>",
      "stderr": "<_io.BufferedReader name=12>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Invalid\"\n            return\n        fi\n        if [[ $i -eq $((n - 1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i + arr[$i]))\n        local steps=$arr[$i]\n        local j=$((i + 1))\n        while [[ $j -lt $((i + arr[$i])) ]]; do\n            if [[ $((j + arr[$j])) -gt $max_reach ]]; then\n                max_reach=$((j + arr[$j]))\n                steps=$((j - i))\n            fi\n            j=$((j + 1))\n        done\n        jumps=$((jumps + 1))\n        i=$((i + steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpex50yt9j.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local steps=0\n    local maxReach=0\n    local currReach=0\n    while [ $i -lt $n ]\n    do\n        maxReach=$i+${arr[$i]}\n        if [ $maxReach -gt $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        steps=$((maxReach+1))\n        while [ $steps -le $((n-1)) ]\n        do\n            if [ $steps -gt $currReach ]\n            then\n                currReach=$steps\n            fi\n            steps=$((steps+1))\n        done\n        jumps=$((jumps+1))\n        i=$((currReach+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=14>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return 0\n        fi\n        j=$((i+arr[i]))\n        if [ $j -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            return 0\n        fi\n        if [ $j -gt $((n-1)) ]\n        then\n            return 1\n        fi\n        i=$j\n        jumps=$((jumps+1))\n    done\n    return 1\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "<_io.BufferedReader name=13>",
      "stderr": "<_io.BufferedReader name=16>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        if [[ $max_reach -ge $((n-1)) ]]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local j=$((i+1))\n        while [[ $j -le $((i+arr[i])) ]]; do\n            if [[ $((j+arr[j])) -gt $max_reach ]]; then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpxi719io1.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        if [[ $i -eq $((n-2)) ]]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        if [[ ${arr[$i]} -eq 1 ]]; then\n            i=$((i+1))\n        else\n            i=$((i+2))\n        fi\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpmmg33fen.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local len=$2\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    local n=${#arr[@]}\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        steps=$arr[i]\n        while [ $steps -gt 0 ]\n        do\n            if [ $((i+steps)) -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                break 2\n            fi\n            if [ $((i+steps+arr[i+steps])) -gt $max_reach ]\n            then\n                max_reach=$((i+steps+arr[i+steps]))\n            fi\n            steps=$((steps-1))\n        done\n        i=$((i+1))\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp5f5swk9u.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpwg1a2g0u.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpwg1a2g0u.sh: line 18: [: -eq: unary operator expected\\n/tmp/tmpwg1a2g0u.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n-1 ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for (( j=i+1; j<=i+arr[i]; j++ ))\n        do\n            if (( arr[j] + j > max ))\n            then\n                max=$(( arr[j] + j ))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$(( jumps + 1 ))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpxfz__dsv.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Invalid input\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]; then\n      echo $jumps\n      return\n    fi\n    if [ $i -eq $((n-2)) ]; then\n      jumps=$((jumps+1))\n      echo $jumps\n      return\n    fi\n    local max_reach=$((i+arr[i]))\n    local steps=$arr[i]\n    local j=$((i+1))\n    while [ $j -lt $((i+arr[i])) ]; do\n      if [ $((j+arr[j])) -gt $max_reach ]; then\n        max_reach=$((j+arr[j]))\n        steps=$((j-i))\n      fi\n      j=$((j+1))\n    done\n    jumps=$((jumps+1))\n    i=$((i+steps))\n  done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp38_ii9bo.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmp38_ii9bo.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmp38_ii9bo.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i j=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n\n    while i < n-1\n    do\n        max_reach=arr[i]+i\n        if i+arr[i] >= n-1\n        then\n            jumps=1\n            break\n        fi\n        j=$i+1\n        while j <= i+arr[i]\n        do\n            if j+arr[j] > max_reach\n            then\n                max_reach=j+arr[j]\n                steps=$j\n            fi\n            ((j++))\n        done\n        ((i=steps))\n        ((jumps++))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpl3oxg8oo.sh: line 7: local: `3 4': invalid variable name for name reference\\n/tmp/tmpl3oxg8oo.sh: line 15: n-1: No such file or directory\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]\n    then\n      echo $jumps\n      return\n    fi\n    local max_reach=$((i+arr[i]))\n    local steps=$arr[i]\n    local j=$((i+1))\n    while [ $j -le $max_reach ]\n    do\n      if [ $((j+arr[j])) -gt $max_reach ]\n      then\n        max_reach=$((j+arr[j]))\n        steps=$((j-i))\n      fi\n      j=$((j+1))\n    done\n    jumps=$((jumps+1))\n    i=$((i+steps))\n  done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpm4_n47qb.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpm4_n47qb.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmpm4_n47qb.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a list=($1)\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${list[$i]} -eq 0 ]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            echo $((jumps+1))\n            return\n        fi\n        if [ $i -eq $((n-3)) ]; then\n            echo $((jumps+1))\n            return\n        fi\n        if [ $((i+list[i])) -gt $((n-2)) ]; then\n            jumps=$((jumps+1))\n            i=$((n-1))\n        else\n            local -i max=0\n            local -i max_index=$i\n            for ((j=1; j<=${list[$i]}; j++)); do\n                if [ $((list[$i+j]+j)) -gt $max ]; then\n                    max=$((list[$i+j]+j))\n                    max_index=$((i+j))\n                fi\n            done\n            jumps=$((jumps+1))\n            i=$max_index\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "<_io.BufferedReader name=20>",
      "stderr": "<_io.BufferedReader name=23>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_i=0\n        for ((j=1; j<=${arr[$i]}; j++)); do\n            if [[ $((i+j)) -eq $((n-1)) ]]; then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [[ $((i+j+arr[i+j])) -gt $max ]]; then\n                max=$((i+j+arr[i+j]))\n                max_i=$((i+j))\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_i\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmppfe6jdfw.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [[ $i -lt $n ]]; do\n    if [[ ${arr[$i]} -eq 0 ]]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [[ $i -eq $((n - 1)) ]]; then\n      ((jumps++))\n      break\n    fi\n    local max=0\n    local max_index=0\n    for ((j = i + 1; j <= i + ${arr[$i]} && j < n; j++)); do\n      if [[ $((j + arr[$j])) -gt $max ]]; then\n        max=$((j + arr[$j]))\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    ((jumps++))\n  done\n  echo \"Minimum number of jumps to reach the end is $jumps\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9ft71ckz.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n\n    while i < n-1\n    do\n        if [ $((i+arr[i])) -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n\n        local -i max_reach=0\n        local -i steps=0\n        local -i j=i+1\n\n        while [ $j -le $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkz7ypyny.sh: line 7: local: `3 4': invalid variable name for name reference\\n/tmp/tmpkz7ypyny.sh: line 12: n-1: No such file or directory\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local d=$3\n    local jumps=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n   \n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmptuvflf_m.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Not possible to reach the end\"\n            return\n        fi\n        if [ $((i+arr[i])) -ge $((n-1)) ]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j=i+1; j<=i+arr[i]; j++)); do\n            if [ $((arr[j]+j)) -gt $max ]; then\n                max=$((arr[j]+j))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191154,
      "stdout": "<_io.BufferedReader name=7>",
      "stderr": "<_io.BufferedReader name=15>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Invalid input\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        if [[ $i -eq $((n-2)) ]]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        if [[ ${arr[$i+2]} -eq 0 ]]; then\n            i=$((i+1))\n        else\n            i=$((i+2))\n        fi\n        jumps=$((jumps+1))\n    done\n\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpijsof7z4.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        i=$((i+steps))\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2uyvx9y4.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmp2uyvx9y4.sh: line 18: [: -eq: unary operator expected\\n/tmp/tmp2uyvx9y4.sh: line 35: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n _arr=$1\n  local _n=$2\n  local _i _j _k _l _m _n _o _p _q _r _s _t _u _v _w _x _y _z\n  local _jumps=0\n  local _x=0 _y=0\n  local _x_dir=1 _y_dir=1\n  local _x_dir_change=0 _y_dir_change=0\n  local _x_dir_change_count=0 _y_dir_change_count=0\n  local _x_dir_change_count_max=0 _y_dir_change_count_max=0\n  local _x_dir_change_count_max_index=0 _y_dir_change_count_max_index=0\n  local _x_dir_change_count_max_value=0 _y_dir_change_count_max_value=0\n  local _x_dir_change_count_max_value_index=0 _y_dir_change_count_max_value_index=0\n  local _x_dir_change_count_max_value_index_prev=0 _y_dir_change_count_max_value_index_prev=0\n  local _x_dir_change_count_max_value_index_prev_prev=0 _y_dir_change_count_max_value_index_prev_prev=0\n  local _x_dir_change_count_max_value_index_prev_prev_prev=0 _y_dir_change_count_max_value_index_prev_prev_prev=0\n  local _x_dir_change_count_max_value_index_prev_prev_prev_prev=0 _y_dir_change_count_max_value_index_prev_prev_prev_prev=0\n  local _x_dir_change_count_max_value_index_prev_prev_prev_prev_prev=0 _y_dir_change_count_max_value_index_prev_prev_prev_prev_prev=0\n  local _x_dir_change_count_max_value_index_prev_prev_\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpabif0waj.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    IFS=' ' read -r -a array <<< \"$1\"\n    n=${#array[@]}\n    jumps=0\n    for (( i=0; i<n; i++ )); do\n        if [[ ${array[i]} -gt $2 ]]; then\n            jumps=$(( jumps + 1 ))\n            i=$(( i + $2 - 1 ))\n        fi\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $((i + arr[i])) -ge $((n - 1)) ]; then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local max=0\n    local max_index=0\n    for ((j = i + 1; j <= i + arr[i]; j++)); do\n      if [ $((arr[j] + j)) -gt $max ]; then\n        max=$((arr[j] + j))\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps + 1))\n  done\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "<_io.BufferedReader name=18>",
      "stderr": "<_io.BufferedReader name=21>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        for ((j=$((i+1)); j<=$((i+arr[i])); j++))\n        do\n            if [ $j -ge $n ]\n            then\n                break\n            fi\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "<_io.BufferedReader name=22>",
      "stderr": "<_io.BufferedReader name=25>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n\t# Write your code here\n\t# Use echo to print to stdout\n\t# Use return to return a value\n\tlocal arr=($1)\n\tlocal n=${#arr[@]}\n\tlocal jumps=0\n\tlocal i=0\n\tlocal maxReach=0\n\tlocal steps=0\n\twhile [ $i -lt $n ]\n\tdo\n\t\tmaxReach=$((i+arr[i]))\n\t\tif [ $maxReach -gt $((n-1)) ]\n\t\tthen\n\t\t\tjumps=$((jumps+1))\n\t\t\tbreak\n\t\tfi\n\t\tsteps=$((maxReach+1))\n\t\tfor (( j=$i+1; j<=$steps; j++ ))\n\t\tdo\n\t\t\tif [ $((j+arr[j])) -gt $maxReach ]\n\t\t\tthen\n\t\t\t\tmaxReach=$((j+arr[j]))\n\t\t\t\tpos=$j\n\t\t\tfi\n\t\tdone\n\t\ti=$pos\n\t\tjumps=$((jumps+1))\n\tdone\n\techo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            i=$((i+arr[i]))\n            ((jumps++))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "<_io.BufferedReader name=8>",
      "stderr": "<_io.BufferedReader name=24>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_reach=0\n        local steps=arr[i]\n        while ((steps > 0))\n        do\n            if ((i + steps + arr[i + steps] > max_reach))\n            then\n                max_reach=$((i + steps + arr[i + steps]))\n            fi\n            steps=$((steps - 1))\n        done\n        i=$((i + steps))\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp2x8iq_zd.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    local min_jumps=0\n    local min_jumps_index=0\n    local temp_jumps=0\n    local temp_jumps_index=0\n    local temp_jumps_index_2=0\n    local temp_jumps_index_3=0\n    local temp_jumps_index_4=0\n    local temp_jumps_index_5=0\n    local temp_jumps_index_6=0\n    local temp_jumps_index_7=0\n    local temp_jumps_index_8=0\n    local temp_jumps_index_9=0\n    local temp_jumps_index_10=0\n    local temp_jumps_index_11=0\n    local temp_jumps_index_12=0\n    local temp_jumps_index_13=0\n    local temp_jumps_index_14=0\n    local temp_jumps_index_15=0\n    local temp_jumps_index_16=0\n    local temp_jumps_index_17=0\n    local temp_jumps_index_18=0\n    local temp_jumps_index_19=0\n    local temp_jumps_index_20=0\n    local temp_jumps_index_21=0\n    local temp_jumps_index_22=0\n    local temp_jumps_index_23=0\n    local temp_jumps_index_24=0\n    local temp_jumps_index_25=0\n    local temp_jumps_index_26=0\n    local temp_jumps_index_27=0\n    local temp_jumps_index_28=0\n    local temp_jumps_index_29=0\n    local temp_jumps_index_30=0\n    local temp_jumps_index_31=0\n    local temp_jumps_index_32=0\n    local temp_jumps_index_33=0\n    local temp_jumps_index_34=0\n    local temp_jumps_index_35\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkd9zyexb.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] + i >= n-1))\n        then\n            ((jumps++))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j=i+1; j<=arr[i]+i; j++))\n        do\n            if ((arr[j] + j > max))\n            then\n                max=$((arr[j] + j))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        ((jumps++))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "<_io.BufferedReader name=19>",
      "stderr": "<_io.BufferedReader name=27>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i\n  local j\n  local jump\n  local min_jump\n  local min_jump_index\n  local min_jump_value\n  local min_jump_value_index\n  local min_jump_value_index_value\n  local min_jump_value_index_value_index\n  local min_jump_value_index_value_index_value\n  local min_jump_value_index_value_index_value_index\n  local min_jump_value_index_value_index_value_index_value\n  local min_jump_value_index_value_index_value_index_value_index\n  local min_jump_value_index_value_index_value_index_value_index_value\n  local min_jump_value_index_value_index_value_index_value_index_value_index\n  local min_jump_value_index_value_index_value_index_value_index_value_index_value\n  local min_jump_value_index_value_index_value_index_value_index_value_index_value_index\n  local min_jump_value_index_value_index_value_index_value_index_value_index_value_index_value\n  local min_jump_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n  local min_jump_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n  local min_jump_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n  local min_jump_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n  local min_jump_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n  local min_jump_value_index_value_index_value_index_value_index\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191154,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmptdylcfxf.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local step=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        step=$((i+arr[i]))\n        if [ $step -gt $((n-1)) ]\n        then\n            step=$((n-1))\n        fi\n        max=${arr[$i]}\n        for (( j=$i+1; j<=$step; j++ ))\n        do\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                i=$j\n            fi\n        done\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191154,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local d=$3\n  local i=0\n  local j=0\n  local jumps=0\n  local min_jumps=0\n  local min_jumps_index=0\n  local min_jumps_value=0\n  local min_jumps_index_value=0\n  local min_jumps_index_value_prev=0\n  local min_jumps_index_value_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local min_jumps_index_value_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191154,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkbk7tk0e.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Infinite\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max=${arr[$i]}\n        local j=$((i+1))\n        local max_index=$i\n        while [ $j -lt $((i+arr[$i]+1)) ] && [ $j -lt $n ]; do\n            if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$max_index\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191159,
      "stdout": "<_io.BufferedReader name=6>",
      "stderr": "<_io.BufferedReader name=28>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while ((i < n))\n  do\n    if ((arr[i]+i >= n-1))\n    then\n      ((jumps++))\n      break\n    fi\n    local max=0\n    local max_i=0\n    for ((j=i+1; j<=arr[i]+i; j++))\n    do\n      if ((arr[j]+j > max))\n      then\n        max=arr[j]\n        max_i=$j\n      fi\n    done\n    ((jumps++))\n    i=$max_i\n  done\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191163,
      "stdout": "<_io.BufferedReader name=29>",
      "stderr": "<_io.BufferedReader name=31>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Infinite\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_i=0\n        for ((j=i+1; j<=i+${arr[$i]} && j<n; j++)); do\n            if [[ ${arr[$j]} -gt $max ]]; then\n                max=${arr[$j]}\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpvjqn3sjr.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local d=$3\n    local jumps=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n   \n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmptuvflf_m.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            local max_reach=0\n            local max_reach_index=0\n            for ((j=$((i+1)); j<=$((i+arr[i])); j++))\n            do\n                if [ $((j+arr[j])) -gt $max_reach ]\n                then\n                    max_reach=$((j+arr[j]))\n                    max_reach_index=$j\n                fi\n            done\n            i=$max_reach_index\n            jumps=$((jumps+1))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191163,
      "stdout": "<_io.BufferedReader name=9>",
      "stderr": "<_io.BufferedReader name=12>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo $1\n    echo $2\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local d=$3\n  local i=0\n  local jumps=0\n  local maxReach=0\n  local steps=0\n\n  while [[ $i -lt $n ]]; do\n    maxReach=$((i + arr[i]))\n    steps=$((arr[i]))\n    if [[ $maxReach -ge $n ]]; then\n      jumps=$((jumps + 1))\n      break\n    fi\n    while [[ $steps -gt 0 ]]; do\n      if [[ $((i + steps)) -eq $d ]]; then\n        jumps=$((jumps + 1))\n        break\n      fi\n      steps=$((steps - 1))\n    done\n    i=$((i + 1))\n  done\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpj_haavxy.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i j\n    local -a dp\n    for ((i=0; i<n; i++)); do\n        dp[i]=$((2**31-1))\n    done\n    dp[0]=0\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j]+j>=i)); then\n                if ((dp[i]>dp[j]+1)); then\n                    dp[i]=$((dp[j]+1))\n                fi\n            fi\n        done\n    done\n    echo ${dp[n-1]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp6x69e620.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n\tlocal -n arr=$1\n\tlocal n=$2\n\tlocal i=0\n\tlocal j=0\n\tlocal jumps=0\n\tlocal max_reach=0\n\tlocal steps=0\n\n\twhile [ $i -lt $n ]\n\tdo\n\t\tmax_reach=$((i+arr[i]))\n\t\tif [ $max_reach -ge $((n-1)) ]\n\t\tthen\n\t\t\tjumps=$((jumps+1))\n\t\t\tbreak\n\t\tfi\n\t\tsteps=$arr[i]\n\t\tfor (( j=i+1; j<=max_reach; j++ ))\n\t\tdo\n\t\t\tif [ $((j+arr[j])) -gt $steps ]\n\t\t\tthen\n\t\t\t\tsteps=$((j+arr[j]))\n\t\t\t\ti=$j\n\t\t\tfi\n\t\tdone\n\t\tjumps=$((jumps+1))\n\tdone\n\techo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191163,
      "stdout": "<_io.BufferedReader name=13>",
      "stderr": "<_io.BufferedReader name=15>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local -i i j k\n  local -i jumps=0\n  local -i max_reach=0\n  local -i steps=0\n  local -i jumps_arr=()\n  local -i steps_arr=()\n\n  for ((i=0; i<n; i++)); do\n    jumps_arr[i]=0\n    steps_arr[i]=0\n  done\n\n  for ((i=0; i<n; i++)); do\n    if ((i > max_reach)); then\n      jumps+=1\n      steps=steps_arr[i-1]\n      max_reach=jumps_arr[i-1]\n    fi\n    jumps_arr[i]=jumps\n    steps_arr[i]=steps\n    max_reach=max_reach+arr[i]\n  done\n\n  echo \"${jumps_arr[*]}\"\n  echo \"${steps_arr[*]}\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191159,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpjh7orx86.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n _list=$1\n    local _len=$2\n    local _jumps=0\n    local _i=0\n    local _curr=0\n    local _next=0\n    local _max=0\n    local _max_i=0\n    while [ $_i -lt $_len ]; do\n        if [ $_curr -ge $_len ]; then\n            echo $_jumps\n            return\n        fi\n        _next=$((_curr + _list[$_i]))\n        if [ $_next -gt $_max ]; then\n            _max=$_next\n            _max_i=$_i\n        fi\n        if [ $_i -eq $_curr ]; then\n            _jumps=$((_jumps + 1))\n            _curr=$_max\n            _i=$_max_i\n        fi\n        _i=$((_i + 1))\n    done\n    echo $_jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191159,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpfs_0o7yw.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [[ $i -lt $n ]]; do\n    if [[ ${arr[$i]} -eq 0 ]]; then\n      echo \"Invalid Input\"\n      return\n    fi\n    if [[ $i -eq $((n - 1)) ]]; then\n      echo $jumps\n      return\n    fi\n    if [[ $i -eq $((n - 2)) ]]; then\n      jumps=$((jumps + 1))\n      echo $jumps\n      return\n    fi\n    local max_reach=$((i + arr[$i]))\n    local steps=$arr[$i]\n    local j=$((i + 1))\n    while [[ $j -lt $((i + arr[$i])) ]]; do\n      if [[ $((j + arr[$j])) -gt $max_reach ]]; then\n        max_reach=$((j + arr[$j]))\n        steps=$((j - i))\n      fi\n      j=$((j + 1))\n    done\n    jumps=$((jumps + 1))\n    i=$((i + steps))\n  done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191159,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp92xkd8gc.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  # Write your code here\n  # Use echo to print to stdout\n  local -n arr=$1\n  local n=$2\n  local d=$3\n  local i=0\n  local j=0\n  local count=0\n  local flag=0\n  local temp=0\n  local max=0\n  local max_index=0\n  local jumps=0\n  local jumps_arr=()\n  local jumps_arr_index=0\n  local jumps_arr_count=0\n  local jumps_arr_flag=0\n  local jumps_arr_max=0\n  local jumps_arr_max_index=0\n  local jumps_arr_temp=0\n  local jumps_arr_jumps=0\n  local jumps_arr_jumps_arr=()\n  local jumps_arr_jumps_arr_index=0\n  local jumps_arr_jumps_arr_count=0\n  local jumps_arr_jumps_arr_flag=0\n  local jumps_arr_jumps_arr_max=0\n  local jumps_arr_jumps_arr_max_index=0\n  local jumps_arr_jumps_arr_temp=0\n  local jumps_arr_jumps_arr_jumps=0\n  local jumps_arr_jumps_arr_jumps_arr=()\n  local jumps_arr_jumps_arr_jumps_arr_index=0\n  local jumps_arr_jumps_arr_jumps_arr_count=0\n  local jumps_arr_jumps_arr_jumps_arr_flag=0\n  local jumps_arr_jumps_arr_jumps_arr_max=0\n  local jumps_arr_jumps_arr_jumps_arr_max_index=0\n  local jumps_arr_jumps_arr_jumps_arr_temp=0\n  local jumps_arr_jumps_arr_jumps_arr_jumps=0\n  local jumps_arr_jumps_arr_jumps_arr_jumps_arr=()\n  local jumps_arr_jumps_arr_jumps_arr_jumps_arr_index=0\n  local jumps_arr_jumps_arr_jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191159,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp4sz9if8u.sh: line 9: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        if [ $((i+arr[$i])) -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            return\n        fi\n        local max=0\n        local max_index=0\n        for (( j=i+1; j<=i+arr[$i]; j++ ))\n        do\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "<_io.BufferedReader name=4>",
      "stderr": "<_io.BufferedReader name=16>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local d=$2\n  local n=${#arr[@]}\n  local jumps=0\n  local i=0\n  local curr_pos=0\n  local max_pos=0\n  local max_pos_index=0\n  while ((curr_pos < d))\n  do\n    while ((i < n && i <= curr_pos))\n    do\n      if ((curr_pos + arr[i] > max_pos))\n      then\n        max_pos=${arr[i]}\n        max_pos_index=$i\n      fi\n      ((i++))\n    done\n    ((curr_pos = max_pos))\n    ((max_pos = 0))\n    ((max_pos_index = 0))\n    ((i = max_pos_index))\n    ((jumps++))\n  done\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "<_io.BufferedReader name=17>",
      "stderr": "<_io.BufferedReader name=20>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n list=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $((i+list[i])) -gt $((n-1)) ]; then\n            ((jumps++))\n            ((i++))\n        else\n            local max=0\n            local max_index=0\n            for ((j=1; j<=list[i]; j++)); do\n                if [ $((i+j+list[i+j])) -gt $max ]; then\n                    max=$((i+j+list[i+j]))\n                    max_index=$((i+j))\n                fi\n            done\n            ((jumps++))\n            i=$max_index\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191168,
      "stdout": "<_io.BufferedReader name=14>",
      "stderr": "<_io.BufferedReader name=21>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            local max=0\n            local max_index=0\n            for j in $(seq $((i+1)) $((i+arr[i])))\n            do\n                if [ $((arr[j]+j)) -gt $max ]\n                then\n                    max=$((arr[j]+j))\n                    max_index=$j\n                fi\n            done\n            i=$max_index\n            ((jumps++))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191168,
      "stdout": "<_io.BufferedReader name=18>",
      "stderr": "<_io.BufferedReader name=23>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jump=0\n    local i=0\n    local curr_max=0\n    local next_max=0\n    local jumps=0\n\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n\n        while [ $i -le $curr_max ]\n        do\n            next_max=$((next_max > i+arr[i] ? next_max : i+arr[i]))\n            i=$((i+1))\n        done\n\n        curr_max=$next_max\n        jumps=$((jumps+1))\n    done\n\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191163,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local target=$2\n    local jumps=0\n    local i=0\n    local maxReach=0\n    local steps=0\n    while ((i < n))\n    do\n        maxReach=$((i + arr[i]))\n        if ((maxReach >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((maxReach + 1))\n        for ((j = i + 1; j <= maxReach; j++))\n        do\n            if ((j + arr[j] > steps))\n            then\n                steps=$((j + arr[j]))\n                jumps=$((jumps + 1))\n            fi\n        done\n        i=$((steps))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n _list=$1\n  local _n=$2\n  local _i=0\n  local _j=0\n  local _jump=0\n  local _min=0\n  local _max=0\n  local _temp=0\n  local _flag=0\n  local _result=0\n  for ((_i=0; _i<_n; _i++))\n  do\n    _jump=${_list[$_i]}\n    if [[ $_jump -eq 0 ]]\n    then\n      echo \"Invalid input\"\n      return\n    fi\n    if [[ $_i -eq 0 ]]\n    then\n      _min=$_jump\n      _max=$_jump\n    else\n      if [[ $_jump -gt $_max ]]\n      then\n        _max=$_jump\n      fi\n      if [[ $_jump -lt $_min ]]\n      then\n        _min=$_jump\n      fi\n    fi\n  done\n  if [[ $_min -eq 1 ]]\n  then\n    echo \"1\"\n    return\n  fi\n  for ((_i=1; _i<=_max; _i++))\n  do\n    _flag=0\n    for ((_j=0; _j<_n; _j++))\n    do\n      _jump=${_list[$_j]}\n      if [[ $_jump -gt $_i ]]\n      then\n        _temp=$((_jump%_i))\n        if [[ $_temp -eq 0 ]]\n        then\n          _flag=1\n        else\n          _flag=0\n          break\n        fi\n      fi\n    done\n    if [[ $_flag -eq 1 ]]\n    then\n      _result=$_i\n      break\n    fi\n  done\n  echo \"$_result\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmps6lqksrh.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Infinite\"\n            return\n        fi\n        if ((i + arr[i] >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpgvxffc1d.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            echo \"$jumps\"\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        local j=$((i+1))\n        while [ $j -le $max_reach ]\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                echo \"$((jumps+1))\"\n                return\n            fi\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n            j=$((j+1))\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191168,
      "stdout": "<_io.BufferedReader name=25>",
      "stderr": "<_io.BufferedReader name=30>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpwg1a2g0u.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpwg1a2g0u.sh: line 18: [: -eq: unary operator expected\\n/tmp/tmpwg1a2g0u.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i+2] == 0 ))\n        then\n            (( i += 2 ))\n        else\n            (( i += 1 ))\n        fi\n        (( jumps += 1 ))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpo_ftnj_e.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n    local -i jump=0\n\n    while i < n-1\n    do\n        max_reach=$((i + arr[i]))\n        if max_reach >= n-1\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        jump=0\n        for ((steps=i+1; steps <= max_reach; steps++))\n        do\n            if ((steps + arr[steps] > jump + arr[jump]))\n            then\n                jump=$steps\n            fi\n        done\n        i=$jump\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpooaii7k_.sh: line 7: local: `3 4': invalid variable name for name reference\\n/tmp/tmpooaii7k_.sh: line 15: n-1: No such file or directory\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n\tlocal -n arr=$1\n\tlocal n=$2\n\tlocal -a dp\n\tdp[0]=0\n\tfor ((i=1; i<n; i++)); do\n\t\tdp[i]=1000\n\t\tfor ((j=0; j<i; j++)); do\n\t\t\tif ((arr[j]+j>=i)); then\n\t\t\t\tdp[i]=$((dp[j]+1))\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tdone\n\techo ${dp[n-1]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpboav0r_1.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Not possible\"\n            return\n        fi\n        if [[ $i -eq $((n - 1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j = 1; j <= ${arr[$i]}; j++)); do\n            if [[ $((i + j)) -eq $((n - 1)) ]]; then\n                jumps=$((jumps + 1))\n                echo $jumps\n                return\n            fi\n            if [[ $((i + j + arr[i + j])) -gt $max ]]; then\n                max=$((i + j + arr[i + j]))\n                max_index=$((i + j))\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191164,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp21_7ct6c.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        j=$((i+arr[i]))\n        if [ $j -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            return\n        fi\n        if [ $j -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            continue\n        fi\n        jumps=$((jumps+1))\n        i=$j\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191169,
      "stdout": "<_io.BufferedReader name=6>",
      "stderr": "<_io.BufferedReader name=12>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((i + arr[i] >= n-1))\n        then\n            ((jumps++))\n            break\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if ((j + arr[j] > max_reach))\n            then\n                max_reach=$((j + arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        ((jumps++))\n        i=$max_reach_index\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191169,
      "stdout": "<_io.BufferedReader name=5>",
      "stderr": "<_io.BufferedReader name=13>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -a dp\n    for ((i=0; i<n; i++)); do\n        dp[i]=$((i+1))\n    done\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] >= i-j)); then\n                dp[i]=$((dp[i]<dp[j]+1?dp[i]:dp[j]+1))\n            fi\n        done\n    done\n    echo ${dp[n-1]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191168,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpza9iena8.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local d=$3\n  local i=0\n  local j=0\n  local k=0\n  local min=0\n  local jumps=0\n  local dp=()\n\n  for ((i=0; i<n; i++)); do\n    dp[$i]=0\n  done\n\n  for ((i=1; i<n; i++)); do\n    min=9999\n    for ((j=0; j<i; j++)); do\n      if [[ ${arr[$j]} -ge $((i-j)) ]]; then\n        jumps=$((dp[$j]+1))\n        if [[ $jumps -lt $min ]]; then\n          min=$jumps\n        fi\n      fi\n    done\n    dp[$i]=$min\n  done\n\n  echo ${dp[$((n-1))]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191168,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpe0r5mkkv.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -a dp\n    dp[0]=0\n    for ((i=1; i<=n; i++)); do\n        dp[i]=$((2**32-1))\n        for ((j=0; j<i; j++)); do\n            if [[ ${arr[j]} -ge $((i-j)) && dp[j] -ne $((2**32-1)) ]]; then\n                dp[i]=$((dp[j]+1))\n                break\n            fi\n        done\n    done\n    echo ${dp[n]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191168,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpjkzxa46h.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -a arr=($1)\n  local -i n=${#arr[@]}\n  local -i i=0\n  local -i jumps=0\n  local -i step=0\n  while [ $i -lt $n ]\n  do\n    if [ $i -eq $((n-1)) ]\n    then\n      echo $jumps\n      return\n    fi\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo -1\n      return\n    fi\n    step=$((i+arr[i]))\n    if [ $step -gt $((n-1)) ]\n    then\n      step=$((n-1))\n    fi\n    local -i max=0\n    local -i j=$((i+1))\n    while [ $j -le $step ]\n    do\n      if [ ${arr[$j]} -gt $max ]\n      then\n        max=${arr[$j]}\n        i=$j\n      fi\n      j=$((j+1))\n    done\n    jumps=$((jumps+1))\n  done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191168,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i + arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            i=$((i + arr[i]))\n            ((jumps++))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191173,
      "stdout": "<_io.BufferedReader name=11>",
      "stderr": "<_io.BufferedReader name=19>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_reach=i\n        local max_reach_index=i\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max_reach))\n            then\n                max_reach=$((j + arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191168,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpwyrbaym5.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $((i + arr[i])) -ge $((n - 1)) ]\n    then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local max=0\n    local max_index=0\n    for (( j=i+1; j<=i+arr[i]; j++ ))\n    do\n      if [ $((j + arr[j])) -gt $max ]\n      then\n        max=$((j + arr[j]))\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps + 1))\n  done\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191173,
      "stdout": "<_io.BufferedReader name=8>",
      "stderr": "<_io.BufferedReader name=22>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    local jump_count=0\n\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i + arr[i]))\n        jump_count=$((jump_count + 1))\n        if [ $max_reach -ge $((n - 1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach + 1))\n        for (( j = i + 1; j <= max_reach; j++ ))\n        do\n            if [ $((j + arr[j])) -gt $steps ]\n            then\n                steps=$((j + arr[j]))\n                jump_count=$((jump_count + 1))\n            fi\n        done\n        i=$steps\n    done\n    echo $jump_count\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191169,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local len=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $len ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((len-1)) ]\n        then\n            return\n        fi\n        if [ $i -eq $((len-2)) ]\n        then\n            jumps=$((jumps+1))\n            return\n        fi\n        if [ ${arr[$((i+2))]} -eq 0 ]\n        then\n            i=$((i+2))\n            jumps=$((jumps+1))\n        else\n            i=$((i+1))\n            jumps=$((jumps+1))\n        fi\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191169,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9k884vat.sh: line 7: local: `3 4': invalid variable name for name reference\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 27: [: -eq: unary operator expected\\n/tmp/tmp9k884vat.sh: line 13: [: -eq: unary operator expected\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        for ((j=$((i+1)); j<=$((i+arr[i])); j++)); do\n            if [ $j -ge $n ]; then\n                break\n            fi\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "<_io.BufferedReader name=16>",
      "stderr": "<_io.BufferedReader name=26>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible to reach the end\"\n            return\n        fi\n        if (( i + arr[i] >= n ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for (( j = i + 1; j <= i + arr[i]; j++ ))\n        do\n            if (( arr[j] + j > max ))\n            then\n                max=$(( arr[j] + j ))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$(( jumps + 1 ))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191169,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmps3sd_ee5.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((arr[i]+i)) -gt $((n-1)) ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if [ $((arr[j]+j)) -gt $max ]\n            then\n                max=$((arr[j]+j))\n                max_index=$j\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "<_io.BufferedReader name=15>",
      "stderr": "<_io.BufferedReader name=34>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -a dp\n    local i j\n    for ((i=0; i<n; i++)); do\n        dp[i]=$((2**31-1))\n    done\n    dp[0]=0\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j]+j>=i)); then\n                dp[i]=$((dp[i]<dp[j]+1?dp[i]:dp[j]+1))\n            fi\n        done\n    done\n    echo ${dp[n-1]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191169,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp44l_10y3.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191169,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpqnzcldq1.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpqnzcldq1.sh: line 18: [: -eq: unary operator expected\\n/tmp/tmpqnzcldq1.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]; then\n      echo $jumps\n      return\n    fi\n    local max=0\n    local max_index=0\n    for ((j=1; j<=${arr[$i]}; j++)); do\n      if [ $((i+j)) -eq $((n-1)) ]; then\n        jumps=$((jumps+1))\n        echo $jumps\n        return\n      fi\n      if [ $((i+j+arr[i+j])) -gt $max ]; then\n        max=$((i+j+arr[i+j]))\n        max_index=$((i+j))\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps+1))\n  done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "<_io.BufferedReader name=24>",
      "stderr": "<_io.BufferedReader name=29>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Infinite\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_i=0\n        for ((j=i+1; j<=i+${arr[$i]}; j++)); do\n            if [[ $j -eq $((n-1)) ]]; then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [[ $max -lt ${arr[$j]}+$j ]]; then\n                max=${arr[$j]}+$j\n                max_i=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_i\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191173,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp69iea9bg.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Infinite\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j=i+1; j<=i+${arr[$i]}; j++)); do\n            if [[ $j -eq $((n-1)) ]]; then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [[ ${arr[$j]} -gt $max ]]; then\n                max=${arr[$j]}\n                max_index=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_index\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpmjty36b2.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local list=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ $((i+2)) -lt $n ] && [ ${list[$((i+2))]} -eq 0 ]\n        then\n            i=$((i+2))\n            jumps=$((jumps+1))\n        elif [ $((i+1)) -lt $n ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            break\n        fi\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191173,
      "stdout": "b''",
      "stderr": "b'/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmphlc2981m.sh: line 13: [: -eq: unary operator expected\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local step=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        step=$((i+arr[i]))\n        if [ $step -gt $((n-1)) ]\n        then\n            step=$((n-1))\n        fi\n        local max=${arr[$i]}\n        for ((j=$i+1; j<=$step; j++))\n        do\n            if [ ${arr[$j]} -gt $max ]\n            then\n                max=${arr[$j]}\n                i=$j\n            fi\n        done\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ] && [ $j -lt $n ]; do\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpwnhjr05v.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpwnhjr05v.sh: line 16: [: -eq: unary operator expected\\n/tmp/tmpwnhjr05v.sh: line 31: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i j=0\n    local -i jumps=0\n    local -i min_jumps=0\n    local -i min_index=0\n    local -i max_reach=0\n\n    while i < n-1\n    do\n        min_jumps=n\n        min_index=0\n        max_reach=arr[i]+i\n        for j in $(seq $i $max_reach)\n        do\n            if j == n-1\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if arr[j]+j > max_reach\n            then\n                max_reach=arr[j]+j\n            fi\n            if arr[j]+j >= n-1\n            then\n                if min_jumps > jumps+1\n                then\n                    min_jumps=$((jumps+1))\n                    min_index=$j\n                fi\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$min_index\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpgi06fqxj.sh: line 7: local: `3 4': invalid variable name for name reference\\n/tmp/tmpgi06fqxj.sh: line 16: n-1: No such file or directory\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Cannot reach the end\"\n            return\n        fi\n        if [[ $((i + arr[i])) -ge $((n - 1)) ]]; then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++)); do\n            if [[ $((j + arr[j])) -gt $max_reach ]]; then\n                max_reach=$((j + arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpoma4yiqq.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local len=${#arr[@]}\n    local d=$2\n    local jumps=0\n    local i=0\n    local x=0\n    local y=0\n    while [ $x -lt $d ] && [ $i -lt $len ]; do\n        x=$((x + arr[i]))\n        y=$((y + arr[i]))\n        i=$((i + 1))\n    done\n    if [ $x -lt $d ]; then\n        echo -1\n    else\n        while [ $y -gt 0 ]; do\n            y=$((y - arr[i - 1]))\n            i=$((i - 1))\n            jumps=$((jumps + 1))\n        done\n        echo $jumps\n    fi\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    local step=0\n    if [ $2 -eq 0 ]\n    then\n        echo 0\n    elif [ $2 -eq 1 ]\n    then\n        echo 1\n    else\n        while [ $i -lt $n ]\n        do\n            step=$(($step+${arr[$i]}))\n            if [ $step -eq $2 ]\n            then\n                echo $((jumps+1))\n                break\n            elif [ $step -gt $2 ]\n            then\n                echo -1\n                break\n            fi\n            jumps=$((jumps+1))\n            i=$((i+1))\n        done\n    fi\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    IFS=' ' read -r -a array <<< \"$1\"\n    n=${#array[@]}\n    for (( i=0; i<n; i++ ));\n    do\n        if (( array[i] > $2 ));\n        then\n            echo \"Invalid Input\"\n            return\n        fi\n    done\n    if (( array[0] == 0 ));\n    then\n        echo \"Invalid Input\"\n        return\n    fi\n    if (( array[n-1] == 0 ));\n    then\n        echo \"Invalid Input\"\n        return\n    fi\n    if (( $2 == 0 ));\n    then\n        echo \"Invalid Input\"\n        return\n    fi\n    if (( $2 < 0 ));\n    then\n        echo \"Invalid Input\"\n        return\n    fi\n    if (( $2 < array[0] ));\n    then\n        echo \"Invalid Input\"\n        return\n    fi\n    if (( $2 > array[n-1] ));\n    then\n        echo \"Invalid Input\"\n        return\n    fi\n    if (( $2 == array[0] ));\n    then\n        echo \"0\"\n        return\n    fi\n    if (( $2 == array[n-1] ));\n    then\n        echo \"1\"\n        return\n    fi\n    for (( i=0; i<n-1; i++ ));\n    do\n        if (( array[i] == $2 ));\n        then\n            echo \"1\"\n            return\n        fi\n    done\n    for (( i=0; i<n-1; i++ ));\n    do\n        if (( array[i] < $2 ));\n        then\n            if (( array[i+1] > $2 ));\n            then\n                echo \"2\"\n                return\n            fi\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if ((i + arr[i] >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=$((j + arr[j]))\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp6o4gd1pz.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jump=0\n    local max_reach=0\n    local steps=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -gt $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        jump=0\n        steps=$((arr[i]))\n        for (( j=i+1; j<=max_reach; j++ ))\n        do\n            if [ $((steps+arr[j])) -gt $jump ]\n            then\n                jump=$((steps+arr[j]))\n                steps=$((arr[j]))\n                max_reach=$((j+arr[j]))\n            fi\n        done\n        i=$((i+steps))\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local max_reach=$i\n        local steps=$((i+arr[$i]))\n        local j=$((i+1))\n        while [ $j -le $steps ]\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ $((j+arr[$j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[$j]))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$max_reach\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "<_io.BufferedReader name=9>",
      "stderr": "<_io.BufferedReader name=11>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n list=$1\n    local target=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt ${#list[@]} ]; do\n        if [ ${list[$i]} -eq $target ]; then\n            echo $jumps\n            return\n        fi\n        i=$((i + ${list[$i]}))\n        jumps=$((jumps + 1))\n    done\n    echo -1\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmphu_hrsuj.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid Input\"\n            exit 1\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_i=0\n        for j in $(seq $((i+1)) $((i+arr[$i]))); do\n            if [ $j -ge $n ]; then\n                break\n            fi\n            if [ ${arr[$j]} -gt $max ]; then\n                max=${arr[$j]}\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "<_io.BufferedReader name=6>",
      "stderr": "<_io.BufferedReader name=10>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local jumps=0\n  local i=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]\n    then\n      echo $jumps\n      return\n    fi\n    local max_reach=$((i+arr[i]))\n    local j=$((i+1))\n    local max_index=$i\n    while [ $j -le $max_reach ]\n    do\n      if [ $j -eq $((n-1)) ]\n      then\n        max_index=$j\n        break\n      fi\n      if [ $((j+arr[j])) -gt $((max_reach+arr[max_reach])) ]\n      then\n        max_reach=$((j+arr[j]))\n        max_index=$j\n      fi\n      j=$((j+1))\n    done\n    jumps=$((jumps+1))\n    i=$max_index\n  done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "<_io.BufferedReader name=4>",
      "stderr": "<_io.BufferedReader name=12>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            i=$((i+arr[i]))\n        else\n            jumps=$((jumps+1))\n            i=$((i+arr[i]))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "<_io.BufferedReader name=7>",
      "stderr": "<_io.BufferedReader name=21>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local maxReach=0\n    local steps=0\n    local jump=0\n    local flag=0\n    local d=$2\n    while [ $i -lt $n ]\n    do\n        maxReach=$((i + arr[i]))\n        if [ $maxReach -ge $((n-1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((maxReach + 1))\n        jump=$((arr[maxReach]))\n        while [ $steps -le $((n-1)) ]\n        do\n            if [ $((arr[steps] + steps)) -ge $((jump + maxReach)) ]\n            then\n                jump=$((arr[steps]))\n                maxReach=$((steps))\n            fi\n            steps=$((steps + 1))\n        done\n        jumps=$((jumps + 1))\n        i=$((maxReach))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191174,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    while ((i < n))\n    do\n        max_reach=$((i + arr[i]))\n        if ((max_reach >= n - 1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach + 1))\n        for ((j = i + 1; j <= max_reach; j++))\n        do\n            if ((j + arr[j] > steps))\n            then\n                steps=$((j + arr[j]))\n                i=$j\n            fi\n        done\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "<_io.BufferedReader name=17>",
      "stderr": "<_io.BufferedReader name=20>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            flag=1\n            break\n        fi\n        steps=$((max_reach+1))\n        for ((j=i+1; j<steps; j++))\n        do\n            if [ $((arr[j]+j)) -gt $max_reach ]\n            then\n                max_reach=$((arr[j]+j))\n                steps=$((max_reach+1))\n            fi\n        done\n        i=$((i+1))\n        jumps=$((jumps+1))\n    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"Not possible\"\n    else\n        echo $jumps\n    fi\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local curr_max=0\n    local next_max=0\n    local steps=0\n    local max_reach=0\n    local flag=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        max_reach=$((i+arr[i]))\n        if [ $max_reach -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        curr_max=$max_reach\n        for ((j=i+1; j<=curr_max; j++))\n        do\n            if [ $((j+arr[j])) -gt $next_max ]\n            then\n                next_max=$((j+arr[j]))\n                steps=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$steps\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jump=0\n    local i=0\n    local maxReach=0\n    local steps=0\n    local jump_count=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jump_count=$((jump_count+1))\n            break\n        fi\n        maxReach=$((i+arr[i]))\n        jump=0\n        steps=$((arr[i]))\n        for (( j=i+1; j<=$((n-1)); j++ ))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jump_count=$((jump_count+1))\n                i=$((n-1))\n                break\n            fi\n            if [ $((j+arr[j])) -gt $maxReach ]\n            then\n                maxReach=$((j+arr[j]))\n                jump=$j\n                steps=$((steps+arr[j]))\n            fi\n            if [ $steps -eq $2 ]\n            then\n                jump_count=$((jump_count+1))\n                i=$((j-1))\n                break\n            fi\n        done\n        if [ $jump -eq 0 ]\n        then\n            echo \"Not possible\"\n            exit\n        fi\n        i=$jump\n    done\n    echo $jump_count\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i jumps=0\n    local -i max_reach=0\n    local -i steps=0\n\n    while ((i < n))\n    do\n        max_reach=$((i + arr[i]))\n        if ((max_reach >= n))\n        then\n            ((++jumps))\n            break\n        fi\n        steps=$((max_reach + 1))\n        for ((j = i + 1; j <= max_reach; ++j))\n        do\n            if ((j + arr[j] > steps))\n            then\n                steps=$((j + arr[j]))\n            fi\n        done\n        ((++jumps))\n        i=$((steps))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpf0vkyrzb.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i jumps=0\n    while [ $i -lt $n ]; do\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo \"Invalid Input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]; then\n            echo \"$jumps\"\n            return\n        fi\n        if [ $i -le $((n-3)) ] && [ ${arr[$((i+2))]} -eq 0 ]; then\n            i=$((i+2))\n            jumps=$((jumps+1))\n        else\n            i=$((i+1))\n            jumps=$((jumps+1))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpmrrognia.sh: line 7: local: `3 4': invalid variable name for name reference\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 20: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n/tmp/tmpmrrognia.sh: line 12: [: -eq: unary operator expected\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n    local -i maxReach=0\n    local -i steps=0\n    local -i jump=0\n\n    while (( i < n ))\n    do\n        maxReach=$(( i + arr[i] ))\n        if (( maxReach >= n-1 ))\n        then\n            jumps=$(( jumps + 1 ))\n            break\n        fi\n        steps=$(( maxReach + 1 ))\n        jump=$(( arr[maxReach] ))\n        while (( steps < n ))\n        do\n            if (( arr[steps] + steps > jump + maxReach ))\n            then\n                jump=$(( arr[steps] ))\n                maxReach=$(( steps ))\n            fi\n            (( steps++ ))\n        done\n        (( jumps++ ))\n        i=$(( maxReach ))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpe7ua0wyp.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return 0\n        fi\n        j=$((i+arr[i]))\n        if [ $j -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            return 0\n        fi\n        if [ $j -gt $((n-1)) ]\n        then\n            return 1\n        fi\n        i=$j\n        jumps=$((jumps+1))\n    done\n    return 1\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191153,
      "stdout": "<_io.BufferedReader name=13>",
      "stderr": "<_io.BufferedReader name=16>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a jumps=($1)\n    local -i n=${#jumps[@]}\n    local -i i=0\n    local -i jumps_count=0\n    local -i target=$2\n    local -i curr_pos=0\n    local -i max_reach=0\n    local -i next_reach=0\n    local -i i=0\n    local -i j=0\n\n    while [ $curr_pos -lt $target ]; do\n        max_reach=0\n        for ((i=curr_pos+1; i<=curr_pos+jumps[curr_pos] && i<n; i++)); do\n            if [ $i -eq $target ]; then\n                jumps_count=$((jumps_count+1))\n                return\n            fi\n            if [ $i+jumps[i] -gt $max_reach ]; then\n                max_reach=$((i+jumps[i]))\n                next_reach=$i\n            fi\n        done\n        curr_pos=$next_reach\n        jumps_count=$((jumps_count+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "<_io.BufferedReader name=28>",
      "stderr": "<_io.BufferedReader name=31>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local jumps=0\n  local min_jumps=0\n  local min_jumps_index=0\n  local min_jumps_value=0\n  local flag=0\n  local temp=0\n  local temp_index=0\n  local temp_value=0\n  local temp_jumps=0\n  local temp_flag=0\n  local temp_min_jumps=0\n  local temp_min_jumps_index=0\n  local temp_min_jumps_value=0\n  local temp_min_jumps_flag=0\n  local temp_min_jumps_temp=0\n  local temp_min_jumps_temp_index=0\n  local temp_min_jumps_temp_value=0\n  local temp_min_jumps_temp_jumps=0\n  local temp_min_jumps_temp_flag=0\n  local temp_min_jumps_temp_min_jumps=0\n  local temp_min_jumps_temp_min_jumps_index=0\n  local temp_min_jumps_temp_min_jumps_value=0\n  local temp_min_jumps_temp_min_jumps_flag=0\n  local temp_min_jumps_temp_min_jumps_temp=0\n  local temp_min_jumps_temp_min_jumps_temp_index=0\n  local temp_min_jumps_temp_min_jumps_temp_value=0\n  local temp_min_jumps_temp_min_jumps_temp_jumps=0\n  local temp_min_jumps_temp_min_jumps_temp_flag=0\n  local temp_min_jumps_temp_min_jumps_temp_min_jumps=0\n  local temp_min_jumps_temp_min_jumps_temp_min_jumps_index=0\n  local temp_min_jumps_temp_min_jumps_temp_min_jumps_value=0\n  local temp_min_jumps_temp_min_\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpfrxl9r5j.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i j=0\n    local -i maxReach=0\n    local -i steps=0\n    local -i jump=0\n    local -i jumps=0\n    local -i flag=0\n\n    while [ $i -lt $n ]\n    do\n        maxReach=$((i+arr[i]))\n        if [ $maxReach -gt $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        jump=$((arr[i]))\n        for (( j=i+1; j<=maxReach; j++ ))\n        do\n            if [ $((arr[j]+j)) -gt $jump ]\n            then\n                jump=$((arr[j]+j))\n                steps=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$steps\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "<_io.BufferedReader name=7>",
      "stderr": "<_io.BufferedReader name=14>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n list=$1\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n    while (( i < n )); do\n        if (( list[i] + i >= n )); then\n            (( jumps++ ))\n            break\n        fi\n        local -i max=0\n        local -i max_i=0\n        for (( j = i + 1; j <= list[i] + i; j++ )); do\n            if (( list[j] + j > max )); then\n                max=list[j] + j\n                max_i=$j\n            fi\n        done\n        (( jumps++ ))\n        i=$max_i\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=12>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    local maxReach=0\n    local steps=0\n    while [ $i -lt $n ]\n    do\n        maxReach=$((i + arr[i]))\n        if [ $maxReach -gt $((n - 1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((maxReach + 1))\n        for ((j = i + 1; j <= maxReach; j++))\n        do\n            if [ $((j + arr[j])) -gt $steps ]\n            then\n                steps=$((j + arr[j]))\n                i=$j\n            fi\n        done\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "<_io.BufferedReader name=16>",
      "stderr": "<_io.BufferedReader name=19>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local max_reach=0\n    local steps=0\n    while ((i < n))\n    do\n        if ((max_reach < i))\n        then\n            return -1\n        fi\n        max_reach=$((max_reach > i + arr[i] ? max_reach : i + arr[i]))\n        if ((max_reach >= n - 1))\n        then\n            return $((jumps + 1))\n        fi\n        ((steps == i)) && ((steps = max_reach)) && ((jumps++))\n        ((i++))\n    done\n    return -1\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191179,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            ((i++))\n            ((jumps++))\n        else\n            i=$((i+arr[i]))\n            ((jumps++))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191158,
      "stdout": "<_io.BufferedReader name=8>",
      "stderr": "<_io.BufferedReader name=24>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local list=$1\n    local len=$2\n    local jumps=0\n    local i=0\n    local j=0\n    local k=0\n    local max=0\n    local max_index=0\n    local temp=0\n    local flag=0\n    local arr=($list)\n    if [ $len -eq 0 ]; then\n        echo \"0\"\n        return\n    fi\n    while [ $i -lt $len ]; do\n        if [ $i -eq $((len-1)) ]; then\n            jumps=$((jumps+1))\n            break\n        fi\n        max=0\n        max_index=0\n        for ((k=$((i+1)); k<=$((i+arr[i])); k++)); do\n            if [ $k -eq $((len-1)) ]; then\n                jumps=$((jumps+1))\n                flag=1\n                break\n            fi\n            temp=$((arr[k]+k))\n            if [ $temp -gt $max ]; then\n                max=$temp\n                max_index=$k\n            fi\n        done\n        if [ $flag -eq 1 ]; then\n            break\n        fi\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n    echo \"$jumps\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "<_io.BufferedReader name=9>",
      "stderr": "<_io.BufferedReader name=13>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return 0\n        fi\n        j=$((i+arr[i]))\n        if [ $j -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            return 0\n        fi\n        if [ $j -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            continue\n        fi\n        jumps=$((jumps+1))\n        i=$j\n    done\n    return 1\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "<_io.BufferedReader name=15>",
      "stderr": "<_io.BufferedReader name=21>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            jumps=$((jumps+1))\n        else\n            i=$((i+arr[i]))\n            jumps=$((jumps+1))\n        fi\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191148,
      "stdout": "<_io.BufferedReader name=17>",
      "stderr": "<_io.BufferedReader name=21>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Can't jump\"\n            return\n        fi\n        if (( i + arr[i] >= n ))\n        then\n            (( jumps++ ))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for (( j=i+1; j<=i+arr[i]; j++ ))\n        do\n            if (( j + arr[j] > max ))\n            then\n                max=$(( j + arr[j] ))\n                max_i=$j\n            fi\n        done\n        (( jumps++ ))\n        i=$max_i\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8ti6ou2u.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Cannot reach the end\"\n            return\n        fi\n        local max_reach=$i\n        local steps=$((arr[$i]))\n        local j=$((i+1))\n        while [ $j -le $((i+steps)) ]\n        do\n            if [ $((j+arr[$j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[$j]))\n            fi\n            j=$((j+1))\n        done\n        i=$max_reach\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local j=0\n  local jump=0\n  local min_jump=0\n  local min_index=0\n  local max_jump=0\n  local max_index=0\n  local max_reached=0\n  local jumps=()\n  local jump_count=0\n  local jump_index=0\n  local jump_flag=0\n  local jump_flag_index=0\n  local jump_flag_count=0\n  local jump_flag_count_index=0\n  local jump_flag_count_max=0\n  local jump_flag_count_max_index=0\n  local jump_flag_count_max_reached=0\n  local jump_flag_count_max_reached_index=0\n  local jump_flag_count_max_reached_count=0\n  local jump_flag_count_max_reached_count_index=0\n  local jump_flag_count_max_reached_count_max=0\n  local jump_flag_count_max_reached_count_max_index=0\n  local jump_flag_count_max_reached_count_max_reached=0\n  local jump_flag_count_max_reached_count_max_reached_index=0\n  local jump_flag_count_max_reached_count_max_reached_count=0\n  local jump_flag_count_max_reached_count_max_reached_count_index=0\n  local jump_flag_count_max_reached_count_max_reached_count_max=0\n  local jump_flag_count_max_reached_count_max_reached_count_max_index=0\n  local jump_flag_count_max_reached_count_max_reached_count_max_reached=0\n  local jump_flag_count_max_reached_count_max_reached_count_max_reached_index=0\n  local jump_flag_count_max_reached_count_max_reached_count_max_reached_count=0\n \n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp3s803inx.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]; do\n    if [ ${arr[$i]} -eq 0 ]; then\n      echo \"Invalid Input\"\n      return\n    fi\n    if [ $i -eq $((n-1)) ]; then\n      echo $jumps\n      return\n    fi\n    if [ $((i+arr[i])) -gt $((n-1)) ]; then\n      jumps=$((jumps+1))\n      i=$((i+arr[i]))\n    else\n      jumps=$((jumps+1))\n      i=$((i+arr[i]))\n    fi\n  done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "<_io.BufferedReader name=18>",
      "stderr": "<_io.BufferedReader name=24>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while (( i < n ))\n    do\n        if (( arr[i+2] == 0 ))\n        then\n            (( jumps++ ))\n            (( i += 2 ))\n        else\n            (( jumps++ ))\n            (( i++ ))\n        fi\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp5p6zm3rk.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -a dp\n    for ((i=0; i<n; i++)); do\n        dp[i]=0\n    done\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] + j >= i)); then\n                if ((dp[i] == 0 || dp[i] > dp[j] + 1)); then\n                    dp[i]=$((dp[j] + 1))\n                fi\n            fi\n        done\n    done\n    echo ${dp[n-1]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpxhzlmh17.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        if [ $i -eq $((n-2)) ]\n        then\n            jumps=$((jumps+1))\n            return\n        fi\n        local max=${arr[$i]}\n        local j=$((i+1))\n        local k=$((i+2))\n        while [ $j -lt $((n-1)) ]\n        do\n            if [ $k -gt $((n-1)) ]\n            then\n                break\n            fi\n            if [ ${arr[$k]} -gt $max ]\n            then\n                max=${arr[$k]}\n                i=$k\n            fi\n            j=$((j+1))\n            k=$((k+1))\n        done\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpi0m743mp.sh: line 7: local: `3 4': invalid variable name for name reference\\n/tmp/tmpi0m743mp.sh: line 13: [: -eq: unary operator expected\\n/tmp/tmpi0m743mp.sh: line 13: [: -eq: unary operator expected\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -le $max_reach ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        i=$((i+steps))\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local step=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ $((i+arr[i])) -ge $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        max=0\n        for ((j=1;j<=arr[i];j++))\n        do\n            if [ $((arr[i+j]+j)) -gt $max ]\n            then\n                max=$((arr[i+j]+j))\n                step=$j\n            fi\n        done\n        i=$((i+step))\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [[ $i -lt $n ]]; do\n    if [[ ${arr[$i]} -eq 0 ]]; then\n      echo \"Infinite\"\n      return\n    fi\n    if [[ $i -eq $((n-1)) ]]; then\n      echo $jumps\n      return\n    fi\n    local max_reach=$((i+arr[i]))\n    local max_index=$i\n    for ((j = i + 1; j <= max_reach && j < n; j++)); do\n      if [[ $((j + arr[j])) -gt $max_reach ]]; then\n        max_reach=$((j + arr[j]))\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps + 1))\n  done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp3lp3svb5.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n list=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${list[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for j in $(seq $((i+1)) $((i+${list[$i]})))\n        do\n            if [ $j -ge $n ]\n            then\n                break\n            fi\n            if [ $((j+${list[$j]})) -gt $max_reach ]\n            then\n                max_reach=$((j+${list[$j]}))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "<_io.BufferedReader name=3>",
      "stderr": "<_io.BufferedReader name=29>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191138,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -a dp\n    for ((i=0; i<n; i++)); do\n        dp[i]=$((2**32-1))\n    done\n    dp[0]=0\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((arr[j] + j >= i)); then\n                dp[i]=$((dp[i] < dp[j] + 1 ? dp[i] : dp[j] + 1))\n            fi\n        done\n    done\n    echo ${dp[n-1]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpn2wlclsn.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpwg1a2g0u.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpwg1a2g0u.sh: line 18: [: -eq: unary operator expected\\n/tmp/tmpwg1a2g0u.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n ))\n        then\n            (( jumps++ ))\n            break\n        fi\n        local max=0\n        local max_index=0\n        for (( j=i+1; j<=i+arr[i]; j++ ))\n        do\n            if (( arr[j] + j > max ))\n            then\n                max=$(( arr[j] + j ))\n                max_index=$j\n            fi\n        done\n        (( jumps++ ))\n        i=$max_index\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp62h83r_z.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jumps=0\n    local i=0\n    local curr=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Infinite\"\n            return\n        fi\n        if ((i + arr[i] >= n - 1))\n        then\n            ((jumps++))\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=j + arr[j]\n                max_index=$j\n            fi\n        done\n        ((jumps++))\n        i=$max_index\n    done\n    echo \"Infinite\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local jumps=0\n  local i=0\n  while [[ $i -lt $n ]]; do\n    if [[ ${arr[$i]} -eq 0 ]]; then\n      echo \"Invalid input\"\n      return\n    fi\n    if [[ $i -eq $((n-1)) ]]; then\n      jumps=$((jumps+1))\n      break\n    fi\n    if [[ $i -eq $((n-2)) ]]; then\n      jumps=$((jumps+1))\n      break\n    fi\n    if [[ ${arr[$i+2]} -eq 0 ]]; then\n      i=$((i+2))\n      jumps=$((jumps+1))\n    else\n      i=$((i+1))\n      jumps=$((jumps+1))\n    fi\n  done\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmptrmij29o.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -i i=0\n    local -i jumps=0\n    local -i maxReach=0\n    local -i steps=0\n    local -i jump=0\n    local -i flag=0\n\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            flag=1\n            break\n        fi\n        maxReach=$((i+arr[i]))\n        steps=$((arr[i]))\n        jump=$i\n        while [ $steps -gt 0 ]\n        do\n            if [ $((i+steps)) -gt $maxReach ]\n            then\n                maxReach=$((i+steps))\n                jump=$i\n            fi\n            steps=$((steps-1))\n        done\n        i=$((jump+1))\n        jumps=$((jumps+1))\n    done\n    if [ $flag -eq 1 ]\n    then\n        echo $jumps\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpubwsfg44.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n ))\n        then\n            (( jumps++ ))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for (( j = i + 1; j <= i + arr[i]; j++ ))\n        do\n            if (( j + arr[j] > max ))\n            then\n                max=j+arr[j]\n                max_i=$j\n            fi\n        done\n        (( jumps++ ))\n        i=$max_i\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp8vwirar0.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        for ((j=$i+1; j<=$max_reach; j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        jumps=$((jumps+1))\n        i=$max_reach_index\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "<_io.BufferedReader name=11>",
      "stderr": "<_io.BufferedReader name=27>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local len=$2\n    local i=0\n    local j=0\n    local count=0\n    local min=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            flag=1\n            break\n        fi\n    done\n    if [ $flag -eq 0 ]\n    then\n        for ((i=0; i<len; i++))\n        do\n            if [ ${arr[$i]} -eq 0 ]\n            then\n                echo \"Not possible\"\n                flag=1\n                break\n            fi\n        done\n        if [ $flag -eq 0 ]\n        then\n            for ((i=0; i<len; i++))\n            do\n                if [ ${arr[$i]} -eq 0 ]\n                then\n                    echo \"Not possible\"\n                    flag=1\n                    break\n                fi\n            done\n            if [ $flag -eq 0 ]\n            then\n                for ((i=0; i<len; i++))\n                do\n                    if [ ${arr[$i]} -eq 0 ]\n                    then\n                        echo \"Not possible\"\n                        flag=1\n                        break\n                    fi\n                done\n                if [ $flag -eq 0 ]\n                then\n                    for ((i=0; i<len; i++))\n                    do\n                        if [ ${arr[$i]} -eq 0 ]\n                        then\n                            echo \"Not possible\"\n                            flag=1\n                            break\n                        fi\n                    done\n                    if [ $flag -eq 0 ]\n                    then\n                        for ((i=0; i<len; i++))\n                        do\n                            if [ ${arr[$i]} -eq 0 ]\n                            then\n                                echo \"Not possible\"\n                                flag=1\n                                break\n                            fi\n                        done\n                        if [ $flag -eq 0 ]\n                        then\n                            for ((i=0; i<len; i++))\n                            do\n                                if [ ${arr[$i]} -eq 0 ]\n                                then\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpppaai4km.sh: line 85: syntax error near unexpected token `}'\\n/tmp/tmpppaai4km.sh: line 85: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible to reach\"\n            return\n        fi\n        if (( i + arr[i] >= n ))\n        then\n            (( jumps++ ))\n            break\n        fi\n        local max_reach=0\n        local steps=arr[i]\n        for (( j=i+1; j <= i+steps; j++ ))\n        do\n            if (( j + arr[j] > max_reach ))\n            then\n                max_reach=$(( j + arr[j] ))\n                steps=$(( j - i ))\n            fi\n        done\n        (( jumps++ ))\n        i=$(( i + steps ))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191184,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpsqzpihpd.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        local max_reach=$i\n        local steps=$((arr[$i]))\n        local j=$((i+1))\n        while [ $j -le $((i+steps)) ] && [ $j -lt $n ]\n        do\n            if [ $((j+arr[$j])) -gt $((max_reach+arr[$max_reach])) ]\n            then\n                max_reach=$j\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$max_reach\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "<_io.BufferedReader name=7>",
      "stderr": "<_io.BufferedReader name=10>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i\n    local j\n    local max_reach\n    local steps\n    local jumps\n    local jump_arr=()\n    for ((i=0; i<n; i++)); do\n        jump_arr[i]=0\n    done\n    if ((\"${arr[0]}\" >= n-1)); then\n        echo 0\n        return 0\n    fi\n    max_reach=arr[0]\n    steps=arr[0]\n    jumps=1\n    for ((i=1; i<n; i++)); do\n        if ((\"$i\" == \"$n-1\")); then\n            return 0\n        fi\n        max_reach=0\n        for ((j=0; j<i; j++)); do\n            if ((arr[j]+j > max_reach)); then\n                max_reach=arr[j]+j\n                jump_arr[i]=j\n            fi\n        done\n        steps=steps-1\n        if ((steps == 0)); then\n            jumps=$((jumps+1))\n            if ((max_reach <= i)); then\n                echo -1\n                return 1\n            fi\n            steps=max_reach-i\n        fi\n    done\n    echo $jumps\n    return 0\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpiez5cpf_.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpiez5cpf_.sh: line 18: ((: >= n-1: syntax error: operand expected (error token is \">= n-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n/tmp/tmpiez5cpf_.sh: line 37: ((: steps-1: expression recursion level exceeded (error token is \"steps-1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local -i n=$2\n    local -i i=0\n    local -i jumps=0\n    while (( i < n ))\n    do\n        if (( arr[i] == 0 ))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if (( i + arr[i] >= n-1 ))\n        then\n            (( jumps++ ))\n            break\n        fi\n        local -i max=0\n        local -i max_i=0\n        for (( j = 1; j <= arr[i]; j++ ))\n        do\n            if (( arr[i+j] + j > max ))\n            then\n                max=arr[i+j]+j\n                max_i=i+j\n            fi\n        done\n        (( jumps++ ))\n        i=max_i\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpt5gpxfbx.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Infinite\"\n            return\n        fi\n        if [[ $i -eq $((n-1)) ]]; then\n            echo $jumps\n            return\n        fi\n        if [[ $i -eq $((n-2)) ]]; then\n            jumps=$((jumps+1))\n            echo $jumps\n            return\n        fi\n        local max=0\n        local max_index=0\n        for ((j = 1; j <= ${arr[$i]}; j++)); do\n            if [[ $((i+j+arr[i+j])) -gt $max ]]; then\n                max=$((i+j+arr[i+j]))\n                max_index=$((i+j))\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpgvwimmjp.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            return\n        fi\n        j=$((i+arr[i]))\n        if [ $j -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            return\n        fi\n        if [ $j -gt $((n-1)) ]\n        then\n            i=$((i+1))\n            continue\n        fi\n        if [ $j -lt $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            i=$j\n        fi\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "<_io.BufferedReader name=12>",
      "stderr": "<_io.BufferedReader name=14>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local max_reach_index=$i\n        for ((j=$i+1; j<=$((i+arr[i])); j++))\n        do\n            if [ $j -eq $((n-1)) ]\n            then\n                jumps=$((jumps+1))\n                echo $jumps\n                return\n            fi\n            if [ $max_reach -le $((j+arr[j])) ]\n            then\n                max_reach=$((j+arr[j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "<_io.BufferedReader name=13>",
      "stderr": "<_io.BufferedReader name=17>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i min=0\n  local -i temp=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i d=0\n  local -i res=0\n  local -i flag=0\n  local -i flag1=0\n  local -i flag2=0\n  local -i flag3=0\n  local -i flag4=0\n  local -i flag5=0\n  local -i flag6=0\n  local -i flag7=0\n  local -i flag8=0\n  local -i flag9=0\n  local -i flag10=0\n  local -i flag11=0\n  local -i flag12=0\n  local -i flag13=0\n  local -i flag14=0\n  local -i flag15=0\n  local -i flag16=0\n  local -i flag17=0\n  local -i flag18=0\n  local -i flag19=0\n  local -i flag20=0\n  local -i flag21=0\n  local -i flag22=0\n  local -i flag23=0\n  local -i flag24=0\n  local -i flag25=0\n  local -i flag26=0\n  local -i flag27=0\n  local -i flag28=0\n  local -i flag29=0\n  local -i flag30=0\n  local -i flag31=0\n  local -i flag32=0\n  local -i flag33=0\n  local -i flag34=0\n  local -i flag35=0\n  local -i flag36=0\n  local -i flag37=0\n  local -i flag38=0\n  local -i flag39=0\n  local -i flag40=0\n  local -i flag41=0\n  local -i flag42=0\n  local -i flag43=0\n  local -i flag44=0\n  local -i flag45=0\n  local -i\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp987qj2q7.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr\n    local -i i\n    local -i n\n    local -i d\n    local -i j\n    local -i k\n    local -i min\n    arr=($1)\n    n=${#arr[@]}\n    d=$2\n    min=0\n    for ((i=0; i<n; i++)); do\n        j=${arr[i]}\n        if ((j>=d)); then\n            ((min++))\n            break\n        fi\n        for ((k=i+1; k<n; k++)); do\n            ((j+=arr[k]))\n            if ((j>=d)); then\n                ((min++))\n                break\n            fi\n        done\n    done\n    echo $min\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jump=0\n    local i=0\n    local next_max=0\n    local curr_max=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        while [ $i -lt $n ] && [ $i -le $curr_max ]\n        do\n            jump=$((arr[i]+i))\n            if [ $jump -gt $next_max ]\n            then\n                next_max=$jump\n            fi\n            i=$((i+1))\n        done\n        curr_max=$next_max\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]} -eq 0 ]]; then\n            echo \"Infinite\"\n            return\n        fi\n        if [[ $i -eq $((n - 1)) ]]; then\n            echo $jumps\n            return\n        fi\n        local max_reach=0\n        local max_reach_index=0\n        for ((j = i + 1; j <= i + ${arr[$i]} && j < n; j++)); do\n            if [[ $((j + arr[$j])) -gt $max_reach ]]; then\n                max_reach=$((j + arr[$j]))\n                max_reach_index=$j\n            fi\n        done\n        i=$max_reach_index\n        jumps=$((jumps + 1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpcwvsuq0b.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    local maxReach=0\n    local steps=0\n    while ((i < n))\n    do\n        maxReach=$((i + arr[i]))\n        if ((maxReach >= n-1))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((maxReach + 1))\n        for ((j=i+1; j<=maxReach; j++))\n        do\n            if ((j + arr[j] > steps))\n            then\n                steps=$((j + arr[j]))\n                i=$j\n            fi\n        done\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "<_io.BufferedReader name=20>",
      "stderr": "<_io.BufferedReader name=25>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Invalid input\"\n            return\n        fi\n        if ((i + arr[i] >= n - 1))\n        then\n            ((jumps++))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j = i + 1; j <= i + arr[i]; j++))\n        do\n            if ((j + arr[j] > max))\n            then\n                max=j + arr[j]\n                max_i=$j\n            fi\n        done\n        i=$max_i\n        ((jumps++))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpvoyhpcre.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while ((i < n))\n    do\n        if ((arr[i] == 0))\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if ((i + arr[i] >= n))\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max=0\n        local max_i=0\n        for ((j = 1; j <= arr[i]; j++))\n        do\n            if ((arr[i + j] + j > max))\n            then\n                max=$((arr[i + j] + j))\n                max_i=$((i + j))\n            fi\n        done\n        jumps=$((jumps + 1))\n        i=$max_i\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp5a5p2w__.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local -a jumps\n    local -i i j k\n    for ((i=0; i<n; i++)); do\n        jumps[i]=${arr[i]}\n    done\n    for ((i=1; i<n; i++)); do\n        for ((j=0; j<i; j++)); do\n            if ((jumps[j] != -1 && jumps[j] + j >= i)); then\n                jumps[i]=$((jumps[i] > jumps[j] + 1 ? jumps[j] + 1 : jumps[i]))\n            fi\n        done\n    done\n    echo ${jumps[n-1]}\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpj64krbs4.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -a arr=($1)\n  local n=${#arr[@]}\n  local x=$2\n  local i=0\n  local j=0\n  local jumps=0\n  while [ $i -lt $n ]\n  do\n    if [ $i -eq $((n-1)) ]\n    then\n      jumps=$((jumps+1))\n      break\n    fi\n    if [ $((i+arr[i])) -ge $((n-1)) ]\n    then\n      jumps=$((jumps+1))\n      break\n    fi\n    local max=0\n    local max_ind=0\n    for ((k=1;k<=arr[i];k++))\n    do\n      if [ $((i+k+arr[i+k])) -gt $max ]\n      then\n        max=$((i+k+arr[i+k]))\n        max_ind=$((i+k))\n      fi\n    done\n    i=$max_ind\n    jumps=$((jumps+1))\n  done\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n  local -n arr=$1\n  local n=$2\n  local i=0\n  local jumps=0\n  while [ $i -lt $n ]\n  do\n    if [ ${arr[$i]} -eq 0 ]\n    then\n      echo \"Not possible\"\n      return\n    fi\n    if [ $((i + arr[i])) -ge $((n - 1)) ]\n    then\n      jumps=$((jumps + 1))\n      break\n    fi\n    local max=0\n    local max_index=0\n    for ((j=i+1; j<=i+arr[i]; j++))\n    do\n      if [ $((arr[j] + j)) -gt $max ]\n      then\n        max=$((arr[j] + j))\n        max_index=$j\n      fi\n    done\n    i=$max_index\n    jumps=$((jumps + 1))\n  done\n  echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "<_io.BufferedReader name=23>",
      "stderr": "<_io.BufferedReader name=28>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local jumps=0\n    local i=0\n    while (( i < n ))\n    do\n        if (( arr[i+2] == 0 ))\n        then\n            jumps=$(( jumps+1 ))\n            i=$(( i+2 ))\n        else\n            jumps=$(( jumps+1 ))\n            i=$(( i+1 ))\n        fi\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191189,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp0uu240xp.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$((i+1))\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jumps=$((jumps+1))\n        i=$((i+steps))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191143,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpwg1a2g0u.sh: line 7: local: `3 4\\': invalid variable name for name reference\\n/tmp/tmpwg1a2g0u.sh: line 18: [: -eq: unary operator expected\\n/tmp/tmpwg1a2g0u.sh: line 36: [i]: syntax error: operand expected (error token is \"[i]\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $((n-1)) ]\n        then\n            echo $jumps\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$((arr[i]))\n        for ((j=i+1; j<=max_reach && j<n; j++))\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n        done\n        i=$((i+steps))\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "<_io.BufferedReader name=4>",
      "stderr": "<_io.BufferedReader name=22>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Not possible\"\n            return\n        fi\n        if [ $((i + arr[i])) -ge $((n - 1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_reach=0\n        local steps=0\n        for ((j=i+1; j<=i+arr[i]; j++))\n        do\n            if [ $((j + arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j + arr[j]))\n                steps=$j\n            fi\n        done\n        jumps=$((jumps + 1))\n        i=$steps\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191199,
      "stdout": "<_io.BufferedReader name=8>",
      "stderr": "<_io.BufferedReader name=11>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    local maxReach=0\n    local steps=0\n    while ((i < n))\n    do\n        maxReach=$((i+arr[i]))\n        if ((maxReach >= n-1))\n        then\n            jumps=$((jumps+1))\n            break\n        fi\n        steps=$((maxReach+1))\n        for ((j=i+1; j<=maxReach; j++))\n        do\n            if ((j+arr[j] > steps))\n            then\n                steps=$((j+arr[j]))\n                i=$j\n            fi\n        done\n        jumps=$((jumps+1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191199,
      "stdout": "<_io.BufferedReader name=10>",
      "stderr": "<_io.BufferedReader name=18>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]; do\n        if [ $i -eq $((n-1)) ]; then\n            echo $jumps\n            return\n        fi\n        if [ $i -eq $((n-2)) ]; then\n            echo $((jumps+1))\n            return\n        fi\n        if [ ${arr[$i]} -eq 0 ]; then\n            echo -1\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local step=$((arr[i]))\n        for ((j=i+1; j<=i+arr[i]; j++)); do\n            if [ $((j+arr[j])) -gt $max_reach ]; then\n                max_reach=$((j+arr[j]))\n                step=$j\n            fi\n        done\n        i=$step\n        jumps=$((jumps+1))\n    done\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191199,
      "stdout": "<_io.BufferedReader name=6>",
      "stderr": "<_io.BufferedReader name=19>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local jumps=0\n    while [ $i -lt $n ]\n    do\n        if [ $((i + arr[i])) -gt $((n - 1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        local max_index=$i\n        local max_value=${arr[i]}\n        for ((j=$((i + 1)); j<=$((i + arr[i])); j++))\n        do\n            if [ $((j + arr[j])) -gt $((max_value + max_index)) ]\n            then\n                max_index=$j\n                max_value=${arr[j]}\n            fi\n        done\n        i=$max_index\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191199,
      "stdout": "<_io.BufferedReader name=21>",
      "stderr": "<_io.BufferedReader name=26>",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n list=$1\n    local target=$2\n    local jumps=0\n    local current_position=0\n    local next_position=0\n    local i=0\n    while [ $current_position -lt $target ]; do\n        next_position=$current_position\n        while [ $i -le $next_position ]; do\n            next_position=$((next_position + list[i]))\n            i=$((i + 1))\n        done\n        if [ $next_position -eq $current_position ]; then\n            echo \"failure\"\n            return\n        fi\n        current_position=$next_position\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp32abnfo2.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -a arr=($1)\n    local n=${#arr[@]}\n    local jump=0\n    local i=0\n    while [ $i -lt $n ]\n    do\n        if [ ${arr[$i]} -eq 0 ]\n        then\n            echo \"Cannot reach the end\"\n            return\n        fi\n        if [ $i -eq $((n-1)) ]\n        then\n            echo \"Reached the end\"\n            return\n        fi\n        local max_reach=$((i+arr[i]))\n        local steps=$arr[i]\n        local j=$i\n        while [ $j -lt $((i+arr[i])) ]\n        do\n            if [ $((j+arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j+arr[j]))\n                steps=$((j-i))\n            fi\n            j=$((j+1))\n        done\n        jump=$((jump+1))\n        i=$((i+steps))\n    done\n    echo \"Minimum jumps required: $jump\"\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jumps=0\n    local max_reach=0\n    local steps=0\n\n    while [ $i -lt $n ]\n    do\n        max_reach=$((i + arr[i]))\n        if [ $max_reach -gt $((n - 1)) ]\n        then\n            jumps=$((jumps + 1))\n            break\n        fi\n        steps=$((max_reach + 1))\n        for ((j = i + 1; j < steps; j++))\n        do\n            if [ $((j + arr[j])) -gt $max_reach ]\n            then\n                max_reach=$((j + arr[j]))\n                steps=$((max_reach + 1))\n            fi\n        done\n        i=$j\n        jumps=$((jumps + 1))\n    done\n    echo $jumps\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp2noflsec.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    local -n arr=$1\n    local n=$2\n    local i=0\n    local j=0\n    local jump=0\n    local min_jump=0\n    local min_jump_index=0\n    local temp_jump=0\n    local temp_jump_index=0\n    local temp_jump_index_2=0\n    local temp_jump_index_3=0\n    local temp_jump_index_4=0\n    local temp_jump_index_5=0\n    local temp_jump_index_6=0\n    local temp_jump_index_7=0\n    local temp_jump_index_8=0\n    local temp_jump_index_9=0\n    local temp_jump_index_10=0\n    local temp_jump_index_11=0\n    local temp_jump_index_12=0\n    local temp_jump_index_13=0\n    local temp_jump_index_14=0\n    local temp_jump_index_15=0\n    local temp_jump_index_16=0\n    local temp_jump_index_17=0\n    local temp_jump_index_18=0\n    local temp_jump_index_19=0\n    local temp_jump_index_20=0\n    local temp_jump_index_21=0\n    local temp_jump_index_22=0\n    local temp_jump_index_23=0\n    local temp_jump_index_24=0\n    local temp_jump_index_25=0\n    local temp_jump_index_26=0\n    local temp_jump_index_27=0\n    local temp_jump_index_28=0\n    local temp_jump_index_29=0\n    local temp_jump_index_30=0\n    local temp_jump_index_31=0\n    local temp_jump_index_32=0\n    local temp_jump_index_33=0\n    local temp_jump_index_34=0\n    local temp_jump_index_35=0\n    local temp_jump_index_36=0\n    local temp_jump_index_37=0\n    local temp_jump_index_38=0\n}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test",
      "timestamp": 1667191194,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp9vuvn3v7.sh: line 7: local: `3 4': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}