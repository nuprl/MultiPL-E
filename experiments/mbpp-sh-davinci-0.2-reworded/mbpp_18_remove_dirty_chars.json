{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to remove characters from the first string which are present in the second string.\n#\n# $1 is a string\n# $2 is a string\nremove_dirty_chars() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    remove_dirty_chars \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"probasscurve\" \"pros\") = \"bacuve\" ]]\n    [[ $(candidate \"digitalindia\" \"talent\") = \"digiidi\" ]]\n    [[ $(candidate \"exoticmiles\" \"toxic\") = \"emles\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  echo \"$1\" | tr -d \"$2\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  for (( i=0; i<${#string}; i++ )); do\n    local char=${string:i:1}\n    if [[ $dirty_chars != *$char* ]]; then\n      clean_string+=$char\n    fi\n  done\n  echo \"$clean_string\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  local i=0\n  local j=0\n  local char=\"\"\n  local dirty_char=\"\"\n\n  for ((i=0; i<${#string}; i++)); do\n    char=\"${string:$i:1}\"\n    for ((j=0; j<${#dirty_chars}; j++)); do\n      dirty_char=\"${dirty_chars:$j:1}\"\n      if [ \"$char\" == \"$dirty_char\" ]; then\n        char=\"\"\n        break\n      fi\n    done\n    clean_string+=\"$char\"\n  done\n\n  echo \"$clean_string\"",
    "  local -r str1=\"$1\"\n  local -r str2=\"$2\"\n  local -r str1_len=${#str1}\n  local -r str2_len=${#str2}\n  local -r str1_arr=($(echo \"$str1\" | fold -w1))\n  local -r str2_arr=($(echo \"$str2\" | fold -w1))\n  local -r str1_arr_len=${#str1_arr[@]}\n  local -r str2_arr_len=${#str2_arr[@]}\n  local -r str1_arr_last_index=$((str1_arr_len - 1))\n  local -r str2_arr_last_index=$((str2_arr_len - 1))\n  local -r str1_arr_last_char=${str1_arr[str1_arr_last_index]}\n  local -r str2_arr_last_char=${str2_arr[str2_arr_last_index]}\n  local -r str1_arr_last_char_index=$((str1_len - 1))\n  local -r str2_arr_last_char_index=$((str2_len - 1))\n  local -r str1_arr_last_char_index_plus_one=$((str1_arr_last_char_index + 1))\n  local -r str2_arr_last_char_index_plus_one=$((str2_arr_last_char_index + 1))\n  local -r str1_arr_last_char_index_minus_one=$((str1_arr_last_char_index - 1))\n  local -r str2_arr_last_char_index_minus_one=$((str2_arr_last_char_index - 1))\n  local -r str1_arr_last_char_index_minus_two=$((str1_arr_last_char_index - 2))\n  local -r str2_arr_last_char_index_minus_two=$((str2_arr_last_char_index - 2))\n  local -r str1_arr_last_char_",
    "  local str1=$1\n  local str2=$2\n  local result=\"\"\n  for (( i=0; i<${#str1}; i++ )); do\n    local char=${str1:$i:1}\n    if [[ $str2 != *\"$char\"* ]]; then\n      result+=$char\n    fi\n  done\n  echo $result",
    "    local clean_string=\"\"\n    local dirty_chars=\"$2\"\n    local string=\"$1\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=${string:$i:1}\n        if [[ $dirty_chars != *\"$char\"* ]]; then\n            clean_string+=\"$char\"\n        fi\n    done\n    echo \"$clean_string\"",
    "    local clean_string=\"\"\n    local dirty_chars=\"$2\"\n    local string=\"$1\"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=${string:$i:1}\n        if [[ $dirty_chars =~ $char ]]; then\n            continue\n        else\n            clean_string+=$char\n        fi\n    done\n    echo \"$clean_string\"",
    "    local str1=\"$1\"\n    local str2=\"$2\"\n    local str1_len=${#str1}\n    local str2_len=${#str2}\n    local i=0\n    local j=0\n    local temp=\"\"\n    local result=\"\"\n\n    for ((i=0; i<str1_len; i++)); do\n        temp=${str1:i:1}\n        for ((j=0; j<str2_len; j++)); do\n            if [ \"$temp\" == \"${str2:j:1}\" ]; then\n                break\n            fi\n        done\n        if [ $j -eq $str2_len ]; then\n            result+=\"$temp\"\n        fi\n    done\n\n    echo \"$result\"",
    "  local clean_string=\"\"\n  local dirty_string=\"$1\"\n  local dirty_chars=\"$2\"\n  local clean_string_len=0\n  local dirty_string_len=0\n  local dirty_chars_len=0\n  local i=0\n  local j=0\n  local k=0\n  local is_dirty_char=0\n\n  dirty_string_len=${#dirty_string}\n  dirty_chars_len=${#dirty_chars}\n\n  for ((i=0; i<dirty_string_len; i++)); do\n    is_dirty_char=0\n    for ((j=0; j<dirty_chars_len; j++)); do\n      if [[ \"${dirty_string:$i:1}\" == \"${dirty_chars:$j:1}\" ]]; then\n        is_dirty_char=1\n        break\n      fi\n    done\n    if [[ $is_dirty_char -eq 0 ]]; then\n      clean_string=\"$clean_string${dirty_string:$i:1}\"\n    fi\n  done\n  echo \"$clean_string\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  local current_char=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    current_char=\"${string:$i:1}\"\n\n    if [[ $dirty_chars != *\"$current_char\"* ]]; then\n      clean_string+=\"$current_char\"\n    fi\n  done\n\n  echo \"$clean_string\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  local current_char=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    current_char=\"${string:$i:1}\"\n\n    if [[ \"$dirty_chars\" != *\"$current_char\"* ]]; then\n      clean_string+=\"$current_char\"\n    fi\n  done\n\n  echo \"$clean_string\"",
    "    local clean_string=\"\"\n    for ((i=0; i<${#1}; i++)); do\n        local char=${1:$i:1}\n        if [[ $2 != *\"$char\"* ]]; then\n            clean_string+=\"$char\"\n        fi\n    done\n    echo \"$clean_string\"",
    "    local clean_string=\"\"\n    local dirty_string=\"$1\"\n    local dirty_chars=\"$2\"\n    local i=0\n    local j=0\n    local dirty_char=\"\"\n    local clean_char=\"\"\n    local dirty_char_found=0\n\n    for ((i=0; i<${#dirty_string}; i++)); do\n        dirty_char=\"${dirty_string:$i:1}\"\n        dirty_char_found=0\n        for ((j=0; j<${#dirty_chars}; j++)); do\n            clean_char=\"${dirty_chars:$j:1}\"\n            if [[ \"$dirty_char\" == \"$clean_char\" ]]; then\n                dirty_char_found=1\n                break\n            fi\n        done\n        if [[ $dirty_char_found -eq 0 ]]; then\n            clean_string=\"$clean_string$dirty_char\"\n        fi\n    done\n    echo \"$clean_string\"",
    "  local clean_string=\"\"\n  for (( i=0; i<${#1}; i++ )); do\n    if [[ ! ${2} =~ ${1:$i:1} ]]; then\n      clean_string+=\"${1:$i:1}\"\n    fi\n  done\n  echo \"$clean_string\"",
    "  echo $1 | sed \"s/[$2]//g\"",
    "  local clean_string=\"\"\n  local dirty_string=\"$1\"\n  local dirty_chars=\"$2\"\n  for (( i=0; i<${#dirty_string}; i++ )); do\n    local char=${dirty_string:$i:1}\n    if [[ $dirty_chars != *\"$char\"* ]]; then\n      clean_string+=\"$char\"\n    fi\n  done\n  echo \"$clean_string\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  local current_char=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    current_char=\"${string:$i:1}\"\n\n    if [[ ! $dirty_chars =~ \"$current_char\" ]]; then\n      clean_string+=\"$current_char\"\n    fi\n  done\n\n  echo \"$clean_string\"",
    "  local str1=\"$1\"\n  local str2=\"$2\"\n  local str3=\"\"\n  local i=0\n  local j=0\n  local len1=${#str1}\n  local len2=${#str2}\n  for ((i=0; i<len1; i++)); do\n    for ((j=0; j<len2; j++)); do\n      if [ \"${str1:$i:1}\" != \"${str2:$j:1}\" ]; then\n        str3=\"$str3${str1:$i:1}\"\n      fi\n    done\n  done\n  echo \"$str3\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  for (( i=0; i<${#string}; i++ )); do\n    if [[ ! $dirty_chars =~ ${string:$i:1} ]]; then\n      clean_string+=\"${string:$i:1}\"\n    fi\n  done\n  echo \"$clean_string\"",
    "  local clean_string=\"\"\n  local dirty_chars=\"$2\"\n  local string=\"$1\"\n  local i=0\n  local char=\"\"\n\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    if [[ \"$dirty_chars\" != *\"$char\"* ]]; then\n      clean_string+=\"$char\"\n    fi\n  done\n\n  echo \"$clean_string\""
  ]
}