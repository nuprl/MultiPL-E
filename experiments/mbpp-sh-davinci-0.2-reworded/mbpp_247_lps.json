{
  "name": "mbpp_247_lps",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the length of the longest palindromic subsequence in the given string.\n#\n# $1 is a string\nlps() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    lps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TENS FOR TENS\") = \"5\" ]]\n    [[ $(candidate \"CARDIO FOR CARDS\") = \"7\" ]]\n    [[ $(candidate \"PART OF THE JOURNEY IS PART\") = \"9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local s=$1\n    local n=${#s}\n    local i j k l\n    local -a L\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((l=2; l<=n; l++)); do\n        for ((i=0; i<n-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                if ((l == 2)); then\n                    L[i,j]=2\n                else\n                    L[i,j]=$((L[i+1,j-1]+2))\n                fi\n            else\n                L[i,j]=$((L[i,j-1] > L[i+1,j] ? L[i,j-1] : L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "  if [[ -z $1 ]]; then\n    echo 0\n    return\n  fi\n\n  local n=$(echo -n $1 | wc -c)\n  local i j k l\n\n  local table=()\n  for (( i=0; i<$n; i++ )); do\n    table[$i,$i]=1\n  done\n\n  for (( l=2; l<=$n; l++ )); do\n    for (( i=0; i<$n-$l+1; i++ )); do\n      j=$(( i+l-1 ))\n      if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          table[$i,$j]=2\n        else\n          table[$i,$j]=$(( table[$(( i+1 )),$(( j-1 ))] + 2 ))\n        fi\n      else\n        table[$i,$j]=$(( table[$i,$(( j-1 ))] > table[$(( i+1 )),$j] ? table[$i,$(( j-1 ))] : table[$(( i+1 )),$j] ))\n      fi\n    done\n  done\n\n  echo ${table[0,$(( n-1 ))]}",
    "    local n=$1\n    local i j k\n    local -a L\n    local -a C\n\n    for ((i=0; i<n; i++)); do\n        L[$i,$i]=1\n    done\n\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${C[$i]} == ${C[$j]} ]]; then\n                L[$i,$j]=$((2+L[$((i+1)),$((j-1))]))\n            else\n                L[$i,$j]=$((max L[$i,$((j-1))] L[$((i+1)),$j]))\n            fi\n        done\n    done\n\n    echo ${L[0,$((n-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 && ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_arr[$i,$j]=2\n      elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n      else\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local s=$1\n  local len=${#s}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [ $k -eq 2 ] && [ \"${s:i:1}\" == \"${s:j:1}\" ]; then\n        lps[i,j]=2\n      elif [ \"${s:i:1}\" == \"${s:j:1}\" ]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a arr\n    for ((i=0;i<len;i++)); do\n        arr[i,i]=1\n    done\n    for ((l=2;l<=len;l++)); do\n        for ((i=0;i<len-l+1;i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    arr[i,j]=2\n                else\n                    arr[i,j]=$((arr[i+1,j-1]+2))\n                fi\n            else\n                arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${arr[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n\n  # create a 2D array\n  local arr=()\n  for ((i=0; i<len; i++)); do\n    arr[$i]=()\n    for ((j=0; j<len; j++)); do\n      arr[$i][$j]=0\n    done\n  done\n\n  # fill the array\n  for ((k=0; k<len; k++)); do\n    for ((i=0, j=k; j<len; i++, j++)); do\n      if ((i == j)); then\n        arr[$i][$j]=1\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        arr[$i][$j]=$((arr[$((i+1))][$((j-1))] + 2))\n      else\n        arr[$i][$j]=$((arr[$i][$((j-1))] > arr[$((i+1))][$j] ? arr[$i][$((j-1))] : arr[$((i+1))][$j]))\n      fi\n    done\n  done\n\n  echo ${arr[0][$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} && $k == 2 ]]; then\n        lps[$i,$j]=2\n      elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n      else\n        lps[$i,$j]=$((lps[$((i+1)),$j]>lps[$i,$((j-1))]?lps[$((i+1)),$j]:lps[$i,$((j-1))]))\n      fi\n    done\n  done\n\n  echo ${lps[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps_arr[$i,$j]=2\n        else\n          lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,$((len-1))]}",
    "  local -i n=$((${#1}-1))\n  local -i i j k\n  local -a L\n  for ((i=0; i<=n; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=n+1; k++)); do\n    for ((i=0; i<=n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n      fi\n    done\n  done\n  echo ${L[0,n]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    local max=0\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 && ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=$((lps[i+1,j-1]+2))\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n            if [[ ${lps[i,j]} -gt $max ]]; then\n                max=${lps[i,j]}\n            fi\n        done\n    done\n    echo $max",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} && $l == 2 ]]; then\n                dp[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$((i+1)),$j] > dp[$i,$((j-1))] ? dp[$((i+1)),$j] : dp[$i,$((j-1))]))\n            fi\n        done\n    done\n\n    echo ${dp[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local n=$((${#1}-1))\n  local i j k\n  local -a L\n  for ((i=0; i<=n; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=n+1; k++)); do\n    for ((i=0; i<=n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((2+L[i+1,j-1]))\n      else\n        L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,n]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        lps_arr[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n      else\n        lps_arr[i,j]=$((lps_arr[i,j-1]>lps_arr[i+1,j]?lps_arr[i,j-1]:lps_arr[i+1,j]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_table=()\n    for ((i=0; i<len; i++)); do\n        lps_table[i]=()\n        for ((j=0; j<len; j++)); do\n            lps_table[i][j]=0\n        done\n    done\n    for ((i=0; i<len; i++)); do\n        lps_table[i][i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps_table[i][j]=$((lps_table[i+1][j-1]+2))\n            else\n                lps_table[i][j]=$((lps_table[i][j-1]>lps_table[i+1][j]?lps_table[i][j-1]:lps_table[i+1][j]))\n            fi\n        done\n    done\n    echo ${lps_table[0][len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local ab=0\n  local ac=0\n  local ad=0\n  local ae=0\n  local af=0\n  local ag=0\n  local ah=0\n  local ai=0\n  local aj=0\n  local ak=0\n  local al=0\n  local am=0\n  local an=0\n  local ao=0\n  local ap=0\n  local aq=0\n  local ar=0\n  local as=0\n  local at=0\n  local au=0\n  local av=0\n  local aw=0\n  local ax=0\n  local ay=0\n  local az=0\n  local ba=0\n  local bb=0\n  local bc=0\n  local bd=0\n  local be=0\n  local bf=0\n  local bg=0\n  local bh=0\n  local bi=0\n  local bj=0\n  local bk=0\n  local bl=0\n  local bm=0\n  local bn=0\n  local bo=0\n  local bp=0\n  local bq=0\n  local br=0\n  local bs=0\n  local bt=0\n  local bu=0\n  local bv=0\n  local bw=0\n  local bx=0\n  local by=0\n  local bz=0\n  local ca=0\n  local cb=0\n  local cc=0\n  local cd=0\n  local ce=0\n  local cf=0\n  local cg=0\n  local ch=0\n  local c",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local len=${#1}\n    local i j k\n    local -a lps\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                lps[i,j]=$((lps[i+1,j-1]+2))\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local arr=()\n  for ((i=0; i<len; i++)); do\n    arr[i]=0\n  done\n  for ((i=1; i<len; i++)); do\n    for ((j=0; j<len-i; j++)); do\n      k=$((j+i))\n      if [[ ${str:j:1} == ${str:k:1} ]]; then\n        arr[k]=$((arr[k-1]+2))\n      else\n        arr[k]=$((arr[k-1]>arr[k]?arr[k-1]:arr[k]))\n      fi\n    done\n  done\n  echo ${arr[len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local max=0\n    local max_i=0\n    local max_j=0\n    local max_k=0\n    local max_l=0\n    local max_m=0\n    local max_n=0\n    local arr=()\n    for ((i=0; i<len; i++)); do\n        arr[i]=()\n        for ((j=0; j<len; j++)); do\n            arr[i][j]=0\n        done\n    done\n    for ((i=0; i<len; i++)); do\n        arr[i][i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [ \"${str:i:1}\" == \"${str:j:1}\" ]; then\n                arr[i][j]=$((arr[i+1][j-1]+2))\n            else\n                arr[i][j]=$((arr[i+1][j]>arr[i][j-1]?arr[i+1][j]:arr[i][j-1]))\n            fi\n            if [ ${arr[i][j]} -gt $max ]; then\n                max=${arr[i][j]}\n                max_i=$i\n                max_j=$j\n                max_k=$k\n                max_l=${arr[i+1][j]}\n                max_m=${arr[i][j-1]}\n                max_n=${arr[i+1][j-1]}\n            fi\n        done\n    done\n    echo \"max: $max\"\n    echo \"max_i: $max_i\"\n    echo \"max_j: $max_j\"\n    echo \"max_k: $max_k\"\n    echo \"max_l: $max_l\"\n    echo \"max_m: $max_m\"\n    echo \"max_",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_matrix=()\n\n  # initialize lps_matrix\n  for ((i=0; i<len; i++)); do\n    lps_matrix[$i]=()\n    for ((j=0; j<len; j++)); do\n      if ((i == j)); then\n        lps_matrix[$i][$j]=1\n      else\n        lps_matrix[$i][$j]=0\n      fi\n    done\n  done\n\n  # calculate lps_matrix\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if ((str[i] == str[j] && k == 2)); then\n        lps_matrix[$i][$j]=2\n      elif ((str[i] == str[j])); then\n        lps_matrix[$i][$j]=$((lps_matrix[$((i+1))][$((j-1))]+2))\n      else\n        lps_matrix[$i][$j]=$((lps_matrix[$((i+1))][$j] > lps_matrix[$i][$((j-1))] ? lps_matrix[$((i+1))][$j] : lps_matrix[$i][$((j-1))]))\n      fi\n    done\n  done\n\n  # print lps_matrix\n  for ((i=0; i<len; i++)); do\n    for ((j=0; j<len; j++)); do\n      printf \"%2d \" ${lps_matrix[$i][$j]}\n    done\n    echo\n  done\n\n  echo ${lps_matrix[0][$((len-1))]}",
    "  local s=$1\n  local n=${#s}\n  local i j k\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${s:$i:1} == ${s:$j:1} ]]; then\n        L[$i,$j]=$((2 + L[$((i+1)),$((j-1))]))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))] > L[$((i+1)),$j] ? L[$i,$((j-1))] : L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((n-1))]}",
    "    local s=$1\n    local len=${#s}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${s:$i:1} == ${s:$j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "  local s=\"$1\"\n  local n=${#s}\n  local i j k\n  local L=()\n  for ((i=0;i<n;i++)); do\n    L[i,i]=1\n  done\n  for ((k=2;k<=n;k++)); do\n    for ((i=0;i<n-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((max L[i,j-1] L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n    local aaaaa\n    local bbbbb\n    local ccccc\n    local ddddd\n    local eeeee\n    local fffff",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ \"${str:$i:1}\" == \"${str:$j:1}\" ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[$i,$j]=2\n        else\n          lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${lps[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [ $k -eq 2 ] && [ \"${str:i:1}\" == \"${str:j:1}\" ]; then\n        lps_arr[i,j]=2\n      elif [ \"${str:i:1}\" == \"${str:j:1}\" ]; then\n        lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n      else\n        lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k l\n  local dp=()\n  for ((i=0; i<n; i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2; l<=n; l++)); do\n    for ((i=0; i<n-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          dp[i,j]=2\n        else\n          dp[i,j]=$((dp[i+1,j-1]+2))\n        fi\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,n-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [ $k -eq 2 ] && [ \"${str:$i:1}\" == \"${str:$j:1}\" ]; then\n                lps_arr[$i,$j]=2\n            elif [ \"${str:$i:1}\" == \"${str:$j:1}\" ]; then\n                lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n            else\n                lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${lps_arr[0,$((len-1))]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        dp[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${dp[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k l\n  local -a dp\n  for ((i=0; i<n; i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2; l<=n; l++)); do\n    for ((i=0; i<n-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j] > dp[i,j-1] ? dp[i+1,j] : dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,n-1]}",
    "  local -i len=${#1}\n  local -i i j k\n  local -a L\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "    local string=$1\n    local n=${#string}\n    local i j k\n    local L=()\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${string:i:1} == ${string:j:1} && $k == 2 ]]; then\n                L[i,j]=2\n            elif [[ ${string:i:1} == ${string:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 && ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n      else\n        lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i,j-1]>dp[i+1,j]?dp[i,j-1]:dp[i+1,j]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local s=$1\n    local n=${#s}\n    local i j k\n    local L=()\n    for ((i=0;i<n;i++)); do\n        L[i,i]=1\n    done\n    for ((k=2;k<=n;k++)); do\n        for ((i=0;i<n-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "    local s=$1\n    local n=${#s}\n    local i j k\n    local l=()\n    for ((i=0;i<n;i++)); do\n        l[i,i]=1\n    done\n    for ((k=2;k<=n;k++)); do\n        for ((i=0;i<n-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                l[i,j]=$((2+l[i+1,j-1]))\n            else\n                l[i,j]=$((max ${l[i+1,j]} ${l[i,j-1]}))\n            fi\n        done\n    done\n    echo ${l[0,n-1]}",
    "    local s=$1\n    local n=${#s}\n    local i j k\n    local lps=()\n    for ((i=0;i<n;i++)); do\n        lps[$i,$i]=1\n    done\n    for ((k=2;k<=n;k++)); do\n        for ((i=0;i<n-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 && ${s:$i:1} == ${s:$j:1} ]]; then\n                lps[$i,$j]=2\n            elif [[ ${s:$i:1} == ${s:$j:1} ]]; then\n                lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n            else\n                lps[$i,$j]=$((lps[$((i+1)),$j]>lps[$i,$((j-1))]?lps[$((i+1)),$j]:lps[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${lps[0,$((n-1))]}",
    "    local len=${#1}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local max=0\n    local arr=()\n    for ((i=0; i<len; i++)); do\n        arr[i]=0\n    done\n    for ((i=0; i<len; i++)); do\n        arr[i]=1\n        for ((j=0; j<i; j++)); do\n            if [[ ${1:j:1} == ${1:i:1} ]]; then\n                arr[j]=2\n                for ((k=j+1; k<i; k++)); do\n                    if [[ ${1:j:1} == ${1:i:1} ]]; then\n                        arr[j]=$((arr[j]+2))\n                    fi\n                done\n            fi\n        done\n    done\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -gt $max ]]; then\n            max=${arr[i]}\n        fi\n    done\n    echo $max",
    "  local string=\"$1\"\n  local length=${#string}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local max=0\n  local table=()\n  for ((i=0; i<length; i++)); do\n    table[i,i]=1\n  done\n  for ((l=2; l<=length; l++)); do\n    for ((i=0; i<length-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ \"${string:i:1}\" == \"${string:j:1}\" ]]; then\n        if [[ $l == 2 ]]; then\n          table[i,j]=2\n        else\n          table[i,j]=$((table[i+1,j-1]+2))\n        fi\n      else\n        table[i,j]=$((max(table[i,j-1], table[i+1,j])))\n      fi\n    done\n  done\n  echo ${table[0,length-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local t=0\n    local arr=()\n    local res=()\n    local max=0\n    local max_str=\"\"\n\n    for ((i=0; i<len; i++)); do\n        arr[i]=${str:i:1}\n    done\n\n    for ((k=0; k<len; k++)); do\n        for ((i=0, j=k; i<len-k; i++, j++)); do\n            if [[ $i -eq $j ]]; then\n                res[i,j]=1\n            elif [[ $i -eq $((j-1)) ]]; then\n                if [[ ${arr[i]} == ${arr[j]} ]]; then\n                    res[i,j]=2\n                else\n                    res[i,j]=1\n                fi\n            else\n                if [[ ${arr[i]} == ${arr[j]} ]]; then\n                    res[i,j]=$((res[i+1,j-1]+2))\n                else\n                    res[i,j]=$((res[i+1,j]>res[i,j-1]?res[i+1,j]:res[i,j-1]))\n                fi\n            fi\n        done\n    done\n\n    max=${res[0,len-1]}\n    for ((i=0; i<len; i++)); do\n        for ((j=0; j<len; j++)); do\n            if [[ ${res[i,j]} -eq $max ]]; then\n                max_str=\"${max_str}${arr[i]}\"\n            fi\n        done\n    done\n\n    echo \"$max_str\"",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 && ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n      else\n        lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local len=${#1}\n    local i j k\n    local -a lps\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k\n  local l=()\n  for ((i=0;i<n;i++)); do\n    l[$i,$i]=1\n  done\n  for ((k=2;k<=n;k++)); do\n    for ((i=0;i<n-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        l[$i,$j]=$((l[$((i+1)),$((j-1))]+2))\n      else\n        l[$i,$j]=$((l[$i,$((j-1))]>l[$((i+1)),$j]?l[$i,$((j-1))]:l[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${l[0,$((n-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local s=$1\n    local n=${#s}\n    local i j k l\n    local -a L\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((l=2; l<=n; l++)); do\n        for ((i=0; i<n-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                if [[ $l == 2 ]]; then\n                    L[i,j]=2\n                else\n                    L[i,j]=$((L[i+1,j-1]+2))\n                fi\n            else\n                L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local s=\"$1\"\n  local len=${#s}\n  local i j k l\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ \"${s:i:1}\" == \"${s:j:1}\" ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        table[i,j]=$((table[i+1,j-1]+2))\n      else\n        table[i,j]=$((table[i,j-1]>table[i+1,j]?table[i,j-1]:table[i+1,j]))\n      fi\n    done\n  done\n  echo ${table[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((2+L[i+1,j-1]))\n      else\n        L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((${L[i+1,j]}>${L[i,j-1]}?${L[i+1,j]}:${L[i,j-1]}))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        lps[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n      fi\n    done\n  done\n\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 && ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[$i,$j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n      else\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        lps_arr[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n      else\n        lps_arr[i,j]=$((lps_arr[i,j-1]>lps_arr[i+1,j]?lps_arr[i,j-1]:lps_arr[i+1,j]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local s=$1\n    local n=${#s}\n    local i j k\n    local L=()\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((max ${L[i+1,j]} ${L[i,j-1]}))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "  local str=$1\n  local n=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,n-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        table[i,j]=$((table[i+1,j-1]+2))\n      else\n        table[i,j]=$((table[i,j-1]>table[i+1,j]?table[i,j-1]:table[i+1,j]))\n      fi\n    done\n  done\n  echo ${table[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_matrix=()\n\n    for ((i=0; i<len; i++)); do\n        lps_matrix[$i,$i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$((j-1))]+2))\n            else\n                lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$j]>lps_matrix[$i,$((j-1))]?lps_matrix[$((i+1)),$j]:lps_matrix[$i,$((j-1))]))\n            fi\n        done\n    done\n\n    echo ${lps_matrix[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))] > dp[$((i+1)),$j] ? dp[$i,$((j-1))] : dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0;i<len;i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local s=\"$1\"\n  local n=${#s}\n  local i j k\n  local dp=()\n  for ((i=0; i<n; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${s:$i:1} == ${s:$j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))] > dp[$((i+1)),$j] ? dp[$i,$((j-1))] : dp[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${dp[0,$((n-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n            else\n                lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${lps[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local -i n=${#1}\n    local -i i j k\n    local -a L\n    for ((i=0;i<n;i++)); do\n        L[i,i]=1\n    done\n    for ((k=2;k<=n;k++)); do\n        for ((i=0;i<n-k+1;i++)); do\n            j=i+k-1\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k\n  local lps=()\n  for ((i=0; i<n; i++)); do\n    lps[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${s:$i:1} == ${s:$j:1} && $k -eq 2 ]]; then\n        lps[$i,$j]=2\n      elif [[ ${s:$i:1} == ${s:$j:1} ]]; then\n        lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n      else\n        lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${lps[0,$((n-1))]}",
    "  local string=$1\n  local length=${#string}\n  local i j k l\n  local L=()\n  for ((i=0; i<length; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=length; k++)); do\n    for ((i=0; i<length-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${string:i:1} == ${string:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,length-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 && ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_arr[$i,$j]=2\n      elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n      else\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                L[$i,$j]=$((2+L[$((i+1)),$((j-1))]))\n            else\n                L[$i,$j]=$((max ${L[$((i+1)),$j]} ${L[$i,$((j-1))]}))\n            fi\n        done\n    done\n    echo ${L[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[i,j]=$((dp[i+1,j-1]+2))\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${dp[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k l\n  local -a a\n  for ((i=0;i<n;i++)); do\n    a[i,i]=1\n  done\n  for ((l=2;l<=n;l++)); do\n    for ((i=0;i<n-l+1;i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        a[i,j]=$((a[i+1,j-1]+2))\n      else\n        a[i,j]=$((a[i,j-1]>a[i+1,j]?a[i,j-1]:a[i+1,j]))\n      fi\n    done\n  done\n  echo ${a[0,n-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local x=0\n  local y=0\n  local z=0\n  local lps=0\n  local lps_arr=()\n\n  for ((i=0; i<len; i++)); do\n    lps_arr[i]=0\n  done\n\n  for ((i=0; i<len; i++)); do\n    lps_arr[i*len+i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n        lps_arr[i*len+j]=$((lps_arr[(i+1)*len+j-1]+2))\n      else\n        lps_arr[i*len+j]=$((lps_arr[(i+1)*len+j]>lps_arr[i*len+j-1]?lps_arr[(i+1)*len+j]:lps_arr[i*len+j-1]))\n      fi\n    done\n  done\n\n  lps=${lps_arr[(len-1)*len+len-1]}\n  echo \"$lps\"",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_table=()\n    for ((i=0; i<len; i++)); do\n        lps_table[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    lps_table[i,j]=2\n                else\n                    lps_table[i,j]=$((lps_table[i+1,j-1]+2))\n                fi\n            else\n                lps_table[i,j]=$((max ${lps_table[i+1,j]} ${lps_table[i,j-1]}))\n            fi\n        done\n    done\n    echo ${lps_table[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 ]]; then\n                if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                    lps_arr[$i,$j]=2\n                else\n                    lps_arr[$i,$j]=1\n                fi\n            else\n                if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                    lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n                else\n                    lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n                fi\n            fi\n        done\n    done\n    echo ${lps_arr[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local L=()\n\n    for ((i=0; i<len; i++)); do\n        L[$i,$i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n            else\n                L[$i,$j]=$((L[$((i+1)),$j]>L[$i,$((j-1))]?L[$((i+1)),$j]:L[$i,$((j-1))]))\n            fi\n        done\n    done\n\n    echo ${L[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[$i,$i]=1\n  done\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          table[$i,$j]=2\n        else\n          table[$i,$j]=$((table[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        table[$i,$j]=$((table[$i,$((j-1))] > table[$((i+1)),$j] ? table[$i,$((j-1))] : table[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${table[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k l\n    local dp=()\n    for ((i=0;i<len;i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2;l<=len;l++)); do\n        for ((i=0;i<len-l+1;i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${lps[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local t=0\n    local arr=()\n    local max=0\n\n    for ((i=0; i<len; i++)); do\n        arr[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    arr[i,j]=2\n                else\n                    arr[i,j]=$((arr[i+1,j-1]+2))\n                fi\n            else\n                arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${arr[0,len-1]}",
    "    local len=${#1}\n    local i j k\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if ((k == 2)); then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j] > dp[i,j-1] ? dp[i+1,j] : dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a dp\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j] > dp[i,j-1] ? dp[i+1,j] : dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                L[i,j]=$((2+L[i+1,j-1]))\n            else\n                L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n\n    # initialize dp table\n    for ((i=0; i<len; i++)); do\n        dp[i]=()\n        for ((j=0; j<len; j++)); do\n            dp[i][j]=0\n        done\n    done\n\n    # fill in dp table\n    for ((k=1; k<len; k++)); do\n        for ((i=0; i<len-k; i++)); do\n            j=$((i+k))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i][j]=$((dp[i+1][j-1]+2))\n            else\n                dp[i][j]=$((dp[i+1][j]>dp[i][j-1]?dp[i+1][j]:dp[i][j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0][len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if (( k == 2 )); then\n          table[i,j]=2\n        else\n          table[i,j]=$((table[i+1,j-1]+2))\n        fi\n      else\n        table[i,j]=$((table[i,j-1] > table[i+1,j] ? table[i,j-1] : table[i+1,j]))\n      fi\n    done\n  done\n\n  echo ${table[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k\n  local -a a\n  for ((i=0; i<n; i++)); do\n    a[i,i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          a[i,j]=2\n        else\n          a[i,j]=$((a[i+1,j-1]+2))\n        fi\n      else\n        a[i,j]=$((a[i,j-1]>a[i+1,j]?a[i,j-1]:a[i+1,j]))\n      fi\n    done\n  done\n  echo ${a[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 ]]; then\n                if [[ ${str:i:1} == ${str:j:1} ]]; then\n                    lps_arr[i,j]=2\n                else\n                    lps_arr[i,j]=1\n                fi\n            else\n                if [[ ${str:i:1} == ${str:j:1} ]]; then\n                    lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n                else\n                    lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n                fi\n            fi\n        done\n    done\n    echo ${lps_arr[0,len-1]}",
    "\tlocal str=\"$1\"\n\tlocal len=${#str}\n\tlocal i j k\n\tlocal lps_arr=()\n\tfor ((i=0; i<len; i++)); do\n\t\tlps_arr[$i]=0\n\tdone\n\tfor ((i=0; i<len; i++)); do\n\t\tlps_arr[$i,$i]=1\n\tdone\n\tfor ((k=2; k<=len; k++)); do\n\t\tfor ((i=0; i<len-k+1; i++)); do\n\t\t\tj=$((i+k-1))\n\t\t\tif [[ ${str:$i:1} == ${str:$j:1} && $k == 2 ]]; then\n\t\t\t\tlps_arr[$i,$j]=2\n\t\t\telif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n\t\t\t\tlps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n\t\t\telse\n\t\t\t\tlps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo ${lps_arr[0,$((len-1))]}",
    "\tlocal str=$1\n\tlocal len=${#str}\n\tlocal i j k\n\tlocal lps=()\n\tfor ((i=0; i<len; i++)); do\n\t\tlps[i,i]=1\n\tdone\n\tfor ((k=2; k<=len; k++)); do\n\t\tfor ((i=0; i<len-k+1; i++)); do\n\t\t\tj=$((i+k-1))\n\t\t\tif [[ ${str:i:1} == ${str:j:1} ]]; then\n\t\t\t\tlps[i,j]=$((lps[i+1,j-1]+2))\n\t\t\telse\n\t\t\t\tlps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0;i<len;i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "    local s=$1\n    local n=${#s}\n    local i j k\n    local L=()\n    for ((i=0; i<n; i++)); do\n        L[$i,$i]=1\n    done\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${s:$i:1} == ${s:$j:1} ]]; then\n                L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n            else\n                L[$i,$j]=$((max ${L[$((i+1)),$j]} ${L[$i,$((j-1))]}))\n            fi\n        done\n    done\n    echo ${L[0,$((n-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=$((lps[i+1,j-1]+2))\n            else\n                lps[i,j]=$((lps[i,j-1]>lps[i+1,j]?lps[i,j-1]:lps[i+1,j]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "    local string=$1\n    local length=${#string}\n    local table=()\n    local i j k\n\n    # Initialize the table\n    for ((i=0; i<length; i++)); do\n        table[i,i]=1\n    done\n\n    # Build the table\n    for ((k=2; k<=length; k++)); do\n        for ((i=0; i<length-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${string:i:1} == ${string:j:1} ]]; then\n                table[i,j]=$((table[i+1,j-1]+2))\n            else\n                table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n            fi\n        done\n    done\n\n    # Return the result\n    echo ${table[0,length-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local len=${#1}\n    local i j k\n    local -a arr=()\n    for ((i=0; i<len; i++)); do\n        arr[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    arr[$i,$j]=2\n                else\n                    arr[$i,$j]=$((arr[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                arr[$i,$j]=$((arr[$i,$((j-1))]>arr[$((i+1)),$j]?arr[$i,$((j-1))]:arr[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${arr[0,$((len-1))]}",
    "  local string=$1\n  local length=${#string}\n  local i j k\n\n  # create a 2D array\n  local -a matrix\n  for ((i=0; i<length; i++)); do\n    matrix[$i]=()\n    for ((j=0; j<length; j++)); do\n      matrix[$i][$j]=0\n    done\n  done\n\n  # fill the matrix\n  for ((k=1; k<=length; k++)); do\n    for ((i=0; i<length-k+1; i++)); do\n      j=$((i+k-1))\n      if [ $i -eq $j ]; then\n        matrix[$i][$j]=1\n      elif [ \"${string:$i:1}\" = \"${string:$j:1}\" ]; then\n        matrix[$i][$j]=$((matrix[$((i+1))][$((j-1))]+2))\n      else\n        matrix[$i][$j]=$((matrix[$((i+1))][$j]>matrix[$i][$((j-1))]?matrix[$((i+1))][$j]:matrix[$i][$((j-1))]))\n      fi\n    done\n  done\n\n  # return the result\n  echo ${matrix[0][$((length-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n  local cccc=0\n  local dddd=0\n  local eee",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i,j-1]>dp[i+1,j]?dp[i,j-1]:dp[i+1,j]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local s=$1\n  local n=${#s}\n  local i j k l\n  local dp=()\n  for ((i=0; i<n; i++)); do\n    dp[i,i]=1\n  done\n  for ((l=2; l<=n; l++)); do\n    for ((i=0; i<n-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          dp[i,j]=2\n        else\n          dp[i,j]=$((dp[i+1,j-1]+2))\n        fi\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        table[i,j]=$((table[i+1,j-1]+2))\n      else\n        table[i,j]=$((table[i,j-1]>table[i+1,j]?table[i,j-1]:table[i+1,j]))\n      fi\n    done\n  done\n  echo ${table[0,len-1]}",
    "  local i j k l\n  local n=$((${#1}-1))\n  local L=()\n  for ((i=0;i<=n;i++)); do\n    L[i,i]=1\n  done\n  for ((l=2;l<=n+1;l++)); do\n    for ((i=0;i<=n-l+1;i++)); do\n      j=$((i+l-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,n]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          table[i,j]=2\n        else\n          table[i,j]=$((table[i+1,j-1]+2))\n        fi\n      else\n        table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${table[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      local j=$((i+l-1))\n      if [[ ${str:i:1} == ${str:j:1} && $l == 2 ]]; then\n        table[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        table[i,j]=$((table[i+1,j-1]+2))\n      else\n        table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n      fi\n    done\n  done\n  echo ${table[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          dp[i,j]=2\n        else\n          dp[i,j]=$((dp[i+1,j-1]+2))\n        fi\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n\n    # Create a table to store results of subproblems\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[$i]=()\n        for ((j=0; j<len; j++)); do\n            table[$i][$j]=0\n        done\n    done\n\n    # Strings of length 1 are palindrome of length 1\n    for ((i=0; i<len; i++)); do\n        table[$i][$i]=1\n    done\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n    # cl is length of substring\n    for ((cl=2; cl<=len; cl++)); do\n        for ((i=0; i<len-cl+1; i++)); do\n            j=$((i+cl-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                table[$i][$j]=$((table[$((i+1))][$((j-1))]+2))\n            else\n                table[$i][$j]=$((${table[$i][$((j-1))]}>${table[$((i+1))][$j]}?${table[$i][$((j-1))]}:${table[$((i+1))][$j]}))\n            fi\n        done\n    done\n\n    echo ${table[0][$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n  local cccc=0\n  local dddd=0\n  local",
    "  local s=$1\n  local n=${#s}\n  local i j k l\n  local -a a\n  for ((i=0;i<n;i++)); do\n    a[i,i]=1\n  done\n  for ((l=2;l<=n;l++)); do\n    for ((i=0;i<n-l+1;i++)); do\n      j=$((i+l-1))\n      if [[ ${s:i:1} == ${s:j:1} ]]; then\n        a[i,j]=$((a[i+1,j-1]+2))\n      else\n        a[i,j]=$((a[i+1,j]>a[i,j-1]?a[i+1,j]:a[i,j-1]))\n      fi\n    done\n  done\n  echo ${a[0,n-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n      else\n        lps[$i,$j]=$((lps[$i,$((j-1))] > lps[$((i+1)),$j] ? lps[$i,$((j-1))] : lps[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${lps[0,$((len-1))]}",
    "\tlocal str=$1\n\tlocal len=${#str}\n\tlocal i j k l\n\tlocal -a arr\n\n\tfor ((i=0; i<len; i++)); do\n\t\tarr[i,i]=1\n\tdone\n\n\tfor ((l=2; l<=len; l++)); do\n\t\tfor ((i=0; i<len-l+1; i++)); do\n\t\t\tj=$((i+l-1))\n\t\t\tif [[ ${str:i:1} == ${str:j:1} && l == 2 ]]; then\n\t\t\t\tarr[i,j]=2\n\t\t\telif [[ ${str:i:1} == ${str:j:1} ]]; then\n\t\t\t\tarr[i,j]=$((arr[i+1,j-1]+2))\n\t\t\telse\n\t\t\t\tarr[i,j]=$((arr[i,j-1]>arr[i+1,j]?arr[i,j-1]:arr[i+1,j]))\n\t\t\tfi\n\t\tdone\n\tdone\n\n\techo ${arr[0,len-1]}",
    "    local len=${#1}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[$i,$j]=2\n                else\n                    dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local -a arr\n\n  for ((i=0; i<len; i++)); do\n    arr[i,i]=1\n  done\n\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${str:i:1} == ${str:j:1} && l == 2 ]]; then\n        arr[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        arr[i,j]=$((arr[i+1,j-1]+2))\n      else\n        arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n      fi\n    done\n  done\n\n  echo ${arr[0,len-1]}",
    "    local string=\"$1\"\n    local length=${#string}\n    local i j k\n    local lps=()\n\n    for ((i=0; i<length; i++)); do\n        lps[i,i]=1\n    done\n\n    for ((k=2; k<=length; k++)); do\n        for ((i=0; i<length-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${string:i:1} == ${string:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${lps[0,length-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n\n    # initialize the matrix\n    for ((i=0; i<len; i++)); do\n        for ((j=0; j<len; j++)); do\n            if ((i == j)); then\n                matrix[$i,$j]=1\n            else\n                matrix[$i,$j]=0\n            fi\n        done\n    done\n\n    # fill the matrix\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if ((str[i] == str[j] && k == 2)); then\n                matrix[$i,$j]=2\n            elif ((str[i] == str[j])); then\n                matrix[$i,$j]=$((matrix[$((i+1)),$((j-1))]+2))\n            else\n                matrix[$i,$j]=$((matrix[$i,$((j-1))]>matrix[$((i+1)),$j]?matrix[$i,$((j-1))]:matrix[$((i+1)),$j]))\n            fi\n        done\n    done\n\n    echo ${matrix[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_matrix=()\n\n  for ((i=0; i<len; i++)); do\n    lps_matrix[$i,$i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} && $k == 2 ]]; then\n        lps_matrix[$i,$j]=2\n      elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$((j-1))]+2))\n      else\n        lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$j]>lps_matrix[$i,$((j-1))]?lps_matrix[$((i+1)),$j]:lps_matrix[$i,$((j-1))]))\n      fi\n    done\n  done\n\n  echo ${lps_matrix[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local L=()\n\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                L[i,j]=$((L[i+1,j-1]+2))\n            else\n                L[i,j]=$((L[i,j-1] > L[i+1,j] ? L[i,j-1] : L[i+1,j]))\n            fi\n        done\n    done\n\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i,j-1]>L[i+1,j]?L[i,j-1]:L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        lps[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local s=\"$1\"\n  local n=${#s}\n  local i j k\n  local L=()\n  for ((i=0; i<n; i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ \"${s:i:1}\" == \"${s:j:1}\" ]]; then\n        L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))] > L[$((i+1)),$j] ? L[$i,$((j-1))] : L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$((n-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local table=()\n    for ((i=0; i<len; i++)); do\n        table[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n                table[i,j]=$((table[i+1,j-1]+2))\n            else\n                table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n            fi\n        done\n    done\n    echo ${table[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a lps\n\n    # Initialize the lps array\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n\n    # Build the lps array\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local L=()\n    for ((i=0; i<len; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    L[i,j]=2\n                else\n                    L[i,j]=$((L[i+1,j-1]+2))\n                fi\n            else\n                L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n            fi\n        done\n    done\n    echo ${L[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local -a lps\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n        lps[i,j]=2\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0;i<len;i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          dp[i,j]=2\n        else\n          dp[i,j]=$((dp[i+1,j-1]+2))\n        fi\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n  for ((i=0;i<len;i++)); do\n    table[$i,$i]=1\n  done\n  for ((k=2;k<=len;k++)); do\n    for ((i=0;i<len-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        table[$i,$j]=$((table[$((i+1)),$((j-1))]+2))\n      else\n        table[$i,$j]=$((table[$i,$((j-1))]>table[$((i+1)),$j]?table[$i,$((j-1))]:table[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${table[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps_matrix=()\n  for ((i=0; i<len; i++)); do\n    lps_matrix[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} && $k == 2 ]]; then\n        lps_matrix[$i,$j]=2\n      elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$((j-1))]+2))\n      else\n        lps_matrix[$i,$j]=$((lps_matrix[$((i+1)),$j]>lps_matrix[$i,$((j-1))]?lps_matrix[$((i+1)),$j]:lps_matrix[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps_matrix[0,$((len-1))]}",
    "    if [[ -z \"$1\" ]]; then\n        echo 0\n        return\n    fi\n\n    local len=${#1}\n    local i j k l\n    local table=()\n\n    for ((i=0; i<len; i++)); do\n        table[i,i]=1\n    done\n\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ \"${1:i:1}\" == \"${1:j:1}\" ]]; then\n                if [[ $((l-2)) -eq 0 ]]; then\n                    table[i,j]=2\n                else\n                    table[i,j]=$((table[i+1,j-1]+2))\n                fi\n            else\n                table[i,j]=$((table[i+1,j]>table[i,j-1]?table[i+1,j]:table[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${table[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local -i n=$((${#1}-1))\n  local -i i j k\n  local -a L\n  for ((i=0;i<=n;i++)); do\n    L[$i,$i]=1\n  done\n  for ((k=2;k<=n+1;k++)); do\n    for ((i=0;i<=n-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n        L[$i,$j]=$((L[$((i+1)),$((j-1))]+2))\n      else\n        L[$i,$j]=$((L[$i,$((j-1))]>L[$((i+1)),$j]?L[$i,$((j-1))]:L[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${L[0,$n]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps_arr=()\n    for ((i=0; i<len; i++)); do\n        lps_arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k -eq 2 ]]; then\n                    lps_arr[i,j]=2\n                else\n                    lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n                fi\n            else\n                lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps_arr[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local arr=()\n    for ((i=0; i<len; i++)); do\n        arr[i]=0\n        arr[i*len+i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                arr[i*len+j]=$((arr[(i+1)*len+j-1]+2))\n            else\n                arr[i*len+j]=$((arr[i*len+j-1]>arr[(i+1)*len+j]?arr[i*len+j-1]:arr[(i+1)*len+j]))\n            fi\n        done\n    done\n    echo ${arr[(len-1)*len+len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local max=0\n    local dp=()\n\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $((l-2)) -eq 0 ]]; then\n                    dp[i,j]=2\n                else\n                    dp[i,j]=$((dp[i+1,j-1]+2))\n                fi\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${dp[0,len-1]}",
    "    local len=${#1}\n    local i j k\n    local -a lps\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    lps[i,j]=2\n                else\n                    lps[i,j]=$((lps[i+1,j-1]+2))\n                fi\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n    echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$((i+1)),$j]>dp[$i,$((j-1))]?dp[$((i+1)),$j]:dp[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ \"${str:i:1}\" == \"${str:j:1}\" ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i,j-1] > L[i+1,j] ? L[i,j-1] : L[i+1,j]))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "    local -i n=$((${#1}-1))\n    local -i i j k\n    local -a L\n    for ((i=0; i<=n; i++)); do\n        L[i,i]=1\n    done\n    for ((k=2; k<=n+1; k++)); do\n        for ((i=0; i<=n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} ]]; then\n                L[i,j]=$((2+L[i+1,j-1]))\n            else\n                L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n            fi\n        done\n    done\n    echo ${L[0,n]}",
    "  local -i n=${#1}\n  local -i i j k\n  local -a L\n  for ((i=0; i<n; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=n; k++)); do\n    for ((i=0; i<n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} && $k == 2 ]]; then\n        L[i,j]=2\n      elif [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i+1,j] > L[i,j-1] ? L[i+1,j] : L[i,j-1]))\n      fi\n    done\n  done\n  echo ${L[0,n-1]}",
    "  local str=\"$1\"\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 ]]; then\n        if [[ ${str:i:1} == ${str:j:1} ]]; then\n          lps_arr[i,j]=2\n        else\n          lps_arr[i,j]=1\n        fi\n      else\n        if [[ ${str:i:1} == ${str:j:1} ]]; then\n          lps_arr[i,j]=$((lps_arr[i+1,j-1]+2))\n        else\n          lps_arr[i,j]=$((lps_arr[i+1,j]>lps_arr[i,j-1]?lps_arr[i+1,j]:lps_arr[i,j-1]))\n        fi\n      fi\n    done\n  done\n  echo ${lps_arr[0,len-1]}",
    "  local n=$1\n  local l=${#n}\n  local i j k\n  local -a a\n  for ((i=0;i<l;i++)); do\n    a[i,i]=1\n  done\n  for ((k=2;k<=l;k++)); do\n    for ((i=0;i<l-k+1;i++)); do\n      j=$((i+k-1))\n      if [[ ${n:i:1} == ${n:j:1} ]]; then\n        a[i,j]=$((a[i+1,j-1]+2))\n      else\n        a[i,j]=$((a[i+1,j]>a[i,j-1]?a[i+1,j]:a[i,j-1]))\n      fi\n    done\n  done\n  echo ${a[0,l-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        table[$i,$j]=$((table[$((i+1)),$((j-1))]+2))\n      else\n        table[$i,$j]=$((table[$i,$((j-1))]>table[$((i+1)),$j]?table[$i,$((j-1))]:table[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${table[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} && $k == 2 ]]; then\n                lps[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=$((lps[i+1,j-1]+2))\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n        done\n    done\n\n    echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          dp[i,j]=2\n        else\n          dp[i,j]=$((dp[i+1,j-1]+2))\n        fi\n      else\n        dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n      fi\n    done\n  done\n  echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0;i<len;i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2;k<=len;k++)); do\n        for ((i=0;i<len-k+1;i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $k == 2 ]]; then\n                    dp[$i,$j]=2\n                else\n                    dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n                fi\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "  local len=${#1}\n  local i=0\n  local j=0\n  local k=0\n  local lps=0\n  local arr=()\n  for ((i=0; i<len; i++)); do\n    arr[i]=0\n  done\n  for ((i=0; i<len; i++)); do\n    arr[i]=1\n  done\n  for ((i=1; i<len; i++)); do\n    for ((j=0; j<i; j++)); do\n      if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n        arr[$i]=$((${arr[$j]}+2))\n      fi\n    done\n  done\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[$i]} -gt $lps ]]; then\n      lps=${arr[$i]}\n    fi\n  done\n  echo $lps",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[$i,$j]=2\n        else\n          lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        lps[$i,$j]=$((lps[$i,$((j-1))]>lps[$((i+1)),$j]?lps[$i,$((j-1))]:lps[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${lps[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))] > dp[$((i+1)),$j] ? dp[$i,$((j-1))] : dp[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local dp=()\n  for ((i=0; i<len; i++)); do\n    dp[$i,$i]=1\n  done\n  for ((l=2; l<=len; l++)); do\n    for ((i=0; i<len-l+1; i++)); do\n      j=$((i+l-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          dp[$i,$j]=2\n        else\n          dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n      fi\n    done\n  done\n  echo ${dp[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i,j-1] > lps[i+1,j] ? lps[i,j-1] : lps[i+1,j]))\n      fi\n    done\n  done\n\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=0\n  local table=()\n  for ((i=0; i<len; i++)); do\n    table[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          table[i,j]=2\n        else\n          table[i,j]=$((table[i+1,j-1]+2))\n        fi\n      else\n        table[i,j]=$((table[i,j-1]>table[i+1,j]?table[i,j-1]:table[i+1,j]))\n      fi\n      if [[ ${table[i,j]} -gt $lps ]]; then\n        lps=${table[i,j]}\n      fi\n    done\n  done\n  echo $lps",
    "    local len=${#1}\n    local i j k\n    local -a arr\n    for ((i=0; i<len; i++)); do\n        arr[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${1:i:1} == ${1:j:1} && $k -eq 2 ]]; then\n                arr[i,j]=2\n            elif [[ ${1:i:1} == ${1:j:1} ]]; then\n                arr[i,j]=$((arr[i+1,j-1]+2))\n            else\n                arr[i,j]=$((arr[i+1,j] > arr[i,j-1] ? arr[i+1,j] : arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${arr[0,len-1]}"
  ]
}