{
  "name": "mbpp_247_lps",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the length of the longest palindromic subsequence in the given string.\n#\n# $1 is a string\nlps() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    lps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TENS FOR TENS\") = \"5\" ]]\n    [[ $(candidate \"CARDIO FOR CARDS\") = \"7\" ]]\n    [[ $(candidate \"PART OF THE JOURNEY IS PART\") = \"9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local L=()\n  for ((i=0; i<len; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((max ${L[i,j-1]} ${L[i+1,j]}))\n      fi\n    done\n  done\n  echo ${L[0,len-1]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local s=$1\n    local n=${#s}\n    local i j k l\n    local -a L\n    for ((i=0; i<n; i++)); do\n        L[i,i]=1\n    done\n    for ((l=2; l<=n; l++)); do\n        for ((i=0; i<n-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${s:i:1} == ${s:j:1} ]]; then\n                if ((l == 2)); then\n                    L[i,j]=2\n                else\n                    L[i,j]=$((L[i+1,j-1]+2))\n                fi\n            else\n                L[i,j]=$((L[i,j-1] > L[i+1,j] ? L[i,j-1] : L[i+1,j]))\n            fi\n        done\n    done\n    echo ${L[0,n-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$i,$((j-1))]>dp[$((i+1)),$j]?dp[$i,$((j-1))]:dp[$((i+1)),$j]))\n            fi\n        done\n    done\n    echo ${dp[0,$((len-1))]}",
    "  if [[ -z $1 ]]; then\n    echo 0\n    return\n  fi\n\n  local n=$(echo -n $1 | wc -c)\n  local i j k l\n\n  local table=()\n  for (( i=0; i<$n; i++ )); do\n    table[$i,$i]=1\n  done\n\n  for (( l=2; l<=$n; l++ )); do\n    for (( i=0; i<$n-$l+1; i++ )); do\n      j=$(( i+l-1 ))\n      if [[ ${1:$i:1} == ${1:$j:1} ]]; then\n        if [[ $l == 2 ]]; then\n          table[$i,$j]=2\n        else\n          table[$i,$j]=$(( table[$(( i+1 )),$(( j-1 ))] + 2 ))\n        fi\n      else\n        table[$i,$j]=$(( table[$i,$(( j-1 ))] > table[$(( i+1 )),$j] ? table[$i,$(( j-1 ))] : table[$(( i+1 )),$j] ))\n      fi\n    done\n  done\n\n  echo ${table[0,$(( n-1 ))]}",
    "    local n=$1\n    local i j k\n    local -a L\n    local -a C\n\n    for ((i=0; i<n; i++)); do\n        L[$i,$i]=1\n    done\n\n    for ((k=2; k<=n; k++)); do\n        for ((i=0; i<n-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${C[$i]} == ${C[$j]} ]]; then\n                L[$i,$j]=$((2+L[$((i+1)),$((j-1))]))\n            else\n                L[$i,$j]=$((max L[$i,$((j-1))] L[$((i+1)),$j]))\n            fi\n        done\n    done\n\n    echo ${L[0,$((n-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k l\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ $k -eq 2 && ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_arr[$i,$j]=2\n      elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n      else\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,$((len-1))]}",
    "    local str=\"$1\"\n    local len=${#str}\n    local i j k\n    local dp=()\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "  local s=$1\n  local len=${#s}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [ $k -eq 2 ] && [ \"${s:i:1}\" == \"${s:j:1}\" ]; then\n        lps[i,j]=2\n      elif [ \"${s:i:1}\" == \"${s:j:1}\" ]; then\n        lps[i,j]=$((lps[i+1,j-1]+2))\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a arr\n    for ((i=0;i<len;i++)); do\n        arr[i,i]=1\n    done\n    for ((l=2;l<=len;l++)); do\n        for ((i=0;i<len-l+1;i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} ]]; then\n                if [[ $l -eq 2 ]]; then\n                    arr[i,j]=2\n                else\n                    arr[i,j]=$((arr[i+1,j-1]+2))\n                fi\n            else\n                arr[i,j]=$((arr[i+1,j]>arr[i,j-1]?arr[i+1,j]:arr[i,j-1]))\n            fi\n        done\n    done\n    echo ${arr[0,len-1]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n\n  # create a 2D array\n  local arr=()\n  for ((i=0; i<len; i++)); do\n    arr[$i]=()\n    for ((j=0; j<len; j++)); do\n      arr[$i][$j]=0\n    done\n  done\n\n  # fill the array\n  for ((k=0; k<len; k++)); do\n    for ((i=0, j=k; j<len; i++, j++)); do\n      if ((i == j)); then\n        arr[$i][$j]=1\n      elif [[ ${str:i:1} == ${str:j:1} ]]; then\n        arr[$i][$j]=$((arr[$((i+1))][$((j-1))] + 2))\n      else\n        arr[$i][$j]=$((arr[$i][$((j-1))] > arr[$((i+1))][$j] ? arr[$i][$((j-1))] : arr[$((i+1))][$j]))\n      fi\n    done\n  done\n\n  echo ${arr[0][$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n\n  for ((i=0; i<len; i++)); do\n    lps[$i,$i]=1\n  done\n\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:$i:1} == ${str:$j:1} && $k == 2 ]]; then\n        lps[$i,$j]=2\n      elif [[ ${str:$i:1} == ${str:$j:1} ]]; then\n        lps[$i,$j]=$((lps[$((i+1)),$((j-1))]+2))\n      else\n        lps[$i,$j]=$((lps[$((i+1)),$j]>lps[$i,$((j-1))]?lps[$((i+1)),$j]:lps[$i,$((j-1))]))\n      fi\n    done\n  done\n\n  echo ${lps[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps_arr=()\n  for ((i=0; i<len; i++)); do\n    lps_arr[$i,$i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k -eq 2 ]]; then\n          lps_arr[$i,$j]=2\n        else\n          lps_arr[$i,$j]=$((lps_arr[$((i+1)),$((j-1))]+2))\n        fi\n      else\n        lps_arr[$i,$j]=$((lps_arr[$((i+1)),$j]>lps_arr[$i,$((j-1))]?lps_arr[$((i+1)),$j]:lps_arr[$i,$((j-1))]))\n      fi\n    done\n  done\n  echo ${lps_arr[0,$((len-1))]}",
    "  local -i n=$((${#1}-1))\n  local -i i j k\n  local -a L\n  for ((i=0; i<=n; i++)); do\n    L[i,i]=1\n  done\n  for ((k=2; k<=n+1; k++)); do\n    for ((i=0; i<=n-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${1:i:1} == ${1:j:1} ]]; then\n        L[i,j]=$((L[i+1,j-1]+2))\n      else\n        L[i,j]=$((L[i+1,j]>L[i,j-1]?L[i+1,j]:L[i,j-1]))\n      fi\n    done\n  done\n  echo ${L[0,n]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local lps=()\n    local max=0\n    for ((i=0; i<len; i++)); do\n        lps[i,i]=1\n    done\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ $k -eq 2 && ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                lps[i,j]=$((lps[i+1,j-1]+2))\n            else\n                lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n            fi\n            if [[ ${lps[i,j]} -gt $max ]]; then\n                max=${lps[i,j]}\n            fi\n        done\n    done\n    echo $max",
    "    local str=$1\n    local len=${#str}\n    local i j k l\n    local -a dp\n    for ((i=0; i<len; i++)); do\n        dp[i,i]=1\n    done\n    for ((l=2; l<=len; l++)); do\n        for ((i=0; i<len-l+1; i++)); do\n            j=$((i+l-1))\n            if [[ ${str:i:1} == ${str:j:1} && $l == 2 ]]; then\n                dp[i,j]=2\n            elif [[ ${str:i:1} == ${str:j:1} ]]; then\n                dp[i,j]=$((dp[i+1,j-1]+2))\n            else\n                dp[i,j]=$((dp[i+1,j]>dp[i,j-1]?dp[i+1,j]:dp[i,j-1]))\n            fi\n        done\n    done\n    echo ${dp[0,len-1]}",
    "    local str=$1\n    local len=${#str}\n    local i j k\n    local dp=()\n\n    for ((i=0; i<len; i++)); do\n        dp[$i,$i]=1\n    done\n\n    for ((k=2; k<=len; k++)); do\n        for ((i=0; i<len-k+1; i++)); do\n            j=$((i+k-1))\n            if [[ ${str:$i:1} == ${str:$j:1} ]]; then\n                dp[$i,$j]=$((dp[$((i+1)),$((j-1))]+2))\n            else\n                dp[$i,$j]=$((dp[$((i+1)),$j] > dp[$i,$((j-1))] ? dp[$((i+1)),$j] : dp[$i,$((j-1))]))\n            fi\n        done\n    done\n\n    echo ${dp[0,$((len-1))]}",
    "  local str=$1\n  local len=${#str}\n  local i j k\n  local lps=()\n  for ((i=0; i<len; i++)); do\n    lps[i,i]=1\n  done\n  for ((k=2; k<=len; k++)); do\n    for ((i=0; i<len-k+1; i++)); do\n      j=$((i+k-1))\n      if [[ ${str:i:1} == ${str:j:1} ]]; then\n        if [[ $k == 2 ]]; then\n          lps[i,j]=2\n        else\n          lps[i,j]=$((lps[i+1,j-1]+2))\n        fi\n      else\n        lps[i,j]=$((lps[i+1,j]>lps[i,j-1]?lps[i+1,j]:lps[i,j-1]))\n      fi\n    done\n  done\n  echo ${lps[0,len-1]}"
  ]
}