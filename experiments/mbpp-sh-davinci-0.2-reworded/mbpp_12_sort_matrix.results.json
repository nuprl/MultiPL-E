{
  "name": "mbpp_12_sort_matrix",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -a sums\n    local -a temp\n    local -a row\n    local -a new_matrix\n    local -i new_n=0\n    local -i new_m=0\n\n    # Split the input into a 2D array\n    while read -a row; do\n        matrix[i++]=$(printf \"%s\\n\" \"${row[@]}\")\n    done <<< \"$1\"\n\n    # Get the dimensions of the matrix\n    n=${#matrix[@]}\n    m=${#matrix[0]}\n\n    # Calculate the sum of each row\n    for ((i=0; i<n; i++)); do\n        sum=0\n        for ((j=0; j<m; j++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        sums[i]=$sum\n    done\n\n    # Sort the sums\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((sums[i] > sums[j])); then\n                temp=${sums[i]}\n                sums[i]=${sums[j]}\n                sums[j]=$temp\n                temp=${matrix[i]}\n                matrix[i]=${matrix[j]}\n                matrix[j]=$temp\n            fi\n        done\n    done\n\n    # Print the matrix\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            printf \"%s \" \"${matrix[i]:j:1}\"\n        done\n        printf \"\\n\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp5bz3_wmt.sh: line 33: sum + \\n: syntax error: operand expected (error token is \"+ \\n\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    declare -a matrix\n    declare -a sums\n    declare -i i=0\n    declare -i j=0\n    declare -i k=0\n    declare -i m=0\n    declare -i n=0\n    declare -i sum=0\n    declare -i max=0\n    declare -i min=0\n    declare -i tmp=0\n    declare -i tmp_i=0\n    declare -i tmp_j=0\n    declare -i tmp_k=0\n    declare -i tmp_m=0\n    declare -i tmp_n=0\n    declare -i tmp_sum=0\n    declare -i tmp_max=0\n    declare -i tmp_min=0\n    declare -i tmp_tmp=0\n    declare -i tmp_tmp_i=0\n    declare -i tmp_tmp_j=0\n    declare -i tmp_tmp_k=0\n    declare -i tmp_tmp_m=0\n    declare -i tmp_tmp_n=0\n    declare -i tmp_tmp_sum=0\n    declare -i tmp_tmp_max=0\n    declare -i tmp_tmp_min=0\n    declare -i tmp_tmp_tmp=0\n    declare -i tmp_tmp_tmp_i=0\n    declare -i tmp_tmp_tmp_j=0\n    declare -i tmp_tmp_tmp_k=0\n    declare -i tmp_tmp_tmp_m=0\n    declare -i tmp_tmp_tmp_n=0\n    declare -i tmp_tmp_tmp_sum=0\n    declare -i tmp_tmp_tmp_max=0\n    declare -i tmp_tmp_tmp_min=0\n    declare -i tmp_tmp_tmp_tmp=0\n    declare -i tmp_tmp_tmp_tmp_i=0\n    declare -i tmp_tmp_tmp_tmp_j=0\n    declare -i tmp_tmp_tmp_tmp_k=0\n    declare -i tmp_tmp_tmp_tmp_m=0\n    declare -i tmp_tmp_tmp_tmp_n=0\n    declare -i tmp_tmp_tmp_tmp_sum=0\n    declare -i tmp_tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=$1\n    local -a rows\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_rows\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_index=0\n    local -i max_index_prev=0\n    local -i max_index_next=0\n    local -i max_index_prev_prev=0\n    local -i max_index_next_next=0\n    local -i max_index_prev_prev_prev=0\n    local -i max_index_next_next_next=0\n    local -i max_index_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix=()\n    local -a sums=()\n    local -a sorted=()\n    local -a sorted_matrix=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_index=0\n    local -i max_index_prev=0\n    local -i max_index_next=0\n    local -i max_index_prev_prev=0\n    local -i max_index_next_next=0\n    local -i max_index_prev_prev_prev=0\n    local -i max_index_next_next_next=0\n    local -i max_index_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local rows=()\n    local sums=()\n    local row_index=0\n    local row_sum=0\n    local row_sums_sorted=()\n    local row_sums_sorted_index=0\n    local row_sums_sorted_length=0\n    local row_sums_sorted_row_index=0\n    local row_sums_sorted_row_sum=0\n    local row_sums_sorted_row_value=0\n    local row_sums_sorted_row_values=()\n    local row_sums_sorted_row_values_index=0\n    local row_sums_sorted_row_values_length=0\n    local row_sums_sorted_row_values_value=0\n    local row_value=0\n    local row_values=()\n    local row_values_index=0\n    local row_values_length=0\n    local row_values_value=0\n    local row_values_value_index=0\n    local row_values_value_length=0\n    local row_values_value_value=0\n    local row_values_value_value_index=0\n    local row_values_value_value_length=0\n    local row_values_value_value_value=0\n    local row_values_value_value_value_index=0\n    local row_values_value_value_value_length=0\n    local row_values_value_value_value_value=0\n    local row_values_value_value_value_value_index=0\n    local row_values_value_value_value_value_length=0\n    local row_values_value_value_value_value_value=0\n    local row_values_value_value_value_value_value_index=0\n    local row_values_value_value_value_value_value_length=0\n    local row_values_value_value_value_value_value_value=0\n    local row_values_value_value_value_value_value_value_index=0\n    local row_values_value_value\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i sum=0\n  local -i sums=()\n  local -i tmp=0\n  local -i tmp_sum=0\n  local -i tmp_sums=()\n  local -i tmp_matrix=()\n  local -i matrix_size=0\n  local -i matrix_size_sqrt=0\n  local -i matrix_size_sqrt_int=0\n  local -i matrix_size_sqrt_int_sqrt=0\n\n  # Read the input into an array\n  while read -a row; do\n    matrix[$i]=\"${row[@]}\"\n    ((i++))\n  done <<< \"$1\"\n\n  # Calculate the size of the matrix\n  matrix_size=${#matrix[@]}\n  matrix_size_sqrt=$(echo \"sqrt($matrix_size)\" | bc)\n  matrix_size_sqrt_int=$(echo \"$matrix_size_sqrt\" | cut -d '.' -f 1)\n  matrix_size_sqrt_int_sqrt=$(echo \"sqrt($matrix_size_sqrt_int)\" | bc)\n\n  # Check if the matrix is square\n  if [[ $matrix_size_sqrt_int_sqrt -ne $matrix_size_sqrt_int ]]; then\n    echo \"The matrix is not square\"\n    return 1\n  fi\n\n  # Calculate the sums of the rows\n  for ((i=0; i<$matrix_size; i++)); do\n    sum=0\n    for ((j=0; j<$matrix_size_sqrt_int; j++)); do\n      sum=$((sum + ${matrix[$i]:$j:1}))\n    done\n    sums[$i]=$sum\n  done\n\n  # Sort the matrix\n  for ((i=0; i<$matrix_size; i++)); do\n    for ((j=0; j<$matrix_size; j++\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpd1ty9g3y.sh: line 52: unexpected EOF while looking for matching `)'\\n/tmp/tmpd1ty9g3y.sh: line 67: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_sum_index=0\n  local -i max_sum_index_prev=0\n  local -i tmp=0\n  local -i tmp_index=0\n  local -i tmp_index_prev=0\n  local -i tmp_sum=0\n  local -i tmp_sum_prev=0\n  local -i tmp_sum_index=0\n  local -i tmp_sum_index_prev=0\n  local -i tmp_sum_index_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i tmp_sum_index_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i sums=()\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local -i tmp49=0\n    local -i tmp50=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max=0\n    local -i min=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_sum=0\n    local -i tmp_max=0\n    local -i tmp_min=0\n    local -i tmp_tmp=0\n    local -i tmp_tmp_i=0\n    local -i tmp_tmp_j=0\n    local -i tmp_tmp_k=0\n    local -i tmp_tmp_n=0\n    local -i tmp_tmp_m=0\n    local -i tmp_tmp_sum=0\n    local -i tmp_tmp_max=0\n    local -i tmp_tmp_min=0\n    local -i tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_k=0\n    local -i tmp_tmp_tmp_n=0\n    local -i tmp_tmp_tmp_m=0\n    local -i tmp_tmp_tmp_sum=0\n    local -i tmp_tmp_tmp_max=0\n    local -i tmp_tmp_tmp_min=0\n    local -i tmp_tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_tmp_k=0\n    local -i tmp_tmp_tmp_tmp_n=0\n    local -i tmp_tmp_tmp_tmp_m=0\n    local -i tmp_tmp_tmp_tmp_sum=0\n    local -i tmp_tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_rows\n    local i=0\n    local j=0\n    local k=0\n    local sum=0\n    local row=''\n\n    # Split the matrix into rows\n    while read -r row; do\n        rows[$i]=\"$row\"\n        ((i++))\n    done <<< \"$matrix\"\n\n    # Calculate the sum of each row\n    for ((i=0; i<${#rows[@]}; i++)); do\n        sum=0\n        for ((j=0; j<${#rows[$i]}; j++)); do\n            sum=$((sum + ${rows[$i]:$j:1}))\n        done\n        sums[$i]=\"$sum\"\n    done\n\n    # Sort the sums\n    sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n    # Sort the rows according to the sums\n    for ((i=0; i<${#sorted_sums[@]}; i++)); do\n        for ((j=0; j<${#sums[@]}; j++)); do\n            if [[ \"${sorted_sums[$i]}\" == \"${sums[$j]}\" ]]; then\n                sorted_rows[$k]=\"${rows[$j]}\"\n                ((k++))\n            fi\n        done\n    done\n\n    # Print the sorted matrix\n    for ((i=0; i<${#sorted_rows[@]}; i++)); do\n        echo \"${sorted_rows[$i]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpmr6yhth7.sh: line 27: sum +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i j\n    local -i nrows ncols\n    local -i sum\n    local -i max_sum\n    local -i max_row\n    local -i max_col\n    local -i tmp\n    local -i tmp_row\n    local -i tmp_col\n    local -i tmp_sum\n\n    # Split the input into an array of rows\n    IFS=$'\\n' read -d '' -r -a matrix <<< \"$1\"\n    nrows=${#matrix[@]}\n    ncols=${#matrix[0]}\n\n    # Sort the rows by their sums\n    for ((i = 0; i < nrows; i++)); do\n        sum=0\n        for ((j = 0; j < ncols; j++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        if ((i == 0)); then\n            max_sum=$sum\n            max_row=$i\n        else\n            if ((sum > max_sum)); then\n                tmp=${matrix[i]}\n                matrix[i]=${matrix[max_row]}\n                matrix[max_row]=$tmp\n                max_sum=$sum\n                max_row=$i\n            fi\n        fi\n    done\n\n    # Sort the columns by their sums\n    for ((j = 0; j < ncols; j++)); do\n        sum=0\n        for ((i = 0; i < nrows; i++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        if ((j == 0)); then\n            max_sum=$sum\n            max_col=$j\n        else\n            if ((sum > max_sum)); then\n                for ((i = 0; i < nrows; i++)); do\n                    tmp=${matrix[i]:j:1}\n                    matrix[i]=${matrix[i]:0:j}${matrix[i]:j+1}\n                    matrix[i]=${matrix[i]:0:max_col}$tmp${matrix[i]:max_col}\n                done\n                max_sum=$sum\n               \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpd8h70_98.sh: line 61: syntax error near unexpected token `}'\\n/tmp/tmpd8h70_98.sh: line 61: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_index=0\n  local -a sums\n  local -a indices\n  local -a sorted_matrix\n  local -a row\n  local -a sorted_row\n  local -a sorted_rows\n\n  # read the matrix into an array\n  while read -r line; do\n    row=($line)\n    matrix[$i]=\"${row[@]}\"\n    ((i++))\n  done <<< \"$1\"\n\n  # get the number of rows and columns\n  n=${#matrix[@]}\n  m=${#matrix[0]}\n\n  # calculate the sums of the rows\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=0; j<m; j++)); do\n      sum=$(($sum + ${matrix[$i]:$j:1}))\n    done\n    sums[$i]=$sum\n  done\n\n  # sort the sums\n  indices=($(printf \"%s\\n\" \"${!sums[@]}\" | sort -n))\n\n  # sort the matrix\n  for ((i=0; i<n; i++)); do\n    sorted_row=(${matrix[${indices[$i]}]})\n    sorted_rows[$i]=\"${sorted_row[@]}\"\n  done\n\n  # print the sorted matrix\n  for ((i=0; i<n; i++)); do\n    echo \"${sorted_rows[$i]}\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpknhgs6hc.sh: line 37: 1 +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row_sum=0\n    local row_count=0\n    local col_count=0\n    local col_index=0\n    local col_value=0\n    local col_values=()\n    local col_value_index=0\n    local col_value_count=0\n    local sorted_matrix=()\n    local sorted_matrix_index=0\n    local sorted_matrix_count=0\n    local sorted_matrix_row_index=0\n    local sorted_matrix_row_count=0\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_count=0\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_values=()\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local row_count=0\n  local row_sums_string=''\n  local row_sums_sorted=''\n  local row_sums_sorted_index=0\n  local row_sums_sorted_index_count=0\n  local sorted_matrix=''\n\n  # Calculate the sum of each row\n  while read -r row; do\n    row_sums[$row_index]=0\n    for number in $row; do\n      row_sum=$((row_sum + number))\n    done\n    row_sums[$row_index]=$row_sum\n    row_sum=0\n    row_index=$((row_index + 1))\n  done <<< \"$matrix\"\n\n  # Convert the row sums array to a string\n  row_sums_string=\"${row_sums[@]}\"\n\n  # Sort the row sums string\n  row_sums_sorted=$(echo \"$row_sums_string\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n\n  # Convert the sorted row sums string to an array\n  read -r -a row_sums_sorted <<< \"$row_sums_sorted\"\n\n  # Get the number of rows in the matrix\n  row_count=$(echo \"$matrix\" | wc -l)\n\n  # Iterate through the sorted row sums array\n  for row_sums_sorted_index in \"${row_sums_sorted[@]}\"; do\n    # Iterate through the row sums array\n    for row_index in \"${!row_sums[@]}\"; do\n      # If the current row sum matches the current sorted row sum,\n      # add the corresponding row to the sorted matrix\n      if [ \"${row_sums[$row_index]}\" = \"$row_sums_sorted_index\" ]; then\n        sorted_matrix=\"$sorted_matrix$(echo \"$matrix\" | sed -n \"$((row_index + 1))p\")\\n\"\n     \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpdtfr151x.sh: line 49: syntax error near unexpected token `}'\\n/tmp/tmpdtfr151x.sh: line 49: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=$1\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local sums=()\n  local i=0\n  while read -r row; do\n    sums[i]=$(echo \"$row\" | tr ' ' '+' | bc)\n    ((i++))\n  done <<< \"$matrix\"\n  local sorted_sums=($(for i in \"${!sums[@]}\"; do echo \"${sums[i]} $i\"; done | sort -n | cut -d' ' -f2))\n  local sorted_matrix=()\n  for i in \"${sorted_sums[@]}\"; do\n    sorted_matrix+=($(echo \"$matrix\" | head -n $((i + 1)) | tail -n 1))\n  done\n  echo \"${sorted_matrix[@]}\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmphghmqwz_.sh: line 12: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -i i=0\n  local -i j=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i tmp=0\n  local -i tmp_i=0\n  local -i tmp_j=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row_sum=0\n    local row=''\n    local row_count=0\n    local row_sorted=''\n    local row_sorted_count=0\n    local row_sorted_index=0\n    local row_sorted_sum=0\n    local row_sorted_sum_index=0\n    local row_sorted_sum_count=0\n    local row_sorted_sum_sorted=''\n    local row_sorted_sum_sorted_count=0\n    local row_sorted_sum_sorted_index=0\n    local row_sorted_sum_sorted_sum=0\n    local row_sorted_sum_sorted_sum_index=0\n    local row_sorted_sum_sorted_sum_count=0\n    local row_sorted_sum_sorted_sum_sorted=''\n    local row_sorted_sum_sorted_sum_sorted_count=0\n    local row_sorted_sum_sorted_sum_sorted_index=0\n    local row_sorted_sum_sorted_sum_sorted_sum=0\n    local row_sorted_sum_sorted_sum_sorted_sum_index=0\n    local row_sorted_sum_sorted_sum_sorted_sum_count=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted=''\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_count=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_index=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_sum=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_sum_index=0\n    local row_sorted_sum_sorted_sum_sorted_sum_sorted_sum_count=0\n    local row_sorted_sum_sorted_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal -a rows\n\tlocal -a sums\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i max_sum=0\n\tlocal -i max_index=0\n\tlocal -i tmp=0\n\tlocal -i tmp_index=0\n\tlocal -i tmp_sum=0\n\tlocal -i tmp_max_sum=0\n\tlocal -i tmp_max_index=0\n\tlocal -i tmp_tmp=0\n\tlocal -i tmp_tmp_index=0\n\tlocal -i tmp_tmp_sum=0\n\tlocal -i tmp_tmp_max_sum=0\n\tlocal -i tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_max_sum=0\n\tlocal -i tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_max_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_max_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i sums=0\n  local -i sumt=0\n  local -i sumu=0\n  local -i sumv=0\n  local -i sumw=0\n  local -i sumx=0\n  local -i sumy=0\n  local -i sumz=0\n  local -i suma=0\n  local -i sumb=0\n  local -i sumc=0\n  local -i sumd=0\n  local -i sume=0\n  local -i sumf=0\n  local -i sumg=0\n  local -i sumh=0\n  local -i sumi=0\n  local -i sumj=0\n  local -i sumk=0\n  local -i suml=0\n  local -i summ=0\n  local -i sumn=0\n  local -i sumo=0\n  local -i sump=0\n  local -i sumq=0\n  local -i sumr=0\n  local -i sums=0\n  local -i sumt=0\n  local -i sumu=0\n  local -i sumv=0\n  local -i sumw=0\n  local -i sumx=0\n  local -i sumy=0\n  local -i sumz=0\n  local -i sumaa=0\n  local -i sumab=0\n  local -i sumac=0\n  local -i sumad=0\n  local -i sumae=0\n  local -i sum\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_rows\n  local row\n  local sum\n  local i\n  local j\n\n  # Split the matrix into rows\n  IFS=$'\\n' read -d '' -ra rows <<< \"$matrix\"\n\n  # Calculate the sum of each row\n  for ((i=0; i<${#rows[@]}; i++)); do\n    row=\"${rows[$i]}\"\n    sum=0\n    for j in $row; do\n      sum=$((sum+j))\n    done\n    sums[$i]=$sum\n  done\n\n  # Sort the sums\n  sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n  # Sort the rows according to the sums\n  for ((i=0; i<${#sorted_sums[@]}; i++)); do\n    sum=\"${sorted_sums[$i]}\"\n    for ((j=0; j<${#sums[@]}; j++)); do\n      if [[ \"${sums[$j]}\" == \"$sum\" ]]; then\n        sorted_rows[$i]=\"${rows[$j]}\"\n        sums[$j]=\n        break\n      fi\n    done\n  done\n\n  # Print the sorted rows\n  for row in \"${sorted_rows[@]}\"; do\n    echo \"$row\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmprngnj_c9.sh: line 24: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n    local -i max_row=0\n    local -i max_col=0\n    local -i max_sum=0\n    local -i tmp=0\n    local -i tmp_sum=0\n    local -i tmp_row=0\n    local -i tmp_col=0\n\n    # read the matrix\n    while read -a row; do\n        matrix[i]=$(printf \"%s\" \"${row[@]}\")\n        ((i++))\n    done <<< \"$1\"\n\n    # find the max row and column\n    max_row=${#matrix[@]}\n    max_col=${#matrix[0]}\n\n    # find the sum of each row\n    for ((i=0; i<max_row; i++)); do\n        sum=0\n        for ((j=0; j<max_col; j++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        sums[i]=$sum\n    done\n\n    # sort the matrix\n    for ((i=0; i<max_row; i++)); do\n        max_sum=${sums[i]}\n        for ((j=i; j<max_row; j++)); do\n            if [[ ${sums[j]} -lt $max_sum ]]; then\n                max_sum=${sums[j]}\n                tmp_sum=${sums[i]}\n                sums[i]=$max_sum\n                sums[j]=$tmp_sum\n                tmp=${matrix[i]}\n                matrix[i]=${matrix[j]}\n                matrix[j]=$tmp\n            fi\n        done\n    done\n\n    # print the matrix\n    for ((i=0; i<max_row; i++)); do\n        for ((j=0; j<max_col; j++)); do\n            echo -n \"${matrix[i]:j:1} \"\n        done\n        echo\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i temp=0\n    local -i temp_sum=0\n    local -i sum=0\n    local -i sum_i=0\n    local -i sum_j=0\n    local -i sum_k=0\n    local -i sum_l=0\n    local -i sum_m=0\n    local -i sum_n=0\n    local -i sum_o=0\n    local -i sum_p=0\n    local -i sum_q=0\n    local -i sum_r=0\n    local -i sum_s=0\n    local -i sum_t=0\n    local -i sum_u=0\n    local -i sum_v=0\n    local -i sum_w=0\n    local -i sum_x=0\n    local -i sum_y=0\n    local -i sum_z=0\n    local -i sum_aa=0\n    local -i sum_ab=0\n    local -i sum_ac=0\n    local -i sum_ad=0\n    local -i sum_ae=0\n    local -i sum_af=0\n    local -i sum_ag=0\n    local -i sum_ah=0\n    local -i sum_ai=0\n    local -i sum_aj=0\n    local -i sum_ak=0\n    local -i sum_al=0\n    local -i sum_am=0\n    local -i sum_an=0\n    local -i sum_ao=0\n    local -i sum_ap=0\n    local -i sum_aq=0\n    local -i sum_ar=0\n    local -i sum_as=0\n    local -i sum_at=0\n    local -i sum_au=0\n    local -i sum_av=0\n    local -i sum_aw=0\n    local -i sum_ax=0\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sum\n    local row_sums\n    local row_sums_sorted\n    local row_sums_sorted_index\n    local row_sums_sorted_index_sorted\n    local row_sums_sorted_index_sorted_index\n    local row_sums_sorted_index_sorted_index_sorted\n    local row_sums_sorted_index_sorted_index_sorted_index\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n    local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local row_count=$(echo \"$matrix\" | wc -l)\n  local col_count=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local col_index=0\n  local row=''\n  local col=''\n  local sorted_matrix=''\n\n  # Calculate the sum of each row\n  while read -r row; do\n    row_sum=0\n    col_index=0\n    while read -r col; do\n      row_sum=$((row_sum + col))\n      col_index=$((col_index + 1))\n    done <<< \"$row\"\n    row_sums[$row_index]=$row_sum\n    row_index=$((row_index + 1))\n  done <<< \"$matrix\"\n\n  # Sort the row sums\n  IFS=$'\\n' sorted_row_sums=($(sort <<< \"${row_sums[*]}\"))\n  unset IFS\n\n  # Sort the matrix according to the sorted row sums\n  for row_sum in \"${sorted_row_sums[@]}\"; do\n    row_index=0\n    while read -r row; do\n      if [[ \"${row_sums[$row_index]}\" == \"$row_sum\" ]]; then\n        sorted_matrix=\"$sorted_matrix$row\\n\"\n        break\n      fi\n      row_index=$((row_index + 1))\n    done <<< \"$matrix\"\n  done\n\n  echo -e \"$sorted_matrix\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpokmxprw6.sh: line 22: 1 2 3\\\\n2 4 5\\\\n1 1 1: syntax error in expression (error token is \"2 3\\\\n2 4 5\\\\n1 1 1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=()\n  local row_sums=()\n  local row_sums_sorted=()\n  local row_sums_sorted_indexes=()\n  local sorted_matrix=()\n  local row_index=0\n  local row_sum=0\n  local row_sum_index=0\n  local row=''\n  local row_sorted=''\n\n  # Split the matrix into rows\n  IFS=$'\\n' read -r -d '' -a rows <<< \"$matrix\"\n\n  # Calculate the sum of each row\n  for row in \"${rows[@]}\"; do\n    row_sums[$row_index]=$(echo \"$row\" | awk '{for(i=1;i<=NF;i++)sum+=$i}END{print sum}')\n    ((row_index++))\n  done\n\n  # Sort the row sums\n  row_sums_sorted=($(printf '%s\\n' \"${row_sums[@]}\" | sort -n))\n\n  # Get the indexes of the sorted row sums\n  for row_sum in \"${row_sums_sorted[@]}\"; do\n    row_sum_index=$(printf '%s\\n' \"${row_sums[@]}\" | grep -n \"$row_sum\" | cut -d ':' -f 1)\n    row_sums_sorted_indexes[$row_sum_index]=$row_sum\n  done\n\n  # Sort the matrix\n  for row_sum_index in \"${row_sums_sorted_indexes[@]}\"; do\n    sorted_matrix[$row_sum_index]=\"${rows[$row_sum_index]}\"\n  done\n\n  # Print the sorted matrix\n  for row_sorted in \"${sorted_matrix[@]}\"; do\n    echo \"$row_sorted\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo=0\n  local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=()\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local row_sum_index=0\n  local row_sum_value=0\n  local row_value=0\n  local row_value_index=0\n  local row_value_value=0\n  local row_value_value_index=0\n  local row_value_value_value=0\n  local row_value_value_value_index=0\n  local row_value_value_value_value=0\n  local row_value_value_value_value_index=0\n  local row_value_value_value_value_value=0\n  local row_value_value_value_value_value_index=0\n  local row_value_value_value_value_value_value=0\n  local row_value_value_value_value_value_value_index=0\n  local row_value_value_value_value_value_value_value=0\n  local row_value_value_value_value_value_value_value_index=0\n  local row_value_value_value_value_value_value_value_value=0\n  local row_value_value_value_value_value_value_value_value_index=0\n  local row_value_value_value_value_value_value_value_value_value=0\n  local row_value_value_value_value_value_value_value_value_value_index=0\n  local row_value_value_value_value_value_value_value_value_value_value=0\n  local row_value_value_value_value_value_value_value_value_value_value_index=0\n  local row_value_value_value_value_value_value_value_value_value_value_value=0\n  local row_value_value_value_value_value_value_value_value_value_value_value_index=0\n  local row_value_value_value_value_value_value_value_value_value_value_value_value=0\n  local row_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=\"$(echo \"$matrix\" | wc -l)\"\n  local cols=\"$(echo \"$matrix\" | head -n1 | wc -w)\"\n\n  # Sum each row\n  local sums=\"$(echo \"$matrix\" | awk '{sum=0; for(i=1; i<=NF; i++) {sum+=$i}; print sum}')\"\n\n  # Sort sums\n  local sorted_sums=\"$(echo \"$sums\" | sort -n)\"\n\n  # Build a new matrix\n  local new_matrix=\"\"\n  for sum in $sorted_sums; do\n    local row=\"$(echo \"$sums\" | grep -n \"$sum\" | cut -d: -f1)\"\n    local new_row=\"$(echo \"$matrix\" | sed -n \"${row}p\")\"\n    new_matrix=\"$new_matrix$new_row\\n\"\n  done\n\n  echo -e \"$new_matrix\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local rows=$(wc -l <<< \"$matrix\")\n    local cols=$(wc -w <<< \"$matrix\")\n    local sums=()\n    local row=()\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n\n    for ((i=0; i<rows; i++)); do\n        row=($(sed -n \"$((i+1))p\" <<< \"$matrix\"))\n        sum=0\n        for ((j=0; j<cols; j++)); do\n            sum=$((sum + row[j]))\n        done\n        sums[i]=$sum\n    done\n\n    for ((i=0; i<rows; i++)); do\n        for ((j=i+1; j<rows; j++)); do\n            if [[ ${sums[i]} -gt ${sums[j]} ]]; then\n                tmp=${sums[i]}\n                sums[i]=${sums[j]}\n                sums[j]=$tmp\n                for ((k=0; k<cols; k++)); do\n                    tmp=$(sed -n \"$((i+1))p\" <<< \"$matrix\" | awk \"{print \\$$((k+1))}\")\n                    sed -i \"$((i+1))s/.*/$(sed -n \"$((j+1))p\" <<< \"$matrix\")/\" <<< \"$matrix\"\n                    sed -i \"$((j+1))s/.*/$tmp/\" <<< \"$matrix\"\n                done\n            fi\n        done\n    done\n    echo \"$matrix\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp2065u013.sh: line 21: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i sum_max=0\n  local -i sum_min=0\n  local -i sum_temp=0\n  local -i sum_temp_max=0\n  local -i sum_temp_min=0\n  local -i sum_temp_max_index=0\n  local -i sum_temp_min_index=0\n  local -i sum_temp_max_index_temp=0\n  local -i sum_temp_min_index_temp=0\n  local -i sum_temp_max_index_temp_max=0\n  local -i sum_temp_min_index_temp_min=0\n  local -i sum_temp_max_index_temp_max_index=0\n  local -i sum_temp_min_index_temp_min_index=0\n  local -i sum_temp_max_index_temp_max_index_temp=0\n  local -i sum_temp_min_index_temp_min_index_temp=0\n  local -i sum_temp_max_index_temp_max_index_temp_max=0\n  local -i sum_temp_min_index_temp_min_index_temp_min=0\n  local -i sum_temp_max_index_temp_max_index_temp_max_index=0\n  local -i sum_temp_min_index_temp_min_index_temp_min_index=0\n  local -i sum_temp_max_index_temp_max_index_temp_max_index_temp=0\n  local -i sum_temp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -a sums\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i max=0\n  local -i min=0\n  local -i tmp=0\n  local -i tmp2=0\n  local -i tmp3=0\n  local -i tmp4=0\n  local -i tmp5=0\n  local -i tmp6=0\n  local -i tmp7=0\n  local -i tmp8=0\n  local -i tmp9=0\n  local -i tmp10=0\n  local -i tmp11=0\n  local -i tmp12=0\n  local -i tmp13=0\n  local -i tmp14=0\n  local -i tmp15=0\n  local -i tmp16=0\n  local -i tmp17=0\n  local -i tmp18=0\n  local -i tmp19=0\n  local -i tmp20=0\n  local -i tmp21=0\n  local -i tmp22=0\n  local -i tmp23=0\n  local -i tmp24=0\n  local -i tmp25=0\n  local -i tmp26=0\n  local -i tmp27=0\n  local -i tmp28=0\n  local -i tmp29=0\n  local -i tmp30=0\n  local -i tmp31=0\n  local -i tmp32=0\n  local -i tmp33=0\n  local -i tmp34=0\n  local -i tmp35=0\n  local -i tmp36=0\n  local -i tmp37=0\n  local -i tmp38=\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local row\n  local sum\n  local i\n  local j\n  local tmp\n\n  # Split the matrix into rows\n  IFS=$'\\n' read -r -d '' -a rows <<<\"$matrix\"\n\n  # Calculate the sum of each row\n  for ((i = 0; i < ${#rows[@]}; i++)); do\n    row=\"${rows[$i]}\"\n    sum=0\n    for j in $row; do\n      ((sum += j))\n    done\n    sums[$i]=\"$sum\"\n  done\n\n  # Sort the rows by their sums\n  for ((i = 0; i < ${#rows[@]}; i++)); do\n    for ((j = i + 1; j < ${#rows[@]}; j++)); do\n      if ((sums[$i] > sums[$j])); then\n        tmp=\"${sums[$i]}\"\n        sums[$i]=\"${sums[$j]}\"\n        sums[$j]=\"$tmp\"\n        tmp=\"${rows[$i]}\"\n        rows[$i]=\"${rows[$j]}\"\n        rows[$j]=\"$tmp\"\n      fi\n    done\n  done\n\n  # Print the sorted matrix\n  for ((i = 0; i < ${#rows[@]}; i++)); do\n    echo \"${rows[$i]}\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpnyjgs9od.sh: line 23: ((: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n/tmp/tmpnyjgs9od.sh: line 23: ((: 5\\\\n1: syntax error: invalid arithmetic operator (error token is \"\\\\n1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_sum_index=0\n    local -i tmp=0\n    local -i tmp_sum=0\n    local -i tmp_index=0\n    local -i tmp_index_2=0\n    local -i tmp_sum_2=0\n    local -i tmp_2=0\n    local -i tmp_3=0\n    local -i tmp_4=0\n    local -i tmp_5=0\n    local -i tmp_6=0\n    local -i tmp_7=0\n    local -i tmp_8=0\n    local -i tmp_9=0\n    local -i tmp_10=0\n    local -i tmp_11=0\n    local -i tmp_12=0\n    local -i tmp_13=0\n    local -i tmp_14=0\n    local -i tmp_15=0\n    local -i tmp_16=0\n    local -i tmp_17=0\n    local -i tmp_18=0\n    local -i tmp_19=0\n    local -i tmp_20=0\n    local -i tmp_21=0\n    local -i tmp_22=0\n    local -i tmp_23=0\n    local -i tmp_24=0\n    local -i tmp_25=0\n    local -i tmp_26=0\n    local -i tmp_27=0\n    local -i tmp_28=0\n    local -i tmp_29=0\n    local -i tmp_30=0\n    local -i tmp_31=0\n    local -i tmp_32=0\n    local -i tmp_33=0\n    local -i tmp_34=0\n    local -i tmp_35=0\n    local -i tmp_36=0\n    local -i tmp_37=0\n    local -i tmp_38=0\n    local -i tmp_39=0\n    local -\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -r matrix=\"$1\"\n  local -r rows=\"$(wc -l <<< \"$matrix\")\"\n  local -r cols=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r sums=\"$(\n    paste <(seq 1 \"$rows\") <(\n      awk '{for(i=1;i<=NF;i++)a[NR]+=$i}END{for(i=1;i<=NR;i++)print a[i]}' <<< \"$matrix\"\n    )\n  )\"\n  local -r sorted_sums=\"$(sort -n <<< \"$sums\")\"\n  local -r sorted_rows=\"$(cut -f 1 <<< \"$sorted_sums\")\"\n  local -r sorted_matrix=\"$(\n    paste <(seq 1 \"$rows\") <(\n      awk '{for(i=1;i<=NF;i++)a[NR]+=$i}END{for(i=1;i<=NR;i++)print a[i]}' <<< \"$matrix\"\n    ) | sort -n | cut -f 1\n  )\"\n  local -r result=\"$(\n    paste <(seq 1 \"$rows\") <(\n      awk '{for(i=1;i<=NF;i++)a[NR]+=$i}END{for(i=1;i<=NR;i++)print a[i]}' <<< \"$matrix\"\n    ) | sort -n | cut -f 1\n  )\"\n  echo \"$result\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -a sorted_rows\n    local -a sorted_sums\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n    local -i m\n    local -i sum\n    local -i tmp\n    local -i tmp_sum\n    local -i tmp_i\n    local -i tmp_j\n    local -i tmp_k\n    local -i tmp_n\n    local -i tmp_m\n    local -i tmp_sum\n    local -i tmp_sorted_i\n    local -i tmp_sorted_j\n    local -i tmp_sorted_k\n    local -i tmp_sorted_n\n    local -i tmp_sorted_m\n    local -i tmp_sorted_sum\n    local -i tmp_sorted_sums_i\n    local -i tmp_sorted_sums_j\n    local -i tmp_sorted_sums_k\n    local -i tmp_sorted_sums_n\n    local -i tmp_sorted_sums_m\n    local -i tmp_sorted_sums_sum\n    local -i tmp_sorted_sums_sums_i\n    local -i tmp_sorted_sums_sums_j\n    local -i tmp_sorted_sums_sums_k\n    local -i tmp_sorted_sums_sums_n\n    local -i tmp_sorted_sums_sums_m\n    local -i tmp_sorted_sums_sums_sum\n    local -i tmp_sorted_sums_sums_sums_i\n    local -i tmp_sorted_sums_sums_sums_j\n    local -i tmp_sorted_sums_sums_sums_k\n    local -i tmp_sorted_sums_sums_sums_n\n    local -i tmp_sorted_sums_sums_sums_m\n    local -i tmp_sorted_sums_sums_sums_sum\n    local -i\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -a sums\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i l=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i o=0\n\tlocal -i p=0\n\tlocal -i q=0\n\tlocal -i r=0\n\tlocal -i s=0\n\tlocal -i t=0\n\tlocal -i u=0\n\tlocal -i v=0\n\tlocal -i w=0\n\tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -i aa=0\n\tlocal -i bb=0\n\tlocal -i cc=0\n\tlocal -i dd=0\n\tlocal -i ee=0\n\tlocal -i ff=0\n\tlocal -i gg=0\n\tlocal -i hh=0\n\tlocal -i ii=0\n\tlocal -i jj=0\n\tlocal -i kk=0\n\tlocal -i ll=0\n\tlocal -i mm=0\n\tlocal -i nn=0\n\tlocal -i oo=0\n\tlocal -i pp=0\n\tlocal -i qq=0\n\tlocal -i rr=0\n\tlocal -i ss=0\n\tlocal -i tt=0\n\tlocal -i uu=0\n\tlocal -i vv=0\n\tlocal -i ww=0\n\tlocal -i xx=0\n\tlocal -i yy=0\n\tlocal -i zz=0\n\tlocal -i aaa=0\n\tlocal -i bbb=0\n\tlocal -i ccc=0\n\tlocal -i ddd=0\n\tlocal -i eee=0\n\tlocal -i fff=0\n\tlocal -i ggg=0\n\tlocal -i hhh=0\n\tlocal -i iii=0\n\tlocal -i jjj=0\n\tlocal -i kkk=0\n\tlocal -i lll=0\n\tlocal -i mmm=0\n\tlocal -i nnn=0\n\tlocal -i o\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\t# Create an array of rows\n\tlocal -a rows\n\tlocal row\n\tlocal row_sum\n\tlocal row_sums\n\tlocal row_sums_sorted\n\tlocal row_sums_sorted_index\n\tlocal row_sums_sorted_index_row\n\tlocal row_sums_sorted_index_row_sum\n\tlocal row_sums_sorted_index_row_sum_index\n\tlocal row_sums_sorted_index_row_sum_index_row\n\tlocal row_sums_sorted_index_row_sum_index_row_sum\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum_index\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum_index_row\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum_index_row_sum\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum_index_row_sum_index\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum_index_row_sum_index_row\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum_index_row_sum_index_row_sum\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum_index_row_sum_index_row_sum_index\n\tlocal row_sums_sorted_index_row_sum_index_row_sum_index_row_sum_index_row_sum_index_row_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i tmp=0\n  local -a sums\n  local -a tmp_matrix\n  local -a tmp_sums\n  local -a tmp_row\n\n  # read the matrix\n  while read -a row; do\n    matrix[$i]=$(printf \"%s \" \"${row[@]}\")\n    ((i++))\n  done <<< \"$1\"\n\n  # get the number of rows and columns\n  n=${#matrix[@]}\n  m=$(echo \"${matrix[0]}\" | wc -w)\n\n  # calculate the sums of each row\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=0; j<m; j++)); do\n      tmp=$(echo \"${matrix[$i]}\" | cut -d ' ' -f $((j+1)))\n      ((sum+=tmp))\n    done\n    sums[$i]=$sum\n  done\n\n  # sort the matrix\n  for ((i=0; i<n; i++)); do\n    for ((j=i+1; j<n; j++)); do\n      if ((sums[$i] > sums[$j])); then\n        tmp_matrix=(\"${matrix[$i]}\")\n        tmp_sums=(\"${sums[$i]}\")\n        matrix[$i]=$(printf \"%s \" \"${matrix[$j]}\")\n        sums[$i]=$(printf \"%s \" \"${sums[$j]}\")\n        matrix[$j]=$(printf \"%s \" \"${tmp_matrix[@]}\")\n        sums[$j]=$(printf \"%s \" \"${tmp_sums[@]}\")\n      fi\n    done\n  done\n\n  # print the matrix\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      tmp_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpi9mt8uij.sh: line 57: syntax error near unexpected token `}'\\n/tmp/tmpi9mt8uij.sh: line 57: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_sum_index=0\n    local -i max_sum_index_2=0\n    local -i max_sum_index_3=0\n    local -i max_sum_index_4=0\n    local -i max_sum_index_5=0\n    local -i max_sum_index_6=0\n    local -i max_sum_index_7=0\n    local -i max_sum_index_8=0\n    local -i max_sum_index_9=0\n    local -i max_sum_index_10=0\n    local -i max_sum_index_11=0\n    local -i max_sum_index_12=0\n    local -i max_sum_index_13=0\n    local -i max_sum_index_14=0\n    local -i max_sum_index_15=0\n    local -i max_sum_index_16=0\n    local -i max_sum_index_17=0\n    local -i max_sum_index_18=0\n    local -i max_sum_index_19=0\n    local -i max_sum_index_20=0\n    local -i max_sum_index_21=0\n    local -i max_sum_index_22=0\n    local -i max_sum_index_23=0\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -a sorted\n    local row\n    local sum\n    local i\n    local j\n    local k\n    local n\n    local m\n    local -i min\n    local -i min_index\n    local -i max\n    local -i max_index\n\n    # Split the matrix into rows\n    IFS=$'\\n' read -d '' -r -a rows <<< \"$matrix\"\n    n=${#rows[@]}\n\n    # Calculate the sums of each row\n    for ((i=0; i<n; i++)); do\n        row=${rows[i]}\n        IFS=$' ' read -r -a row <<< \"$row\"\n        sum=0\n        for ((j=0; j<${#row[@]}; j++)); do\n            sum=$((sum + row[j]))\n        done\n        sums[i]=$sum\n    done\n\n    # Sort the rows by their sums\n    for ((i=0; i<n; i++)); do\n        min=${sums[0]}\n        min_index=0\n        for ((j=1; j<n; j++)); do\n            if [[ ${sums[j]} -lt $min ]]; then\n                min=${sums[j]}\n                min_index=$j\n            fi\n        done\n        sorted[i]=${rows[min_index]}\n        sums[min_index]=$((sums[min_index] + 1))\n    done\n\n    # Print the sorted matrix\n    for ((i=0; i<n; i++)); do\n        row=${sorted[i]}\n        IFS=$' ' read -r -a row <<< \"$row\"\n        for ((j=0; j<${#row[@]}; j++)); do\n            printf \"%d \" \"${row[j]}\"\n        done\n        printf \"\\n\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_7z1t1gu.sh: line 32: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -n matrix=$1\n    local -a sums\n    local -i i=0 j=0\n    local -i rows=0 cols=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_sum_index=0\n    local -i max_sum_row=0\n    local -i max_sum_col=0\n    local -i temp=0\n\n    # Get the number of rows and columns\n    rows=$(wc -l <<< \"$matrix\")\n    cols=$(wc -w <<< \"${matrix[0]}\")\n\n    # Calculate the sum of each row\n    for i in $(seq 0 $((rows - 1))); do\n        sum=0\n        for j in $(seq 0 $((cols - 1))); do\n            sum=$((sum + matrix[$i,$j]))\n        done\n        sums[$i]=$sum\n    done\n\n    # Sort the sums\n    for i in $(seq 0 $((rows - 1))); do\n        max_sum=$((sums[i]))\n        max_sum_index=$i\n        for j in $(seq $((i + 1)) $((rows - 1))); do\n            if ((sums[j] > max_sum)); then\n                max_sum=$((sums[j]))\n                max_sum_index=$j\n            fi\n        done\n        temp=$((sums[i]))\n        sums[i]=$((sums[max_sum_index]))\n        sums[max_sum_index]=$temp\n    done\n\n    # Sort the matrix\n    for i in $(seq 0 $((rows - 1))); do\n        max_sum_row=$((sums[i]))\n        for j in $(seq 0 $((rows - 1))); do\n            if ((sums[j] == max_sum_row)); then\n                max_sum_row=$j\n                break\n            fi\n        done\n        for j in $(seq 0 $((cols - 1))); do\n            temp=$((matrix[i,j]))\n            matrix[i,j]=$((matrix[max_sum_row,\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpqqopvd1b.sh: line 56: unexpected EOF while looking for matching `)'\\n/tmp/tmpqqopvd1b.sh: line 71: syntax error: unexpected end of file\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local row=''\n  local row_count=0\n  local column_count=0\n  local column_index=0\n  local column_value=0\n  local sorted_matrix=''\n  local sorted_row=''\n  local sorted_row_index=0\n  local sorted_row_sum=0\n  local sorted_row_count=0\n  local sorted_column_count=0\n  local sorted_column_index=0\n  local sorted_column_value=0\n\n  # Calculate the sum of each row\n  while read -r row; do\n    row_sum=0\n    row_count=$((row_count + 1))\n    column_count=0\n    column_index=0\n    while read -r column_value; do\n      column_count=$((column_count + 1))\n      row_sum=$((row_sum + column_value))\n    done <<< \"$row\"\n    row_sums[$row_index]=\"$row_sum\"\n    row_index=$((row_index + 1))\n  done <<< \"$matrix\"\n\n  # Sort the matrix by the sum of each row\n  while read -r row; do\n    sorted_row_count=$((sorted_row_count + 1))\n    sorted_column_count=0\n    sorted_column_index=0\n    while read -r column_value; do\n      sorted_column_count=$((sorted_column_count + 1))\n      sorted_column_value=$column_value\n      sorted_row_sum=${row_sums[$sorted_row_index]}\n      sorted_row_index=0\n      while read -r sorted_row; do\n        if [[ $sorted_row_sum -gt ${row_sums[$sorted_row_index]} ]]; then\n          sorted_row_sum=${row_sums[$sorted_row_index]}\n          sorted_row_index=$((sorted_row_index + 1))\n        else\n          break\n        fi\n      done <<< \"$\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpfmvq2ck0.sh: line 64: syntax error near unexpected token `1\\'\\n/tmp/tmpfmvq2ck0.sh: line 64: `    [[ $(candidate \"1 2 3\\\\n2 4 5\\\\n1 1 1\") = \"1 1 1\\\\n1 2 3\\\\n2 4 5\" ]]\\'\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp=0\n    local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local -i ppp=0\n   \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_matrix\n    local -a row\n    local -i row_num=0\n    local -i col_num=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i sum=0\n    local -i max_col_num=0\n    local -i max_row_num=0\n    local -i max_sum=0\n    local -i min_sum=0\n    local -i min_sum_index=0\n    local -i max_sum_index=0\n    local -i temp_sum=0\n    local -i temp_sum_index=0\n    local -i temp_row_num=0\n    local -i temp_col_num=0\n    local -i temp_row_num_index=0\n    local -i temp_col_num_index=0\n    local -i temp_row_num_index_2=0\n    local -i temp_col_num_index_2=0\n    local -i temp_row_num_index_3=0\n    local -i temp_col_num_index_3=0\n    local -i temp_row_num_index_4=0\n    local -i temp_col_num_index_4=0\n    local -i temp_row_num_index_5=0\n    local -i temp_col_num_index_5=0\n    local -i temp_row_num_index_6=0\n    local -i temp_col_num_index_6=0\n    local -i temp_row_num_index_7=0\n    local -i temp_col_num_index_7=0\n    local -i temp_row_num_index_8=0\n    local -i temp_col_num_index_8=0\n    local -i temp_row_num_index_9=0\n    local -i temp_col_num_index_9=0\n    local -i temp_row_num_index_10=0\n   \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row_sum=0\n    local row_count=0\n    local row=''\n    local row_sorted=''\n    local row_sorted_index=0\n\n    # Calculate the sum of each row\n    while read -r row; do\n        row_sums[$row_index]=0\n        row_count=0\n        for num in $row; do\n            row_sums[$row_index]=$((row_sums[$row_index] + num))\n            ((row_count++))\n        done\n        ((row_index++))\n    done <<< \"$matrix\"\n\n    # Sort the row sums\n    row_sums_sorted=($(printf '%s\\n' \"${row_sums[@]}\" | sort -n))\n\n    # Sort the matrix according to the sorted row sums\n    for row_sum in \"${row_sums_sorted[@]}\"; do\n        row_index=0\n        for row in $matrix; do\n            if [[ \"$row_sum\" -eq \"${row_sums[$row_index]}\" ]]; then\n                # Sort the row\n                row_sorted=($(printf '%s\\n' $row | sort -n))\n                row_sorted_index=0\n                for num in \"${row_sorted[@]}\"; do\n                    if [[ $row_sorted_index -eq 0 ]]; then\n                        printf '%s' \"$num\"\n                    else\n                        printf ' %s' \"$num\"\n                    fi\n                    ((row_sorted_index++))\n                done\n                printf '\\n'\n            fi\n            ((row_index++))\n        done\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpta99azot.sh: line 20: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_rows\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i row_sum=0\n  local -i row_count=0\n  local -i col_count=0\n  local -i max_col_count=0\n  local -i max_row_count=0\n  local -i max_row_sum=0\n  local -i max_row_index=0\n  local -i max_col_index=0\n  local -i max_row_sum_index=0\n  local -i max_row_count_index=0\n  local -i max_col_count_index=0\n  local -i max_row_index_index=0\n  local -i max_col_index_index=0\n  local -i max_row_sum_index_index=0\n  local -i max_row_count_index_index=0\n  local -i max_col_count_index_index=0\n  local -i max_row_index_index_index=0\n  local -i max_col_index_index_index=0\n  local -i max_row_sum_index_index_index=0\n  local -i max_row_count_index_index_index=0\n  local -i max_col_count_index_index_index=0\n  local -i max_row_index_index_index_index=0\n  local -i max_col_index_index_index_index=0\n  local -i max_row_sum_index_index_index_index=0\n  local -i max_row_count_index_index_index_index=0\n  local -i max_col_count_index_index_index_index=0\n  local -i max_row_index_index_index_index_index=0\n  local -i max_col_index_index_index_index_index=0\n  local -i\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_sums_index=0\n    local row_index=0\n    local row_sum=0\n    local row=()\n    local row_length=0\n    local row_length_index=0\n    local row_length_index_2=0\n    local row_length_index_3=0\n    local row_length_index_4=0\n    local row_length_index_5=0\n    local row_length_index_6=0\n    local row_length_index_7=0\n    local row_length_index_8=0\n    local row_length_index_9=0\n    local row_length_index_10=0\n    local row_length_index_11=0\n    local row_length_index_12=0\n    local row_length_index_13=0\n    local row_length_index_14=0\n    local row_length_index_15=0\n    local row_length_index_16=0\n    local row_length_index_17=0\n    local row_length_index_18=0\n    local row_length_index_19=0\n    local row_length_index_20=0\n    local row_length_index_21=0\n    local row_length_index_22=0\n    local row_length_index_23=0\n    local row_length_index_24=0\n    local row_length_index_25=0\n    local row_length_index_26=0\n    local row_length_index_27=0\n    local row_length_index_28=0\n    local row_length_index_29=0\n    local row_length_index_30=0\n    local row_length_index_31=0\n    local row_length_index_32=0\n    local row_length_index_33=0\n    local row_length_index_34=0\n    local row_length_index_35=0\n    local row_length_index_36=0\n    local row_length_index_37=0\n    local row_length_index_38=0\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal row_sums=()\n\tlocal row_index=0\n\tlocal row_sum=0\n\tlocal row_count=0\n\tlocal row_sorted=0\n\tlocal row_swap=0\n\tlocal row_swap_index=0\n\tlocal row_swap_sum=0\n\tlocal row_swap_count=0\n\tlocal row_swap_sorted=0\n\tlocal row_swap_swap=0\n\tlocal row_swap_swap_index=0\n\tlocal row_swap_swap_sum=0\n\tlocal row_swap_swap_count=0\n\tlocal row_swap_swap_sorted=0\n\tlocal row_swap_swap_swap=0\n\tlocal row_swap_swap_swap_index=0\n\tlocal row_swap_swap_swap_sum=0\n\tlocal row_swap_swap_swap_count=0\n\tlocal row_swap_swap_swap_sorted=0\n\tlocal row_swap_swap_swap_swap=0\n\tlocal row_swap_swap_swap_swap_index=0\n\tlocal row_swap_swap_swap_swap_sum=0\n\tlocal row_swap_swap_swap_swap_count=0\n\tlocal row_swap_swap_swap_swap_sorted=0\n\tlocal row_swap_swap_swap_swap_swap=0\n\tlocal row_swap_swap_swap_swap_swap_index=0\n\tlocal row_swap_swap_swap_swap_swap_sum=0\n\tlocal row_swap_swap_swap_swap_swap_count=0\n\tlocal row_swap_swap_swap_swap_swap_sorted=0\n\tlocal row_swap_swap_swap_swap_swap_swap=0\n\tlocal row_swap_swap_swap_swap_sw\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row\n    local sum\n    local i\n    local j\n    local temp\n    local temp_sum\n    local temp_row\n    local sorted_matrix=()\n\n    while read -r row; do\n        sum=0\n        for i in $row; do\n            sum=$((sum + i))\n        done\n        row_sums[$row_index]=$sum\n        row_index=$((row_index + 1))\n    done <<< \"$matrix\"\n\n    for ((i = 0; i < ${#row_sums[@]}; i++)); do\n        for ((j = i + 1; j < ${#row_sums[@]}; j++)); do\n            if [[ ${row_sums[$i]} -gt ${row_sums[$j]} ]]; then\n                temp_sum=${row_sums[$i]}\n                row_sums[$i]=${row_sums[$j]}\n                row_sums[$j]=$temp_sum\n                temp_row=${sorted_matrix[$i]}\n                sorted_matrix[$i]=${sorted_matrix[$j]}\n                sorted_matrix[$j]=$temp_row\n            fi\n        done\n    done\n\n    row_index=0\n    while read -r row; do\n        sorted_matrix[$row_index]=\"$row\"\n        row_index=$((row_index + 1))\n    done <<< \"$matrix\"\n\n    for i in \"${sorted_matrix[@]}\"; do\n        echo \"$i\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpxjpdg_sc.sh: line 21: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_idx=0\n    local row_sum=0\n    local row_num=0\n    local col_num=0\n    local col_idx=0\n    local row_idx_sorted=()\n    local row_idx_sorted_idx=0\n    local row_idx_sorted_idx_max=0\n    local row_idx_sorted_idx_min=0\n    local row_idx_sorted_idx_tmp=0\n    local row_idx_sorted_idx_tmp_max=0\n    local row_idx_sorted_idx_tmp_min=0\n    local row_idx_sorted_idx_tmp_max_idx=0\n    local row_idx_sorted_idx_tmp_min_idx=0\n    local row_idx_sorted_idx_tmp_max_idx_tmp=0\n    local row_idx_sorted_idx_tmp_min_idx_tmp=0\n    local row_idx_sorted_idx_tmp_max_idx_tmp_max=0\n    local row_idx_sorted_idx_tmp_min_idx_tmp_min=0\n    local row_idx_sorted_idx_tmp_max_idx_tmp_max_idx=0\n    local row_idx_sorted_idx_tmp_min_idx_tmp_min_idx=0\n    local row_idx_sorted_idx_tmp_max_idx_tmp_max_idx_tmp=0\n    local row_idx_sorted_idx_tmp_min_idx_tmp_min_idx_tmp=0\n    local row_idx_sorted_idx_tmp_max_idx_tmp_max_idx_tmp_max=0\n    local row_idx_sorted_idx_tmp_min_idx_tmp_min_idx_tmp_min=0\n    local row_idx\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows=()\n  local -a sums=()\n  local -a sorted_rows=()\n  local -a sorted_sums=()\n  local row\n  local sum\n  local i\n  local j\n  local temp\n  local -i row_count=0\n  local -i col_count=0\n  local -i max_sum=0\n  local -i max_sum_index=0\n  local -i max_sum_count=0\n  local -i max_sum_count_index=0\n  local -i max_sum_count_count=0\n  local -i max_sum_count_count_index=0\n  local -i max_sum_count_count_count=0\n\n  # Split the matrix into rows\n  while read -r row; do\n    rows+=(\"$row\")\n    row_count+=1\n  done <<< \"$matrix\"\n\n  # Split the rows into columns\n  for ((i=0; i<row_count; i++)); do\n    col_count=0\n    for ((j=0; j<${#rows[i]}; j++)); do\n      if [[ ${rows[i]:j:1} == ' ' ]]; then\n        col_count+=1\n      fi\n    done\n    col_count+=1\n  done\n\n  # Calculate the sums of each row\n  for ((i=0; i<row_count; i++)); do\n    sum=0\n    for ((j=0; j<col_count; j++)); do\n      sum+=${rows[i]%% *}\n      rows[i]=${rows[i#* }\n    done\n    sums+=(\"$sum\")\n  done\n\n  # Sort the sums\n  for ((i=0; i<row_count; i++)); do\n    max_sum=0\n    max_sum_index=0\n    for ((j=0; j<row_count; j++)); do\n      if [[ ${sums[j]} -gt $max_sum ]]; then\n        max_sum=${sums[j]}\n        max_sum_index=$j\n      fi\n    done\n   \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpc4p3ccz3.sh: line 64: syntax error near unexpected token `}'\\n/tmp/tmpc4p3ccz3.sh: line 64: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=$1\n    local -a rows\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_rows\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i tmp=0\n    local -i row_count=0\n    local -i col_count=0\n    local -i row_length=0\n    local -i col_length=0\n    local -i max_length=0\n    local -i max_length_index=0\n    local -i max_length_col=0\n    local -i max_length_row=0\n    local -i max_length_row_index=0\n    local -i max_length_col_index=0\n    local -i max_length_row_col_index=0\n    local -i max_length_row_col_index_col=0\n    local -i max_length_row_col_index_row=0\n    local -i max_length_row_col_index_col_index=0\n    local -i max_length_row_col_index_row_index=0\n    local -i max_length_row_col_index_col_index_col=0\n    local -i max_length_row_col_index_row_index_row=0\n    local -i max_length_row_col_index_col_index_col_index=0\n    local -i max_length_row_col_index_row_index_row_index=0\n    local -i max_length_row_col_index_col_index_col_index_col=0\n    local -i max_length_row_col_index_row_index_row_index_row=0\n    local -i max_length_row_col_index_col_index_col_index_col_index=0\n    local -i max_length_row_col_index_row_index_row_index_row_index=0\n    local -i max_length_row_col_index_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    # Create an array of arrays (matrix)\n    local matrix=()\n    while read -r line; do\n        matrix+=(\"$line\")\n    done <<< \"$1\"\n\n    # Create an array of sums\n    local sums=()\n    for row in \"${matrix[@]}\"; do\n        local sum=0\n        for num in $row; do\n            (( sum += num ))\n        done\n        sums+=(\"$sum\")\n    done\n\n    # Sort the sums and print the corresponding rows\n    IFS=$'\\n' sorted=($(sort -n <<< \"${sums[*]}\"))\n    for sum in \"${sorted[@]}\"; do\n        for i in \"${!sums[@]}\"; do\n            if [[ \"${sums[$i]}\" == \"$sum\" ]]; then\n                echo \"${matrix[$i]}\"\n                break\n            fi\n        done\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpaalv_fdx.sh: line 17: ((: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n/tmp/tmpaalv_fdx.sh: line 17: ((: 5\\\\n1: syntax error: invalid arithmetic operator (error token is \"\\\\n1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=$1\n  local -a sums\n  local -a rows\n  local -a sorted_sums\n  local -a sorted_rows\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_sum_index=0\n  local -i max_sum_row_index=0\n  local -i max_sum_row_length=0\n  local -i row_length=0\n  local -i row_index=0\n  local -i row_sum=0\n  local -i row_sum_index=0\n  local -i row_sum_length=0\n  local -i row_sum_length_index=0\n  local -i row_sum_length_length=0\n  local -i row_sum_length_max_length=0\n  local -i row_sum_length_max_length_index=0\n  local -i row_sum_length_max_length_sum=0\n  local -i row_sum_length_max_length_sum_index=0\n  local -i row_sum_length_max_length_sum_length=0\n  local -i row_sum_length_max_length_sum_length_index=0\n  local -i row_sum_length_max_length_sum_length_length=0\n  local -i row_sum_length_max_length_sum_length_length_index=0\n  local -i row_sum_length_max_length_sum_length_length_length=0\n  local -i row_sum_length_max_length_sum_length_length_length_index=0\n  local -i row_sum_length_max_length_sum_length_length_length_length=0\n  local -i row_sum_length_max_length_sum_length_length_length_length_index=0\n  local -i row_sum_length_max_length_sum_length_length_length_length_length=0\n  local -i\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -a sums\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_index=0\n  local -i tmp=0\n  local -i tmp_index=0\n  local -i tmp_sum=0\n  local -i tmp_sum_index=0\n  local -i tmp_sum_index_sum=0\n  local -i tmp_sum_index_sum_index=0\n  local -i tmp_sum_index_sum_index_sum=0\n  local -i tmp_sum_index_sum_index_sum_index=0\n  local -i tmp_sum_index_sum_index_sum_index_sum=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index_sum=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index_sum_index=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index_sum_index_sum=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum=0\n  local -i tmp_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index_sum_index=0\n  local -i tmp_sum_index_sum_index\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i l=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i o=0\n\tlocal -i p=0\n\tlocal -i q=0\n\tlocal -i r=0\n\tlocal -i s=0\n\tlocal -i t=0\n\tlocal -i u=0\n\tlocal -i v=0\n\tlocal -i w=0\n\tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -i aa=0\n\tlocal -i ab=0\n\tlocal -i ac=0\n\tlocal -i ad=0\n\tlocal -i ae=0\n\tlocal -i af=0\n\tlocal -i ag=0\n\tlocal -i ah=0\n\tlocal -i ai=0\n\tlocal -i aj=0\n\tlocal -i ak=0\n\tlocal -i al=0\n\tlocal -i am=0\n\tlocal -i an=0\n\tlocal -i ao=0\n\tlocal -i ap=0\n\tlocal -i aq=0\n\tlocal -i ar=0\n\tlocal -i as=0\n\tlocal -i at=0\n\tlocal -i au=0\n\tlocal -i av=0\n\tlocal -i aw=0\n\tlocal -i ax=0\n\tlocal -i ay=0\n\tlocal -i az=0\n\tlocal -i ba=0\n\tlocal -i bb=0\n\tlocal -i bc=0\n\tlocal -i bd=0\n\tlocal -i be=0\n\tlocal -i bf=0\n\tlocal -i bg=0\n\tlocal -i bh=0\n\tlocal -i bi=0\n\tlocal -i bj=0\n\tlocal -i bk=0\n\tlocal -i bl=0\n\tlocal -i bm=0\n\tlocal -i bn=0\n\tlocal -i bo=0\n\tlocal -i bp=0\n\tlocal -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp=0\n    local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i row_sum\n    local -i i\n    local -i j\n    local -i rows\n    local -i cols\n    local -i row_index\n    local -i col_index\n    local -i temp\n    local -i swap_row_index\n    local -i swap_row_sum\n    local -i swap_col_index\n    local -i swap_col_sum\n    local -i swap_temp\n\n    # Read the matrix into an array\n    i=0\n    while read -r line; do\n        matrix[i]=\"$line\"\n        ((i++))\n    done <<< \"$1\"\n\n    # Get the number of rows and columns\n    rows=${#matrix[@]}\n    cols=$(echo \"${matrix[0]}\" | wc -w)\n\n    # Sort the matrix\n    for ((i=0; i<rows; i++)); do\n        row_sum=0\n        for ((j=0; j<cols; j++)); do\n            row_sum=$((row_sum + ${matrix[i]##* }))\n            matrix[i]=\"${matrix[i]% *}\"\n        done\n\n        # Swap the current row with the row with the next smallest sum\n        for ((j=i+1; j<rows; j++)); do\n            swap_row_sum=0\n            for ((k=0; k<cols; k++)); do\n                swap_row_sum=$((swap_row_sum + ${matrix[j]##* }))\n                matrix[j]=\"${matrix[j]% *}\"\n            done\n\n            if [[ $row_sum -gt $swap_row_sum ]]; then\n                # Swap the rows\n                temp=${matrix[i]}\n                matrix[i]=${matrix[j]}\n                matrix[j]=$temp\n\n                # Swap the sums\n                temp=$row_sum\n                row_sum=$swap_row_sum\n                swap_row_sum=$temp\n            fi\n        done\n\n        # Restore the row\n        for ((j=cols-1; j>=0; j--)); do\n           \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpxszhsyc3.sh: line 64: syntax error near unexpected token `}'\\n/tmp/tmpxszhsyc3.sh: line 64: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -a sums\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i max_sum=0\n  local -i tmp=0\n  local -i tmp_sum=0\n  local -i tmp_i=0\n  local -i tmp_j=0\n  local -i tmp_k=0\n  local -i tmp_n=0\n  local -i tmp_m=0\n  local -i tmp_sum=0\n  local -i tmp_max=0\n  local -i tmp_max_i=0\n  local -i tmp_max_j=0\n  local -i tmp_max_k=0\n  local -i tmp_max_n=0\n  local -i tmp_max_m=0\n  local -i tmp_max_sum=0\n  local -i tmp_max_tmp=0\n  local -i tmp_max_tmp_sum=0\n  local -i tmp_max_tmp_i=0\n  local -i tmp_max_tmp_j=0\n  local -i tmp_max_tmp_k=0\n  local -i tmp_max_tmp_n=0\n  local -i tmp_max_tmp_m=0\n  local -i tmp_max_tmp_sum=0\n  local -i tmp_max_tmp_max=0\n  local -i tmp_max_tmp_max_i=0\n  local -i tmp_max_tmp_max_j=0\n  local -i tmp_max_tmp_max_k=0\n  local -i tmp_max_tmp_max_n=0\n  local -i tmp_max_tmp_max_m=0\n  local -i tmp_max_tmp_max_sum=0\n  local -\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i j k\n  local -i row_sum\n  local -i row_sum_prev\n  local -i row_sum_next\n  local -i row_sum_prev_index\n  local -i row_sum_next_index\n  local -i row_sum_index\n  local -i row_sum_index_prev\n  local -i row_sum_index_next\n  local -i row_sum_index_prev_prev\n  local -i row_sum_index_next_next\n  local -i row_sum_index_prev_prev_prev\n  local -i row_sum_index_next_next_next\n  local -i row_sum_index_prev_prev_prev_prev\n  local -i row_sum_index_next_next_next_next\n  local -i row_sum_index_prev_prev_prev_prev_prev\n  local -i row_sum_index_next_next_next_next_next\n  local -i row_sum_index_prev_prev_prev_prev_prev_prev\n  local -i row_sum_index_next_next_next_next_next_next\n  local -i row_sum_index_prev_prev_prev_prev_prev_prev_prev\n  local -i row_sum_index_next_next_next_next_next_next_next\n  local -i row_sum_index_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i row_sum_index_next_next_next_next_next_next_next_next\n  local -i row_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i row_sum_index_next_next_next_next_next_next_next_next_next\n  local -i row_sum_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local -i row_sum_index_next_next_next_next_next_next_next_next_next_next\n  local -i row_sum_index_prev_prev_prev\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0\n  local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n1 | wc -w)\n  local sums=()\n  local i=0\n  while read -r line; do\n    local sum=0\n    for num in $line; do\n      sum=$((sum + num))\n    done\n    sums[$i]=$sum\n    ((i++))\n  done <<< \"$matrix\"\n  local sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n  local sorted_matrix=()\n  for sum in \"${sorted_sums[@]}\"; do\n    local index=$(printf '%s\\n' \"${sums[@]}\" | grep -n \"$sum\" | cut -d: -f1)\n    sorted_matrix[$index]=$(echo \"$matrix\" | sed -n \"${index}p\")\n  done\n  printf '%s\\n' \"${sorted_matrix[@]}\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpo0wbw2pu.sh: line 14: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max=0\n    local -i tmp=0\n    local -i row=0\n    local -i col=0\n    local -i row_max=0\n    local -i col_max=0\n    local -i row_tmp=0\n    local -i col_tmp=0\n    local -i row_sum=0\n    local -i col_sum=0\n    local -i row_tmp_sum=0\n    local -i col_tmp_sum=0\n    local -i row_max_sum=0\n    local -i col_max_sum=0\n    local -i row_tmp_max=0\n    local -i col_tmp_max=0\n    local -i row_max_max=0\n    local -i col_max_max=0\n    local -i row_tmp_max_sum=0\n    local -i col_tmp_max_sum=0\n    local -i row_max_max_sum=0\n    local -i col_max_max_sum=0\n    local -i row_tmp_max_max=0\n    local -i col_tmp_max_max=0\n    local -i row_max_max_max=0\n    local -i col_max_max_max=0\n    local -i row_tmp_max_max_sum=0\n    local -i col_tmp_max_max_sum=0\n    local -i row_max_max_max_sum=0\n    local -i col_max_max_max_sum=0\n    local -i row_tmp_max_max_max=0\n    local -i col_tmp_max_max_max=0\n    local -i row_max_max_max_max=0\n    local -i col_max_max_max_max=0\n    local -i row_tmp_max_max_max_sum=0\n    local -i col\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0\n  local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i sums=()\n  local -i sums_sorted=()\n  local -i sums_sorted_index=()\n  local -i sums_sorted_index_sorted=()\n  local -i sums_sorted_index_sorted_index=()\n  local -i sums_sorted_index_sorted_index_sorted=()\n  local -i sums_sorted_index_sorted_index_sorted_index=()\n  local -i sums_sorted_index_sorted_index_sorted_index_sorted=()\n  local -i sums_sorted_index_sorted_index_sorted_index_sorted_index=()\n  local -i sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted=()\n  local -i sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index=()\n  local -i sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted=()\n  local -i sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index=()\n  local -i sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted=()\n  local -i sums_sorted_index\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local row\n  local row_sum\n  local row_sums\n  local row_sums_sorted\n  local row_sums_sorted_index\n  local row_sums_sorted_index_row\n  local row_sums_sorted_index_row_sorted\n  local row_sums_sorted_index_row_sorted_joined\n  local row_sums_sorted_index_row_sorted_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined_joined\n  local row_sums_sorted_index_row_sorted_joined_joined_joined_joined_joined_joined_joined\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i m=0\n  local -i n=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i temp=0\n  local -i temp_sum=0\n  local -i temp_i=0\n  local -i temp_j=0\n  local -i temp_k=0\n  local -i temp_m=0\n  local -i temp_n=0\n  local -i temp_max_sum=0\n  local -i temp_max_i=0\n  local -i temp_max_j=0\n  local -i temp_max_k=0\n  local -i temp_max_m=0\n  local -i temp_max_n=0\n  local -i temp_max_sum=0\n  local -i temp_max_i=0\n  local -i temp_max_j=0\n  local -i temp_max_k=0\n  local -i temp_max_m=0\n  local -i temp_max_n=0\n  local -i temp_max_sum=0\n  local -i temp_max_i=0\n  local -i temp_max_j=0\n  local -i temp_max_k=0\n  local -i temp_max_m=0\n  local -i temp_max_n=0\n  local -i temp_max_sum=0\n  local -i temp_max_i=0\n  local -i temp_max_j=0\n  local -i temp_max_k=0\n  local -i temp_max_m=0\n  local -i temp_max_n=0\n  local -i temp_max_sum=0\n  local -i temp_max_i=0\n  local -i temp_max_j=0\n  local -i temp_max_k=0\n  local -i temp_max_m=0\n  local -i temp_max_n=0\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows=()\n  local -a sums=()\n  local -a sorted_rows=()\n  local -a sorted_sums=()\n  local -a sorted_matrix=()\n  local row\n  local sum\n  local i\n  local j\n  local k\n  local n\n\n  # Split the matrix into rows\n  while read -r row; do\n    rows+=(\"$row\")\n  done <<< \"$matrix\"\n\n  # Calculate the sum of each row\n  for row in \"${rows[@]}\"; do\n    sum=0\n    for i in $row; do\n      ((sum += i))\n    done\n    sums+=(\"$sum\")\n  done\n\n  # Sort the sums\n  for ((i=0; i<${#sums[@]}; i++)); do\n    for ((j=i+1; j<${#sums[@]}; j++)); do\n      if ((sums[i] > sums[j])); then\n        k=\"${sums[i]}\"\n        sums[i]=\"${sums[j]}\"\n        sums[j]=\"$k\"\n      fi\n    done\n  done\n\n  # Sort the rows according to the sums\n  for sum in \"${sums[@]}\"; do\n    for ((i=0; i<${#rows[@]}; i++)); do\n      if [[ \"${sums[i]}\" == \"$sum\" ]]; then\n        sorted_rows+=(\"${rows[i]}\")\n        sorted_sums+=(\"$sum\")\n      fi\n    done\n  done\n\n  # Print the sorted matrix\n  for ((i=0; i<${#sorted_rows[@]}; i++)); do\n    n=0\n    for j in ${sorted_rows[i]}; do\n      if ((n > 0)); then\n        printf ' '\n      fi\n      printf '%d' \"$j\"\n      ((n++))\n    done\n    printf '\\n'\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpdz621auu.sh: line 28: ((: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n/tmp/tmpdz621auu.sh: line 28: ((: 5\\\\n1: syntax error: invalid arithmetic operator (error token is \"\\\\n1\")\\n/tmp/tmpdz621auu.sh: line 61: printf: 3\\\\n2: invalid number\\n/tmp/tmpdz621auu.sh: line 61: printf: 5\\\\n1: invalid number\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_rows\n    local -a sorted_matrix\n    local row\n    local sum\n    local i\n    local j\n    local k\n    local n\n    local m\n\n    # Split the matrix into rows\n    IFS=$'\\n' read -r -d '' -a rows <<< \"$matrix\"\n\n    # Calculate the sum of each row\n    for i in \"${!rows[@]}\"; do\n        sum=0\n        IFS=' ' read -r -a row <<< \"${rows[$i]}\"\n        for j in \"${row[@]}\"; do\n            (( sum += j ))\n        done\n        sums[$i]=\"$sum\"\n    done\n\n    # Sort the sums\n    sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n    # Sort the rows\n    for i in \"${!sorted_sums[@]}\"; do\n        for j in \"${!sums[@]}\"; do\n            if [[ \"${sorted_sums[$i]}\" -eq \"${sums[$j]}\" ]]; then\n                sorted_rows[$i]=\"${rows[$j]}\"\n                unset sums[$j]\n                break\n            fi\n        done\n    done\n\n    # Build the sorted matrix\n    for i in \"${!sorted_rows[@]}\"; do\n        IFS=' ' read -r -a row <<< \"${sorted_rows[$i]}\"\n        for j in \"${row[@]}\"; do\n            sorted_matrix[$i]=\"${sorted_matrix[$i]} $j\"\n        done\n    done\n\n    # Print the sorted matrix\n    for i in \"${sorted_matrix[@]}\"; do\n        echo \"$i\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp47hm5pq_.sh: line 28: ((: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n/tmp/tmp47hm5pq_.sh: line 28: ((: 5\\\\n1: syntax error: invalid arithmetic operator (error token is \"\\\\n1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i sum=0\n\tlocal -i max=0\n\tlocal -i min=0\n\tlocal -i tmp=0\n\tlocal -a sums\n\tlocal -a sorted\n\tlocal -a tmp_matrix\n\tlocal -a tmp_sums\n\tlocal -a tmp_sorted\n\tlocal -a tmp_matrix_row\n\tlocal -a tmp_sums_row\n\tlocal -a tmp_sorted_row\n\tlocal -a tmp_matrix_row_col\n\tlocal -a tmp_sums_row_col\n\tlocal -a tmp_sorted_row_col\n\tlocal -a tmp_matrix_row_col_val\n\tlocal -a tmp_sums_row_col_val\n\tlocal -a tmp_sorted_row_col_val\n\tlocal -a tmp_matrix_row_col_val_val\n\tlocal -a tmp_sums_row_col_val_val\n\tlocal -a tmp_sorted_row_col_val_val\n\tlocal -a tmp_matrix_row_col_val_val_val\n\tlocal -a tmp_sums_row_col_val_val_val\n\tlocal -a tmp_sorted_row_col_val_val_val\n\tlocal -a tmp_matrix_row_col_val_val_val_val\n\tlocal -a tmp_sums_row_col_val_val_val_val\n\tlocal -a tmp_sorted_row_col_val_val_val_val\n\tlocal -a tmp_matrix_row_col_val_val_val_val_val\n\tlocal -a tmp_sums_row_col_val_val_val_val_val\n\tlocal -a tmp_sorted_row_col_val_val_val_val_val\n\tlocal -a tmp_matrix_row_col_val_val_val_val_val_val\n\tlocal -a tmp_sums_row_col\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=()\n  local row=()\n  local sum=0\n  local sums=()\n  local i=0\n  local j=0\n  local k=0\n  local n=0\n  local m=0\n  local temp=0\n  local temp_row=()\n\n  # split the matrix into rows\n  while read -r row; do\n    rows+=(\"$row\")\n  done <<< \"$matrix\"\n\n  # calculate the sums of each row\n  for ((i=0; i<${#rows[@]}; i++)); do\n    row=(${rows[$i]})\n    sum=0\n    for ((j=0; j<${#row[@]}; j++)); do\n      sum=$((sum + row[$j]))\n    done\n    sums+=(\"$sum\")\n  done\n\n  # sort the rows by their sums\n  for ((i=0; i<${#rows[@]}; i++)); do\n    for ((j=i; j<${#rows[@]}; j++)); do\n      if ((sums[$i] > sums[$j])); then\n        temp=${sums[$i]}\n        sums[$i]=${sums[$j]}\n        sums[$j]=$temp\n        temp_row=(\"${rows[$i]}\")\n        rows[$i]=(\"${rows[$j]}\")\n        rows[$j]=(\"${temp_row[@]}\")\n      fi\n    done\n  done\n\n  # print the sorted matrix\n  for ((i=0; i<${#rows[@]}; i++)); do\n    row=(${rows[$i]})\n    for ((j=0; j<${#row[@]}; j++)); do\n      echo -n \"${row[$j]} \"\n    done\n    echo\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpv2xpkd4f.sh: line 29: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i sorted_sum=0\n  local -i row_count=0\n  local -i col_count=0\n  local -i max_col_count=0\n  local -i max_row_count=0\n  local -i max_sum=0\n  local -i max_sorted_sum=0\n  local -i max_sorted_row_count=0\n  local -i max_sorted_col_count=0\n  local -i max_sorted_row_count_index=0\n  local -i max_sorted_col_count_index=0\n  local -i max_sorted_row_count_index_index=0\n  local -i max_sorted_col_count_index_index=0\n  local -i max_sorted_row_count_index_index_index=0\n  local -i max_sorted_col_count_index_index_index=0\n  local -i max_sorted_row_count_index_index_index_index=0\n  local -i max_sorted_col_count_index_index_index_index=0\n  local -i max_sorted_row_count_index_index_index_index_index=0\n  local -i max_sorted_col_count_index_index_index_index_index=0\n  local -i max_sorted_row_count\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal -a rows=()\n\tlocal -a sums=()\n\tlocal -a indices=()\n\tlocal -a sorted_rows=()\n\tlocal -a sorted_sums=()\n\tlocal -a sorted_indices=()\n\tlocal i=0\n\tlocal j=0\n\tlocal sum=0\n\tlocal index=0\n\tlocal row=''\n\tlocal sorted_row=''\n\tlocal sorted_sum=0\n\tlocal sorted_index=0\n\tlocal -i row_count=0\n\tlocal -i column_count=0\n\tlocal -i row_length=0\n\tlocal -i column_length=0\n\tlocal -i row_index=0\n\tlocal -i column_index=0\n\tlocal -i row_sum=0\n\tlocal -i column_sum=0\n\tlocal -i row_sum_index=0\n\tlocal -i column_sum_index=0\n\tlocal -i row_sum_count=0\n\tlocal -i column_sum_count=0\n\tlocal -i row_sum_length=0\n\tlocal -i column_sum_length=0\n\tlocal -i row_sorted_index=0\n\tlocal -i column_sorted_index=0\n\tlocal -i row_sorted_count=0\n\tlocal -i column_sorted_count=0\n\tlocal -i row_sorted_length=0\n\tlocal -i column_sorted_length=0\n\tlocal -i row_sorted_sum=0\n\tlocal -i column_sorted_sum=0\n\tlocal -i row_sorted_sum_index=0\n\tlocal -i column_sorted_sum_index=0\n\tlocal -i row_sorted_sum_count=0\n\tlocal -i column_sorted_sum_count=0\n\tlocal -i row_sorted_sum_length=0\n\tlocal -i column_sorted_sum_length=0\n\tlocal -i row_sorted_sum_length=0\n\tlocal -i column_sorted_sum_length=0\n\tlocal -i row_sorted_sum_length=0\n\tlocal\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_matrix\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n    local -i m\n    local -i sum\n    local -i max_sum\n    local -i min_sum\n    local -i max_sum_index\n    local -i min_sum_index\n\n    # Read the matrix\n    i=0\n    while read -r line; do\n        matrix[i]=\"$line\"\n        ((i++))\n    done <<< \"$1\"\n\n    # Find the number of rows\n    n=${#matrix[@]}\n\n    # Find the number of columns\n    m=${#matrix[0]}\n\n    # Find the sum of each row\n    for ((i=0; i<n; i++)); do\n        sum=0\n        for ((j=0; j<m; j++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        sums[i]=$sum\n    done\n\n    # Sort the sums\n    sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n    # Sort the matrix\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if [[ \"${sorted_sums[i]}\" == \"${sums[j]}\" ]]; then\n                sorted_matrix[i]=\"${matrix[j]}\"\n                break\n            fi\n        done\n    done\n\n    # Print the sorted matrix\n    for ((i=0; i<n; i++)); do\n        printf '%s\\n' \"${sorted_matrix[i]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpld0mllnm.sh: line 38: sum +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo=0\n  local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_index=0\n  local -i temp=0\n  local -i temp_sum=0\n  local -i temp_index=0\n  local -i temp_index_2=0\n  local -i temp_index_3=0\n  local -i temp_index_4=0\n  local -i temp_index_5=0\n  local -i temp_index_6=0\n  local -i temp_index_7=0\n  local -i temp_index_8=0\n  local -i temp_index_9=0\n  local -i temp_index_10=0\n  local -i temp_index_11=0\n  local -i temp_index_12=0\n  local -i temp_index_13=0\n  local -i temp_index_14=0\n  local -i temp_index_15=0\n  local -i temp_index_16=0\n  local -i temp_index_17=0\n  local -i temp_index_18=0\n  local -i temp_index_19=0\n  local -i temp_index_20=0\n  local -i temp_index_21=0\n  local -i temp_index_22=0\n  local -i temp_index_23=0\n  local -i temp_index_24=0\n  local -i temp_index_25=0\n  local -i temp_index_26=0\n  local -i temp_index_27=0\n  local -i temp_index_28=0\n  local -i temp_index_29=0\n  local -i temp_index_30=0\n  local -i temp_index_31=0\n  local -i temp_index_32=0\n  local -i temp_index_33=0\n  local -i temp_index_34=0\n  local -i temp_index_35=0\n \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted_rows\n  local -a sorted_sums\n  local -a sorted_matrix\n  local row\n  local sum\n  local i\n  local j\n  local k\n  local n\n  local m\n  local -i row_count=0\n  local -i col_count=0\n  local -i max_sum=0\n  local -i max_sum_index=0\n  local -i max_sum_row_count=0\n  local -i max_sum_col_count=0\n  local -i max_sum_row_index=0\n  local -i max_sum_col_index=0\n  local -i max_sum_row_index_count=0\n  local -i max_sum_col_index_count=0\n  local -i max_sum_row_index_count_count=0\n  local -i max_sum_col_index_count_count=0\n  local -i max_sum_row_index_count_count_count=0\n  local -i max_sum_col_index_count_count_count=0\n  local -i max_sum_row_index_count_count_count_count=0\n  local -i max_sum_col_index_count_count_count_count=0\n  local -i max_sum_row_index_count_count_count_count_count=0\n  local -i max_sum_col_index_count_count_count_count_count=0\n  local -i max_sum_row_index_count_count_count_count_count_count=0\n  local -i max_sum_col_index_count_count_count_count_count_count=0\n  local -i max_sum_row_index_count_count_count_count_count_count_count=0\n  local -i max_sum_col_index_count_count_count_count_count_count_count=0\n  local -i max_sum_row_index_count_count_count_count_count_count_count_count=0\n \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i sum=0\n\tlocal -i sum_max=0\n\tlocal -i sum_min=0\n\tlocal -i sum_tmp=0\n\tlocal -i tmp=0\n\tlocal -i tmp_index=0\n\tlocal -i tmp_index_max=0\n\tlocal -i tmp_index_min=0\n\tlocal -i tmp_index_tmp=0\n\tlocal -i tmp_max=0\n\tlocal -i tmp_min=0\n\tlocal -i tmp_tmp=0\n\tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -i z_max=0\n\tlocal -i z_min=0\n\tlocal -i z_tmp=0\n\tlocal -a matrix_tmp\n\tlocal -a matrix_tmp_max\n\tlocal -a matrix_tmp_min\n\tlocal -a matrix_tmp_tmp\n\tlocal -a matrix_tmp_tmp_max\n\tlocal -a matrix_tmp_tmp_min\n\tlocal -a matrix_tmp_tmp_tmp\n\tlocal -a matrix_tmp_tmp_tmp_max\n\tlocal -a matrix_tmp_tmp_tmp_min\n\tlocal -a matrix_tmp_tmp_tmp_tmp\n\tlocal -a matrix_tmp_tmp_tmp_tmp_max\n\tlocal -a matrix_tmp_tmp_tmp_tmp_min\n\tlocal -a matrix_tmp_tmp_tmp_tmp_tmp\n\tlocal -a matrix_tmp_tmp_tmp_tmp_tmp_max\n\tlocal -a matrix_tmp_tmp_tmp_tmp_tmp_min\n\tlocal -a matrix_tmp_tmp_tmp_tmp_tmp_tmp\n\tlocal -a matrix_tmp_tmp_tmp_tmp_tmp_tmp_max\n\tlocal -a matrix_tmp_tmp_tmp_tmp_tmp_tmp_min\n\tlocal -a matrix_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n\tlocal -a matrix_tmp_tmp_tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -n matrix=$1\n    local -a sums\n    local i=0\n    for row in $matrix; do\n        sums[i]=$(echo $row | tr ' ' '\\n' | paste -sd+ - | bc)\n        ((i++))\n    done\n    local -a sorted=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n    local -a result\n    for sum in \"${sorted[@]}\"; do\n        for ((i=0; i<${#sums[@]}; i++)); do\n            if [[ ${sums[i]} -eq $sum ]]; then\n                result+=(${matrix[i]})\n                unset sums[i]\n                unset matrix[i]\n                break\n            fi\n        done\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpj1t8pxps.sh: line 6: local: `1 2 3\\\\n2 4 5\\\\n1 1 1': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i t=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n\n    while read -r line; do\n        matrix[$i]=$line\n        ((i++))\n    done <<< \"$1\"\n\n    n=${#matrix[@]}\n    m=${#matrix[0]}\n\n    for ((i=0; i<n; i++)); do\n        sum=0\n        for ((j=0; j<m; j++)); do\n            tmp=${matrix[$i]}\n            tmp2=${tmp:$j:1}\n            ((sum+=tmp2))\n        done\n        sums[$i]=$sum\n    done\n\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((sums[$i]>sums[$j])); then\n                tmp=${sums[$i]}\n                sums[$i]=${sums[$j]}\n                sums[$j]=$tmp\n                tmp=${matrix[$i]}\n                matrix[$i]=${matrix[$j]}\n                matrix[$j]=$tmp\n            fi\n        done\n    done\n\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            for ((k=j+1; k<m; k++)); do\n                tmp=${matrix[$i]}\n                tmp2=${tmp:$j:1}\n                tmp3=${tmp:$k:1}\n                if ((tmp2>tmp3)); then\n                    t=${tmp:$j:1}\n                    tmp=${tmp:0:$j}\n                    tmp+=$tmp3\n                    tmp+=${t}\n                    tmp+=${tmp:$((k+1)):\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpomanr2uf.sh: line 76: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=()\n  local sums=()\n  local i=0\n  local row\n  local sum\n\n  while read row; do\n    rows[$i]=\"$row\"\n    sum=$(echo \"$row\" | tr ' ' '\\n' | awk '{s+=$1} END {print s}')\n    sums[$i]=\"$sum\"\n    i=$((i+1))\n  done <<< \"$matrix\"\n\n  for ((i=0; i<${#rows[@]}; i++)); do\n    for ((j=i+1; j<${#rows[@]}; j++)); do\n      if ((${sums[$i]} > ${sums[$j]})); then\n        row=\"${rows[$i]}\"\n        rows[$i]=\"${rows[$j]}\"\n        rows[$j]=\"$row\"\n        sum=\"${sums[$i]}\"\n        sums[$i]=\"${sums[$j]}\"\n        sums[$j]=\"$sum\"\n      fi\n    done\n  done\n\n  echo \"${rows[@]}\" | tr ' ' '\\n'\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -a sums\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i tmp=0\n\tlocal -i max=0\n\tlocal -i max_i=0\n\tlocal -i max_j=0\n\tlocal -i max_k=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_rows\n  local row\n  local sum\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local aa\n  local ab\n  local ac\n  local ad\n  local ae\n  local af\n  local ag\n  local ah\n  local ai\n  local aj\n  local ak\n  local al\n  local am\n  local an\n  local ao\n  local ap\n  local aq\n  local ar\n  local as\n  local at\n  local au\n  local av\n  local aw\n  local ax\n  local ay\n  local az\n  local ba\n  local bb\n  local bc\n  local bd\n  local be\n  local bf\n  local bg\n  local bh\n  local bi\n  local bj\n  local bk\n  local bl\n  local bm\n  local bn\n  local bo\n  local bp\n  local bq\n  local br\n  local bs\n  local bt\n  local bu\n  local bv\n  local bw\n  local bx\n  local by\n  local bz\n  local ca\n  local cb\n  local cc\n  local cd\n  local ce\n  local cf\n  local cg\n  local ch\n  local ci\n  local cj\n  local ck\n  local cl\n  local cm\n  local cn\n  local co\n  local cp\n  local cq\n  local cr\n  local cs\n  local ct\n  local cu\n  local cv\n  local cw\n  local cx\n  local cy\n  local cz\n  local da\n  local db\n  local dc\n  local dd\n  local de\n  local df\n  local dg\n  local dh\n  local di\n  local dj\n  local dk\n  local d\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  # Split the matrix into rows\n  local rows=($(echo \"$1\" | tr '\\n' ' '))\n  # Sort the rows by their sum\n  local sorted_rows=($(echo \"${rows[*]}\" | tr ' ' '\\n' | sort -n -k1))\n  # Print the sorted matrix\n  echo \"${sorted_rows[*]}\" | tr ' ' '\\n'\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_sum_i=0\n    local -i max_sum_j=0\n    local -i tmp=0\n\n    # Read the matrix\n    while read line; do\n        matrix[$i]=$line\n        ((i++))\n    done <<< \"$1\"\n\n    # Find the number of rows and columns\n    n=$i\n    m=$(echo ${matrix[0]} | wc -w)\n\n    # Sort the matrix\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n-i-1; j++)); do\n            max_sum=0\n            max_sum_i=0\n            max_sum_j=0\n\n            # Find the row with the maximum sum\n            for ((k=j; k<n-i; k++)); do\n                sum=0\n                for ((l=0; l<m; l++)); do\n                    sum=$((sum + $(echo ${matrix[$k]} | cut -d ' ' -f $((l+1)))))\n                done\n                if ((sum > max_sum)); then\n                    max_sum=$sum\n                    max_sum_i=$k\n                    max_sum_j=$j\n                fi\n            done\n\n            # Swap the rows\n            if ((max_sum_i != j)); then\n                tmp=${matrix[$j]}\n                matrix[$j]=${matrix[$max_sum_i]}\n                matrix[$max_sum_i]=$tmp\n            fi\n        done\n    done\n\n    # Print the matrix\n    for ((i=0; i<n; i++)); do\n        echo ${matrix[$i]}\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum=0\n  local -i max_row_length=0\n  local -i max_column_length=0\n  local -i max_sum_length=0\n  local -i row_length=0\n  local -i column_length=0\n  local -i sum_length=0\n  local -i max_length=0\n  local -i length=0\n  local -i max_number_length=0\n  local -i number_length=0\n  local -i max_number=0\n  local -i number=0\n  local -i max_row_sum=0\n  local -i row_sum=0\n  local -i max_column_sum=0\n  local -i column_sum=0\n  local -i max_sum=0\n  local -i sum=0\n  local -i max_row_product=0\n  local -i row_product=0\n  local -i max_column_product=0\n  local -i column_product=0\n  local -i max_product=0\n  local -i product=0\n  local -i max_row_average=0\n  local -i row_average=0\n  local -i max_column_average=0\n  local -i column_average=0\n  local -i max_average=0\n  local -i average=0\n  local -i max_row_median=0\n  local -i row_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_index=0\n  local -i tmp=0\n  local -a sums\n  local -a tmp_matrix\n  local -a tmp_sums\n  local -a tmp_array\n  local -a array\n  local -a sorted_matrix\n  local -a sorted_sums\n  local -a sorted_array\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -a sorted_tmp_matrix\n  local -a sorted_tmp_sums\n  local -a sorted_tmp_array\n  local -\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i max_sum=0\n\tlocal -i max_sum_index=0\n\tlocal -i tmp=0\n\tlocal -i tmp_sum=0\n\tlocal -i tmp_index=0\n\tlocal -i tmp_index_2=0\n\tlocal -i tmp_sum_2=0\n\tlocal -i tmp_sum_3=0\n\tlocal -i tmp_index_3=0\n\tlocal -i tmp_index_4=0\n\tlocal -i tmp_sum_4=0\n\tlocal -i tmp_sum_5=0\n\tlocal -i tmp_index_5=0\n\tlocal -i tmp_index_6=0\n\tlocal -i tmp_sum_6=0\n\tlocal -i tmp_sum_7=0\n\tlocal -i tmp_index_7=0\n\tlocal -i tmp_index_8=0\n\tlocal -i tmp_sum_8=0\n\tlocal -i tmp_sum_9=0\n\tlocal -i tmp_index_9=0\n\tlocal -i tmp_index_10=0\n\tlocal -i tmp_sum_10=0\n\tlocal -i tmp_sum_11=0\n\tlocal -i tmp_index_11=0\n\tlocal -i tmp_index_12=0\n\tlocal -i tmp_sum_12=0\n\tlocal -i tmp_sum_13=0\n\tlocal -i tmp_index_13=0\n\tlocal -i tmp_index_14=0\n\tlocal -i tmp_sum_14=0\n\tlocal -i tmp_sum_15=0\n\tlocal -i tmp_index_15=0\n\tlocal -i tmp_index_16=0\n\tlocal -i tmp_sum_16=0\n\tlocal -i tmp_sum_17=0\n\tlocal -i tmp_index_17=0\n\tlocal -i tmp_index_18=0\n\tlocal -i tmp_sum_18=0\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i l=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i o=0\n\tlocal -i p=0\n\tlocal -i q=0\n\tlocal -i r=0\n\tlocal -i s=0\n\tlocal -i t=0\n\tlocal -i u=0\n\tlocal -i v=0\n\tlocal -i w=0\n\tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -i aa=0\n\tlocal -i ab=0\n\tlocal -i ac=0\n\tlocal -i ad=0\n\tlocal -i ae=0\n\tlocal -i af=0\n\tlocal -i ag=0\n\tlocal -i ah=0\n\tlocal -i ai=0\n\tlocal -i aj=0\n\tlocal -i ak=0\n\tlocal -i al=0\n\tlocal -i am=0\n\tlocal -i an=0\n\tlocal -i ao=0\n\tlocal -i ap=0\n\tlocal -i aq=0\n\tlocal -i ar=0\n\tlocal -i as=0\n\tlocal -i at=0\n\tlocal -i au=0\n\tlocal -i av=0\n\tlocal -i aw=0\n\tlocal -i ax=0\n\tlocal -i ay=0\n\tlocal -i az=0\n\tlocal -i ba=0\n\tlocal -i bb=0\n\tlocal -i bc=0\n\tlocal -i bd=0\n\tlocal -i be=0\n\tlocal -i bf=0\n\tlocal -i bg=0\n\tlocal -i bh=0\n\tlocal -i bi=0\n\tlocal -i bj=0\n\tlocal -i bk=0\n\tlocal -i bl=0\n\tlocal -i bm=0\n\tlocal -i bn=0\n\tlocal -i bo=0\n\tlocal -i bp=0\n\tlocal -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0\n  local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp=0\n    local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_sum=0\n    local -i tmp_max=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i tmp_tmp=0\n    local -i tmp_tmp_i=0\n    local -i tmp_tmp_j=0\n    local -i tmp_tmp_k=0\n    local -i tmp_tmp_n=0\n    local -i tmp_tmp_m=0\n    local -i tmp_tmp_sum=0\n    local -i tmp_tmp_max=0\n    local -i tmp_tmp_max_i=0\n    local -i tmp_tmp_max_j=0\n    local -i tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_k=0\n    local -i tmp_tmp_tmp_n=0\n    local -i tmp_tmp_tmp_m=0\n    local -i tmp_tmp_tmp_sum=0\n    local -i tmp_tmp_tmp_max=0\n    local -i tmp_tmp_tmp_max_i=0\n    local -i tmp_tmp_tmp_max_j=0\n    local -i tmp_tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_index=0\n    local -i max_index_old=0\n    local -i max_index_new=0\n    local -i max_index_tmp=0\n    local -i max_index_tmp2=0\n    local -i max_index_tmp3=0\n    local -i max_index_tmp4=0\n    local -i max_index_tmp5=0\n    local -i max_index_tmp6=0\n    local -i max_index_tmp7=0\n    local -i max_index_tmp8=0\n    local -i max_index_tmp9=0\n    local -i max_index_tmp10=0\n    local -i max_index_tmp11=0\n    local -i max_index_tmp12=0\n    local -i max_index_tmp13=0\n    local -i max_index_tmp14=0\n    local -i max_index_tmp15=0\n    local -i max_index_tmp16=0\n    local -i max_index_tmp17=0\n    local -i max_index_tmp18=0\n    local -i max_index_tmp19=0\n    local -i max_index_tmp20=0\n    local -i max_index_tmp21=0\n    local -i max_index_tmp22=0\n    local -i max_index_tmp23=0\n    local -i max_index_tmp24=0\n    local -i max_index_tmp25=0\n    local -i max_index_tmp26=0\n    local -i max_index_tmp27=0\n    local -i max_index_tmp28=0\n    local -i max_index_tmp29=0\n    local -i max_index_tmp30=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -n matrix=$1\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_matrix\n    local i\n    local j\n    local sum\n    local sorted_sum\n    local sorted_row\n    local row\n    local -i rows=0\n    local -i cols=0\n    local -i max_sum=0\n\n    # Calculate sums\n    for row in \"${matrix[@]}\"; do\n        sums[$rows]=0\n        for i in $row; do\n            sums[$rows]=$((sums[$rows] + i))\n            if (( sums[$rows] > max_sum )); then\n                max_sum=$sums[$rows]\n            fi\n        done\n        (( rows++ ))\n    done\n\n    # Sort sums\n    for (( i = 0; i < rows; i++ )); do\n        sorted_sums[$i]=$max_sum\n        for (( j = 0; j < rows; j++ )); do\n            if (( sorted_sums[$i] > sums[$j] )); then\n                sorted_sums[$i]=$sums[$j]\n                sums[$j]=$max_sum\n            fi\n        done\n    done\n\n    # Sort matrix\n    for (( i = 0; i < rows; i++ )); do\n        sorted_matrix[$i]=$(echo \"${matrix[$i]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n    done\n\n    # Print matrix\n    for (( i = 0; i < rows; i++ )); do\n        echo \"${sorted_matrix[$i]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpeqy82_iu.sh: line 6: local: `1 2 3\\\\n2 4 5\\\\n1 1 1': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -a sums\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i tmp=0\n\tlocal -i tmp2=0\n\tlocal -i tmp3=0\n\tlocal -i tmp4=0\n\tlocal -i tmp5=0\n\tlocal -i tmp6=0\n\tlocal -i tmp7=0\n\tlocal -i tmp8=0\n\tlocal -i tmp9=0\n\tlocal -i tmp10=0\n\tlocal -i tmp11=0\n\tlocal -i tmp12=0\n\tlocal -i tmp13=0\n\tlocal -i tmp14=0\n\tlocal -i tmp15=0\n\tlocal -i tmp16=0\n\tlocal -i tmp17=0\n\tlocal -i tmp18=0\n\tlocal -i tmp19=0\n\tlocal -i tmp20=0\n\tlocal -i tmp21=0\n\tlocal -i tmp22=0\n\tlocal -i tmp23=0\n\tlocal -i tmp24=0\n\tlocal -i tmp25=0\n\tlocal -i tmp26=0\n\tlocal -i tmp27=0\n\tlocal -i tmp28=0\n\tlocal -i tmp29=0\n\tlocal -i tmp30=0\n\tlocal -i tmp31=0\n\tlocal -i tmp32=0\n\tlocal -i tmp33=0\n\tlocal -i tmp34=0\n\tlocal -i tmp35=0\n\tlocal -i tmp36=0\n\tlocal -i tmp37=0\n\tlocal -i tmp38=0\n\tlocal -i tmp39=0\n\tlocal -i tmp40=0\n\tlocal -i tmp41=0\n\tlocal -i tmp42=0\n\tlocal -i tmp43=0\n\tlocal -i tmp44=0\n\tlocal -i tmp45=0\n\tlocal -i tmp46=0\n\tlocal -i tmp47=0\n\tlocal -i tmp48=0\n\tlocal -i tmp49=0\n\tlocal -i tmp50=0\n\tlocal\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -A matrix\n  local -a rows\n  local -a row\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i sum\n  local -i max_sum\n  local -i max_sum_row\n  local -i max_sum_row_index\n  local -i max_sum_row_index_temp\n  local -i max_sum_row_index_temp_temp\n  local -i max_sum_row_index_temp_temp_temp\n  local -a sorted_matrix\n  local -a sorted_matrix_temp\n  local -a sorted_matrix_temp_temp\n  local -a sorted_matrix_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp_temp_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp_temp_temp_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n  local -a sorted_matrix_temp_temp_temp_temp_temp_temp_temp_temp_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -n matrix=$1\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_matrix\n    local -a row\n    local -a sorted_row\n    local sum\n    local i\n    local j\n\n    for row in \"${matrix[@]}\"; do\n        sum=0\n        for i in $row; do\n            sum=$((sum + i))\n        done\n        sums+=($sum)\n    done\n\n    sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n    for sum in \"${sorted_sums[@]}\"; do\n        for ((i=0; i<${#sums[@]}; i++)); do\n            if [[ \"${sums[$i]}\" == \"$sum\" ]]; then\n                sorted_matrix+=(${matrix[$i]})\n            fi\n        done\n    done\n\n    for row in \"${sorted_matrix[@]}\"; do\n        sorted_row=($(printf '%s\\n' $row | sort -n))\n        for i in \"${sorted_row[@]}\"; do\n            printf '%s ' $i\n        done\n        printf '\\n'\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpc9lryg6r.sh: line 6: local: `1 2 3\\\\n2 4 5\\\\n1 1 1': invalid variable name for name reference\\n\"",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i tmp=0\n    local -i tmp_sum=0\n    local -i row_count=0\n    local -i col_count=0\n    local -i row_index=0\n    local -i col_index=0\n    local -i row_index_tmp=0\n    local -i col_index_tmp=0\n    local -i row_index_tmp_sum=0\n    local -i col_index_tmp_sum=0\n    local -a row\n    local -a row_tmp\n    local -a row_tmp_sum\n    local -a col\n    local -a col_tmp\n    local -a col_tmp_sum\n    local -a row_sums\n    local -a col_sums\n    local -a row_sums_tmp\n    local -a col_sums_tmp\n    local -a row_sums_tmp_sum\n    local -a col_sums_tmp_sum\n    local -a row_sums_sorted\n    local -a col_sums_sorted\n    local -a row_sums_sorted_tmp\n    local -a col_sums_sorted_tmp\n    local -a row_sums_sorted_tmp_sum\n    local -a col_sums_sorted_tmp_sum\n    local -a row_sums_sorted_tmp_sum_tmp\n    local -a col_sums_sorted_tmp_sum_tmp\n    local -a row_sums_sorted_tmp_sum_tmp_sum\n    local -a col_sums_sorted_tmp_sum_tmp_sum\n    local -a row_sums_sorted_tmp_sum_tmp_sum_tmp\n    local -a col_sums_sorted_tmp_sum_tmp_sum_tmp\n    local -a row_sums_sorted_tmp_sum_tmp_sum_tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_m=0\n    local -i tmp_n=0\n    local -i tmp_sum=0\n    local -i tmp_tmp=0\n    local -i tmp_tmp_i=0\n    local -i tmp_tmp_j=0\n    local -i tmp_tmp_k=0\n    local -i tmp_tmp_m=0\n    local -i tmp_tmp_n=0\n    local -i tmp_tmp_sum=0\n    local -i tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_k=0\n    local -i tmp_tmp_tmp_m=0\n    local -i tmp_tmp_tmp_n=0\n    local -i tmp_tmp_tmp_sum=0\n    local -i tmp_tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_tmp_k=0\n    local -i tmp_tmp_tmp_tmp_m=0\n    local -i tmp_tmp_tmp_tmp_n=0\n    local -i tmp_tmp_tmp_tmp_sum=0\n    local -i tmp_tmp_tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_tmp_tmp_k=0\n    local -i tmp_tmp_tmp_tmp_tmp_m=0\n    local -i tmp_tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local row=''\n  local row_sums_index=0\n  local row_sums_length=0\n  local row_sums_sorted=()\n  local row_sums_sorted_index=0\n  local row_sums_sorted_length=0\n  local sorted_matrix=''\n\n  # Calculate the sum of each row\n  while read -r row; do\n    row_sum=0\n    for n in $row; do\n      ((row_sum+=n))\n    done\n    row_sums[$row_index]=$row_sum\n    ((row_index++))\n  done <<< \"$matrix\"\n\n  # Sort the sums\n  row_sums_sorted=($(printf '%s\\n' \"${row_sums[@]}\" | sort -n))\n  row_sums_sorted_length=${#row_sums_sorted[@]}\n\n  # Sort the matrix\n  row_sums_length=${#row_sums[@]}\n  for ((row_sums_sorted_index=0; row_sums_sorted_index<row_sums_sorted_length; row_sums_sorted_index++)); do\n    for ((row_sums_index=0; row_sums_index<row_sums_length; row_sums_index++)); do\n      if [[ ${row_sums_sorted[$row_sums_sorted_index]} == ${row_sums[$row_sums_index]} ]]; then\n        sorted_matrix+=\"$(sed -n \"$((row_sums_index+1))p\" <<< \"$matrix\")\\n\"\n        unset row_sums[$row_sums_index]\n        row_sums=(${row_sums[@]})\n        break\n      fi\n    done\n  done\n\n  echo -e \"$sorted_matrix\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpf78ea7hr.sh: line 22: ((: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n/tmp/tmpf78ea7hr.sh: line 22: ((: 5\\\\n1: syntax error: invalid arithmetic operator (error token is \"\\\\n1\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row_sum=0\n    local row\n    local col_index=0\n    local col_value=0\n    local col\n    local sorted_matrix=()\n    local sorted_matrix_index=0\n    local sorted_matrix_row_index=0\n    local sorted_matrix_row\n    local sorted_matrix_row_value=0\n    local sorted_matrix_row_value_index=0\n    local sorted_matrix_row_value_index_value=0\n\n    # Calculate the sum of each row\n    while read -r row; do\n        row_sum=0\n        col_index=0\n        for col in $row; do\n            col_value=$(echo \"$col\" | sed 's/^0*//')\n            row_sum=$((row_sum + col_value))\n            col_index=$((col_index + 1))\n        done\n        row_sums[$row_index]=$row_sum\n        row_index=$((row_index + 1))\n    done <<< \"$matrix\"\n\n    # Sort the sums\n    IFS=$'\\n' sorted_matrix=($(sort -n <<< \"${row_sums[*]}\"))\n    unset IFS\n\n    # Sort the matrix according to the sorted sums\n    sorted_matrix_index=0\n    while read -r row; do\n        sorted_matrix_row_index=0\n        for sorted_matrix_row in \"${sorted_matrix[@]}\"; do\n            sorted_matrix_row_value_index=0\n            for sorted_matrix_row_value in $row; do\n                sorted_matrix_row_value_index_value=$(echo \"$sorted_matrix_row_value\" | sed 's/^0*//')\n                if [ \"$sorted_matrix_row_value_index_value\" -eq \"$sorted_matrix_row\" ]; then\n                    sorted_matrix[$sorted_matrix_row_index]=$row\n                    break\n                fi\n               \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp84w1te2x.sh: line 52: syntax error near unexpected token `}'\\n/tmp/tmp84w1te2x.sh: line 52: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local rows=$(echo \"$matrix\" | wc -l)\n    local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n\n    # Calculate the sum of each row\n    local sums=()\n    for ((i=0; i<rows; i++)); do\n        local row=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1)\n        local sum=0\n        for ((j=0; j<cols; j++)); do\n            local num=$(echo \"$row\" | cut -d ' ' -f $((j+1)))\n            sum=$((sum+num))\n        done\n        sums[$i]=$sum\n    done\n\n    # Sort the sums\n    local sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n\n    # Sort the matrix\n    for ((i=0; i<rows; i++)); do\n        local sum=${sorted_sums[$i]}\n        local row_index=$(echo \"${sums[@]}\" | grep -b -o \"$sum\" | cut -d ':' -f 1)\n        local row=$(echo \"$matrix\" | head -n $((row_index+1)) | tail -n 1)\n        echo \"$row\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpycphq2yi.sh: line 17: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row_sum=0\n    local row_count=$(echo \"$matrix\" | wc -l)\n    local col_count=$(echo \"$matrix\" | head -n 1 | wc -w)\n    local col_index=0\n    local col_value=0\n    local row_value=0\n    local row_values=()\n    local row_values_string=''\n    local sorted_matrix=''\n\n    # Calculate the sum of each row\n    while read -r row; do\n        row_sum=0\n        col_index=0\n        row_values=()\n        row_values_string=''\n\n        while read -r col_value; do\n            row_sum=$((row_sum + col_value))\n            row_values+=(\"$col_value\")\n            col_index=$((col_index + 1))\n        done <<< \"$row\"\n\n        row_sums+=(\"$row_sum\")\n        row_values_string=$(printf '%s ' \"${row_values[@]}\")\n        row_values_string=${row_values_string% }\n        row_values_string=${row_values_string# }\n        row_values_array[$row_index]=\"$row_values_string\"\n        row_index=$((row_index + 1))\n    done <<< \"$matrix\"\n\n    # Sort the sums\n    IFS=$'\\n' sorted_row_sums=($(sort <<< \"${row_sums[*]}\"))\n\n    # Sort the matrix\n    for row_sum in \"${sorted_row_sums[@]}\"; do\n        row_index=0\n\n        while read -r row_value; do\n            if [[ \"$row_sum\" -eq \"${row_sums[$row_index]}\" ]]; then\n                sorted_matrix+=\"${row_values_array[$row_index]}\\n\"\n                row_sums[$row_index]=0\n            fi\n\n            row_index=$((row_index + 1))\n        done <<\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp44szynzs.sh: line 54: syntax error near unexpected token `newline'\\n/tmp/tmp44szynzs.sh: line 54: `        done <<'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -i max_n=0\n  local -i max_m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i max_k=0\n  local -\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row\n    local sum\n    local sums=()\n    local i=0\n    local j=0\n    local k=0\n    local n=0\n    local m=0\n    local tmp\n    local tmp_sum\n    local tmp_row\n    local tmp_rows=()\n    local rows=()\n    local row_sums=()\n    local row_rows=()\n    local row_indexes=()\n    local row_index=0\n    local row_index_sums=()\n    local row_index_rows=()\n    local row_index_indexes=()\n    local row_index_index=0\n\n    # Split matrix into rows\n    while read -r row; do\n        rows[$i]=\"$row\"\n        ((i++))\n    done <<< \"$matrix\"\n\n    # Calculate sum of each row\n    for ((i=0; i<${#rows[@]}; i++)); do\n        row=\"${rows[$i]}\"\n        sum=0\n        for ((j=0; j<${#row}; j++)); do\n            if [[ \"${row:$j:1}\" == \" \" ]]; then\n                continue\n            fi\n            sum=$((sum + ${row:$j:1}))\n        done\n        sums[$i]=\"$sum\"\n    done\n\n    # Sort sums\n    for ((i=0; i<${#sums[@]}; i++)); do\n        for ((j=i+1; j<${#sums[@]}; j++)); do\n            if [[ ${sums[$i]} -gt ${sums[$j]} ]]; then\n                tmp_sum=${sums[$i]}\n                sums[$i]=${sums[$j]}\n                sums[$j]=$tmp_sum\n                tmp_row=${rows[$i]}\n                rows[$i]=${rows[$j]}\n                rows[$j]=$tmp_row\n            fi\n        done\n    done\n\n    # Print sorted matrix\n    for ((i=0; i<${#rows[@]}; i++)); do\n        echo \"${rows\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp004kd1dk.sh: line 75: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmp004kd1dk.sh: line 79: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i tmp=0\n    local -i tmp_sum=0\n    local -i tmp_index=0\n    local -i tmp_index_2=0\n    local -i tmp_index_3=0\n    local -i tmp_index_4=0\n    local -i tmp_index_5=0\n    local -i tmp_index_6=0\n    local -i tmp_index_7=0\n    local -i tmp_index_8=0\n    local -i tmp_index_9=0\n    local -i tmp_index_10=0\n    local -i tmp_index_11=0\n    local -i tmp_index_12=0\n    local -i tmp_index_13=0\n    local -i tmp_index_14=0\n    local -i tmp_index_15=0\n    local -i tmp_index_16=0\n    local -i tmp_index_17=0\n    local -i tmp_index_18=0\n    local -i tmp_index_19=0\n    local -i tmp_index_20=0\n    local -i tmp_index_21=0\n    local -i tmp_index_22=0\n    local -i tmp_index_23=0\n    local -i tmp_index_24=0\n    local -i tmp_index_25=0\n    local -i tmp_index_26=0\n    local -i tmp_index_27=0\n    local -i tmp_index_28=0\n    local -i tmp_index_29=0\n    local -i tmp_index_30=0\n    local -i tmp_index_31=0\n    local -i tmp_index_32=0\n    local -i tmp_index_33=0\n    local -i tmp_index_34=0\n    local -i tmp_index_35=0\n    local -i tmp_index_36=0\n    local -i tmp_index_37=0\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_rows\n  local row\n  local sum\n  local i\n  local j\n  local k\n  local n\n  local m\n  local -i row_count=0\n  local -i col_count=0\n  local -i max_sum=0\n  local -i max_sum_index=0\n  local -i max_sum_row_count=0\n  local -i max_sum_row_count_index=0\n  local -i max_sum_col_count=0\n  local -i max_sum_col_count_index=0\n  local -i max_sum_row_count_col_count=0\n  local -i max_sum_row_count_col_count_index=0\n  local -i max_sum_col_count_row_count=0\n  local -i max_sum_col_count_row_count_index=0\n  local -i max_sum_row_count_col_count_row_count=0\n  local -i max_sum_row_count_col_count_row_count_index=0\n  local -i max_sum_col_count_row_count_col_count=0\n  local -i max_sum_col_count_row_count_col_count_index=0\n  local -i max_sum_col_count_col_count_row_count=0\n  local -i max_sum_col_count_col_count_row_count_index=0\n  local -i max_sum_col_count_col_count_col_count=0\n  local -i max_sum_col_count_col_count_col_count_index=0\n  local -i max_sum_col_count_col_count_col_count_row_count=0\n  local -i max_sum_col_count_col_count_col_count_row_count_index=0\n  local -i max_sum_col_count_col_count_col_count_col_count=0\n  local -i\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted\n  local row\n  local sum\n  local i\n  local j\n  local k\n  local n\n  local m\n\n  # Split the matrix into rows\n  IFS=$'\\n' read -r -d '' -a rows <<< \"$matrix\"\n  # Calculate the sums of the rows\n  for ((i=0; i<${#rows[@]}; i++)); do\n    sum=0\n    IFS=' ' read -r -a row <<< \"${rows[i]}\"\n    for ((j=0; j<${#row[@]}; j++)); do\n      sum=$((sum + row[j]))\n    done\n    sums[i]=$sum\n  done\n  # Sort the sums\n  for ((i=0; i<${#sums[@]}; i++)); do\n    for ((j=i+1; j<${#sums[@]}; j++)); do\n      if ((sums[i] > sums[j])); then\n        n=${sums[i]}\n        sums[i]=${sums[j]}\n        sums[j]=$n\n        m=${rows[i]}\n        rows[i]=${rows[j]}\n        rows[j]=$m\n      fi\n    done\n  done\n  # Print the sorted matrix\n  for ((i=0; i<${#rows[@]}; i++)); do\n    printf '%s\\n' \"${rows[i]}\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_c_ss0k9.sh: line 25: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local rows=($(echo \"$matrix\" | wc -l))\n    local cols=($(echo \"$matrix\" | head -n 1 | wc -w))\n    local sums=()\n    local i=0\n    local j=0\n    local row=()\n    local sum=0\n\n    for ((i=0; i<rows; i++)); do\n        row=($(echo \"$matrix\" | head -n $((i+1)) | tail -n 1))\n        sum=0\n        for ((j=0; j<cols; j++)); do\n            sum=$((sum + row[j]))\n        done\n        sums[i]=$sum\n    done\n\n    for ((i=0; i<rows; i++)); do\n        for ((j=i+1; j<rows; j++)); do\n            if [[ ${sums[i]} -gt ${sums[j]} ]]; then\n                tmp=${sums[i]}\n                sums[i]=${sums[j]}\n                sums[j]=$tmp\n                tmp=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1)\n                matrix=$(echo \"$matrix\" | head -n $((i)) | tail -n $((rows-i-1)))\n                matrix=$(echo \"$matrix\" | head -n $((j-i-1)) | tail -n $((rows-j-1)))\n                matrix=\"$matrix\\n$tmp\"\n                matrix=$(echo \"$matrix\" | head -n $((rows-1)) | tail -n $((rows-j)))\n            fi\n        done\n    done\n\n    echo \"$matrix\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp7d89_mn1.sh: line 19: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i row_sum=0\n    local -i row_sums\n    local -i row_sums_len=0\n    local -i row_sums_max=0\n    local -i row_sums_min=0\n    local -i row_sums_max_index=0\n    local -i row_sums_min_index=0\n    local -i row_sums_max_index_prev=0\n    local -i row_sums_min_index_prev=0\n    local -i row_sums_max_index_next=0\n    local -i row_sums_min_index_next=0\n    local -i row_sums_max_index_prev_prev=0\n    local -i row_sums_min_index_prev_prev=0\n    local -i row_sums_max_index_next_next=0\n    local -i row_sums_min_index_next_next=0\n    local -i row_sums_max_index_prev_prev_prev=0\n    local -i row_sums_min_index_prev_prev_prev=0\n    local -i row_sums_max_index_next_next_next=0\n    local -i row_sums_min_index_next_next_next=0\n    local -i row_sums_max_index_prev_prev_prev_prev=0\n    local -i row_sums_min_index_prev_prev_prev_prev=0\n    local -i row_sums_max_index_next_next_next_next=0\n    local -i row_sums_min_index_next_next_next_next=0\n    local -i row_sums_max_index_prev_prev_prev_prev_prev=0\n    local -i row_sums_min_index_prev_prev_prev_prev_prev=0\n    local -i row_sums_max_index_next_next_next_next_next=\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i tmp=0\n  local -a tmp_row\n  local -a tmp_col\n  local -a row\n  local -a col\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_matrix\n\n  # read the matrix\n  while read -r line; do\n    matrix[i++]=\"$line\"\n  done <<< \"$1\"\n\n  # get the number of rows and columns\n  n=${#matrix[@]}\n  m=${#matrix[0]}\n\n  # get the sums of each row\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=0; j<m; j++)); do\n      sum=$((sum + ${matrix[i]:j:1}))\n    done\n    sums[i]=$sum\n  done\n\n  # sort the sums\n  sorted_sums=($(printf \"%s\\n\" \"${sums[@]}\" | sort -n))\n\n  # sort the matrix\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      if [[ ${sorted_sums[i]} -eq ${sums[j]} ]]; then\n        sorted_matrix[i]=${matrix[j]}\n        break\n      fi\n    done\n  done\n\n  # print the sorted matrix\n  for ((i=0; i<n; i++)); do\n    echo \"${sorted_matrix[i]}\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmps2zisf5y.sh: line 38: sum +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i l=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i o=0\n\tlocal -i p=0\n\tlocal -i q=0\n\tlocal -i r=0\n\tlocal -i s=0\n\tlocal -i t=0\n\tlocal -i u=0\n\tlocal -i v=0\n\tlocal -i w=0\n\tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -i aa=0\n\tlocal -i ab=0\n\tlocal -i ac=0\n\tlocal -i ad=0\n\tlocal -i ae=0\n\tlocal -i af=0\n\tlocal -i ag=0\n\tlocal -i ah=0\n\tlocal -i ai=0\n\tlocal -i aj=0\n\tlocal -i ak=0\n\tlocal -i al=0\n\tlocal -i am=0\n\tlocal -i an=0\n\tlocal -i ao=0\n\tlocal -i ap=0\n\tlocal -i aq=0\n\tlocal -i ar=0\n\tlocal -i as=0\n\tlocal -i at=0\n\tlocal -i au=0\n\tlocal -i av=0\n\tlocal -i aw=0\n\tlocal -i ax=0\n\tlocal -i ay=0\n\tlocal -i az=0\n\tlocal -i ba=0\n\tlocal -i bb=0\n\tlocal -i bc=0\n\tlocal -i bd=0\n\tlocal -i be=0\n\tlocal -i bf=0\n\tlocal -i bg=0\n\tlocal -i bh=0\n\tlocal -i bi=0\n\tlocal -i bj=0\n\tlocal -i bk=0\n\tlocal -i bl=0\n\tlocal -i bm=0\n\tlocal -i bn=0\n\tlocal -i bo=0\n\tlocal -i bp=0\n\tlocal -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -i i\n  local -i j\n  local -i k\n  local -i n\n  local -i m\n  local -i sum\n  local -i tmp\n  local -i tmp_sum\n  local -i tmp_row\n  local -i tmp_col\n  local -i tmp_val\n  local -i tmp_row_sum\n  local -i tmp_col_sum\n  local -i tmp_val_sum\n  local -i tmp_row_col_val\n  local -i tmp_row_col_val_sum\n  local -i tmp_row_col\n  local -i tmp_row_col_sum\n  local -i tmp_row_val\n  local -i tmp_row_val_sum\n  local -i tmp_col_val\n  local -i tmp_col_val_sum\n  local -i tmp_row_col_val_sum\n  local -i tmp_row_col_val_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum_sum_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local -i tmp_row_col_val_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a sums\n    local -a rows\n    local -a sorted_rows\n    local -a sorted_matrix\n    local row\n    local sum\n    local i\n    local j\n    local k\n\n    # Calculate the sum of each row\n    while read row; do\n        sum=0\n        for i in $row; do\n            sum=$((sum + i))\n        done\n        sums+=(\"$sum\")\n        rows+=(\"$row\")\n    done <<< \"$matrix\"\n\n    # Sort the sums and rows\n    for ((i=0; i < ${#sums[@]}; i++)); do\n        for ((j=i+1; j < ${#sums[@]}; j++)); do\n            if ((sums[i] > sums[j])); then\n                # Swap the sums\n                sum=${sums[i]}\n                sums[i]=${sums[j]}\n                sums[j]=$sum\n\n                # Swap the rows\n                row=${rows[i]}\n                rows[i]=${rows[j]}\n                rows[j]=$row\n            fi\n        done\n    done\n\n    # Print the sorted matrix\n    for ((k=0; k < ${#rows[@]}; k++)); do\n        echo \"${rows[k]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp3xg741es.sh: line 21: 3n2: value too great for base (error token is \"3n2\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=$1\n\tlocal rows=$(echo \"$matrix\" | wc -l)\n\tlocal cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n\tlocal sums=$(\n\t\tfor ((i=1; i<=rows; i++)); do\n\t\t\tlocal row=$(echo \"$matrix\" | head -n $i | tail -n 1)\n\t\t\tlocal sum=0\n\t\t\tfor ((j=1; j<=cols; j++)); do\n\t\t\t\tlocal col=$(echo \"$row\" | cut -d ' ' -f $j)\n\t\t\t\tsum=$((sum + col))\n\t\t\tdone\n\t\t\techo \"$sum $i\"\n\t\tdone\n\t)\n\tlocal sorted=$(echo \"$sums\" | sort -n | cut -d ' ' -f 2)\n\tfor i in $sorted; do\n\t\techo \"$matrix\" | head -n $i | tail -n 1\n\tdone\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpvfhr7coy.sh: line 25: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=()\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local row_sum_index=0\n  local row_sum_index_max=0\n  local row_sum_max=0\n  local row_sum_max_index=0\n  local row_sum_max_index_max=0\n  local row_sum_max_max=0\n  local row_sum_max_max_index=0\n  local row_sum_max_max_index_max=0\n  local row_sum_max_max_max=0\n  local row_sum_max_max_max_index=0\n  local row_sum_max_max_max_index_max=0\n  local row_sum_max_max_max_max=0\n  local row_sum_max_max_max_max_index=0\n  local row_sum_max_max_max_max_index_max=0\n  local row_sum_max_max_max_max_max=0\n  local row_sum_max_max_max_max_max_index=0\n  local row_sum_max_max_max_max_max_index_max=0\n  local row_sum_max_max_max_max_max_max=0\n  local row_sum_max_max_max_max_max_max_index=0\n  local row_sum_max_max_max_max_max_max_index_max=0\n  local row_sum_max_max_max_max_max_max_max=0\n  local row_sum_max_max_max_max_max_max_max_index=0\n  local row_sum_max_max_max_max_max_max_max_index_max=0\n  local row_sum_max_max_max_max_max_max_max_max=0\n  local row_sum_max_max_max_max_max_max_max_max_index=0\n  local row_sum_max_max_max_max_max_max_max_max_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=$1\n    local -a sums\n    local -a lines\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max=0\n    local -i max_index=0\n    local -i tmp=0\n    local -i tmp_index=0\n    local -i tmp_sum=0\n    local -i tmp_max=0\n    local -i tmp_max_index=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_sum=0\n    local -i tmp_max=0\n    local -i tmp_max_index=0\n    local -i tmp_tmp=0\n    local -i tmp_tmp_index=0\n    local -i tmp_tmp_sum=0\n    local -i tmp_tmp_max=0\n    local -i tmp_tmp_max_index=0\n    local -i tmp_tmp_n=0\n    local -i tmp_tmp_m=0\n    local -i tmp_tmp_i=0\n    local -i tmp_tmp_j=0\n    local -i tmp_tmp_sum=0\n    local -i tmp_tmp_max=0\n    local -i tmp_tmp_max_index=0\n    local -i tmp_tmp_tmp=0\n    local -i tmp_tmp_tmp_index=0\n    local -i tmp_tmp_tmp_sum=0\n    local -i tmp_tmp_tmp_max=0\n    local -i tmp_tmp_tmp_max_index=0\n    local -i tmp_tmp_tmp_n=0\n    local -i tmp_tmp_tmp_m=0\n    local -i tmp_tmp_tmp_i=0\n    local -i tmp_tmp_tmp_j=0\n    local -i tmp_tmp_tmp_sum=0\n    local -i tmp_tmp_tmp_max=0\n    local -i tmp_tmp_tmp_max_index\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal row_sums=()\n\tlocal row_index=0\n\tlocal row_sum=0\n\tlocal row=''\n\tlocal row_count=0\n\tlocal row_count_index=0\n\tlocal row_count_index_max=0\n\tlocal row_count_index_min=0\n\tlocal row_count_index_min_value=0\n\tlocal row_count_index_min_value_index=0\n\tlocal row_count_index_min_value_index_max=0\n\tlocal row_count_index_min_value_index_min=0\n\tlocal row_count_index_min_value_index_min_value=0\n\tlocal row_count_index_min_value_index_min_value_index=0\n\tlocal row_count_index_min_value_index_min_value_index_max=0\n\tlocal row_count_index_min_value_index_min_value_index_min=0\n\tlocal row_count_index_min_value_index_min_value_index_min_value=0\n\tlocal row_count_index_min_value_index_min_value_index_min_value_index=0\n\tlocal row_count_index_min_value_index_min_value_index_min_value_index_max=0\n\tlocal row_count_index_min_value_index_min_value_index_min_value_index_min=0\n\tlocal row_count_index_min_value_index_min_value_index_min_value_index_min_value=0\n\tlocal row_count_index_min_value_index_min_value_index_min_value_index_min_value_index=0\n\tlocal row_count_index_min_value_index_min_value_index_min_value_index_min_value_index_max=0\n\tlocal row_count_index_min_value_index_min_value_index_min_value_index_min_value_index_min=0\n\tlocal row_count_index_min_value_index_min_value_index_min_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local row_count=0\n  local row_sorted_matrix=()\n  local row_sorted_matrix_index=0\n  local row_sorted_matrix_row_index=0\n  local row_sorted_matrix_row_count=0\n  local row_sorted_matrix_row_value=0\n  local row_sorted_matrix_row_value_count=0\n  local row_sorted_matrix_row_value_index=0\n  local row_sorted_matrix_row_value_index_count=0\n  local row_sorted_matrix_row_value_index_count_index=0\n  local row_sorted_matrix_row_value_index_count_index_count=0\n  local row_sorted_matrix_row_value_index_count_index_count_index=0\n  local row_sorted_matrix_row_value_index_count_index_count_index_count=0\n  local row_sorted_matrix_row_value_index_count_index_count_index_count_index=0\n  local row_sorted_matrix_row_value_index_count_index_count_index_count_index_count=0\n  local row_sorted_matrix_row_value_index_count_index_count_index_count_index_count_index=0\n  local row_sorted_matrix_row_value_index_count_index_count_index_count_index_count_index_count=0\n  local row_sorted_matrix_row_value_index_count_index_count_index_count_index_count_index_count_index=0\n  local row_sorted_matrix_row_value_index_count_index_count_index_count_index_count_index_count_index_count=0\n  local row_sorted_matrix_row_value_index_count_index_count_index_count_index_count_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -r matrix=\"$1\"\n  local -r rows=\"$(wc -l <<< \"$matrix\")\"\n  local -r cols=\"$(head -n 1 <<< \"$matrix\" | wc -w)\"\n  local -r sums=\"$(\n    paste <(seq \"$rows\") <(\n      awk '{\n        for (i = 1; i <= NF; i++) {\n          sum[NR] += $i\n        }\n      }\n      END {\n        for (i = 1; i <= NR; i++) {\n          print sum[i]\n        }\n      }' <<< \"$matrix\"\n    )\n  )\"\n  local -r sorted=\"$(sort -n <<< \"$sums\" | cut -f 1)\"\n  local -r result=\"$(\n    while read -r row; do\n      sed -n \"${row}p\" <<< \"$matrix\"\n    done <<< \"$sorted\"\n  )\"\n  echo \"$result\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_rows\n  local row\n  local sum\n  local i\n  local j\n  local k\n  local n\n  local m\n\n  # Split the matrix into rows\n  rows=($(echo \"$matrix\" | tr '\\n' ' '))\n\n  # Calculate the sum of each row\n  for ((i=0; i<${#rows[@]}; i++)); do\n    row=\"${rows[$i]}\"\n    sum=0\n    for ((j=0; j<${#row}; j++)); do\n      sum=$((sum + ${row:$j:1}))\n    done\n    sums[$i]=$sum\n  done\n\n  # Sort the sums\n  sorted_sums=($(printf \"%s\\n\" \"${sums[@]}\" | sort -n))\n\n  # Sort the rows\n  for ((i=0; i<${#sorted_sums[@]}; i++)); do\n    for ((j=0; j<${#sums[@]}; j++)); do\n      if [[ \"${sorted_sums[$i]}\" == \"${sums[$j]}\" ]]; then\n        sorted_rows[$i]=\"${rows[$j]}\"\n      fi\n    done\n  done\n\n  # Print the sorted matrix\n  for ((i=0; i<${#sorted_rows[@]}; i++)); do\n    row=\"${sorted_rows[$i]}\"\n    for ((j=0; j<${#row}; j++)); do\n      printf \"%s \" \"${row:$j:1}\"\n    done\n    printf \"\\n\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmptdopd_zi.sh: line 27: sum + \\\\: syntax error: operand expected (error token is \"\\\\\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_index=0\n    local row_sum=0\n    local row_count=0\n    local row=''\n    local sorted_matrix=''\n    local sorted_row_index=0\n    local sorted_row=''\n\n    # Calculate the sum of each row\n    while read -r row; do\n        row_sum=0\n        for number in $row; do\n            row_sum=$((row_sum + number))\n        done\n        row_sums[$row_index]=$row_sum\n        row_index=$((row_index + 1))\n    done <<< \"$matrix\"\n\n    # Sort the row sums and get the sorted row indices\n    row_count=${#row_sums[@]}\n    sorted_row_indices=($(printf '%s\\n' \"${row_sums[@]}\" | sort -n | awk '{print NR-1}'))\n\n    # Sort the matrix according to the sorted row indices\n    row_index=0\n    while read -r row; do\n        sorted_row_index=${sorted_row_indices[$row_index]}\n        sorted_matrix=\"$sorted_matrix\n$row\"\n        row_index=$((row_index + 1))\n    done <<< \"$matrix\"\n\n    # Remove the first newline\n    sorted_matrix=\"${sorted_matrix:1}\"\n\n    echo \"$sorted_matrix\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmptk3peqon.sh: line 20: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=$1\n  local -a rows\n  local -a sums\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i row_sum=0\n  local -i row_count=0\n  local -i col_count=0\n  local -i max_sum=0\n  local -i max_index=0\n  local -i max_row_count=0\n  local -i max_col_count=0\n  local -i max_row_sum=0\n  local -i max_col_sum=0\n  local -i max_row_index=0\n  local -i max_col_index=0\n  local -i max_row_index_2=0\n  local -i max_col_index_2=0\n  local -i max_row_index_3=0\n  local -i max_col_index_3=0\n  local -i max_row_index_4=0\n  local -i max_col_index_4=0\n  local -i max_row_index_5=0\n  local -i max_col_index_5=0\n  local -i max_row_index_6=0\n  local -i max_col_index_6=0\n  local -i max_row_index_7=0\n  local -i max_col_index_7=0\n  local -i max_row_index_8=0\n  local -i max_col_index_8=0\n  local -i max_row_index_9=0\n  local -i max_col_index_9=0\n  local -i max_row_index_10=0\n  local -i max_col_index_10=0\n  local -i max_row_index_11=0\n  local -i max_col_index_11=0\n  local -i max_row_index_12=0\n  local -i max_col_index_12=0\n  local -i max_row_index_13=0\n  local -i max_col_index\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local -i tmp49=0\n    local -\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\t# We need to sort the rows by the sum of the row.\n\t# We can do this by creating a new array with the sum of the row as the key, and the row as the value.\n\t# Then we can sort the array by key, and print the values.\n\tdeclare -A matrix\n\twhile read -r line; do\n\t\t# Sum the row\n\t\tsum=0\n\t\tfor num in $line; do\n\t\t\tsum=$((sum + num))\n\t\tdone\n\t\t# Add the row to the matrix\n\t\tmatrix[$sum]=\"$line\"\n\tdone <<< \"$1\"\n\t# Sort the matrix by key\n\tfor key in \"${!matrix[@]}\"; do\n\t\techo \"${matrix[$key]}\"\n\tdone | sort -n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmphiobljxv.sh: line 14: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local row_sums=()\n  local row_index=0\n  local row_sum=0\n  local row=''\n  local row_count=0\n  local sorted_matrix=''\n\n  # Calculate the sum of each row\n  while read -r row; do\n    row_sum=0\n    for num in $row; do\n      row_sum=$((row_sum + num))\n    done\n    row_sums[$row_index]=$row_sum\n    row_index=$((row_index + 1))\n  done <<< \"$matrix\"\n\n  # Sort the matrix by the row sums\n  row_count=${#row_sums[@]}\n  for ((i=0; i<row_count; i++)); do\n    for ((j=i+1; j<row_count; j++)); do\n      if [[ ${row_sums[$i]} -gt ${row_sums[$j]} ]]; then\n        row_sums[$i]=${row_sums[$j]}\n        row_sums[$j]=${row_sums[$i]}\n      fi\n    done\n  done\n\n  # Print the sorted matrix\n  for ((i=0; i<row_count; i++)); do\n    row_sum=${row_sums[$i]}\n    while read -r row; do\n      row_sum_check=0\n      for num in $row; do\n        row_sum_check=$((row_sum_check + num))\n      done\n      if [[ $row_sum_check -eq $row_sum ]]; then\n        sorted_matrix=\"$sorted_matrix$row\\n\"\n      fi\n    done <<< \"$matrix\"\n  done\n\n  echo -e \"$sorted_matrix\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmplsave91r.sh: line 18: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a sums\n  local -a matrix_array\n  local -a sorted_matrix_array\n  local -a sorted_sums\n  local -a sorted_matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i sums=0\n    local -i temp=0\n    local -i row=0\n    local -i col=0\n    local -i rows=0\n    local -i cols=0\n    local -i max=0\n    local -i min=0\n    local -i max_row=0\n    local -i min_row=0\n    local -i max_col=0\n    local -i min_col=0\n    local -i max_sum=0\n    local -i min_sum=0\n    local -i max_sums=0\n    local -i min_sums=0\n    local -i max_temp=0\n    local -i min_temp=0\n    local -i max_row_temp=0\n    local -i min_row_temp=0\n    local -i max_col_temp=0\n    local -i min_col_temp=0\n    local -i max_sum_temp=0\n    local -i min_sum_temp=0\n    local -i max_sums_temp=0\n    local -i min_sums_temp=0\n    local -a max_row_array\n    local -a min_row_array\n    local -a max_col_array\n    local -a min_col_array\n    local -a max_sum_array\n    local -a min_sum_array\n    local -a max_sums_array\n    local -a min_sums_array\n    local -a temp_array\n    local -a row_array\n    local -a col_array\n    local -a sums_array\n    local -a sum_array\n    local -a max_row_array_temp\n    local -a min_row_array_temp\n    local -a max_col_array_temp\n    local -a min_col_array_temp\n    local -a max_sum_array_temp\n    local -a min_sum_array_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a arr\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_arr\n  local -a row\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i sum=0\n  local -i max=0\n  local -i max_index=0\n  local -i length=0\n  local -i rows=0\n  local -i cols=0\n  local -i row_length=0\n  local -i col_length=0\n  local -i row_index=0\n  local -i col_index=0\n  local -i row_sum=0\n  local -i col_sum=0\n  local -i row_max=0\n  local -i col_max=0\n  local -i row_max_index=0\n  local -i col_max_index=0\n  local -i row_length=0\n  local -i col_length=0\n  local -i row_index=0\n  local -i col_index=0\n  local -i row_sum=0\n  local -i col_sum=0\n  local -i row_max=0\n  local -i col_max=0\n  local -i row_max_index=0\n  local -i col_max_index=0\n  local -i row_length=0\n  local -i col_length=0\n  local -i row_index=0\n  local -i col_index=0\n  local -i row_sum=0\n  local -i col_sum=0\n  local -i row_max=0\n  local -i col_max=0\n  local -i row_max_index=0\n  local -i col_max_index=0\n  local -i row_length=0\n  local -i col_length=0\n  local -i row_index=0\n  local -i col_index=0\n  local -i row_sum=0\n  local -i col_sum=0\n  local -i row_max=0\n  local -i col_max=0\n  local -i row_max_index\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  # Split the input into rows and sort them by the sum of their elements\n  echo \"$1\" | awk '{\n    for (i = 1; i <= NF; i++) {\n      sum += $i\n    }\n    print sum, $0\n    sum = 0\n  }' | sort -n | cut -d ' ' -f 2-\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows=()\n    local -a sums=()\n    local -i i=0\n\n    while IFS= read -r row; do\n        rows[i]=\"$row\"\n        sums[i]=$(echo \"$row\" | tr ' ' '+' | bc)\n        ((i++))\n    done <<< \"$matrix\"\n\n    # Sort sums array, and use it to sort rows array\n    mapfile -t sorted_sums < <(printf '%s\\n' \"${sums[@]}\" | sort -n)\n    for ((i=0; i<${#sorted_sums[@]}; i++)); do\n        for ((j=0; j<${#sums[@]}; j++)); do\n            if [[ \"${sorted_sums[i]}\" == \"${sums[j]}\" ]]; then\n                echo \"${rows[j]}\"\n                unset sums[j]\n                unset rows[j]\n                break\n            fi\n        done\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpj2tvu7a6.sh: line 13: bc: command not found\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i l=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i o=0\n\tlocal -i p=0\n\tlocal -i q=0\n\tlocal -i r=0\n\tlocal -i s=0\n\tlocal -i t=0\n\tlocal -i u=0\n\tlocal -i v=0\n\tlocal -i w=0\n\tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -i aa=0\n\tlocal -i ab=0\n\tlocal -i ac=0\n\tlocal -i ad=0\n\tlocal -i ae=0\n\tlocal -i af=0\n\tlocal -i ag=0\n\tlocal -i ah=0\n\tlocal -i ai=0\n\tlocal -i aj=0\n\tlocal -i ak=0\n\tlocal -i al=0\n\tlocal -i am=0\n\tlocal -i an=0\n\tlocal -i ao=0\n\tlocal -i ap=0\n\tlocal -i aq=0\n\tlocal -i ar=0\n\tlocal -i as=0\n\tlocal -i at=0\n\tlocal -i au=0\n\tlocal -i av=0\n\tlocal -i aw=0\n\tlocal -i ax=0\n\tlocal -i ay=0\n\tlocal -i az=0\n\tlocal -i ba=0\n\tlocal -i bb=0\n\tlocal -i bc=0\n\tlocal -i bd=0\n\tlocal -i be=0\n\tlocal -i bf=0\n\tlocal -i bg=0\n\tlocal -i bh=0\n\tlocal -i bi=0\n\tlocal -i bj=0\n\tlocal -i bk=0\n\tlocal -i bl=0\n\tlocal -i bm=0\n\tlocal -i bn=0\n\tlocal -i bo=0\n\tlocal -i bp=0\n\tlocal -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=$(echo \"$matrix\" | wc -l)\n  local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n  local sums=()\n  local row=0\n  local col=0\n  local sum=0\n  local i=0\n  local j=0\n  local tmp=0\n\n  # Calculate sums\n  for (( i=0; i<rows; i++ )); do\n    sum=0\n    for (( j=0; j<cols; j++ )); do\n      tmp=$(echo \"$matrix\" | head -n $(($i+1)) | tail -n 1 | awk -v col=$(($j+1)) '{print $col}')\n      sum=$(($sum+$tmp))\n    done\n    sums[$i]=$sum\n  done\n\n  # Sort sums\n  for (( i=0; i<rows; i++ )); do\n    for (( j=0; j<rows; j++ )); do\n      if [[ ${sums[$i]} -lt ${sums[$j]} ]]; then\n        tmp=${sums[$i]}\n        sums[$i]=${sums[$j]}\n        sums[$j]=$tmp\n      fi\n    done\n  done\n\n  # Output matrix\n  for (( i=0; i<rows; i++ )); do\n    for (( j=0; j<rows; j++ )); do\n      if [[ ${sums[$i]} -eq ${sums[$j]} ]]; then\n        echo \"$matrix\" | head -n $(($j+1)) | tail -n 1\n      fi\n    done\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpg44jf48f.sh: line 22: 3+3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_n=0\n    local -i max_m=0\n    local -i tmp=0\n    local -i tmp_sum=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i tmp_max_k=0\n    local -i tmp_max_n=0\n    local -i tmp_max_m=0\n    local -i tmp_sum_1=0\n    local -i tmp_sum_2=0\n    local -i tmp_sum_3=0\n    local -i tmp_sum_4=0\n    local -i tmp_sum_5=0\n    local -i tmp_sum_6=0\n    local -i tmp_sum_7=0\n    local -i tmp_sum_8=0\n    local -i tmp_sum_9=0\n    local -i tmp_sum_10=0\n    local -i tmp_sum_11=0\n    local -i tmp_sum_12=0\n    local -i tmp_sum_13=0\n    local -i tmp_sum_14=0\n    local -i tmp_sum_15=0\n    local -i tmp_sum_16=0\n    local -i tmp_sum_17=0\n    local -i tmp_sum_18=0\n    local -i tmp_sum_19=0\n    local -i tmp_sum_20=0\n    local -i tmp_sum_21=0\n    local -i tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -a sums\n    local -a sorted_matrix\n    local -a row\n\n    # read the matrix\n    while read -a row; do\n        matrix[$i]=$(printf \"%s \" \"${row[@]}\")\n        ((i++))\n    done <<< \"$1\"\n\n    # get the number of rows and columns\n    n=${#matrix[@]}\n    m=$(echo \"${matrix[0]}\" | wc -w)\n\n    # calculate the sums of each row\n    for ((i=0; i<n; i++)); do\n        sum=0\n        for ((j=0; j<m; j++)); do\n            sum=$((sum + $(echo \"${matrix[$i]}\" | cut -d \" \" -f $((j+1)))))\n        done\n        sums[$i]=$sum\n    done\n\n    # sort the matrix\n    for ((i=0; i<n; i++)); do\n        max_sum=${sums[0]}\n        k=0\n        for ((j=1; j<n; j++)); do\n            if [[ ${sums[$j]} -lt $max_sum ]]; then\n                max_sum=${sums[$j]}\n                k=$j\n            fi\n        done\n        sorted_matrix[$i]=${matrix[$k]}\n        sums[$k]=$((max_sum + 1))\n    done\n\n    # print the sorted matrix\n    for ((i=0; i<n; i++)); do\n        echo \"${sorted_matrix[$i]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpeqm296w7.sh: line 32: sum + 3n2: value too great for base (error token is \"3n2\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=$1\n  local -a rows\n  local -a sums\n  local -a sorted\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i min=0\n  local -i tmp=0\n  local -i row=0\n  local -i col=0\n  local -i row_sum=0\n  local -i col_sum=0\n  local -i row_max=0\n  local -i row_min=0\n  local -i col_max=0\n  local -i col_min=0\n  local -i row_max_index=0\n  local -i row_min_index=0\n  local -i col_max_index=0\n  local -i col_min_index=0\n  local -i row_max_sum=0\n  local -i row_min_sum=0\n  local -i col_max_sum=0\n  local -i col_min_sum=0\n  local -i row_max_sum_index=0\n  local -i row_min_sum_index=0\n  local -i col_max_sum_index=0\n  local -i col_min_sum_index=0\n  local -i row_max_sum_index_tmp=0\n  local -i row_min_sum_index_tmp=0\n  local -i col_max_sum_index_tmp=0\n  local -i col_min_sum_index_tmp=0\n  local -i row_max_sum_tmp=0\n  local -i row_min_sum_tmp=0\n  local -i col_max_sum_tmp=0\n  local -i col_min_sum_tmp=0\n  local -i row_max_tmp=0\n  local -i row_min_tmp=0\n  local -i col_max_tmp=0\n  local -i col_min_tmp=0\n  local -i row_max_index_tmp=0\n  local -i row\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix=()\n    local -a sums=()\n    local -a sorted=()\n    local i=0\n    local j=0\n    local sum=0\n    local line=''\n    local -i n=0\n    local -i m=0\n    local -i max=0\n    local -i min=0\n    local -i tmp=0\n\n    # Read the matrix\n    while read line; do\n        matrix[$i]=\"$line\"\n        ((i++))\n    done <<< \"$1\"\n\n    # Get the number of rows and columns\n    n=${#matrix[@]}\n    m=$(echo \"${matrix[0]}\" | wc -w)\n\n    # Calculate the sum of each row\n    for ((i = 0; i < n; i++)); do\n        sum=0\n        for ((j = 0; j < m; j++)); do\n            sum=$((sum + $(echo \"${matrix[$i]}\" | cut -d ' ' -f $((j + 1)))))\n        done\n        sums[$i]=$sum\n    done\n\n    # Sort the matrix\n    for ((i = 0; i < n; i++)); do\n        min=0\n        for ((j = 0; j < n; j++)); do\n            if [[ ${sums[$j]} -lt ${sums[$min]} ]]; then\n                min=$j\n            fi\n        done\n        sorted[$i]=\"${matrix[$min]}\"\n        sums[$min]=$((sums[$min] + 1))\n    done\n\n    # Print the sorted matrix\n    for ((i = 0; i < n; i++)); do\n        echo \"${sorted[$i]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpxjyitz_c.sh: line 33: sum + 3n2: value too great for base (error token is \"3n2\")\\n'",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_sum_index=0\n    local -i tmp=0\n    local -i tmp_sum=0\n    local -i tmp_index=0\n    local -i tmp_index_2=0\n    local -i tmp_sum_2=0\n    local -i tmp_2=0\n    local -a tmp_array\n    local -a tmp_array_2\n    local -a tmp_array_3\n    local -a tmp_array_4\n    local -a tmp_array_5\n    local -a tmp_array_6\n    local -a tmp_array_7\n    local -a tmp_array_8\n    local -a tmp_array_9\n    local -a tmp_array_10\n    local -a tmp_array_11\n    local -a tmp_array_12\n    local -a tmp_array_13\n    local -a tmp_array_14\n    local -a tmp_array_15\n    local -a tmp_array_16\n    local -a tmp_array_17\n    local -a tmp_array_18\n    local -a tmp_array_19\n    local -a tmp_array_20\n    local -a tmp_array_21\n    local -a tmp_array_22\n    local -a tmp_array_23\n    local -a tmp_array_24\n    local -a tmp_array_25\n    local -a tmp_array_26\n    local -a tmp_array_27\n    local -a tmp_array_28\n    local -a tmp_array_29\n    local -a tmp_array_30\n    local -a tmp_array_31\n    local -a tmp_array_32\n    local -a tmp_array_33\n    local -a tmp_array_34\n    local -a tmp_array_35\n    local -a tmp_array_36\n    local -a tmp_array_37\n    local -a tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp=0\n    local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -n matrix=$1\n  local -a sums\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i max_index=0\n  local -i temp=0\n  local -a row\n  local -a temp_row\n  local -a temp_matrix\n  local -a matrix_array\n  local -a sorted_matrix\n\n  # Convert the matrix to an array of rows\n  IFS=$'\\n' read -d '' -r -a matrix_array <<< \"$matrix\"\n\n  # Calculate the sums of each row\n  for i in \"${!matrix_array[@]}\"; do\n    IFS=' ' read -r -a row <<< \"${matrix_array[$i]}\"\n    sum=0\n    for j in \"${row[@]}\"; do\n      ((sum+=j))\n    done\n    sums[$i]=$sum\n  done\n\n  # Sort the matrix by the sums of each row\n  n=${#matrix_array[@]}\n  for ((i=0; i<n-1; i++)); do\n    max=${sums[$i]}\n    max_index=$i\n    for ((j=i+1; j<n; j++)); do\n      if [[ ${sums[$j]} -gt $max ]]; then\n        max=${sums[$j]}\n        max_index=$j\n      fi\n    done\n    temp=${sums[$i]}\n    sums[$i]=$max\n    sums[$max_index]=$temp\n    temp_row=(\"${matrix_array[$i]}\")\n    matrix_array[$i]=(\"${matrix_array[$max_index]}\")\n    matrix_array[$max_index]=(\"${temp_row[@]}\")\n  done\n\n  # Convert the array of rows back to a matrix\n  m=${#matrix_array[0]}\n  for ((i=0; i<n; i++)); do\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpakjah915.sh: line 58: syntax error near unexpected token `}'\\n/tmp/tmpakjah915.sh: line 58: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i sum=0\n\tlocal -i max=0\n\tlocal -i max_i=0\n\tlocal -i max_j=0\n\tlocal -i tmp=0\n\tlocal -a tmp_row\n\tlocal -a tmp_col\n\tlocal -a sums\n\tlocal -a sums_sorted\n\tlocal -a sorted_matrix\n\tlocal -a row\n\tlocal -a col\n\tlocal -a row_sorted\n\tlocal -a col_sorted\n\tlocal -a row_sums\n\tlocal -a col_sums\n\tlocal -a row_sums_sorted\n\tlocal -a col_sums_sorted\n\tlocal -a row_sorted_sums\n\tlocal -a col_sorted_sums\n\tlocal -a row_sorted_sums_sorted\n\tlocal -a col_sorted_sums_sorted\n\tlocal -a row_sorted_sums_sorted_sorted\n\tlocal -a col_sorted_sums_sorted_sorted\n\tlocal -a row_sorted_sums_sorted_sorted_sorted\n\tlocal -a col_sorted_sums_sorted_sorted_sorted\n\tlocal -a row_sorted_sums_sorted_sorted_sorted_sorted\n\tlocal -a col_sorted_sums_sorted_sorted_sorted_sorted\n\tlocal -a row_sorted_sums_sorted_sorted_sorted_sorted_sorted\n\tlocal -a col_sorted_sums_sorted_sorted_sorted_sorted_sorted\n\tlocal -a row_sorted_sums_sorted_sorted_sorted_sorted_sorted_sorted\n\tlocal -a col_sorted_sums_sorted_sorted_sorted_sorted_sorted_sorted\n\tlocal -a row_sorted_sums_sorted_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local rows=($(echo \"$matrix\" | wc -l))\n    local cols=($(echo \"$matrix\" | head -n 1 | wc -w))\n    local sums=()\n    local i=0\n    local j=0\n    local sum=0\n\n    for ((i=0; i<rows; i++)); do\n        sum=0\n        for ((j=0; j<cols; j++)); do\n            sum=$((sum + $(echo \"$matrix\" | head -n $((i+1)) | tail -n 1 | awk \"{print \\$$((j+1))}\")))\n        done\n        sums[$i]=$sum\n    done\n\n    for ((i=0; i<rows; i++)); do\n        for ((j=i+1; j<rows; j++)); do\n            if [[ ${sums[$i]} -gt ${sums[$j]} ]]; then\n                tmp=${sums[$i]}\n                sums[$i]=${sums[$j]}\n                sums[$j]=$tmp\n                tmp=$(echo \"$matrix\" | head -n $((i+1)) | tail -n 1)\n                matrix=$(echo \"$matrix\" | head -n $((i+1)) | tail -n $((rows-i-1)) | sed -e \"1s/^/$(echo \"$matrix\" | head -n $((j+1)) | tail -n 1)\\n/\" -e \"$((rows-i-1))s/$/$tmp/\")\n            fi\n        done\n    done\n\n    echo \"$matrix\"\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmppjojx7kr.sh: line 17: sum + 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -a sums\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i tmp=0\n\n  # Read the matrix\n  while read -r line; do\n    matrix[i++]=\"$line\"\n  done <<< \"$1\"\n\n  # Find the number of rows and columns\n  n=${#matrix[@]}\n  m=${#matrix[0]}\n\n  # Calculate the sums of the rows\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=0; j<m; j++)); do\n      sum=$((sum + ${matrix[i]:j:1}))\n    done\n    sums[i]=$sum\n  done\n\n  # Sort the matrix\n  for ((i=0; i<n; i++)); do\n    max=${sums[i]}\n    max_i=$i\n    for ((j=i+1; j<n; j++)); do\n      if ((${sums[j]} > max)); then\n        max=${sums[j]}\n        max_i=$j\n      fi\n    done\n    if ((max_i != i)); then\n      tmp=${sums[i]}\n      sums[i]=${sums[max_i]}\n      sums[max_i]=$tmp\n      tmp=${matrix[i]}\n      matrix[i]=${matrix[max_i]}\n      matrix[max_i]=$tmp\n    fi\n  done\n\n  # Print the matrix\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      printf \"%d \" ${matrix[i]:j:1}\n    done\n    printf \"\\n\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpgohvqneg.sh: line 32: sum +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local rows=$(echo \"$matrix\" | wc -l)\n    local cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n    local sums=()\n    local i=0\n    local j=0\n    local sum=0\n    local row=0\n    local col=0\n    local tmp=0\n    local tmp_row=0\n    local tmp_col=0\n    local tmp_sum=0\n    local tmp_matrix=()\n    local tmp_matrix_row=()\n    local tmp_matrix_col=()\n    local tmp_matrix_sum=()\n\n    # Calculate the sum of each row\n    for i in $(seq 1 $rows); do\n        row=$(echo \"$matrix\" | head -n $i | tail -n 1)\n        sum=0\n        for j in $(seq 1 $cols); do\n            col=$(echo \"$row\" | cut -d ' ' -f $j)\n            sum=$((sum + col))\n        done\n        sums[$((i - 1))]=$sum\n    done\n\n    # Sort the matrix by the sum of each row\n    for i in $(seq 1 $rows); do\n        for j in $(seq 1 $((rows - i))); do\n            if [ ${sums[$((j - 1))]} -gt ${sums[$j]} ]; then\n                tmp_sum=${sums[$((j - 1))]}\n                sums[$((j - 1))]=${sums[$j]}\n                sums[$j]=$tmp_sum\n\n                tmp_row=$(echo \"$matrix\" | head -n $((j + 1)) | tail -n 1)\n                tmp_matrix_row[$((j - 1))]=$tmp_row\n                tmp_matrix_row[$j]=$(echo \"$matrix\" | head -n $j | tail -n 1)\n                matrix=$(echo \"$matrix\" | head -n $((j - 1)) | tail -n $((rows - j + 1)))\n                matrix=\"$matrix\\n${tmp_matrix_row[$((j - 1))\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpdbpi3w8o.sh: line 58: unexpected EOF while looking for matching `\"\\'\\n/tmp/tmpdbpi3w8o.sh: line 62: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i tmp=0\n\tlocal -i row_sums=()\n\tlocal -i row_sums_sorted=()\n\tlocal -i row_sums_sorted_index=()\n\tlocal -i row_sums_sorted_index_sorted=()\n\tlocal -i row_sums_sorted_index_sorted_index=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index_sorted=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index_sorted_index=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted=()\n\tlocal -i row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index=()\n\tlocal -i row_sums_sorted_index_sorted_index\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a row_sums\n\tlocal -a row_indexes\n\tlocal -a rows\n\tlocal -a sorted_rows\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i row_sum=0\n\tlocal -i max_sum=0\n\tlocal -i max_index=0\n\tlocal -i tmp=0\n\tlocal -i tmp_index=0\n\tlocal -i tmp_sum=0\n\tlocal -i tmp_index_sum=0\n\tlocal -i tmp_index_index=0\n\tlocal -i tmp_index_index_sum=0\n\tlocal -i tmp_index_index_index=0\n\tlocal -i tmp_index_index_index_sum=0\n\tlocal -i tmp_index_index_index_index=0\n\tlocal -i tmp_index_index_index_index_sum=0\n\tlocal -i tmp_index_index_index_index_index=0\n\tlocal -i tmp_index_index_index_index_index_sum=0\n\tlocal -i tmp_index_index_index_index_index_index=0\n\tlocal -i tmp_index_index_index_index_index_index_sum=0\n\tlocal -i tmp_index_index_index_index_index_index_index=0\n\tlocal -i tmp_index_index_index_index_index_index_index_sum=0\n\tlocal -i tmp_index_index_index_index_index_index_index_index=0\n\tlocal -i tmp_index_index_index_index_index_index_index_index_sum=0\n\tlocal -i tmp_index_index_index_index_index_index_index_index_index=0\n\tlocal -i tmp_index_index_index_index_index_index_index_index_index_sum=0\n\tlocal -i tmp_index_index_index_index_index_index_index_index_index_index=0\n\tlocal -i tmp_index_index_index_index_index_index_index_index\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local row_sums=()\n    local row_sums_index=0\n    local row_sums_index_max=0\n    local row_sums_index_min=0\n    local row_sums_max=0\n    local row_sums_min=0\n    local row_sums_min_index=0\n    local row_sums_min_index_max=0\n    local row_sums_min_index_min=0\n    local row_sums_min_max=0\n    local row_sums_min_min=0\n    local row_sums_min_min_index=0\n    local row_sums_min_min_index_max=0\n    local row_sums_min_min_index_min=0\n    local row_sums_min_min_max=0\n    local row_sums_min_min_min=0\n    local row_sums_min_min_min_index=0\n    local row_sums_min_min_min_index_max=0\n    local row_sums_min_min_min_index_min=0\n    local row_sums_min_min_min_max=0\n    local row_sums_min_min_min_min=0\n    local row_sums_min_min_min_min_index=0\n    local row_sums_min_min_min_min_index_max=0\n    local row_sums_min_min_min_min_index_min=0\n    local row_sums_min_min_min_min_max=0\n    local row_sums_min_min_min_min_min=0\n    local row_sums_min_min_min_min_min_index=0\n    local row_sums_min_min_min_min_min_index_max=0\n    local row_sums_min_min_min_min_min_index_min=0\n    local row_sums_min_min_min_min_min_max=0\n    local row_sums_min_min_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -a sums\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i m=0\n\tlocal -i n=0\n\tlocal -i tmp=0\n\tlocal -i sum=0\n\tlocal -i max=0\n\tlocal -i min=0\n\tlocal -i max_i=0\n\tlocal -i min_i=0\n\tlocal -i max_j=0\n\tlocal -i min_j=0\n\tlocal -i max_k=0\n\tlocal -i min_k=0\n\tlocal -i max_m=0\n\tlocal -i min_m=0\n\tlocal -i max_n=0\n\tlocal -i min_n=0\n\tlocal -i max_tmp=0\n\tlocal -i min_tmp=0\n\tlocal -i max_sum=0\n\tlocal -i min_sum=0\n\tlocal -i max_max=0\n\tlocal -i min_max=0\n\tlocal -i max_min=0\n\tlocal -i min_min=0\n\tlocal -i max_max_i=0\n\tlocal -i min_max_i=0\n\tlocal -i max_min_i=0\n\tlocal -i min_min_i=0\n\tlocal -i max_max_j=0\n\tlocal -i min_max_j=0\n\tlocal -i max_min_j=0\n\tlocal -i min_min_j=0\n\tlocal -i max_max_k=0\n\tlocal -i min_max_k=0\n\tlocal -i max_min_k=0\n\tlocal -i min_min_k=0\n\tlocal -i max_max_m=0\n\tlocal -i min_max_m=0\n\tlocal -i max_min_m=0\n\tlocal -i min_min_m=0\n\tlocal -i max_max_n=0\n\tlocal -i min_max_n=0\n\tlocal -i max_min_n=0\n\tlocal -i min_min_n=0\n\tlocal -i max_max\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max=0\n    local -i max_index=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal row_sums=()\n\tlocal row_index=0\n\tlocal row_sum=0\n\tlocal row=''\n\tlocal row_count=0\n\tlocal col_count=0\n\tlocal col_index=0\n\tlocal col=''\n\tlocal col_sum=0\n\tlocal col_sums=()\n\tlocal col_index=0\n\tlocal sorted_matrix=''\n\tlocal sorted_matrix_row=''\n\tlocal sorted_matrix_col=''\n\tlocal sorted_matrix_row_index=0\n\tlocal sorted_matrix_col_index=0\n\tlocal sorted_matrix_row_count=0\n\tlocal sorted_matrix_col_count=0\n\tlocal sorted_matrix_row_sum=0\n\tlocal sorted_matrix_col_sum=0\n\tlocal sorted_matrix_row_sums=()\n\tlocal sorted_matrix_col_sums=()\n\tlocal sorted_matrix_row_sum_index=0\n\tlocal sorted_matrix_col_sum_index=0\n\tlocal sorted_matrix_row_sum_count=0\n\tlocal sorted_matrix_col_sum_count=0\n\tlocal sorted_matrix_row_sum_value=0\n\tlocal sorted_matrix_col_sum_value=0\n\tlocal sorted_matrix_row_sum_values=()\n\tlocal sorted_matrix_col_sum_values=()\n\tlocal sorted_matrix_row_sum_value_index=0\n\tlocal sorted_matrix_col_sum_value_index=0\n\tlocal sorted_matrix_row_sum_value_count=0\n\tlocal sorted_matrix_col_sum_value_count=0\n\tlocal sorted_matrix_row_sum_value_value=0\n\tlocal sorted_matrix_col_sum_value_value=0\n\tlocal sorted_matrix_row_sum_value_values=()\n\tlocal sorted_matrix_col_sum_value_values=()\n\tlocal sorted_matrix_row_sum_value_value_index=0\n\tlocal sorted_mat\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0\n  local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -a sorted_rows\n    local -a sorted_sums\n    local -a sorted_matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i row_count=0\n    local -i column_count=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i min_sum=0\n    local -i temp_sum=0\n    local -i temp_row=0\n    local -i temp_column=0\n    local -i temp_row_count=0\n    local -i temp_column_count=0\n    local -i temp_max_sum=0\n    local -i temp_min_sum=0\n    local -i temp_sum_count=0\n    local -i temp_sum_index=0\n    local -i temp_sorted_row_count=0\n    local -i temp_sorted_column_count=0\n    local -i temp_sorted_sum_count=0\n    local -i temp_sorted_sum_index=0\n    local -i temp_sorted_max_sum=0\n    local -i temp_sorted_min_sum=0\n    local -i temp_sorted_sum=0\n    local -i temp_sorted_row=0\n    local -i temp_sorted_column=0\n    local -i temp_sorted_row_index=0\n    local -i temp_sorted_column_index=0\n    local -i temp_sorted_row_count\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i tmp=0\n\n    # Split the matrix into rows\n    IFS=$'\\n' read -r -d '' -a rows <<< \"$matrix\"\n\n    # Calculate the sums of the rows\n    for ((i=0; i<${#rows[@]}; i++)); do\n        sum=0\n        IFS=' ' read -r -a row <<< \"${rows[$i]}\"\n        for ((j=0; j<${#row[@]}; j++)); do\n            sum=$((sum + ${row[$j]}))\n        done\n        sums[$i]=$sum\n    done\n\n    # Sort the rows according to the sums\n    for ((i=0; i<${#rows[@]}; i++)); do\n        for ((j=i+1; j<${#rows[@]}; j++)); do\n            if [[ ${sums[$i]} -gt ${sums[$j]} ]]; then\n                tmp=${sums[$i]}\n                sums[$i]=${sums[$j]}\n                sums[$j]=$tmp\n                tmp=${rows[$i]}\n                rows[$i]=${rows[$j]}\n                rows[$j]=$tmp\n            fi\n        done\n    done\n\n    # Print the sorted matrix\n    for ((i=0; i<${#rows[@]}; i++)); do\n        IFS=' ' read -r -a row <<< \"${rows[$i]}\"\n        for ((j=0; j<${#row[@]}; j++)); do\n            printf \"%d \" \"${row[$j]}\"\n        done\n        printf \"\\n\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmps_mtey8f.sh: line 25: sum + 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows=()\n    local -a sums=()\n    local -a sorted=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n    local -i min=0\n    local -i min_index=0\n    local -i num_rows=0\n    local -i num_cols=0\n    local row=''\n    local col=''\n\n    # Split the matrix into rows\n    IFS=$'\\n' read -r -a rows <<< \"$matrix\"\n    num_rows=${#rows[@]}\n    num_cols=${#rows[0]}\n\n    # Sum each row\n    for ((i=0; i<num_rows; i++)); do\n        row=\"${rows[i]}\"\n        sum=0\n        for ((j=0; j<num_cols; j++)); do\n            col=\"${row:j:1}\"\n            sum=$((sum + col))\n        done\n        sums[i]=\"$sum\"\n    done\n\n    # Sort the rows by sum\n    for ((i=0; i<num_rows; i++)); do\n        min=${sums[0]}\n        min_index=0\n        for ((j=0; j<num_rows; j++)); do\n            if [[ ${sums[j]} -lt $min ]]; then\n                min=${sums[j]}\n                min_index=$j\n            fi\n        done\n        sorted[i]=\"${rows[min_index]}\"\n        sums[min_index]=999999\n    done\n\n    # Print the sorted rows\n    for ((i=0; i<num_rows; i++)); do\n        echo \"${sorted[i]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpqjz33v2k.sh: line 32: \\\\: syntax error: operand expected (error token is \"\\\\\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local row_sums=()\n  local row_count=0\n\n  # Calculate the sum of each row\n  while read -r row; do\n    local row_sum=0\n    for num in $row; do\n      row_sum=$((row_sum + num))\n    done\n    row_sums[$row_count]=$row_sum\n    row_count=$((row_count + 1))\n  done <<< \"$matrix\"\n\n  # Sort the sums\n  local sorted_sums=($(printf \"%s\\n\" \"${row_sums[@]}\" | sort -n))\n\n  # Print the matrix in sorted order\n  for sum in \"${sorted_sums[@]}\"; do\n    local index=0\n    while [ $index -lt $row_count ]; do\n      if [ \"${row_sums[$index]}\" -eq \"$sum\" ]; then\n        echo \"${matrix[$index]}\"\n        row_sums[$index]=0\n      fi\n      index=$((index + 1))\n    done\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp_s4gpncx.sh: line 14: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max=0\n    local -i min=0\n    local -i tmp=0\n    local -i index=0\n    local -i index_min=0\n    local -i index_max=0\n    local -i index_tmp=0\n    local -i index_tmp_min=0\n    local -i index_tmp_max=0\n    local -i index_tmp_min_sum=0\n    local -i index_tmp_max_sum=0\n    local -i index_tmp_min_sum_tmp=0\n    local -i index_tmp_max_sum_tmp=0\n    local -i index_tmp_min_sum_tmp_min=0\n    local -i index_tmp_max_sum_tmp_max=0\n    local -i index_tmp_min_sum_tmp_min_tmp=0\n    local -i index_tmp_max_sum_tmp_max_tmp=0\n    local -i index_tmp_min_sum_tmp_min_tmp_min=0\n    local -i index_tmp_max_sum_tmp_max_tmp_max=0\n    local -i index_tmp_min_sum_tmp_min_tmp_min_tmp=0\n    local -i index_tmp_max_sum_tmp_max_tmp_max_tmp=0\n    local -i index_tmp_min_sum_tmp_min_tmp_min_tmp_min=0\n    local -i index_tmp_max_sum_tmp_max_tmp_max_tmp_max=0\n    local -i index_tmp_min_sum_tmp_min_tmp_min_tmp_min_tmp=0\n    local -i index_tmp_max_sum_tmp_max_tmp_max_tmp_max_tmp=0\n    local -i index_tmp_min_sum_tmp_min_tmp_min_tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows=()\n    local -a sums=()\n    local -a sorted_rows=()\n    local -a sorted_sums=()\n    local -a sorted_matrix=()\n    local row\n    local sum\n    local i\n    local j\n    local k\n\n    # Split the matrix into rows\n    while read -r row; do\n        rows+=(\"$row\")\n    done <<< \"$matrix\"\n\n    # Calculate the sum of each row\n    for row in \"${rows[@]}\"; do\n        sum=0\n        for i in $row; do\n            sum=$((sum + i))\n        done\n        sums+=(\"$sum\")\n    done\n\n    # Sort the sums and rows\n    for ((i=0; i < ${#sums[@]}; i++)); do\n        for ((j=i; j < ${#sums[@]}; j++)); do\n            if [[ ${sums[$i]} -gt ${sums[$j]} ]]; then\n                sum=${sums[$i]}\n                sums[$i]=${sums[$j]}\n                sums[$j]=$sum\n                row=${rows[$i]}\n                rows[$i]=${rows[$j]}\n                rows[$j]=$row\n            fi\n        done\n    done\n\n    # Print the sorted matrix\n    for ((k=0; k < ${#rows[@]}; k++)); do\n        echo \"${rows[$k]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpf0skt7bk.sh: line 27: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i tmp=0\n    local -i tmp_sum=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i tmp_max_k=0\n    local -i tmp_max_n=0\n    local -i tmp_max_m=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i tmp_max_k=0\n    local -i tmp_max_n=0\n    local -i tmp_max_m=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i tmp_max_k=0\n    local -i tmp_max_n=0\n    local -i tmp_max_m=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i tmp_max_k=0\n    local -i tmp_max_n=0\n    local -i tmp_max_m=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i tmp_max_k=0\n    local -i tmp_max_n=0\n    local -i tmp_max_m=0\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max_sum=0\n    local -i max_index=0\n    local -i tmp=0\n    local -i tmp_sum=0\n    local -i tmp_index=0\n    local -i tmp_max_index=0\n    local -i tmp_max_sum=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_sum=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_index=0\n    local -i tmp_index=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_sum=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_index=0\n    local -i tmp_index=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_sum=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_index=0\n    local -i tmp_index=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_k=0\n    local -i tmp_n=0\n    local -i tmp_m=0\n    local -i tmp_sum=0\n    local -i tmp_max_sum=0\n    local -i tmp_max_index=0\n    local -i tmp_index=0\n    local -i tmp_i=0\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i ab=0\n    local -i ac=0\n    local -i ad=0\n    local -i ae=0\n    local -i af=0\n    local -i ag=0\n    local -i ah=0\n    local -i ai=0\n    local -i aj=0\n    local -i ak=0\n    local -i al=0\n    local -i am=0\n    local -i an=0\n    local -i ao=0\n    local -i ap=0\n    local -i aq=0\n    local -i ar=0\n    local -i as=0\n    local -i at=0\n    local -i au=0\n    local -i av=0\n    local -i aw=0\n    local -i ax=0\n    local -i ay=0\n    local -i az=0\n    local -i ba=0\n    local -i bb=0\n    local -i bc=0\n    local -i bd=0\n    local -i be=0\n    local -i bf=0\n    local -i bg=0\n    local -i bh=0\n    local -i bi=0\n    local -i bj=0\n    local -i bk=0\n    local -i bl=0\n    local -i bm=0\n    local -i bn=0\n    local -i bo=0\n    local -i bp=0\n    local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal rows=$(echo \"$matrix\" | wc -l)\n\tlocal cols=$(echo \"$matrix\" | head -n 1 | wc -w)\n\tlocal sums=()\n\tlocal row_sums=()\n\tlocal row_sum=0\n\tlocal row_num=0\n\tlocal col_num=0\n\tlocal row=()\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal temp=0\n\n\t# Calculate the sums of each row\n\twhile read -r row; do\n\t\trow_sum=0\n\t\trow_num=$((row_num + 1))\n\t\tcol_num=0\n\t\tfor i in $row; do\n\t\t\tcol_num=$((col_num + 1))\n\t\t\trow_sum=$((row_sum + i))\n\t\tdone\n\t\trow_sums[$row_num]=$row_sum\n\tdone <<< \"$matrix\"\n\n\t# Sort the sums\n\tfor ((i=1; i<=rows; i++)); do\n\t\tfor ((j=i; j<=rows; j++)); do\n\t\t\tif [[ ${row_sums[$i]} -gt ${row_sums[$j]} ]]; then\n\t\t\t\ttemp=${row_sums[$i]}\n\t\t\t\trow_sums[$i]=${row_sums[$j]}\n\t\t\t\trow_sums[$j]=$temp\n\t\t\tfi\n\t\tdone\n\tdone\n\n\t# Sort the matrix\n\tfor ((i=1; i<=rows; i++)); do\n\t\tfor ((j=1; j<=rows; j++)); do\n\t\t\tif [[ ${row_sums[$i]} -eq $(echo \"$matrix\" | head -n $j | tail -n 1 | awk '{sum=0; for(i=1; i<=NF; i++) {sum+=$i}; print sum}') ]]; then\n\t\t\t\tsums[$i]=$(echo \"$matrix\" | head -n $j | tail -n 1)\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp5pojfmoh.sh: line 49: syntax error near unexpected token `}'\\n/tmp/tmp5pojfmoh.sh: line 49: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max_sum=0\n  local -i max_sum_index=0\n  local -i max_sum_row_index=0\n  local -i max_sum_col_index=0\n  local -i max_sum_row_length=0\n  local -i max_sum_col_length=0\n  local -i max_sum_row_length_index=0\n  local -i max_sum_col_length_index=0\n  local -i max_sum_row_length_row_index=0\n  local -i max_sum_col_length_row_index=0\n  local -i max_sum_row_length_col_index=0\n  local -i max_sum_col_length_col_index=0\n  local -i max_sum_row_length_row_length=0\n  local -i max_sum_col_length_row_length=0\n  local -i max_sum_row_length_col_length=0\n  local -i max_sum_col_length_col_length=0\n  local -i row_length=0\n  local -i col_length=0\n  local -i row_length_index=0\n  local -i col_length_index=0\n  local -i row_length_row_index=0\n  local -i col_length_row_index=0\n  local -i row_length_col_index=0\n  local -i col_length_col_index=0\n  local -i row_length_row_length=0\n  local -i col_length_row_length=0\n  local -i row_length_col_length=0\n  local -i col_length_col_length=0\n  local -i row_length_sum=0\n  local -i col_length_sum=0\n  local -i max_sum_row\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i max=0\n    local -i min=0\n    local -i temp=0\n    local -i row=0\n    local -i col=0\n    local -i row_sum=0\n    local -i col_sum=0\n    local -i row_max=0\n    local -i row_min=0\n    local -i col_max=0\n    local -i col_min=0\n    local -i row_max_index=0\n    local -i row_min_index=0\n    local -i col_max_index=0\n    local -i col_min_index=0\n    local -i row_max_sum=0\n    local -i row_min_sum=0\n    local -i col_max_sum=0\n    local -i col_min_sum=0\n    local -i row_max_sum_index=0\n    local -i row_min_sum_index=0\n    local -i col_max_sum_index=0\n    local -i col_min_sum_index=0\n    local -i row_max_sum_value=0\n    local -i row_min_sum_value=0\n    local -i col_max_sum_value=0\n    local -i col_min_sum_value=0\n    local -i row_max_value=0\n    local -i row_min_value=0\n    local -i col_max_value=0\n    local -i col_min_value=0\n    local -i row_max_index_value=0\n    local -i row_min_index_value=0\n    local -i col_max_index_value=0\n    local -i col_min_index_value=0\n    local -i row_max_index_sum=0\n    local -i row_min_index_sum=0\n    local -i col_max_index_sum=0\n    local -\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -a sums\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i tmp=0\n\tlocal -i max=0\n\tlocal -i max_i=0\n\tlocal -i max_j=0\n\tlocal -i max_k=0\n\tlocal -i max_n=0\n\tlocal -i max_m=0\n\tlocal -i max_sum=0\n\tlocal -i max_tmp=0\n\tlocal -i max_max=0\n\tlocal -i max_max_i=0\n\tlocal -i max_max_j=0\n\tlocal -i max_max_k=0\n\tlocal -i max_max_n=0\n\tlocal -i max_max_m=0\n\tlocal -i max_max_sum=0\n\tlocal -i max_max_tmp=0\n\tlocal -i max_max_max=0\n\tlocal -i max_max_max_i=0\n\tlocal -i max_max_max_j=0\n\tlocal -i max_max_max_k=0\n\tlocal -i max_max_max_n=0\n\tlocal -i max_max_max_m=0\n\tlocal -i max_max_max_sum=0\n\tlocal -i max_max_max_tmp=0\n\tlocal -i max_max_max_max=0\n\tlocal -i max_max_max_max_i=0\n\tlocal -i max_max_max_max_j=0\n\tlocal -i max_max_max_max_k=0\n\tlocal -i max_max_max_max_n=0\n\tlocal -i max_max_max_max_m=0\n\tlocal -i max_max_max_max_sum=0\n\tlocal -i max_max_max_max_tmp=0\n\tlocal -i max_max_max_max_max=0\n\tlocal -i max_max_max_max_max_i=0\n\t\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a rows\n  local -a sums\n  local -a sorted_rows\n  local -a sorted_sums\n  local -a sorted_matrix\n  local row\n  local sum\n  local i\n  local j\n  local k\n  local n\n  local m\n  local -i row_count=0\n  local -i col_count=0\n  local -i row_index=0\n  local -i col_index=0\n  local -i sum_index=0\n  local -i sorted_index=0\n  local -i sorted_row_index=0\n  local -i sorted_sum_index=0\n  local -i sorted_row_count=0\n  local -i sorted_sum_count=0\n  local -i sorted_matrix_index=0\n  local -i sorted_matrix_row_index=0\n  local -i sorted_matrix_col_index=0\n\n  # Split the matrix into rows\n  IFS=$'\\n' read -r -a rows <<< \"$matrix\"\n  row_count=${#rows[@]}\n\n  # Split each row into columns\n  for ((i=0; i<row_count; i++)); do\n    IFS=$' ' read -r -a cols <<< \"${rows[i]}\"\n    col_count=${#cols[@]}\n\n    # Sum each row\n    sum=0\n    for ((j=0; j<col_count; j++)); do\n      sum=$((sum + cols[j]))\n    done\n\n    # Store the sum\n    sums[sum_index]=$sum\n    sum_index=$((sum_index + 1))\n  done\n\n  # Sort the sums\n  sorted_sums=($(printf '%s\\n' \"${sums[@]}\" | sort -n))\n  sorted_sum_count=${#sorted_sums[@]}\n\n  # Sort the rows\n  for ((i=0; i<sorted_sum_count; i++)); do\n    for ((j=0; j<row_count; j++)); do\n      sum=${sums[j\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpnxvun2s9.sh: line 75: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i max=0\n\tlocal -i max_index=0\n\tlocal -i tmp=0\n\tlocal -i tmp_index=0\n\tlocal -i tmp_sum=0\n\tlocal -i tmp_max=0\n\tlocal -i tmp_max_index=0\n\tlocal -i tmp_tmp=0\n\tlocal -i tmp_tmp_index=0\n\tlocal -i tmp_tmp_sum=0\n\tlocal -i tmp_tmp_max=0\n\tlocal -i tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_max=0\n\tlocal -i tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_max=0\n\tlocal -i tmp_tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_max=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_max_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp_sum=0\n\tlocal -i tmp_tmp_tmp_tmp_tmp_tmp_max=0\n\tlocal -i tmp_tmp_tmp_tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -a sorted_sums\n    local -a sorted_matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i row_count=0\n    local -i col_count=0\n    local -i sum=0\n    local -i sorted_sum=0\n    local -i sorted_index=0\n    local -i sorted_row_count=0\n    local -i sorted_col_count=0\n    local -i sorted_row_index=0\n    local -i sorted_col_index=0\n    local -i sorted_row_sum=0\n    local -i sorted_col_sum=0\n    local -i sorted_row_sorted_col_sum=0\n    local -i sorted_row_sorted_col_index=0\n    local -i sorted_row_sorted_col_count=0\n    local -i sorted_row_sorted_col_row_count=0\n    local -i sorted_row_sorted_col_col_count=0\n    local -i sorted_row_sorted_col_row_index=0\n    local -i sorted_row_sorted_col_col_index=0\n    local -i sorted_row_sorted_col_row_sum=0\n    local -i sorted_row_sorted_col_col_sum=0\n    local -i sorted_row_sorted_col_row_sorted_col_sum=0\n    local -i sorted_row_sorted_col_row_sorted_col_index=0\n    local -i sorted_row_sorted_col_row_sorted_col_count=0\n    local -i sorted_row_sorted_col_row_sorted_col_row_count=0\n    local -i sorted_row_sorted_col_row_sorted_col_col_count=0\n    local -i sorted_row_sorted_col_row_sorted_col_row_index=\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i tmp=0\n    local -a sums\n    local -a tmp_matrix\n    local -a tmp_sums\n    local -a tmp_row\n    local -i tmp_sum=0\n\n    while read -a row; do\n        matrix[i++]=${row[@]}\n    done <<< \"$1\"\n\n    m=${#matrix[@]}\n    n=${#matrix[0]}\n\n    for ((i=0; i<m; i++)); do\n        sum=0\n        for ((j=0; j<n; j++)); do\n            sum=$((sum + ${matrix[i]:j:1}))\n        done\n        sums[i]=$sum\n    done\n\n    # Bubble sort\n    for ((i=0; i<m; i++)); do\n        for ((j=0; j<m-i-1; j++)); do\n            if ((sums[j] > sums[j+1])); then\n                tmp=${sums[j]}\n                sums[j]=${sums[j+1]}\n                sums[j+1]=$tmp\n                tmp_row=${matrix[j]}\n                matrix[j]=${matrix[j+1]}\n                matrix[j+1]=$tmp_row\n            fi\n        done\n    done\n\n    for ((i=0; i<m; i++)); do\n        echo \"${matrix[i]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp1m1dr68v.sh: line 30: sum +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -a sorted_indices\n    local -a sorted_matrix\n    local i=0\n    local j=0\n    local n=0\n    local m=0\n    local sum=0\n    local index=0\n    local line=''\n    local -i n_rows=0\n    local -i n_cols=0\n\n    # Read the matrix into an array\n    while read -r line; do\n        matrix[$i]=\"$line\"\n        ((i++))\n    done <<< \"$1\"\n\n    # Get the number of rows and columns\n    n_rows=${#matrix[@]}\n    n_cols=$(echo \"${matrix[0]}\" | wc -w)\n\n    # Sum the rows\n    for ((i=0; i<n_rows; i++)); do\n        sum=0\n        for ((j=0; j<n_cols; j++)); do\n            sum=$((sum + $(echo \"${matrix[$i]}\" | awk '{print $'$((j+1))'}')))\n        done\n        sums[$i]=$sum\n    done\n\n    # Sort the sums\n    sorted_indices=($(printf '%s\\n' \"${sums[@]}\" | sort -n | awk '{print NR-1}'))\n\n    # Sort the matrix\n    for ((i=0; i<n_rows; i++)); do\n        index=${sorted_indices[$i]}\n        sorted_matrix[$i]=${matrix[$index]}\n    done\n\n    # Print the sorted matrix\n    for ((i=0; i<n_rows; i++)); do\n        echo \"${sorted_matrix[$i]}\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpk4covyop.sh: line 34: sum + 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local -i mmm=0\n  local -i nnn=0\n  local -i ooo=0\n  local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i tmp=0\n    local -i row_sums=()\n    local -i tmp_row_sums=()\n    local -i sorted_row_sums=()\n    local -i sorted_matrix=()\n\n    # Parse the input into a matrix\n    while read -r line; do\n        matrix[i]=\"$line\"\n        ((i++))\n    done <<< \"$1\"\n\n    # Find the number of rows and columns in the matrix\n    m=${#matrix[@]}\n    n=${#matrix[0]}\n\n    # Find the sum of each row\n    for ((i=0; i<m; i++)); do\n        sum=0\n        for ((j=0; j<n; j++)); do\n            tmp=${matrix[i]:j:1}\n            ((sum+=tmp))\n        done\n        row_sums[i]=$sum\n    done\n\n    # Copy the row sums into a temporary array\n    tmp_row_sums=(\"${row_sums[@]}\")\n\n    # Sort the row sums\n    for ((i=0; i<m; i++)); do\n        tmp=${tmp_row_sums[0]}\n        for ((j=1; j<m; j++)); do\n            if ((tmp>tmp_row_sums[j])); then\n                tmp=${tmp_row_sums[j]}\n            fi\n        done\n        sorted_row_sums[i]=$tmp\n        tmp_row_sums[j]=$((tmp+1))\n    done\n\n    # Sort the matrix\n    for ((i=0; i<m; i++)); do\n        for ((j=0; j<m; j++)); do\n            if ((sorted_row_sums[i]==row_sums[j])); then\n                sorted_matrix[i]=${matrix[j]}\n               \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpy19hk097.sh: line 61: syntax error near unexpected token `}'\\n/tmp/tmpy19hk097.sh: line 61: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0\n  local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal -a matrix\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i n=0\n\tlocal -i m=0\n\tlocal -i sum=0\n\tlocal -i max_sum=0\n\tlocal -i max_row=0\n\tlocal -i max_col=0\n\tlocal -i tmp=0\n\tlocal -i tmp_sum=0\n\tlocal -i tmp_row=0\n\tlocal -i tmp_col=0\n\tlocal -i tmp_row_sum=0\n\tlocal -i tmp_col_sum=0\n\tlocal -i tmp_row_max_sum=0\n\tlocal -i tmp_col_max_sum=0\n\tlocal -i tmp_row_max_row=0\n\tlocal -i tmp_col_max_row=0\n\tlocal -i tmp_row_max_col=0\n\tlocal -i tmp_col_max_col=0\n\tlocal -i tmp_row_i=0\n\tlocal -i tmp_col_i=0\n\tlocal -i tmp_row_j=0\n\tlocal -i tmp_col_j=0\n\tlocal -i tmp_row_k=0\n\tlocal -i tmp_col_k=0\n\tlocal -i tmp_row_n=0\n\tlocal -i tmp_col_n=0\n\tlocal -i tmp_row_m=0\n\tlocal -i tmp_col_m=0\n\tlocal -i tmp_row_sum=0\n\tlocal -i tmp_col_sum=0\n\tlocal -i tmp_row_max_sum=0\n\tlocal -i tmp_col_max_sum=0\n\tlocal -i tmp_row_max_row=0\n\tlocal -i tmp_col_max_row=0\n\tlocal -i tmp_row_max_col=0\n\tlocal -i tmp_col_max_col=0\n\tlocal -i tmp_row_i=0\n\tlocal -i tmp_col_i=0\n\tlocal -i tmp_row_j=0\n\tlocal -i tmp_col_j=0\n\tlocal -i tmp\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=$1\n  local -a rows\n  local -a sums\n  local -a sorted_rows\n  local -a sorted_sums\n  local -a sorted_matrix\n  local row\n  local sum\n  local i\n  local j\n  local k\n  local n\n  local m\n  local p\n  local q\n  local r\n\n  # Split the matrix into rows\n  IFS=$'\\n' read -r -a rows <<< \"$matrix\"\n\n  # Calculate the sum of each row\n  for ((i=0; i<${#rows[@]}; i++)); do\n    row=${rows[$i]}\n    sum=0\n    IFS=' ' read -r -a row_array <<< \"$row\"\n    for ((j=0; j<${#row_array[@]}; j++)); do\n      sum=$((sum + ${row_array[$j]}))\n    done\n    sums[$i]=$sum\n  done\n\n  # Sort the sums\n  for ((i=0; i<${#sums[@]}; i++)); do\n    for ((j=i; j<${#sums[@]}; j++)); do\n      if [[ ${sums[$i]} -gt ${sums[$j]} ]]; then\n        n=${sums[$i]}\n        sums[$i]=${sums[$j]}\n        sums[$j]=$n\n        m=${rows[$i]}\n        rows[$i]=${rows[$j]}\n        rows[$j]=$m\n      fi\n    done\n  done\n\n  # Sort the rows\n  for ((i=0; i<${#rows[@]}; i++)); do\n    row=${rows[$i]}\n    IFS=' ' read -r -a row_array <<< \"$row\"\n    for ((j=0; j<${#row_array[@]}; j++)); do\n      for ((k=j; k<${#row_array[@]}; k++)); do\n        if [[ ${row_array[$j]} -gt ${row_array[$k]} ]]; then\n          p=${\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpi1ibo9vw.sh: line 73: syntax error: unexpected end of file\\n'",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=0\n    local -i m=0\n    local -i sum=0\n    local -i max=0\n    local -i max_index=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n\n    # Read the matrix\n    while read -r line; do\n        matrix[$i]=\"$line\"\n        ((i++))\n    done <<< \"$1\"\n\n    # Get the number of rows and columns\n    n=\"${#matrix[@]}\"\n    m=\"${#matrix[0]}\"\n\n    # Calculate the sums\n    for ((i=0; i<n; i++)); do\n        sum=0\n        for ((j=0; j<m; j++)); do\n            sum=$((sum + ${matrix[$i]:$j:1}))\n        done\n        sums[$i]=$sum\n    done\n\n    # Sort the sums\n    for ((i=0; i<n; i++)); do\n        max=${sums[$i]}\n        max_index=$i\n        for ((j=i+1; j<n; j++)); do\n            if [[ ${sums[$j]} -gt $max ]]; then\n                max=${sums[$j]}\n                max_index=$j\n            fi\n        done\n        tmp=${sums[$i]}\n        sums[$i]=$max\n        sums[$max_index]=$tmp\n        tmp2=${matrix[$i]}\n        matrix[$i]=${matrix[$max_index]}\n        matrix[$max_index]=$tmp2\n    done\n\n    # Print the matrix\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<m; j++)); do\n            printf \"%s \" \"${matrix[$i]:$j:1}\"\n        done\n        printf \"\\n\"\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpe1v3j0fe.sh: line 34: sum +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -a sums\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i sum=0\n    local -i max_cols=0\n    local -i max_rows=0\n    local -i tmp=0\n    local -i tmp2=0\n    local -i tmp3=0\n    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24=0\n    local -i tmp25=0\n    local -i tmp26=0\n    local -i tmp27=0\n    local -i tmp28=0\n    local -i tmp29=0\n    local -i tmp30=0\n    local -i tmp31=0\n    local -i tmp32=0\n    local -i tmp33=0\n    local -i tmp34=0\n    local -i tmp35=0\n    local -i tmp36=0\n    local -i tmp37=0\n    local -i tmp38=0\n    local -i tmp39=0\n    local -i tmp40=0\n    local -i tmp41=0\n    local -i tmp42=0\n    local -i tmp43=0\n    local -i tmp44=0\n    local -i tmp45=0\n    local -i tmp46=0\n    local -i tmp47=0\n    local -i tmp48=0\n    local -i tmp49=0\n    local -i tmp50\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal -a rows\n\tlocal -a sums\n\tlocal -a sorted_sums\n\tlocal -a sorted_rows\n\tlocal -i i=0\n\tlocal -i j=0\n\tlocal -i k=0\n\tlocal -i sum=0\n\tlocal -i max_sum=0\n\tlocal -i max_index=0\n\tlocal -i max_index_sorted=0\n\tlocal -i max_index_rows=0\n\tlocal -i max_index_sums=0\n\tlocal -i max_index_sorted_sums=0\n\tlocal -i max_index_sorted_rows=0\n\tlocal -i max_index_rows_sums=0\n\tlocal -i max_index_sums_sorted=0\n\tlocal -i max_index_sorted_rows_sums=0\n\tlocal -i max_index_rows_sums_sorted=0\n\tlocal -i max_index_sorted_rows_sums_sorted=0\n\tlocal -i max_index_rows_sums_sorted_sorted=0\n\tlocal -i max_index_sorted_rows_sums_sorted_sorted=0\n\tlocal -i max_index_rows_sums_sorted_sorted_sorted=0\n\tlocal -i max_index_sorted_rows_sums_sorted_sorted_sorted=0\n\tlocal -i max_index_rows_sums_sorted_sorted_sorted_sorted=0\n\tlocal -i max_index_sorted_rows_sums_sorted_sorted_sorted_sorted=0\n\tlocal -i max_index_rows_sums_sorted_sorted_sorted_sorted_sorted=0\n\tlocal -i max_index_sorted_rows_sums_sorted_sorted_sorted_sorted_sorted=0\n\tlocal -i max_index_rows_sums_sorted_sorted_sorted_sorted_sorted_sorted=0\n\tlocal -i max_index_sorted_rows_sums_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -a sorted_rows\n    local -a sorted_sums\n    local -a sorted_matrix\n    local i=0\n    local j=0\n    local k=0\n    local row\n    local sum\n    local sorted_row\n    local sorted_sum\n    local sorted_matrix_row\n    local -i row_count=0\n    local -i column_count=0\n    local -i row_length=0\n    local -i column_length=0\n    local -i row_sum=0\n    local -i column_sum=0\n    local -i column_index=0\n    local -i row_index=0\n    local -i sorted_row_index=0\n    local -i sorted_column_index=0\n    local -i sorted_row_length=0\n    local -i sorted_column_length=0\n    local -i sorted_row_sum=0\n    local -i sorted_column_sum=0\n    local -i sorted_row_count=0\n    local -i sorted_column_count=0\n    local -i sorted_row_index=0\n    local -i sorted_column_index=0\n    local -i sorted_row_length=0\n    local -i sorted_column_length=0\n    local -i sorted_row_sum=0\n    local -i sorted_column_sum=0\n    local -i sorted_row_count=0\n    local -i sorted_column_count=0\n    local -i sorted_row_index=0\n    local -i sorted_column_index=0\n    local -i sorted_row_length=0\n    local -i sorted_column_length=0\n    local -i sorted_row_sum=0\n    local -i sorted_column_sum=0\n    local -i sorted_row_count=0\n    local -i sorted_column_count=0\n    local -i sorted_row_index=0\n    local -i sorted_column_index=0\n    local -i sorted_row_length=0\n    local -i sorted_column_length=0\n    local\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i max_i=0\n  local -i max_j=0\n  local -i tmp=0\n  local -a sums\n  local -a tmp_matrix\n  local -a tmp_sums\n  local -a tmp_sums_i\n  local -a tmp_sums_j\n  local -a tmp_sums_k\n  local -a tmp_sums_n\n  local -a tmp_sums_m\n  local -a tmp_sums_sum\n  local -a tmp_sums_max\n  local -a tmp_sums_max_i\n  local -a tmp_sums_max_j\n  local -a tmp_sums_tmp\n  local -a tmp_sums_matrix\n  local -a tmp_sums_sums\n  local -a tmp_sums_tmp_matrix\n  local -a tmp_sums_tmp_sums\n  local -a tmp_sums_tmp_sums_i\n  local -a tmp_sums_tmp_sums_j\n  local -a tmp_sums_tmp_sums_k\n  local -a tmp_sums_tmp_sums_n\n  local -a tmp_sums_tmp_sums_m\n  local -a tmp_sums_tmp_sums_sum\n  local -a tmp_sums_tmp_sums_max\n  local -a tmp_sums_tmp_sums_max_i\n  local -a tmp_sums_tmp_sums_max_j\n  local -a tmp_sums_tmp_sums_tmp\n  local -a tmp_sums_tmp_sums_matrix\n  local -a tmp_sums_tmp_sums_sums\n  local -a tmp_sums_tmp_sums_tmp_matrix\n  local -a tmp_sums_tmp_sums_\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local -a matrix\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i m=0\n    local -i n=0\n    local -i sum=0\n    local -i tmp=0\n    local -a sums\n    local -a tmp_matrix\n\n    # read the matrix\n    while read -a row; do\n        matrix[$i]=$(printf \"%s \" \"${row[@]}\")\n        ((i++))\n    done <<< \"$1\"\n\n    # calculate the sums\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        sum=0\n        for ((j=0; j<${#matrix[$i]}; j++)); do\n            ((sum+=${matrix[$i]:$j:1}))\n        done\n        sums[$i]=$sum\n    done\n\n    # sort the matrix\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        for ((j=0; j<${#matrix[@]}-1; j++)); do\n            if [[ ${sums[$j]} -gt ${sums[$j+1]} ]]; then\n                tmp=${sums[$j]}\n                sums[$j]=${sums[$j+1]}\n                sums[$j+1]=$tmp\n                tmp_matrix=${matrix[$j]}\n                matrix[$j]=${matrix[$j+1]}\n                matrix[$j+1]=$tmp_matrix\n            fi\n        done\n    done\n\n    # print the matrix\n    for ((i=0; i<${#matrix[@]}; i++)); do\n        for ((j=0; j<${#matrix[$i]}; j++)); do\n            echo -n \"${matrix[$i]:$j:1} \"\n        done\n        echo\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmp7fsq20cx.sh: line 27: ((: sum+= : syntax error: operand expected (error token is \"+= \")\\n/tmp/tmp7fsq20cx.sh: line 27: ((: sum+= : syntax error: operand expected (error token is \"+= \")\\n/tmp/tmp7fsq20cx.sh: line 27: ((: sum+= : syntax error: operand expected (error token is \"+= \")\\n/tmp/tmp7fsq20cx.sh: line 27: ((: sum+= : syntax error: operand expected (error token is \"+= \")\\n/tmp/tmp7fsq20cx.sh: line 27: ((: sum+= : syntax error: operand expected (error token is \"+= \")\\n/tmp/tmp7fsq20cx.sh: line 27: ((: sum+= : syntax error: operand expected (error token is \"+= \")\\n/tmp/tmp7fsq20cx.sh: line 27: ((: sum+= : syntax error: operand expected (error token is \"+= \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i tmp=0\n  local -a sums\n  local -a sums_sorted\n  local -a row\n  local -a row_sorted\n  local -a matrix_sorted\n\n  # read the matrix\n  while read -a row; do\n    matrix[i++]=\"${row[@]}\"\n  done <<< \"$1\"\n\n  # get the number of rows and columns\n  n=${#matrix[@]}\n  m=${#matrix[0]}\n\n  # calculate the sums\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=0; j<m; j++)); do\n      sum=$((sum + ${matrix[i]:j:1}))\n    done\n    sums[i]=$sum\n  done\n\n  # sort the sums\n  sums_sorted=($(printf \"%s\\n\" \"${sums[@]}\" | sort -n))\n\n  # sort the matrix\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      if [[ ${sums[i]} -eq ${sums_sorted[j]} ]]; then\n        row_sorted=($(printf \"%s\\n\" \"${matrix[i]}\" | sort -n))\n        matrix_sorted[k++]=\"${row_sorted[@]}\"\n        break\n      fi\n    done\n  done\n\n  # print the sorted matrix\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<m; j++)); do\n      printf \"%d \" \"${matrix_sorted[i]:j:1}\"\n    done\n    printf \"\\n\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpkin70t3b.sh: line 33: sum +  : syntax error: operand expected (error token is \"+  \")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local matrix_sorted\n  local row_sums\n  local row_sums_sorted\n  local row_sums_sorted_index\n  local row_sums_sorted_index_sorted\n  local row_sums_sorted_index_sorted_index\n  local row_sums_sorted_index_sorted_index_sorted\n  local row_sums_sorted_index_sorted_index_sorted_index\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\n  local row_sums_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_s\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal row_sums=()\n\tlocal row_index=0\n\tlocal row_sum=0\n\tlocal row_count=0\n\tlocal row_sums_index=0\n\tlocal row_sums_count=0\n\tlocal row_sums_sorted=()\n\tlocal row_sums_sorted_index=0\n\tlocal row_sums_sorted_count=0\n\tlocal row_sorted=()\n\tlocal row_sorted_index=0\n\tlocal row_sorted_count=0\n\tlocal row_sorted_count_max=0\n\tlocal row_sorted_count_max_index=0\n\tlocal row_sorted_count_max_count=0\n\tlocal row_sorted_count_max_count_index=0\n\tlocal row_sorted_count_max_count_index_count=0\n\tlocal row_sorted_count_max_count_index_count_index=0\n\tlocal row_sorted_count_max_count_index_count_index_count=0\n\tlocal row_sorted_count_max_count_index_count_index_count_index=0\n\tlocal row_sorted_count_max_count_index_count_index_count_index_count=0\n\tlocal row_sorted_count_max_count_index_count_index_count_index_count_index=0\n\tlocal row_sorted_count_max_count_index_count_index_count_index_count_index_count=0\n\tlocal row_sorted_count_max_count_index_count_index_count_index_count_index_count_index=0\n\tlocal row_sorted_count_max_count_index_count_index_count_index_count_index_count_index_count=0\n\tlocal row_sorted_count_max_count_index_count_index_count_index_count_index_count_index_count_index=0\n\tlocal row_sorted_count_max_count_index_count_index_count_index_count_index_count_index_count_index_count=\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local rows=()\n  local row_sums=()\n  local row_sum\n  local row\n  local i\n  local j\n  local k\n  local tmp\n  local row_count=0\n  local col_count=0\n\n  # Split the matrix into rows\n  while read -r row; do\n    rows+=(\"$row\")\n    row_count=$((row_count + 1))\n  done <<< \"$matrix\"\n\n  # Calculate the sum of each row\n  for ((i = 0; i < row_count; i++)); do\n    row=\"${rows[$i]}\"\n    row_sum=0\n    for j in $row; do\n      row_sum=$((row_sum + j))\n    done\n    row_sums+=(\"$row_sum\")\n  done\n\n  # Sort the rows by sum\n  for ((i = 0; i < row_count; i++)); do\n    for ((j = i + 1; j < row_count; j++)); do\n      if [[ \"${row_sums[$i]}\" -gt \"${row_sums[$j]}\" ]]; then\n        tmp=\"${row_sums[$i]}\"\n        row_sums[$i]=\"${row_sums[$j]}\"\n        row_sums[$j]=\"$tmp\"\n\n        tmp=\"${rows[$i]}\"\n        rows[$i]=\"${rows[$j]}\"\n        rows[$j]=\"$tmp\"\n      fi\n    done\n  done\n\n  # Print the matrix\n  for ((i = 0; i < row_count; i++)); do\n    row=\"${rows[$i]}\"\n    for j in $row; do\n      printf \"%d \" \"$j\"\n    done\n    printf \"\\n\"\n  done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b'/tmp/tmpjrbi106z.sh: line 29: 3\\\\n2: syntax error: invalid arithmetic operator (error token is \"\\\\n2\")\\n'",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=$1\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i sum=0\n  local -i sums=()\n  local -i tmp=0\n  local -i tmp_sum=0\n  local -i tmp_sums=()\n  local -i tmp_matrix=()\n  local -i matrix_size=0\n  local -i matrix_rows=0\n  local -i matrix_cols=0\n  local -i matrix_row=()\n  local -i matrix_col=()\n  local -i matrix_row_size=0\n  local -i matrix_col_size=0\n  local -i matrix_row_sums=()\n  local -i matrix_col_sums=()\n  local -i matrix_row_sum=0\n  local -i matrix_col_sum=0\n  local -i matrix_row_tmp=0\n  local -i matrix_col_tmp=0\n  local -i matrix_row_tmp_sum=0\n  local -i matrix_col_tmp_sum=0\n  local -i matrix_row_tmp_sums=()\n  local -i matrix_col_tmp_sums=()\n  local -i matrix_row_tmp_matrix=()\n  local -i matrix_col_tmp_matrix=()\n  local -i matrix_row_matrix_size=0\n  local -i matrix_col_matrix_size=0\n  local -i matrix_row_matrix_rows=0\n  local -i matrix_col_matrix_rows=0\n  local -i matrix_row_matrix_cols=0\n  local -i matrix_col_matrix_cols=0\n  local -i matrix_row_matrix_row=()\n  local -i matrix_col_matrix_row=()\n  local -i matrix_row_matrix_col=()\n  local -i matrix_col_matrix_col=()\n  local -i matrix_row_matrix_row\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local matrix=\"$1\"\n  local -a sums\n  local -a rows\n  local -a sorted\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local -i sum=0\n  local -i max=0\n  local -i min=0\n  local -i row=0\n  local -i col=0\n  local -i tmp=0\n  local -i tmp2=0\n  local -i tmp3=0\n  local -i tmp4=0\n  local -i tmp5=0\n  local -i tmp6=0\n  local -i tmp7=0\n  local -i tmp8=0\n  local -i tmp9=0\n  local -i tmp10=0\n  local -i tmp11=0\n  local -i tmp12=0\n  local -i tmp13=0\n  local -i tmp14=0\n  local -i tmp15=0\n  local -i tmp16=0\n  local -i tmp17=0\n  local -i tmp18=0\n  local -i tmp19=0\n  local -i tmp20=0\n  local -i tmp21=0\n  local -i tmp22=0\n  local -i tmp23=0\n  local -i tmp24=0\n  local -i tmp25=0\n  local -i tmp26=0\n  local -i tmp27=0\n  local -i tmp28=0\n  local -i tmp29=0\n  local -i tmp30=0\n  local -i tmp31=0\n  local -i tmp32=0\n  local -i tmp33=0\n  local -i tmp34=0\n  local -i tmp35=0\n  local -i tmp36=0\n  local -i tmp37=0\n  local -i tmp38=0\n  local -i tmp39=0\n  local -i tmp40=0\n  local -i tmp41=0\n  local -i tmp42=0\n  local -i tmp43=0\n  local -i tmp44=0\n  local -i tmp45=0\n \n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -a sums\n  local -a sorted_sums\n  local -a sorted_matrix\n  local -i i\n  local -i j\n  local -i k\n  local -i n\n  local -i m\n  local -i sum\n  local -i max_sum\n  local -i max_sum_index\n  local -i tmp\n  local -i tmp_index\n  local -i tmp_sum\n\n  # read matrix\n  i=0\n  while read line; do\n    matrix[i]=$line\n    ((i++))\n  done\n\n  # calculate sums\n  n=${#matrix[@]}\n  for ((i=0; i<n; i++)); do\n    sum=0\n    for ((j=0; j<n; j++)); do\n      tmp=${matrix[i]}\n      tmp=${tmp%% *}\n      ((sum+=tmp))\n      matrix[i]=${matrix[i]#* }\n    done\n    sums[i]=$sum\n  done\n\n  # sort sums\n  sorted_sums=(${sums[@]})\n  for ((i=0; i<n; i++)); do\n    max_sum=${sorted_sums[i]}\n    max_sum_index=$i\n    for ((j=i+1; j<n; j++)); do\n      if ((${sorted_sums[j]} > max_sum)); then\n        max_sum=${sorted_sums[j]}\n        max_sum_index=$j\n      fi\n    done\n    tmp_sum=${sorted_sums[i]}\n    sorted_sums[i]=$max_sum\n    sorted_sums[max_sum_index]=$tmp_sum\n  done\n\n  # sort matrix\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      if ((${sums[j]} == ${sorted_sums[i]})); then\n        sorted_matrix[i]=${matrix[j]}\n        sums[j]=0\n        break\n      fi\n    done\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmpkm6grdny.sh: line 67: syntax error near unexpected token `}'\\n/tmp/tmpkm6grdny.sh: line 67: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n  local -a matrix\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i ab=0\n  local -i ac=0\n  local -i ad=0\n  local -i ae=0\n  local -i af=0\n  local -i ag=0\n  local -i ah=0\n  local -i ai=0\n  local -i aj=0\n  local -i ak=0\n  local -i al=0\n  local -i am=0\n  local -i an=0\n  local -i ao=0\n  local -i ap=0\n  local -i aq=0\n  local -i ar=0\n  local -i as=0\n  local -i at=0\n  local -i au=0\n  local -i av=0\n  local -i aw=0\n  local -i ax=0\n  local -i ay=0\n  local -i az=0\n  local -i ba=0\n  local -i bb=0\n  local -i bc=0\n  local -i bd=0\n  local -i be=0\n  local -i bf=0\n  local -i bg=0\n  local -i bh=0\n  local -i bi=0\n  local -i bj=0\n  local -i bk=0\n  local -i bl=0\n  local -i bm=0\n  local -i bn=0\n  local -i bo=0\n  local -i bp=0\n  local -i bq=0\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n\tlocal matrix=\"$1\"\n\tlocal -a rows\n\tlocal -a sums\n\tlocal -a sorted_rows\n\tlocal -a sorted_sums\n\tlocal -a sorted_matrix\n\tlocal row\n\tlocal sum\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal n\n\tlocal m\n\tlocal -i max_sum\n\tlocal -i min_sum\n\tlocal -i max_index\n\tlocal -i min_index\n\tlocal -i max_index_found\n\tlocal -i min_index_found\n\tlocal -i max_index_found_count\n\tlocal -i min_index_found_count\n\tlocal -i max_index_found_count_max\n\tlocal -i min_index_found_count_max\n\tlocal -i max_index_found_count_min\n\tlocal -i min_index_found_count_min\n\tlocal -i max_index_found_count_max_index\n\tlocal -i min_index_found_count_max_index\n\tlocal -i max_index_found_count_min_index\n\tlocal -i min_index_found_count_min_index\n\tlocal -i max_index_found_count_max_index_found\n\tlocal -i min_index_found_count_max_index_found\n\tlocal -i max_index_found_count_min_index_found\n\tlocal -i min_index_found_count_min_index_found\n\tlocal -i max_index_found_count_max_index_found_count\n\tlocal -i min_index_found_count_max_index_found_count\n\tlocal -i max_index_found_count_min_index_found_count\n\tlocal -i min_index_found_count_min_index_found_count\n\tlocal -i max_index_found_count_max_index_found_count_max\n\tlocal -i min_index_found_count_max_index_found_count_max\n\tlocal -i max_index_found_count_min_index_found_count_max\n\tlocal -i min_index_found_count_min_index_found_count_max\n\t\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    local matrix=\"$1\"\n    local -a rows\n    local -a sums\n    local -a sorted_rows\n    local -a sorted_sums\n    local -a sorted_matrix\n    local row\n    local sum\n    local i\n    local j\n    local k\n    local n\n    local m\n\n    # Split the matrix into rows\n    IFS=$'\\n' read -r -a rows <<< \"$matrix\"\n\n    # Calculate the sums of the rows\n    for row in \"${rows[@]}\"; do\n        sum=0\n        IFS=' ' read -r -a row_arr <<< \"$row\"\n        for i in \"${row_arr[@]}\"; do\n            sum=$((sum + i))\n        done\n        sums+=(\"$sum\")\n    done\n\n    # Sort the rows by their sums\n    for ((i=0; i < ${#rows[@]}; i++)); do\n        for ((j=i; j < ${#rows[@]}; j++)); do\n            if [[ ${sums[i]} -gt ${sums[j]} ]]; then\n                # Swap the rows\n                row=\"${rows[i]}\"\n                rows[i]=\"${rows[j]}\"\n                rows[j]=\"$row\"\n\n                # Swap the sums\n                sum=\"${sums[i]}\"\n                sums[i]=\"${sums[j]}\"\n                sums[j]=\"$sum\"\n            fi\n        done\n    done\n\n    # Split the rows back into a matrix\n    for row in \"${rows[@]}\"; do\n        IFS=' ' read -r -a row_arr <<< \"$row\"\n        for i in \"${row_arr[@]}\"; do\n            sorted_matrix+=(\"$i\")\n        done\n    done\n\n    # Print the matrix\n    n=${#rows[@]}\n    m=${#row_arr[@]}\n    for ((i=0; i < n; i++)); do\n        for ((j=0; j < m; j++)); do\n            k=$((i * m + j))\n            printf \"%d \" \"${sorted_matrix[k]}\"\n\n}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190578,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp_nqthicy.sh: line 66: syntax error near unexpected token `}'\\n/tmp/tmp_nqthicy.sh: line 66: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}