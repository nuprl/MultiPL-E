{
  "name": "mbpp_304_find_Element",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a shthon function to find element at a given index after number of rotations.\n#\n# $1 is a space-separated list\n# $2 is a newline-separated, space-separated list\n# $3 is an integer\n# $4 is an integer\nfind_Element() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    find_Element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"0 2\\n0 3\" \"2\" \"1\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4\" \"0 1\\n0 2\" \"1\" \"2\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"0 1\\n0 2\" \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local -n arr=$1\n    local -n rotations=$2\n    local index=$3\n    local num_rotations=$4\n    local i=0\n    local j=0\n    local temp=0\n    local len=${#arr[@]}\n    local rotations_len=${#rotations[@]}\n    local rotations_arr=(${rotations[@]})\n    while [ $i -lt $num_rotations ]\n    do\n        temp=${arr[0]}\n        j=0\n        while [ $j -lt $len ]\n        do\n            if [ $j -eq $((len-1)) ]\n            then\n                arr[$j]=$temp\n            else\n                arr[$j]=${arr[$((j+1))]}\n            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo ${arr[$index]}",
    "  local -n arr=$1\n  local -n rotations=$2\n  local index=$3\n  local length=${#arr[@]}\n  local rotation\n  for rotation in $rotations; do\n    local new_index=$(((index - rotation) % length))\n    if ((new_index < 0)); then\n      new_index=$((new_index + length))\n    fi\n    index=$new_index\n  done\n  echo ${arr[$index]}",
    "  local -n arr=$1\n  local -n arr2=$2\n  local index=$3\n  local rotations=$4\n  local len=${#arr[@]}\n  local len2=${#arr2[@]}\n  local new_index=$(((index + rotations) % len))\n  echo ${arr[$new_index]}\n  echo ${arr2[$new_index]}",
    "  # Write your code here\n  # To print results to the standard output you can use echo\n  # Example: echo \"Hello world!\"\n  arr=($1)\n  rotations=($2)\n  index=$3\n  num_rotations=$4\n  echo ${arr[$((($index+$num_rotations)%${#arr[@]}))]}",
    "  local -n arr=$1\n  local -n rot=$2\n  local index=$3\n  local rotations=$4\n  local i=0\n  local j=0\n  local temp=0\n  local size=${#arr[@]}\n  for ((i=0; i<rotations; i++))\n  do\n    temp=${arr[0]}\n    for ((j=0; j<size-1; j++))\n    do\n      arr[$j]=${arr[$j+1]}\n    done\n    arr[$j]=$temp\n  done\n  echo ${arr[$index]}",
    "    local -n arr=\"$1\"\n    local -n rotations=\"$2\"\n    local index=\"$3\"\n    local length=\"$4\"\n\n    for rotation in $rotations; do\n        arr=( \"${arr[@]:1}\" \"${arr[0]}\" )\n    done\n\n    echo \"${arr[$index]}\"",
    "  local -n arr=$1\n  local -n rotations=$2\n  local index=$3\n  local num_rotations=$4\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=${#arr[@]}\n  local -i rot_len=${#rotations[@]}\n  local -i rot_index=0\n  local -i rot_num=0\n  local -i new_index=0\n  local -i new_rot_index=0\n  local -i new_rot_num=0\n  local -i new_num_rotations=0\n  local -i new_len=0\n  local -i new_rot_len=0\n  local -i new_rot_num=0\n  local -i new_rot_index=0\n  local -i new_index=0\n  local -i new_num_rotations=0\n  local -i new_len=0\n  local -i new_rot_len=0\n  local -i new_rot_num=0\n  local -i new_rot_index=0\n  local -i new_index=0\n  local -i new_num_rotations=0\n  local -i new_len=0\n  local -i new_rot_len=0\n  local -i new_rot_num=0\n  local -i new_rot_index=0\n  local -i new_index=0\n  local -i new_num_rotations=0\n  local -i new_len=0\n  local -i new_rot_len=0\n  local -i new_rot_num=0\n  local -i new_rot_index=0\n  local -i new_index=0\n  local -i new_num_rotations=0\n  local -i new_len=0\n  local -i new_rot_len=0\n  local -i new_rot_num=0\n  local -i new_rot_index=0\n  local -i new_index=0\n  local -i new_num_rotations=0\n  local -i new_len=0\n  local -i",
    "  # Write your code here\n  # To print results to the standard output you can use echo\n  # Example: echo \"Hello world!\"\n  IFS=' ' read -r -a array <<< \"$1\"\n  IFS=$'\\n' read -r -a rotations <<< \"$2\"\n  n=${#array[@]}\n  for i in \"${rotations[@]}\"; do\n    if [ $i -lt $n ]; then\n      array=( \"${array[@]:$i}\" \"${array[@]:0:$i}\" )\n    fi\n  done\n  echo ${array[$3]}",
    "    local list=($1)\n    local list_rotated=($2)\n    local index=$3\n    local rotations=$4\n    local len=${#list[@]}\n    local new_index=$(((index - rotations) % len))\n    echo ${list_rotated[$new_index]}",
    "  local -n arr=$1\n  local -n rotations=$2\n  local index=$3\n  local num_rotations=$4\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=${#arr[@]}\n  local -i rot_len=${#rotations[@]}\n  local -i rot_index=0\n  local -i rot_count=0\n  local -i new_index=0\n  local -i new_index_rot=0\n  local -i new_index_rot_count=0\n  local -i new_index_rot_index=0\n  local -i new_index_rot_len=0\n  local -i new_index_rot_index_len=0\n  local -i new_index_rot_index_len_index=0\n  local -i new_index_rot_index_len_index_rot=0\n  local -i new_index_rot_index_len_index_rot_count=0\n  local -i new_index_rot_index_len_index_rot_index=0\n  local -i new_index_rot_index_len_index_rot_len=0\n  local -i new_index_rot_index_len_index_rot_index_len=0\n  local -i new_index_rot_index_len_index_rot_index_len_index=0\n  local -i new_index_rot_index_len_index_rot_index_len_index_rot=0\n  local -i new_index_rot_index_len_index_rot_index_len_index_rot_count=0\n  local -i new_index_rot_index_len_index_rot_index_len_index_rot_index=0\n  local -i new_index_rot_index_len_index_rot_index_len_index_rot_len=0\n  local -i new_index_rot_index_len_index_rot_index_len_index_rot_index_len=0\n  local -i new_index_rot_index_len_index_rot_index_len_",
    "    local -n _list=$1\n    local -n _rotations=$2\n    local _index=$3\n    local _rotation_index=$4\n\n    local _rotation=${_rotations[$_rotation_index]}\n    local _rotation_index=$((_rotation_index + 1))\n    local _rotation_index=$((_rotation_index % ${#_rotations[@]}))\n\n    local _list_index=$((_index - _rotation))\n    if [ $_list_index -lt 0 ]; then\n        _list_index=$((_list_index + ${#_list[@]}))\n    fi\n\n    echo \"${_list[$_list_index]}\"",
    "    local -n arr=$1\n    local -n rotations=$2\n    local index=$3\n    local n=$4\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n    local len=${#arr[@]}\n    for i in $(seq 1 $n)\n    do\n        for j in $(seq 1 $len)\n        do\n            if [ $j -eq $len ]\n            then\n                temp=${arr[0]}\n                arr[0]=${arr[$j-1]}\n            else\n                temp=${arr[$j]}\n                arr[$j]=${arr[$j-1]}\n            fi\n        done\n    done\n    echo ${arr[$index]}",
    "    local -n arr=$1\n    local -n rotations=$2\n    local index=$3\n    local len=${#arr[@]}\n    local new_index=0\n    for i in $rotations; do\n        new_index=$(((index - i) % len))\n        if ((new_index < 0)); then\n            new_index=$((new_index + len))\n        fi\n    done\n    echo ${arr[$new_index]}",
    "  local list=\"$1\"\n  local rotations=\"$2\"\n  local index=\"$3\"\n  local rotations_count=\"$4\"\n  local element=\"\"\n  local count=0\n  local index_of_element=0\n\n  while read -r rotation; do\n    index_of_element=$((index - count))\n    if [ $index_of_element -lt 0 ]; then\n      index_of_element=$((index_of_element + ${#list}))\n    fi\n    element=\"${list:$index_of_element:1}\"\n    list=\"${list:$index_of_element}${list:0:$index_of_element}\"\n    count=$((count + 1))\n  done <<< \"$rotations\"\n\n  echo \"$element\"",
    "    local -n arr=$1\n    local -n rotations=$2\n    local index=$3\n    local n=$4\n    local i=0\n    local j=0\n    local temp=0\n    local len=${#arr[@]}\n    while read -r line; do\n        temp=$((line % len))\n        for ((i=0; i<temp; i++)); do\n            j=$(((len-1)+i))\n            arr[$i]=${arr[$j]}\n        done\n        for ((i=temp; i<len; i++)); do\n            j=$((i-temp))\n            arr[$i]=${arr[$j]}\n        done\n    done <<< \"$rotations\"\n    echo ${arr[$index]}",
    "  local -n arr=$1\n  local -n rotations=$2\n  local index=$3\n  local length=$4\n  local i=0\n  local j=0\n  local temp=0\n  local rot=0\n  local index_after_rotation=0\n  for i in $rotations; do\n    rot=$i\n    for j in $(seq 1 $rot); do\n      temp=${arr[0]}\n      for k in $(seq 1 $((length-1))); do\n        arr[$((k-1))]=${arr[$k]}\n      done\n      arr[$((length-1))]=$temp\n    done\n  done\n  echo ${arr[$index]}",
    "  local -n array=$1\n  local -n rotations=$2\n  local index=$3\n  local length=${#array[@]}\n  local new_index=0\n  for rotation in $rotations; do\n    new_index=$(((index - rotation) % length))\n    if ((new_index < 0)); then\n      new_index=$((new_index + length))\n    fi\n  done\n  echo ${array[new_index]}",
    "    local -n arr=$1\n    local -n rot=$2\n    local index=$3\n    local rotations=$4\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local rot_len=${#rot[@]}\n    local temp=0\n    local temp_index=0\n    local temp_rot=0\n    local temp_rot_index=0\n    local temp_rot_len=0\n    local temp_rot_rot_len=0\n    local temp_rot_rot=0\n    local temp_rot_rot_index=0\n    local temp_rot_rot_rot_len=0\n    local temp_rot_rot_rot=0\n    local temp_rot_rot_rot_index=0\n    local temp_rot_rot_rot_rot_len=0\n    local temp_rot_rot_rot_rot=0\n    local temp_rot_rot_rot_rot_index=0\n    local temp_rot_rot_rot_rot_rot_len=0\n    local temp_rot_rot_rot_rot_rot=0\n    local temp_rot_rot_rot_rot_rot_index=0\n    local temp_rot_rot_rot_rot_rot_rot_len=0\n    local temp_rot_rot_rot_rot_rot_rot=0\n    local temp_rot_rot_rot_rot_rot_rot_index=0\n    local temp_rot_rot_rot_rot_rot_rot_rot_len=0\n    local temp_rot_rot_rot_rot_rot_rot_rot=0\n    local temp_rot_rot_rot_rot_rot_rot_rot_index=0\n    local temp_rot_rot_rot_rot_rot_rot_rot_rot_len=0\n    local temp_rot_rot_rot_rot_rot_rot_rot_rot=0\n    local temp_rot_rot_rot_rot_rot_rot_rot_rot_index=0\n    local temp_rot_rot_rot_rot_rot_rot_rot_rot_rot_len=0\n    local temp_rot_rot_rot_rot_rot_",
    "    # Write your code here\n    # To print results to the standard output you can use echo\n    # Example: echo \"Hello world!\"\n    IFS=' ' read -r -a array <<< \"$1\"\n    IFS=$'\\n' read -r -a rotations <<< \"$2\"\n    for i in \"${rotations[@]}\"; do\n        array=( \"${array[@]:1}\" \"${array[0]}\" )\n    done\n    echo \"${array[$3]}\"",
    "    local -n arr=$1\n    local -n arr2=$2\n    local index=$3\n    local rotations=$4\n    local -i len=${#arr[@]}\n    local -i len2=${#arr2[@]}\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i"
  ]
}