{
  "name": "mbpp_165_count_char_position",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n#\n# $1 is a string\ncount_char_position() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    count_char_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"xbcefg\") = \"2\" ]]\n    [[ $(candidate \"ABcED\") = \"3\" ]]\n    [[ $(candidate \"AbgdeF\") = \"5\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "  local str=\"$1\"\n  local len=${#str}\n  local i=0\n  local count=0\n\n  while [ $i -lt $len ]; do\n    local char=${str:$i:1}\n    local char_pos=$(printf '%d' \"'$char\")\n    local char_pos_lower=$(printf '%d' \"'${char,,}\")\n    local char_pos_upper=$(printf '%d' \"'${char^^}\")\n\n    if [ $char_pos -ge 97 -a $char_pos -le 122 ]; then\n      if [ $char_pos -eq $char_pos_lower ]; then\n        ((count++))\n      fi\n    elif [ $char_pos -ge 65 -a $char_pos -le 90 ]; then\n      if [ $char_pos -eq $char_pos_upper ]; then\n        ((count++))\n      fi\n    fi\n\n    ((i++))\n  done\n\n  echo $count",
    "  local str=\"$1\"\n  local len=${#str}\n  local count=0\n  local i=0\n  local char=''\n  local char_pos=0\n  local char_pos_in_alphabet=0\n  local alphabet='abcdefghijklmnopqrstuvwxyz'\n\n  while [ $i -lt $len ]; do\n    char=\"${str:$i:1}\"\n    char_pos_in_alphabet=\"$(echo $alphabet | grep -n \"$char\" | cut -d: -f1)\"\n    if [ \"$char_pos_in_alphabet\" -eq \"$((i+1))\" ]; then\n      count=$((count+1))\n    fi\n    i=$((i+1))\n  done\n\n  echo $count",
    "    local str=$1\n    local count=0\n    local i=0\n    local char\n    local char_pos\n    local alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n\n    for (( i=0; i<${#str}; i++ )); do\n        char=${str:$i:1}\n        char_pos=`expr index \"$alphabet\" \"$char\"`\n        if [ $char_pos -eq $((i+1)) ]; then\n            count=$((count+1))\n        fi\n    done\n\n    echo $count",
    "  local str=\"$1\"\n  local i=0\n  local count=0\n  local char\n  local char_pos\n  local alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\n    char_pos=\"$(expr index \"$alphabet\" \"$char\")\"\n    if [ $i -eq $((char_pos - 1)) ]; then\n      count=$((count + 1))\n    fi\n  done\n\n  echo \"$count\"",
    "    local str=\"$1\"\n    local len=${#str}\n    local count=0\n    local i=0\n    local char\n    local char_pos\n\n    for (( i=0; i<len; i++ )); do\n        char=\"${str:$i:1}\"\n        char_pos=$(printf \"%d\" \"'$char\")\n        if [[ $char_pos -ge 97 && $char_pos -le 122 ]]; then\n            char_pos=$((char_pos - 97))\n            if [[ $char_pos -eq $i ]]; then\n                count=$((count + 1))\n            fi\n        fi\n    done\n\n    echo $count",
    "    local string=\"$1\"\n    local count=0\n    local -i i=0\n    local -i len=${#string}\n    local -i char_code=0\n    local -i char_pos=0\n    local -i char_pos_in_alphabet=0\n    local -i char_pos_in_alphabet_lower=0\n    local -i char_pos_in_alphabet_upper=0\n    local -i char_pos_in_alphabet_lower_offset=0\n    local -i char_pos_in_alphabet_upper_offset=0\n    local -i char_pos_in_alphabet_lower_offset_mod=0\n    local -i char_pos_in_alphabet_upper_offset_mod=0\n    local -i char_pos_in_alphabet_lower_offset_mod_add=0\n    local -i char_pos_in_alphabet_upper_offset_mod_add=0\n\n    for (( i=0; i<len; i++ )); do\n        char_code=${string:$i:1}\n        char_pos=$(( $i + 1 ))\n        char_pos_in_alphabet_lower=$(( $char_code - 97 + 1 ))\n        char_pos_in_alphabet_upper=$(( $char_code - 65 + 1 ))\n        char_pos_in_alphabet_lower_offset=$(( $char_pos_in_alphabet_lower - $char_pos ))\n        char_pos_in_alphabet_upper_offset=$(( $char_pos_in_alphabet_upper - $char_pos ))\n        char_pos_in_alphabet_lower_offset_mod=$(( $char_pos_in_alphabet_lower_offset % 26 ))\n        char_pos_in_alphabet_upper_offset_mod=$(( $char_pos_in_alphabet_upper_offset % 26 ))\n        char_pos_in_alphabet_lower_offset_mod_add=$(( $char_pos_in_alphabet_lower_offset_mod + 26 ))\n        char_pos_in_alphabet_upper_offset_mod_add=$(( $char_pos",
    "  local string=\"$1\"\n  local length=${#string}\n  local count=0\n\n  for (( i=0; i<$length; i++ )); do\n    local char=${string:$i:1}\n    local char_position=$(printf '%d' \"'$char\")\n    if [[ $char_position -ge 97 && $char_position -le 122 ]]; then\n      (( count++ ))\n    fi\n  done\n\n  echo $count",
    "    local string=\"$1\"\n    local -i count=0\n    local -i index=0\n    local -i length=${#string}\n    local -i char_index=0\n    local char=\"\"\n    local -i char_code=0\n    local -i char_code_a=97\n    local -i char_code_A=65\n    local -i char_code_z=122\n    local -i char_code_Z=90\n    local -i char_code_diff=32\n\n    while [ $index -lt $length ]; do\n        char=\"${string:$index:1}\"\n        char_code=$(printf \"%d\" \"'$char\")\n        if [ $char_code -ge $char_code_a -a $char_code -le $char_code_z ]; then\n            char_index=$char_code-$char_code_a\n        elif [ $char_code -ge $char_code_A -a $char_code -le $char_code_Z ]; then\n            char_index=$char_code-$char_code_A\n        else\n            char_index=-1\n        fi\n        if [ $char_index -eq $index ]; then\n            count=$count+1\n        fi\n        index=$index+1\n    done\n    echo $count",
    "  local str=\"$1\"\n  local len=${#str}\n  local count=0\n  for (( i=0; i<len; i++ )); do\n    local c=${str:$i:1}\n    local pos=$(printf '%d' \"'$c\")\n    if [[ $pos -ge 97 && $pos -le 122 ]]; then\n      (( count++ ))\n    fi\n  done\n  echo $count",
    "    local str=$1\n    local len=${#str}\n    local count=0\n    local i=0\n    local char\n    local char_pos\n    local char_pos_in_alphabet\n    local alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    for ((i=0; i<len; i++)); do\n        char=${str:i:1}\n        char_pos=$(($i+1))\n        char_pos_in_alphabet=$(echo $alphabet | grep -bo $char | cut -d: -f1)\n        if [[ $char_pos_in_alphabet == $char_pos ]]; then\n            count=$(($count+1))\n        fi\n    done\n    echo $count",
    "  local str=\"$1\"\n  local -i len=${#str}\n  local -i i=0\n  local -i count=0\n  local -i pos=0\n  local -i char_pos=0\n  local -i char_code=0\n  local -i char_code_a=97\n  local -i char_code_z=122\n  local -i char_code_A=65\n  local -i char_code_Z=90\n  local -i char_code_0=48\n  local -i char_code_9=57\n\n  while (( i < len )); do\n    char_code=${str:$i:1}\n    char_code=$(printf \"%d\" \"'$char_code\")\n    if (( char_code >= char_code_a && char_code <= char_code_z )); then\n      pos=$(( char_code - char_code_a ))\n    elif (( char_code >= char_code_A && char_code <= char_code_Z )); then\n      pos=$(( char_code - char_code_A ))\n    elif (( char_code >= char_code_0 && char_code <= char_code_9 )); then\n      pos=$(( char_code - char_code_0 + 26 ))\n    else\n      pos=-1\n    fi\n\n    if (( pos == i )); then\n      (( count++ ))\n    fi\n\n    (( i++ ))\n  done\n\n  echo $count",
    "    local string=\"$1\"\n    local count=0\n    local i=0\n    local char\n    local char_pos\n    local char_pos_in_alphabet\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=\"${string:$i:1}\"\n        char_pos=\"$(printf \"%d\" \"'$char\")\"\n        char_pos_in_alphabet=\"$(printf \"%d\" \"'$(echo \"$char\" | tr '[:lower:]' '[:upper:]')\")\"\n        if [ \"$char_pos\" -eq \"$char_pos_in_alphabet\" ]; then\n            (( count++ ))\n        fi\n    done\n\n    echo \"$count\"",
    "  local string=\"$1\"\n  local count=0\n  local i=0\n  local char\n  local char_position\n  local char_position_in_alphabet\n\n  for (( i=0; i<${#string}; i++ )); do\n    char=\"${string:$i:1}\"\n    char_position=\"$(($i + 1))\"\n    char_position_in_alphabet=\"$(printf '%d' \"'$char\")\"\n\n    if [[ \"$char_position\" -eq \"$char_position_in_alphabet\" ]]; then\n      ((count++))\n    fi\n  done\n\n  echo \"$count\"",
    "  local string=\"$1\"\n  local -i count=0\n  local -i len=${#string}\n  local -i i=0\n  local -i char_pos=0\n  local -i char_code=0\n  local -i char_code_offset=0\n  local -i char_code_offset_lower=0\n  local -i char_code_offset_upper=0\n  local -i char_code_offset_lower_diff=0\n  local -i char_code_offset_upper_diff=0\n  local -i char_code_offset_diff=0\n  local -i char_code_offset_diff_min=0\n  local -i char_code_offset_diff_min_pos=0\n  local -i char_code_offset_diff_min_pos_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev_prev_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev_prev_prev_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i char_code_offset_diff_min_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local -i char_",
    "  local str=\"$1\"\n  local str_len=${#str}\n  local char_pos=0\n  local char_pos_count=0\n  local char_pos_count_total=0\n  local char_pos_count_total_percent=0\n  local char_pos_count_total_percent_rounded=0\n  local char_pos_count_total_percent_rounded_str=\"\"\n  local char_pos_count_total_percent_rounded_str_len=0\n  local char_pos_count_total_percent_rounded_str_len_diff=0\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces=\"\"\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len=0\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_diff=0\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_diff_spaces=\"\"\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_diff_spaces_len=0\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_diff_spaces_len_diff=0\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_diff_spaces_len_diff_spaces=\"\"\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_diff_spaces_len_diff_spaces_len=0\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_diff_spaces_len_diff_spaces_len_diff=0\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_diff_spaces_len_diff_spaces_len_diff_spaces=\"\"\n  local char_pos_count_total_percent_rounded_str_len_diff_spaces_len_",
    "    local str=\"$1\"\n    local count=0\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:i:1}\"\n        local char_pos=$(printf '%d' \"'$char\")\n        if [[ $char_pos -ge 97 && $char_pos -le 122 ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count",
    "    local str=$1\n    local count=0\n    local i=0\n    local char\n    local char_pos\n\n    for ((i=0; i<${#str}; i++)); do\n        char=${str:$i:1}\n        char_pos=$(echo $char | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | tr -d '[:punct:]' | tr -d '[:space:]' | od -An -tuC | tr -d ' ')\n        if [[ $char_pos -eq $i ]]; then\n            ((count++))\n        fi\n    done\n\n    echo $count",
    "    local string=$1\n    local count=0\n    local i=0\n    local char=''\n    local char_pos=0\n    local char_pos_in_alphabet=0\n    local alphabet='abcdefghijklmnopqrstuvwxyz'\n\n    for (( i=0; i<${#string}; i++ )); do\n        char=${string:$i:1}\n        char_pos=$(( $i + 1 ))\n        char_pos_in_alphabet=$(echo $alphabet | grep -n -i $char | cut -d ':' -f 1)\n\n        if [ $char_pos -eq $char_pos_in_alphabet ]; then\n            (( count++ ))\n        fi\n    done\n\n    echo $count",
    "  local -i count=0\n  local -i len=${#1}\n  local -i i=0\n  local -i char_pos=0\n  local -i char_pos_in_alphabet=0\n  local -i char_code=0\n  local -i char_code_in_alphabet=0\n  local -i char_code_in_alphabet_lower=0\n  local -i char_code_in_alphabet_upper=0\n  local -i char_code_in_alphabet_lower_diff=0\n  local -i char_code_in_alphabet_upper_diff=0\n  local -i char_code_in_alphabet_lower_diff_abs=0\n  local -i char_code_in_alphabet_upper_diff_abs=0\n  local -i char_code_in_alphabet_lower_diff_abs_min=0\n  local -i char_code_in_alphabet_upper_diff_abs_min=0\n  local -i char_code_in_alphabet_lower_diff_abs_min_index=0\n  local -i char_code_in_alphabet_upper_diff_abs_min_index=0\n  local -i char_code_in_alphabet_lower_diff_abs_min_index_min=0\n  local -i char_code_in_alphabet_upper_diff_abs_min_index_min=0\n  local -i char_code_in_alphabet_lower_diff_abs_min_index_min_index=0\n  local -i char_code_in_alphabet_upper_diff_abs_min_index_min_index=0\n  local -i char_code_in_alphabet_lower_diff_abs_min_index_min_index_min=0\n  local -i char_code_in_alphabet_upper_diff_abs_min_index_min_index_min=0\n  local -i char_code_in_alphabet_lower_diff_abs_min_index_min_index_min_index=0\n  local -i char_code_in_alphabet_upper_diff_",
    "    local string=\"$1\"\n    local count=0\n    local i=0\n    local char\n    local position\n\n    for ((i=0; i<${#string}; i++)); do\n        char=\"${string:$i:1}\"\n        position=\"$(printf '%d' \"'$char\")\"\n        if [[ $position -ge 97 && $position -le 122 ]]; then\n            ((count++))\n        fi\n    done\n\n    echo \"$count\""
  ]
}