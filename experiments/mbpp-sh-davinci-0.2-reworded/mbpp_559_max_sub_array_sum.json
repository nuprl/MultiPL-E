{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the sum of the largest contiguous sublist in the given list.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmax_sub_array_sum() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_sub_array_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-2 -3 4 -1 -2 1 5 -3\" \"8\") = \"7\" ]]\n    [[ $(candidate \"-3 -4 5 -2 -3 2 6 -4\" \"8\") = \"8\" ]]\n    [[ $(candidate \"-4 -5 6 -3 -4 3 7 -5\" \"8\") = \"10\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local list=$1\n    local max_sum=0\n    local current_sum=0\n    local i=0\n    local j=0\n    local k=0\n    local len=${#list}\n    local num_list=($list)\n    for ((i=0; i<len; i++)); do\n        for ((j=i; j<len; j++)); do\n            current_sum=0\n            for ((k=i; k<=j; k++)); do\n                current_sum=$((current_sum+num_list[k]))\n            done\n            if [[ $current_sum -gt $max_sum ]]; then\n                max_sum=$current_sum\n            fi\n        done\n    done\n    echo $max_sum",
    "    local list=$1\n    local max_sum=$2\n    local sum=0\n    local max_sum_so_far=0\n    local start=0\n    local end=0\n    local s=0\n    for (( i=0; i<${#list}; i++ )); do\n        sum=$(( sum + ${list:$i:1} ))\n        if [[ $sum -gt $max_sum_so_far ]]; then\n            max_sum_so_far=$sum\n            start=$s\n            end=$i\n        fi\n        if [[ $sum -lt 0 ]]; then\n            sum=0\n            s=$(( i + 1 ))\n        fi\n    done\n    echo ${list:$start:$(( end - start + 1 ))}",
    "  local -a list=($1)\n  local -i max_sum=0\n  local -i current_sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#list[@]}\n  local -i window_size=$2\n  local -i max_i=0\n  local -i max_j=0\n\n  for ((i=0; i<n; i++)); do\n    current_sum=0\n    for ((j=i; j<n; j++)); do\n      current_sum=$((current_sum + list[j]))\n      if ((current_sum > max_sum)); then\n        max_sum=$current_sum\n        max_i=$i\n        max_j=$j\n      fi\n    done\n  done\n\n  echo -n \"${list[@]:max_i:max_j-max_i+1]} \"\n  echo $max_sum",
    "    local list=\"$1\"\n    local n=\"$2\"\n    local max_sum=0\n    local sum=0\n    local i=0\n    local j=0\n    local k=0\n\n    for (( i=0; i<n; i++ )); do\n        sum=0\n        for (( j=i; j<n; j++ )); do\n            sum=$(( sum + ${list[$j]} ))\n            if (( sum > max_sum )); then\n                max_sum=$sum\n            fi\n        done\n    done\n\n    echo $max_sum",
    "    local -a list=($1)\n    local max_sum=0\n    local current_sum=0\n    local i=0\n    local j=0\n    local k=0\n    local length=${#list[@]}\n    for ((i=0; i<length; i++)); do\n        for ((j=i; j<length; j++)); do\n            current_sum=0\n            for ((k=i; k<=j; k++)); do\n                current_sum=$((current_sum + list[k]))\n            done\n            if [[ $current_sum -gt $max_sum ]]; then\n                max_sum=$current_sum\n            fi\n        done\n    done\n    echo $max_sum",
    "    local list=\"$1\"\n    local max_sum=0\n    local current_sum=0\n    local current_index=0\n    local list_length=$(echo \"$list\" | wc -w)\n    local max_index=$((list_length - 1))\n\n    while [ $current_index -le $max_index ]; do\n        local current_number=$(echo \"$list\" | cut -d ' ' -f $((current_index + 1)))\n        current_sum=$((current_sum + current_number))\n        if [ $current_sum -gt $max_sum ]; then\n            max_sum=$current_sum\n        fi\n        if [ $current_sum -lt 0 ]; then\n            current_sum=0\n        fi\n        current_index=$((current_index + 1))\n    done\n\n    echo $max_sum",
    "    local list=\"$1\"\n    local max_sub_array_sum=0\n    local current_sub_array_sum=0\n    local current_sub_array_start=0\n    local current_sub_array_end=0\n    local max_sub_array_start=0\n    local max_sub_array_end=0\n    local i=0\n    local j=0\n    local k=0\n    local n=$(echo \"$list\" | wc -w)\n    for ((i=0; i<n; i++)); do\n        for ((j=i; j<n; j++)); do\n            current_sub_array_sum=0\n            for ((k=i; k<=j; k++)); do\n                current_sub_array_sum=$((current_sub_array_sum + $(echo \"$list\" | cut -d ' ' -f $((k+1)))))\n            done\n            if [[ $current_sub_array_sum -gt $max_sub_array_sum ]]; then\n                max_sub_array_sum=$current_sub_array_sum\n                max_sub_array_start=$i\n                max_sub_array_end=$j\n            fi\n        done\n    done\n    echo \"$max_sub_array_sum\"",
    "  local list=\"$1\"\n  local k=\"$2\"\n  local max_sum=0\n  local sum=0\n  local i\n  local j\n  for ((i=0; i<k; i++)); do\n    sum=$((sum + ${list[i]}))\n  done\n  max_sum=$sum\n  for ((i=k; i<${#list[@]}; i++)); do\n    sum=$((sum - ${list[i-k]} + ${list[i]}))\n    if ((sum > max_sum)); then\n      max_sum=$sum\n    fi\n  done\n  echo $max_sum",
    "    local list=$1\n    local max_sum=$2\n    local sum=0\n    local max_sum_so_far=0\n    local start=0\n    local end=0\n    local s=0\n\n    for ((i=0; i<${#list}; i++)); do\n        sum=$(($sum + ${list:$i:1}))\n\n        if ((sum > max_sum_so_far)); then\n            max_sum_so_far=$sum\n            start=$s\n            end=$i\n        fi\n\n        if ((sum < 0)); then\n            sum=0\n            s=$(($i + 1))\n        fi\n    done\n\n    echo \"Max sum is $max_sum_so_far\"\n    echo \"Subarray is ${list:$start:$((end - start + 1))}\"",
    "    local list=$1\n    local max_sum=$2\n    local sum=0\n    local max_sub_array_sum=0\n    for i in $list; do\n        sum=$((sum + i))\n        if [[ $sum -gt $max_sum ]]; then\n            max_sum=$sum\n        fi\n        if [[ $sum -lt 0 ]]; then\n            sum=0\n        fi\n    done\n    echo $max_sum",
    "  local -a array=($1)\n  local max_sum=0\n  local current_sum=0\n  local i=0\n  local j=0\n  local k=0\n  local n=${#array[@]}\n  for ((i=0; i<n; i++)); do\n    current_sum=0\n    for ((j=i; j<n; j++)); do\n      current_sum=$((current_sum + array[j]))\n      if [[ $current_sum -gt $max_sum ]]; then\n        max_sum=$current_sum\n      fi\n    done\n  done\n  echo $max_sum",
    "  local list=$1\n  local n=$2\n  local max_sum=0\n  local sum=0\n  local i=0\n  local j=0\n  while [ $i -lt $n ]; do\n    sum=$((sum + ${list[$i]}))\n    if [ $sum -lt 0 ]; then\n      sum=0\n      j=$((i + 1))\n    fi\n    if [ $sum -gt $max_sum ]; then\n      max_sum=$sum\n    fi\n    i=$((i + 1))\n  done\n  echo $max_sum",
    "  local -a array=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i max_sum=0\n  local -i sum=0\n  local -i max_i=0\n  local -i max_j=0\n\n  for i in $1; do\n    array[$j]=$i\n    ((j++))\n  done\n\n  for ((i=0; i<${#array[@]}; i++)); do\n    for ((j=i; j<${#array[@]}; j++)); do\n      sum=0\n      for ((k=i; k<=j; k++)); do\n        ((sum+=array[k]))\n      done\n      if ((sum>max_sum)); then\n        max_sum=$sum\n        max_i=$i\n        max_j=$j\n      fi\n    done\n  done\n\n  echo -n \"Max sub array sum: \"\n  for ((i=max_i; i<=max_j; i++)); do\n    echo -n \"${array[i]} \"\n  done\n  echo \"= $max_sum\"",
    "  local list=$1\n  local max_sum=$2\n  local sum=0\n  local max_sub_array_sum=0\n  for i in $list; do\n    sum=$((sum + i))\n    if ((sum > max_sum)); then\n      max_sum=$sum\n    elif ((sum < 0)); then\n      sum=0\n    fi\n  done\n  echo $max_sum",
    "  local list=$1\n  local length=$2\n  local max_sum=0\n  local sum=0\n  local i=0\n  local j=0\n  for i in $(seq 1 $length); do\n    sum=$((sum + $(echo $list | cut -d ' ' -f $i)))\n  done\n  max_sum=$sum\n  for i in $(seq 1 $((length - 1))); do\n    sum=$((sum - $(echo $list | cut -d ' ' -f $i) + $(echo $list | cut -d ' ' -f $((i + length)))))\n    if [[ $sum -gt $max_sum ]]; then\n      max_sum=$sum\n    fi\n  done\n  echo $max_sum",
    "  local list=\"$1\"\n  local size=\"$2\"\n  local max_sum=0\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local num=0\n  for i in $list; do\n    ((j++))\n    ((sum += i))\n    if ((j >= size)); then\n      if ((sum > max_sum)); then\n        max_sum=$sum\n      fi\n      ((sum -= ${list[k]}))\n      ((k++))\n    fi\n  done\n  echo $max_sum",
    "  local list=$1\n  local max_sum=$2\n  local current_sum=0\n  local max_sub_array=()\n  local current_sub_array=()\n  for i in $list; do\n    current_sum=$((current_sum + i))\n    current_sub_array+=($i)\n    if [[ $current_sum -gt $max_sum ]]; then\n      max_sum=$current_sum\n      max_sub_array=(\"${current_sub_array[@]}\")\n    fi\n    if [[ $current_sum -lt 0 ]]; then\n      current_sum=0\n      current_sub_array=()\n    fi\n  done\n  echo \"$max_sum\"\n  echo \"${max_sub_array[@]}\"",
    "    local -a list=($1)\n    local -i max_sum=0\n    local -i current_sum=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i n=${#list[@]}\n    local -i m=$2\n    for ((i=0; i<n; i++)); do\n        current_sum=0\n        for ((j=i; j<n; j++)); do\n            current_sum=$((current_sum + list[j]))\n            if ((current_sum > max_sum)); then\n                max_sum=$current_sum\n            fi\n        done\n    done\n    echo $max_sum",
    "  local -a list=($1)\n  local -i max_sum=0\n  local -i current_sum=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=${#list[@]}\n  for ((i=0; i<n; i++)); do\n    for ((j=i; j<n; j++)); do\n      current_sum=0\n      for ((k=i; k<=j; k++)); do\n        current_sum=$((current_sum + list[k]))\n      done\n      if [[ $current_sum -gt $max_sum ]]; then\n        max_sum=$current_sum\n      fi\n    done\n  done\n  echo $max_sum",
    "    local list=$1\n    local max_sum=$2\n    local sum=0\n    local max_start=0\n    local max_end=0\n    local start=0\n    local end=0\n    local i=0\n    local num=0\n\n    for i in $list; do\n        num=$(echo $i | sed 's/-//g')\n        sum=$((sum + num))\n        end=$((end + 1))\n        if [[ $sum -gt $max_sum ]]; then\n            max_sum=$sum\n            max_start=$start\n            max_end=$end\n        elif [[ $sum -lt 0 ]]; then\n            sum=0\n            start=$end\n        fi\n    done\n\n    echo -n \"$max_sum \"\n    echo \"$list\" | cut -d' ' -f$((max_start + 1))-$max_end"
  ]
}