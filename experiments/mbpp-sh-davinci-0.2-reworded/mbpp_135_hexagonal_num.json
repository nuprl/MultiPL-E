{
  "name": "mbpp_135_hexagonal_num",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the nth hexagonal number.\n#\n# $1 is an integer\nhexagonal_num() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    hexagonal_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"190\" ]]\n    [[ $(candidate \"5\") = \"45\" ]]\n    [[ $(candidate \"7\") = \"91\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    if [[ $1 -lt 1 ]]; then\n        echo \"Error: Argument must be greater than 0.\"\n        exit 1\n    fi\n    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $(( n * (2 * n - 1) ))",
    "  if [ $1 -lt 1 ]; then\n    echo \"Error: Argument must be a positive integer.\"\n    exit 1\n  fi\n  echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "  echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "    echo \"$(( $1 * (2 * $1 - 1) ))\"",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $(( n * (2 * n - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $(( n * (2 * n - 1) ))",
    "    local n=$1\n    echo $((n * ((2 * n) - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    if [ $# -ne 1 ]; then\n        echo \"Usage: $0 <integer>\"\n        return 1\n    fi\n    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    if [ $1 -lt 1 ]; then\n        echo \"Error: Argument must be a positive integer.\"\n        return 1\n    fi\n    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    local hex_num=$((n*(2*n-1)))\n    echo $hex_num",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $(( n * (2 * n - 1) ))",
    "  if [[ $1 -lt 1 ]]; then\n    echo \"Error: argument must be greater than 0\"\n    return 1\n  fi\n  echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "  local n=$1\n  echo $(( n * (2 * n - 1) ))",
    "  echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    (( $1 <= 0 )) && return 1\n    (( $1 == 1 )) && echo 1 && return 0\n    (( $1 == 2 )) && echo 6 && return 0\n    (( $1 == 3 )) && echo 15 && return 0\n    (( $1 == 4 )) && echo 28 && return 0\n    (( $1 == 5 )) && echo 45 && return 0\n    (( $1 == 6 )) && echo 66 && return 0\n    (( $1 == 7 )) && echo 91 && return 0\n    (( $1 == 8 )) && echo 120 && return 0\n    (( $1 == 9 )) && echo 153 && return 0\n    (( $1 == 10 )) && echo 190 && return 0\n    (( $1 == 11 )) && echo 231 && return 0\n    (( $1 == 12 )) && echo 276 && return 0\n    (( $1 == 13 )) && echo 325 && return 0\n    (( $1 == 14 )) && echo 378 && return 0\n    (( $1 == 15 )) && echo 435 && return 0\n    (( $1 == 16 )) && echo 496 && return 0\n    (( $1 == 17 )) && echo 561 && return 0\n    (( $1 == 18 )) && echo 630 && return 0\n    (( $1 == 19 )) && echo 703 && return 0\n    (( $1 == 20 )) && echo 780 && return 0\n    (( $1 == 21 )) && echo 861 && return 0\n    (( $1 == 22 )) && echo 946 && return 0\n    (( $1 == 23 )) && echo 1035 && return 0\n    (( $1 == 24 )) && echo 1128 && return 0\n    (( $1 == 25 )) && echo 1225 && return 0\n    (( $1 == 26 )) && echo 1326 && return 0\n    (( $1 == 27 )) && echo 1431 && return 0\n    (( $1 == 28 )) && echo 1540 && return 0\n    (( $1 == 29 )) && echo 1653 && return 0\n    (( $1 == 30 )) && echo 1770 && return 0\n    (( $1 == 31 )) && echo 1891 && return 0\n    (( $1 == 32 )) && echo 2016 && return 0\n    (( $1 == 33 )) && echo 2145 && return 0\n    (( $1 == 34 )) && echo 2278 && return 0\n    (( $1 == 35 )) &&",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $(( n * (2 * n - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n*(2*n-1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $(( n * (2 * n - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"scale=0; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    if [ $1 -lt 1 ]; then\n        echo \"Error: Argument must be a positive integer.\"\n        return 1\n    fi\n    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo \"scale=0;$1*(2*$1-1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    # nth hexagonal number = n(2n-1)\n    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n*(2*n-1)))",
    "    echo \"obase=16; $1 * (2 * $1 - 1)\" | bc",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    echo $(( $1 * ( 2 * $1 - 1 ) ))",
    "    echo \"scale=0; $1 * (2 * $1 - 1)\" | bc",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "  local n=$1\n  echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    local n=$1\n    echo $((n * (2 * n - 1)))",
    "    echo \"obase=16;$1*(2*$1-1)\" | bc",
    "  echo $(( $1 * (2 * $1 - 1) ))",
    "    local n=$1\n    echo $(( n * (2 * n - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))",
    "    echo $(( $1 * (2 * $1 - 1) ))"
  ]
}