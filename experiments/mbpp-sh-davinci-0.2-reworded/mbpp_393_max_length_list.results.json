{
  "name": "mbpp_393_max_length_list",
  "language": "sh",
  "prompt": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local list=\"$1\"\n    local max_length=0\n    local max_length_list=()\n    while read -r line; do\n        local length=$(echo \"$line\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=()\n        fi\n        if [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$line\")\n        fi\n    done <<< \"$list\"\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=''\n  local list=''\n  local length=0\n  while read -r list; do\n    length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_list=$list\n    fi\n  done <<< \"$1\"\n  echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    while read -r list; do\n        local length=${#list}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done <<< \"$1\"\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=''\n  local list=''\n  local length=0\n  while read -r list; do\n    length=$(echo \"$list\" | wc -w)\n    if [ \"$length\" -gt \"$max_length\" ]; then\n      max_length=\"$length\"\n      max_length_list=\"$list\"\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($line)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=($line)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=\n  local list_length=0\n  local list=\n  for list in $1; do\n    list_length=`echo \"$list\" | wc -w`\n    if [ $list_length -gt $max_length ]; then\n      max_length=$list_length\n      max_length_list=$list\n    fi\n  done\n  echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  for item in $1; do\n    if [[ $item == *\" \"* ]]; then\n      if [[ ${#list[@]} -gt $max_length ]]; then\n        max_length=${#list[@]}\n        max_length_list=(\"${list[@]}\")\n      fi\n      list=()\n    else\n      list+=(\"$item\")\n    fi\n  done\n  if [[ ${#list[@]} -gt $max_length ]]; then\n    max_length=${#list[@]}\n    max_length_list=(\"${list[@]}\")\n  fi\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\"\"\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_list=\"$list\"\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    local list=()\n    local length=0\n    for i in $1; do\n        if [[ $i == \"\" ]]; then\n            if [[ $length -gt $max_length ]]; then\n                max_length=$length\n                max_list=(\"${list[@]}\")\n            fi\n            list=()\n            length=0\n        else\n            list+=(\"$i\")\n            length=$((length + 1))\n        fi\n    done\n    if [[ $length -gt $max_length ]]; then\n        max_length=$length\n        max_list=(\"${list[@]}\")\n    fi\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    local list_string=''\n    local list_string_length=0\n\n    while read -r list_string; do\n        list=($list_string)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local list_length=0\n  while read -r line; do\n    list=()\n    for word in $line; do\n      list+=(\"$word\")\n    done\n    list_length=${#list[@]}\n    if [[ $list_length -gt $max_length ]]; then\n      max_length=$list_length\n      max_length_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=''\n  local list=''\n  local length=0\n  while read -r list; do\n    length=$(echo \"$list\" | wc -w)\n    if (( length > max_length )); then\n      max_length=$length\n      max_length_list=\"$list\"\n    fi\n  done <<< \"$1\"\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    for list in $1; do\n        local length=$(echo $list | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ \"$length\" -gt \"$max_length\" ]; then\n            max_length=\"$length\"\n            max_list=(\"$list\")\n        elif [ \"$length\" -eq \"$max_length\" ]; then\n            max_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=\"\"\n  for list in $1; do\n    if [ ${#list} -gt $max_length ]; then\n      max_length=${#list}\n      max_length_list=$list\n    fi\n  done\n  echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list\n  while read -r list; do\n    local length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=$list\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=\n  while read -r list; do\n    local length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_list=\"$list\"\n    fi\n  done\n  echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local list_length=0\n  while read -r line; do\n    list=()\n    for word in $line; do\n      list+=(\"$word\")\n    done\n    list_length=${#list[@]}\n    if [[ $list_length -gt $max_length ]]; then\n      max_length=$list_length\n      max_length_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"$list\")\n        elif [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    while read list; do\n        local length=${#list}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"$list\")\n        elif [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list\n  while read list; do\n    local length=$(echo \"$list\" | wc -w)\n    if [ $length -gt $max_length ]; then\n      max_length=$length\n      max_length_list=\"$list\"\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list\n  local list\n  local length\n  while read list; do\n    length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=$list\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local i=0\n    local length=0\n    while read line; do\n        list=($line)\n        length=${#list[@]}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    while read list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list\n  while read list; do\n    local length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=\"$list\"\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=()\n  local list=()\n  local length=0\n  while read -r line; do\n    list=($line)\n    length=${#list[@]}\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    while read list; do\n        if [ ${#list} -gt $max_length ]; then\n            max_length=${#list}\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    local list=\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_list=\"$list\"\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    while read list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list\n    while read list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( $length > $max_length )); then\n            max_length=$length\n            max_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  while read -r line; do\n    local length=$(echo \"$line\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=(\"$line\")\n    elif [[ $length -eq $max_length ]]; then\n      max_length_list+=(\"$line\")\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    for list in $1; do\n        list_length=${#list}\n        if [ $list_length -gt $max_length ]; then\n            max_length=$list_length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n\tlocal max_length=0\n\tlocal max_length_list=()\n\twhile read -r list; do\n\t\tlocal length=$(echo \"$list\" | wc -w)\n\t\tif (( length > max_length )); then\n\t\t\tmax_length=$length\n\t\t\tmax_length_list=(\"$list\")\n\t\telif (( length == max_length )); then\n\t\t\tmax_length_list+=(\"$list\")\n\t\tfi\n\tdone\n\techo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  while read -r list; do\n    local length=\"$(echo \"$list\" | wc -w)\"\n    if [[ \"$length\" -gt \"$max_length\" ]]; then\n      max_length=\"$length\"\n      max_length_list=(\"$list\")\n    elif [[ \"$length\" -eq \"$max_length\" ]]; then\n      max_length_list+=(\"$list\")\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=''\n  local list=''\n  local length=0\n  while read -r list; do\n    length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=\"$list\"\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local list_length=0\n  while read -r line; do\n    list=($line)\n    list_length=${#list[@]}\n    if (( list_length > max_length )); then\n      max_length=$list_length\n      max_length_list=(${list[@]})\n    fi\n  done\n  echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=()\n  local list=()\n  local length=0\n  for item in $1; do\n    if [[ $item == *\" \"* ]]; then\n      length=$(echo $item | wc -w)\n      list=(\"${list[@]}\" \"$item\")\n    else\n      if [[ $length -gt $max_length ]]; then\n        max_length=$length\n        max_list=(\"${list[@]}\")\n      fi\n      length=0\n      list=()\n    fi\n  done\n  echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list\n  while read list; do\n    local length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=$list\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if (( length > max_length )); then\n            max_length=$length\n            max_list=\"$list\"\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=\n  for list in $1; do\n    local length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=$list\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        if [[ ${#list} -gt $max_length ]]; then\n            max_length=${#list}\n            max_length_list=($list)\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $(echo \"$1\" | tr ' ' '\\n'); do\n        if [[ ${#list} -gt $max_length ]]; then\n            max_length=${#list}\n            max_length_list=(\"$list\")\n        elif [[ ${#list} -eq $max_length ]]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    local list\n    for list in $1; do\n        if [ ${#list} -gt $max_length ]; then\n            max_length=${#list}\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    while read -r line; do\n        local length=$(echo \"$line\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"$line\")\n        elif [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$line\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    for list in $(echo \"$1\"); do\n        list_length=$(echo \"$list\" | wc -w)\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=(\"$list\")\n        elif [[ $list_length -eq $max_length ]]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    while read list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\n    local list\n    for list in $1; do\n        local length=${#list}\n        if ((length > max_length)); then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    for item in $(echo \"$1\" | tr '\\n' ' '); do\n        if [[ \"$item\" == *\" \"* ]]; then\n            list+=(\"$item\")\n            list_length=$(($list_length + 1))\n        else\n            if [[ $list_length -gt $max_length ]]; then\n                max_length=$list_length\n                max_length_list=(\"${list[@]}\")\n            fi\n            list=()\n            list_length=0\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    local list\n    for list in $1; do\n        if [[ ${#list} -gt $max_length ]]; then\n            max_length=${#list}\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=()\n        IFS=' ' read -r -a list <<< \"$line\"\n        list_length=${#list[@]}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n\n    while read -r line; do\n        IFS=' ' read -r -a list <<< \"$line\"\n        list_length=${#list[@]}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done <<< \"$1\"\n\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    for i in $1; do\n        if [ \"$i\" == \"\\\\n\" ]; then\n            if [ $list_length -gt $max_length ]; then\n                max_length=$list_length\n                max_length_list=(\"${list[@]}\")\n            fi\n            list_length=0\n            list=()\n        else\n            list_length=$((list_length + 1))\n            list+=(\"$i\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=\n  local list=\n  while read list; do\n    if [[ ${#list} -gt $max_length ]]; then\n      max_length=${#list}\n      max_length_list=$list\n    fi\n  done <<< \"$1\"\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local list_length=0\n\n  while read -r line; do\n    list=()\n    list_length=0\n    for word in $line; do\n      list+=(\"$word\")\n      list_length=$((list_length + 1))\n    done\n\n    if [[ $list_length -gt $max_length ]]; then\n      max_length=$list_length\n      max_length_list=(\"${list[@]}\")\n    fi\n  done < <(echo \"$1\")\n\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=\n  for list in $1; do\n    local length=$(echo $list | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=$list\n    fi\n  done\n  echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    for list in $(echo \"$1\" | tr ' ' '\\n'); do\n        list_length=$(echo \"$list\" | wc -w)\n        if [ $list_length -gt $max_length ]; then\n            max_length=$list_length\n            max_length_list=(\"$list\")\n        elif [ $list_length -eq $max_length ]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        local length=$(echo $list | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    local list\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=()\n        IFS=' ' read -r -a list <<< \"$line\"\n        list_length=${#list[@]}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    local line=()\n    while read -r line; do\n        list=(\"${line[@]}\")\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=''\n    local list=''\n    local length=0\n    while read -r list; do\n        length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=\"$list\"\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    local list\n    for list in $1; do\n        local length=${#list}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=($list)\n        fi\n    done\n    echo ${max_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=\n  for list in $1; do\n    if [[ ${#list} -gt $max_length ]]; then\n      max_length=${#list}\n      max_length_list=$list\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if (( length > max_length )); then\n            max_length=$length\n            max_list=\"$list\"\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list=''\n    local length=0\n    while read -r list; do\n        length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done <<< \"$1\"\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=(\"$list\")\n        elif [[ $length -eq $max_length ]]; then\n            max_list+=(\"$list\")\n        fi\n    done <<< \"$1\"\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done <<< \"$1\"\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list\n    for list in $1; do\n        if [[ ${#list} -gt $max_length ]]; then\n            max_length=${#list}\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list=''\n    local length=0\n    while read -r list; do\n        length=${#list}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done <<< \"$1\"\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    for list in $1; do\n        length=${#list}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done <<< \"$1\"\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    for list in $1; do\n        list_length=${#list}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    local line\n    while read -r line; do\n        list=(\"${list[@]}\" \"$line\")\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    while read list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    while read line; do\n        list=($line)\n        list_length=${#list[@]}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ \"$length\" -gt \"$max_length\" ]; then\n            max_length=\"$length\"\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list\n  while read -r list; do\n    if [[ ${#list} -gt $max_length ]]; then\n      max_length=${#list}\n      max_list=$list\n    fi\n  done <<< \"$1\"\n  echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\"\"\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=\"$list\"\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list=''\n    local length=0\n    while read -r list; do\n        length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done <<< \"$1\"\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    local list\n    for list in $1; do\n        local length=$(echo $list | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo $max_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    for list in $1; do\n        if [[ ${#list} -gt $max_length ]]; then\n            max_length=${#list}\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    for list in $1; do\n        local length=$(echo $list | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"$list\")\n        elif [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n\tlocal max_length=0\n\tlocal max_length_list=''\n\tlocal list=''\n\tlocal length=0\n\twhile read -r list; do\n\t\tlength=$(echo \"$list\" | wc -w)\n\t\tif [ $length -gt $max_length ]; then\n\t\t\tmax_length=$length\n\t\t\tmax_length_list=\"$list\"\n\t\tfi\n\tdone <<< \"$1\"\n\techo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    for list in $1; do\n        length=${#list}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    while read -r line; do\n        local length=$(echo \"$line\" | wc -w)\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=()\n        fi\n        if (( length == max_length )); then\n            max_length_list+=(\"$line\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  while read list; do\n    local length=$(echo \"$list\" | wc -w)\n    if [ $length -gt $max_length ]; then\n      max_length=$length\n      max_length_list=()\n    fi\n    if [ $length -eq $max_length ]; then\n      max_length_list+=(\"$list\")\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"$list\")\n        elif (( length == max_length )); then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if (( length > max_length )); then\n            max_length=$length\n            max_list=\"$list\"\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=\n  local list=\n  for list in $1; do\n    local length=${#list}\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=$list\n    fi\n  done\n  echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=($line)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list\n    local list\n    local length\n    for list in $1; do\n        length=$(echo $list | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo $max_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=\n  local list\n  local length\n  for list in $1; do\n    length=$(echo \"$list\" | wc -w)\n    if [ $length -gt $max_length ]; then\n      max_length=$length\n      max_length_list=$list\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if (( length > max_length )); then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local length=0\n  local i=0\n\n  while read -r line; do\n    list=($line)\n    length=${#list[@]}\n    if (( length > max_length )); then\n      max_length=$length\n      max_length_list=(\"${list[@]}\")\n    fi\n  done\n\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list\n    for list in $1; do\n        if [ ${#list} -gt $max_length ]; then\n            max_length=${#list}\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    for i in $(echo \"$1\" | tr '\\n' ' '); do\n        list=($i)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($i)\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list\n    for list in $1; do\n        local length=$(echo $list | wc -w)\n        if (( $length > $max_length )); then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    local list\n    local length\n    while read list; do\n        length=$(echo $list | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local list_length=0\n  while read -r line; do\n    list=($line)\n    list_length=${#list[@]}\n    if (( list_length > max_length )); then\n      max_length=$list_length\n      max_length_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=($line)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    while read -r line; do\n        local length=$(echo \"$line\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"$line\")\n        elif [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$line\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"$list\")\n        elif [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local list_length=0\n  while read -r line; do\n    list=($line)\n    list_length=${#list[@]}\n    if [[ $list_length -gt $max_length ]]; then\n      max_length=$list_length\n      max_length_list=(${list[@]})\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        if [ ${#list} -gt $max_length ]; then\n            max_length=${#list}\n            max_length_list=($list)\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(${list[@]})\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    for list in $1; do\n        list_length=${#list}\n        if [ $list_length -gt $max_length ]; then\n            max_length=$list_length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local longest_list=()\n  local longest_list_length=0\n  local list=()\n  local list_length=0\n  while read -r line; do\n    list=()\n    list_length=0\n    for item in $line; do\n      list+=(\"$item\")\n      list_length=$((list_length + 1))\n    done\n    if [[ $list_length -gt $longest_list_length ]]; then\n      longest_list=(\"${list[@]}\")\n      longest_list_length=$list_length\n    fi\n  done\n  echo \"${longest_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list\n  local list\n  local length\n  while read list; do\n    length=$(echo \"$list\" | wc -w)\n    if [ \"$length\" -gt \"$max_length\" ]; then\n      max_length=\"$length\"\n      max_length_list=\"$list\"\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=(\"$list\")\n        elif [[ $length -eq $max_length ]]; then\n            max_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list=''\n    local length=0\n    while read -r line; do\n        list=\"$line\"\n        length=$(echo \"$list\" | wc -w)\n        if [ \"$length\" -gt \"$max_length\" ]; then\n            max_length=\"$length\"\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=()\n  local list=()\n  local length=0\n  while read -r line; do\n    list=($line)\n    length=${#list[@]}\n    if (( length > max_length )); then\n      max_length=$length\n      max_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    while read -r line; do\n        list=($line)\n        if (( ${#list[@]} > max_length )); then\n            max_length=${#list[@]}\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    for list in $1; do\n        length=${#list}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"$list\")\n        elif [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=()\n        for word in $line; do\n            list+=(\"$word\")\n        done\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if (( length > max_length )); then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    for list in $1; do\n        local length=$(echo $list | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list\n    for list in $1; do\n        if [[ ${#list} -gt $max_length ]]; then\n            max_length=${#list}\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=()\n  local list=()\n  local length=0\n  while read -r line; do\n    list=($line)\n    length=${#list[@]}\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local length=0\n  while read -r line; do\n    list=($line)\n    length=${#list[@]}\n    if (( length > max_length )); then\n      max_length=$length\n      max_length_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list=''\n    local length=0\n    for list in $1; do\n        length=${#list}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list\n  while read -r list; do\n    local length=$(echo \"$list\" | wc -w)\n    if [ \"$length\" -gt \"$max_length\" ]; then\n      max_length=\"$length\"\n      max_length_list=\"$list\"\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=''\n    local list=''\n    for list in $1; do\n        if [[ ${#list} -gt $max_length ]]; then\n            max_length=${#list}\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\"\"\n    local list=\"\"\n    local length=0\n    for list in $1; do\n        length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=\"$list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local list=\"$1\"\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list_length_list=()\n    local list_length_list_length=0\n    local list_length_list_length_list=()\n    local list_length_list_length_list_length=0\n    local list_length_list_length_list_length_list=()\n    local list_length_list_length_list_length_list_length=0\n    local list_length_list_length_list_length_list_length_list=()\n    local list_length_list_length_list_length_list_length_list_length=0\n    local list_length_list_length_list_length_list_length_list_length_list=()\n    local list_length_list_length_list_length_list_length_list_length_list_length=0\n    local list_length_list_length_list_length_list_length_list_length_list_length_list=()\n    local list_length_list_length_list_length_list_length_list_length_list_length_list_length=0\n    local list_length_list_length_list_length_list_length_list_length_list_length_list_length_list=()\n    local list_length_list_length_list_length_list_length_list_length_list_length_list_length_list_length=0\n    local list_length_list_length_list_length_list_length_list_length_list_length_list_length_list_length_list=()\n    local list_length_list_length_list_length_list_length_list_length_list_length_list_length_list_length_list_length=0\n    local list_length_list_length_list_length_list_length_list_length_list_length_list_length_list_length_list_length_list=()\n    local list_length_list_length_list_length_list_length_list_length_list_length_list_length_list_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    while read -r line; do\n        local length=$(echo \"$line\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"$line\")\n        elif [[ $length -eq $max_length ]]; then\n            max_length_list+=(\"$line\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=\n  for list in $1; do\n    local length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_list=$list\n    fi\n  done\n  echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local list=\"$1\"\n    local max_length=0\n    local max_length_list=\n    while read -r line; do\n        local length=$(echo \"$line\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=\"$line\"\n        fi\n    done <<< \"$list\"\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list\n  while read -r list; do\n    local length=$(echo \"$list\" | wc -w)\n    if (( length > max_length )); then\n      max_length=$length\n      max_length_list=\"$list\"\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=''\n  local list=''\n  local length=0\n  while read -r list; do\n    length=$(echo \"$list\" | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_list=\"$list\"\n    fi\n  done <<< \"$1\"\n  echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list_length=0\n    local list=()\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if (( list_length > max_length )); then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n\tlocal max_length=0\n\tlocal max_length_list=()\n\tlocal list_length=0\n\tlocal list=()\n\tlocal list_string=''\n\twhile read -r list_string; do\n\t\tlist=(${list_string})\n\t\tlist_length=${#list[@]}\n\t\tif [[ $list_length -gt $max_length ]]; then\n\t\t\tmax_length=$list_length\n\t\t\tmax_length_list=(\"${list[@]}\")\n\t\tfi\n\tdone <<< \"$1\"\n\techo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=()\n    while read -r list; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_list=(\"$list\")\n        elif [[ $length -eq $max_length ]]; then\n            max_list+=(\"$list\")\n        fi\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_list=\"\"\n    local list=\"\"\n    local length=0\n    for list in $1; do\n        length=`echo $list | wc -w`\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_list=$list\n        fi\n    done\n    echo $max_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local length=0\n\n  while read -r line; do\n    list=($line)\n    length=${#list[@]}\n    if (( length > max_length )); then\n      max_length=$length\n      max_length_list=(${list[@]})\n    fi\n  done\n\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=''\n  local list=''\n  local length=0\n  for list in $1; do\n    length=$(echo \"$list\" | wc -w)\n    if [ $length -gt $max_length ]; then\n      max_length=$length\n      max_length_list=$list\n    fi\n  done\n  echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=()\n  local list=()\n  local length=0\n  while read -r line; do\n    list=($line)\n    length=${#list[@]}\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list\n  for list in $1; do\n    local length=$(echo $list | wc -w)\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_length_list=($list)\n    fi\n  done\n  echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=()\n        while read -r word; do\n            list+=(\"$word\")\n        done <<< \"$line\"\n        length=${#list[@]}\n        if (( length > max_length )); then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done <<< \"$1\"\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  for list in $1; do\n    local length=$(echo $list | wc -w)\n    if [ $length -gt $max_length ]; then\n      max_length=$length\n      max_length_list=($list)\n    fi\n  done\n  echo ${max_length_list[@]}\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local list_length=0\n    while read -r line; do\n        list=($line)\n        list_length=${#list[@]}\n        if [[ $list_length -gt $max_length ]]; then\n            max_length=$list_length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\"\"\n    local list=\"\"\n    local length=0\n    local list_length=0\n    for list in $1; do\n        length=${#list}\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=$list\n        elif [ $length -eq $max_length ]; then\n            max_length_list=\"$max_length_list $list\"\n        fi\n    done\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    # We're going to use the fact that the max length list is the last one\n    # in the list, so we sort by length.\n    #\n    # We use `sort -n` to sort numerically, and `sort -r` to reverse the\n    # order.\n    #\n    # We use `sort -t ' '` to specify that the delimiter is a space.\n    #\n    # We use `sort -k 2` to specify that we want to sort by the second field\n    # (i.e. the length of the list).\n    #\n    # We use `sort -s` to specify that we want to sort by the entire line,\n    # rather than just the first field.\n    #\n    # We use `sort -V` to sort by version number, so that \"10\" comes after\n    # \"2\".\n    #\n    # We use `sort -z` to specify that the input is terminated by a null\n    # character, rather than a newline.\n    #\n    # We use `sort -u` to remove duplicates.\n    #\n    # We use `sort -o` to specify that we want to write the output to the\n    # input file.\n    #\n    # We use `sort -t ' ' -k 2 -s -V -z -u -o` to sort by the length of the\n    # list, and write the output to the input file.\n    #\n    # We use `sort -t ' ' -k 2 -s -V -z -u -o -r` to sort by the length of\n    # the list, reverse the order, and write the output to the input file.\n    #\n    # We use `sort -t ' ' -k 2 -s -V -z -u -o -r | tail -n 1` to sort by the\n    # length of the list, reverse the order, write the output to the input\n    # file, and print the last line.\n    #\n    # We use `sort -t ' ' -k 2 -s -V -z -u -o -r | tail -n 1 | cut -d ' ' -f 1`\n    # to sort by the length of the list, reverse the order, write the output\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b\"/tmp/tmp12b15bwt.sh: line 43: syntax error near unexpected token `}'\\n/tmp/tmp12b15bwt.sh: line 43: `}'\\n\"",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=()\n  local list=()\n  local length=0\n  while read -r line; do\n    list=($line)\n    length=${#list[@]}\n    if [[ $length -gt $max_length ]]; then\n      max_length=$length\n      max_list=(\"${list[@]}\")\n    fi\n  done\n  echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\n    while read -r line; do\n        local length=$(echo \"$line\" | wc -w)\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=\"$line\"\n        fi\n    done <<< \"$1\"\n    echo \"$max_length_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if (( $length > $max_length )); then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_list=\n  while read -r list; do\n    local length=\"$(echo \"$list\" | wc -w)\"\n    if [[ \"$length\" -gt \"$max_length\" ]]; then\n      max_length=\"$length\"\n      max_list=\"$list\"\n    fi\n  done\n  echo \"$max_list\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n  local max_length=0\n  local max_length_list=()\n  local list=()\n  local list_length=0\n  while read -r line; do\n    list=(${line})\n    list_length=${#list[@]}\n    if [[ ${list_length} -gt ${max_length} ]]; then\n      max_length=${list_length}\n      max_length_list=(${line})\n    fi\n  done\n  echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list\n    for list in $1; do\n        local length=$(echo \"$list\" | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=($list)\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=()\n    local list=()\n    local length=0\n    while read -r line; do\n        list=($line)\n        length=${#list[@]}\n        if [[ $length -gt $max_length ]]; then\n            max_length=$length\n            max_length_list=(\"${list[@]}\")\n        fi\n    done\n    echo \"${max_length_list[@]}\"\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190887,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    local max_length=0\n    local max_length_list=\n    for list in $1; do\n        local length=$(echo $list | wc -w)\n        if [ $length -gt $max_length ]; then\n            max_length=$length\n            max_length_list=$list\n        fi\n    done\n    echo $max_length_list\n}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test",
      "timestamp": 1667190888,
      "stdout": "b''",
      "stderr": "b''",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}