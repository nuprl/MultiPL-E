name: HumanEval_71_triangle_area
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ the area of\n;; the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n\
  ;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define\
  \ (triangle_area a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ["  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round\
    \ (* 0.5 (* a b c)))\n      -1))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a\
    \ c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (*\
    \ b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (round (* area 100) 2))]\n    [else\
    \ -1]))\n", "  (cond\n    [(< a 0) -1]\n    [(< b 0) -1]\n    [(< c 0) -1]\n \
    \   [(> (+ a b) c) (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c\
    \ c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b\
    \ 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b)\
    \ (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (round (* area 100)))]\n    [else -1]))\n", "  (cond\n    [(>= (+ a b)\
    \ c)\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2\
    \ a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a\
    \ c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (*\
    \ b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b) (>= a c))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (-\
    \ s b) (- s c)))]\n    [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n\
    \      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (*\
    \ 0.5 (- (+ a b c) (* (- a b c) (- a b c) (- a b c)))) 2)\n          -1)\n   \
    \   -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+\
    \ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round\
    \ (* area 100))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>=\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n   \
    \        (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (>= (+ a b) c)\
    \ (>= (+ a c) b) (>= (+ b c) a))\n        (round (* 0.5 (* a b c)) 2)]\n     \
    \  [else -1])]\n    [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n   \
    \   (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5\
    \ (- (+ a b c) (- a b c))))\n          -1)\n      -1))\n", "  (cond\n    [(and\
    \ (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+\
    \ a b c) 2))\n                    (* a a)\n                    (* b b)\n     \
    \               (* c c))))]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n\
    \     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* a a)\n                    (* b b)\n                    (* c c))))]\n\
    \       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+\
    \ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n\
    \                       (/ (+ a b c) 2))\n                    (* a a)\n      \
    \              (* b b)\n                    (* c c))))]\n       [else -1])]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (define s (/\
    \ (+ a b c) 2))\n     (sqrt (* (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n           \
    \            (/ (+ a b c) 2))\n                     (* a a)\n                \
    \     (* b b)\n                     (* c c))))]\n       [else -1])]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+\
    \ a b c) 2))\n                     (* a a)\n                     (* b b)\n   \
    \                  (* c c))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n\
    \     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \          (* a a)\n                     (* b b)\n                     (* c c))))]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (> a b) (> a c))\n           (round (*\
    \ 2 area))\n           (round (* 2 area))))]\n    [else -1]))\n", "  (cond\n \
    \   [(and (> a 0) (> b 0) (> c 0))\n     (let*\n         ([s (/ (+ a b c) 2)]\n\
    \          [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (> area\
    \ 0) (not (infinite? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (define p (+\
    \ a b c))\n     (define s (/ p 2))\n     (define area (sqrt (* s (- s a) (- s\
    \ b) (- s c))))\n     (round (* area 100))]\n    [else -1]))\n", "  (cond\n  \
    \  [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b\
    \ (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n\
    \     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (and (number?\
    \ area) (not (nan? area)))\n         (round (* area 100))\n         -1)]\n   \
    \ [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a\
    \ b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5 (- (+ a b c) (*\
    \ 2 (max a (max b c))))))\n          -1)\n      -1))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s\
    \ a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b\
    \ 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (-\
    \ s a) (- s b) (- s c)))])\n       (if (and (> area 0) (number? area))\n     \
    \      (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a b c) (>= b c) (>= c))\n     (round (* 0.5 (- a b c)) 2)]\n  \
    \  [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (cond\n         [(> area 0) (round (* area 100))]\n         [else -1]))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([s (/\
    \ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= b a) (>=\
    \ b c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [(and (>= c a) (>= c b))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (>\
    \ c 0))\n         (let ([s (/ (+ a b c) 2)])\n           (sqrt (* s (- s a) (-\
    \ s b) (- s c))))]\n        [else -1]))\n", "  (cond\n    [(and (< a 0) (< b 0)\
    \ (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b\
    \ 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (<\
    \ b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0)\
    \ (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a\
    \ 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (<\
    \ a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c", "  (cond [(and (>= a b c) (< (+ b c) a)) -1]\n      \
    \  [(and (>= b a c) (< (+ a c) b)) -1]\n        [(and (>= c a b) (< (+ a b) c))\
    \ -1]\n        [else (round (* (/ (sqrt (+ (* (- a (/ b 2)) (- a (/ b 2))) (*\
    \ (- b (/ a 2)) (- b (/ a 2))))) 2) 100))]))\n", "  (cond\n    [(and (>= a 0)\
    \ (>= b 0) (>= c 0))\n     (cond\n       [(and (> (+ a b) c) (> (+ a c) b) (>\
    \ (+ b c) a))\n        (round (* 0.5 (sqrt (- (* a a) (* b b) (* c c) (* 2 (*\
    \ a b)) (* 2 (* a c)) (* 2 (* b c))))))]\n       [else -1])]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n           \
    \            (/ (+ a b c) 2))\n                     (* a a)\n                \
    \     (* b b)\n                     (* c c))))]\n       [else -1])]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+\
    \ a b c) 2))\n                     (* a a)\n                     (* b b)\n   \
    \                  (* c c))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n\
    \     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \          (* a a)\n                     (* b b)\n                     (* c c))))]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond\n    [(or (< a 0) (< b 0) (<\
    \ c 0)) -1]\n    [(or (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round\
    \ (* (sqrt (+ (* (- a (/ b 2)) (- a (/ b 2))) (* (- b (/ a 2)) (- b (/ a 2)))))\
    \ 2))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n\
    \     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (> area 0) (not (infinite? area)))\n           (round (* area\
    \ 100) 2)\n           -1))]\n    [else -1]))\n", "  (if (and (> (+ a b) c) (>\
    \ (+ a c) b) (> (+ b c) a))\n      (round (* 0.5 (* a b c)))\n      -1))\n", " \
    \ (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (round\
    \ (* 0.5 (sqrt (- (* a a) (* b b) (* c c)) (+ (* a a) (* b b) (* c c)))) 2)]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt (* s\
    \ (- s a) (- s b) (- s c))))\n     (round (* 100 area))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n           \
    \            (/ (+ a b c) 2))\n                     (* a a)\n                \
    \     (* b b)\n                     (* c c))))]\n       [else -1])]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+\
    \ a b c) 2))\n                     (* a a)\n                     (* b b)\n   \
    \                  (* c c))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n\
    \     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \          (* a a)\n                     (* b b)\n                     (* c c))))]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s\
    \ c)))]\n    [else -1]))\n", "  (cond\n    [(or (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(or (> (+ a b) c) (> (+ a c) b) (> (+ b c) a)) -1]\n    [else (round (*\
    \ 0.5 (- (+ a b c) (- a b c))))]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n   \
    \        (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c", "  (if (and (> (+ a b) c)\n           (> (+\
    \ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n    \
    \  -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+\
    \ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n\
    \                       (/ (+ a b c) 2))\n                    (* a a))))]\n  \
    \     [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a\
    \ c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n\
    \                       (/ (+ a b c) 2))\n                    (* b b))))]\n  \
    \     [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a\
    \ b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n\
    \                       (/ (+ a b c) 2))\n                    (* c c))))]\n  \
    \     [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n   \
    \        (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (define\
    \ (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n\
    \         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt (* (- (* a a) (*\
    \ b b) (* c c)) (* a b c))))\n  (if (is-valid-triangle a b c)\n      (round (*\
    \ (area a b c) 100) 2)\n      -1))\n", "  (cond\n    [(and (>= a b c) (>= b c\
    \ a) (>= c a b))\n     (round (* 0.5 (- a b c) (- b c a) (- c a b)))\n     ]\n\
    \    [else -1]))\n", "  (cond\n    [(>= (+ a b) c)\n     (round (* 0.5 (* a b\
    \ (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (> (+\
    \ a b) c) (> (+ a c) b) (> (+ b c) a))\n        (round (* 0.5 (* a b c)) 2)]\n\
    \       [else -1])]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n         \
    \  (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (* (+ a b c)\
    \ (- (+ a b c) a) (- (+ a b c) b) (- (+ a b c) c))) 2)\n      -1))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round (* area 100))]\n   \
    \ [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s\
    \ (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (* s (- s a) (- s b)\
    \ (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c)) (sqrt\
    \ (+ (* (- a b) (- a b)) (* (- a c) (- a c))))]\n    [(and (>= b a) (>= b c))\
    \ (sqrt (+ (* (- b a) (- b a)) (* (- b c) (- b c))))]\n    [(and (>= c a) (>=\
    \ c b)) (sqrt (+ (* (- c a) (- c a)) (* (- c b) (- c b))))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (cond\n         [(> area 0) (round (* area 100))]\n         [else -1]))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define\
    \ s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b)\
    \ (> (+ b c) a))\n          (round (* 0.5 (* a b c)))\n          -1)\n      -1))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n           \
    \            (/ (+ a b c) 2))\n                    (* a a)\n                 \
    \   (* b b)\n                    (* c c))))]\n       [else -1])]\n    [(and (>=\
    \ b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c)\
    \ 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+ a b\
    \ c) 2))\n                    (* a a)\n                    (* b b)\n         \
    \           (* c c))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n  \
    \   (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* a a)\n                    (* b b)\n                    (* c c))))]\n\
    \       [else -1])]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n\
    \           (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (and (> area 0) (not (infinite?\
    \ area)))\n         (round (* area 100))\n         -1)]\n    [else -1]))\n", " \
    \ (cond\n    [(and (>= a b) (>= a c))\n     (define s (/ (+ a b c) 2))\n     (sqrt\
    \ (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b) (>= a c))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (-\
    \ (* s (- s a)) (* s (- s b)) (* s (- s c))))])\n       (round (* area 2) 2))]\n\
    \    [(and (>= b a) (>= b c))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (- (* s (- s a)) (* s (- s b)) (* s (- s c))))])\n       (round (* area\
    \ 2) 2))]\n    [(and (>= c a) (>= c b))\n     (let* ([s (/ (+ a b c) 2)]\n   \
    \         [area (sqrt (- (* s (- s a)) (* s (- s b)) (* s (- s c))))])\n     \
    \  (round (* area 2) 2))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s\
    \ b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c\
    \ 0))\n     (let ([s (/ (+ a b c) 2)])\n       (* s (- s a) (- s b) (- s c)))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define\
    \ s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b c) (>= b c a) (>= c a b))\n     (round (* 0.5 (- a (-\
    \ b c)) (- b (- c a)) (- c (- a b))))]\n    [else -1]))\n", "  (if (and (> (+\
    \ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n      (round (*\
    \ 0.5 (* a b c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n \
    \    (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b c) 2) (sqrt (- (* (+\
    \ a b c) (* (+ a b c)) (* (- a b c) (- a b c))))))]\n       [else -1])]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b\
    \ c) 2) (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b c) (- a b c))))))]\n   \
    \    [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b)\
    \ c)\n        (* (/ (+ a b c) 2) (sqrt (- (* (+ a b c) (* (+ a b c)) (* (- a b\
    \ c) (- a b c))))))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (cond\n       [(and\
    \ (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n        (round (* 0.5 (- (+ a b\
    \ c) a b c)) 2)]\n       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define area\
    \ (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (and (number? area) (not (nan?\
    \ area)))\n         (round (* area 100))\n         -1)]\n    [else -1]))\n", " \
    \ (cond\n    [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (*\
    \ 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n  \
    \  [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (not (zero? area)) (not (negative? area)))\n           (round\
    \ (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan?\
    \ area)))\n           (round (* area 100))\n           -1))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n           \
    \            (/ (+ a b c) 2))\n                    (* a a)\n                 \
    \   (* b b)\n                    (* c c))))]\n       [else -1])]\n    [(and (>=\
    \ b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c)\
    \ 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+ a b\
    \ c) 2))\n                    (* a a)\n                    (* b b)\n         \
    \           (* c c))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n  \
    \   (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* a a)\n                    (* b b)\n                    (* c c))))]\n\
    \       [else -1])]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (let ([s\
    \ (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= b a)\
    \ (>= b c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [(and (>= c a) (>= c b))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>=\
    \ b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (-\
    \ s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n\
    \    [else -1]))\n", "  (cond\n    [(>= (+ a b) c) (* 0.5 (- c (+ a b))) ]\n \
    \   [(>= (+ a c) b) (* 0.5 (- b (+ a c))) ]\n    [(>= (+ b c) a) (* 0.5 (- a (+\
    \ b c))) ]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a c) b)\
    \ (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (*\
    \ c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt (* s\
    \ (- s a) (- s b) (- s c))))\n     (round (* area 100))]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n\
    \       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (>= (+ a b) c)\
    \ (>= (+ a c) b) (>= (+ b c) a))\n        (* 0.5 (- (+ a b c) a) (- (+ a b c)\
    \ b) (- (+ a b c) c))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n   \
    \ [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt\
    \ (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (if (and (> (+ a b)\
    \ c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5\
    \ (* a b c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (+\
    \ (* (- a (/ b 2)) (- a (/ b 2))) (* (- b c) (- b c))))]\n    [(and (>= b a) (>=\
    \ b c)) (sqrt (+ (* (- b (/ a 2)) (- b (/ a 2))) (* (- a c) (- a c))))]\n    [(and\
    \ (>= c a) (>= c b)) (sqrt (+ (* (- c (/ a 2)) (- c (/ a 2))) (* (- a b) (- a\
    \ b))))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n \
    \    (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (> area 0))\n           (round (*\
    \ area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0)\
    \ (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (*\
    \ s (- s a) (- s b) (- s c)))])\n       (round (* area 100) 2))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n\
    \       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (*\
    \ (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n\
    \           (> (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (- (+\
    \ a b c) a b c)) 2)\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (> area 0) (not (infinite? area)))\n          \
    \ (round (* area 100) 2)\n           -1))]\n    [else -1]))\n", "  (if (and (>\
    \ (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n      (round\
    \ (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a b)\
    \ (>= a c))\n     (define p (/ (+ a b c) 2))\n     (sqrt (* p (- p a) (- p b)\
    \ (- p c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n\
    \    [else -1]))\n", "  (cond\n    [(>= (+ a b) c)\n     (round (* 0.5 (* a b\
    \ (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (- (* a a) (* b b) (* c c)))]\n   \
    \ [(and (>= b a) (>= b c)) (sqrt (- (* b b) (* a a) (* c c)))]\n    [(and (>=\
    \ c a) (>= c b)) (sqrt (- (* c c) (* a a) (* b b)))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (round (* area 2) 2))]\n\
    \    [else -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n   \
    \        (> (+ b c) a))\n      (* (/ (+ a b c) 2)\n         (sqrt (- (* (/ (+\
    \ a b c) 2)\n                     (/ (+ a b c) 2))\n                   (* a a)\n\
    \                   (* b b)\n                   (* c c))))\n      -1))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n\
    \     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n  \
    \  [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round (* area 100))]\n   \
    \ [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (define s (/ (+\
    \ b c) 2.0))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [(and (>= b a) (>=\
    \ b c))\n     (define s (/ (+ a c) 2.0))\n     (sqrt (* s (- s a) (- s b) (- s\
    \ c)))]\n    [(and (>= c a) (>= c b))\n     (define s (/ (+ a b) 2.0))\n     (sqrt\
    \ (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (if (and (> a 0) (>\
    \ b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n \
    \         (round (* 0.5 (- (+ a b c) (* (- a b c) (- a b c) (- a b c)))) 2)\n\
    \          -1)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n\
    \       [(>= (+ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (/\
    \ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n                    (*\
    \ a a)\n                    (* b b)\n                    (* c c))))]\n       [else\
    \ -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n  \
    \      (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n          \
    \             (/ (+ a b c) 2))\n                    (* a a)\n                \
    \    (* b b)\n                    (* c c))))]\n       [else -1])]\n    [(and (>=\
    \ c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c)\
    \ 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+ a b\
    \ c) 2))\n                    (* a a)\n                    (* b b)\n         \
    \           (* c c))))]\n       [else -1])]))\n", "  (cond\n    [(and (>= a 0)\
    \ (>= b 0) (>= c 0))\n     (let*\n         ([s (/ (+ a b c) 2)]\n          [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(>= (+ a b) c)\n     (round (* 0.5 (* a b (sin (acos\
    \ (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (define\
    \ (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n\
    \         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt (* (- (* a a) (*\
    \ b b) (* c c)) (* a b c))))\n  (cond ((is-valid-triangle a b c)\n         (round\
    \ (* 100 (area a b c))))\n        (else -1)))\n", "  (cond\n    [(>= (+ a b) c)\n\
    \     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b))))))\
    \ 2)]\n    [else -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c)\
    \ a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n", "  (if (and (> (+ a b)\
    \ c) (> (+ a c) b) (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n           \
    \            (/ (+ a b c) 2))\n                    (* a a))))]\n       [else -1])]\n\
    \    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (*\
    \ (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                  \
    \     (/ (+ a b c) 2))\n                    (* b b))))]\n       [else -1])]\n\
    \    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (*\
    \ (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                  \
    \     (/ (+ a b c) 2))\n                    (* c c))))]\n       [else -1])]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n\
    \       [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n        (round (* 0.5\
    \ (* a b c) 2))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c)\
    \ (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5 (- (+ a b c) (- a b c))))\n\
    \          -1)\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (> area 0) (not (infinite? area)))\n          \
    \ (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (if (and (> a\
    \ 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n\
    \          (round (* 0.5 (- (+ a b c) (* (- a b c) (- a b c) (- a b c)))) 2)\n\
    \          -1)\n      -1))\n", "  (cond\n    [(>= (+ a b) c)\n     (round (* 0.5\
    \ (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+\
    \ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (- a (/ b 2)) (-\
    \ a (/ b 2)))\n                    (* (- a c) (- a c)))))\n        ]\n       [else\
    \ -1]\n       )]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c)\
    \ b)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (- b (/ a 2)) (- b (/\
    \ a 2)))\n                    (* (- b c) (- b c)))))\n        ]\n       [else\
    \ -1]\n       )]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b)\
    \ c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (- c (/ a 2)) (- c (/\
    \ a 2)))\n                    (* (- c b) (- c b)))))\n        ]\n       [else\
    \ -1]\n       )]\n    [else -1]\n    ))\n", "  (cond\n    [(and (> a 0) (> b 0)\
    \ (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (* s (- s a) (- s b) (- s\
    \ c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n  \
    \   (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (-\
    \ s c)))])\n       (if (number? area)\n           (round (* area 100) 2)\n   \
    \        -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n           (round\
    \ (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(>= (+ a\
    \ b) c)\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (*\
    \ 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>=\
    \ c 0))\n     (cond\n       [(and (>= (+ a b) c) (>= (+ a c) b) (>= (+ b c) a))\n\
    \        (round (* 0.5 (- (+ a b) c) (- (+ a c) b) (- (+ b c) a)))\n        ]\n\
    \       [else -1])\n     ]\n    [else -1]))\n", "  (define (is-valid-triangle\
    \ a b c)\n    (and\n     (&gt;= a b c)\n     (&gt; (+ a b) c)\n     (&gt; (+ a\
    \ c) b)\n     (&gt; (+ b c) a)))\n  (if (is-valid-triangle a b c)\n      (define\
    \ s (/ (+ a b c) 2))\n      (define area (sqrt (* s (- s a) (- s b) (- s c))))\n\
    \      (round (* area 2) 2)\n      -1))\n</code>\nI get the following error:\n\
    <code>application: not a procedure;\n expected a procedure that can be applied\
    \ to arguments\n  given: 3\n  arguments...: [none]\n</code>\nI'm not sure what\
    \ the problem is. I'm pretty sure that the <code>if</code> statement is correct.\n\
    \n\nA:\n\nThe problem is that you're using <code>define</code> inside the <code>if</code>\
    \ expression. The <code>if</code> expression expects a procedure as its second\
    \ argument, but you're using <code>define</code> instead.\nYou can fix this by\
    \ using <code>let</code> instead of <code>define</code> inside the <code>if</code>\
    \ expression:\n<code>(if (is-valid-triangle a b c)\n    (let ((s (/ (+ a b c)\
    \ 2))\n          (area (sqrt (* s (- s a) (- s b) (- s c)))))\n      (round (*\
    \ area 2) 2))\n    -1)\n</code>\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n           (round\
    \ (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos\
    \ (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (> (+ a b) c)\
    \ (> (+ a c) b) (> (+ b c) a))\n        (round (* 0.5 (- (+ a b c) (- a b c))))]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (> area 0) (not (infinite? area)))\n  \
    \         (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt\
    \ (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan?\
    \ area)))\n           (round (* area 100))\n           -1))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (+ (* (- a b) (- a b)) (* (- a c) (-\
    \ a c))))]\n    [(and (>= b a) (>= b c)) (sqrt (+ (* (- b a) (- b a)) (* (- b\
    \ c) (- b c))))]\n    [(and (>= c a) (>= c b)) (sqrt (+ (* (- c a) (- c a)) (*\
    \ (- c b) (- c b))))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0)\
    \ (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b)\
    \ (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c\
    \ 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s\
    \ c))))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n \
    \    (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n           (round\
    \ (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a 0) (>= b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s\
    \ (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0)\
    \ (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (*\
    \ s (- s a) (- s b) (- s c)))])\n       (if (positive? area)\n           (round\
    \ (* area 100) 2)\n           -1))]\n    [else -1]))\n", "  (if (and (> a 0) (>\
    \ b 0) (> c 0))\n      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n \
    \         (round (* 0.5 (sqrt (* (- (* a a) (* b b)) (* c c)))) 2)\n         \
    \ -1)\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (-\
    \ s c)))]\n    [else -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b\
    \ c) a))\n      (round (* 0.5 (* a (sqrt (- (* b b) (* a a))))))\n      -1))\n",
  "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n\
    \      (round (* 0.5 (* a b c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a 0)\
    \ (>= b 0) (>= c 0))\n     (cond\n       [(and (> (+ a b) c) (> (+ a c) b) (>\
    \ (+ b c) a))\n        (round (* 0.5 (- (+ a b c) (- a b c))))]\n       [else\
    \ -1])]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a c) b) (>\
    \ (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c\
    \ c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b\
    \ 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (-\
    \ s a) (- s b) (- s c)))])\n       (if (and (> area 0) (not (infinite? area)))\n\
    \           (round (* area 100) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a\
    \ b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b c) (>= b c a) (>= c a b))\n     (round (* 0.5 (- a (-\
    \ b c)) (- b (- c a)) (- c (- a b))))]\n    [else -1]))\n", "  (cond\n    [(or\
    \ (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b c) 2))]\n\
    \    [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+\
    \ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5 (- (+ a b c) (-\
    \ a b c))))\n          -1)\n      -1))\n", "  (cond\n    [(and (> (+ a b) c) (>\
    \ (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b c)) 2)]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\n         ([s (/ (+ a b\
    \ c) 2)]\n          [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and\
    \ (> area 0) (not (infinite? area)))\n           (round (* area 100))\n      \
    \     -1))]\n    [else -1]))\n", "  (cond\n    [(>= (+ a b) c)\n     (round (*\
    \ 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n  \
    \  [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define\
    \ s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n           \
    \            (/ (+ a b c) 2))\n                    (* a a)\n                 \
    \   (* b b)\n                    (* c c))))]\n       [else -1])]\n    [(and (>=\
    \ b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c)\
    \ 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+ a b\
    \ c) 2))\n                    (* a a)\n                    (* b b)\n         \
    \           (* c c))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n  \
    \   (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* a a)\n                    (* b b)\n                    (* c c))))]\n\
    \       [else -1])]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (> area 0) (not (infinite? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (if (and (> (+ a b) c) (> (+\
    \ a c) b) (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n", " \
    \ (cond\n    [(>= (+ a b) c) (* 0.5 (- a b c))]\n    [(>= (+ a c) b) (* 0.5 (-\
    \ a b c))]\n    [(>= (+ b c) a) (* 0.5 (- a b c))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (define s (/ (+ b c) 2.0))\n     (sqrt (*\
    \ s (- s a) (- s b) (- s c)))]\n    [(and (>= b a) (>= b c))\n     (define s (/\
    \ (+ a c) 2.0))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [(and (>= c a)\
    \ (>= c b))\n     (define s (/ (+ a b) 2.0))\n     (sqrt (* s (- s a) (- s b)\
    \ (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n           (round\
    \ (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a 0) (>= b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s\
    \ (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0)\
    \ (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt (*\
    \ s (- s a) (- s b) (- s c))))\n     (if (and (number? area) (not (nan? area)))\n\
    \         (round (* area 100))\n         -1)]\n    [else -1]))\n", "  (cond ((and\
    \ (> a 0) (> b 0) (> c 0))\n         (let ((s (/ (+ a b c) 2)))\n           (sqrt\
    \ (* s (- s a) (- s b) (- s c)))))\n        (else -1)))\n", "  (cond\n    [(and\
    \ (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (> (+ a b) c) (> (+ a\
    \ c) b) (> (+ b c) a))\n        (round (* 0.5 (* a b c) 2))]\n       [else -1])]\n\
    \    [else -1]))\n", "  (cond\n    [(>= (+ a b) c) (* 0.5 (sqrt (- (* a a) (*\
    \ b b) (* c c))))]\n    [else -1]))\n", "  (cond\n    [(>= (+ a b) c) (* 0.5 (-\
    \ c (+ a b))) ]\n    [(>= (+ a c) b) (* 0.5 (- b (+ a c))) ]\n    [(>= (+ b c)\
    \ a) (* 0.5 (- a (+ b c))) ]\n    [else -1]))\n", "  (define (is-valid-triangle\
    \ a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c)\
    \ a)))\n  (define (area a b c)\n    (sqrt (* (- (* a a) (* b b) (* c c)) (* a\
    \ b c))))\n  (if (is-valid-triangle a b c)\n      (round (* (area a b c) 100)\
    \ 2)\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s\
    \ (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+\
    \ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n     \
    \  (if (and (> area 0) (not (infinite? area)))\n           (round (* area 100)\
    \ 2)\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0)\
    \ (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s\
    \ a) (- s b) (- s c)))])\n       (round (* area 2) 2))]\n    [else -1]))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (>=\
    \ area 0) (not (infinite? area)))\n           (round (* area 100) 2)\n       \
    \    -1))]\n    [else -1]))\n", "  (define (is-valid-triangle a b c)\n    (and\
    \ (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area\
    \ a b c)\n    (* (/ (sqrt (+ (* (- a (/ b 2)) (- a (/ b 2))) (* (- b (/ c 2))\
    \ (- b (/ c 2))))) 2) c))\n  (if (is-valid-triangle a b c)\n      (area a b c)\n\
    \      -1))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b)\
    \ c) (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5 (sqrt (- (* (+ a b\
    \ c) (* a b c)) (* a a) (* b b) (* c c)))) 2)\n          -1)\n      -1))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\n\
    \         ([s (/ (+ a b c) 2)]\n          [area (sqrt (* s (- s a) (- s b) (-\
    \ s c)))])\n       (if (and (>= area 0) (not (nan? area)))\n           (round\
    \ (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s\
    \ a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>=\
    \ a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/ (- (+ a b c) a) 2)\
    \ (sqrt (- (* (- (+ a b c) a) (- (+ a b c) a)) (* a a))))]\n       [else -1])]\n\
    \    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (*\
    \ (/ (- (+ a b c) b) 2) (sqrt (- (* (- (+ a b c) b) (- (+ a b c) b)) (* b b))))]\n\
    \       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+\
    \ a b) c)\n        (* (/ (- (+ a b c) c) 2) (sqrt (- (* (- (+ a b c) c) (- (+\
    \ a b c) c)) (* c c))))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n \
    \   [(and (> (+ a b) c)\n          (> (+ a c) b)\n          (> (+ b c) a))\n \
    \    (round (* (/ (sqrt (+ (* (- a (/ (+ a b c) 2)) (- a (/ (+ a b c) 2)))\n \
    \                   (* (- b (/ (+ a b c) 2)) (- b (/ (+ a b c) 2)))\n        \
    \            (* (- c (/ (+ a b c) 2)) (- c (/ (+ a b c) 2)))))\n             \
    \  2)\n              100))]\n    [else -1]))\n", "  (cond [(and (> (+ a b) c)\
    \ (> (+ a c) b) (> (+ b c) a))\n         (round (* 0.5 (* a b c)) 2)]\n      \
    \  [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s\
    \ (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else\
    \ -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round\
    \ (* 0.5 (- (+ a b c) (* 2 (max (max a b) c)))))\n      -1))\n", "  (cond\n  \
    \  [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt\
    \ (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (>= (+ a b) c) (>= (+ a c)\
    \ b) (>= (+ b c) a))\n        (round (* 0.5 (- (+ a b) c) (- (+ a c) b) (- (+\
    \ b c) a)))\n        ]\n       [else -1])\n     ]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (cond\n       [(> (+ b c) a)\n        (* (/\
    \ (+ a b c) 2)\n           (sqrt (- (* a a)\n                    (/ (* (+ (* b\
    \ b) (* c c)) (- a a)) 2))))]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n\
    \     (cond\n       [(> (+ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* b b)\n                    (/ (* (+ (* a a) (* c c)) (- b b)) 2))))]\n\
    \       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(> (+ a\
    \ b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* c c)\n           \
    \         (/ (* (+ (* a a) (* b b)) (- c c)) 2))))]\n       [else -1])]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (define s (/ (+ a b c) 2))\n     (sqrt\
    \ (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b) (>= a c))\n     (let ([s (/ (+ a b c) 2.0)])\n       (* (- s a) (- s b)\
    \ (- s c)))]\n    [(and (>= b a) (>= b c))\n     (let ([s (/ (+ a b c) 2.0)])\n\
    \       (* (- s a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c b))\n     (let\
    \ ([s (/ (+ a b c) 2.0)])\n       (* (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n\
    \     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (and (number?\
    \ area) (not (nan? area)))\n         (round (* area 100))\n         -1)]\n   \
    \ [else -1]))\n", "  (cond\n    [(and (>= (+ a b) c) (>= (+ a c) b) (>= (+ b c)\
    \ a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (*\
    \ 2 a b)))))) 2)]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n           (>\
    \ (+ a c) b)\n           (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n \
    \     -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/\
    \ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n\
    \       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (define s (/ (+ a b c) 2))\n     (sqrt (*\
    \ s (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (>= a\
    \ b) (>= a c))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s\
    \ b) (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c\
    \ 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (-\
    \ s b) (- s c)))])\n       (if (and (> area 0) (not (infinite? area)))\n     \
    \      (round (* area 100))\n           -1))]\n    [else -1]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
