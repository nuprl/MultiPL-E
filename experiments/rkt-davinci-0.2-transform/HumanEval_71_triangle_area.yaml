name: HumanEval_71_triangle_area
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ the area of\n;; the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n\
  ;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define\
  \ (triangle_area a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ["  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round\
    \ (* 0.5 (* a b c)))\n      -1))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a\
    \ c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (*\
    \ b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (round (* area 100) 2))]\n    [else\
    \ -1]))\n", "  (cond\n    [(< a 0) -1]\n    [(< b 0) -1]\n    [(< c 0) -1]\n \
    \   [(> (+ a b) c) (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c\
    \ c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b\
    \ 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b)\
    \ (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (round (* area 100)))]\n    [else -1]))\n", "  (cond\n    [(>= (+ a b)\
    \ c)\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2\
    \ a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> (+ a b) c) (> (+ a\
    \ c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (*\
    \ b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a b) (>= a c))\n     (define s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (-\
    \ s b) (- s c)))]\n    [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n\
    \      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (*\
    \ 0.5 (- (+ a b c) (* (- a b c) (- a b c) (- a b c)))) 2)\n          -1)\n   \
    \   -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+\
    \ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round\
    \ (* area 100))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>=\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n   \
    \        (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (>= (+ a b) c)\
    \ (>= (+ a c) b) (>= (+ b c) a))\n        (round (* 0.5 (* a b c)) 2)]\n     \
    \  [else -1])]\n    [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n   \
    \   (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5\
    \ (- (+ a b c) (- a b c))))\n          -1)\n      -1))\n", "  (cond\n    [(and\
    \ (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+\
    \ a b c) 2))\n                    (* a a)\n                    (* b b)\n     \
    \               (* c c))))]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n\
    \     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* a a)\n                    (* b b)\n                    (* c c))))]\n\
    \       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+\
    \ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n\
    \                       (/ (+ a b c) 2))\n                    (* a a)\n      \
    \              (* b b)\n                    (* c c))))]\n       [else -1])]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (define s (/\
    \ (+ a b c) 2))\n     (sqrt (* (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n   \
    \     (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n           \
    \            (/ (+ a b c) 2))\n                     (* a a)\n                \
    \     (* b b)\n                     (* c c))))]\n       [else -1])]\n    [(and\
    \ (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+\
    \ a b c) 2))\n                     (* a a)\n                     (* b b)\n   \
    \                  (* c c))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n\
    \     (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \          (* a a)\n                     (* b b)\n                     (* c c))))]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (> a b) (> a c))\n           (round (*\
    \ 2 area))\n           (round (* 2 area))))]\n    [else -1]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
