name: HumanEval_115_max_fill
language: rkt
prompt: "#lang racket\n\n;; You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n;; and each 1 in a row represents a single unit of water.\n;;\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n;; and all buckets have the same capacity.\n;; Your task is to use the buckets\
  \ to empty the wells.\n;; Output the number of times you need to lower the buckets.\n\
  ;; Example 1:\n;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1\
  \ 1)) 1)\n;; 6\n;; Example 2:\n;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0\
  \ 0) (list 1 1 1 1) (list 0 1 1 1)) 2)\n;; 5\n;; Example 3:\n;; >>> (max_fill (list\
  \ (list 0 0 0) (list 0 0 0)) 5)\n;; 0\n;; Constraints:\n;; * all wells have the\
  \ same length\n;; * 1 <= grid.length <= 10^2\n;; * 1 <= grid[:,1].length <= 10^2\n\
  ;; * grid[i][j] -> 0 | 1\n;; * 1 <= capacity <= 10\n(define (max_fill grid capacity)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n\
  \    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1))\
  \ 1) 6)\n    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list\
  \ 1 1 1 1) (list 0 1 1 1)) 2) 5)\n    (check-equal? (candidate (list (list 0 0 0)\
  \ (list 0 0 0)) 5) 0)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1\
  \ 1 1 1)) 2) 4)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1))\
  \ 9) 2)\n))\n\n(test-humaneval)"
completions: ["  (define (fill-row row)\n    (let loop ([i 0] [count 0])\n      (cond\
    \ [(= i (length row)) count]\n            [(= (vector-ref row i) 1)\n        \
    \     (loop (+ i capacity) (+ count 1))]\n            [else (loop (+ i 1) count)])))\n\
    \  (apply + (map fill-row grid)))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let ((row (car grid))\n           \
    \   (rest (cdr grid)))\n          (if (null? row)\n              (max-fill-helper\
    \ rest capacity)\n              (let ((col (car row))\n                    (rest-row\
    \ (cdr row)))\n                (if (null? col)\n                    (max-fill-helper\
    \ rest capacity)\n                    (if (= col 1)\n                        (+\
    \ 1 (max-fill-helper rest capacity))\n                        (max-fill-helper\
    \ rest capacity))))))))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [row-len (length row)]\n               [row-sum (apply + row)]\n\
    \               [row-max (apply max row)]\n               [row-min (apply min\
    \ row)]\n               [row-max-count (count row-max row)]\n               [row-min-count\
    \ (count row-min row)]\n               [row-max-count-min (min row-max-count capacity)]\n\
    \               [row-min-count-min (min row-min-count capacity)]\n           \
    \    [row-max-count-min-max (max row-max-count-min row-min-count-min)]\n     \
    \          [row-max-count-min-max-min (min row-max-count-min-max row-len)])\n\
    \          (+ row-max-count-min-max-min\n             (max_fill-helper (cdr grid)\
    \ capacity)))))\n  (max_fill-helper grid capacity))\n", "  (let loop ((grid grid)\
    \ (capacity capacity) (count 0))\n    (cond ((null? grid) count)\n          ((null?\
    \ (car grid)) (loop (cdr grid) capacity count))\n          ((<= capacity 0) (loop\
    \ (cdr grid) capacity count))\n          ((null? (cdr grid)) (loop (cdr grid)\
    \ capacity (+ count capacity)))\n          (else (loop (cdr grid) (- capacity\
    \ (car grid)) (+ count capacity))))))\n", "  (let ([max-row (apply max (map (lambda\
    \ (row) (apply + row)) grid))])\n    (if (zero? max-row)\n        0\n        (let\
    \ ([max-col (apply max (map (lambda (col) (apply + col)) (transpose grid)))])\n\
    \          (if (zero? max-col)\n              0\n              (+ (* capacity\
    \ max-row) (* capacity max-col)))))))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper-helper (rest grid)\
    \ capacity)]\n        [(= capacity 0) (max-fill-helper-helper (rest grid) capacity)]\n\
    \        [(= (first (first grid)) 0) (max-fill-helper-helper (rest grid) capacity)]\n\
    \        [else (max-fill-helper-helper (rest grid) (- capacity 1))]))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-inner grid capacity)\n      (define\
    \ (max-fill-helper-inner-inner grid capacity)\n        (define (max-fill-helper-inner-inner-inner\
    \ grid capacity)\n          (define (max-fill-helper-inner-inner-inner-inner grid\
    \ capacity)\n            (define (max-fill-helper-inner-inner-inner-inner-inner\
    \ grid capacity)\n              (define (max-fill-helper-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                  (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                    (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                      (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                        (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                          (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                            (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                              (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                                (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                                  (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n      ]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill_helper (rest\
    \ grid) capacity)]\n      [else\n       (define (fill_row row capacity)\n    \
    \     (cond\n           [(empty? row) 0]\n           [(empty? (rest row)) (first\
    \ row)]\n           [else\n            (define (fill_bucket bucket capacity)\n\
    \              (cond\n                [(= capacity 0) 0]\n                [(=\
    \ bucket 0) (fill_bucket (first (rest row)) capacity)]\n                [else\n\
    \                 (add1 (fill_bucket (first (rest row)) (sub1 capacity)))]))\n\
    \            (add1 (fill_bucket (first row) capacity))]))\n       (add1 (fill_row\
    \ (first grid) capacity))]))\n  (max_fill_helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else (max (max-fill-helper\
    \ (rest grid) capacity)\n                 (max-fill-helper (rest grid) (max 0\
    \ (- capacity (first (first grid)))))\n                 (max-fill-helper (rest\
    \ grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (", "  (define (max_fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (let ([row (first grid)]\n     \
    \        [rest (rest grid)])\n         (let ([filled (fill-row row capacity)])\n\
    \           (+ filled (max_fill-helper rest capacity))))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n\
    \    (cond [(empty? row) 0]\n          [(= (first row) 1) capacity]\n        \
    \  [else 0]))\n  (define (fill-grid grid)\n    (cond [(empty? grid) 0]\n     \
    \     [else (+ (fill-row (first grid)) (fill-grid (rest grid)))]))\n  (fill-grid\
    \ grid))\n", "  (define (fill-row row)\n    (let loop ([i 0] [count 0])\n    \
    \  (cond\n        [(= i (length row)) count]\n        [(= (vector-ref row i) 1)\n\
    \         (loop (+ i capacity) (+ count 1))]\n        [else (loop (+ i 1) count)])))\n\
    \  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (length grid)) count]\n\
    \      [else (loop (+ i 1) (+ count (fill-row (vector-ref grid i))))])))\n", " \
    \ (define (max_fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n     \
    \     [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n       \
    \   [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n          [else (max\
    \ (max_fill-helper (rest grid) capacity)\n                     (max_fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n           ]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [else (+ (max-fill-helper (rest grid) capacity)\n                   (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [else (+\
    \ (max-fill-helper (rest grid) capacity)\n                   (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\n\
    \       (define (helper grid capacity)\n         (cond\n           [(empty? grid)\
    \ capacity]\n           [(empty? (first grid)) (helper (rest grid) capacity)]\n\
    \           [(= (first (first grid)) 1) (helper (rest grid) (- capacity 1))]\n\
    \           [else (helper (rest grid) capacity)]))\n       (+ (helper (first grid)\
    \ capacity)\n          (max_fill-helper (rest grid) capacity))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (fill-row row capacity)\n      (define (fill-row-helper row capacity)\n    \
    \    (cond [(empty? row) capacity]\n              [(= capacity 0) capacity]\n\
    \              [(= capacity 1) capacity]\n              [(= (first row) 1) (fill-row-helper\
    \ (rest row) (- capacity 1))]\n              [else (fill-row-helper (rest row)\
    \ capacity)]))\n      (fill-row-helper row capacity))\n    (cond [(empty? grid)\
    \ 0]\n          [else (+ (fill-row (first grid) capacity)\n                  \
    \ (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill-row row capacity)\n    (cond [(empty? row) capacity]\n        \
    \  [(= (first row) 1) (fill-row (rest row) (add1 capacity))]\n          [else\
    \ (fill-row (rest row) capacity)]))\n  (define (fill-grid grid capacity)\n   \
    \ (cond [(empty? grid) capacity]\n          [else (fill-grid (rest grid) (fill-row\
    \ (first grid) capacity))]))\n  (fill-grid grid capacity))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
