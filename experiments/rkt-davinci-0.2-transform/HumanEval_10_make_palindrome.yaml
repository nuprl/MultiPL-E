name: HumanEval_10_make_palindrome
language: rkt
prompt: "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied\
  \ string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied\
  \ string that is a palindrome.\n;; - Append to the end of the string reverse of\
  \ a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome\
  \ \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome\
  \ \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"x\") \"\
  x\")\n    (check-equal? (candidate \"xyz\") \"xyzyx\")\n    (check-equal? (candidate\
  \ \"xyx\") \"xyx\")\n    (check-equal? (candidate \"jerry\") \"jerryrrej\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (reverse string)\n    (if (empty? string)\n        \"\"\n\
    \        (string-append (reverse (substring string 1)) (substring string 0 1))))\n\
    \  (define (find-longest-palindrome string)\n    (define (find-longest-palindrome-iter\
    \ string i)\n      (if (= i 0)\n          \"\"\n          (if (equal? (substring\
    \ string 0 i) (reverse (substring string i)))\n              (substring string\
    \ 0 i)\n              (find-longest-palindrome-iter string (- i 1)))))\n    (find-longest-palindrome-iter\
    \ string (string-length string)))\n  (define (find-prefix string)\n    (substring\
    \ string 0 (- (string-length string) (string-length (find-longest-palindrome string)))))\n\
    \  (string-append string (reverse (find-prefix string))))\n", "  (define (reverse\
    \ string)\n    (if (empty? string)\n        \"\"\n        (string-append (reverse\
    \ (substring string 1)) (substring string 0 1))))\n  (define (is_palindrome string)\n\
    \    (if (empty? string)\n        #t\n        (and (equal? (substring string 0\
    \ 1) (substring string (- (string-length string) 1) (string-length string)))\n\
    \             (is_palindrome (substring string 1 (- (string-length string) 1))))))\n\
    \  (define (find_palindrome string)\n    (if (is_palindrome string)\n        string\n\
    \        (find_palindrome (substring string 0 (- (string-length string) 1)))))\n\
    \  (string-append string (reverse (substring string 0 (- (string-length string)\
    \ (string-length (find_palindrome string)))))))\n", "  (define (reverse string)\n\
    \    (if (string=? string \"\")\n        \"\"\n        (string-append (reverse\
    \ (substring string 1)) (substring string 0 1))))\n  (define (find-longest-palindrome-suffix\
    \ string)\n    (define (find-longest-palindrome-suffix-iter string suffix)\n \
    \     (if (string=? (reverse suffix) string)\n          suffix\n          (find-longest-palindrome-suffix-iter\
    \ string (string-append suffix (substring string 0 1)))))\n    (find-longest-palindrome-suffix-iter\
    \ string \"\"))\n  (string-append string (reverse (substring string 0 (- (string-length\
    \ string) (string-length (find-longest-palindrome-suffix string)))))))\n", " \
    \ (define (reverse-string string)\n    (if (string=? string \"\")\n        \"\"\
    \n        (string-append (reverse-string (substring string 1)) (substring string\
    \ 0 1))))\n  (define (find-longest-palindrome-suffix string)\n    (define (is-palindrome?\
    \ string)\n      (string=? string (reverse-string string)))\n    (if (is-palindrome?\
    \ string)\n        string\n        (find-longest-palindrome-suffix (substring\
    \ string 0 (- (string-length string) 1)))))\n  (string-append string (reverse-string\
    \ (substring string 0 (- (string-length string) (string-length (find-longest-palindrome-suffix\
    \ string)))))))\n", "  (define (reverse-string string)\n    (define (reverse-string-helper\
    \ string reversed-string)\n      (if (string=? string \"\")\n          reversed-string\n\
    \          (reverse-string-helper (substring string 1) (string-append (substring\
    \ string 0 1) reversed-string))))\n    (reverse-string-helper string \"\"))\n\
    \  (define (find-longest-palindrome-suffix string)\n    (define (find-longest-palindrome-suffix-helper\
    \ string suffix)\n      (if (string=? (reverse-string suffix) suffix)\n      \
    \    suffix\n          (find-longest-palindrome-suffix-helper string (substring\
    \ suffix 1))))\n    (find-longest-palindrome-suffix-helper string string))\n \
    \ (string-append string (reverse-string (substring string 0 (- (string-length\
    \ string) (string-length (find-longest-palindrome-suffix string)))))))\n", " \
    \ (define (make_palindrome-helper string start end)\n    (cond ((= start end)\
    \ string)\n          ((= (string-ref string start) (string-ref string end))\n\
    \           (make_palindrome-helper string (+ start 1) (- end 1)))\n         \
    \ (else (string-append string (string-reverse (substring string 0 start))))))\n\
    \  (make_palindrome-helper string 0 (- (string-length string) 1)))\n", "  (define\
    \ (reverse string)\n    (if (string=? string \"\")\n        \"\"\n        (string-append\
    \ (reverse (substring string 1)) (substring string 0 1))))\n  (define (longest_palindrome_suffix\
    \ string)\n    (define (palindrome_suffix? string)\n      (if (string=? string\
    \ \"\")\n          #t\n          (and (string=? (substring string 0 1) (substring\
    \ string (- (string-length string) 1)))\n               (palindrome_suffix? (substring\
    \ string 1 (- (string-length string) 1))))))\n    (if (palindrome_suffix? string)\n\
    \        string\n        (longest_palindrome_suffix (substring string 0 (- (string-length\
    \ string) 1)))))\n  (string-append string (reverse (substring string 0 (- (string-length\
    \ string) (string-length (longest_palindrome_suffix string)))))))\n", "  (define\
    \ (is_palindrome? string)\n    (define (iter i j)\n      (cond\n        [(> i\
    \ j) #t]\n        [(not (equal? (string-ref string i) (string-ref string j)))\
    \ #f]\n        [else (iter (+ i 1) (- j 1))]))\n    (iter 0 (- (string-length\
    \ string) 1)))\n  (define (find-longest-palindrome-suffix string)\n    (define\
    \ (iter i)\n      (cond\n        [(>= i (string-length string)) (string-length\
    \ string)]\n        [(is_palindrome? (substring string i (string-length string)))\
    \ i]\n        [else (iter (+ i 1))]))\n    (iter 0))\n  (define (reverse-string\
    \ string)\n    (define (iter i)\n      (cond\n        [(>= i (string-length string))\
    \ \"\"]\n        [else (string-append (string (string-ref string i)) (iter (+\
    \ i 1)))]))\n    (iter 0))\n  (string-append string (reverse-string (substring\
    \ string 0 (- (find-longest-palindrome-suffix string) 1)))))\n", "  (define (reverse\
    \ string)\n    (let loop ([string string] [accumulator '()])\n      (if (null?\
    \ string)\n          accumulator\n          (loop (cdr string) (cons (car string)\
    \ accumulator)))))\n  (define (is_palindrome string)\n    (define (is_palindrome_helper\
    \ string1 string2)\n      (if (null? string1)\n          #t\n          (if (null?\
    \ string2)\n              #f\n              (if (equal? (car string1) (car string2))\n\
    \                  (is_palindrome_helper (cdr string1) (cdr string2))\n      \
    \            #f))))\n    (is_palindrome_helper string (reverse string)))\n  (define\
    \ (find_longest_palindrome_suffix string)\n    (let loop ([string string] [accumulator\
    \ '()])\n      (if (is_palindrome string)\n          (append accumulator string)\n\
    \          (loop (cdr string) (cons (car string) accumulator)))))\n  (append string\
    \ (reverse (find_longest_palindrome_suffix string))))\n", "  (define (make_palindrome-helper\
    \ string suffix)\n    (if (string=? string suffix)\n        string\n        (make_palindrome-helper\
    \ (substring string 0 (- (string-length string) 1))\n                        \
    \        (substring string (- (string-length string) (string-length suffix)) (string-length\
    \ string)))))\n  (string-append string (string-reverse (substring string 0 (-\
    \ (string-length string) (string-length (make_palindrome-helper string \"\")))))))\n",
  "  (define (reverse-string string)\n    (if (string=? string \"\")\n        \"\"\
    \n        (string-append (reverse-string (substring string 1)) (substring string\
    \ 0 1))))\n  (define (find-palindrome-suffix string)\n    (if (string=? string\
    \ \"\")\n        \"\"\n        (if (string=? (reverse-string string) string)\n\
    \            string\n            (find-palindrome-suffix (substring string 0 -1)))))\n\
    \  (string-append string (reverse-string (substring string 0 (string-length (find-palindrome-suffix\
    \ string))))))\n", "  (define (find-longest-palindrome-suffix string)\n    (define\
    \ (is-palindrome? string)\n      (define (is-palindrome-helper? string start end)\n\
    \        (cond\n          [(> start end) #t]\n          [(char=? (string-ref string\
    \ start) (string-ref string end))\n           (is-palindrome-helper? string (+\
    \ start 1) (- end 1))]\n          [else #f]))\n    (is-palindrome-helper? string\
    \ 0 (- (string-length string) 1)))\n  (define (find-longest-palindrome-prefix\
    \ string)\n    (define (is-palindrome? string)\n      (define (is-palindrome-helper?\
    \ string start end)\n        (cond\n          [(> start end) #t]\n          [(char=?\
    \ (string-ref string start) (string-ref string end))\n           (is-palindrome-helper?\
    \ string (+ start 1) (- end 1))]\n          [else #f]))\n    (is-palindrome-helper?\
    \ string 0 (- (string-length string) 1)))\n  (define (find-longest-palindrome-prefix-length\
    \ string)\n    (define (find-longest-palindrome-prefix-length-helper string start\
    \ end)\n      (cond\n        [(> start end) (- end start)]\n        [(char=? (string-ref\
    \ string start) (string-ref string end))\n         (find-longest-palindrome-prefix-length-helper\
    \ string (+ start 1) (- end 1))]\n        [else (find-longest-palindrome-prefix-length-helper\
    \ string (+ start 1) end)]))\n    (find-longest-palindrome-prefix-length-helper\
    \ string 0 (- (string-length string) 1)))\n  (define (reverse-string string)\n\
    \    (define (reverse-string-helper string start end)\n      (cond\n        [(>\
    \ start end) string]\n        [else (reverse-string-helper (string-append (string-append\
    \ (substring string 0 start)\n                                               \
    \                    (string-append (string #\\a", "  (define (reverse string)\n\
    \    (if (string=? string \"\")\n        \"\"\n        (string-append (reverse\
    \ (substring string 1)) (substring string 0 1))))\n  (define (is_palindrome string)\n\
    \    (string=? string (reverse string)))\n  (define (find_palindrome string)\n\
    \    (if (is_palindrome string)\n        string\n        (find_palindrome (substring\
    \ string 0 (- (string-length string) 1)))))\n  (string-append string (reverse\
    \ (substring string 0 (- (string-length string) (string-length (find_palindrome\
    \ string)))))))\n", "  (define (reverse string)\n    (if (empty? string)\n   \
    \     \"\"\n        (string-append (reverse (substring string 1)) (substring string\
    \ 0 1))))\n  (define (is_palindrome string)\n    (if (empty? string)\n       \
    \ #t\n        (and (char=? (string-ref string 0) (string-ref string (- (string-length\
    \ string) 1)))\n             (is_palindrome (substring string 1 (- (string-length\
    \ string) 1))))))\n  (define (longest_palindrome_suffix string)\n    (if (is_palindrome\
    \ string)\n        string\n        (longest_palindrome_suffix (substring string\
    \ 1))))\n  (if (empty? string)\n      \"\"\n      (string-append string (reverse\
    \ (substring string 0 (- (string-length string) (string-length (longest_palindrome_suffix\
    \ string))))))))\n", "  (define (reverse string)\n    (if (null? string)\n   \
    \     \"\"\n        (string-append (reverse (substring string 1)) (substring string\
    \ 0 1))))\n  (define (longest_palindrome_suffix string)\n    (define (palindrome?\
    \ string)\n      (if (or (null? string) (null? (cdr string)))\n          #t\n\
    \          (and (char=? (car string) (car (last string))) (palindrome? (substring\
    \ string 1 (- (string-length string) 1))))))\n    (if (palindrome? string)\n \
    \       string\n        (longest_palindrome_suffix (substring string 1))))\n \
    \ (string-append string (reverse (substring string 0 (- (string-length string)\
    \ (string-length (longest_palindrome_suffix string)))))))\n", "  (define (is_palindrome?\
    \ string)\n    (define (is_palindrome?-iter string left right)\n      (cond ((=\
    \ left right) #t)\n            ((= (string-ref string left) (string-ref string\
    \ right))\n             (is_palindrome?-iter string (+ left 1) (- right 1)))\n\
    \            (else #f)))\n    (is_palindrome?-iter string 0 (- (string-length\
    \ string) 1)))\n  (define (find-longest-palindrome-postfix string)\n    (define\
    \ (find-longest-palindrome-postfix-iter string left right)\n      (cond ((= left\
    \ right) (substring string left right))\n            ((is_palindrome? (substring\
    \ string left right))\n             (find-longest-palindrome-postfix-iter string\
    \ left (- right 1)))\n            (else (find-longest-palindrome-postfix-iter\
    \ string (+ left 1) right))))\n    (find-longest-palindrome-postfix-iter string\
    \ 0 (- (string-length string) 1)))\n  (string-append string (string-reverse (substring\
    \ string 0 (- (string-length string) (string-length (find-longest-palindrome-postfix\
    \ string)))))))\n", "  (define (is_palindrome? string)\n    (define (is_palindrome?-helper\
    \ string start end)\n      (if (>= start end)\n          #t\n          (if (char=?\
    \ (string-ref string start) (string-ref string end))\n              (is_palindrome?-helper\
    \ string (+ start 1) (- end 1))\n              #f)))\n    (is_palindrome?-helper\
    \ string 0 (- (string-length string) 1)))\n  (define (find-longest-palindrome-suffix\
    \ string)\n    (define (find-longest-palindrome-suffix-helper string start end)\n\
    \      (if (is_palindrome? (substring string start end))\n          (substring\
    \ string start end)\n          (find-longest-palindrome-suffix-helper string start\
    \ (- end 1))))\n    (find-longest-palindrome-suffix-helper string 0 (- (string-length\
    \ string) 1)))\n  (define (reverse string)\n    (define (reverse-helper string\
    \ start end)\n      (if (>= start end)\n          string\n          (string-set!\
    \ string start (string-ref string end))\n          (string-set! string end (string-ref\
    \ string start))\n          (reverse-helper string (+ start 1) (- end 1))))\n\
    \    (reverse-helper string 0 (- (string-length string) 1)))\n  (string-append\
    \ string (reverse (substring string 0 (- (string-length string) (string-length\
    \ (find-longest-palindrome-suffix string)))))))\n", "  (define (reverse-string\
    \ string)\n    (if (string=? string \"\")\n        \"\"\n        (string-append\
    \ (reverse-string (substring string 1)) (substring string 0 1))))\n  (define (find-longest-palindrome-suffix\
    \ string)\n    (define (is-palindrome? string)\n      (string=? string (reverse-string\
    \ string)))\n    (if (is-palindrome? string)\n        string\n        (find-longest-palindrome-suffix\
    \ (substring string 0 (- (string-length string) 1)))))\n  (string-append string\
    \ (reverse-string (substring string 0 (- (string-length string) (string-length\
    \ (find-longest-palindrome-suffix string)))))))\n", "  (define (reverse string)\n\
    \    (if (null? string)\n        \"\"\n        (string-append (reverse (substring\
    \ string 1)) (substring string 0 1))))\n  (define (is_palindrome string)\n   \
    \ (if (null? string)\n        #t\n        (if (equal? (substring string 0 1) (substring\
    \ string (- (string-length string) 1) (string-length string)))\n            (is_palindrome\
    \ (substring string 1 (- (string-length string) 1)))\n            #f)))\n  (define\
    \ (find_palindrome_suffix string)\n    (if (is_palindrome string)\n        string\n\
    \        (find_palindrome_suffix (substring string 1))))\n  (string-append string\
    \ (reverse (substring string 0 (- (string-length string) (string-length (find_palindrome_suffix\
    \ string)))))))\n", "  (define (reverse string)\n    (if (empty? string)\n   \
    \     \"\"\n        (string-append (reverse (substring string 1)) (substring string\
    \ 0 1))))\n  (define (is_palindrome string)\n    (if (empty? string)\n       \
    \ #t\n        (and (equal? (substring string 0 1) (substring string (- (string-length\
    \ string) 1) (string-length string)))\n             (is_palindrome (substring\
    \ string 1 (- (string-length string) 1))))))\n  (define (find_longest_palindrome_suffix\
    \ string)\n    (if (is_palindrome string)\n        string\n        (find_longest_palindrome_suffix\
    \ (substring string 1))))\n  (string-append string (reverse (substring string\
    \ 0 (- (string-length string) (string-length (find_longest_palindrome_suffix string)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
