name: HumanEval_122_add_elements
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty array of integers arr and an integer\
  \ k, return\n;; the sum of the elements with at most two digits from the first k\
  \ elements of arr.\n;; Example:\n;; >>> (add_elements (list 111 21 3 4000 5 6 7\
  \ 8 9) 4)\n;; 24\n;; Constraints:\n;; 1. 1 <= len(arr) <= 100\n;; 2. 1 <= k <= len(arr)\n\
  (define (add_elements arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n\
  \    (check-equal? (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4)\n    (check-equal?\
  \ (candidate (list 111 121 3 4000 5 6) 2) 0)\n    (check-equal? (candidate (list\
  \ 11 21 3 90 5 6 7 8 9) 4) 125)\n    (check-equal? (candidate (list 111 21 3 4000\
  \ 5 6 7 8 9) 4) 24)\n    (check-equal? (candidate (list 1) 1) 1)\n))\n\n(test-humaneval)"
completions: ["  (define (add_elements_iter arr k acc)\n    (cond [(empty? arr) acc]\n\
    \          [(> k 0) (add_elements_iter (rest arr) (- k 1) (+ acc (first arr)))]\n\
    \          [else acc]))\n  (add_elements_iter arr k 0))\n", "  (define (add_elements_iter\
    \ arr k acc)\n    (cond\n      [(empty? arr) acc]\n      [(> k 0)\n       (define\
    \ num (first arr))\n       (cond\n         [(< num 10) (add_elements_iter (rest\
    \ arr) (- k 1) (+ acc num))]\n         [(< num 100) (add_elements_iter (rest arr)\
    \ (- k 1) (+ acc num))]\n         [else (add_elements_iter (rest arr) (- k 1)\
    \ acc)])]\n      [else acc]))\n  (add_elements_iter arr k 0))\n", "  (define (add_elements_iter\
    \ arr k sum)\n    (cond [(zero? k) sum]\n          [(< 10 (car arr)) (add_elements_iter\
    \ (cdr arr) (- k 1) (+ sum (car arr)))]\n          [(< 100 (car arr)) (add_elements_iter\
    \ (cdr arr) (- k 1) (+ sum (car arr)))]\n          [else (add_elements_iter (cdr\
    \ arr) (- k 1) sum)]))\n  (add_elements_iter arr k 0))\n", "  (define (add_elements-iter\
    \ arr k sum)\n    (cond [(empty? arr) sum]\n          [(> (length (number->string\
    \ (first arr))) 2) (add_elements-iter (rest arr) k sum)]\n          [else (add_elements-iter\
    \ (rest arr) k (+ sum (first arr)))]))\n  (add_elements-iter arr k 0))\n", " \
    \ (define (add_elements-iter arr k sum)\n    (cond [(= k 0) sum]\n          [(<\
    \ (length (number->string (car arr))) 3)\n           (add_elements-iter (cdr arr)\
    \ (- k 1) (+ sum (car arr)))]\n          [else (add_elements-iter (cdr arr) (-\
    \ k 1) sum)]))\n  (add_elements-iter arr k 0))\n", "  (define (add_elements-iter\
    \ arr k sum)\n    (cond [(empty? arr) sum]\n          [(or (= (length (number->string\
    \ (first arr))) 1)\n               (= (length (number->string (first arr))) 2))\n\
    \           (add_elements-iter (rest arr) (sub1 k) (+ sum (first arr)))]\n   \
    \       [else (add_elements-iter (rest arr) (sub1 k) sum)]))\n  (add_elements-iter\
    \ arr k 0))\n", "  (define (add_elements-iter arr k acc)\n    (cond\n      [(empty?\
    \ arr) acc]\n      [(<= k 0) acc]\n      [(<= (length (number->string (first arr)))\
    \ 2)\n       (add_elements-iter (rest arr) (- k 1) (+ acc (first arr)))]\n   \
    \   [else (add_elements-iter (rest arr) (- k 1) acc)]))\n  (add_elements-iter\
    \ arr k 0))\n", "  (define (add_elements-iter arr k sum)\n    (cond\n      [(=\
    \ k 0) sum]\n      [(<= (length (number->string (car arr))) 2)\n       (add_elements-iter\
    \ (cdr arr) (- k 1) (+ sum (car arr)))]\n      [else (add_elements-iter (cdr arr)\
    \ (- k 1) sum)]))\n  (add_elements-iter arr k 0))\n", "  (define (add_elements_helper\
    \ arr k sum)\n    (cond\n      [(= k 0) sum]\n      [(<= (quotient (car arr) 10)\
    \ 1) (add_elements_helper (cdr arr) (- k 1) (+ sum (car arr)))]\n      [else (add_elements_helper\
    \ (cdr arr) (- k 1) sum)]))\n  (add_elements_helper arr k 0))\n", "  (define (add_elements-helper\
    \ arr k sum)\n    (cond\n      [(empty? arr) sum]\n      [(<= k 0) sum]\n    \
    \  [(<= (length (number->string (first arr))) 2)\n       (add_elements-helper\
    \ (rest arr) (- k 1) (+ sum (first arr)))]\n      [else (add_elements-helper (rest\
    \ arr) (- k 1) sum)]))\n  (add_elements-helper arr k 0))\n", "  (define (add_elements_iter\
    \ arr k sum)\n    (cond [(= k 0) sum]\n          [(< (length (number->string (car\
    \ arr))) 3)\n           (add_elements_iter (cdr arr) (- k 1) (+ sum (car arr)))]\n\
    \          [else (add_elements_iter (cdr arr) (- k 1) sum)]))\n  (add_elements_iter\
    \ arr k 0))\n", "  (define (sum-of-two-digits n)\n    (if (< n 100)\n        n\n\
    \        (+ (remainder n 100) (quotient n 100))))\n  (define (sum-of-first-k-elements\
    \ arr k)\n    (if (= k 0)\n        0\n        (+ (sum-of-two-digits (car arr))\n\
    \           (sum-of-first-k-elements (cdr arr) (- k 1)))))\n  (sum-of-first-k-elements\
    \ arr k))\n", "  (define (add_elements_iter arr k sum)\n    (cond [(empty? arr)\
    \ sum]\n          [(<= k 0) sum]\n          [(<= (length (number->string (first\
    \ arr))) 2)\n           (add_elements_iter (rest arr) (- k 1) (+ sum (first arr)))]\n\
    \          [else (add_elements_iter (rest arr) (- k 1) sum)]))\n  (add_elements_iter\
    \ arr k 0))\n", "  (define (add_elements_iter arr k sum)\n    (cond [(= k 0) sum]\n\
    \          [(< (car arr) 100) (add_elements_iter (cdr arr) (- k 1) (+ sum (car\
    \ arr)))]\n          [(> (car arr) 999) (add_elements_iter (cdr arr) (- k 1) sum)]\n\
    \          [else (add_elements_iter (cdr arr) (- k 1) (+ sum (car arr)))]))\n\
    \  (add_elements_iter arr k 0))\n", "  (define (add_elements-iter arr k sum)\n\
    \    (cond\n      [(empty? arr) sum]\n      [(> (length (number->string (first\
    \ arr))) 2) (add_elements-iter (rest arr) k sum)]\n      [else (add_elements-iter\
    \ (rest arr) (- k 1) (+ sum (first arr)))]))\n  (add_elements-iter arr k 0))\n",
  "  (define (add_elements-iter arr k sum)\n    (cond [(zero? k) sum]\n          [(<\
    \ (number->string (car arr)) \"100\")\n           (add_elements-iter (cdr arr)\
    \ (- k 1) (+ sum (car arr)))]\n          [else (add_elements-iter (cdr arr) (-\
    \ k 1) sum)]))\n  (add_elements-iter arr k 0))\n", "  (define (add_elements-iter\
    \ arr k sum)\n    (cond\n      [(= k 0) sum]\n      [(<= (quotient (car arr) 10)\
    \ 0)\n       (add_elements-iter (cdr arr) (- k 1) (+ sum (car arr)))]\n      [(<=\
    \ (quotient (car arr) 100) 0)\n       (add_elements-iter (cdr arr) (- k 1) (+\
    \ sum (car arr)))]\n      [else (add_elements-iter (cdr arr) (- k 1) sum)]))\n\
    \  (add_elements-iter arr k 0))\n", "  (define (add_elements_helper arr k acc)\n\
    \    (cond\n      [(empty? arr) acc]\n      [(= k 0) acc]\n      [(<= (length\
    \ (number->string (first arr))) 2)\n       (add_elements_helper (rest arr) (-\
    \ k 1) (+ acc (first arr)))]\n      [else (add_elements_helper (rest arr) (- k\
    \ 1) acc)]))\n  (add_elements_helper arr k 0))\n", "  (define (helper arr k sum)\n\
    \    (cond\n      [(empty? arr) sum]\n      [(<= k 0) sum]\n      [(<= (length\
    \ (number->string (first arr))) 2)\n       (helper (rest arr) (- k 1) (+ sum (first\
    \ arr)))]\n      [else (helper (rest arr) (- k 1) sum)]))\n  (helper arr k 0))\n",
  "  (define (add_elements-iter arr k acc)\n    (if (or (= k 0) (null? arr))\n   \
    \     acc\n        (let ([x (car arr)])\n          (if (<= x 99)\n           \
    \   (add_elements-iter (cdr arr) (- k 1) (+ acc x))\n              (add_elements-iter\
    \ (cdr arr) (- k 1) acc)))))\n  (add_elements-iter arr k 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
