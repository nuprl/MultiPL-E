name: HumanEval_163_generate_integers
language: rkt
prompt: "#lang racket\n\n;; Given two positive integers a and b, return the even digits\
  \ between a\n;; and b, in ascending order.\n;; For example:\n;; >>> (generate_integers\
  \ 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;;\
  \ >>> (generate_integers 10 14)\n;; (list )\n(define (generate_integers a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate generate_integers))\n\
  \    (check-equal? (candidate 2 10) (list 2 4 6 8))\n    (check-equal? (candidate\
  \ 10 2) (list 2 4 6 8))\n    (check-equal? (candidate 132 2) (list 2 4 6 8))\n \
  \   (check-equal? (candidate 17 89) (list ))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= a b) (list a)]\n    [(= a (+ b 1)) (list)]\n    [(<\
    \ a b) (cons a (generate_integers (+ a 2) b))]\n    [(> a b) (cons b (generate_integers\
    \ a (- b 2)))]))\n", "  (cond\n    [(= a b) (list a)]\n    [(< a b) (cons a (generate_integers\
    \ (+ a 2) b))]\n    [(> a b) (cons b (generate_integers (- a 2) b))]))\n", " \
    \ (define (even? n)\n    (= (remainder n 2) 0))\n  (define (generate-evens a b)\n\
    \    (cond ((> a b) '())\n          ((even? a) (cons a (generate-evens (+ a 1)\
    \ b)))\n          (else (generate-evens (+ a 1) b))))\n  (if (> a b)\n      (generate-evens\
    \ b a)\n      (generate-evens a b)))\n", "  (if (> a b)\n      (generate_integers\
    \ b a)\n      (if (even? a)\n          (cons a (generate_integers (+ a 1) b))\n\
    \          (generate_integers (+ a 1) b))))\n", "  (cond\n    [(< a b) (generate-integers-helper\
    \ a b)]\n    [(> a b) (generate-integers-helper b a)]\n    [else (list a)]))\n",
  "  (cond\n    [(= a b) (list a)]\n    [(< a b) (cons a (generate_integers (+ a 2)\
    \ b))]\n    [(> a b) (cons b (generate_integers a (+ b 2)))]))\n", "  (cond\n\
    \    [(= a b) (list a)]\n    [(< a b) (cons a (generate_integers (+ a 2) b))]\n\
    \    [(> a b) (cons b (generate_integers (+ b 2) a))]))\n", "  (cond\n    [(=\
    \ a b) (list a)]\n    [(< a b) (cons a (generate_integers (+ a 2) b))]\n    [(>\
    \ a b) (cons b (generate_integers a (+ b 2)))]))\n", "  (cond\n    [(= a b) (list\
    \ a)]\n    [(< a b) (cons a (generate_integers (+ a 2) b))]\n    [(> a b) (cons\
    \ b (generate_integers a (+ b 2)))]))\n", "  (cond\n    [(< a b) (cons a (generate_integers\
    \ (+ a 2) b))]\n    [(> a b) (cons b (generate_integers (- a 2) b))]\n    [else\
    \ (list a)]))\n", "  (cond\n    [(= a b) (list a)]\n    [(< a b) (cons a (generate_integers\
    \ (+ a 2) b))]\n    [(> a b) (cons b (generate_integers a (+ b 2)))]))\n", " \
    \ (cond\n    [(= a b) (list a)]\n    [(even? a) (cons a (generate_integers (+\
    \ a 1) b))]\n    [else (generate_integers (+ a 1) b)]))\n", "  (cond\n    [(<\
    \ a b) (generate_integers_aux a b)]\n    [(> a b) (generate_integers_aux b a)]\n\
    \    [else '()]))\n", "  (define (generate-even-integers a b)\n    (cond ((> a\
    \ b) '())\n          ((even? a) (cons a (generate-even-integers (+ a 1) b)))\n\
    \          (else (generate-even-integers (+ a 1) b))))\n  (generate-even-integers\
    \ (min a b) (max a b)))\n", "  (cond\n    [(< a b) (list a (+ a 2) (+ a 4) (+\
    \ a 6) (+ a 8))]\n    [(> a b) (list b (+ b 2) (+ b 4) (+ b 6) (+ b 8))]\n   \
    \ [else (list)]))\n", "  (cond\n    [(= a b) (list a)]\n    [(< a b) (cons a (generate_integers\
    \ (+ a 2) b))]\n    [(> a b) (cons b (generate_integers a (+ b 2)))]))\n", " \
    \ (cond\n    [(> a b) (generate_integers b a)]\n    [(= a b) (list a)]\n    [else\
    \ (cons a (generate_integers (+ a 2) b))]))\n", "  (cond\n    [(< a b) (generate_integers_aux\
    \ a b)]\n    [(> a b) (generate_integers_aux b a)]\n    [else (list a)]))\n",
  "  (cond\n    [(= a b) (list a)]\n    [(> a b) (generate_integers b a)]\n    [(even?\
    \ a) (cons a (generate_integers (+ a 1) b))]\n    [else (generate_integers (+\
    \ a 1) b)]))\n", "  (cond\n    [(= a b) (list a)]\n    [(< a b) (cons a (generate_integers\
    \ (+ a 2) b))]\n    [(> a b) (cons b (generate_integers (+ b 2) a))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
