name: HumanEval_2_truncate_number
language: rkt
prompt: "#lang racket\n\n;; Given a positive floating point number, it can be decomposed\
  \ into\n;; and integer part (largest integer smaller than given number) and decimals\n\
  ;; (leftover part always smaller than 1).\n;; Return the decimal part of the number.\n\
  ;; >>> (truncate_number 3.5)\n;; 0.5\n(define (truncate_number number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate truncate_number))\n\
  \    (check-equal? (candidate 3.5) 0.5)\n    (check-equal? (candidate 1.25) 0.25)\n\
  \    (check-equal? (candidate 123.0) 0.0)\n))\n\n(test-humaneval)"
completions: ["  (define (truncate_number_helper number)\n    (if (integer? number)\n\
    \        0\n        (truncate_number_helper (- number 1))))\n  (- number (truncate_number_helper\
    \ number)))\n", "  (define (truncate_number-iter number acc)\n    (if (&lt; number\
    \ 1)\n        acc\n        (truncate_number-iter (- number 1) (+ acc 1))))\n \
    \ (- number (truncate_number-iter number 0)))\n", "  (define (truncate-helper\
    \ number-to-truncate)\n    (if (integer? number-to-truncate)\n        0\n    \
    \    (truncate-helper (truncate number-to-truncate))))\n  (- number (truncate-helper\
    \ number)))\n", "  (define (truncate-helper number)\n    (if (< number 1)\n  \
    \      number\n        (truncate-helper (- number 1))))\n  (- number (truncate-helper\
    \ number)))\n", "  (define (truncate_number_iter number integer-part)\n    (if\
    \ (&lt; number 1)\n        (- number integer-part)\n        (truncate_number_iter\
    \ (/ number 10) (+ integer-part (/ number 10)))))\n  (truncate_number_iter number\
    \ 0))\n", "  (define (truncate-helper number)\n    (if (zero? (floor number))\n\
    \        0\n        (truncate-helper (- number (floor number)))))\n  (truncate-helper\
    \ number))\n", "  (define (truncate-helper number)\n    (if (integer? number)\n\
    \        0\n        (truncate-helper (floor number))))\n  (truncate-helper number))\n",
  "  (define (truncate_number_iter number integer-part)\n    (if (< number 1)\n  \
    \      (- number integer-part)\n        (truncate_number_iter (- number 1) (+\
    \ integer-part 1))))\n  (truncate_number_iter number 0))\n", "  (define (truncate-helper\
    \ number)\n    (if (integer? number)\n        0\n        (truncate-helper (- number\
    \ 1))))\n  (- number (truncate-helper number)))\n", "  (define (truncate_number-iter\
    \ number result)\n    (if (&lt; number 1)\n        result\n        (truncate_number-iter\
    \ (- number 1) (- number 1))))\n  (truncate_number-iter number 0))\n", "  (define\
    \ (truncate-helper number int-part)\n    (if (>= number 1)\n        (truncate-helper\
    \ (- number 1) (+ int-part 1))\n        (- number int-part)))\n  (truncate-helper\
    \ number 0))\n", "  (define (truncate-helper number)\n    (if (integer? number)\n\
    \        0\n        (truncate-helper (floor number))))\n  (truncate-helper number))\n",
  "  (define (truncate-helper number)\n    (if (< number 1)\n        number\n    \
    \    (truncate-helper (- number 1))))\n  (- number (truncate-helper number)))\n",
  "  (define (truncate_number-iter number acc)\n    (if (&lt; number 1)\n        acc\n\
    \        (truncate_number-iter (- number 1) (- number 1))))\n  (truncate_number-iter\
    \ number 0))\n", "  (define (truncate-helper number)\n    (if (not (integer? number))\n\
    \        (truncate-helper (floor number))\n        (- number (floor number))))\n\
    \  (truncate-helper number))\n", "  (define (truncate_number_iter number acc)\n\
    \    (if (&lt; number 1)\n        acc\n        (truncate_number_iter (- number\
    \ 1) (+ acc 1))))\n  (- number (truncate_number_iter number 0)))\n", "  (define\
    \ (truncate-helper number)\n    (if (< number 1)\n        number\n        (truncate-helper\
    \ (- number 1))))\n  (- number (truncate-helper number)))\n", "  (define (truncate_number_helper\
    \ number)\n    (if (integer? number)\n        0\n        (truncate_number_helper\
    \ (floor number))))\n  (- number (truncate_number_helper number)))\n", "  (define\
    \ (truncate-helper number)\n    (if (integer? number)\n        0\n        (truncate-helper\
    \ (floor number))))\n  (truncate-helper number))\n", "  (define (truncate-helper\
    \ number)\n    (if (integer? number)\n        0\n        (truncate-helper (- number\
    \ 1))))\n  (- number (truncate-helper number)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
