name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three\
  \ five\"\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (string-join (sort (string-split numbers #\\space)\n            \
    \         (lambda (a b)\n                       (< (string->number a)\n      \
    \                    (string->number b))))\n               #\\space))\n", "  (define\
    \ (numeral-&gt;number numeral)\n    (cond\n      [(string=? numeral \"zero\")\
    \ 0]\n      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"two\")\
    \ 2]\n      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"four\"\
    ) 4]\n      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"six\"\
    ) 6]\n      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"eight\"\
    ) 8]\n      [(string=? numeral \"nine\") 9]))\n  (define (number-&gt;numeral number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (cons (car numbers)\n             (sort-numbers-helper\
    \ (cdr numbers)))]))\n  (define (sort-numbers-helper2 numbers)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [else\n       (cons (number-&gt;numeral (car\
    \ numbers))\n             (sort-numbers-helper2 (cdr numbers)))]))\n  (sort-numbers-helper2\
    \ (sort-numbers-helper (map numeral-&gt;number (string-&gt;list numbers)))))\n\
    </code>\nI'm not sure if I'm doing this right, but I'm trying to use a helper\
    \ function to sort the numbers, then another helper function to convert the numbers\
    \ back to numerals.\nI'm not sure if I'm doing this right, but I'm trying to use\
    \ a helper function to sort the numbers, then another helper function to convert\
    \ the numbers back to numerals.\n", "  (string-join (sort (string-split numbers\
    \ #\\space) string<?)))\n", "  (define (numeral->number numeral)\n    (cond\n\
    \      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"one\") 1]\n\
    \      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\") 3]\n\
    \      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\") 5]\n\
    \      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\") 7]\n\
    \      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\") 9]))\n\
    \  (define (number->numeral number)\n    (cond\n      [(= number 0) \"zero\"]\n\
    \      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(= number\
    \ 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"five\"]\n\
    \      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(= number\
    \ 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (helper numbers smallest)\n         (cond\n           [(empty? numbers) (cons\
    \ smallest empty)]\n           [(< (numeral->number (first numbers)) (numeral->number\
    \ smallest))\n            (cons (first numbers) (helper (rest numbers) smallest))]\n\
    \           [else\n            (cons smallest (helper (rest numbers) (first numbers)))]))\n\
    \       (helper (rest numbers) (first numbers))]))\n  (define (numbers->string\
    \ numbers)\n    (cond\n      [(empty? numbers) \"\"]\n      [else\n       (string-append\
    \ (number->numeral (first numbers)) \" \" (numbers->string (rest numbers)))]))\n\
    \  (numbers->string (sort-numbers-helper (string-split numbers))))\n", "  (string-join\
    \ (sort (string-split numbers #\\space)\n                     (lambda (a b)\n\
    \                       (< (string->number a)\n                          (string->number\
    \ b))))\n               #\\space))\n", "  (string-join (sort (string-split numbers\
    \ #\\space)\n                     (lambda (a b)\n                       (< (string->number\
    \ a)\n                          (string->number b))))\n               #\\space))\n",
  "  (string-join (sort (string-split numbers #\\space) string<? #:key (lambda (x)\
    \ (string->number (string-replace x #\\space #\\_)))) #\\space))\n", "  (string-join\
    \ (sort (string-split numbers) <) \" \"))\n", "  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (string->number a)\n                          (string->number b))))\n \
    \              #\\space))\n", "  (string-join (sort (string-split numbers #\\\
    space) string<?)))\n", "  (string-join (sort (string-split numbers #\\space) string<?)))\n",
  "  (string-join (sort (string-split numbers) string<?)))\n", "  (string-join\n \
    \  (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (number-string->number\
    \ a)\n         (number-string->number b))))\n   #\\space))\n", "  (string-join\
    \ (sort (string-split numbers #\\space) <) #\\space))\n", "  (string-join (sort\
    \ (string-split numbers) <) \" \"))\n", "  (string-join (sort (string-split numbers)\
    \ string<?)))\n", "  (string-join (sort (string-split numbers #\\space)\n    \
    \                 (lambda (a b)\n                       (< (number-&gt;string\
    \ (string-&gt;number a))\n                          (number-&gt;string (string-&gt;number\
    \ b)))))\n               #\\space))\n", "  (define (numeral->number numeral)\n\
    \    (cond\n      [(equal? numeral \"zero\") 0]\n      [(equal? numeral \"one\"\
    ) 1]\n      [(equal? numeral \"two\") 2]\n      [(equal? numeral \"three\") 3]\n\
    \      [(equal? numeral \"four\") 4]\n      [(equal? numeral \"five\") 5]\n  \
    \    [(equal? numeral \"six\") 6]\n      [(equal? numeral \"seven\") 7]\n    \
    \  [(equal? numeral \"eight\") 8]\n      [(equal? numeral \"nine\") 9]))\n  (define\
    \ (number->numeral number)\n    (cond\n      [(equal? number 0) \"zero\"]\n  \
    \    [(equal? number 1) \"one\"]\n      [(equal? number 2) \"two\"]\n      [(equal?\
    \ number 3) \"three\"]\n      [(equal? number 4) \"four\"]\n      [(equal? number\
    \ 5) \"five\"]\n      [(equal? number 6) \"six\"]\n      [(equal? number 7) \"\
    seven\"]\n      [(equal? number 8) \"eight\"]\n      [(equal? number 9) \"nine\"\
    ]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [else\n       (let* ([numeral (first numbers)]\n             \
    \ [number (numeral->number numeral)]\n              [rest (sort-numbers-helper\
    \ (rest numbers))])\n         (cond\n           [(empty? rest) (cons numeral empty)]\n\
    \           [(< number (numeral->number (first rest))) (cons numeral rest)]\n\
    \           [else (cons (first rest) (cons numeral (rest rest)))]))]))\n  (string-join\
    \ (sort-numbers-helper (string-split numbers #\\space)) \" \"))\n", "  (define\
    \ (numeral->number numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n\
    \      [(string=? numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n\
    \      [(string=? numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n\
    \      [(string=? numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n\
    \      [(string=? numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n\
    \      [(string=? numeral \"nine\") 9]))\n  (define (number->numeral number)\n\
    \    (cond\n      [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n    \
    \  [(= number 2) \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4)\
    \ \"four\"]\n      [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n   \
    \   [(= number 7) \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number\
    \ 9) \"nine\"]))\n  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else\n       (define (insert-numeral numeral numbers)\n\
    \         (cond\n           [(empty? numbers) (list numeral)]\n           [(<\
    \ numeral (first numbers)) (cons numeral numbers)]\n           [else (cons (first\
    \ numbers) (insert-numeral numeral (rest numbers)))])\n         )\n       (insert-numeral\
    \ (first numbers) (sort-numbers-helper (rest numbers)))]))\n  (define (numbers->numeral-list\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else (cons (number->numeral\
    \ (numeral->number (first numbers))) (numbers->numeral-list (rest numbers)))]))\n\
    \  (string-join (numbers->numeral-list (sort-numbers-helper numbers)) \" \"))\n",
  "  (string-join (sort (string-split numbers) string<? ) \" \"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
