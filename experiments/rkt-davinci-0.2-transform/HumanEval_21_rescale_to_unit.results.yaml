language: rkt
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659748857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659748857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
