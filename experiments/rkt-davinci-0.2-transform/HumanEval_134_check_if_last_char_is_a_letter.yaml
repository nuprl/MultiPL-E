name: HumanEval_134_check_if_last_char_is_a_letter
language: rkt
prompt: "#lang racket\n\n;; Create a function that returns True if the last character\n\
  ;; of a given string is an alphabetical character and is not\n;; a part of a word,\
  \ and False otherwise.\n;; Note: \"word\" is a group of characters separated by\
  \ space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_letter \"apple pie\")\n\
  ;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_letter\
  \ \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"\")\n;; #f\n\
  (define (check_if_last_char_is_a_letter txt)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_if_last_char_is_a_letter))\n\
  \    (check-equal? (candidate \"apple\") #f)\n    (check-equal? (candidate \"apple\
  \ pi e\") #t)\n    (check-equal? (candidate \"eeeee\") #f)\n    (check-equal? (candidate\
  \ \"A\") #t)\n    (check-equal? (candidate \"Pumpkin pie \") #f)\n    (check-equal?\
  \ (candidate \"Pumpkin pie 1\") #f)\n    (check-equal? (candidate \"\") #f)\n  \
  \  (check-equal? (candidate \"eeeee e \") #f)\n    (check-equal? (candidate \"apple\
  \ pie\") #f)\n    (check-equal? (candidate \"apple pi e \") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char\
    \ txt)) (not (char-alphabetic? (last-char (string-drop-right txt 1))))) #t]\n\
    \    [else #f]))\n", "  (let ([last-char (string-ref txt (sub1 (string-length\
    \ txt)))])\n    (and (char-alphabetic? last-char)\n         (not (member last-char\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))))))\n", "  (if\
    \ (string=? txt \"\")\n      #f\n      (if (char-alphabetic? (string-ref txt (-\
    \ (string-length txt) 1)))\n          (if (char-alphabetic? (string-ref txt (-\
    \ (string-length txt) 2)))\n              #f\n              #t)\n          #f)))\n",
  "  (if (string=? txt \"\")\n      #f\n      (if (string=? (substring txt -1) \"\
    \ \")\n          #f\n          (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 1)))\n              #t\n              #f))))\n", "  (cond\n    [(string=?\
    \ txt \"\") #f]\n    [(string=? (substring txt -1) \" \") #f]\n    [(char-alphabetic?\
    \ (string-ref txt -1)) #t]\n    [else #f]))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (if (empty? txt)\n     \
    \ #f\n      (if (char-alphabetic? (last-char txt))\n          (if (char-whitespace?\
    \ (last-char (substring txt 0 (- (string-length txt) 1))))\n              #t\n\
    \              #f)\n          #f)))\n", "  (let ([last-char (string-ref txt (sub1\
    \ (string-length txt)))])\n    (and (char-alphabetic? last-char)\n         (not\
    \ (char-whitespace? last-char)))))\n", "  (if (string=? txt \"\")\n      #f\n\
    \      (let ((last-char (string-ref txt (- (string-length txt) 1))))\n       \
    \ (and (char-alphabetic? last-char)\n             (not (char-whitespace? last-char))))))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (if\
    \ (char-whitespace? (last-char (butlast txt)))\n         #t\n         #f)]\n \
    \   [else #f]))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))\n       (not (char-word?\
    \ (last-char txt)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-alphabetic? (last-char (string-drop-right\
    \ txt 1))))))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-whitespace?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #t\n            \
    \  #f)\n          #f)))\n", "  (if (string=? \"\" txt)\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (cond\n\
    \    [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n       \
    \   (not (char-alphabetic? (last-char (butlast txt))))) #t]\n    [else #f]))\n",
  "  (let ((last-char (string-ref txt (- (string-length txt) 1))))\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (cond\n  \
    \  [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (if (char-whitespace?\
    \ (second-last-char txt))\n         #t\n         #f)]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n    \
    \ (if (char-alphabetic? (last-char (substring txt 0 (- (string-length txt) 1))))\n\
    \         #f\n         #t)]\n    [else #f]))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (cond\n    [(empty? txt)\
    \ #f]\n    [(and (char-alphabetic? (last-char txt))\n          (not (char-alphabetic?\
    \ (last-char (string-drop-right txt 1)))))\n     #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? txt) #f]\n    [(empty? (rest txt)) #f]\n    [(char-alphabetic? (last\
    \ txt)) #t]\n    [else (check_if_last_char_is_a_letter (rest txt))]))\n", "  (if\
    \ (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (- (string-length\
    \ txt) 1))))\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char\
    \ (string-ref txt (- (string-length txt) 1))))\n        (if (char-alphabetic?\
    \ last-char)\n            (if (string-contains txt (string last-char))\n     \
    \           #f\n                #t)\n            #f))))\n", "  (and (not (empty?\
    \ txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))\n       (not (char-alphabetic? (last-char (butlast txt))))))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (cond\n\
    \       [(empty? (rest txt)) #t]\n       [(char-alphabetic? (last-char (rest txt)))\
    \ #f]\n       [else #t])]\n    [else #f]))\n", "  (if (string=? txt \"\")\n  \
    \    #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n\
    \          (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n\
    \              #f\n              #t)\n          #f)))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n          (not (char-alphabetic?\
    \ (last-char (butlast txt))))) #t]\n    [else #f]))\n", "  (if (string=? txt \"\
    \")\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 2)))\n              #f\n              #t)\n          #f)))\n", "  (cond\n  \
    \  [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (if (char-alphabetic?\
    \ (last-char (string-drop-right txt 1)))\n         #f\n         #t)]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char\
    \ txt))\n     (if (char-whitespace? (second-last-char txt))\n         #t\n   \
    \      #f)]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt)) #t]\n    [else #f]))\n", "  (let ([last-char (string-ref txt\
    \ (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n     \
    \    (not (char-whitespace? last-char)))))\n", "  (cond\n    [(empty? txt) #f]\n\
    \    [(and (char-alphabetic? (last-char txt))\n          (not (char-alphabetic?\
    \ (last-char (butlast txt))))) #t]\n    [else #f]))\n", "  (if (empty? txt)\n\
    \      #f\n      (if (char-alphabetic? (last-char txt))\n          (if (char-whitespace?\
    \ (second-last-char txt))\n              #t\n              #f)\n          #f)))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (cond\n\
    \       [(empty? (rest txt)) #t]\n       [(char-alphabetic? (last-char (rest txt)))\
    \ #f]\n       [else #t])]\n    [else #f]))\n", "  (if (string=? txt \"\")\n  \
    \    #f\n      (and (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n\
    \           (not (char-alphabetic? (string-ref txt (- (string-length txt) 2)))))))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(not (char-alphabetic? (last-char txt))) #f]\n\
    \    [(char-alphabetic? (last-char (string-drop-right txt 1))) #f]\n    [else\
    \ #t]))\n", "  (cond\n    [(empty? txt) #f]\n    [(empty? (rest txt)) #f]\n  \
    \  [(char-alphabetic? (last txt))\n     (and (not (char-alphabetic? (last (rest\
    \ txt))))\n          (not (char-whitespace? (last (rest txt)))))\n     ]\n   \
    \ [else (check_if_last_char_is_a_letter (rest txt))]))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (cond\n       [(empty?\
    \ (rest txt)) #t]\n       [(char-alphabetic? (last-char (rest txt))) #f]\n   \
    \    [else #t])]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (if (char-whitespace? (last-char (butlast txt)))\n  \
    \       #t\n         #f)]\n    [else #f]))\n", "  (and (not (empty? txt))\n  \
    \     (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))\n       (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1)))))))\n", "  (let ([last-char (string-ref txt (sub1 (string-length txt)))])\n\
    \    (and (char-alphabetic? last-char)\n         (not (char-whitespace? last-char)))))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (cond\n\
    \       [(empty? (rest txt)) #t]\n       [(char-alphabetic? (last-char (rest txt)))\
    \ #f]\n       [else #t])]\n    [else #f]))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (cond\n    [(empty? txt)\
    \ #f]\n    [(char-alphabetic? (last-char txt))\n     (cond\n       [(empty? (rest\
    \ txt)) #t]\n       [(char-alphabetic? (last-char (rest txt))) #f]\n       [else\
    \ #t])]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (if (char-whitespace? (last-char (butlast txt)))\n  \
    \       #t\n         #f)]\n    [else #f]))\n", "  (if (string=? txt \"\")\n  \
    \    #f\n      (let ((last-char (string-ref txt (- (string-length txt) 1))))\n\
    \        (if (char-alphabetic? last-char)\n            (if (char-whitespace? (string-ref\
    \ txt (- (string-length txt) 2)))\n                #t\n                #f)\n \
    \           #f))))\n", "  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic?\
    \ (last-char txt))\n          (not (char-alphabetic? (last-char (butlast txt)))))\
    \ #t]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (cond\n       [(empty? (rest txt)) #t]\n       [(char-alphabetic?\
    \ (last-char (rest txt))) #f]\n       [else #t])]\n    [else #f]))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))\n       (not (char-alphabetic? (last-char (string-drop-right\
    \ txt 1))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (if (string=? (substring txt (- (string-length txt)\
    \ 1) (string-length txt)) \" \")\n          #f\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n              #t\n            \
    \  #f))))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (if (char-alphabetic? (last-char (substring txt 0 (-\
    \ (string-length txt) 1))))\n         #f\n         #t)]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n    \
    \ (cond\n       [(empty? (string-trim-both txt)) #f]\n       [(char-alphabetic?\
    \ (last-char (string-trim-both txt))) #f]\n       [else #t])]\n    [else #f]))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(empty? (rest txt)) #f]\n    [(empty? (rest\
    \ (rest txt))) #t]\n    [(char-alphabetic? (last txt))\n     (and (char-alphabetic?\
    \ (last txt))\n          (char-whitespace? (last (rest txt))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (and\
    \ (not (char-alphabetic? (last-char (string-drop-right txt 1))))\n          (not\
    \ (char-whitespace? (last-char (string-drop-right txt 1)))))\n     ]\n    [else\
    \ #f]))\n", "  (cond\n    [(string=? txt \"\") #f]\n    [(char-alphabetic? (string-ref\
    \ txt (- (string-length txt) 1)))\n     (and (not (char-alphabetic? (string-ref\
    \ txt (- (string-length txt) 2))))\n          (not (char-alphabetic? (string-ref\
    \ txt (- (string-length txt) 3)))))\n     ]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (cond\n  \
    \     [(empty? (rest txt)) #t]\n       [(char-alphabetic? (last-char (rest txt)))\
    \ #f]\n       [else #t])]\n    [else #f]))\n", "  (if (string=? txt \"\")\n  \
    \    #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n\
    \          (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n\
    \              #f\n              #t)\n          #f)))\n", "  (if (string=? txt\
    \ \"\")\n      #f\n      (let ((last-char (string-ref txt (- (string-length txt)\
    \ 1))))\n        (if (char-alphabetic? last-char)\n            (if (char-whitespace?\
    \ (string-ref txt (- (string-length txt) 2)))\n                #t\n          \
    \      #f)\n            #f))))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (cond\n       [(empty? (rest txt)) #t]\n       [(char-alphabetic?\
    \ (last-char (rest txt))) #f]\n       [else #t])]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt)) #t]\n    [else\
    \ (check_if_last_char_is_a_letter (substring txt 0 (- (string-length txt) 1)))])\n\
    \  )\n", "  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char\
    \ txt))\n          (not (char-alphabetic? (last-char (butlast txt))))) #t]\n \
    \   [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char\
    \ txt))\n     (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1)))))\n     ]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n \
    \   [(char-alphabetic? (last-char txt))\n     (and (not (char-alphabetic? (last-char\
    \ (butlast txt))))\n          (not (char-whitespace? (last-char (butlast txt)))))\n\
    \     ]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (cond\n       [(empty? (rest txt)) #t]\n       [(char-alphabetic?\
    \ (last-char (rest txt))) #f]\n       [else #t])]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (and (not\
    \ (char-alphabetic? (last-char (substring txt 0 (- (string-length txt) 1)))))\n\
    \          (not (char-whitespace? (last-char (substring txt 0 (- (string-length\
    \ txt) 1))))))]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (if (char-whitespace? (second-last-char txt))\n     \
    \    #t\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n\
    \    [(and (char-alphabetic? (last-char txt))\n          (not (char-alphabetic?\
    \ (last-char (substring txt 0 -1)))))\n     #t]\n    [else #f]))\n", "  (cond\n\
    \    [(string=? txt \"\") #f]\n    [(string=? txt \" \") #f]\n    [(string=? txt\
    \ \"  \") #f]\n    [(string=? txt \"   \") #f]\n    [(string=? txt \"    \") #f]\n\
    \    [(string=? txt \"     \") #f]\n    [(string=? txt \"      \") #f]\n    [(string=?\
    \ txt \"       \") #f]\n    [(string=? txt \"        \") #f]\n    [(string=? txt\
    \ \"         \") #f]\n    [(string=? txt \"          \") #f]\n    [(string=? txt\
    \ \"           \") #f]\n    [(string=? txt \"            \") #f]\n    [(string=?\
    \ txt \"             \") #f]\n    [(string=? txt \"              \") #f]\n   \
    \ [(string=? txt \"               \") #f]\n    [(string=? txt \"             \
    \   \") #f]\n    [(string=? txt \"                 \") #f]\n    [(string=? txt\
    \ \"                  \") #f]\n    [(string=? txt \"                   \") #f]\n\
    \    [(string=? txt \"                    \") #f]\n    [(string=? txt \"     \
    \                \") #f]\n    [(string=? txt \"                      \") #f]\n\
    \    [(string=? txt \"                       \") #f]\n    [(string=? txt \"  \
    \                      \") #f]\n    [(string=? txt \"                        \
    \ \") #f]\n    [(string=? txt \"                          \") #f]\n    [(string=?\
    \ txt \"                           \") #f]\n    [(string=? txt \"            \
    \                \") #f]\n    [(string=? txt \"                             \"\
    ) #f]\n    [(string=? txt \"                              \") #f]\n    [(string=?\
    \ txt \"                               \") #f]\n    [(string=? txt \"        \
    \                        \") #f]\n    [(string=? txt \"", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(char-alphabetic? (last-char txt)) #t]\n    [else #f]))\n", " \
    \ (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (-\
    \ (string-length txt) 1))))\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (cond\n    [(empty? txt)\
    \ #f]\n    [(char-alphabetic? (last-char txt))\n     (if (char-whitespace? (second-last-char\
    \ txt))\n         #t\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n          (not (char-whitespace?\
    \ (last-char txt)))) #t]\n    [else #f]))\n", "  (if (string=? txt \"\")\n   \
    \   #f\n      (let ((last-char (string-ref txt (- (string-length txt) 1))))\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (let ([last-char (string-ref txt (sub1 (string-length\
    \ txt)))])\n    (and (char-alphabetic? last-char)\n         (not (char-whitespace?\
    \ last-char)))))\n", "  (cond\n    [(empty? txt) #f]\n    [(not (char-alphabetic?\
    \ (last-char txt))) #f]\n    [(char-whitespace? (last-char (substring txt 0 (-\
    \ (string-length txt) 1)))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? txt)\
    \ #f]\n    [(char-alphabetic? (last-char txt))\n     (and (not (char-alphabetic?\
    \ (last-char (butlast txt))))\n          (not (char-whitespace? (last-char (butlast\
    \ txt)))))\n     ]\n    [else #f]))\n", "  (if (empty? txt)\n      #f\n      (if\
    \ (char-alphabetic? (last-char txt))\n          (if (char-whitespace? (last-char\
    \ (substring txt 0 (- (string-length txt) 1))))\n              #t\n          \
    \    #f)\n          #f)))\n", "  (cond\n    [(empty? txt) #f]\n    [(empty? (rest\
    \ txt)) #f]\n    [(char-alphabetic? (last txt))\n     (and (char-alphabetic? (last\
    \ txt))\n          (char-alphabetic? (last (rest txt)))\n          #f)]\n    [else\
    \ (and (char-alphabetic? (last txt))\n               (char-alphabetic? (last (rest\
    \ txt)))\n               #t)]))\n", "  (if (string=? txt \"\")\n      #f\n   \
    \   (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n      \
    \    (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n     \
    \         #f\n              #t)\n          #f)))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (let ((last-char (string-ref txt (- (string-length txt) 1))))\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char\
    \ (string-ref txt (- (string-length txt) 1))))\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (cond\n\
    \    [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n       \
    \   (not (char-alphabetic? (last-char (substring txt 0 (- (string-length txt)\
    \ 1))))))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n   \
    \ [(char-alphabetic? (last-char txt))\n     (if (char-whitespace? (second-last-char\
    \ txt))\n         #t\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n          (not (char-alphabetic?\
    \ (last-char (butlast txt))))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (and (not (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1)))))\n          (not (char-whitespace?\
    \ (last-char (substring txt 0 (- (string-length txt) 1))))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n\
    \          (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1))))))\n     #t]\n    [else #f]))\n", "  (and (not (empty? txt))\n   \
    \    (char-alphabetic? (last-char txt))\n       (not (char-alphabetic? (last-char\
    \ (string-drop-right txt 1))))))\n", "  (if (string=? txt \"\")\n      #f\n  \
    \    (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n     \
    \     (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n    \
    \          #f\n              #t)\n          #f)))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (let ((last-char (string-ref txt (- (string-length txt) 1))))\n\
    \        (and (char-alphabetic? last-char)\n             (or (string=? txt (string\
    \ last-char))\n                 (not (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 2)))))))))\n", "  (if (string=? txt \"\")\n      #f\n      (if (string=?\
    \ (substring txt -1) \" \")\n          #f\n          (if (string=? (substring\
    \ txt -1) \".\")\n              #f\n              (if (string=? (substring txt\
    \ -1) \"!\")\n                  #f\n                  (if (string=? (substring\
    \ txt -1) \"?\")\n                      #f\n                      (if (string=?\
    \ (substring txt -1) \",\")\n                          #f\n                  \
    \        (if (string=? (substring txt -1) \";\")\n                           \
    \   #f\n                              (if (string=? (substring txt -1) \":\")\n\
    \                                  #f\n                                  (if (string=?\
    \ (substring txt -1) \"-\")\n                                      #f\n      \
    \                                (if (string=? (substring txt -1) \"'\")\n   \
    \                                       #f\n                                 \
    \         (if (string=? (substring txt -1) \"\\\"\")\n                       \
    \                       #f\n                                              (if\
    \ (string=? (substring txt -1) \")\")\n                                      \
    \            #f\n                                                  (if (string=?\
    \ (substring txt -1) \"(\")\n                                                \
    \      #f\n                                                      (if (string=?\
    \ (substring txt -1) \"]\")\n                                                \
    \          #f\n                                                          (if (string=?\
    \ (substring txt -1) \"[\")\n                                                \
    \              #f\n                                                          \
    \    (if (string=? (substring txt -1) \"}\")\n                               \
    \                                   #f\n                                     \
    \                             (if (string=? (substring txt -1) \"{\")\n      \
    \                                                                #f\n        \
    \                                                              (if (string=? (substring\
    \ txt -1) \">\")\n                                                           \
    \               #f\n                                                         \
    \                 (if (string=? (substring txt -1) \"<\")\n                  \
    \                                                            #f\n            \
    \                                                                  (if (string=?\
    \ (substring txt -1) \"=\")\n                                                \
    \                ", "  (let ([last-char (string-ref txt (sub1 (string-length txt)))])\n\
    \    (and (char-alphabetic? last-char)\n         (not (char-whitespace? last-char)))))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n\
    \          (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1))))))\n     #t]\n    [else #f]))\n", "  (let ((len (string-length txt)))\n\
    \    (if (and (> len 0)\n             (not (char-whitespace? (string-ref txt (-\
    \ len 1)))))\n        (if (char-alphabetic? (string-ref txt (- len 1)))\n    \
    \        #t\n            #f)\n        #f)))\n", "  (if (string=? txt \"\")\n \
    \     #f\n      (let ((last-char (string-ref txt (- (string-length txt) 1))))\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (if (char-alphabetic? (last-char (string-drop-right txt\
    \ 1)))\n         #f\n         #t)]\n    [else #f]))\n", "  (if (string=? txt \"\
    \")\n      #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))\n       (not (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1)))))))\n", "  (and (not\
    \ (empty? txt))\n       (not (char-whitespace? (last-char txt)))\n       (char-alphabetic?\
    \ (last-char txt))))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (if (char-whitespace? (last-char (butlast txt)))\n  \
    \       #t\n         #f)]\n    [else #f]))\n", "  (and (not (empty? txt))\n  \
    \     (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))\n       (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1)))))))\n", "  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic?\
    \ (last-char txt))\n          (not (char-whitespace? (last-char txt)))) #t]\n\
    \    [else #f]))\n", "  (let ([last-char (string-ref txt (sub1 (string-length\
    \ txt)))])\n    (and (char-alphabetic? last-char)\n         (not (char-whitespace?\
    \ last-char)))))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char\
    \ txt))\n     (and (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1)))))\n          (not (char-whitespace? (last-char (substring txt 0 (-\
    \ (string-length txt) 1))))))]\n    [else #f]))\n", "  (cond\n    [(empty? txt)\
    \ #f]\n    [(char-alphabetic? (last-char txt)) #t]\n    [else #f]))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))\n       (not (char-alphabetic? (last-char (string-drop-right\
    \ txt 1))))))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (let ([last-char (string-ref txt (sub1 (string-length\
    \ txt)))])\n    (and (char-alphabetic? last-char)\n         (not (char-whitespace?\
    \ last-char)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))\n       (not (char-alphabetic?\
    \ (last-char (string-drop-right txt 1))))))\n", "  (cond\n    [(empty? txt) #f]\n\
    \    [(char-alphabetic? (last-char txt))\n     (cond\n       [(empty? (rest txt))\
    \ #t]\n       [(char-alphabetic? (last-char (rest txt))) #f]\n       [else #t])]\n\
    \    [else #f]))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (cond\n\
    \    [(empty? txt) #f]\n    [(empty? (rest txt)) #f]\n    [(and (char-alphabetic?\
    \ (last txt))\n          (not (char-alphabetic? (second-to-last txt)))) #t]\n\
    \    [else (check_if_last_char_is_a_letter (rest txt))]))\n", "  (define (is-letter?\
    \ c)\n    (and (char-alphabetic? c)\n         (not (char-whitespace? c))))\n \
    \ (and (not (string-empty? txt))\n       (is-letter? (string-ref txt (- (string-length\
    \ txt) 1)))))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char\
    \ txt))\n     (and (not (char-alphabetic? (last-char (string-drop-right txt 1))))\n\
    \          (not (char-whitespace? (last-char (string-drop-right txt 1)))))\n \
    \    ]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (and (not (char-alphabetic? (last-char (string-drop-right\
    \ txt 1))))\n          (not (char-whitespace? (last-char (string-drop-right txt\
    \ 1)))))\n     ]\n    [else #f]))\n", "  (if (string=? txt \"\")\n      #f\n \
    \     (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n    \
    \      (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n   \
    \           #f\n              #t)\n          #f)))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (if (char-whitespace?\
    \ (second-last-char txt))\n         #t\n         #f)]\n    [else #f]))\n", " \
    \ (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (-\
    \ (string-length txt) 1))))\n        (if (char-alphabetic? last-char)\n      \
    \      (if (char-whitespace? (string-ref txt (- (string-length txt) 2)))\n   \
    \             #t\n                #f)\n            #f))))\n", "  (and (not (empty?\
    \ txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))\n       (not (char-alphabetic? (last-char (substring txt 0\
    \ (- (string-length txt) 1)))))))\n", "  (and (not (empty? txt))\n       (or (char-alphabetic?\
    \ (last-char txt))\n           (char-numeric? (last-char txt)))))\n", "  (let\
    \ ((last-char (string-ref txt (- (string-length txt) 1))))\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 2)))\n              #f\n              #t)\n          #f)))\n", "  (let\
    \ ([last-char (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (and (not\
    \ (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))\n       (not (char-alphabetic? (last-char (butlast txt))))))\n",
  "  (let ([last-char (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (if (or (empty?\
    \ txt) (empty? (string-trim txt)))\n      #f\n      (let ((last-char (string-ref\
    \ (string-trim txt) (- (string-length (string-trim txt)) 1))))\n        (if (or\
    \ (char=? last-char #\\ ) (char=? last-char #\\.))\n            #f\n         \
    \   (char-alphabetic? last-char)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))\n       (not\
    \ (char-word? (last-char txt)))))\n", "  (if (string=? txt \"\")\n      #f\n \
    \     (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n    \
    \      (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n   \
    \           #f\n              #t)\n          #f)))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (if (char-whitespace?\
    \ (second-last-char txt))\n         #t\n         #f)]\n    [else #f]))\n", " \
    \ (let ([last-char (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (let ([last-char\
    \ (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n\
    \         (not (char-whitespace? last-char)))))\n", "  (let ((last-char (string-ref\
    \ txt (- (string-length txt) 1))))\n    (and (char-alphabetic? last-char)\n  \
    \       (not (char-whitespace? last-char)))))\n", "  (cond\n    [(empty? txt)\
    \ #f]\n    [(char-alphabetic? (last-char txt))\n     (and (char-alphabetic? (last-char\
    \ txt))\n          (not (char-whitespace? (last-char txt))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (if\
    \ (char-whitespace? (second-last-char txt))\n         #t\n         #f)]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char\
    \ txt))\n          (not (char-alphabetic? (last-char (string-drop-right txt 1)))))\n\
    \     #t]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (and (not (char-alphabetic? (last-char (string-drop-right\
    \ txt 1))))\n          (not (char-whitespace? (last-char (string-drop-right txt\
    \ 1)))))\n     ]\n    [else #f]))\n", "  (cond [(empty? txt) #f]\n        [(char-alphabetic?\
    \ (last-char txt))\n         (if (char-alphabetic? (last-char (substring txt 0\
    \ (- (string-length txt) 1))))\n             #f\n             #t)]\n        [else\
    \ #f]))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char (string-ref\
    \ txt (- (string-length txt) 1))])\n        (and (char-alphabetic? last-char)\n\
    \             (not (char-whitespace? last-char))))))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (and (not (char-alphabetic?\
    \ (last-char (butlast txt))))\n          (not (char-whitespace? (last-char (butlast\
    \ txt)))))\n     ]\n    [else #f]))\n", "  (let ([last-char (string-ref txt (sub1\
    \ (string-length txt)))])\n    (and (char-alphabetic? last-char)\n         (not\
    \ (member last-char (string-&gt;list (string-trim txt)))))))\n</code>\n", "  (let\
    \ ([last-char (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (cond\n  \
    \  [(empty? txt) #f]\n    [(empty? (rest txt)) #f]\n    [(char-alphabetic? (last\
    \ txt))\n     (and (char-alphabetic? (last txt))\n          (not (char-alphabetic?\
    \ (last (rest txt)))))\n     ]\n    [else (check_if_last_char_is_a_letter (rest\
    \ txt))]))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref\
    \ txt (- (string-length txt) 1))))\n        (if (char-alphabetic? last-char)\n\
    \            (if (char-whitespace? (string-ref txt (- (string-length txt) 2)))\n\
    \                #t\n                #f)\n            #f))))\n", "  (cond\n  \
    \  [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n         \
    \ (not (char-alphabetic? (last-char (string-drop-right txt 1)))))\n     #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char\
    \ txt))\n     (if (char-whitespace? (second-last-char txt))\n         #t\n   \
    \      #f)]\n    [else #f]))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))\n       (not\
    \ (char-alphabetic? (last-char (substring txt 0 (- (string-length txt) 1)))))))\n",
  "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (and\
    \ (not (char-alphabetic? (last-char (string-drop-right txt 1))))\n          (not\
    \ (char-whitespace? (last-char (string-drop-right txt 1)))))\n     ]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char\
    \ txt)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (and (not (char-alphabetic? (last-char (butlast txt))))\n\
    \          (not (char-whitespace? (last-char (butlast txt)))))\n     ]\n    [else\
    \ #f]))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n\
    \       (not (char-whitespace? (last-char txt)))\n       (not (char-alphabetic?\
    \ (last-char (string-drop-right txt 1))))))\n", "  (cond\n    [(empty? txt) #f]\n\
    \    [(char-alphabetic? (last-char txt))\n     (if (char-whitespace? (second-last-char\
    \ txt))\n         #t\n         #f)]\n    [else #f]))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (if (string=? txt \"\")\n\
    \      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 2)))\n              #f\n              #t)\n          #f)))\n", "  (cond\n  \
    \  [(string=? txt \"\") #f]\n    [(string=? (substring txt -1) \" \") #f]\n  \
    \  [(string=? (substring txt -1) \".\") #f]\n    [(string=? (substring txt -1)\
    \ \",\") #f]\n    [(string=? (substring txt -1) \"!\") #f]\n    [(string=? (substring\
    \ txt -1) \"?\") #f]\n    [(string=? (substring txt -1) \":\") #f]\n    [(string=?\
    \ (substring txt -1) \";\") #f]\n    [(string=? (substring txt -1) \")\") #f]\n\
    \    [(string=? (substring txt -1) \"(\") #f]\n    [(string=? (substring txt -1)\
    \ \"]\") #f]\n    [(string=? (substring txt -1) \"[\") #f]\n    [(string=? (substring\
    \ txt -1) \"}\") #f]\n    [(string=? (substring txt -1) \"{\") #f]\n    [(string=?\
    \ (substring txt -1) \">\") #f]\n    [(string=? (substring txt -1) \"<\") #f]\n\
    \    [(string=? (substring txt -1) \"'\") #f]\n    [(string=? (substring txt -1)\
    \ \"\\\"\") #f]\n    [(string=? (substring txt -1) \"`\") #f]\n    [(string=?\
    \ (substring txt -1) \"~\") #f]\n    [(string=? (substring txt -1) \"^\") #f]\n\
    \    [(string=? (substring txt -1) \"*\") #f]\n    [(string=? (substring txt -1)\
    \ \"&\") #f]\n    [(string=? (substring txt -1) \"%\") #f]\n    [(string=? (substring\
    \ txt -1) \"$\") #f]\n    [(string=? (substring txt -1) \"#\") #f]\n    [(", " \
    \ (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic? (last txt)) (not (char-alphabetic?\
    \ (second (reverse txt))))) #t]\n    [else #f]))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic?\
    \ (last-char txt))\n          (not (char-alphabetic? (last-char (string-drop-right\
    \ txt 1)))))\n     #t]\n    [else #f]))\n", "  (let ((last-char (string-ref txt\
    \ (- (string-length txt) 1))))\n    (and (char-alphabetic? last-char)\n      \
    \   (not (char-whitespace? last-char)))))\n", "  (if (string=? txt \"\")\n   \
    \   #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n\
    \          (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n\
    \              #f\n              #t)\n          #f)))\n", "  (if (string=? txt\
    \ \"\")\n      #f\n      (let* ([txt-len (string-length txt)]\n             [last-char\
    \ (substring txt (- txt-len 1) txt-len)]\n             [prev-char (substring txt\
    \ (- txt-len 2) (- txt-len 1))])\n        (and (char-alphabetic? (string-&gt;char\
    \ last-char))\n             (not (char-alphabetic? (string-&gt;char prev-char)))))))\n\
    </code>\n", "  (cond\n    [(empty? txt) #f]\n    [(and (char-alphabetic? (last-char\
    \ txt))\n          (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1))))))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n\
    \    [(empty? (rest txt)) #f]\n    [(char-alphabetic? (last txt)) #t]\n    [else\
    \ (check_if_last_char_is_a_letter (rest txt))]))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 2)))\n              #f\n              #t)\n          #f)))\n", "  (cond\n  \
    \  [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (if (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1))))\n         #f\n    \
    \     #t)]\n    [else #f]))\n", "  (if (string=? txt \"\")\n      #f\n      (if\
    \ (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n          (if\
    \ (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n            \
    \  #f\n              #t)\n          #f)))\n", "  (if (string=? txt \"\")\n   \
    \   #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n\
    \          (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n\
    \              #f\n              #t)\n          #f)))\n", "  (cond\n    [(empty?\
    \ txt) #f]\n    [(and (char-alphabetic? (last-char txt))\n          (not (char-alphabetic?\
    \ (last-char (string-drop-right txt 1)))))\n     #t]\n    [else #f]))\n", "  (if\
    \ (string=? txt \"\")\n      #f\n      (if (char-alphabetic? (string-ref txt (-\
    \ (string-length txt) 1)))\n          (if (char-alphabetic? (string-ref txt (-\
    \ (string-length txt) 2)))\n              #f\n              #t)\n          #f)))\n",
  "  (let ([last-char (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (let ([last-char\
    \ (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n\
    \         (not (char-whitespace? last-char)))))\n", "  (cond\n    [(empty? txt)\
    \ #f]\n    [(char-alphabetic? (last-char txt))\n     (if (char-alphabetic? (last-char\
    \ (substring txt 0 (- (string-length txt) 1))))\n         #f\n         #t)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char\
    \ txt))\n     (cond\n       [(char-alphabetic? (last-char (substring txt 0 (-\
    \ (string-length txt) 1)))) #f]\n       [else #t])]\n    [else #f]))\n", "  (if\
    \ (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (- (string-length\
    \ txt) 1))))\n        (if (or (char-alphabetic? last-char) (char-numeric? last-char))\n\
    \            #f\n            (if (char-whitespace? last-char)\n              \
    \  (check_if_last_char_is_a_letter (substring txt 0 (- (string-length txt) 1)))\n\
    \                #t)))))\n", "  (if (string=? txt \"\")\n      #f\n      (let\
    \ ([last-char (string-ref txt (- (string-length txt) 1))])\n        (if (char-alphabetic?\
    \ last-char)\n            (if (char-whitespace? (string-ref txt (- (string-length\
    \ txt) 2)))\n                #t\n                #f)\n            #f))))\n", " \
    \ (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n    \
    \ (if (char-alphabetic? (last-char (substring txt 0 (- (string-length txt) 1))))\n\
    \         #f\n         #t)]\n    [else #f]))\n", "  (if (string=? txt \"\")\n\
    \      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 2)))\n              #f\n              #t)\n          #f)))\n", "  (cond\n  \
    \  [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (if (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1))))\n         #f\n    \
    \     #t)]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (and (char-alphabetic? (last-char txt))\n          (not\
    \ (char-alphabetic? (last-char (butlast txt)))))\n     ]\n    [else #f]))\n",
  "  (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (-\
    \ (string-length txt) 1))))\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (let ((last-char (string-ref txt (- (string-length txt) 1))))\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))\n       (not (char-alphabetic?\
    \ (last-char (string-drop-right txt 1))))))\n", "  (cond\n    [(empty? txt) #f]\n\
    \    [(char-alphabetic? (last-char txt))\n     (if (char-whitespace? (second-last-char\
    \ txt))\n         #t\n         #f)]\n    [else #f]))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (and (not (empty? txt))\n\
    \       (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))\n       (not (char-alphabetic? (last-char (string-drop-right txt 1))))))\n",
  "  (and (not (empty? txt))\n       (or (char-alphabetic? (last-char txt))\n    \
    \       (char-numeric? (last-char txt)))))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (cond\n    [(empty? txt)\
    \ #f]\n    [(char-alphabetic? (last-char txt))\n     (cond\n       [(empty? (rest\
    \ txt)) #t]\n       [(char-alphabetic? (last-char (rest txt))) #f]\n       [else\
    \ #t])]\n    [else #f]))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (and (not (char-alphabetic? (last-char (butlast txt))))\n\
    \          (not (char-whitespace? (last-char (butlast txt)))))\n     ]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic? (last-char\
    \ txt))\n     (and (not (char-alphabetic? (last-char (string-drop-right txt 1))))\n\
    \          (not (char-whitespace? (last-char (string-drop-right txt 1)))))\n \
    \    ]\n    [else #f]))\n", "  (cond\n    [(empty? txt) #f]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (and (not (char-alphabetic? (last-char (substring txt\
    \ 0 (- (string-length txt) 1)))))\n          (not (char-whitespace? (last-char\
    \ (substring txt 0 (- (string-length txt) 1))))))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? txt) #f]\n    [(char-alphabetic? (last-char txt))\n     (and\n \
    \     (char-alphabetic? (last-char txt))\n      (not (char-whitespace? (last-char\
    \ txt)))\n      (not (char-alphabetic? (last-char (butlast txt)))))\n     ]\n\
    \    [else #f]))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))\n       (not (char-alphabetic?\
    \ (last-char (string-drop-right txt 1))))))\n", "  (cond\n    [(empty? txt) #f]\n\
    \    [(char-alphabetic? (last-char txt))\n     (and (not (char-alphabetic? (last-char\
    \ (butlast txt))))\n          (not (char-whitespace? (last-char (butlast txt)))))\n\
    \     ]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
