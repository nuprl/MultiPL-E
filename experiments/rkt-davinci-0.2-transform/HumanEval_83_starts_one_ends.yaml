name: HumanEval_83_starts_one_ends
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return the count of the numbers\
  \ of n-digit\n;; positive integers that start or end with 1.\n(define (starts_one_ends\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
  \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal?\
  \ (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
  \ 5) 18000)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1))\n             (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(= n\
    \ 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends (- n 1)) (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1)) (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(=\
    \ n 2) 3]\n    [else (+ (starts_one_ends (- n 1))\n             (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1))\n             (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(= n\
    \ 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends (- n 1)) (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond [(= n 1) 2]\n        [(= n 2) 3]\n        [else (+\
    \ (starts_one_ends (- n 1))\n                 (starts_one_ends (- n 2)))]))\n",
  "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends (- n 1))\
    \ (starts_one_ends (- n 2)))]))\n", "  (cond [(= n 1) 2]\n        [(= n 2) 3]\n\
    \        [else (+ (starts_one_ends (- n 1))\n                 (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1))\n             (starts_one_ends (- n 2)))]))\n", "  (define (starts_one_ends-iter\
    \ n count)\n    (cond [(= n 1) (+ count 1)]\n          [(= n 2) (+ count 2)]\n\
    \          [else (starts_one_ends-iter (- n 1) (+ count (starts_one_ends-iter\
    \ (- n 2) 0)))]))\n  (starts_one_ends-iter n 0))\n", "  (define (helper n)\n \
    \   (cond [(= n 1) 2]\n          [(= n 2) 3]\n          [else (+ (helper (- n\
    \ 1)) (helper (- n 2)))]))\n  (helper n))\n", "  (if (= n 1)\n      1\n      (+\
    \ (expt 10 (- n 1))\n         (expt 9 (- n 1)))))\n", "  (define (starts_one_ends-helper\
    \ n acc)\n    (if (= n 0)\n        acc\n        (starts_one_ends-helper (- n 1)\
    \ (+ acc (expt 10 (- n 1))))))\n  (starts_one_ends-helper n 0))\n", "  (cond [(=\
    \ n 1) 2]\n        [(= n 2) 3]\n        [else (+ (expt 10 (- n 1)) (* 2 (expt\
    \ 10 (- n 2))))]))\n", "  (define (starts_one_ends-helper n acc)\n    (cond [(=\
    \ n 1) (+ 1 acc)]\n          [(= n 2) (+ 10 acc)]\n          [(= n 3) (+ 100 acc)]\n\
    \          [(= n 4) (+ 1000 acc)]\n          [(= n 5) (+ 10000 acc)]\n       \
    \   [(= n 6) (+ 100000 acc)]\n          [(= n 7) (+ 1000000 acc)]\n          [(=\
    \ n 8) (+ 10000000 acc)]\n          [(= n 9) (+ 100000000 acc)]\n          [(=\
    \ n 10) (+ 1000000000 acc)]\n          [else (starts_one_ends-helper (- n 1) (+\
    \ (expt 10 (- n 2)) acc))]))\n  (starts_one_ends-helper n 0))\n", "  (let loop\
    \ ([k n] [count 0])\n    (cond [(= k 1) (+ count 1)]\n          [(= k 2) (+ count\
    \ 2)]\n          [else\n           (loop (- k 1) (+ count (* k 10)))])))\n", " \
    \ (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends (- n\
    \ 1))\n             (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n\
    \    [(= n 2) 3]\n    [else (+ (starts_one_ends (- n 1)) (starts_one_ends (- n\
    \ 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1))\n             (starts_one_ends (- n 2)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
