name: HumanEval_57_monotonic
language: rkt
prompt: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
  \ or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list\
  \ 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t\n(define (monotonic\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
  \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
  \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n   \
  \ (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list\
  \ 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9\
  \ 9)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (and (monotonic (rest l)) (> (first l) (second l)))]\n    [(<\
    \ (first l) (second l)) (and (monotonic (rest l)) (< (first l) (second l)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [(<\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (< (second l) (third l))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n    \
    \          (< (second l) (third l))))]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (> (second l) (third l))))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n\
    \        [(empty? (rest l)) #t]\n        [(or (and (> (first l) (second l)) (monotonic\
    \ (rest l)))\n             (and (< (first l) (second l)) (monotonic (rest l))))\
    \ #t]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n   \
    \       (or (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(and (>= (first l)\
    \ (second l)) (monotonic (rest l))) #t]\n    [(and (<= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l))\n         (and (monotonic (rest\
    \ l))\n              (or (= (first l) (second l))\n                  (< (first\
    \ l) (second l))))]\n        [else\n         (and (monotonic (rest l))\n     \
    \         (or (= (first l) (second l))\n                  (> (first l) (second\
    \ l))))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n   \
    \ [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n      \
    \  [(empty? (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-dec (rest\
    \ l))]\n        [(< (first l) (second l)) (monotonic-inc (rest l))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second l))\
    \ (monotonic (rest l)))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l)) (positive? (sub1 (first\
    \ l) (second l))))]\n    [(and (negative? (sub1 (first l))) (negative? (sub1 (second\
    \ l))))\n     (and (monotonic (rest l)) (negative? (sub1 (first l) (second l))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond ((null? l) #t)\n   \
    \     ((null? (cdr l)) #t)\n        ((< (car l) (cadr l)) (monotonic (cdr l)))\n\
    \        ((> (car l) (cadr l)) (monotonic (cdr l)))\n        (else #f)))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (>\
    \ (first l) (second l)) (monotonic (rest l)))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (<= (first l) (second l)))]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (>\
    \ (first l) (second l)) (monotonic (rest l)))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (>\
    \ (first l) (second l)) (monotonic (rest l))))\n     #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr l))\
    \ (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr\
    \ l)) #t]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (equal? (first l) (second l))\n\
    \              (positive? (- (second l) (first l)))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (equal? (first l) (second\
    \ l))\n              (negative? (- (second l) (first l)))))]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n        [(<\
    \ (first l) (second l)) (monotonic-increasing (rest l))]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n  \
    \      [(empty? (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l)\
    \ (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (> (second\
    \ l) (third l))))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(< (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car\
    \ l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l))\
    \ #t]\n        [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n  \
    \      [(< (first l) (second l)) (monotonic-increasing (rest l))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n    [(null?\
    \ l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (sub1 (first l))) (positive? (sub1 (second l))))\n     (and (positive? (sub1\
    \ (first l))) (monotonic (rest l)))]\n    [(and (negative? (sub1 (first l))) (negative?\
    \ (sub1 (second l))))\n     (and (negative? (sub1 (first l))) (monotonic (rest\
    \ l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n  \
    \  [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (positive? (sub1 (first l))) (positive? (sub1 (second l)))) (monotonic\
    \ (rest l))]\n    [(and (negative? (sub1 (first l))) (negative? (sub1 (second\
    \ l)))) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) #t]\n \
    \   [else\n     (let* ([first (first l)]\n            [second (second l)]\n  \
    \          [rest (rest (rest l))])\n       (cond\n         [(> first second) (and\
    \ (monotonic (cons second rest)) #t)]\n         [(< first second) (and (monotonic\
    \ (cons second rest)) #t)]\n         [else #f]))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (define (monotonic-helper l increasing)\n    (cond\n \
    \     [(empty? l) #t]\n      [(and (increasing? (first l) (second l)) increasing)\
    \ (monotonic-helper (rest l) increasing)]\n      [(and (decreasing? (first l)\
    \ (second l)) (not increasing)) (monotonic-helper (rest l) increasing)]\n    \
    \  [else #f]))\n  (monotonic-helper l #t))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n    \
    \          (< (second l) (third l))))]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (> (second l) (third l))))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n\
    \        [(empty? (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing\
    \ l)]\n        [(< (first l) (second l)) (monotonic-increasing l)]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n    [(>\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (> (second l) (third l))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(= (first l) (second l)) (monotonic (rest l))]\n        [(> (first l)\
    \ (second l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n        [(<\
    \ (first l) (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(< (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (= (second l) (third l))))]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic\
    \ (rest l)))\n         (and (> (first l) (second l)) (monotonic (rest l))))\n\
    \     #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n   \
    \       (or (= (first l) (second l))\n              (> (first l) (second l))))]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (= (first l) (second l))\n              (< (first l) (second l))))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive?\
    \ (sub1 (second l))))\n     (and (positive? (sub1 (first l))) (monotonic (rest\
    \ l)))]\n    [(and (negative? (sub1 (first l))) (negative? (sub1 (second l))))\n\
    \     (and (negative? (sub1 (first l))) (monotonic (rest l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (<= (first l) (second l)))]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (>= (first l) (second l)))]\n    [else\n   \
    \  (and (monotonic (rest l))\n          (= (first l) (second l)))]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr\
    \ l)) #t]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (let loop ([l l] [prev (car\
    \ l)] [increasing? #t])\n    (cond\n      [(null? l) #t]\n      [(and (not (null?\
    \ (cdr l)))\n            (and (not (equal? (car l) prev))\n                 (not\
    \ (equal? (car l) (cadr l)))))\n       #f]\n      [(and (not (null? (cdr l)))\n\
    \            (not (equal? (car l) prev))\n            (equal? (car l) (cadr l)))\n\
    \       (loop (cdr l) (car l) #t)]\n      [(and (not (null? (cdr l)))\n      \
    \      (not (equal? (car l) prev))\n            (not (equal? (car l) (cadr l))))\n\
    \       (loop (cdr l) (car l) #f)]\n      [(and (not (null? (cdr l)))\n      \
    \      (equal? (car l) prev)\n            (equal? (car l) (cadr l)))\n       (loop\
    \ (cdr l) (car l) increasing?)]\n      [(and (not (null? (cdr l)))\n         \
    \   (equal? (car l) prev)\n            (not (equal? (car l) (cadr l))))\n    \
    \   (if increasing?\n           (loop (cdr l) (car l) #f)\n           #f)])))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n", "  (define (monotonic-helper\
    \ l increasing)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n\
    \      [(and increasing (and (<= (first l) (second l)) (monotonic-helper (rest\
    \ l) increasing))) #t]\n      [(and (not increasing) (and (>= (first l) (second\
    \ l)) (monotonic-helper (rest l) increasing))) #t]\n      [else #f]))\n  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second\
    \ l)) (monotonic-helper (rest l) #t)) #t]\n    [(and (>= (first l) (second l))\
    \ (monotonic-helper (rest l) #f)) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (sub1 (first l))) (negative? (sub1 (second l)))) #f]\n    [(and (negative? (sub1\
    \ (first l))) (positive? (sub1 (second l)))) #f]\n    [else (monotonic (rest l))]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n  \
    \      [(empty? (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l))\
    \ #t]\n        [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n  \
    \      [(< (first l) (second l)) (monotonic-increasing (rest l))]\n        [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n       \
    \ [(> (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest\
    \ l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second l))\
    \ (monotonic (rest l))))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (monotonic (rest (rest\
    \ l))))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (monotonic (rest\
    \ (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (if (null? l)\n      #t\n      (let ([first\
    \ (car l)]\n            [rest (cdr l)])\n        (if (null? rest)\n          \
    \  #t\n            (let ([second (car rest)])\n              (if (and (<= first\
    \ second) (monotonic rest))\n                  #t\n                  #f))))))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or\n      (and\n        (> (first l) (second l))\n        (monotonic (rest\
    \ l)))\n      (and\n        (< (first l) (second l))\n        (monotonic (rest\
    \ l))))\n      #t]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null?\
    \ (cdr l)) #t]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n", "  (cond [(empty? l)\
    \ #t]\n        [(empty? (rest l)) #t]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [(< (first l) (second l)) (monotonic (rest l))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing (rest\
    \ l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (< (first l) (second\
    \ l))\n         (> (first l) (second l)))\n     (and (monotonic (rest l)) #t)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n        [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (define (monotonic-helper\
    \ l inc)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n   \
    \   [(and inc (or (< (first l) (second l))\n                    (> (first l) (second\
    \ l))))\n       (monotonic-helper (rest l) #f)]\n      [(and (not inc) (or (<=\
    \ (first l) (second l))\n                          (>= (first l) (second l))))\n\
    \       (monotonic-helper (rest l) #f)]\n      [else #f]))\n  (monotonic-helper\
    \ l #t))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n\
    \    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(< (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l))\
    \ #t]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l))\
    \ (monotonic (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n  \
    \  [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n \
    \       [(> (car l) (cadr l))\n         (and (monotonic (cdr l))\n           \
    \   (or (= (car l) (cadr l))\n                  (not (monotonic (cdr l)))))\n\
    \         ]\n        [(< (car l) (cadr l))\n         (and (monotonic (cdr l))\n\
    \              (or (= (car l) (cadr l))\n                  (not (monotonic (cdr\
    \ l)))))\n         ]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (> (first l) (second l)) (monotonic (rest l)))\n         (and (<\
    \ (first l) (second l)) (monotonic (rest l))))\n     #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (monotonic\
    \ (rest (rest l))))]\n    [(< (first l) (second l)) (and (monotonic (rest l))\
    \ (monotonic (rest (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest\
    \ l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
