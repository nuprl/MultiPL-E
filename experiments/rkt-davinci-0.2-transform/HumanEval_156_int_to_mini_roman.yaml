name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman\
  \ 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number\
    \ 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n\
    \      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number\
    \ 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n   \
    \   [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"\
    v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                          \
    \ (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (define (int_to_mini_roman_helper number)\n    (cond ((= number\
    \ 0) \"\")\n          ((= number 1) \"i\")\n          ((= number 2) \"ii\")\n\
    \          ((= number 3) \"iii\")\n          ((= number 4) \"iv\")\n         \
    \ ((= number 5) \"v\")\n          ((= number 6) \"vi\")\n          ((= number\
    \ 7) \"vii\")\n          ((= number 8) \"viii\")\n          ((= number 9) \"ix\"\
    )\n          ((= number 10) \"x\")\n          ((= number 20) \"xx\")\n       \
    \   ((= number 30) \"xxx\")\n          ((= number 40) \"xl\")\n          ((= number\
    \ 50) \"l\")\n          ((= number 60) \"lx\")\n          ((= number 70) \"lxx\"\
    )\n          ((= number 80) \"lxxx\")\n          ((= number 90) \"xc\")\n    \
    \      ((= number 100) \"c\")\n          ((= number 200) \"cc\")\n          ((=\
    \ number 300) \"ccc\")\n          ((= number 400) \"cd\")\n          ((= number\
    \ 500) \"d\")\n          ((= number 600) \"dc\")\n          ((= number 700) \"\
    dcc\")\n          ((= number 800) \"dccc\")\n          ((= number 900) \"cm\"\
    )\n          ((= number 1000) \"m\")\n          (else (string-append (int_to_mini_roman_helper\
    \ (/ number 10))\n                               (int_to_mini_roman_helper (modulo\
    \ number 10))))))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) \"\"\
    ]\n      [(= number 1) \"i\"]\n      [(= number 2) \"ii\"]\n      [(= number 3)\
    \ \"iii\"]\n      [(= number 4) \"iv\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 6) \"vi\"]\n      [(= number 7) \"vii\"]\n      [(= number 8) \"viii\"\
    ]\n      [(= number 9) \"ix\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 20) \"xx\"]\n      [(= number 30) \"xxx\"]\n      [(= number 40) \"xl\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 60) \"lx\"]\n      [(= number 70)\
    \ \"lxx\"]\n      [(= number 80) \"lxxx\"]\n      [(= number 90) \"xc\"]\n   \
    \   [(= number 100) \"c\"]\n      [(= number 200) \"cc\"]\n      [(= number 300)\
    \ \"ccc\"]\n      [(= number 400) \"cd\"]\n      [(= number 500) \"d\"]\n    \
    \  [(= number 600) \"dc\"]\n      [(= number 700) \"dcc\"]\n      [(= number 800)\
    \ \"dccc\"]\n      [(= number 900) \"cm\"]\n      [(= number 1000) \"m\"]))\n\
    \  (string-downcase (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append\n\
    \              (int_to_mini_roman_helper (quotient number 10))\n             \
    \ (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (let ([number-string (number->string number)])\n    (define\
    \ (int-to-mini-roman-helper number-string)\n      (cond\n        [(= (string-length\
    \ number-string) 1)\n         (cond\n           [(= (string->number number-string)\
    \ 1) \"i\"]\n           [(= (string->number number-string) 2) \"ii\"]\n      \
    \     [(= (string->number number-string) 3) \"iii\"]\n           [(= (string->number\
    \ number-string) 4) \"iv\"]\n           [(= (string->number number-string) 5)\
    \ \"v\"]\n           [(= (string->number number-string) 6) \"vi\"]\n         \
    \  [(= (string->number number-string) 7) \"vii\"]\n           [(= (string->number\
    \ number-string) 8) \"viii\"]\n           [(= (string->number number-string) 9)\
    \ \"ix\"])]\n        [(= (string-length number-string) 2)\n         (cond\n  \
    \         [(= (string->number (substring number-string 0 1)) 1)\n            (string-append\
    \ \"x\" (int-to-mini-roman-helper (substring number-string 1)))]\n           [(=\
    \ (string->number (substring number-string 0 1)) 2)\n            (string-append\
    \ \"xx\" (int-to-mini-roman-helper (substring number-string 1)))]\n          \
    \ [(= (string->number (substring number-string 0 1)) 3)\n            (string-append\
    \ \"xxx\" (int-to-mini-roman-helper (substring number-string 1)))]\n         \
    \  [(= (string->number (substring number-string 0 1)) 4)\n            (string-append\
    \ \"xl\" (int-to-mini-roman-helper (substring number-string 1)))]\n          \
    \ [(= (string->number (substring number-string 0 1)) 5)\n            (string-append\
    \ \"l\" (int-to-mini-roman-helper (substring number-string 1)))]\n           [(=\
    \ (string->number (substring number-string 0 1)) 6)\n            (string-append\
    \ \"lx\" (int-to-mini-roman-helper (", "  (define (int_to_mini_roman_helper number)\n\
    \    (cond\n      [(= number 0) \"\"]\n      [(= number 1) \"i\"]\n      [(= number\
    \ 2) \"ii\"]\n      [(= number 3) \"iii\"]\n      [(= number 4) \"iv\"]\n    \
    \  [(= number 5) \"v\"]\n      [(= number 6) \"vi\"]\n      [(= number 7) \"vii\"\
    ]\n      [(= number 8) \"viii\"]\n      [(= number 9) \"ix\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 20) \"xx\"]\n      [(= number 30) \"xxx\"]\n  \
    \    [(= number 40) \"xl\"]\n      [(= number 50) \"l\"]\n      [(= number 60)\
    \ \"lx\"]\n      [(= number 70) \"lxx\"]\n      [(= number 80) \"lxxx\"]\n   \
    \   [(= number 90) \"xc\"]\n      [(= number 100) \"c\"]\n      [(= number 200)\
    \ \"cc\"]\n      [(= number 300) \"ccc\"]\n      [(= number 400) \"cd\"]\n   \
    \   [(= number 500) \"d\"]\n      [(= number 600) \"dc\"]\n      [(= number 700)\
    \ \"dcc\"]\n      [(= number 800) \"dccc\"]\n      [(= number 900) \"cm\"]\n \
    \     [(= number 1000) \"m\"]\n      [else (int_to_mini_roman_helper (- number\
    \ 1000)) \"m\"]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) \"\"\
    ]\n      [(= number 1) \"i\"]\n      [(= number 2) \"ii\"]\n      [(= number 3)\
    \ \"iii\"]\n      [(= number 4) \"iv\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 6) \"vi\"]\n      [(= number 7) \"vii\"]\n      [(= number 8) \"viii\"\
    ]\n      [(= number 9) \"ix\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 11) \"xi\"]\n      [(= number 12) \"xii\"]\n      [(= number 13) \"xiii\"]\n\
    \      [(= number 14) \"xiv\"]\n      [(= number 15) \"xv\"]\n      [(= number\
    \ 16) \"xvi\"]\n      [(= number 17) \"xvii\"]\n      [(= number 18) \"xviii\"\
    ]\n      [(= number 19) \"xix\"]\n      [(= number 20) \"xx\"]\n      [(= number\
    \ 30) \"xxx\"]\n      [(= number 40) \"xl\"]\n      [(= number 50) \"l\"]\n  \
    \    [(= number 60) \"lx\"]\n      [(= number 70) \"lxx\"]\n      [(= number 80)\
    \ \"lxxx\"]\n      [(= number 90) \"xc\"]\n      [(= number 100) \"c\"]\n    \
    \  [(= number 200) \"cc\"]\n      [(= number 300) \"ccc\"]\n      [(= number 400)\
    \ \"cd\"]\n      [(= number 500) \"d\"]\n      [(= number 600) \"dc\"]\n     \
    \ [(= number 700) \"dcc\"]\n      [(= number 800) \"dccc\"]\n      [(= number\
    \ 900) \"cm\"]\n      [(= number 1000) \"m\"]))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n    \
    \  [(= number 0) \"\"]\n      [(= number 1) \"i\"]\n      [(= number 2) \"ii\"\
    ]\n      [(= number 3) \"iii\"]\n      [(= number 4) \"iv\"]\n      [(= number\
    \ 5) \"v\"]\n      [(= number 6) \"vi\"]\n      [(= number 7) \"vii\"]\n     \
    \ [(= number 8) \"viii\"]\n      [(= number 9) \"ix\"]\n      [(= number 10) \"\
    x\"]\n      [(= number 11) \"xi\"]\n      [(= number 12) \"xii\"]\n      [(= number\
    \ 13) \"xiii\"]\n      [(= number 14) \"xiv\"]\n      [(= number 15) \"xv\"]\n\
    \      [(= number 16) \"xvi\"]\n      [(= number 17) \"xvii\"]\n      [(= number\
    \ 18) \"xviii\"]\n      [(= number 19) \"xix\"]\n      [(= number 20) \"xx\"]\n\
    \      [(= number 30) \"xxx\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 50) \"l\"]\n      [(= number 60) \"lx\"]\n      [(= number 70) \"lxx\"]\n  \
    \    [(= number 80) \"lxxx\"]\n      [(= number 90) \"xc\"]\n      [(= number\
    \ 100) \"c\"]\n      [(= number 200) \"cc\"]\n      [(= number 300) \"ccc\"]\n\
    \      [(= number 400) \"cd\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 600) \"dc\"]\n      [(= number 700) \"dcc\"]\n      [(= number 800) \"dccc\"\
    ]\n      [(= number 900) \"cm\"]\n      [(= number 1000) \"m\"]\n      [(= number\
    \ 2000) \"mm\"]\n      [(= number 3000) \"mmm\"]\n      [(= number 4000) \"mv\"\
    ]\n      [(= number 5000) \"v\"]\n      [(= number 6000) \"vm\"]\n      [(= number\
    \ 7000) \"vmm\"]\n      [(= number 8000) \"vmmm\"]\n      [(= number 9000) \"\
    mx\"]\n      [else (string-append (", "  (define (int_to_mini_roman-helper number)\n\
    \    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n   \
    \   [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100)\
    \ \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(=\
    \ number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"\
    ]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1)\
    \ \"i\"]\n      [else (append (int_to_mini_roman-helper (quotient number 10))\n\
    \                    (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-downcase\
    \ (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond ((= number 0) \"\")\n          ((= number 1) \"i\")\n   \
    \       ((= number 2) \"ii\")\n          ((= number 3) \"iii\")\n          ((=\
    \ number 4) \"iv\")\n          ((= number 5) \"v\")\n          ((= number 6) \"\
    vi\")\n          ((= number 7) \"vii\")\n          ((= number 8) \"viii\")\n \
    \         ((= number 9) \"ix\")\n          ((= number 10) \"x\")\n          ((=\
    \ number 11) \"xi\")\n          ((= number 12) \"xii\")\n          ((= number\
    \ 13) \"xiii\")\n          ((= number 14) \"xiv\")\n          ((= number 15) \"\
    xv\")\n          ((= number 16) \"xvi\")\n          ((= number 17) \"xvii\")\n\
    \          ((= number 18) \"xviii\")\n          ((= number 19) \"xix\")\n    \
    \      ((= number 20) \"xx\")\n          ((= number 30) \"xxx\")\n          ((=\
    \ number 40) \"xl\")\n          ((= number 50) \"l\")\n          ((= number 60)\
    \ \"lx\")\n          ((= number 70) \"lxx\")\n          ((= number 80) \"lxxx\"\
    )\n          ((= number 90) \"xc\")\n          ((= number 100) \"c\")\n      \
    \    ((= number 200) \"cc\")\n          ((= number 300) \"ccc\")\n          ((=\
    \ number 400) \"cd\")\n          ((= number 500) \"d\")\n          ((= number\
    \ 600) \"dc\")\n          ((= number 700) \"dcc\")\n          ((= number 800)\
    \ \"dccc\")\n          ((= number 900) \"cm\")\n          ((= number 1000) \"\
    m\")\n          ((= number 2000) \"mm\")\n          ((= number 3000) \"mmm\")\n\
    \          ((= number 4000) \"mmmm\")\n          ((= number 5000) \"mmmmm\")\n\
    \          ((= number 6000) \"mmmmmm\")\n          ((= number 7000) \"mmmmmmm\"\
    )\n          ((= number 8000) \"mmmmmmmm\")\n          ((= number 9000) \"mmmmmmmmm\"\
    )\n          ((= number 10000) \"", "  (define (int_to_mini_roman-helper number)\n\
    \    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n   \
    \   [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100)\
    \ \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(=\
    \ number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"\
    ]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1)\
    \ \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient number\
    \ 10))\n                           (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) \"m\"]\n\
    \      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number 10)\
    \ \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10)) (int_to_mini_roman_helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"\
    xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70)\
    \ \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(=\
    \ number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"\
    ]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600)\
    \ \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(=\
    \ number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [(= number 2000) \"mm\"\
    ]\n    [(= number 3000) \"mmm\"]\n    [(= number 4000) \"mv\"]\n    [(= number\
    \ 5000) \"v\"]\n    [(= number 6000) \"vm\"]\n    [(= number 7000) \"vmm\"]\n\
    \    [(= number 8000) \"vmmm\"]\n    [(= number 9000) \"mx\"]\n    [(= number\
    \ 10000) \"x\"]\n    [(= number 20000) \"xx\"]\n    [(= number 30000) \"xxx\"\
    ]\n    [(", "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(=\
    \ number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"\
    d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number\
    \ 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n   \
    \   [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"\
    v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                          \
    \ (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n    \
    \  [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500)\
    \ \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(=\
    \ number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"\
    ]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number\
    \ 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else\
    \ (string-append (int_to_mini_roman-helper (quotient number 10))\n           \
    \                (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-downcase\
    \ (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
