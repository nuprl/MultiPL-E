name: HumanEval_153_Strongest_Extension
language: rkt
prompt: "#lang racket\n\n;; You will be given the name of a class (a string) and a\
  \ list of extensions.\n;; The extensions are to be used to load additional classes\
  \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
  \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
  \ number of lowercase letters \n;; in the extension's name, the strength is given\
  \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
  \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are\
  \ two or more extensions with the same strength, you should\n;; choose the one that\
  \ comes first in the list.\n;; For example, if you are given \"Slices\" as the class\
  \ and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then\
  \ you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest\
  \ extension \n;; (its strength is -1).\n;; Example:\n;; >>> (Strongest_Extension\
  \ \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n;; \"my_class.AA\"\n(define (Strongest_Extension\
  \ class_name extensions)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
  \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
  \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
  \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
  \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
  \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\"\
  \ (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate\
  \ \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal?\
  \ (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"\
  -_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
  \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
  \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
  \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
completions: ["  (define (strength str)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [smalls (count (lambda (c) (char-lower-case? c)) str)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (define (strongest-extension-index\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (strongest-extension-index extensions))))\n", " \
    \ (let ([extensions (map string->list extensions)])\n    (define (strength ext)\n\
    \      (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n          \
    \  [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n        (- caps smalls)))\n\
    \    (define (strongest_extension extensions)\n      (if (null? extensions)\n\
    \          \"\"\n          (let ([ext (car extensions)]\n                [rest\
    \ (cdr extensions)])\n            (let ([strongest (strongest_extension rest)])\n\
    \              (if (> (strength ext) (strength strongest))\n                 \
    \ (list->string ext)\n                  strongest)))))\n    (string-append class_name\
    \ \".\" (strongest_extension extensions))))\n", "  (define (strength extension)\n\
    \    (define (count-uppercase str)\n      (define (count-uppercase-iter str count)\n\
    \        (cond\n          [(empty? str) count]\n          [(char-upper-case? (first\
    \ str)) (count-uppercase-iter (rest str) (+ count 1))]\n          [else (count-uppercase-iter\
    \ (rest str) count)]))\n    (count-uppercase-iter str 0))\n    (define (count-lowercase\
    \ str)\n      (define (count-lowercase-iter str count)\n        (cond\n      \
    \    [(empty? str) count]\n          [(char-lower-case? (first str)) (count-lowercase-iter\
    \ (rest str) (+ count 1))]\n          [else (count-lowercase-iter (rest str) count)]))\n\
    \    (count-lowercase-iter str 0))\n    (/ (- (count-uppercase extension) (count-lowercase\
    \ extension)) 1.0))\n  (define (strongest-extension-iter extensions strongest-extension)\n\
    \    (cond\n      [(empty? extensions) strongest-extension]\n      [(> (strength\
    \ (first extensions)) (strength strongest-extension)) (strongest-extension-iter\
    \ (rest extensions) (first extensions))]\n      [else (strongest-extension-iter\
    \ (rest extensions) strongest-extension)]))\n  (string-append class_name \".\"\
    \ (strongest-extension-iter extensions (first extensions))))\n", "  (define (strength\
    \ str)\n    (let ([caps (count-if char-upper-case? str)]\n          [smalls (count-if\
    \ char-lower-case? str)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n          (sm\
    \ (count-if char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ lst)\n    (cond\n      [(empty? lst) (error \"No extensions given\")]\n    \
    \  [(= (length lst) 1) (first lst)]\n      [else (let ((s (strength (first lst)))\n\
    \                   (s2 (strength (second lst))))\n              (if (> s s2)\n\
    \                  (first lst)\n                  (strongest-extension (rest lst))))]))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength_of_extension extension)\n    (let ((caps (string-count extension #\\\
    A #\\Z))\n          (smalls (string-count extension #\\a #\\z)))\n      (- caps\
    \ smalls)))\n  (define (strongest_extension extensions)\n    (if (null? extensions)\n\
    \        \"\"\n        (let ((extension (car extensions))\n              (rest\
    \ (cdr extensions)))\n          (if (null? rest)\n              extension\n  \
    \            (let ((strength (strength_of_extension extension))\n            \
    \        (rest_strength (strength_of_extension (strongest_extension rest))))\n\
    \                (if (> strength rest_strength)\n                    extension\n\
    \                    (strongest_extension rest)))))))\n  (string-append class_name\
    \ \".\" (strongest_extension extensions)))\n", "  (define (strength extension)\n\
    \    (let ((cap 0) (sm 0))\n      (for ([c (in-string extension)])\n        (if\
    \ (char-upper-case? c)\n            (set! cap (+ cap 1))\n            (set! sm\
    \ (+ sm 1))))\n      (/ cap sm)))\n  (define (strongest_extension extensions)\n\
    \    (let ((strongest_extension (car extensions))\n          (strongest_extension_strength\
    \ (strength (car extensions))))\n      (for ([extension (in-list (cdr extensions))])\n\
    \        (let ((extension_strength (strength extension)))\n          (if (> extension_strength\
    \ strongest_extension_strength)\n              (begin (set! strongest_extension\
    \ extension)\n                     (set! strongest_extension_strength extension_strength)))))\n\
    \      strongest_extension))\n  (string-append class_name \".\" (strongest_extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) ext)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- cap sm)))\n  (define (strongest_extension extensions)\n\
    \    (if (null? extensions)\n        \"No extensions\"\n        (let ([ext (car\
    \ extensions)]\n              [rest (cdr extensions)])\n          (if (null? rest)\n\
    \              ext\n              (let ([strongest (strongest_extension rest)])\n\
    \                (if (> (strength ext) (strength strongest))\n               \
    \     ext\n                    strongest))))))\n  (string-append class_name \"\
    .\" (strongest_extension extensions)))\n", "  (define (strength ext)\n    (let\
    \ ((cap (count-if char-upper-case? ext))\n          (sm (count-if char-lower-case?\
    \ ext)))\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (if (null? extensions)\n        \"\"\n        (let ((ext (car extensions))\n\
    \              (rest (cdr extensions)))\n          (if (null? rest)\n        \
    \      ext\n              (let ((strongest-rest (strongest-extension-name rest)))\n\
    \                (if (> (strength ext) (strength strongest-rest))\n          \
    \          ext\n                    strongest-rest))))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (let ([strongest-extension\
    \ (car extensions)]\n        [strongest-extension-strength 0])\n    (for ([extension\
    \ extensions])\n      (let ([extension-strength (strength extension)])\n     \
    \   (if (> extension-strength strongest-extension-strength)\n            (begin\n\
    \              (set! strongest-extension extension)\n              (set! strongest-extension-strength\
    \ extension-strength)))))\n    (string-append class_name \".\" strongest-extension)))\n",
  "  (define (strength str)\n    (let ((caps (count-if char-upper-case? str))\n  \
    \        (smalls (count-if char-lower-case? str)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n", "  (define (count_upper s)\n    (define (count_upper_iter\
    \ s count)\n      (if (empty? s)\n          count\n          (if (char-upper-case?\
    \ (first s))\n              (count_upper_iter (rest s) (+ count 1))\n        \
    \      (count_upper_iter (rest s) count))))\n    (count_upper_iter s 0))\n  (define\
    \ (count_lower s)\n    (define (count_lower_iter s count)\n      (if (empty? s)\n\
    \          count\n          (if (char-lower-case? (first s))\n              (count_lower_iter\
    \ (rest s) (+ count 1))\n              (count_lower_iter (rest s) count))))\n\
    \    (count_lower_iter s 0))\n  (define (strength s)\n    (/ (- (count_upper s)\
    \ (count_lower s)) (string-length s)))\n  (define (strongest_extension_iter extensions\
    \ strongest_extension)\n    (if (empty? extensions)\n        (string-append class_name\
    \ \".\" strongest_extension)\n        (if (> (strength (first extensions)) (strength\
    \ strongest_extension))\n            (strongest_extension_iter (rest extensions)\
    \ (first extensions))\n            (strongest_extension_iter (rest extensions)\
    \ strongest_extension))))\n  (strongest_extension_iter extensions (first extensions)))\n",
  "  (define (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n   \
    \       (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ extensions)\n    (if (null? extensions)\n        \"\"\n        (let ((ext (car\
    \ extensions))\n              (rest (cdr extensions)))\n          (if (null? rest)\n\
    \              ext\n              (let ((next-ext (strongest-extension rest)))\n\
    \                (if (> (strength ext) (strength next-ext))\n                \
    \    ext\n                    next-ext))))))\n  (string-append class_name \".\"\
    \ (strongest-extension extensions)))\n", "  (define (count-upper-case str)\n \
    \   (let loop ((i 0) (count 0))\n      (if (= i (string-length str))\n       \
    \   count\n          (if (char-upper-case? (string-ref str i))\n             \
    \ (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define\
    \ (count-lower-case str)\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char-lower-case? (string-ref str i))\n\
    \              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (strength str)\n    (/ (- (count-upper-case str) (count-lower-case\
    \ str)) 1.0))\n  (define (strongest-extension extensions)\n    (if (null? extensions)\n\
    \        \"\"\n        (let ((strongest-extension (car extensions)))\n       \
    \   (for-each (lambda (extension)\n                      (if (< (strength extension)\
    \ (strength strongest-extension))\n                          (set! strongest-extension\
    \ extension)))\n                    (cdr extensions))\n          strongest-extension)))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength str)\n    (let ([caps (count-if char-upper-case? str)]\n         \
    \ [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n  (define\
    \ (strongest-extension lst)\n    (let ([strongest (car lst)]\n          [strength\
    \ (strength (car lst))])\n      (for ([ext (cdr lst)])\n        (let ([str (strength\
    \ ext)])\n          (when (> str strength)\n            (set! strongest ext)\n\
    \            (set! strength str))))\n      strongest))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ((cap (count-if char-upper-case? ext))\n          (sm (count-if char-lower-case?\
    \ ext)))\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (if (null? extensions)\n        \"\"\n        (let ((ext (car extensions))\n\
    \              (rest (cdr extensions)))\n          (if (or (null? rest)\n    \
    \              (> (strength ext) (strength (car rest))))\n              ext\n\
    \              (strongest-extension-name rest)))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (let ((cap (count-if char-upper-case? ext))\n          (sm (count-if char-lower-case?\
    \ ext)))\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n", "  (define (strength\
    \ str)\n    (let ([cap (count-if char-upper-case? str)]\n          [sm (count-if\
    \ char-lower-case? str)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (count-caps str)\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char-upper-case? (string-ref str i))\n\
    \              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (count-smalls str)\n    (let loop ((i 0) (count 0))\n      (if (= i\
    \ (string-length str))\n          count\n          (if (char-lower-case? (string-ref\
    \ str i))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i\
    \ 1) count)))))\n  (define (strength str)\n    (/ (- (count-caps str) (count-smalls\
    \ str)) (string-length str)))\n  (define (strongest-extension lst)\n    (let loop\
    \ ((lst lst) (max-strength -1) (max-extension \"\"))\n      (if (null? lst)\n\
    \          max-extension\n          (let ((str (car lst))\n                (strength\
    \ (strength (car lst))))\n            (if (> strength max-strength)\n        \
    \        (loop (cdr lst) strength str)\n                (loop (cdr lst) max-strength\
    \ max-extension))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([cap (count-if\
    \ char-upper-case? extension)]\n          [sm (count-if char-lower-case? extension)])\n\
    \      (- cap sm)))\n  (define (strongest-extension extensions)\n    (cond\n \
    \     [(empty? extensions) (error \"No extensions\")]\n      [(empty? (rest extensions))\
    \ (first extensions)]\n      [else\n       (let ([ext1 (first extensions)]\n \
    \            [ext2 (strongest-extension (rest extensions))])\n         (if (>\
    \ (strength ext1) (strength ext2))\n             ext1\n             ext2))]))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
