name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  ;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>>\
  \ (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>>\
  \ (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello\
  \ world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list\
  \ \"Uncle\")\n(define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel?\
    \ (first s)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words s n)\n    (cond\n      [(empty? s) empty]\n\
    \      [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n      [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s) n))\n", "  (define (is-consonant? c)\n    (cond ((char=? c #\\a) #f)\n  \
    \        ((char=? c #\\e) #f)\n          ((char=? c #\\i) #f)\n          ((char=?\
    \ c #\\o) #f)\n          ((char=? c #\\u) #f)\n          (else #t)))\n  (define\
    \ (count-consonants word)\n    (if (string-empty? word)\n        0\n        (if\
    \ (is-consonant? (string-ref word 0))\n            (+ 1 (count-consonants (substring\
    \ word 1)))\n            (count-consonants (substring word 1)))))\n  (define (select-words-helper\
    \ s n)\n    (if (string-empty? s)\n        '()\n        (let ((word (string-trim\
    \ s)))\n          (if (= n (count-consonants word))\n              (cons word\
    \ (select-words-helper (substring s (string-length word)) n))\n              (select-words-helper\
    \ (substring s (string-length word)) n)))))\n  (select-words-helper s n))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (count-consonants word)\n\
    \       (cond\n         [(empty? word) 0]\n         [(member (first word) '(#\\\
    a #\\e #\\i #\\o #\\u)) (count-consonants (rest word))]\n         [else (+ 1 (count-consonants\
    \ (rest word)))]))\n     (define (select-words-helper s n)\n       (cond\n   \
    \      [(empty? s) empty]\n         [(= n (count-consonants (first s))) (cons\
    \ (first s) (select-words-helper (rest s) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper (string-split s) n)]))\n", "  (define\
    \ (consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (cond\n      [(empty? word) 0]\n      [(consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper words n)\n    (cond\n      [(empty?\
    \ words) empty]\n      [(= n (count-consonants (first words)))\n       (cons (first\
    \ words) (select-words-helper (rest words) n))]\n      [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (for/sum ([c (in-string word)])\n      (if (is_consonant?\
    \ c) 1 0)))\n  (for/list ([word (in-list (string-split s))]\n             #:when\
    \ (= n (count-consonants word)))\n    word))\n", "  (define (is_consonant? c)\n\
    \    (cond\n      [(or (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\u))\
    \ #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n     \
    \ [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(= n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n result)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (define (is_consonant c)\n    (cond ((or (char=? c #\\\
    a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f)\n    \
    \      (else #t)))\n  (define (count_consonants word)\n    (cond ((string-empty?\
    \ word) 0)\n          ((is_consonant (string-ref word 0)) (+ 1 (count_consonants\
    \ (string-tail word))))\n          (else (count_consonants (string-tail word)))))\n\
    \  (define (select_words_iter s n result)\n    (cond ((string-empty? s) result)\n\
    \          ((= n (count_consonants (string-take-while (lambda (c) (not (char=?\
    \ c #\\ ))) s)))\n           (select_words_iter (string-drop-while (lambda (c)\
    \ (not (char=? c #\\ ))) s) n (cons (string-take-while (lambda (c) (not (char=?\
    \ c #\\ ))) s) result)))\n          (else (select_words_iter (string-drop-while\
    \ (lambda (c) (not (char=? c #\\ ))) s) n result))))\n  (select_words_iter s n\
    \ '()))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n  (define (count-consonants word)\n    (if (empty? word)\n        0\n  \
    \      (if (is-vowel? (first word))\n            (count-consonants (rest word))\n\
    \            (+ 1 (count-consonants (rest word))))))\n  (define (select-words-helper\
    \ words n)\n    (if (empty? words)\n        '()\n        (if (= n (count-consonants\
    \ (first words)))\n            (cons (first words) (select-words-helper (rest\
    \ words) n))\n            (select-words-helper (rest words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count-consonants (first\
    \ s)))\n       (select-words-helper (rest s) n (append acc (list (first s))))]\n\
    \      [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is_consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count_consonants w)\n       (cond\n         [(empty? w) 0]\n    \
    \     [else\n          (+ (if (is_consonant? (first w)) 1 0)\n             (count_consonants\
    \ (rest w)))]))\n     (define (select_words-helper s n)\n       (cond\n      \
    \   [(empty? s) empty]\n         [(= n (count_consonants (first s)))\n       \
    \   (cons (first s) (select_words-helper (rest s) n))]\n         [else (select_words-helper\
    \ (rest s) n)]))\n     (select_words-helper (string-split s) n)]))\n", "  (define\
    \ (is_consonant c)\n    (cond ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)) #f)\n          (else #t)))\n  (define (count_consonants\
    \ word)\n    (cond ((string-empty? word) 0)\n          ((is_consonant (string-ref\
    \ word 0)) (+ 1 (count_consonants (string-tail word))))\n          (else (count_consonants\
    \ (string-tail word)))))\n  (define (select_words_iter s n acc)\n    (cond ((string-empty?\
    \ s) acc)\n          ((= n (count_consonants (string-take s (string-index s #\\\
    space))))\n           (select_words_iter (string-drop s (string-index s #\\space))\
    \ n (cons (string-take s (string-index s #\\space)) acc)))\n          (else (select_words_iter\
    \ (string-drop s (string-index s #\\space)) n acc))))\n  (select_words_iter s\
    \ n '()))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (count_consonants w)\n    (let loop ((i 0) (c 0))\n     \
    \ (if (= i (string-length w))\n          c\n          (if (is_vowel (string-ref\
    \ w i))\n              (loop (+ i 1) c)\n              (loop (+ i 1) (+ c 1))))))\n\
    \  (define (select_words_iter ws n)\n    (if (null? ws)\n        '()\n       \
    \ (if (= n (count_consonants (car ws)))\n            (cons (car ws) (select_words_iter\
    \ (cdr ws) n))\n            (select_words_iter (cdr ws) n))))\n  (select_words_iter\
    \ (string-split s) n))\n", "  (define (is_consonant c)\n    (and (not (char-vowel?\
    \ c))\n         (not (char=? c #\\y))))\n  (define (count_consonants s)\n    (cond\
    \ ((string=? s \"\") 0)\n          ((is_consonant (string-ref s 0))\n        \
    \   (+ 1 (count_consonants (substring s 1))))\n          (else (count_consonants\
    \ (substring s 1)))))\n  (define (select_words_helper s n acc)\n    (cond ((string=?\
    \ s \"\") (reverse acc))\n          ((= n (count_consonants (string-take-while\
    \ (compose not char-whitespace?) s)))\n           (select_words_helper (string-drop-while\
    \ (compose not char-whitespace?) s)\n                                n\n     \
    \                           (cons (string-take-while (compose not char-whitespace?)\
    \ s)\n                                      acc)))\n          (else (select_words_helper\
    \ (string-drop-while (compose not char-whitespace?) s)\n                     \
    \                n\n                                     acc))))\n  (select_words_helper\
    \ s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [(member (first word)\
    \ '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants (rest word))]\n         [else\
    \ (+ 1 (count-consonants (rest word)))]))\n     (define (select-words-helper s\
    \ n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (count_consonants s)\n    (cond ((string=?\
    \ s \"\") 0)\n          ((is_vowel (string-ref s 0)) (count_consonants (substring\
    \ s 1)))\n          (else (+ 1 (count_consonants (substring s 1))))))\n  (define\
    \ (select_words_iter s n result)\n    (cond ((string=? s \"\") result)\n     \
    \     ((= n (count_consonants (string-trim s)))\n           (select_words_iter\
    \ (string-trim (substring s (string-length (string-trim s))))\n              \
    \                n\n                              (cons (string-trim s) result)))\n\
    \          (else (select_words_iter (string-trim (substring s (string-length (string-trim\
    \ s))))\n                                   n\n                              \
    \     result))))\n  (select_words_iter s n '()))\n", "  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(member (first s) '(#\\a #\\e #\\\
    i #\\o #\\u)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words s n)\n    (cond\n      [(empty? s) empty]\n\
    \      [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n      [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s) n))\n", "  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split\
    \ s)]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n\
    \             [consonant-count (lambda (word)\n                              \
    \  (let loop ([word (string-&gt;list word)]\n                                \
    \           [count 0])\n                                  (if (null? word)\n \
    \                                     count\n                                \
    \      (if (member (car word) consonants)\n                                  \
    \        (loop (cdr word) (+ count 1))\n                                     \
    \     (loop (cdr word) count)))))]\n             [selected-words (filter (lambda\
    \ (word)\n                                       (= (consonant-count word) n))\n\
    \                                     words)])\n        selected-words)))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (count-consonants s)\n    (if (string-empty? s)\n        0\n        (if (is-vowel?\
    \ (string-ref s 0))\n            (count-consonants (substring s 1))\n        \
    \    (+ 1 (count-consonants (substring s 1))))))\n  (define (select-words s n)\n\
    \    (if (string-empty? s)\n        '()\n        (let ((word (string-trim s)))\n\
    \          (if (= n (count-consonants word))\n              (cons word (select-words\
    \ (substring s (string-length word)) n))\n              (select-words (substring\
    \ s (string-length word)) n)))))\n  (select-words s n))\n", "  (cond [(empty?\
    \ s) empty]\n        [else (cond [(= n (count-consonants (first (string-split\
    \ s))))\n                     (cons (first (string-split s)) (select_words (rest\
    \ (string-split s)) n))]\n                    [else (select_words (rest (string-split\
    \ s)) n)])]))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=? c\
    \ #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n  \
    \    [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (if (empty? word)\n        0\n       \
    \ (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants (rest\
    \ word)))))\n  (define (select-words-helper words n)\n    (if (empty? words)\n\
    \        '()\n        (let ([word (first words)])\n          (if (= (count-consonants\
    \ word) n)\n              (cons word (select-words-helper (rest words) n))\n \
    \             (select-words-helper (rest words) n)))))\n  (select-words-helper\
    \ (string-split s) n))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
