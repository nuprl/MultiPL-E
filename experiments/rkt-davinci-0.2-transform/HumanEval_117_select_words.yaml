name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  ;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>>\
  \ (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>>\
  \ (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello\
  \ world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list\
  \ \"Uncle\")\n(define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel?\
    \ (first s)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words s n)\n    (cond\n      [(empty? s) empty]\n\
    \      [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n      [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s) n))\n", "  (define (is-consonant? c)\n    (cond ((char=? c #\\a) #f)\n  \
    \        ((char=? c #\\e) #f)\n          ((char=? c #\\i) #f)\n          ((char=?\
    \ c #\\o) #f)\n          ((char=? c #\\u) #f)\n          (else #t)))\n  (define\
    \ (count-consonants word)\n    (if (string-empty? word)\n        0\n        (if\
    \ (is-consonant? (string-ref word 0))\n            (+ 1 (count-consonants (substring\
    \ word 1)))\n            (count-consonants (substring word 1)))))\n  (define (select-words-helper\
    \ s n)\n    (if (string-empty? s)\n        '()\n        (let ((word (string-trim\
    \ s)))\n          (if (= n (count-consonants word))\n              (cons word\
    \ (select-words-helper (substring s (string-length word)) n))\n              (select-words-helper\
    \ (substring s (string-length word)) n)))))\n  (select-words-helper s n))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (count-consonants word)\n\
    \       (cond\n         [(empty? word) 0]\n         [(member (first word) '(#\\\
    a #\\e #\\i #\\o #\\u)) (count-consonants (rest word))]\n         [else (+ 1 (count-consonants\
    \ (rest word)))]))\n     (define (select-words-helper s n)\n       (cond\n   \
    \      [(empty? s) empty]\n         [(= n (count-consonants (first s))) (cons\
    \ (first s) (select-words-helper (rest s) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper (string-split s) n)]))\n", "  (define\
    \ (consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (cond\n      [(empty? word) 0]\n      [(consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper words n)\n    (cond\n      [(empty?\
    \ words) empty]\n      [(= n (count-consonants (first words)))\n       (cons (first\
    \ words) (select-words-helper (rest words) n))]\n      [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (for/sum ([c (in-string word)])\n      (if (is_consonant?\
    \ c) 1 0)))\n  (for/list ([word (in-list (string-split s))]\n             #:when\
    \ (= n (count-consonants word)))\n    word))\n", "  (define (is_consonant? c)\n\
    \    (cond\n      [(or (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\u))\
    \ #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n     \
    \ [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(= n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n result)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (define (is_consonant c)\n    (cond ((or (char=? c #\\\
    a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f)\n    \
    \      (else #t)))\n  (define (count_consonants word)\n    (cond ((string-empty?\
    \ word) 0)\n          ((is_consonant (string-ref word 0)) (+ 1 (count_consonants\
    \ (string-tail word))))\n          (else (count_consonants (string-tail word)))))\n\
    \  (define (select_words_iter s n result)\n    (cond ((string-empty? s) result)\n\
    \          ((= n (count_consonants (string-take-while (lambda (c) (not (char=?\
    \ c #\\ ))) s)))\n           (select_words_iter (string-drop-while (lambda (c)\
    \ (not (char=? c #\\ ))) s) n (cons (string-take-while (lambda (c) (not (char=?\
    \ c #\\ ))) s) result)))\n          (else (select_words_iter (string-drop-while\
    \ (lambda (c) (not (char=? c #\\ ))) s) n result))))\n  (select_words_iter s n\
    \ '()))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n  (define (count-consonants word)\n    (if (empty? word)\n        0\n  \
    \      (if (is-vowel? (first word))\n            (count-consonants (rest word))\n\
    \            (+ 1 (count-consonants (rest word))))))\n  (define (select-words-helper\
    \ words n)\n    (if (empty? words)\n        '()\n        (if (= n (count-consonants\
    \ (first words)))\n            (cons (first words) (select-words-helper (rest\
    \ words) n))\n            (select-words-helper (rest words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count-consonants (first\
    \ s)))\n       (select-words-helper (rest s) n (append acc (list (first s))))]\n\
    \      [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is_consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count_consonants w)\n       (cond\n         [(empty? w) 0]\n    \
    \     [else\n          (+ (if (is_consonant? (first w)) 1 0)\n             (count_consonants\
    \ (rest w)))]))\n     (define (select_words-helper s n)\n       (cond\n      \
    \   [(empty? s) empty]\n         [(= n (count_consonants (first s)))\n       \
    \   (cons (first s) (select_words-helper (rest s) n))]\n         [else (select_words-helper\
    \ (rest s) n)]))\n     (select_words-helper (string-split s) n)]))\n", "  (define\
    \ (is_consonant c)\n    (cond ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)) #f)\n          (else #t)))\n  (define (count_consonants\
    \ word)\n    (cond ((string-empty? word) 0)\n          ((is_consonant (string-ref\
    \ word 0)) (+ 1 (count_consonants (string-tail word))))\n          (else (count_consonants\
    \ (string-tail word)))))\n  (define (select_words_iter s n acc)\n    (cond ((string-empty?\
    \ s) acc)\n          ((= n (count_consonants (string-take s (string-index s #\\\
    space))))\n           (select_words_iter (string-drop s (string-index s #\\space))\
    \ n (cons (string-take s (string-index s #\\space)) acc)))\n          (else (select_words_iter\
    \ (string-drop s (string-index s #\\space)) n acc))))\n  (select_words_iter s\
    \ n '()))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (count_consonants w)\n    (let loop ((i 0) (c 0))\n     \
    \ (if (= i (string-length w))\n          c\n          (if (is_vowel (string-ref\
    \ w i))\n              (loop (+ i 1) c)\n              (loop (+ i 1) (+ c 1))))))\n\
    \  (define (select_words_iter ws n)\n    (if (null? ws)\n        '()\n       \
    \ (if (= n (count_consonants (car ws)))\n            (cons (car ws) (select_words_iter\
    \ (cdr ws) n))\n            (select_words_iter (cdr ws) n))))\n  (select_words_iter\
    \ (string-split s) n))\n", "  (define (is_consonant c)\n    (and (not (char-vowel?\
    \ c))\n         (not (char=? c #\\y))))\n  (define (count_consonants s)\n    (cond\
    \ ((string=? s \"\") 0)\n          ((is_consonant (string-ref s 0))\n        \
    \   (+ 1 (count_consonants (substring s 1))))\n          (else (count_consonants\
    \ (substring s 1)))))\n  (define (select_words_helper s n acc)\n    (cond ((string=?\
    \ s \"\") (reverse acc))\n          ((= n (count_consonants (string-take-while\
    \ (compose not char-whitespace?) s)))\n           (select_words_helper (string-drop-while\
    \ (compose not char-whitespace?) s)\n                                n\n     \
    \                           (cons (string-take-while (compose not char-whitespace?)\
    \ s)\n                                      acc)))\n          (else (select_words_helper\
    \ (string-drop-while (compose not char-whitespace?) s)\n                     \
    \                n\n                                     acc))))\n  (select_words_helper\
    \ s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [(member (first word)\
    \ '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants (rest word))]\n         [else\
    \ (+ 1 (count-consonants (rest word)))]))\n     (define (select-words-helper s\
    \ n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (count_consonants s)\n    (cond ((string=?\
    \ s \"\") 0)\n          ((is_vowel (string-ref s 0)) (count_consonants (substring\
    \ s 1)))\n          (else (+ 1 (count_consonants (substring s 1))))))\n  (define\
    \ (select_words_iter s n result)\n    (cond ((string=? s \"\") result)\n     \
    \     ((= n (count_consonants (string-trim s)))\n           (select_words_iter\
    \ (string-trim (substring s (string-length (string-trim s))))\n              \
    \                n\n                              (cons (string-trim s) result)))\n\
    \          (else (select_words_iter (string-trim (substring s (string-length (string-trim\
    \ s))))\n                                   n\n                              \
    \     result))))\n  (select_words_iter s n '()))\n", "  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(member (first s) '(#\\a #\\e #\\\
    i #\\o #\\u)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words s n)\n    (cond\n      [(empty? s) empty]\n\
    \      [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n      [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s) n))\n", "  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split\
    \ s)]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n\
    \             [consonant-count (lambda (word)\n                              \
    \  (let loop ([word (string-&gt;list word)]\n                                \
    \           [count 0])\n                                  (if (null? word)\n \
    \                                     count\n                                \
    \      (if (member (car word) consonants)\n                                  \
    \        (loop (cdr word) (+ count 1))\n                                     \
    \     (loop (cdr word) count)))))]\n             [selected-words (filter (lambda\
    \ (word)\n                                       (= (consonant-count word) n))\n\
    \                                     words)])\n        selected-words)))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (count-consonants s)\n    (if (string-empty? s)\n        0\n        (if (is-vowel?\
    \ (string-ref s 0))\n            (count-consonants (substring s 1))\n        \
    \    (+ 1 (count-consonants (substring s 1))))))\n  (define (select-words s n)\n\
    \    (if (string-empty? s)\n        '()\n        (let ((word (string-trim s)))\n\
    \          (if (= n (count-consonants word))\n              (cons word (select-words\
    \ (substring s (string-length word)) n))\n              (select-words (substring\
    \ s (string-length word)) n)))))\n  (select-words s n))\n", "  (cond [(empty?\
    \ s) empty]\n        [else (cond [(= n (count-consonants (first (string-split\
    \ s))))\n                     (cons (first (string-split s)) (select_words (rest\
    \ (string-split s)) n))]\n                    [else (select_words (rest (string-split\
    \ s)) n)])]))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=? c\
    \ #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n  \
    \    [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (if (empty? word)\n        0\n       \
    \ (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants (rest\
    \ word)))))\n  (define (select-words-helper words n)\n    (if (empty? words)\n\
    \        '()\n        (let ([word (first words)])\n          (if (= (count-consonants\
    \ word) n)\n              (cons word (select-words-helper (rest words) n))\n \
    \             (select-words-helper (rest words) n)))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\n\
    \         ([word (first (string-split s #\\space))]\n          [consonants (count-consonants\
    \ word)]\n          [rest (select_words (rest (string-split s #\\space)) n)])\n\
    \       (cond\n         [(= consonants n) (cons word rest)]\n         [else rest]))]))\n",
  "  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n    \
    \    (if (equal? (count-consonants (car w)) n)\n            (cons (car w) (select_words\
    \ (string-join (cdr w) \" \") n))\n            (select_words (string-join (cdr\
    \ w) \" \") n)))))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (if (string-empty? word)\n        0\n\
    \        (+ (if (is-consonant? (string-ref word 0)) 1 0)\n           (count-consonants\
    \ (substring word 1)))))\n  (define (select-words-helper words n)\n    (if (null?\
    \ words)\n        '()\n        (if (= n (count-consonants (car words)))\n    \
    \        (cons (car words) (select-words-helper (cdr words) n))\n            (select-words-helper\
    \ (cdr words) n))))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let* ([words (string-split s)]\n             [consonants\
    \ (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n             [consonant-count\
    \ (lambda (word)\n                                (apply + (map (lambda (c)\n\
    \                                                (if (member c consonants)\n \
    \                                                   1\n                      \
    \                              0))\n                                         \
    \     (string-&gt;list word))))]\n             [selected-words (filter (lambda\
    \ (word)\n                                       (= (consonant-count word) n))\n\
    \                                     words)])\n        selected-words)))\n</code>\n",
  "  (define (is_consonant c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=?\
    \ c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count-consonants s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is_consonant (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select_words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select_words-helper (rest s) n))]\n      [else\
    \ (select_words-helper (rest s) n)]))\n  (select_words-helper (string-split s)\
    \ n))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c\
    \ #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\\
    u)))\n  (define (count_consonants word)\n    (define (count_consonants_iter word\
    \ count)\n      (if (string-empty? word)\n          count\n          (if (is_vowel\
    \ (string-ref word 0))\n              (count_consonants_iter (substring word 1)\
    \ count)\n              (count_consonants_iter (substring word 1) (+ count 1)))))\n\
    \    (count_consonants_iter word 0))\n  (define (select_words_iter s n result)\n\
    \    (if (string-empty? s)\n        result\n        (let ((word (string-trim (string-take-while\
    \ (lambda (c) (not (char=? c #\\space))) s))))\n          (if (= n (count_consonants\
    \ word))\n              (select_words_iter (string-drop s (string-length word))\
    \ n (cons word result))\n              (select_words_iter (string-drop s (string-length\
    \ word)) n result)))))\n  (reverse (select_words_iter s n '())))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n words)\n    (cond\n      [(empty? s) words]\n      [(empty? (rest s)) words]\n\
    \      [(char=? (first s) #\\ ) (select_words_iter (rest s) n words)]\n      [else\n\
    \       (define word (first (regexp-match #rx\"^[a-zA-Z]+\" s)))\n       (define\
    \ rest (regexp-match #rx\"^[a-zA-Z]+\" (rest s)))\n       (if (= n (count_consonants\
    \ word))\n           (select_words_iter rest n (append words (list word)))\n \
    \          (select_words_iter rest n words))]))\n  (select_words_iter s n '()))\n",
  "  (define (is_consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o\
    \ #\\u)) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(= n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n result)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (define (is_consonant? c)\n    (member c '(#\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n  (define (count-consonants word)\n    (if (empty? word)\n   \
    \     0\n        (+ (if (is_consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-iter words n)\n    (if (empty? words)\n\
    \        '()\n        (if (= n (count-consonants (first words)))\n           \
    \ (cons (first words) (select-words-iter (rest words) n))\n            (select-words-iter\
    \ (rest words) n))))\n  (select-words-iter (string-split s) n))\n", "  (define\
    \ (is-consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (is-consonant? (first\
    \ word))\n              (count-consonants-iter (rest word) (+ count 1))\n    \
    \          (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (if (= n (count-consonants (first s)))\n            (select-words-iter\
    \ (rest s) n (append result (list (first s))))\n            (select-words-iter\
    \ (rest s) n result))))\n  (select-words-iter (string-split s) n (list)))\n",
  "  (define (is_consonant c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count_consonants s)\n    (cond ((string=? s \"\") 0)\n   \
    \       ((is_consonant (string-ref s 0)) (+ 1 (count_consonants (substring s 1))))\n\
    \          (else (count_consonants (substring s 1)))))\n  (define (select_words_helper\
    \ s n l)\n    (cond ((string=? s \"\") l)\n          ((= n (count_consonants s))\
    \ (select_words_helper (string-trim s) n (cons (string-trim s) l)))\n        \
    \  (else (select_words_helper (string-trim s) n l))))\n  (select_words_helper\
    \ s n '()))\n", "  (define (is-consonant? c)\n    (not (or (char-alphabetic? c)\
    \ (char-whitespace? c))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (string-split s #\\space))))\n      \
    \    (if (= n (count-consonants word))\n              (select-words-iter (string-drop\
    \ s (string-length word)) n (append result (list word)))\n              (select-words-iter\
    \ (string-drop s (string-length word)) n result)))))\n  (select-words-iter s n\
    \ '()))\n", "  (define (is_consonant c)\n    (cond\n      [(char=? c #\\a) #f]\n\
    \      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\\
    o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is_consonant (first w)) (+ 1 (count_consonants\
    \ (rest w)))]\n      [else (count_consonants (rest w))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count_consonants (first\
    \ s))) (select_words_iter (rest s) n (append acc (list (first s))))]\n      [else\
    \ (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split s)\
    \ n (list)))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o\
    \ #\\u)))\n  (define (count_consonants word)\n    (define (count_consonants_iter\
    \ word count)\n      (if (null? word)\n          count\n          (if (is_vowel\
    \ (car word))\n              (count_consonants_iter (cdr word) count)\n      \
    \        (count_consonants_iter (cdr word) (+ count 1)))))\n    (count_consonants_iter\
    \ word 0))\n  (define (select_words_iter s n result)\n    (if (null? s)\n    \
    \    result\n        (let ((word (car s)))\n          (if (= n (count_consonants\
    \ word))\n              (select_words_iter (cdr s) n (append result (list word)))\n\
    \              (select_words_iter (cdr s) n result)))))\n  (select_words_iter\
    \ (string-split s) n '()))\n", "  (define (is_consonant c)\n    (or (char=? c\
    \ #\\b)\n        (char=? c #\\c)\n        (char=? c #\\d)\n        (char=? c #\\\
    f)\n        (char=? c #\\g)\n        (char=? c #\\h)\n        (char=? c #\\j)\n\
    \        (char=? c #\\k)\n        (char=? c #\\l)\n        (char=? c #\\m)\n \
    \       (char=? c #\\n)\n        (char=? c #\\p)\n        (char=? c #\\q)\n  \
    \      (char=? c #\\r)\n        (char=? c #\\s)\n        (char=? c #\\t)\n   \
    \     (char=? c #\\v)\n        (char=? c #\\w)\n        (char=? c #\\x)\n    \
    \    (char=? c #\\y)\n        (char=? c #\\z)))\n  (define (count_consonants word)\n\
    \    (if (empty? word)\n        0\n        (if (is_consonant (first word))\n \
    \           (+ 1 (count_consonants (rest word)))\n            (count_consonants\
    \ (rest word)))))\n  (define (select_words_iter s n result)\n    (if (empty? s)\n\
    \        result\n        (let ((word (first s)))\n          (if (= n (count_consonants\
    \ word))\n              (select_words_iter (rest s) n (append result (list word)))\n\
    \              (select_words_iter (rest s) n result)))))\n  (select_words_iter\
    \ (string-split s) n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (is_consonant c)\n       (cond\n         [(char-ci=? c #\\a) #f]\n\
    \         [(char-ci=? c #\\e) #f]\n         [(char-ci=? c #\\i) #f]\n        \
    \ [(char-ci=? c #\\o) #f]\n         [(char-ci=? c #\\u) #f]\n         [else #t]))\n\
    \     (define (count_consonants s)\n       (cond\n         [(empty? s) 0]\n  \
    \       [else\n          (if (is_consonant (first s))\n              (+ 1 (count_consonants\
    \ (rest s)))\n              (count_consonants (rest s)))]))\n     (define (select_words_helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [else\n          (if\
    \ (= n (count_consonants (first s)))\n              (cons (first s) (select_words_helper\
    \ (rest s) n))\n              (select_words_helper (rest s) n))]))\n     (select_words_helper\
    \ (string-split s) n)]))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (string-empty? word)\n        0\n        (+ (if (is_consonant?\
    \ (string-ref word 0)) 1 0)\n           (count_consonants (substring word 1)))))\n\
    \  (define (select_words_iter s n acc)\n    (if (string-empty? s)\n        acc\n\
    \        (let* ([word (string-trim (car (string-split s #\\space)))]\n       \
    \        [consonants (count_consonants word)])\n          (if (= consonants n)\n\
    \              (select_words_iter (cdr (string-split s #\\space)) n (cons word\
    \ acc))\n              (select_words_iter (cdr (string-split s #\\space)) n acc)))))\n\
    \  (reverse (select_words_iter s n '())))\n", "  (define (is_consonant? c)\n \
    \   (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=?\
    \ c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else\
    \ #t]))\n  (define (count_consonants word)\n    (if (empty? word)\n        0\n\
    \        (+ (if (is_consonant? (first word)) 1 0)\n           (count_consonants\
    \ (rest word)))))\n  (define (select_words-iter s n acc)\n    (if (empty? s)\n\
    \        acc\n        (let ([word (string-trim (first s))])\n          (if (=\
    \ n (count_consonants word))\n              (select_words-iter (rest s) n (cons\
    \ word acc))\n              (select_words-iter (rest s) n acc)))))\n  (reverse\
    \ (select_words-iter (string-split s) n '())))\n", "  (define (count-consonants\
    \ s)\n    (cond ((string=? s \"\") 0)\n          ((string-contains \"aeiou\" (string-ref\
    \ s 0))\n           (count-consonants (substring s 1)))\n          (else (+ 1\
    \ (count-consonants (substring s 1))))))\n  (define (select-words-helper s n lst)\n\
    \    (cond ((string=? s \"\") lst)\n          ((= n (count-consonants (car (string-split\
    \ s \" \"))))\n           (select-words-helper (cdr (string-split s \" \")) n\
    \ (cons (car (string-split s \" \")) lst)))\n          (else (select-words-helper\
    \ (cdr (string-split s \" \")) n lst))))\n  (select-words-helper s n '()))\n",
  "  (define (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (if (empty? word)\n        0\n       \
    \ (+ (if (is_consonant? (first word)) 1 0)\n           (count-consonants (rest\
    \ word)))))\n  (define (select-words-helper s n result)\n    (if (empty? s)\n\
    \        result\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-helper (rest s) n (append result (list word)))\n\
    \              (select-words-helper (rest s) n result)))))\n  (select-words-helper\
    \ (string-split s) n '()))\n", "  (if (empty? s)\n      '()\n      (let ([words\
    \ (string-split s #\\space)])\n        (filter (lambda (w) (= n (count-consonants\
    \ w))) words))))\n", "  (define (is_consonant c)\n    (or (equal? c #\\b) (equal?\
    \ c #\\c) (equal? c #\\d) (equal? c #\\f) (equal? c #\\g)\n        (equal? c #\\\
    h) (equal? c #\\j) (equal? c #\\k) (equal? c #\\l) (equal? c #\\m)\n        (equal?\
    \ c #\\n) (equal? c #\\p) (equal? c #\\q) (equal? c #\\r) (equal? c #\\s)\n  \
    \      (equal? c #\\t) (equal? c #\\v) (equal? c #\\w) (equal? c #\\x) (equal?\
    \ c #\\y)\n        (equal? c #\\z)))\n  (define (count_consonants w)\n    (if\
    \ (empty? w)\n        0\n        (if (is_consonant (first w))\n            (+\
    \ 1 (count_consonants (rest w)))\n            (count_consonants (rest w)))))\n\
    \  (define (select_words_helper s n l)\n    (if (empty? s)\n        l\n      \
    \  (if (= n (count_consonants (first s)))\n            (select_words_helper (rest\
    \ s) n (append l (list (first s))))\n            (select_words_helper (rest s)\
    \ n l))))\n  (select_words_helper (string-split s) n '()))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (not (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants word)\n     \
    \  (cond\n         [(empty? word) 0]\n         [else\n          (+ (if (is-consonant?\
    \ (first word)) 1 0)\n             (count-consonants (rest word)))]))\n     (define\
    \ (select-words-helper s n result)\n       (cond\n         [(empty? s) result]\n\
    \         [else\n          (define (is-word? s)\n            (not (member (first\
    \ s) '(#\\space #\\newline))))\n          (define (get-word s)\n            (cond\n\
    \              [(empty? s) empty]\n              [(is-word? s) (cons (first s)\
    \ (get-word (rest s)))]\n              [else empty]))\n          (define (get-next-word\
    \ s)\n            (cond\n              [(empty? s) empty]\n              [(is-word?\
    \ s) (get-word (rest s))]\n              [else (get-next-word (rest s))]))\n \
    \         (define word (get-word s))\n          (cond\n            [(empty? word)\
    \ (select-words-helper (rest s) n result)]\n            [(= n (count-consonants\
    \ word))\n             (select-words-helper (get-next-word s) n (cons word result))]\n\
    \            [else (select-words-helper (get-next-word s) n result)])]))\n   \
    \  (select-words-helper s n empty)]))\n", "  (cond\n    [(empty? s) empty]\n \
    \   [else\n     (define (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)))\n     (define (count-consonants s)\n       (cond\n         [(empty?\
    \ s) 0]\n         [(consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \         [else (count-consonants (rest s))]))\n     (define (select-words s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(and (equal? n (count-consonants\
    \ (first s))) (not (empty? (rest s))))\n          (cons (first s) (select-words\
    \ (rest s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words\
    \ (string-split s) n)]))\n", "  (define (is_consonant? c)\n    (cond\n      [(or\
    \ (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\\
    u)) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n   \
    \   [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n words)\n    (cond\n      [(empty? s) words]\n      [(char=? (first s) #\\\
    \ ) (select_words_iter (rest s) n words)]\n      [(= n (count_consonants (first\
    \ s))) (select_words_iter (rest s) n (append words (list (first s))))]\n     \
    \ [else (select_words_iter (rest s) n words)]))\n  (select_words_iter s n (list)))\n",
  "  (define (is_consonant c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=?\
    \ c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count_consonants\
    \ (first s)) (= n (count_consonants (first s)))]\n      [else (select_words_iter\
    \ (rest s) n (append result (list (first s))))]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s)\
    \ (select_words (rest s) n))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (consonant? c)\n       (or (char=? c #\\b) (char=? c #\\c) (char=?\
    \ c #\\d) (char=? c #\\f) (char=? c #\\g) (char=? c #\\h) (char=? c #\\j) (char=?\
    \ c #\\k) (char=? c #\\l) (char=? c #\\m) (char=? c #\\n) (char=? c #\\p) (char=?\
    \ c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t) (char=? c #\\v) (char=?\
    \ c #\\w) (char=? c #\\x) (char=? c #\\y) (char=? c #\\z)))\n     (define (count-consonants\
    \ w)\n       (cond\n         [(empty? w) 0]\n         [(consonant? (first w))\
    \ (+ 1 (count-consonants (rest w)))]\n         [else (count-consonants (rest w))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words (string-split\
    \ s) n)]))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f\
    \ #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)))\n  (define (count-consonants word)\n    (cond ((null? word) 0)\n   \
    \       ((consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n      \
    \    (else (count-consonants (cdr word)))))\n  (define (select-words-helper s\
    \ n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s))) (cons\
    \ (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (and (not (char-alphabetic? c))\n         (not (char=? c #\\a))\n  \
    \       (not (char=? c #\\e))\n         (not (char=? c #\\i))\n         (not (char=?\
    \ c #\\o))\n         (not (char=? c #\\u))))\n  (define (count-consonants s)\n\
    \    (cond ((null? s) 0)\n          ((is-consonant? (car s)) (+ 1 (count-consonants\
    \ (cdr s))))\n          (else (count-consonants (cdr s)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((null? s) acc)\n          ((char=? (car s) #\\ )\n    \
    \       (cond ((= n (count-consonants (cdr s)))\n                  (select-words-helper\
    \ (cdr s) n (cons (cdr s) acc)))\n                 (else (select-words-helper\
    \ (cdr s) n acc))))\n          (else (select-words-helper (cdr s) n acc))))\n\
    \  (select-words-helper s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (let* ([word (first (string-split s #\\space))]\n            [consonants\
    \ (count-consonants word)])\n       (if (= consonants n)\n           (cons word\
    \ (select_words (rest (string-split s #\\space)) n))\n           (select_words\
    \ (rest (string-split s #\\space)) n)))]))\n", "  (define (consonant? c)\n   \
    \ (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else\
    \ #t]))\n  (define (count_consonants word)\n    (define (count_consonants-iter\
    \ word count)\n      (cond\n        [(empty? word) count]\n        [(is_consonant?\
    \ (first word)) (count_consonants-iter (rest word) (+ count 1))]\n        [else\
    \ (count_consonants-iter (rest word) count)]))\n    (count_consonants-iter word\
    \ 0))\n  (define (select_words-iter s n words)\n    (cond\n      [(empty? s) words]\n\
    \      [(= n (count_consonants (first words))) (select_words-iter (rest s) n (append\
    \ words (list (first words))))]\n      [else (select_words-iter (rest s) n words)]))\n\
    \  (select_words-iter (string-split s #\\space) n '()))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (+ (if (is_consonant? (string-ref word 0)) 1 0)\n\
    \           (count_consonants (substring word 1)))))\n  (define (select_words-iter\
    \ s n acc)\n    (if (string-empty? s)\n        acc\n        (let* ([word (string-trim\
    \ s)]\n               [count (count_consonants word)])\n          (if (= count\
    \ n)\n              (select_words-iter (substring s (string-length word)) n (cons\
    \ word acc))\n              (select_words-iter (substring s (string-length word))\
    \ n acc)))))\n  (reverse (select_words-iter s n '())))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n     (define (count-consonants w)\n       (cond\n\
    \         [(empty? w) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ w)) 1 0)\n             (count-consonants (rest w)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [else\n          (define\
    \ (select-words-helper s n)\n            (cond\n              [(empty? s) empty]\n\
    \              [else\n               (define (select-words-helper-helper s n)\n\
    \                 (cond\n                   [(empty? s) empty]\n             \
    \      [else\n                    (if (= n (count-consonants (first s)))\n   \
    \                     (cons (first s) (select-words-helper-helper (rest s) n))\n\
    \                        (select-words-helper-helper (rest s) n))]))\n       \
    \        (select-words-helper-helper (rest s) n)]))\n          (append (select-words-helper\
    \ (first s) n)\n                  (select-words-helper (rest s) n))]))\n     (select-words\
    \ (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n   \
    \  (let* ([words (string-split s)]\n            [consonants (filter (lambda (w)\
    \ (= n (count-consonants w))) words)])\n       consonants)]))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let* ([words (string-split s)]\n             [consonants\
    \ (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n             [consonant-count\
    \ (lambda (word)\n                                (let loop ([word word]\n   \
    \                                        [count 0])\n                        \
    \          (if (string-null? word)\n                                      count\n\
    \                                      (if (member (string-ref word 0) consonants)\n\
    \                                          (loop (substring word 1) (+ count 1))\n\
    \                                          (loop (substring word 1) count)))))]\n\
    \             [selected-words (filter (lambda (word)\n                       \
    \                (= (consonant-count word) n))\n                             \
    \        words)])\n        selected-words)))\n</code>\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else\
    \ #t]))\n  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n\
    \      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n \
    \     [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(or\
    \ (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\\
    u)) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (cond\n   \
    \   [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(or (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\\
    u)) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (define (count_consonants_iter\
    \ word count)\n      (cond\n        [(empty? word) count]\n        [(is_consonant?\
    \ (first word)) (count_consonants_iter (rest word) (+ count 1))]\n        [else\
    \ (count_consonants_iter (rest word) count)]))\n    (count_consonants_iter word\
    \ 0))\n  (define (select_words_iter s n result)\n    (cond\n      [(empty? s)\
    \ result]\n      [(= n (count_consonants (first s))) (select_words_iter (rest\
    \ s) n (append result (list (first s))))]\n      [else (select_words_iter (rest\
    \ s) n result)]))\n  (select_words_iter (string-split s) n (list)))\n", "  (define\
    \ (count-consonants s)\n    (define (is-consonant? c)\n      (or (char=? c #\\\
    b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\f) (char=? c #\\g) (char=? c #\\\
    h) (char=? c #\\j) (char=? c #\\k) (char=? c #\\l) (char=? c #\\m) (char=? c #\\\
    n) (char=? c #\\p) (char=? c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\\
    t) (char=? c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y) (char=? c #\\\
    z)))\n    (define (count-consonants-iter s count)\n      (cond ((string-empty?\
    \ s) count)\n            ((is-consonant? (string-ref s 0)) (count-consonants-iter\
    \ (substring s 1) (+ count 1)))\n            (else (count-consonants-iter (substring\
    \ s 1) count))))\n    (count-consonants-iter s 0))\n  (define (select-words-iter\
    \ s n result)\n    (cond ((string-empty? s) result)\n          ((= n (count-consonants\
    \ (string-take-while (lambda (c) (not (char=? c #\\ ))) s))) (select-words-iter\
    \ (substring s (+ 1 (string-length (string-take-while (lambda (c) (not (char=?\
    \ c #\\ ))) s)))) n (cons (string-take-while (lambda (c) (not (char=? c #\\ )))\
    \ s) result)))\n          (else (select-words-iter (substring s (+ 1 (string-length\
    \ (string-take-while (lambda (c) (not (char=? c #\\ ))) s)))) n result))))\n \
    \ (select-words-iter s n '()))\n", "  (define (is_consonant? c)\n    (cond\n \
    \     ((char=? c #\\a) #f)\n      ((char=? c #\\e) #f)\n      ((char=? c #\\i)\
    \ #f)\n      ((char=? c #\\o) #f)\n      ((char=? c #\\u) #f)\n      ((char=?\
    \ c #\\y) #f)\n      (else #t)))\n  (define (count_consonants word)\n    (cond\n\
    \      ((empty? word) 0)\n      ((is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word))))\n      (else (count_consonants (rest word)))))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      ((empty? s) acc)\n      ((= n (count_consonants (first\
    \ s))) (select_words_iter (rest s) n (append acc (list (first s)))))\n      (else\
    \ (select_words_iter (rest s) n acc))))\n  (select_words_iter (string-split s)\
    \ n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ s)\n       (cond\n         [(empty? s) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first s)) 1 0)\n             (count-consonants (rest s)))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [else\n          (define (select-words-helper s n)\n            (cond\n\
    \              [(empty? s) empty]\n              [else\n               (if (=\
    \ n (count-consonants (first s)))\n                   (cons (first s) (select-words-helper\
    \ (rest s) n))\n                   (select-words-helper (rest s) n))]))\n    \
    \      (select-words-helper (string-split s #\\space) n)])\n     (select-words\
    \ s n)]))\n", "  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n\
    \             (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n          \
    \   (char-ci=? c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count-consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(is-consonant? (first s)) (select-words-helper\
    \ (rest s) (- n 1) acc)]\n          [(= n 0) (select-words-helper (rest s) (count-consonants\
    \ (rest s)) (cons (string-join (reverse acc)) acc))]\n          [else (select-words-helper\
    \ (rest s) n (cons (first s) acc))]))\n  (select-words-helper (string->list s)\
    \ n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant?\
    \ c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants\
    \ w)\n       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if\
    \ (is-consonant? (first w)) 1 0)\n             (count-consonants (rest w)))]))\n\
    \     (define (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(count-consonants (first s)) = n]\n         [else\n          (cons\
    \ (first s) (select-words-helper (rest s) n))]))\n     (select-words-helper (string-split\
    \ s) n)]))\n", "  (define (is_consonant? c)\n    (and (not (char-alphabetic? c))\n\
    \         (not (char=? c #\\a))\n         (not (char=? c #\\e))\n         (not\
    \ (char=? c #\\i))\n         (not (char=? c #\\o))\n         (not (char=? c #\\\
    u))))\n  (define (count_consonants w)\n    (if (string-empty? w)\n        0\n\
    \        (+ (if (is_consonant? (string-ref w 0)) 1 0)\n           (count_consonants\
    \ (string-tail w 1)))))\n  (define (select_words_iter s n acc)\n    (if (string-empty?\
    \ s)\n        acc\n        (let ((w (string-take s (string-index #\\s s))))\n\
    \          (if (= n (count_consonants w))\n              (select_words_iter (string-drop\
    \ s (string-length w)) n (cons w acc))\n              (select_words_iter (string-drop\
    \ s (string-length w)) n acc)))))\n  (reverse (select_words_iter s n '())))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n  \
    \     (and (not (char-alphabetic? c))\n            (not (char=? c #\\space))))\n\
    \     (define (count-consonants w)\n       (define (count-consonants-iter w i)\n\
    \         (cond\n           [(empty? w) i]\n           [(is-consonant? (first\
    \ w)) (count-consonants-iter (rest w) (+ i 1))]\n           [else (count-consonants-iter\
    \ (rest w) i)]))\n       (count-consonants-iter w 0))\n     (define (select-words-iter\
    \ s n acc)\n       (cond\n         [(empty? s) acc]\n         [(= n (count-consonants\
    \ (first s))) (select-words-iter (rest s) n (cons (first s) acc))]\n         [else\
    \ (select-words-iter (rest s) n acc)]))\n     (select-words-iter (string-split\
    \ s) n empty)]))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n  (define (count-consonants word)\n    (if (empty? word)\n   \
    \     0\n        (+ (if (consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-helper s n)\n    (if (empty? s)\n \
    \       '()\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (cons word (select-words-helper (rest s) n))\n       \
    \       (select-words-helper (rest s) n)))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (string-empty? word)\n          count\n          (if\
    \ (is_vowel (string-ref word 0))\n              (count-consonants-iter (substring\
    \ word 1) count)\n              (count-consonants-iter (substring word 1) (+ count\
    \ 1)))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter s\
    \ n words)\n    (if (string-empty? s)\n        words\n        (let ((word (string-trim\
    \ (string-take-while (lambda (c) (not (char=? c #\\space))) s))))\n          (if\
    \ (= n (count-consonants word))\n              (select-words-iter (string-drop\
    \ s (string-length word)) n (cons word words))\n              (select-words-iter\
    \ (string-drop s (string-length word)) n words)))))\n  (select-words-iter s n\
    \ '()))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n  (define (count_consonants w)\n    (define (count_consonants-iter w i)\n\
    \      (if (= i (string-length w))\n          0\n          (if (is_vowel? (string-ref\
    \ w i))\n              (count_consonants-iter w (+ i 1))\n              (+ 1 (count_consonants-iter\
    \ w (+ i 1))))))\n    (count_consonants-iter w 0))\n  (define (select_words-iter\
    \ s n i)\n    (if (= i (string-length s))\n        '()\n        (let ((w (string-trim\
    \ (string-take s i))))\n          (if (= (count_consonants w) n)\n           \
    \   (cons w (select_words-iter s n (+ i 1)))\n              (select_words-iter\
    \ s n (+ i 1))))))\n  (select_words-iter s n 0))\n", "  (define (is_consonant\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants w)\n    (cond\n      [(empty?\
    \ w) 0]\n      [(is_consonant (first w)) (+ 1 (count_consonants (rest w)))]\n\
    \      [else (count_consonants (rest w))]))\n  (define (select_words_iter s n\
    \ l)\n    (cond\n      [(empty? s) l]\n      [(count_consonants (first s)) (=\
    \ n (count_consonants (first s)))]\n      [else (select_words_iter (rest s) n\
    \ (append l (list (first s))))]))\n  (select_words_iter (string-split s) n (list)))\n",
  "  (define (is-consonant? c)\n    (cond\n      ((or (char=? c #\\a) (char=? c #\\\
    e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f)\n      (else #t)))\n \
    \ (define (count-consonants word)\n    (cond\n      ((string-empty? word) 0)\n\
    \      ((is-consonant? (string-ref word 0)) (+ 1 (count-consonants (string-tail\
    \ word))))\n      (else (count-consonants (string-tail word)))))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      ((string-empty? s) '())\n      ((= n (count-consonants\
    \ (string-take s (string-index s #\\space))))\n       (cons (string-take s (string-index\
    \ s #\\space)) (select-words-helper (string-drop s (string-index s #\\space))\
    \ n)))\n      (else (select-words-helper (string-drop s (string-index s #\\space))\
    \ n))))\n  (select-words-helper s n))\n", "  (define (consonant? c)\n    (cond\
    \ ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)) #f)\n          (else #t)))\n  (define (count-consonants word)\n   \
    \ (cond ((string-empty? word) 0)\n          ((consonant? (string-ref word 0))\
    \ (+ 1 (count-consonants (string-tail word))))\n          (else (count-consonants\
    \ (string-tail word)))))\n  (define (select-words-helper s n)\n    (cond ((string-empty?\
    \ s) '())\n          ((= n (count-consonants (first (string-split s #\\space))))\n\
    \           (cons (first (string-split s #\\space)) (select-words-helper (string-trim-both\
    \ s) n)))\n          (else (select-words-helper (string-trim-both s) n))))\n \
    \ (select-words-helper s n))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (string-empty? word)\n          count\n          (if\
    \ (is-vowel? (string-ref word 0))\n              (count-consonants-iter (substring\
    \ word 1) count)\n              (count-consonants-iter (substring word 1) (+ count\
    \ 1)))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter s\
    \ n result)\n    (if (string-empty? s)\n        result\n        (let ((word (string-trim\
    \ (string-take-while (lambda (c) (not (char=? c #\\space))) s))))\n          (if\
    \ (= n (count-consonants word))\n              (select-words-iter (string-drop\
    \ s (string-length word)) n (cons word result))\n              (select-words-iter\
    \ (string-drop s (string-length word)) n result)))))\n  (select-words-iter s n\
    \ '()))\n", "  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split\
    \ s)]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n\
    \             [consonant-count (lambda (word)\n                              \
    \  (let loop ([word word]\n                                           [count 0])\n\
    \                                  (if (string-null? word)\n                 \
    \                     count\n                                      (if (member\
    \ (string-ref word 0) consonants)\n                                          (loop\
    \ (substring word 1) (+ count 1))\n                                          (loop\
    \ (substring word 1) count)))))]\n             [selected-words (filter (lambda\
    \ (word)\n                                       (= (consonant-count word) n))\n\
    \                                     words)])\n        selected-words)))\n</code>\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([word (first (string-split\
    \ s #\\space))]\n           [rest (rest (string-split s #\\space))])\n       (cond\n\
    \         [(= n (count-consonants word))\n          (cons word (select_words (string-join\
    \ rest #\\space) n))]\n         [else (select_words (string-join rest #\\space)\
    \ n)]))]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([word (first\
    \ (regexp-match #rx\"\\w+\" s))])\n       (if (= n (count-consonants word))\n\
    \           (cons word (select_words (substring s (add1 (string-length word)))\
    \ n))\n           (select_words (substring s (add1 (string-length word))) n)))]))\n",
  "  (define (is_consonant? c)\n    (cond\n      [(string=? c \"a\") #f]\n      [(string=?\
    \ c \"e\") #f]\n      [(string=? c \"i\") #f]\n      [(string=? c \"o\") #f]\n\
    \      [(string=? c \"u\") #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n words)\n    (cond\n      [(empty? s) words]\n\
    \      [(= n (count_consonants (first s))) (select_words_iter (rest s) n (append\
    \ words (list (first s))))]\n      [else (select_words_iter (rest s) n words)]))\n\
    \  (select_words_iter (string-split s) n (list)))\n", "  (define (is_vowel? c)\n\
    \    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n \
    \       (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (count-consonants\
    \ word)\n    (cond ((empty? word) 0)\n          ((is_vowel? (first word)) (count-consonants\
    \ (rest word)))\n          (else (+ 1 (count-consonants (rest word))))))\n  (define\
    \ (select-words-helper words n)\n    (cond ((empty? words) empty)\n          ((=\
    \ n (count-consonants (first words)))\n           (cons (first words) (select-words-helper\
    \ (rest words) n)))\n          (else (select-words-helper (rest words) n))))\n\
    \  (select-words-helper (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (let* ([words (string-split s)]\n            [word (first words)]\n\
    \            [rest (rest words)]\n            [consonants (count-consonants word)])\n\
    \       (cond\n         [(= consonants n) (cons word (select_words (string-join\
    \ rest) n))]\n         [else (select_words (string-join rest) n)]))]))\n", " \
    \ (define (is_consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\\
    o #\\u)) #f]\n      [else #t]))\n  (define (count_consonants s)\n    (cond\n \
    \     [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count_consonants (first\
    \ s)))\n       (select_words_iter (rest s) n (append acc (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o\
    \ #\\u)))\n  (define (count-consonants w)\n    (define (count-consonants-iter\
    \ w n)\n      (if (empty? w)\n          n\n          (if (is_vowel (first w))\n\
    \              (count-consonants-iter (rest w) n)\n              (count-consonants-iter\
    \ (rest w) (+ n 1)))))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s n l)\n    (if (empty? s)\n        l\n        (let ((w (first s)))\n      \
    \    (if (= n (count-consonants w))\n              (select-words-iter (rest s)\
    \ n (cons w l))\n              (select-words-iter (rest s) n l)))))\n  (select-words-iter\
    \ (string-split s) n '()))\n", "  (define (is_consonant? c)\n    (cond ((or (char=?\
    \ c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f)\n\
    \          (else #t)))\n  (define (count_consonants s)\n    (cond ((string-empty?\
    \ s) 0)\n          ((is_consonant? (string-ref s 0)) (+ 1 (count_consonants (string-tail\
    \ s))))\n          (else (count_consonants (string-tail s)))))\n  (define (select_words_iter\
    \ s n acc)\n    (cond ((string-empty? s) acc)\n          ((= n (count_consonants\
    \ (string-take s (string-index s #\\space))))\n           (select_words_iter (string-drop\
    \ s (string-index s #\\space)) n (cons (string-take s (string-index s #\\space))\
    \ acc)))\n          (else (select_words_iter (string-drop s (string-index s #\\\
    space)) n acc))))\n  (select_words_iter s n '()))\n", "  (define (count-consonants\
    \ word)\n    (let loop ([i 0] [count 0])\n      (cond [(= i (string-length word))\
    \ count]\n            [(member (string-ref word i) '(\"a\" \"e\" \"i\" \"o\" \"\
    u\")) (loop (+ i 1) count)]\n            [else (loop (+ i 1) (+ count 1))])))\n\
    \  (filter (lambda (word) (= (count-consonants word) n))\n          (string-split\
    \ s)))\n", "  (define (is-consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count-consonants s)\n    (if (string-empty? s)\n        0\n\
    \        (+ (if (is-consonant? (string-ref s 0)) 1 0)\n           (count-consonants\
    \ (substring s 1)))))\n  (define (select-words-helper s n)\n    (if (string-empty?\
    \ s)\n        '()\n        (let ((word (string-trim s)))\n          (if (= n (count-consonants\
    \ word))\n              (cons word (select-words-helper (substring s (string-length\
    \ word)) n))\n              (select-words-helper (substring s (string-length word))\
    \ n)))))\n  (select-words-helper s n))\n", "  (define (consonant? c)\n    (cond\n\
    \      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\\
    i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n      [else (count-consonants\
    \ (rest s))]))\n  (define (select-words s n)\n    (cond\n      [(empty? s) empty]\n\
    \      [(= n (count-consonants (first s)))\n       (cons (first s) (select-words\
    \ (rest s) n))]\n      [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s #\\space) n))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a\
    \ #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter words n result)\n    (if (empty? words)\n\
    \        result\n        (if (= n (count-consonants (first words)))\n        \
    \    (select-words-iter (rest words) n (append result (list (first words))))\n\
    \            (select-words-iter (rest words) n result))))\n  (select-words-iter\
    \ (string-split s) n (list)))\n", "  (define (is_consonant c)\n    (cond ((or\
    \ (equal? c #\\a) (equal? c #\\e) (equal? c #\\i) (equal? c #\\o) (equal? c #\\\
    u)) #f)\n          (else #t)))\n  (define (count_consonants word)\n    (cond ((null?\
    \ word) 0)\n          ((is_consonant (car word)) (+ 1 (count_consonants (cdr word))))\n\
    \          (else (count_consonants (cdr word)))))\n  (define (select_words_helper\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count_consonants (car s)))\
    \ (cons (car s) (select_words_helper (cdr s) n)))\n          (else (select_words_helper\
    \ (cdr s) n))))\n  (select_words_helper (string-split s) n))\n", "  (define (consonant?\
    \ c)\n    (member c (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ ws n)\n    (cond\n      [(empty? ws) empty]\n      [(= n (count-consonants (first\
    \ ws))) (cons (first ws) (select-words-helper (rest ws) n))]\n      [else (select-words-helper\
    \ (rest ws) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (is-consonant? c)\n       (not\
    \ (or (char-alphabetic? c) (char-whitespace? c))))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (+\
    \ (if (is-consonant? (first word)) 1 0)\n             (count-consonants (rest\
    \ word)))]))\n     (define (select-words-helper s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [(count-consonants (first s)) = n (cons (first s) (select-words-helper\
    \ (rest s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants w)\n    (define (count-consonants-iter w i)\n   \
    \   (if (= i (string-length w))\n          0\n          (if (is-consonant? (string-ref\
    \ w i))\n              (+ 1 (count-consonants-iter w (+ i 1)))\n             \
    \ (count-consonants-iter w (+ i 1)))))\n    (count-consonants-iter w 0))\n  (define\
    \ (select-words-iter s i)\n    (if (= i (string-length s))\n        '()\n    \
    \    (let ((w (string-trim (string-take s i))))\n          (if (= (count-consonants\
    \ w) n)\n              (cons w (select-words-iter s (+ i 1)))\n              (select-words-iter\
    \ s (+ i 1))))))\n  (select-words-iter s 0))\n", "  (define (consonant? c)\n \
    \   (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants s)\n\
    \    (if (empty? s)\n        0\n        (+ (if (consonant? (first s)) 1 0)\n \
    \          (count-consonants (rest s)))))\n  (define (select-words s n)\n    (if\
    \ (empty? s)\n        '()\n        (let ((word (first s)))\n          (if (= n\
    \ (count-consonants word))\n              (cons word (select-words (rest s) n))\n\
    \              (select-words (rest s) n)))))\n  (select-words (string-split s)\
    \ n))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g\
    \ #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z)))\n  (define (count-consonants s)\n    (cond ((null? s) 0)\n          ((consonant?\
    \ (car s)) (+ 1 (count-consonants (cdr s))))\n          (else (count-consonants\
    \ (cdr s)))))\n  (define (select-words-helper s n result)\n    (cond ((null? s)\
    \ result)\n          ((equal? n (count-consonants (car s))) (select-words-helper\
    \ (cdr s) n (append result (list (car s)))))\n          (else (select-words-helper\
    \ (cdr s) n result))))\n  (select-words-helper (string-split s) n (list)))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant? c)\n     \
    \  (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants w)\n\
    \       (if (empty? w)\n           0\n           (+ (if (consonant? (first w))\
    \ 1 0)\n              (count-consonants (rest w)))))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words (rest s) n))]\n       \
    \  [else (select-words (rest s) n)]))\n     (select-words (string-split s) n)]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant? c)\n     \
    \  (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\f)\n     \
    \      (char=? c #\\g) (char=? c #\\h) (char=? c #\\j) (char=? c #\\k)\n     \
    \      (char=? c #\\l) (char=? c #\\m) (char=? c #\\n) (char=? c #\\p)\n     \
    \      (char=? c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t)\n     \
    \      (char=? c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y)\n     \
    \      (char=? c #\\z)))\n     (define (count-consonants word)\n       (cond\n\
    \         [(empty? word) 0]\n         [(consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n         [else (count-consonants (rest word))]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(count-consonants (first s)) (= n (count-consonants (first s)))]\n     \
    \    [else (select-words-helper (rest s) n)]))\n     (select-words-helper (string-split\
    \ s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant?\
    \ c)\n       (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\\
    f) (char=? c #\\g)\n           (char=? c #\\h) (char=? c #\\j) (char=? c #\\k)\
    \ (char=? c #\\l) (char=? c #\\m)\n           (char=? c #\\n) (char=? c #\\p)\
    \ (char=? c #\\q) (char=? c #\\r) (char=? c #\\s)\n           (char=? c #\\t)\
    \ (char=? c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y)\n          \
    \ (char=? c #\\z)))\n     (define (count-consonants s)\n       (cond\n       \
    \  [(empty? s) 0]\n         [(consonant? (first s)) (+ 1 (count-consonants (rest\
    \ s)))]\n         [else (count-consonants (rest s))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s))) (cons (first s) (select-words (rest s) n))]\n         [else (select-words\
    \ (rest s) n)]))\n     (select-words (string-split s) n)]))\n", "  (cond\n   \
    \ [(empty? s) empty]\n    [else\n     (let ([word (first (string-split s #\\space))]\n\
    \           [rest (rest (string-split s #\\space))])\n       (cond\n         [(=\
    \ n (count-consonants word))\n          (cons word (select_words (string-join\
    \ rest #\\space) n))]\n         [else (select_words (string-join rest #\\space)\
    \ n)]))]))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f\
    \ #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)))\n  (define (count-consonants word)\n    (if (empty? word)\n        0\n\
    \        (+ (if (consonant? (first word)) 1 0)\n           (count-consonants (rest\
    \ word)))))\n  (define (select-words-helper words n)\n    (if (empty? words)\n\
    \        empty\n        (if (= n (count-consonants (first words)))\n         \
    \   (cons (first words) (select-words-helper (rest words) n))\n            (select-words-helper\
    \ (rest words) n))))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is_consonant c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (+ (if (is_consonant (string-ref word 0)) 1 0)\n \
    \          (count_consonants (substring word 1)))))\n  (define (select_words_iter\
    \ s n acc)\n    (if (string-empty? s)\n        acc\n        (let ([word (string-trim\
    \ (string-take-while (compose not char-whitespace?) s))])\n          (if (= n\
    \ (count_consonants word))\n              (select_words_iter (string-drop-while\
    \ (compose not char-whitespace?) s) n (cons word acc))\n              (select_words_iter\
    \ (string-drop-while (compose not char-whitespace?) s) n acc)))))\n  (reverse\
    \ (select_words_iter s n '())))\n", "  (define (is_consonant? c)\n    (cond\n\
    \      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\\
    i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (if (string-empty? word)\n        0\n\
    \        (+ (if (is_consonant? (string-ref word 0)) 1 0)\n           (count_consonants\
    \ (substring word 1)))))\n  (define (select_words_iter s n acc)\n    (cond\n \
    \     [(string-empty? s) (reverse acc)]\n      [(= n (count_consonants (string-trim\
    \ (string-take-while (lambda (c) (not (char=? c #\\ ))) s))))\n       (select_words_iter\
    \ (string-drop-while (lambda (c) (not (char=? c #\\ ))) s) n (cons (string-trim\
    \ (string-take-while (lambda (c) (not (char=? c #\\ ))) s)) acc))]\n      [else\
    \ (select_words_iter (string-drop-while (lambda (c) (not (char=? c #\\ ))) s)\
    \ n acc)]))\n  (select_words_iter s n '()))\n", "  (define (is-consonant? c)\n\
    \    (not (or (char-alphabetic? c) (char-whitespace? c))))\n  (define (count-consonants\
    \ s)\n    (cond ((string=? s \"\") 0)\n          ((is-consonant? (string-ref s\
    \ 0))\n           (+ 1 (count-consonants (substring s 1))))\n          (else (count-consonants\
    \ (substring s 1)))))\n  (define (select-words-helper s n result)\n    (cond ((string=?\
    \ s \"\") result)\n          ((= n (count-consonants s))\n           (select-words-helper\
    \ (substring s (string-length s)) n\n                                (append result\
    \ (list s))))\n          (else (select-words-helper (substring s (string-length\
    \ s)) n result))))\n  (select-words-helper s n '()))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else\
    \ #t]))\n  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n\
    \      [(is_consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n \
    \     [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c\
    \ #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\\
    u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter word\
    \ count)\n      (if (string-empty? word)\n          count\n          (if (is-vowel?\
    \ (string-ref word 0))\n              (count-consonants-iter (substring word 1)\
    \ count)\n              (count-consonants-iter (substring word 1) (+ count 1)))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n words)\n\
    \    (if (string-empty? s)\n        words\n        (let ((word (string-trim (string-take-while\
    \ (lambda (c) (not (char=? c #\\space))) s))))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-iter (string-drop s (string-length word))\
    \ n (cons word words))\n              (select-words-iter (string-drop s (string-length\
    \ word)) n words)))))\n  (select-words-iter s n '()))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants (rest s)))]\n\
    \      [else (count_consonants (rest s))]))\n  (define (select_words_iter s n\
    \ lst)\n    (cond\n      [(empty? s) lst]\n      [(= n (count_consonants (first\
    \ s)))\n       (select_words_iter (rest s) n (append lst (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n lst)]))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (if (string=? s \"\")\n      '()\n      (let ((words (string-split\
    \ s)))\n        (filter (lambda (word) (= n (count-consonants word))) words))))\n",
  "  (define (is_consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count_consonants word)\n    (define (count_consonants-iter\
    \ word count)\n      (if (null? word)\n          count\n          (if (is_consonant?\
    \ (car word))\n              (count_consonants-iter (cdr word) (+ count 1))\n\
    \              (count_consonants-iter (cdr word) count))))\n    (count_consonants-iter\
    \ word 0))\n  (define (select_words-iter s n result)\n    (if (null? s)\n    \
    \    result\n        (let ((word (car s)))\n          (if (= n (count_consonants\
    \ word))\n              (select_words-iter (cdr s) n (append result (list word)))\n\
    \              (select_words-iter (cdr s) n result)))))\n  (select_words-iter\
    \ (string-split s) n '()))\n", "  (define (is-consonant? c)\n    (and (not (char-alphabetic?\
    \ c))\n         (not (char=? c #\\a))\n         (not (char=? c #\\e))\n      \
    \   (not (char=? c #\\i))\n         (not (char=? c #\\o))\n         (not (char=?\
    \ c #\\u))))\n  (define (count-consonants s)\n    (define (count-consonants-iter\
    \ s i)\n      (if (eq? i (string-length s))\n          0\n          (if (is-consonant?\
    \ (string-ref s i))\n              (+ 1 (count-consonants-iter s (+ i 1)))\n \
    \             (count-consonants-iter s (+ i 1)))))\n    (count-consonants-iter\
    \ s 0))\n  (define (select-words-iter s i)\n    (if (eq? i (string-length s))\n\
    \        (list)\n        (let ((word (string-trim (string-take s i))))\n     \
    \     (if (and (not (string=? word \"\"))\n                   (= n (count-consonants\
    \ word)))\n              (cons word (select-words-iter s (+ i 1)))\n         \
    \     (select-words-iter s (+ i 1))))))\n  (select-words-iter s 0))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants s)\n    (cond\n\
    \      [(string=? s \"\") 0]\n      [(is_consonant? (string-ref s 0)) (+ 1 (count_consonants\
    \ (substring s 1)))]\n      [else (count_consonants (substring s 1))]))\n  (define\
    \ (select_words_iter s n acc)\n    (cond\n      [(string=? s \"\") (reverse acc)]\n\
    \      [(= n (count_consonants (string-before s \" \")))\n       (select_words_iter\
    \ (string-after s \" \") n (cons (string-before s \" \") acc))]\n      [else (select_words_iter\
    \ (string-after s \" \") n acc)]))\n  (select_words_iter s n '()))\n", "  (define\
    \ (is_consonant? c)\n    (and (not (char-alphabetic? c))\n         (not (char=?\
    \ c #\\a))\n         (not (char=? c #\\e))\n         (not (char=? c #\\i))\n \
    \        (not (char=? c #\\o))\n         (not (char=? c #\\u))))\n  (define (count_consonants\
    \ s)\n    (define (count_consonants_iter s i acc)\n      (if (= i (string-length\
    \ s))\n          acc\n          (if (is_consonant? (string-ref s i))\n       \
    \       (count_consonants_iter s (+ i 1) (+ acc 1))\n              (count_consonants_iter\
    \ s (+ i 1) acc))))\n    (count_consonants_iter s 0 0))\n  (define (select_words_iter\
    \ s i acc)\n    (if (= i (string-length s))\n        acc\n        (let ((word\
    \ (string-trim (string-take s i (string-index-right s #\\space i)))))\n      \
    \    (if (= (count_consonants word) n)\n              (select_words_iter s (+\
    \ i (string-length word)) (cons word acc))\n              (select_words_iter s\
    \ (+ i (string-length word)) acc)))))\n  (select_words_iter s 0 '()))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (+ (if (is_consonant? (string-ref word 0)) 1 0)\n\
    \           (count_consonants (substring word 1)))))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(string-empty? s) (reverse acc)]\n      [(= n (count_consonants\
    \ (string-trim (string-before s #\\space))))\n       (select_words_iter (string-after\
    \ s #\\space) n (cons (string-trim (string-before s #\\space)) acc))]\n      [else\
    \ (select_words_iter (string-after s #\\space) n acc)]))\n  (select_words_iter\
    \ s n '()))\n", "  (define (is-consonant? c)\n    (not (or (char-alphabetic? c)\
    \ (char-whitespace? c))))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \      [else (count-consonants (rest s))]))\n  (define (select-words-helper s\
    \ n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (if (= n (count-consonants\
    \ (first (string-split s #\\space))))\n         (cons (first (string-split s #\\\
    space))\n               (select_words (rest (string-split s #\\space)) n))\n \
    \        (select_words (rest (string-split s #\\space)) n))]))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n lst)\n    (cond\n      [(empty? s) lst]\n      [(count_consonants (first\
    \ s)) (= n (count_consonants (first s)))\n       (select_words_iter (rest s) n\
    \ (append lst (list (first s))))]\n      [else (select_words_iter (rest s) n lst)]))\n\
    \  (select_words_iter (string-split s) n '()))\n", "  (define (is_consonant c)\n\
    \    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=?\
    \ c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else\
    \ #t]))\n  (define (count_consonants w)\n    (cond\n      [(empty? w) 0]\n   \
    \   [(is_consonant (first w)) (+ 1 (count_consonants (rest w)))]\n      [else\
    \ (count_consonants (rest w))]))\n  (define (select_words_iter s n lst)\n    (cond\n\
    \      [(empty? s) lst]\n      [(char=? (first s) #\\ ) (select_words_iter (rest\
    \ s) n lst)]\n      [else (select_words_iter (rest s) n (if (= n (count_consonants\
    \ (first s))) (cons (first s) lst) lst))]))\n  (select_words_iter s n (list)))\n",
  "  (define (is-consonant? c)\n    (or (equal? c #\\b)\n        (equal? c #\\c)\n\
    \        (equal? c #\\d)\n        (equal? c #\\f)\n        (equal? c #\\g)\n \
    \       (equal? c #\\h)\n        (equal? c #\\j)\n        (equal? c #\\k)\n  \
    \      (equal? c #\\l)\n        (equal? c #\\m)\n        (equal? c #\\n)\n   \
    \     (equal? c #\\p)\n        (equal? c #\\q)\n        (equal? c #\\r)\n    \
    \    (equal? c #\\s)\n        (equal? c #\\t)\n        (equal? c #\\v)\n     \
    \   (equal? c #\\w)\n        (equal? c #\\x)\n        (equal? c #\\y)\n      \
    \  (equal? c #\\z)))\n  (define (count-consonants word)\n    (if (empty? word)\n\
    \        0\n        (if (is-consonant? (first word))\n            (+ 1 (count-consonants\
    \ (rest word)))\n            (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ words n)\n    (if (empty? words)\n        '()\n        (if (= n (count-consonants\
    \ (first words)))\n            (cons (first words) (select-words-helper (rest\
    \ words) n))\n            (select-words-helper (rest words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-iter (rest s) n (append result (list word)))\n\
    \              (select-words-iter (rest s) n result)))))\n  (select-words-iter\
    \ (string-split s #\\space) n '()))\n", "  (cond\n    [(empty? s) empty]\n   \
    \ [else\n     (let ([w (first (string-split s #\\space))]\n           [r (rest\
    \ (string-split s #\\space))])\n       (if (= n (count-consonants w))\n      \
    \     (cons w (select_words (string-join r #\\space) n))\n           (select_words\
    \ (string-join r #\\space) n)))]))\n", "  (if (string=? s \"\")\n      '()\n \
    \     (let ([word (string-tokenize s)])\n        (if (and (not (string=? (car\
    \ word) \"\"))\n                 (= n (count-consonants (car word))))\n      \
    \      (cons (car word) (select_words (cdr word) n))\n            (select_words\
    \ (cdr word) n)))))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n acc)\n    (cond\n      [(empty? s) acc]\n\
    \      [(count_consonants (first s)) (= n (count_consonants (first s)))]\n   \
    \   [else (select_words_helper (rest s) n (cons (first s) acc))]))\n  (select_words_helper\
    \ (string-split s) n '()))\n", "  (define (is_consonant? c)\n    (cond\n     \
    \ [(or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u))\n       #f]\n      [else #t]))\n  (define (count_consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1\
    \ (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s)))\n       (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (consonant? c)\n       (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=?\
    \ c #\\f) (char=? c #\\g) (char=? c #\\h) (char=? c #\\j) (char=? c #\\k) (char=?\
    \ c #\\l) (char=? c #\\m) (char=? c #\\n) (char=? c #\\p) (char=? c #\\q) (char=?\
    \ c #\\r) (char=? c #\\s) (char=? c #\\t) (char=? c #\\v) (char=? c #\\w) (char=?\
    \ c #\\x) (char=? c #\\y) (char=? c #\\z)))\n     (define (count-consonants w)\n\
    \       (cond\n         [(empty? w) 0]\n         [(consonant? (first w)) (+ 1\
    \ (count-consonants (rest w)))]\n         [else (count-consonants (rest w))]))\n\
    \     (define (select-words s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n         [else (select-words (rest s) n)]))\n     (select-words (string-split\
    \ s #\\space) n)]))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\\
    d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n  (define (count-consonants word)\n    (if (null? word)\n    \
    \    0\n        (+ (if (consonant? (car word)) 1 0)\n           (count-consonants\
    \ (cdr word)))))\n  (define (select-words-helper words n)\n    (if (null? words)\n\
    \        '()\n        (if (= n (count-consonants (car words)))\n            (cons\
    \ (car words) (select-words-helper (cdr words) n))\n            (select-words-helper\
    \ (cdr words) n))))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([words (string-split s)])\n        (filter (lambda\
    \ (w) (= n (count-consonants w))) words))))\n", "  (define (is_consonant? c)\n\
    \    (or (equal? c #\\b)\n        (equal? c #\\c)\n        (equal? c #\\d)\n \
    \       (equal? c #\\f)\n        (equal? c #\\g)\n        (equal? c #\\h)\n  \
    \      (equal? c #\\j)\n        (equal? c #\\k)\n        (equal? c #\\l)\n   \
    \     (equal? c #\\m)\n        (equal? c #\\n)\n        (equal? c #\\p)\n    \
    \    (equal? c #\\q)\n        (equal? c #\\r)\n        (equal? c #\\s)\n     \
    \   (equal? c #\\t)\n        (equal? c #\\v)\n        (equal? c #\\w)\n      \
    \  (equal? c #\\x)\n        (equal? c #\\y)\n        (equal? c #\\z)))\n  (define\
    \ (count_consonants word)\n    (if (empty? word)\n        0\n        (if (is_consonant?\
    \ (first word))\n            (+ 1 (count_consonants (rest word)))\n          \
    \  (count_consonants (rest word)))))\n  (define (select_words_helper s n result)\n\
    \    (if (empty? s)\n        result\n        (if (= n (count_consonants (first\
    \ s)))\n            (select_words_helper (rest s) n (append result (list (first\
    \ s))))\n            (select_words_helper (rest s) n result))))\n  (select_words_helper\
    \ (string-split s) n '()))\n", "  (define (is_consonant c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let\
    \ ([w (first (regexp-match #rx\"\\w+\" s))])\n       (if (= n (count-consonants\
    \ w))\n           (cons w (select_words (substring s (add1 (string-length w)))\
    \ n))\n           (select_words (substring s (add1 (string-length w))) n)))]))\n",
  "  (define (is_consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\\
    j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n \
    \ (define (count-consonants word)\n    (if (empty? word)\n        0\n        (+\
    \ (if (is_consonant? (first word)) 1 0) (count-consonants (rest word)))))\n  (define\
    \ (select-words-helper s n)\n    (if (empty? s)\n        '()\n        (let ((word\
    \ (first s)))\n          (if (= n (count-consonants word))\n              (cons\
    \ word (select-words-helper (rest s) n))\n              (select-words-helper (rest\
    \ s) n)))))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants w)\n    (cond\n      [(empty?\
    \ w) 0]\n      [(is_consonant? (first w)) (+ 1 (count_consonants (rest w)))]\n\
    \      [else (count_consonants (rest w))]))\n  (define (select_words_iter s n\
    \ acc)\n    (cond\n      [(empty? s) acc]\n      [(count_consonants (first s))\
    \ (+ 1 (count_consonants (rest s)))]\n      [else (select_words_iter (rest s)\
    \ n acc)]))\n  (select_words_iter (string-split s) n '()))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)) #f]\n      [else #t]))\n  (define (count_consonants\
    \ w)\n    (define (count_consonants_iter w i)\n      (cond\n        [(= i (string-length\
    \ w)) i]\n        [(is_consonant? (string-ref w i)) (count_consonants_iter w (+\
    \ i 1))]\n        [else (count_consonants_iter w (+ i 1))]))\n    (count_consonants_iter\
    \ w 0))\n  (define (select_words_iter s i)\n    (cond\n      [(= i (string-length\
    \ s)) '()]\n      [(char=? (string-ref s i) #\\ ) (select_words_iter s (+ i 1))]\n\
    \      [(= n (count_consonants (string-trim (string-take s (+ i 1)))))\n     \
    \  (cons (string-trim (string-take s (+ i 1))) (select_words_iter s (+ i 1)))]\n\
    \      [else (select_words_iter s (+ i 1))]))\n  (select_words_iter s 0))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant? c)\n     \
    \  (not (or (char-alphabetic? c) (char-whitespace? c))))\n     (define (count-consonants\
    \ s)\n       (length (filter consonant? s)))\n     (define (select-words s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants s))\
    \ (cons s empty)]\n         [else empty]))\n     (append (select-words (first\
    \ (string-split s #\\space)) n)\n             (select-words (string-join (rest\
    \ (string-split s #\\space)) #\\space) n))]))\n", "  (define (count-consonants\
    \ s)\n    (define (is-consonant? c)\n      (cond\n        [(char=? c #\\a) #f]\n\
    \        [(char=? c #\\e) #f]\n        [(char=? c #\\i) #f]\n        [(char=?\
    \ c #\\o) #f]\n        [(char=? c #\\u) #f]\n        [else #t]))\n    (define\
    \ (count-consonants-iter s count)\n      (cond\n        [(empty? s) count]\n \
    \       [(is-consonant? (first s)) (count-consonants-iter (rest s) (+ count 1))]\n\
    \        [else (count-consonants-iter (rest s) count)]))\n    (count-consonants-iter\
    \ s 0))\n  (define (select-words-iter s n result)\n    (cond\n      [(empty? s)\
    \ result]\n      [(= n (count-consonants (first s))) (select-words-iter (rest\
    \ s) n (append result (list (first s))))]\n      [else (select-words-iter (rest\
    \ s) n result)]))\n  (select-words-iter (string-split s) n (list)))\n", "  (if\
    \ (string=? s \"\")\n      '()\n      (let ((words (string-split s #\\space)))\n\
    \        (filter (lambda (word)\n                  (= n (count-consonants word)))\n\
    \                words))))\n", "  (define (is-consonant? c)\n    (cond [(char-ci=?\
    \ c #\\a) #f]\n          [(char-ci=? c #\\e) #f]\n          [(char-ci=? c #\\\
    i) #f]\n          [(char-ci=? c #\\o) #f]\n          [(char-ci=? c #\\u) #f]\n\
    \          [else #t]))\n  (define (count-consonants s)\n    (cond [(empty? s)\
    \ 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n lst)\n    (cond [(empty? s) lst]\n          [(= n (count-consonants (first\
    \ s)))\n           (select-words-helper (rest s) n (append lst (list (first s))))]\n\
    \          [else (select-words-helper (rest s) n lst)]))\n  (select-words-helper\
    \ (string-split s) n '()))\n", "  (define (consonant? c)\n    (cond ((char=? c\
    \ #\\a) #f)\n          ((char=? c #\\e) #f)\n          ((char=? c #\\i) #f)\n\
    \          ((char=? c #\\o) #f)\n          ((char=? c #\\u) #f)\n          (else\
    \ #t)))\n  (define (count-consonants s)\n    (cond ((string=? s \"\") 0)\n   \
    \       ((consonant? (string-ref s 0)) (+ 1 (count-consonants (substring s 1))))\n\
    \          (else (count-consonants (substring s 1)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((string=? s \"\") '())\n          ((= n (count-consonants (string-take\
    \ s (string-index s #\\space))))\n           (cons (string-take s (string-index\
    \ s #\\space))\n                 (select-words-helper (string-drop s (string-index\
    \ s #\\space)) n)))\n          (else (select-words-helper (string-drop s (string-index\
    \ s #\\space)) n))))\n  (select-words-helper s n))\n", "  (define (is-consonant?\
    \ c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n  (define (count-consonants\
    \ word)\n    (cond ((null? word) 0)\n          ((is-consonant? (car word)) (+\
    \ 1 (count-consonants (cdr word))))\n          (else (count-consonants (cdr word)))))\n\
    \  (define (select-words-helper words n)\n    (cond ((null? words) '())\n    \
    \      ((= n (count-consonants (car words))) (cons (car words) (select-words-helper\
    \ (cdr words) n)))\n          (else (select-words-helper (cdr words) n))))\n \
    \ (select-words-helper (string-split s) n))\n", "  (define (is-consonant? c)\n\
    \    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n   \
    \   [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (if (string=? s \"\")\n      '()\n      (let ((words\
    \ (string-split s)))\n        (filter (lambda (word) (= n (count-consonants word)))\
    \ words))))\n", "  (define (is_consonant c)\n    (member c '(#\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\n                #\n                n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count_consonants w)\n\
    \    (cond\n      [(empty? w) 0]\n      [(is_consonant (first w)) (+ 1 (count_consonants\
    \ (rest w)))]\n      [else (count_consonants (rest w))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(equal? n (count_consonants\
    \ (first s)))\n       (select_words_iter (rest s) n (append acc (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n      [else\
    \ (count-consonants (rest word))]))\n  (define (select-words-helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s))) (cons\
    \ (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s #\\space) n))\n", " \
    \ (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n          [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count-consonants (first s)))\n           (cons (first s) (select-words-helper\
    \ (rest s) n))]\n          [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n  (define (count-consonants s)\n    (if (string-empty?\
    \ s)\n        0\n        (+ (if (is_consonant? (string-ref s 0)) 1 0)\n      \
    \     (count-consonants (substring s 1)))))\n  (define (select-words-helper s\
    \ n result)\n    (if (string-empty? s)\n        result\n        (let ((word (string-trim\
    \ (string-take-while char-alphabetic? s))))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-helper (string-drop-while char-alphabetic?\
    \ s) n (cons word result))\n              (select-words-helper (string-drop-while\
    \ char-alphabetic? s) n result)))))\n  (reverse (select-words-helper s n '())))\n",
  "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define\
    \ (count-consonants s)\n    (cond ((null? s) 0)\n          ((consonant? (car s))\
    \ (+ 1 (count-consonants (cdr s))))\n          (else (count-consonants (cdr s)))))\n\
    \  (define (select-words s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants\
    \ (car s))) (cons (car s) (select-words (cdr s) n)))\n          (else (select-words\
    \ (cdr s) n))))\n  (select-words (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n  (define (count-consonants\
    \ word)\n    (cond ((null? word) 0)\n          ((is-consonant? (car word)) (+\
    \ 1 (count-consonants (cdr word))))\n          (else (count-consonants (cdr word)))))\n\
    \  (define (select-words-helper s n)\n    (cond ((null? s) '())\n          ((=\
    \ n (count-consonants (car s))) (cons (car s) (select-words-helper (cdr s) n)))\n\
    \          (else (select-words-helper (cdr s) n))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (is-consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count-consonants s)\n    (cond ((string=? s \"\") 0)\n   \
    \       ((is-consonant? (string-ref s 0)) (+ 1 (count-consonants (substring s\
    \ 1))))\n          (else (count-consonants (substring s 1)))))\n  (define (select-words-helper\
    \ s n result)\n    (cond ((string=? s \"\") result)\n          ((= n (count-consonants\
    \ s)) (select-words-helper (substring s (string-length s)) n (append result (list\
    \ s))))\n          (else (select-words-helper (substring s (string-length s))\
    \ n result))))\n  (select-words-helper s n '()))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (define (consonant? c)\n       (or (char=? c #\\b) (char=?\
    \ c #\\c) (char=? c #\\d) (char=? c #\\f) (char=? c #\\g) (char=? c #\\h) (char=?\
    \ c #\\j) (char=? c #\\k) (char=? c #\\l) (char=? c #\\m) (char=? c #\\n) (char=?\
    \ c #\\p) (char=? c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t) (char=?\
    \ c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y) (char=? c #\\z)))\n\
    \     (define (count-consonants word)\n       (cond\n         [(empty? word) 0]\n\
    \         [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n \
    \        [else (count-consonants (rest word))]))\n     (define (select-words s\
    \ n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s))) (cons (first s) (select-words (rest s) n))]\n         [else (select-words\
    \ (rest s) n)]))\n     (select-words (string-split s) n)]))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([w (string-split s)])\n        (if (and (not\
    \ (string=? (car w) \"\"))\n                 (= n (count-consonants (car w))))\n\
    \            (cons (car w) (select_words (string-join (cdr w)) n))\n         \
    \   (select_words (string-join (cdr w)) n)))))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (let*\n         ([word (first (regexp-match #rx\"\\w+\" s))]\n\
    \          [rest (substring s (add1 (string-length word)))]\n          [consonants\
    \ (count-consonants word)])\n       (cond\n         [(= n consonants) (cons word\
    \ (select_words rest n))]\n         [else (select_words rest n)]))]))\n", "  (define\
    \ (is_consonant? c)\n    (and (not (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \        (not (char-numeric? c))))\n  (define (count-consonants s)\n    (cond\
    \ ((null? s) 0)\n          ((is_consonant? (car s)) (+ 1 (count-consonants (cdr\
    \ s))))\n          (else (count-consonants (cdr s)))))\n  (define (select-words\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\
    \ (cons (car s) (select-words (cdr s) n)))\n          (else (select-words (cdr\
    \ s) n))))\n  (select-words (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \      [else (count-consonants (rest s))]))\n  (define (select-words-helper s\
    \ n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (define (consonant? c)\n       (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants w)\n      \
    \ (cond\n         [(empty? w) 0]\n         [else\n          (+ (if (consonant?\
    \ (first w)) 1 0) (count-consonants (rest w)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words (rest s) n))]\n       \
    \  [else (select-words (rest s) n)]))\n     (select-words (string-split s) n)]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-vowel? (first\
    \ s)) (count-consonants (rest s))]\n          [else (+ 1 (count-consonants (rest\
    \ s)))]))\n  (define (select-words-iter s n acc)\n    (cond [(empty? s) (reverse\
    \ acc)]\n          [(= n (count-consonants (first s)))\n           (select-words-iter\
    \ (rest s) n (cons (first s) acc))]\n          [else (select-words-iter (rest\
    \ s) n acc)]))\n  (select-words-iter (string-split s) n '()))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n      [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n)\n    (cond\n      [(empty?\
    \ s) empty]\n      [(= n (count-consonants (first s)))\n       (cons (first s)\
    \ (select-words-helper (rest s) n))]\n      [else (select-words-helper (rest s)\
    \ n)]))\n  (select-words-helper (string-split s) n))\n", "  (if (string=? s \"\
    \")\n      '()\n      (let ((words (string-split s \" \")))\n        (filter (lambda\
    \ (w) (= n (count-consonants w))) words))))\n", "  (define (is-consonant? c)\n\
    \    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ s)\n    (if (empty? s)\n        0\n        (+ (if (is-consonant? (first s))\
    \ 1 0)\n           (count-consonants (rest s)))))\n  (define (select-words-iter\
    \ s n result)\n    (if (empty? s)\n        result\n        (let ((word (first\
    \ s)))\n          (if (= n (count-consonants word))\n              (select-words-iter\
    \ (rest s) n (append result (list word)))\n              (select-words-iter (rest\
    \ s) n result)))))\n  (select-words-iter (string-split s) n '()))\n", "  (define\
    \ (consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n\
    \  (define (count-consonants s)\n    (if (string-empty? s)\n        0\n      \
    \  (+ (if (consonant? (string-ref s 0)) 1 0)\n           (count-consonants (substring\
    \ s 1)))))\n  (define (select-words-helper s n lst)\n    (if (string-empty? s)\n\
    \        lst\n        (let ((word (string-trim s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-helper (substring s (string-length word))\
    \ n (cons word lst))\n              (select-words-helper (substring s (string-length\
    \ word)) n lst)))))\n  (select-words-helper s n '()))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let ([word (first (regexp-match #rx\"\\w+\" s))])\n\
    \       (if (= n (count-consonants word))\n           (cons word (select_words\
    \ (substring s (string-length word)) n))\n           (select_words (substring\
    \ s (string-length word)) n)))]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (if (empty? word)\n          count\n\
    \          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first s)))\n       \
    \   (if (= n (count-consonants word))\n              (select-words-iter (rest\
    \ s) n (append result (list word)))\n              (select-words-iter (rest s)\
    \ n result)))))\n  (select-words-iter (string-split s) n '()))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (cond [(empty?\
    \ s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n result)\n    (cond [(empty? s) result]\n          [(= n (count-consonants\
    \ (first s))) (select-words-helper (rest s) n (append result (list (first s))))]\n\
    \          [else (select-words-helper (rest s) n result)]))\n  (select-words-helper\
    \ (string-split s) n (list)))\n", "  (if (string=? s \"\")\n      '()\n      (let\
    \ ((words (string-split s)))\n        (filter (lambda (word) (= n (count-consonants\
    \ word))) words))))\n", "  (define (consonant? c)\n    (or (char=? c #\\b) (char=?\
    \ c #\\c) (char=? c #\\d) (char=? c #\\f) (char=? c #\\g) (char=? c #\\h) (char=?\
    \ c #\\j) (char=? c #\\k) (char=? c #\\l) (char=? c #\\m) (char=? c #\\n) (char=?\
    \ c #\\p) (char=? c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t) (char=?\
    \ c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y) (char=? c #\\z)))\n\
    \  (define (count-consonants w)\n    (if (empty? w)\n        0\n        (if (consonant?\
    \ (first w))\n            (+ 1 (count-consonants (rest w)))\n            (count-consonants\
    \ (rest w)))))\n  (define (select-words-helper s n)\n    (if (empty? s)\n    \
    \    empty\n        (if (= n (count-consonants (first s)))\n            (cons\
    \ (first s) (select-words-helper (rest s) n))\n            (select-words-helper\
    \ (rest s) n))))\n  (select-words-helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ w)\n    (for/sum ([c (in-string w)])\n      (if (is-consonant? c) 1 0)))\n \
    \ (define (select-words-helper ws)\n    (cond [(empty? ws) empty]\n          [(=\
    \ n (count-consonants (first ws)))\n           (cons (first ws) (select-words-helper\
    \ (rest ws)))]\n          [else (select-words-helper (rest ws))]))\n  (select-words-helper\
    \ (string-split s)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n \
    \       (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n  \
    \      (char=? c #\\u)))\n  (define (count-consonants w)\n    (define (count-consonants-iter\
    \ w i)\n      (if (= i (string-length w))\n          0\n          (if (is-vowel?\
    \ (string-ref w i))\n              (count-consonants-iter w (+ i 1))\n       \
    \       (+ 1 (count-consonants-iter w (+ i 1))))))\n    (count-consonants-iter\
    \ w 0))\n  (define (select-words-iter s i)\n    (if (= i (string-length s))\n\
    \        '()\n        (let ((w (string-trim (string-take s i))))\n          (if\
    \ (= (count-consonants w) n)\n              (cons w (select-words-iter s (+ i\
    \ 1)))\n              (select-words-iter s (+ i 1))))))\n  (select-words-iter\
    \ s 0))\n", "  (if (string=? s \"\")\n      '()\n      (let ((words (string-split\
    \ s \" \")))\n        (filter (lambda (w) (= n (count-consonants w))) words))))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants w)\n    (cond\n      [(empty? w) 0]\n      [(is-vowel? (first\
    \ w)) (count-consonants (rest w))]\n      [else (+ 1 (count-consonants (rest w)))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s)))\n       (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))\n  (define (count-consonants word)\n    (if (empty? word)\n\
    \        0\n        (+ (if (consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-helper words n)\n    (if (empty? words)\n\
    \        '()\n        (if (= n (count-consonants (first words)))\n           \
    \ (cons (first words) (select-words-helper (rest words) n))\n            (select-words-helper\
    \ (rest words) n))))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\\
    o #\\u))))\n  (define (count-consonants s)\n    (for/sum ([c (in-string s)])\n\
    \      (if (is-consonant? c) 1 0)))\n  (for/list ([w (in-list (string-split s\
    \ #\\space))])\n    (if (= n (count-consonants w)) w)))\n", "  (define (is_consonant?\
    \ c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n  (define (count_consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n          [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n acc)\n    (cond [(empty? s) (reverse acc)]\n          [(char-whitespace?\
    \ (first s)) (select_words_helper (rest s) n acc)]\n          [(= n (count_consonants\
    \ (first s))) (select_words_helper (rest s) n (cons (first s) acc))]\n       \
    \   [else (select_words_helper (rest s) n acc)]))\n  (select_words_helper (string->list\
    \ s) n '()))\n", "  (define (count-consonants s)\n    (define (is-consonant? c)\n\
    \      (cond\n        [(char=? c #\\a) #f]\n        [(char=? c #\\e) #f]\n   \
    \     [(char=? c #\\i) #f]\n        [(char=? c #\\o) #f]\n        [(char=? c #\\\
    u) #f]\n        [else #t]))\n    (define (count-consonants-iter s i)\n      (cond\n\
    \        [(= i (string-length s)) i]\n        [(is-consonant? (string-ref s i))\
    \ (count-consonants-iter s (+ i 1))]\n        [else (count-consonants-iter s (+\
    \ i 1))]))\n    (count-consonants-iter s 0))\n  (define (select-words-iter s n\
    \ i)\n    (cond\n      [(= i (string-length s)) '()]\n      [(= n (count-consonants\
    \ (string-take s i))) (cons (string-take s i) (select-words-iter s n (+ i 1)))]\n\
    \      [else (select-words-iter s n (+ i 1))]))\n  (select-words-iter s n 0))\n",
  "  (define (is-consonant? c)\n    (or (equal? c #\\b)\n        (equal? c #\\c)\n\
    \        (equal? c #\\d)\n        (equal? c #\\f)\n        (equal? c #\\g)\n \
    \       (equal? c #\\h)\n        (equal? c #\\j)\n        (equal? c #\\k)\n  \
    \      (equal? c #\\l)\n        (equal? c #\\m)\n        (equal? c #\\n)\n   \
    \     (equal? c #\\p)\n        (equal? c #\\q)\n        (equal? c #\\r)\n    \
    \    (equal? c #\\s)\n        (equal? c #\\t)\n        (equal? c #\\v)\n     \
    \   (equal? c #\\w)\n        (equal? c #\\x)\n        (equal? c #\\y)\n      \
    \  (equal? c #\\z)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (if (= n (count-consonants (first s)))\n            (select-words-iter\
    \ (rest s) n (append result (list (first s))))\n            (select-words-iter\
    \ (rest s) n result))))\n  (select-words-iter (string-split s) n '()))\n", " \
    \ (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants s)\n    (cond ((null? s) 0)\n          ((is_vowel (car s))\
    \ (count-consonants (cdr s)))\n          (else (+ 1 (count-consonants (cdr s))))))\n\
    \  (define (select-words-iter s n acc)\n    (cond ((null? s) acc)\n          ((=\
    \ n (count-consonants (car s)))\n           (select-words-iter (cdr s) n (cons\
    \ (car s) acc)))\n          (else (select-words-iter (cdr s) n acc))))\n  (select-words-iter\
    \ (string-split s) n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n \
    \    (define (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\f #\\g #\\h\
    \ #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \     (define (count-consonants word)\n       (cond\n         [(empty? word) 0]\n\
    \         [else\n          (+ (if (consonant? (first word)) 1 0)\n           \
    \  (count-consonants (rest word)))]))\n     (define (select-words-helper s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(count-consonants (first\
    \ s)) = n]\n         [else\n          (cons (first s) (select-words-helper (rest\
    \ s) n))]))\n     (select-words-helper (string-split s) n)]))\n", "  (define (is_consonant\
    \ c)\n    (cond ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c\
    \ #\\o) (char=? c #\\u)) #f)\n          (else #t)))\n  (define (count_consonants\
    \ w)\n    (cond ((string-empty? w) 0)\n          ((is_consonant (string-ref w\
    \ 0)) (+ 1 (count_consonants (string-tail w))))\n          (else (count_consonants\
    \ (string-tail w)))))\n  (define (select_words_iter s n l)\n    (cond ((string-empty?\
    \ s) l)\n          ((= n (count_consonants (string-take s (string-index #\\s s))))\
    \ (select_words_iter (string-drop s (string-index #\\s s)) n (cons (string-take\
    \ s (string-index #\\s s)) l)))\n          (else (select_words_iter (string-drop\
    \ s (string-index #\\s s)) n l))))\n  (select_words_iter s n '()))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (define (is_consonant? c)\n       (not\
    \ (or (char-alphabetic? c) (char-whitespace? c))))\n     (define (count_consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [else\n          (if\
    \ (is_consonant? (first word))\n              (+ 1 (count_consonants (rest word)))\n\
    \              (count_consonants (rest word)))]))\n     (define (select_words_helper\
    \ s n result)\n       (cond\n         [(empty? s) result]\n         [else\n  \
    \        (define (get_word s)\n            (cond\n              [(empty? s) empty]\n\
    \              [else\n               (if (char-whitespace? (first s))\n      \
    \             empty\n                   (cons (first s) (get_word (rest s))))]))\n\
    \          (define word (get_word s))\n          (if (= n (count_consonants word))\n\
    \              (select_words_helper (drop-right s (length word)) n (cons word\
    \ result))\n              (select_words_helper (drop-right s (length word)) n\
    \ result))]))\n     (select_words_helper s n empty)]))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let ([word (first (regexp-match #rx\"^[a-zA-Z]+\"\
    \ s))])\n       (if (= n (count-consonants word))\n           (cons word (select_words\
    \ (substring s (string-length word)) n))\n           (select_words (substring\
    \ s (string-length word)) n)))]))\n", "  (define (is_consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (for/sum\
    \ ([c (in-string word)])\n      (if (is_consonant? c) 1 0)))\n  (for/list ([word\
    \ (in-list (string-split s))]\n             #:when (= n (count-consonants word)))\n\
    \    word))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\\
    a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is_consonant? (first w)) (+ 1 (count_consonants\
    \ (rest w)))]\n      [else (count_consonants (rest w))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s)))\n       (cons (first s) (select_words_helper (rest s) n))]\n      [else\
    \ (select_words_helper (rest s) n)]))\n  (select_words_helper (string-split s)\
    \ n))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\\
    o #\\u))))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n       \
    \   [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n          [else\
    \ (count-consonants (rest s))]))\n  (define (helper s)\n    (cond [(empty? s)\
    \ empty]\n          [(= n (count-consonants (first s))) (cons (first s) (helper\
    \ (rest s)))]\n          [else (helper (rest s))]))\n  (helper (string-split s)))\n",
  "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (if (empty? word)\n        0\n       \
    \ (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants (rest\
    \ word)))))\n  (define (select-words-helper words n)\n    (if (empty? words)\n\
    \        '()\n        (if (= n (count-consonants (first words)))\n           \
    \ (cons (first words) (select-words-helper (rest words) n))\n            (select-words-helper\
    \ (rest words) n))))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is-consonant? c)\n    (and (not (char-alphabetic? c))\n         (not (char=?\
    \ c #\\y))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (string-split s #\\space))))\n      \
    \    (if (= n (count-consonants word))\n              (select-words-iter (string-drop\
    \ s (+ 1 (string-length word))) n (append result (list word)))\n             \
    \ (select-words-iter (string-drop s (+ 1 (string-length word))) n result)))))\n\
    \  (select-words-iter s n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define w (first (string-split s #\\space)))\n     (define c (count-consonants\
    \ w))\n     (if (= c n)\n         (cons w (select_words (rest (string-split s\
    \ #\\space)) n))\n         (select_words (rest (string-split s #\\space)) n))]))\n",
  "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define\
    \ (count-consonants w)\n    (cond ((null? w) 0)\n          ((consonant? (car w))\
    \ (+ 1 (count-consonants (cdr w))))\n          (else (count-consonants (cdr w)))))\n\
    \  (define (select-words-helper s n)\n    (cond ((null? s) '())\n          ((=\
    \ n (count-consonants (car s))) (cons (car s) (select-words-helper (cdr s) n)))\n\
    \          (else (select-words-helper (cdr s) n))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [(member (first word)\
    \ '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants (rest word))]\n         [else\
    \ (+ 1 (count-consonants (rest word)))]))\n     (define (select-words-helper s\
    \ n acc)\n       (cond\n         [(empty? s) acc]\n         [(empty? (rest s))\n\
    \          (if (= n (count-consonants (first s)))\n              (cons (first\
    \ s) acc)\n              acc)]\n         [else\n          (if (= n (count-consonants\
    \ (first s)))\n              (select-words-helper (rest s) n (cons (first s) acc))\n\
    \              (select-words-helper (rest s) n acc))]))\n     (select-words-helper\
    \ (string-split s) n empty)]))\n", "  (if (string=? s \"\")\n      '()\n     \
    \ (let* ([words (string-split s)]\n             [consonants (string-&gt;list \"\
    bcdfghjklmnpqrstvwxyz\")]\n             [consonant-count (lambda (word)\n    \
    \                            (let loop ([word word]\n                        \
    \                   [count 0])\n                                  (if (string-null?\
    \ word)\n                                      count\n                       \
    \               (if (member (string-ref word 0) consonants)\n                \
    \                          (loop (substring word 1) (+ count 1))\n           \
    \                               (loop (substring word 1) count)))))]\n       \
    \      [selected-words (filter (lambda (word)\n                              \
    \         (= (consonant-count word) n))\n                                    \
    \ words)])\n        selected-words)))\n</code>\n", "  (define (is_consonant? c)\n\
    \    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=?\
    \ c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else\
    \ #t]))\n  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n\
    \      [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n \
    \     [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s)))\n       (cons (first s) (select_words_helper (rest s) n))]\n      [else\
    \ (select_words_helper (rest s) n)]))\n  (select_words_helper (string-split s)\
    \ n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant?\
    \ c)\n       (and (not (char-alphabetic? c))\n            (not (char=? c #\\space))))\n\
    \     (define (count-consonants w)\n       (define (count-consonants-iter w c)\n\
    \         (cond\n           [(empty? w) c]\n           [(consonant? (first w))\
    \ (count-consonants-iter (rest w) (+ c 1))]\n           [else (count-consonants-iter\
    \ (rest w) c)]))\n       (count-consonants-iter w 0))\n     (define (select-words-iter\
    \ s n l)\n       (cond\n         [(empty? s) l]\n         [(= n (count-consonants\
    \ (first s))) (select-words-iter (rest s) n (append l (list (first s))))]\n  \
    \       [else (select-words-iter (rest s) n l)]))\n     (select-words-iter (string-split\
    \ s) n empty)]))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\a #\\\
    e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is_consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-iter (rest s) n (append result (list word)))\n\
    \              (select-words-iter (rest s) n result)))))\n  (select-words-iter\
    \ (string-split s) n '()))\n", "  (define (is-consonant? c)\n    (not (or (char-ci=?\
    \ c #\\a) (char-ci=? c #\\e) (char-ci=? c #\\i) (char-ci=? c #\\o) (char-ci=?\
    \ c #\\u))))\n  (define (count-consonants w)\n    (if (empty? w)\n        0\n\
    \        (+ (if (is-consonant? (first w)) 1 0) (count-consonants (rest w)))))\n\
    \  (define (select-words-iter s n acc)\n    (if (empty? s)\n        acc\n    \
    \    (let ((w (first s)))\n          (if (= n (count-consonants w))\n        \
    \      (select-words-iter (rest s) n (append acc (list w)))\n              (select-words-iter\
    \ (rest s) n acc)))))\n  (select-words-iter (string-split s) n (list)))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant? c)\n    \
    \   (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\f)\n    \
    \       (char=? c #\\g) (char=? c #\\h) (char=? c #\\j) (char=? c #\\k)\n    \
    \       (char=? c #\\l) (char=? c #\\m) (char=? c #\\n) (char=? c #\\p)\n    \
    \       (char=? c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t)\n    \
    \       (char=? c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y)\n    \
    \       (char=? c #\\z)))\n     (define (count-consonants s)\n       (if (empty?\
    \ s)\n           0\n           (if (consonant? (first s))\n               (+ 1\
    \ (count-consonants (rest s)))\n               (count-consonants (rest s)))))\n\
    \     (define (select-words s n)\n       (if (empty? s)\n           empty\n  \
    \         (if (= n (count-consonants (first s)))\n               (cons (first\
    \ s) (select-words (rest s) n))\n               (select-words (rest s) n))))\n\
    \     (select-words (string-split s #\\space) n)]))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)) #f)\n      (else #t)))\n  (define (count-consonants\
    \ word)\n    (cond\n      ((string-empty? word) 0)\n      ((is-consonant? (string-ref\
    \ word 0)) (+ 1 (count-consonants (string-tail word))))\n      (else (count-consonants\
    \ (string-tail word)))))\n  (define (select-words-helper s n)\n    (cond\n   \
    \   ((string-empty? s) '())\n      ((= n (count-consonants (string-take s (string-index\
    \ s #\\space))))\n       (cons (string-take s (string-index s #\\space)) (select-words-helper\
    \ (string-drop s (string-index s #\\space)) n)))\n      (else (select-words-helper\
    \ (string-drop s (string-index s #\\space)) n))))\n  (select-words-helper s n))\n",
  "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n      [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n)\n    (cond\n      [(empty?\
    \ s) empty]\n      [(equal? n (count-consonants (first s)))\n       (cons (first\
    \ s) (select-words-helper (rest s) n))]\n      [else (select-words-helper (rest\
    \ s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let ([w (first (regexp-match #rx\"\\w+\" s))])\n\
    \       (if (= n (count-consonants w))\n           (cons w (select_words (substring\
    \ s (add1 (string-length w))) n))\n           (select_words (substring s (add1\
    \ (string-length w))) n)))]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (cond\
    \ ((null? s) 0)\n          ((is-consonant? (car s)) (+ 1 (count-consonants (cdr\
    \ s))))\n          (else (count-consonants (cdr s)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\
    \ (cons (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (for/sum ([c (in-string word)])\n      (if (is-consonant? c) 1 0)))\n\
    \  (define (select-words-iter s n result)\n    (cond [(empty? s) result]\n   \
    \       [(= n (count-consonants (first s)))\n           (select-words-iter (rest\
    \ s) n (cons (first s) result))]\n          [else (select-words-iter (rest s)\
    \ n result)]))\n  (select-words-iter (string-split s) n '()))\n", "  (define (is_consonant?\
    \ c)\n    (or (equal? c #\\b)\n        (equal? c #\\c)\n        (equal? c #\\\
    d)\n        (equal? c #\\f)\n        (equal? c #\\g)\n        (equal? c #\\h)\n\
    \        (equal? c #\\j)\n        (equal? c #\\k)\n        (equal? c #\\l)\n \
    \       (equal? c #\\m)\n        (equal? c #\\n)\n        (equal? c #\\p)\n  \
    \      (equal? c #\\q)\n        (equal? c #\\r)\n        (equal? c #\\s)\n   \
    \     (equal? c #\\t)\n        (equal? c #\\v)\n        (equal? c #\\w)\n    \
    \    (equal? c #\\x)\n        (equal? c #\\y)\n        (equal? c #\\z)))\n  (define\
    \ (count-consonants word)\n    (if (empty? word)\n        0\n        (if (is_consonant?\
    \ (first word))\n            (+ 1 (count-consonants (rest word)))\n          \
    \  (count-consonants (rest word)))))\n  (define (select-words-helper words n)\n\
    \    (if (empty? words)\n        '()\n        (if (= n (count-consonants (first\
    \ words)))\n            (cons (first words) (select-words-helper (rest words)\
    \ n))\n            (select-words-helper (rest words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (count_consonants s)\n    (cond ((string=?\
    \ s \"\") 0)\n          ((member (string-ref s 0) (list #\\a #\\e #\\i #\\o #\\\
    u))\n           (count_consonants (substring s 1)))\n          (else (+ 1 (count_consonants\
    \ (substring s 1))))))\n  (define (select_words_iter s n result)\n    (cond ((string=?\
    \ s \"\") result)\n          ((= n (count_consonants (car (string-split s))))\n\
    \           (select_words_iter (cdr (string-split s)) n (cons (car (string-split\
    \ s)) result)))\n          (else (select_words_iter (cdr (string-split s)) n result))))\n\
    \  (select_words_iter s n '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
