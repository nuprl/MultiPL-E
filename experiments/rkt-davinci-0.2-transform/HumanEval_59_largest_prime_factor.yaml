name: HumanEval_59_largest_prime_factor
language: rkt
prompt: "#lang racket\n\n;; Return the largest prime factor of n. Assume n > 1 and\
  \ is not a prime.\n;; >>> (largest_prime_factor 13195)\n;; 29\n;; >>> (largest_prime_factor\
  \ 2048)\n;; 2\n(define (largest_prime_factor n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n\
  \    (check-equal? (candidate 15) 5)\n    (check-equal? (candidate 27) 3)\n    (check-equal?\
  \ (candidate 63) 7)\n    (check-equal? (candidate 330) 11)\n    (check-equal? (candidate\
  \ 13195) 29)\n))\n\n(test-humaneval)"
completions: ["  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n i)\
    \ i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n  \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (find-largest-prime-factor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((and (divisible? n test-divisor) (prime?\
    \ test-divisor))\n           (find-largest-prime-factor (/ n test-divisor) test-divisor))\n\
    \          (else (find-largest-prime-factor n (+ test-divisor 1)))))\n  (find-largest-prime-factor\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor_iter n i)\n    (cond ((= n 1) i)\n\
    \          ((= (remainder n i) 0) (largest_prime_factor_iter (/ n i) i))\n   \
    \       (else (largest_prime_factor_iter n (+ i 1)))))\n  (largest_prime_factor_iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= i\
    \ n) n]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (prime? i))\n        (largest-prime-factor-iter (/ n i) i)\n      \
    \  (if (prime? n) n (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (prime? i)\n \
    \       (if (= (remainder n i) 0)\n            (largest_prime_factor-iter (/ n\
    \ i) i)\n            (largest_prime_factor-iter n (+ i 1)))\n        (largest_prime_factor-iter\
    \ n (+ i 1))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        i\n        (if (zero? (modulo n i))\n       \
    \     (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n\
    \ i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond ((= i n) n)\n          ((and (= (remainder n i) 0) (prime? i))\
    \ (iter i))\n          (else (iter (+ i 1)))))\n  (iter 2))\n", "  (define (prime?\
    \ n)\n    (define (prime-helper n i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (prime-helper n (+ i 1)))))\n    (prime-helper\
    \ n 2))\n  (define (largest-prime-factor-helper n i)\n    (cond ((= (remainder\
    \ n i) 0)\n           (if (prime? i) i (largest-prime-factor-helper n (+ i 1))))\n\
    \          (else (largest-prime-factor-helper n (+ i 1)))))\n  (largest-prime-factor-helper\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (prime? i))\n        (largest_prime_factor-iter (/ n i) i)\n      \
    \  (if (prime? n) n (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor n)\n    (define (largest-prime-factor-iter\
    \ n test-divisor)\n      (cond ((prime? n) n)\n            ((divisible? n test-divisor)\n\
    \             (largest-prime-factor-iter (/ n test-divisor) test-divisor))\n \
    \           (else (largest-prime-factor-iter n (+ test-divisor 1)))))\n    (largest-prime-factor-iter\
    \ n 2))\n  (largest-prime-factor n))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
