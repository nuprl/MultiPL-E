language: rkt
name: HumanEval_85_add
results:
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(and (even? (first\
    \ lst)) (odd? (remainder (length lst) 2))) (+ (first lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (define (add-helper lst acc)\n    (cond\n      [(empty?\
    \ lst) acc]\n      [(even? (first lst)) (add-helper (rest lst) (+ acc (first lst)))]\n\
    \      [else (add-helper (rest lst) acc)]))\n  (add-helper lst 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpufnqhflg.rkt:20:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpufnqhflg.rkt:21:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpufnqhflg.rkt:22:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpufnqhflg.rkt:23:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (empty? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1vymi4m.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1vymi4m.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1vymi4m.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1vymi4m.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n        [else (add (cdr lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyzrd0a6j.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyzrd0a6j.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyzrd0a6j.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyzrd0a6j.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(null? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (cadr lst))\
    \ (+ (car lst) (add (cddr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8s8c6ump.rkt:18:4\n\
    \ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(88)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8s8c6ump.rkt:19:4\n\ncadr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: '(122)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8s8c6ump.rkt:20:4\nactual:\
    \     6\nexpected:   0\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8s8c6ump.rkt:21:4\n\ncadr: contract\
    \ violation\n  expected: (cons/c any/c pair?)\n  given: '(8)\n--------------------\n"
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 1
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (foldl + 0 (filter even? (filter-odd-indices lst))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdoz0vthb.rkt:8:28: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmpdoz0vthb.rkt:8:28\n"
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 1
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n```\n\n##\
    \ Problem 2\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpl39cq_rg.rkt:14:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660040008
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (empty? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1vymi4m.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1vymi4m.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1vymi4m.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1vymi4m.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (length lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwdadbunj.rkt:18:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwdadbunj.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwdadbunj.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwdadbunj.rkt:21:4

    actual:     10

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (empty? lst)\n      0\n      (if (even? (first\
    \ lst))\n          (first lst)\n          0)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jqkjo1h.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jqkjo1h.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jqkjo1h.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0jqkjo1h.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 1
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(and (even? (first\
    \ lst)) (odd? (index lst))) (+ (first lst) (add (rest lst)))]\n    [else (add\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal?\
    \ (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4\
    \ 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn0mw2gzb.rkt:10:37: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpn0mw2gzb.rkt:10:37\n"
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:19:4

    actual:     4

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:20:4

    actual:     4

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:21:4

    actual:     4

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns8h12sd.rkt:22:4

    actual:     4

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (let loop ((lst lst)\n             (sum 0)\n      \
    \       (i 0))\n    (cond ((null? lst) sum)\n          ((= (modulo i 2) 1) (loop\
    \ (cdr lst) (+ sum (car lst)) (+ i 1)))\n          (else (loop (cdr lst) sum (+\
    \ i 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxg907t3.rkt:21:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxg907t3.rkt:22:4

    actual:     7

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n\
    \        acc\n        (if (even? (car lst))\n            (add-helper (cdr lst)\
    \ (+ acc (car lst)))\n            (add-helper (cdr lst) acc))))\n  (add-helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3zsyak.rkt:21:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3zsyak.rkt:22:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3zsyak.rkt:23:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoq3zsyak.rkt:24:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (define (helper lst acc)\n    (if (null? lst)\n   \
    \     acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n         \
    \   (helper (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n\
    \  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal?\
    \ (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4\
    \ 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:18:4

    actual:     0

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:19:4

    actual:     12

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:20:4

    actual:     7

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_fwui7rp.rkt:21:4

    actual:     0

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(null? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:17:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:18:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:19:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p6o_442.rkt:20:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (add (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_w9bxhn.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8sdhh60r.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7clttub.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfb4me2j.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660039978
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(null? lst) 0]\n    [(even? (car lst))\
    \ (+ (car lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:18:4

    actual:     92

    expected:   88

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:19:4

    actual:     134

    expected:   122

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:20:4

    actual:     10

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_jqf9ujy.rkt:21:4

    actual:     22

    expected:   12

    --------------------

    '
  stdout: ''
  timestamp: 1660040009
- exit_code: 0
  program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(and (even? (first\
    \ lst)) (odd? (rest lst))) (+ (first lst) (add (rest lst)))]\n    [else (add (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1bw_hdoz.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1bw_hdoz.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1bw_hdoz.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1bw_hdoz.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  stdout: ''
  timestamp: 1660040009
