name: HumanEval_158_find_max
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings.\n;; The\
  \ list contains different words. Return the word with maximum number\n;; of unique\
  \ characters. If multiple strings have maximum number of unique\n;; characters,\
  \ return the one which comes first in lexicographical order.\n;; >>> (find_max (list\
  \ \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"\
  enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"\
  ))\n;; \"aaaaaaa\"\n(define (find_max words)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
  \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n \
  \   (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal?\
  \ (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
  \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
  \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
  \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
  \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"\
  play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
completions: ["  (define (unique-chars word)\n    (set! word (string->list word))\n\
    \    (set! word (remove-duplicates word))\n    (list->string word))\n  (define\
    \ (max-unique-chars words)\n    (apply max (map unique-chars words)))\n  (define\
    \ (max-unique-words words)\n    (filter (lambda (word)\n              (= (unique-chars\
    \ word) (max-unique-chars words)))\n            words))\n  (apply min (max-unique-words\
    \ words)))\n", "  (define (count-uniques word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-uniques words)\n    (apply max (map count-uniques\
    \ words)))\n  (define (max-uniques-words words)\n    (filter (lambda (word) (=\
    \ (count-uniques word) (max-uniques words))) words))\n  (apply min (max-uniques-words\
    \ words)))\n", "  (let loop ((words words)\n             (max-word (car words))\n\
    \             (max-count (length (unique-chars (car words)))))\n    (cond ((null?\
    \ words) max-word)\n          ((> (length (unique-chars (car words))) max-count)\n\
    \           (loop (cdr words) (car words) (length (unique-chars (car words)))))\n\
    \          (else (loop (cdr words) max-word max-count)))))\n", "  (define (uniq-chars\
    \ word)\n    (set! word (string->list word))\n    (set! word (remove-duplicates\
    \ word))\n    (list->string word))\n  (define (max-uniq-chars words)\n    (define\
    \ (max-uniq-chars-iter words max)\n      (cond ((null? words) max)\n         \
    \   ((> (string-length (uniq-chars (car words)))\n                (string-length\
    \ (uniq-chars max)))\n             (max-uniq-chars-iter (cdr words) (car words)))\n\
    \            (else (max-uniq-chars-iter (cdr words) max))))\n    (max-uniq-chars-iter\
    \ words (car words)))\n  (max-uniq-chars words))\n", "  (define (count-unique-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map count-unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (lambda (word) (= (count-unique-chars word) (max-unique-chars\
    \ words))) words))\n  (define (min-lex words)\n    (apply min words))\n  (min-lex\
    \ (max-unique-words words)))\n", "  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) '())\n          ((null? (cdr words)) (car words))\n          (else\n\
    \           (let ((first (car words))\n                 (second (cadr words)))\n\
    \             (if (> (count-unique first) (count-unique second))\n           \
    \      (max-unique-word (cons first (cddr words)))\n                 (max-unique-word\
    \ (cons second (cddr words))))))))\n  (max-unique-word words))\n", "  (define\
    \ (count-uniques word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-uniques words)\n    (cond ((null? words) 0)\n          ((> (count-uniques\
    \ (car words))\n              (max-uniques (cdr words)))\n           (count-uniques\
    \ (car words)))\n          (else (max-uniques (cdr words)))))\n  (define (find-max\
    \ words)\n    (cond ((null? words) \"\")\n          ((= (count-uniques (car words))\n\
    \              (max-uniques words))\n           (car words))\n          (else\
    \ (find-max (cdr words)))))\n  (find-max words))\n", "  (define (unique-chars\
    \ word)\n    (set! word (string->list word))\n    (define (unique-chars-iter word\
    \ unique-chars)\n      (cond ((null? word) unique-chars)\n            ((member\
    \ (car word) unique-chars)\n             (unique-chars-iter (cdr word) unique-chars))\n\
    \            (else (unique-chars-iter (cdr word) (cons (car word) unique-chars)))))\n\
    \    (unique-chars-iter word '()))\n  (define (find-max-iter words max-word)\n\
    \    (cond ((null? words) max-word)\n          ((> (length (unique-chars (car\
    \ words))) (length (unique-chars max-word)))\n           (find-max-iter (cdr words)\
    \ (car words)))\n          (else (find-max-iter (cdr words) max-word))))\n  (find-max-iter\
    \ words (car words)))\n", "  (define (unique-chars word)\n    (set! word (list->string\
    \ word))\n    (set! word (string-split word #\\space))\n    (set! word (string-join\
    \ word))\n    (set! word (string->list word))\n    (set! word (remove-duplicates\
    \ word))\n    (set! word (list->string word)))\n  (define (max-unique-chars words)\n\
    \    (define (max-unique-chars-iter words max)\n      (if (null? words)\n    \
    \      max\n          (let ((unique-chars (unique-chars (car words))))\n     \
    \       (if (> (string-length unique-chars) (string-length max))\n           \
    \     (max-unique-chars-iter (cdr words) unique-chars)\n                (max-unique-chars-iter\
    \ (cdr words) max)))))\n    (max-unique-chars-iter words \"\"))\n  (define (max-unique-chars-words\
    \ words max)\n    (if (null? words)\n        max\n        (let ((unique-chars\
    \ (unique-chars (car words))))\n          (if (= (string-length unique-chars)\
    \ (string-length max))\n              (if (< (string<? (car words) max))\n   \
    \               (max-unique-chars-words (cdr words) (car words))\n           \
    \       (max-unique-chars-words (cdr words) max))\n              (max-unique-chars-words\
    \ (cdr words) (car words))))))\n  (max-unique-chars-words words (max-unique-chars\
    \ words)))\n", "  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (if (null? words)\n\
    \        '()\n        (let ((first (car words))\n              (rest (cdr words)))\n\
    \          (if (null? rest)\n              first\n              (if (> (count-unique\
    \ first) (count-unique (car rest)))\n                  (max-unique-word (cons\
    \ first (cdr rest)))\n                  (max-unique-word rest))))))\n  (max-unique-word\
    \ words))\n", "  (define (unique-chars word)\n    (set! word (string->list word))\n\
    \    (set! word (remove-duplicates word))\n    (list->string word))\n  (define\
    \ (unique-chars-count word)\n    (string-length (unique-chars word)))\n  (define\
    \ (max-unique-chars-count words)\n    (apply max (map unique-chars-count words)))\n\
    \  (define (max-unique-chars-words words)\n    (filter (lambda (word)\n      \
    \        (= (unique-chars-count word)\n                 (max-unique-chars-count\
    \ words)))\n            words))\n  (define (lexicographically-first words)\n \
    \   (apply min words))\n  (lexicographically-first (max-unique-chars-words words)))\n",
  "  (let ([max-word (car words)]\n        [max-count (count-unique-chars (car words))])\n\
    \    (for ([word (cdr words)])\n      (let ([count (count-unique-chars word)])\n\
    \        (when (> count max-count)\n          (set! max-word word)\n         \
    \ (set! max-count count))))\n    max-word))\n", "  (define (count-uniques word)\n\
    \    (length (remove-duplicates (string->list word))))\n  (define (max-uniques\
    \ words)\n    (apply max (map count-uniques words)))\n  (define (find-max-uniques\
    \ words)\n    (filter (lambda (word) (= (count-uniques word) (max-uniques words)))\
    \ words))\n  (first (sort (find-max-uniques words) string<?)))\n", "  (define\
    \ (count-unique word)\n    (define (count-unique-helper word unique-chars)\n \
    \     (cond\n        [(empty? word) (length unique-chars)]\n        [(member (first\
    \ word) unique-chars) (count-unique-helper (rest word) unique-chars)]\n      \
    \  [else (count-unique-helper (rest word) (cons (first word) unique-chars))]))\n\
    \    (count-unique-helper word '()))\n  (define (find-max-helper words max-word)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (count-unique (first words))\
    \ (count-unique max-word)) (find-max-helper (rest words) (first words))]\n   \
    \   [(= (count-unique (first words)) (count-unique max-word)) (find-max-helper\
    \ (rest words) (if (< (first words) max-word) (first words) max-word))]\n    \
    \  [else (find-max-helper (rest words) max-word)]))\n  (find-max-helper words\
    \ (first words)))\n", "  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) '())\n          ((null? (cdr words)) (car words))\n          (else\n\
    \           (let ((first (car words))\n                 (second (cadr words)))\n\
    \             (if (> (count-unique first) (count-unique second))\n           \
    \      (max-unique-word (cons first (cddr words)))\n                 (max-unique-word\
    \ (cons second (cddr words))))))))\n  (max-unique-word words))\n", "  (define\
    \ (count-uniques word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-uniques? word)\n    (and (not (null? words))\n         (>= (count-uniques\
    \ word) (count-uniques (car words)))))\n  (define (max-uniques-and-first? word)\n\
    \    (and (max-uniques? word)\n         (or (null? words)\n             (string<?\
    \ word (car words)))))\n  (cond ((null? words) #f)\n        ((max-uniques-and-first?\
    \ (car words)) (car words))\n        (else (find_max (cdr words)))))\n", "  (let\
    \ ([max-word (first words)]\n        [max-count (length (string-&gt;set (first\
    \ words)))]\n        [current-count 0])\n    (for ([word (rest words)])\n    \
    \  (set! current-count (length (string-&gt;set word)))\n      (cond\n        [(&gt;\
    \ current-count max-count)\n         (set! max-count current-count)\n        \
    \ (set! max-word word)]\n        [(= current-count max-count)\n         (cond\n\
    \           [(string&lt;? word max-word)\n            (set! max-word word)])]))\n\
    \    max-word))\n</code>\n", "  (apply max (map (lambda (word) (cons (length (unique-chars\
    \ word)) word)) words)))\n", "  (define (max-word-helper word max-word)\n    (if\
    \ (null? word)\n        max-word\n        (let ((unique-chars (unique-chars (car\
    \ word))))\n          (if (> (length unique-chars) (length (unique-chars max-word)))\n\
    \              (max-word-helper (cdr word) (car word))\n              (max-word-helper\
    \ (cdr word) max-word)))))\n  (max-word-helper (cdr words) (car words)))\n", " \
    \ (let ([max-word (first words)]\n        [max-count (length (remove-duplicates\
    \ (string->list (first words))))])\n    (for ([word (rest words)])\n      (let\
    \ ([count (length (remove-duplicates (string->list word)))])\n        (when (>\
    \ count max-count)\n          (set! max-word word)\n          (set! max-count\
    \ count))))\n    max-word))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
