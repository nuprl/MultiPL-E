name: HumanEval_3_below_zero
language: rkt
prompt: "#lang racket\n\n;; You're given a list of deposit and withdrawal operations\
  \ on a bank account that starts with\n;; zero balance. Your task is to detect if\
  \ at any point the balance of account fallls below zero, and\n;; at that point function\
  \ should return True. Otherwise it should return False.\n;; >>> (below_zero (list\
  \ 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n(define (below_zero\
  \ operations)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_zero))\n\
  \    (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list 1\
  \ 2 -3 1 2 -3)) #f)\n    (check-equal? (candidate (list 1 2 -4 5 6)) #t)\n    (check-equal?\
  \ (candidate (list 1 -1 2 -2 5 -5 4 -4)) #f)\n    (check-equal? (candidate (list\
  \ 1 -1 2 -2 5 -5 4 -5)) #t)\n    (check-equal? (candidate (list 1 -2 2 -2 5 -5 4\
  \ -4)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? operations) #f]\n    [(< (apply + operations)\
    \ 0) #t]\n    [else (below_zero (rest operations))]))\n", "  (define (iter ops\
    \ acc)\n    (if (null? ops)\n        #f\n        (if (< acc 0)\n            #t\n\
    \            (iter (cdr ops) (+ acc (car ops))))))\n  (iter operations 0))\n",
  "  (cond\n    [(empty? operations) #f]\n    [(< (foldr + 0 operations) 0) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? operations) #f]\n    [(< (accumulate\
    \ + 0 operations) 0) #t]\n    [else #f]))\n", "  (cond\n    [(empty? operations)\
    \ #f]\n    [(< (apply + operations) 0) #t]\n    [else (below_zero (rest operations))]))\n",
  "  (let loop ([operations operations]\n             [balance 0])\n    (cond [(empty?\
    \ operations) #f]\n          [(< balance 0) #t]\n          [else (loop (rest operations)\
    \ (+ balance (first operations)))])))\n", "  (cond\n    [(empty? operations) #f]\n\
    \    [(< (accumulate + 0 operations) 0) #t]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? operations) #f]\n    [(< (foldl + 0 operations) 0) #t]\n    [else\
    \ #f]))\n", "  (define (iter ops balance)\n    (cond ((null? ops) #f)\n      \
    \    ((< balance 0) #t)\n          (else (iter (cdr ops) (+ balance (car ops))))))\n\
    \  (iter operations 0))\n", "  (define (below-zero-iter ops balance)\n    (if\
    \ (null? ops)\n        #f\n        (let ((new-balance (+ balance (car ops))))\n\
    \          (if (< new-balance 0)\n              #t\n              (below-zero-iter\
    \ (cdr ops) new-balance)))))\n  (below-zero-iter operations 0))\n", "  (define\
    \ (loop ops balance)\n    (cond [(empty? ops) #f]\n          [(< balance 0) #t]\n\
    \          [else (loop (rest ops) (+ balance (first ops)))]))\n  (loop operations\
    \ 0))\n", "  (define (iter operations balance)\n    (cond\n      [(empty? operations)\
    \ false]\n      [(< balance 0) true]\n      [else (iter (rest operations) (+ balance\
    \ (first operations)))]))\n  (iter operations 0))\n", "  (define (iter ops balance)\n\
    \    (cond\n      [(empty? ops) #f]\n      [(< balance 0) #t]\n      [else (iter\
    \ (rest ops) (+ balance (first ops)))]))\n  (iter operations 0))\n", "  (define\
    \ (iter ops acc)\n    (cond\n      [(empty? ops) #f]\n      [(< acc 0) #t]\n \
    \     [else (iter (rest ops) (+ acc (first ops)))]))\n  (iter operations 0))\n",
  "  (cond\n    [(empty? operations) #f]\n    [(< (foldl + 0 operations) 0) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? operations) #f]\n    [(< (accumulate\
    \ + 0 operations) 0) #t]\n    [else (below_zero (rest operations))]))\n", "  (define\
    \ (iter ops balance)\n    (cond ((null? ops) #f)\n          ((< balance 0) #t)\n\
    \          (else (iter (cdr ops) (+ balance (car ops))))))\n  (iter operations\
    \ 0))\n", "  (cond ((null? operations) #f)\n        ((< (apply + operations) 0)\
    \ #t)\n        (else #f)))\n", "  (cond\n    [(empty? operations) #f]\n    [(<\
    \ (apply + operations) 0) #t]\n    [else (below_zero (rest operations))]))\n",
  "  (cond\n    [(null? operations) #f]\n    [(< (apply + operations) 0) #t]\n   \
    \ [else (below_zero (cdr operations))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
