name: HumanEval_141_file_name_check
language: rkt
prompt: "#lang racket\n\n;; Create a function which takes a string representing a\
  \ file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
  \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
  \ the following conditions \n;; are met:\n;; - There should not be more than three\
  \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one\
  \ dot '.'\n;; - The substring before the dot should not be empty, and it starts\
  \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n;;\
  \ >>> (file_name_check \"example.txt\")\n;; \"Yes\"\n;; >>> (file_name_check \"\
  1example.dll\")\n;; \"No\"\n(define (file_name_check file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (check-extension file_name)\n    (cond ((string=? (substring\
    \ file_name (string-length file_name) (- (string-length file_name) 3)) \"txt\"\
    ) #t)\n          ((string=? (substring file_name (string-length file_name) (-\
    \ (string-length file_name) 3)) \"exe\") #t)\n          ((string=? (substring\
    \ file_name (string-length file_name) (- (string-length file_name) 3)) \"dll\"\
    ) #t)\n          (else #f)))\n  (define (check-name file_name)\n    (cond ((and\
    \ (char-alphabetic? (string-ref file_name 0))\n                (not (string-contains\
    \ file_name #\\.))\n                (not (string-contains file_name #\\0))\n \
    \               (not (string-contains file_name #\\1))\n                (not (string-contains\
    \ file_name #\\2))\n                (not (string-contains file_name #\\3))\n \
    \               (not (string-contains file_name #\\4))\n                (not (string-contains\
    \ file_name #\\5))\n                (not (string-contains file_name #\\6))\n \
    \               (not (string-contains file_name #\\7))\n                (not (string-contains\
    \ file_name #\\8))\n                (not (string-contains file_name #\\9))) #t)\n\
    \          (else #f)))\n  (cond ((and (check-name file_name) (check-extension\
    \ file_name)) \"Yes\")\n        (else \"No\")))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (check-extension file_name)\n    (cond\n      [(string=? (substring file_name\
    \ (add1 (string-index file_name #\\.))) \"txt\") #t]\n      [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.))) \"exe\") #t]\n      [(string=?\
    \ (substring file_name (add1 (string-index file_name #\\.))) \"dll\") #t]\n  \
    \    [else #f]))\n  (define (check-name file_name)\n    (cond\n      [(string=?\
    \ (substring file_name 0 (string-index file_name #\\.)) \"\") #f]\n      [(char-alphabetic?\
    \ (string-ref file_name 0)) #t]\n      [else #f]))\n  (define (check-digits file_name)\n\
    \    (cond\n      [(> (string-length (regexp-replace* #rx\"[^0-9]\" file_name\
    \ \"\")) 3) #f]\n      [else #t]))\n  (cond\n    [(and (check-extension file_name)\
    \ (check-name file_name) (check-digits file_name)) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (define (is_valid_substring s)\n    (and (not (empty? s))\n       \
    \  (char-alphabetic? (string-ref s 0))\n         (not (string-contains s #\\0)\
    \ (string-contains s #\\9))))\n  (define (is_valid_extension ext)\n    (member\
    \ ext '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_file_name file_name)\n\
    \    (let ((substrings (string-split file_name #\\.)))\n      (and (= (length\
    \ substrings) 2)\n           (is_valid_substring (first substrings))\n       \
    \    (is_valid_extension (second substrings)))))\n  (if (is_valid_file_name file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check-digits\
    \ file_name)\n    (cond ((string-empty? file_name) #t)\n          ((char-numeric?\
    \ (string-ref file_name 0))\n           (check-digits (substring file_name 1)))\n\
    \          (else #t)))\n  (define (check-dot file_name)\n    (cond ((string-empty?\
    \ file_name) #f)\n          ((char=? (string-ref file_name 0) #\\.) #t)\n    \
    \      (else (check-dot (substring file_name 1)))))\n  (define (check-extension\
    \ file_name)\n    (cond ((string-empty? file_name) #f)\n          ((string=? file_name\
    \ \"txt\") #t)\n          ((string=? file_name \"exe\") #t)\n          ((string=?\
    \ file_name \"dll\") #t)\n          (else #f)))\n  (define (check-before-dot file_name)\n\
    \    (cond ((string-empty? file_name) #f)\n          ((char-alphabetic? (string-ref\
    \ file_name 0)) #t)\n          (else #f)))\n  (define (check-file-name file_name)\n\
    \    (cond ((string-empty? file_name) #f)\n          ((check-digits file_name)\n\
    \           (cond ((check-dot file_name)\n                  (let ((dot-index (string-index\
    \ file_name #\\.)))\n                    (let ((before-dot (substring file_name\
    \ 0 dot-index))\n                          (after-dot (substring file_name (+\
    \ dot-index 1))))\n                      (cond ((check-before-dot before-dot)\n\
    \                             (check-extension after-dot))\n                 \
    \           (else #f)))))\n                 (else #f)))\n          (else #f)))\n\
    \  (cond ((check-file-name file_name) \"Yes\")\n        (else \"No\")))\n", " \
    \ (define (is_valid_extension ext)\n    (cond [(string=? ext \"txt\") #t]\n  \
    \        [(string=? ext \"exe\") #t]\n          [(string=? ext \"dll\") #t]\n\
    \          [else #f]))\n  (define (is_valid_name name)\n    (define (is_valid_char\
    \ c)\n      (or (char-alphabetic? c) (char-numeric? c)))\n    (define (is_valid_name_helper\
    \ name)\n      (cond [(empty? name) #t]\n            [(is_valid_char (first name))\
    \ (is_valid_name_helper (rest name))]\n            [else #f]))\n    (and (not\
    \ (empty? name)) (is_valid_name_helper name)))\n  (define (is_valid_file_name\
    \ file_name)\n    (define (is_valid_file_name_helper file_name)\n      (cond [(empty?\
    \ file_name) #f]\n            [(char-numeric? (first file_name)) (is_valid_file_name_helper\
    \ (rest file_name))]\n            [(char-alphabetic? (first file_name)) #t]\n\
    \            [else #f]))\n    (and (not (empty? file_name)) (is_valid_file_name_helper\
    \ file_name)))\n  (define (is_valid_file_name_helper file_name)\n    (cond [(empty?\
    \ file_name) #f]\n          [(char-numeric? (first file_name)) (is_valid_file_name_helper\
    \ (rest file_name))]\n          [(char-alphabetic? (first file_name)) #t]\n  \
    \        [else #f]))\n  (define (is_valid_file_name file_name)\n    (and (not\
    \ (empty? file_name)) (is_valid_file_name_helper file_name)))\n  (define (is_valid_file_name_helper\
    \ file_name)\n    (cond [(empty? file_name) #f]\n          [(char-numeric? (first\
    \ file_name)) (is_valid_file_name", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_substring s)\n    (and\
    \ (not (empty? s))\n         (regexp-match? #rx\"[a-zA-Z]\" (substring s 0 1))\n\
    \         (regexp-match? #rx\"[a-zA-Z0-9]+\" s)))\n  (define (is_valid_extension\
    \ s)\n    (regexp-match? #rx\"^(txt|exe|dll)$\" s))\n  (define (is_valid_file_name\
    \ s)\n    (define (count_digits s)\n      (cond\n        [(empty? s) 0]\n    \
    \    [(regexp-match? #rx\"[0-9]\" (first s)) (+ 1 (count_digits (rest s)))]\n\
    \        [else (count_digits (rest s))]))\n    (let ([parts (regexp-split #rx\"\
    \\.\" s)])\n      (and (= (length parts) 2)\n           (is_valid_substring (first\
    \ parts))\n           (<= (count_digits (first parts)) 3)\n           (is_valid_extension\
    \ (second parts)))))\n  (cond\n    [(is_valid_file_name file_name) \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (define (check_digit_count file_name)\n    (define\
    \ (count_digits file_name)\n      (cond\n        [(empty? file_name) 0]\n    \
    \    [(char-numeric? (first file_name)) (+ 1 (count_digits (rest file_name)))]\n\
    \        [else (count_digits (rest file_name))]))\n    (if (> (count_digits file_name)\
    \ 3)\n        \"No\"\n        \"Yes\"))\n  (define (check_dot_count file_name)\n\
    \    (define (count_dots file_name)\n      (cond\n        [(empty? file_name)\
    \ 0]\n        [(char=? (first file_name) #\\.) (+ 1 (count_dots (rest file_name)))]\n\
    \        [else (count_dots (rest file_name))]))\n    (if (= (count_dots file_name)\
    \ 1)\n        \"Yes\"\n        \"No\"))\n  (define (check_substring_before_dot\
    \ file_name)\n    (define (check_first_char file_name)\n      (if (char-alphabetic?\
    \ (first file_name))\n          \"Yes\"\n          \"No\"))\n    (define (check_substring_length\
    \ file_name)\n      (if (empty? (rest file_name))\n          \"No\"\n        \
    \  \"Yes\"))\n    (if (and (check_first_char file_name) (check_substring_length\
    \ file_name))\n        \"Yes\"\n        \"No\"))\n  (define (check_substring_after_dot\
    \ file_name)\n    (define (get_substring_after_dot file_name)\n      (cond\n \
    \       [(empty? file_name) \"\"]\n        [(char=? (first file_name) #\\.) (rest\
    \ file_name)]\n        [else (get_substring_after_dot (rest file_name))]))\n \
    \   (define (check_substring_length file_name)\n      (if (= (string-length file_name)\
    \ 3)\n          \"Yes\"\n          \"No\"))\n    (define (check_substring_value\
    \ file_name)\n      (if (or (", "  (define (count-digits file_name)\n    (if (empty?\
    \ file_name)\n        0\n        (if (char-numeric? (first file_name))\n     \
    \       (+ 1 (count-digits (rest file_name)))\n            (count-digits (rest\
    \ file_name)))))\n  (define (count-dots file_name)\n    (if (empty? file_name)\n\
    \        0\n        (if (char=? (first file_name) #\\.)\n            (+ 1 (count-dots\
    \ (rest file_name)))\n            (count-dots (rest file_name)))))\n  (define\
    \ (valid-extension? file_name)\n    (if (empty? file_name)\n        #f\n     \
    \   (if (char=? (first file_name) #\\.)\n            (if (string=? (rest file_name)\
    \ \"txt\")\n                #t\n                (if (string=? (rest file_name)\
    \ \"exe\")\n                    #t\n                    (if (string=? (rest file_name)\
    \ \"dll\")\n                        #t\n                        #f)))\n      \
    \      (valid-extension? (rest file_name)))))\n  (define (valid-prefix? file_name)\n\
    \    (if (empty? file_name)\n        #f\n        (if (char=? (first file_name)\
    \ #\\.)\n            #t\n            (if (char-alphabetic? (first file_name))\n\
    \                (valid-prefix? (rest file_name))\n                #f))))\n  (if\
    \ (and (= (count-digits file_name) 3)\n           (= (count-dots file_name) 1)\n\
    \           (valid-extension? file_name)\n           (valid-prefix? file_name))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (check_extension file_name)\n  \
    \  (cond\n      [(string=? (substring file_name (sub1 (string-length file_name))\
    \ (string-length file_name)) \"txt\") #t]\n      [(string=? (substring file_name\
    \ (sub1 (string-length file_name)) (string-length file_name)) \"exe\") #t]\n \
    \     [(string=? (substring file_name (sub1 (string-length file_name)) (string-length\
    \ file_name)) \"dll\") #t]\n      [else #f]))\n  (define (check_name file_name)\n\
    \    (cond\n      [(string=? (substring file_name 0 1) \"a\") #t]\n      [(string=?\
    \ (substring file_name 0 1) \"b\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"c\") #t]\n      [(string=? (substring file_name 0 1) \"d\") #t]\n   \
    \   [(string=? (substring file_name 0 1) \"e\") #t]\n      [(string=? (substring\
    \ file_name 0 1) \"f\") #t]\n      [(string=? (substring file_name 0 1) \"g\"\
    ) #t]\n      [(string=? (substring file_name 0 1) \"h\") #t]\n      [(string=?\
    \ (substring file_name 0 1) \"i\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"j\") #t]\n      [(string=? (substring file_name 0 1) \"k\") #t]\n   \
    \   [(string=? (substring file_name 0 1) \"l\") #t]\n      [(string=? (substring\
    \ file_name 0 1) \"m\") #t]\n      [(string=? (substring file_name 0 1) \"n\"\
    ) #t]\n      [(string=? (substring file_name 0 1) \"o\") #t]\n      [(string=?\
    \ (substring file_name 0 1) \"p\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"q\") #t]\n      [(", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(string=?\
    \ file_name \"example.txt\") \"Yes\"]\n    [(string=? file_name \"1example.dll\"\
    ) \"No\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"[a-zA-Z][a-zA-Z0-9]*\\\
    \\.txt\" file_name) \"Yes\"]\n    [(regexp-match #rx\"[a-zA-Z][a-zA-Z0-9]*\\\\\
    .exe\" file_name) \"Yes\"]\n    [(regexp-match #rx\"[a-zA-Z][a-zA-Z0-9]*\\\\.dll\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (or (string=? ext \"txt\")\n        (string=? ext \"exe\")\n     \
    \   (string=? ext \"dll\")))\n  (define (is_valid_name? name)\n    (define (is_valid_char?\
    \ c)\n      (or (char-alphabetic? c)\n          (char-numeric? c)))\n    (define\
    \ (is_valid_name-char? c)\n      (or (char-alphabetic? c)\n          (char-numeric?\
    \ c)\n          (char=? c #\\.)))\n    (define (is_valid_name-char-seq? cs)\n\
    \      (if (null? cs)\n          #t\n          (and (is_valid_name-char? (car\
    \ cs))\n               (is_valid_name-char-seq? (cdr cs)))))\n    (define (is_valid_name-seq?\
    \ cs)\n      (if (null? cs)\n          #t\n          (and (is_valid_char? (car\
    \ cs))\n               (is_valid_name-seq? (cdr cs)))))\n    (define (is_valid_name-seq-with-dot?\
    \ cs)\n      (if (null? cs)\n          #f\n          (if (char=? (car cs) #\\\
    .)\n              (and (is_valid_name-seq? (cdr cs))\n                   (is_valid_name-seq?\
    \ (cdr cs)))\n              (and (is_valid_name-seq? cs)\n                   (is_valid_name-seq-with-dot?\
    \ (cdr cs))))))\n    (define (is_valid_name-seq-with-dot-and-extension? cs)\n\
    \      (if (null? cs)\n          #f\n          (if (char=? (car cs) #\\.)\n  \
    \            (and (is_valid_name-seq? (cdr cs))\n                   (is_valid_name-seq?\
    \ (cdr cs))\n                   (is_valid_extension? (cdr cs)))\n            \
    \  (and (is_valid_name-seq? cs)\n                   (is_valid_name-seq", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"\
    ]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension? extension)\n\
    \    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (regexp-match #rx\"^[a-zA-Z]\"\
    \ name)\n         (not (regexp-match #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([name (substring file_name 0 (string-index file_name \"\
    .\"))]\n          [extension (substring file_name (+ 1 (string-index file_name\
    \ \".\")))])\n      (and (is_valid_name? name)\n           (is_valid_extension?\
    \ extension))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"\
    No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\n     \"Yes\"]\n    [else\n\
    \     \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (cond\n      [(string=? ext \"txt\") #t]\n      [(string=? ext \"\
    exe\") #t]\n      [(string=? ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (define (is_letter? c)\n      (and (char-alphabetic? c) (not (char-numeric?\
    \ c))))\n    (define (is_valid_name_helper? name)\n      (cond\n        [(empty?\
    \ name) #t]\n        [(is_letter? (first name)) (is_valid_name_helper? (rest name))]\n\
    \        [else #f]))\n    (and (not (empty? name)) (is_valid_name_helper? name)))\n\
    \  (define (count_digits name)\n    (cond\n      [(empty? name) 0]\n      [(char-numeric?\
    \ (first name)) (+ 1 (count_digits (rest name)))]\n      [else (count_digits (rest\
    \ name))]))\n  (define (count_dots name)\n    (cond\n      [(empty? name) 0]\n\
    \      [(char=? (first name) #\\.) (+ 1 (count_dots (rest name)))]\n      [else\
    \ (count_dots (rest name))]))\n  (define (split_file_name name)\n    (define (split_file_name_helper\
    \ name)\n      (cond\n        [(empty? name) (list (list) (list))]\n        [(char=?\
    \ (first name) #\\.) (list (list) (rest name))]\n        [else (let ([splitted\
    \ (split_file_name_helper (rest name))])\n                (list (cons (first name)\
    \ (first splitted)) (second splitted)))]))\n    (split_file_name_helper name))\n\
    \  (define (is_valid_file_name? file_name)\n    (let ([splitted (split_file_name\
    \ file_name)])\n      (and (= 1 (count_dots file_name))\n           (= 3 (count_digits",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (check_digits file_name)\n    (if (empty? file_name)\n        #t\n  \
    \      (if (char-numeric? (first file_name))\n            (check_digits (rest\
    \ file_name))\n            #f)))\n  (define (check_dot file_name)\n    (if (empty?\
    \ file_name)\n        #f\n        (if (char=? (first file_name) #\\.)\n      \
    \      #t\n            (check_dot (rest file_name)))))\n  (define (check_before_dot\
    \ file_name)\n    (if (empty? file_name)\n        #f\n        (if (char-alphabetic?\
    \ (first file_name))\n            #t\n            (check_before_dot (rest file_name)))))\n\
    \  (define (check_after_dot file_name)\n    (if (empty? file_name)\n        #f\n\
    \        (if (char=? (first file_name) #\\.)\n            (if (string=? (substring\
    \ file_name 1 4) \"txt\")\n                #t\n                (if (string=? (substring\
    \ file_name 1 4) \"exe\")\n                    #t\n                    (if (string=?\
    \ (substring file_name 1 4) \"dll\")\n                        #t\n           \
    \             #f)))\n            (check_after_dot (rest file_name)))))\n  (if\
    \ (and (check_digits file_name) (check_dot file_name) (check_before_dot file_name)\
    \ (check_after_dot file_name))\n      \"Yes\"\n      \"No\"))\n", "  (define (count-digits\
    \ str)\n    (if (string-empty? str)\n        0\n        (+ (if (char-numeric?\
    \ (string-ref str 0)) 1 0)\n           (count-digits (substring str 1)))))\n \
    \ (define (has-dot str)\n    (if (string-empty? str)\n        #f\n        (if\
    \ (char=? (string-ref str 0) #\\.)\n            #t\n            (has-dot (substring\
    \ str 1)))))\n  (define (has-extension str)\n    (if (string-empty? str)\n   \
    \     #f\n        (if (or (string=? str \"txt\")\n                (string=? str\
    \ \"exe\")\n                (string=? str \"dll\"))\n            #t\n        \
    \    (has-extension (substring str 1)))))\n  (define (has-valid-extension str)\n\
    \    (if (string-empty? str)\n        #f\n        (if (char=? (string-ref str\
    \ 0) #\\.)\n            (has-extension (substring str 1))\n            (has-valid-extension\
    \ (substring str 1)))))\n  (define (has-valid-name str)\n    (if (string-empty?\
    \ str)\n        #f\n        (if (char-alphabetic? (string-ref str 0))\n      \
    \      (has-valid-extension (substring str 1))\n            (has-valid-name (substring\
    \ str 1)))))\n  (if (and (= (count-digits file_name) 3)\n           (has-dot file_name)\n\
    \           (has-valid-name file_name))\n      \"Yes\"\n      \"No\"))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][^0-9]*[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][^0-9]*[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][^0-9]*[0-9]{0,3}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n    (define (is_valid_name? name)\n      (and\
    \ (not (empty? name))\n           (regexp-match? #rx\"^[a-zA-Z]\" name)))\n  \
    \  (define (is_valid_number_of_digits? file_name)\n      (define (count_digits\
    \ file_name)\n        (cond ((empty? file_name) 0)\n              ((char-numeric?\
    \ (first file_name)) (+ 1 (count_digits (rest file_name))))\n              (else\
    \ (count_digits (rest file_name)))))\n      (<= (count_digits file_name) 3))\n\
    \    (define (is_valid_dot? file_name)\n      (define (count_dots file_name)\n\
    \        (cond ((empty? file_name) 0)\n              ((char=? (first file_name)\
    \ #\\.) (+ 1 (count_dots (rest file_name))))\n              (else (count_dots\
    \ (rest file_name)))))\n      (= (count_dots file_name) 1))\n    (define (get_extension\
    \ file_name)\n      (substring file_name (string-index file_name #\\.)))\n   \
    \ (define (get_name file_name)\n      (substring file_name 0 (string-index file_name\
    \ #\\.)))\n    (and (is_valid_number_of_digits? file_name)\n         (is_valid_dot?\
    \ file_name)\n         (is_valid_name? (get_name file_name))\n         (is_valid_extension?\
    \ (get_extension file_name))))\n  (if (is_valid_file_name? file_name) \"Yes\"\
    \ \"No\"))\n", "  (define (check-extension file_name)\n    (cond\n      [(string=?\
    \ (substring file_name (sub1 (string-length file_name)) (string-length file_name))\
    \ \".txt\") \"Yes\"]\n      [(string=? (substring file_name (sub1 (string-length\
    \ file_name)) (string-length file_name)) \".exe\") \"Yes\"]\n      [(string=?\
    \ (substring file_name (sub1 (string-length file_name)) (string-length file_name))\
    \ \".dll\") \"Yes\"]\n      [else \"No\"]))\n  (cond\n    [(string=? (substring\
    \ file_name 0 1) \".\") \"No\"]\n    [(string=? (substring file_name 0 1) \"0\"\
    ) \"No\"]\n    [(string=? (substring file_name 0 1) \"1\") \"No\"]\n    [(string=?\
    \ (substring file_name 0 1) \"2\") \"No\"]\n    [(string=? (substring file_name\
    \ 0 1) \"3\") \"No\"]\n    [(string=? (substring file_name 0 1) \"4\") \"No\"\
    ]\n    [(string=? (substring file_name 0 1) \"5\") \"No\"]\n    [(string=? (substring\
    \ file_name 0 1) \"6\") \"No\"]\n    [(string=? (substring file_name 0 1) \"7\"\
    ) \"No\"]\n    [(string=? (substring file_name 0 1) \"8\") \"No\"]\n    [(string=?\
    \ (substring file_name 0 1) \"9\") \"No\"]\n    [(string=? (substring file_name\
    \ 0 1) \"A\") (check-extension file_name)]\n    [(string=? (substring file_name\
    \ 0 1) \"B\") (check-extension file_name)]\n    [(string=? (substring file_name\
    \ 0 1) \"C\") (check-extension file_name)]\n    [(string=? (substring file_name\
    \ 0 1) \"D\") (check-extension file_name)]\n    [(string=? (substring file_name\
    \ 0 1) \"E\") (check-extension file_name)]\n    [(string=? (", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits file_name)\n    (if (empty?\
    \ file_name)\n        0\n        (if (char-numeric? (first file_name))\n     \
    \       (+ 1 (count-digits (rest file_name)))\n            (count-digits (rest\
    \ file_name)))))\n  (define (count-dots file_name)\n    (if (empty? file_name)\n\
    \        0\n        (if (char=? (first file_name) #\\.)\n            (+ 1 (count-dots\
    \ (rest file_name)))\n            (count-dots (rest file_name)))))\n  (define\
    \ (valid-extension? file_name)\n    (if (empty? file_name)\n        #f\n     \
    \   (if (char=? (first file_name) #\\.)\n            (if (member (substring file_name\
    \ 1) '(\"txt\" \"exe\" \"dll\"))\n                #t\n                #f)\n  \
    \          (valid-extension? (rest file_name)))))\n  (define (valid-prefix? file_name)\n\
    \    (if (empty? file_name)\n        #f\n        (if (char=? (first file_name)\
    \ #\\.)\n            #t\n            (if (char-alphabetic? (first file_name))\n\
    \                (valid-prefix? (rest file_name))\n                #f))))\n  (if\
    \ (and (= (count-digits file_name) 3)\n           (= (count-dots file_name) 1)\n\
    \           (valid-extension? file_name)\n           (valid-prefix? file_name))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_file_name? file_name)\n\
    \    (define (is_valid_file_name_helper? file_name)\n      (cond\n        [(empty?\
    \ file_name) #t]\n        [(char-alphabetic? (string-ref file_name 0)) (is_valid_file_name_helper?\
    \ (substring file_name 1))]\n        [(char-numeric? (string-ref file_name 0))\
    \ (is_valid_file_name_helper? (substring file_name 1))]\n        [else #f]))\n\
    \    (define (is_valid_file_extension? file_name)\n      (cond\n        [(string=?\
    \ (substring file_name (string-length file_name) -3) \"txt\") #t]\n        [(string=?\
    \ (substring file_name (string-length file_name) -3) \"exe\") #t]\n        [(string=?\
    \ (substring file_name (string-length file_name) -3) \"dll\") #t]\n        [else\
    \ #f]))\n    (define (count_digits file_name)\n      (cond\n        [(empty? file_name)\
    \ 0]\n        [(char-numeric? (string-ref file_name 0)) (+ 1 (count_digits (substring\
    \ file_name 1)))]\n        [else (count_digits (substring file_name 1))]))\n \
    \   (cond\n      [(is_valid_file_name? file_name) #t]\n      [(is_valid_file_extension?\
    \ file_name) #t]\n      [(= (count_digits file_name) 3) #t]\n      [else #f]))\n\
    \  (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (is_valid_name? file_name)\n    (define (is_valid_extension? file_name)\n\
    \      (cond\n        [(string=? (substring file_name (string-index file_name\
    \ #\\.)) \".txt\") #t]\n        [(string=? (substring file_name (string-index\
    \ file_name #\\.)) \".exe\") #t]\n        [(string=? (substring file_name (string-index\
    \ file_name #\\.)) \".dll\") #t]\n        [else #f]))\n    (define (is_valid_prefix?\
    \ file_name)\n      (and\n        (not (string-empty? (substring file_name 0 (string-index\
    \ file_name #\\.))))\n        (or\n          (char-alphabetic? (string-ref file_name\
    \ 0))\n          (char-alphabetic? (string-ref file_name 0)))))\n    (define (is_valid_number_of_digits?\
    \ file_name)\n      (let ([number_of_digits 0])\n        (for ([i (in-range (string-length\
    \ file_name))])\n          (if (char-numeric? (string-ref file_name i))\n    \
    \        (set! number_of_digits (+ number_of_digits 1))))\n        (and\n    \
    \      (not (= number_of_digits 0))\n          (not (> number_of_digits 3)))))\n\
    \    (and\n      (is_valid_extension? file_name)\n      (is_valid_prefix? file_name)\n\
    \      (is_valid_number_of_digits? file_name)))\n  (cond\n    [(is_valid_name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[txt|exe|dll]$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (is_valid_file_name file_name)\n    (define (is_valid_extension\
    \ ext)\n      (cond\n        [(equal? ext \"txt\") #t]\n        [(equal? ext \"\
    exe\") #t]\n        [(equal? ext \"dll\") #t]\n        [else #f]))\n    (define\
    \ (is_valid_name name)\n      (define (is_valid_char ch)\n        (cond\n    \
    \      [(char-alphabetic? ch) #t]\n          [(char-numeric? ch) #t]\n       \
    \   [else #f]))\n      (define (is_valid_name_helper name)\n        (cond\n  \
    \        [(empty? name) #t]\n          [(is_valid_char (first name)) (is_valid_name_helper\
    \ (rest name))]\n          [else #f]))\n      (and (not (empty? name)) (is_valid_name_helper\
    \ name)))\n    (define (is_valid_digits digits)\n      (cond\n        [(empty?\
    \ digits) #t]\n        [(char-numeric? (first digits)) (is_valid_digits (rest\
    \ digits))]\n        [else #f]))\n    (define (is_valid_file_name_helper file_name)\n\
    \      (cond\n        [(empty? file_name) #f]\n        [(equal? (first file_name)\
    \ #\\.) #f]\n        [(equal? (first file_name) #\\.) (is_valid_file_name_helper\
    \ (rest file_name))]\n        [(is_valid_char (first file_name)) (is_valid_file_name_helper\
    \ (rest file_name))]\n        [else #f]))\n    (define (get_extension file_name)\n\
    \      (cond\n        [(empty? file_name) \"\"]\n        [(equal? (first file_name)\
    \ #\\.) (rest file_name)]\n        [else (get_extension (rest file_name))]))\n\
    \    (define (get_name file_name)\n      (cond\n        [(empty? file_name) \"\
    \"]\n        [(equal? (first file_name) #\\", "  (define (valid-extension? ext)\n\
    \    (member ext '(\"txt\" \"exe\" \"dll\")))\n  (define (valid-name? name)\n\
    \    (and (not (empty? name))\n         (char-alphabetic? (string-ref name 0))\n\
    \         (not (> (count (lambda (c) (char-numeric? c)) name) 3))))\n  (define\
    \ (valid-file-name? file-name)\n    (let ((parts (string-split file-name \"\\\\\
    .\")))\n      (and (= (length parts) 2)\n           (valid-name? (first parts))\n\
    \           (valid-extension? (second parts)))))\n  (if (valid-file-name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (count-digits file_name)\n    (cond\n\
    \      [(empty? file_name) 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits\
    \ (rest file_name)))]\n      [else (count-digits (rest file_name))]))\n  (define\
    \ (count-dots file_name)\n    (cond\n      [(empty? file_name) 0]\n      [(char=?\
    \ (first file_name) #\\.) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots\
    \ (rest file_name))]))\n  (define (is-valid-extension? file_name)\n    (cond\n\
    \      [(string=? (substring file_name (add1 (string-index file_name #\\.)) (string-length\
    \ file_name)) \"txt\") #t]\n      [(string=? (substring file_name (add1 (string-index\
    \ file_name #\\.)) (string-length file_name)) \"exe\") #t]\n      [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.)) (string-length file_name)) \"\
    dll\") #t]\n      [else #f]))\n  (define (is-valid-prefix? file_name)\n    (cond\n\
    \      [(empty? file_name) #f]\n      [(char-alphabetic? (first file_name)) #t]\n\
    \      [else #f]))\n  (cond\n    [(and\n      (is-valid-extension? file_name)\n\
    \      (is-valid-prefix? file_name)\n      (= (count-digits file_name) 3)\n  \
    \    (= (count-dots file_name) 1)) \"Yes\"]\n    [else \"No\"]))\n", "  (define\
    \ (is_valid_substring str)\n    (and (not (empty? str))\n         (or (string=?\
    \ str \"txt\")\n             (string=? str \"exe\")\n             (string=? str\
    \ \"dll\"))))\n  (define (is_valid_file_name str)\n    (let* ([substrings (string-split\
    \ str \".\")]\n           [substring-before-dot (car substrings)]\n          \
    \ [substring-after-dot (cadr substrings)])\n      (and (not (empty? substrings))\n\
    \           (and (not (empty? substring-before-dot))\n                (and (not\
    \ (empty? substring-after-dot))\n                     (and (not (string-contains\
    \ substring-before-dot #\\.))\n                          (and (not (string-contains\
    \ substring-after-dot #\\.))\n                               (and (is_valid_substring\
    \ substring-after-dot)\n                                    (and (not (string-contains\
    \ substring-before-dot #\\0))\n                                         (and (not\
    \ (string-contains substring-before-dot #\\1))\n                             \
    \                 (and (not (string-contains substring-before-dot #\\2))\n   \
    \                                                (and (not (string-contains substring-before-dot\
    \ #\\3))\n                                                        (and (not (string-contains\
    \ substring-before-dot #\\4))\n                                              \
    \               (and (not (string-contains substring-before-dot #\\5))\n     \
    \                                                             (and (not (string-contains\
    \ substring-before-dot #\\6))\n                                              \
    \                         (and (not (string-contains substring-before-dot #\\\
    7))\n                                                                        \
    \    (and (not (string-contains substring-before-dot #\\8))\n                \
    \                                                                 (not (string-contains\
    \ substring-before-dot #\\9))))))))))))))))))\n    (if (is_valid_file_name file_name)\n\
    \        \"Yes\"\n        \"No\")))\n", "  (define (is_valid_extension? ext)\n\
    \    (or (string=? ext \"txt\")\n        (string=? ext \"exe\")\n        (string=?\
    \ ext \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (regexp-match? #rx\"[a-zA-Z]\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (count-digits str)\n      (define (count-digits-iter\
    \ str count)\n        (cond ((empty? str) count)\n              ((regexp-match?\
    \ #rx\"[0-9]\" (first str))\n               (count-digits-iter (rest str) (+ count\
    \ 1)))\n              (else (count-digits-iter (rest str) count))))\n    (define\
    \ (count-dots str)\n      (define (count-dots-iter str count)\n        (cond ((empty?\
    \ str) count)\n              ((char=? (first str) #\\.)\n               (count-dots-iter\
    \ (rest str) (+ count 1)))\n              (else (count-dots-iter (rest str) count))))\n\
    \    (define (split-file-name str)\n      (define (split-file-name-iter str name\
    \ extension)\n        (cond ((empty? str) (list name extension))\n           \
    \   ((char=? (first str) #\\.)\n               (split-file-name-iter (rest str)\
    \ name (string (first str))))\n              (else (split-file-name-iter (rest\
    \ str) (string-append name (string (first str))) extension))))\n    (let* ((split-file-name\
    \ (split-file-name file_name))\n           (name (first split-file-name))\n  \
    \         (extension (second split-file-name)))\n      (and (= (count-digits file_name)\
    \ 3)\n           (= (count-dots file_name) 1)\n           (is_valid_name? name)\n\
    \           (is_valid_extension? extension))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (string=? extension \"txt\")\n        (string=? extension\
    \ \"exe\")\n        (string=? extension \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (string-contains name #\\.))\n         (not (string-contains\
    \ name #\\_))\n         (not (string-contains name #\\-))\n         (not (string-contains\
    \ name #\\!))\n         (not (string-contains name #\\@))\n         (not (string-contains\
    \ name #\\#))\n         (not (string-contains name #\\$))\n         (not (string-contains\
    \ name #\\%))\n         (not (string-contains name #\\^))\n         (not (string-contains\
    \ name #\\&))\n         (not (string-contains name #\\*))\n         (not (string-contains\
    \ name #\\()))\n         (not (string-contains name #\\)))\n  (define (is_valid_digits?\
    \ digits)\n    (and (not (string-contains digits #\\0))\n         (not (string-contains\
    \ digits #\\1))\n         (not (string-contains digits #\\2))\n         (not (string-contains\
    \ digits #\\3))\n         (not (string-contains digits #\\4))\n         (not (string-contains\
    \ digits #\\5))\n         (not (string-contains digits #\\6))\n         (not (string-contains\
    \ digits #\\7))\n         (not (string-contains digits #\\8))\n         (not (string-contains\
    \ digits #\\9))))\n  (define (is_valid_file_name? file_name)\n    (let ((file_name_parts\
    \ (string-split file_name \"\\\\.\")))\n      (and (= (length file_name_parts)\
    \ 2)\n           (is_valid_name? (first file_name_parts))\n           (is_valid_extension?\
    \ (second file_name_parts))\n           (is_valid_digits? (first file_name_parts)))))\n\
    \  (if (is_", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits\
    \ str)\n    (cond ((null? str) 0)\n          ((char-numeric? (car str)) (+ 1 (count-digits\
    \ (cdr str))))\n          (else (count-digits (cdr str)))))\n  (define (check-extension\
    \ str)\n    (cond ((equal? str \"txt\") #t)\n          ((equal? str \"exe\") #t)\n\
    \          ((equal? str \"dll\") #t)\n          (else #f)))\n  (define (check-substr\
    \ str)\n    (define (check-substr-helper str)\n      (cond ((null? str) #t)\n\
    \            ((char-numeric? (car str)) #f)\n            (else (check-substr-helper\
    \ (cdr str)))))\n    (cond ((null? str) #f)\n          ((char-numeric? (car str))\
    \ #f)\n          (else (check-substr-helper (cdr str)))))\n  (define (check-dot\
    \ str)\n    (cond ((null? str) #f)\n          ((equal? (car str) #\\.) #t)\n \
    \         (else (check-dot (cdr str)))))\n  (define (split-dot str)\n    (cond\
    \ ((null? str) '())\n          ((equal? (car str) #\\.) (list (list->string (reverse\
    \ (cdr str)))\n                                        (list->string (reverse\
    \ (cdr (cdr str))))))\n          (else (split-dot (cdr str)))))\n  (define (check-file-name\
    \ str)\n    (cond ((< (count-digits str) 4) #t)\n          (else #f)))\n  (cond\
    \ ((check-file-name file_name)\n         (let ((split-file-name (split-dot file_name)))\n\
    \           (cond ((and (check-dot file_name)\n                       (check-substr\
    \ (car split-file-name))\n                       (check-extension (cadr split-file-name)))\n\
    \                  \"Yes\")\n                 (else \"No\"))))\n        (else\
    \ \"No\")))\n", "  (cond\n    [(and (not (regexp-match #rx\"[0-9]{4}\" file_name))\n\
    \          (regexp-match #rx\"^[a-zA-Z]+[.][a-zA-Z]+$\" file_name)\n         \
    \ (regexp-match #rx\"^[a-zA-Z]+[.](txt|exe|dll)$\" file_name))\n     \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (define (check-extension ext)\n    (cond\n      [(string=?\
    \ ext \"txt\") \"Yes\"]\n      [(string=? ext \"exe\") \"Yes\"]\n      [(string=?\
    \ ext \"dll\") \"Yes\"]\n      [else \"No\"]))\n  (define (check-name name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}$\" name) \"Yes\"]\n\
    \      [else \"No\"]))\n  (define (check-dot file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) \"Yes\"]\n      [else\
    \ \"No\"]))\n  (cond\n    [(check-dot file_name) (check-extension (string-split\
    \ file_name #\\.))]\n    [(check-name file_name) \"No\"]\n    [else \"No\"]))\n",
  "  (cond [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n        [else \"No\"]))", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_extension\
    \ file_name)\n    (cond\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"txt\") #t]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"exe\") #t]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"dll\") #t]\n      [else #f]))\n  (define (check_name file_name)\n\
    \    (cond\n      [(string=? (substring file_name 0 1) \"0\") #f]\n      [(string=?\
    \ (substring file_name 0 1) \"1\") #f]\n      [(string=? (substring file_name\
    \ 0 1) \"2\") #f]\n      [(string=? (substring file_name 0 1) \"3\") #f]\n   \
    \   [(string=? (substring file_name 0 1) \"4\") #f]\n      [(string=? (substring\
    \ file_name 0 1) \"5\") #f]\n      [(string=? (substring file_name 0 1) \"6\"\
    ) #f]\n      [(string=? (substring file_name 0 1) \"7\") #f]\n      [(string=?\
    \ (substring file_name 0 1) \"8\") #f]\n      [(string=? (substring file_name\
    \ 0 1) \"9\") #f]\n      [else #t]))\n  (define (check_dot file_name)\n    (cond\n\
    \      [(string=? (substring file_name (- (string-length file_name) 4) (- (string-length\
    \ file_name) 3)) \".\") #t]\n      [else #f]))\n  (define (check_digits file_name)\n\
    \    (cond\n      [(string-length (regexp-match #rx\"\\\\d\" file_name)) 3]\n\
    \      [else #t]))\n  (cond\n    [(and (check_extension file_name) (check_name\
    \ file_name) (check_dot file_name) (check_digits file_name)) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits\
    \ str)\n    (if (string-empty? str)\n        0\n        (+ (if (char-numeric?\
    \ (string-ref str 0)) 1 0)\n           (count-digits (substring str 1)))))\n \
    \ (define (count-dots str)\n    (if (string-empty? str)\n        0\n        (+\
    \ (if (char=? (string-ref str 0) #\\.) 1 0)\n           (count-dots (substring\
    \ str 1)))))\n  (define (is-valid-extension str)\n    (or (string=? str \"txt\"\
    )\n        (string=? str \"exe\")\n        (string=? str \"dll\")))\n  (define\
    \ (is-valid-name str)\n    (and (not (string-empty? str))\n         (char-alphabetic?\
    \ (string-ref str 0))))\n  (define (is-valid-file-name str)\n    (let ((dot-index\
    \ (string-index str #\\.))\n          (name (substring str 0 dot-index))\n   \
    \       (extension (substring str (+ dot-index 1))))\n      (and (= (count-digits\
    \ str) 0)\n           (= (count-dots str) 1)\n           (is-valid-name name)\n\
    \           (is-valid-extension extension))))\n  (if (is-valid-file-name file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_name\
    \ name)\n    (define (check_first_letter letter)\n      (and (char-alphabetic?\
    \ letter)\n           (not (char-numeric? letter))))\n    (define (check_last_letter\
    \ letter)\n      (and (char-alphabetic? letter)\n           (not (char-numeric?\
    \ letter))))\n    (define (check_middle_letters letters)\n      (define (check_middle_letters_helper\
    \ letters)\n        (if (null? letters)\n            #t\n            (and (char-alphabetic?\
    \ (car letters))\n                 (check_middle_letters_helper (cdr letters)))))\n\
    \      (check_middle_letters_helper letters))\n    (define (check_extension extension)\n\
    \      (and (equal? extension \"txt\")\n           (equal? extension \"exe\")\n\
    \           (equal? extension \"dll\")))\n    (define (check_digits digits)\n\
    \      (and (not (equal? (length digits) 4))\n           (not (equal? (length\
    \ digits) 3))\n           (not (equal? (length digits) 2))\n           (not (equal?\
    \ (length digits) 1))))\n    (define (check_dot dot)\n      (equal? dot \".\"\
    ))\n    (define (check_file_name file_name)\n      (define (check_file_name_helper\
    \ file_name)\n        (if (null? file_name)\n            #t\n            (and\
    \ (char-alphabetic? (car file_name))\n                 (check_file_name_helper\
    \ (cdr file_name)))))\n      (check_file_name_helper file_name))\n    (define\
    \ (check_file_name_helper file_name)\n      (if (null? file_name)\n          #t\n\
    \          (and (char-alphabetic? (car file_name))\n               (check_file_name_helper\
    \ (cdr file_name)))))\n    (define (check_file_name_helper file_name)\n      (if\
    \ (null? file_name)\n          #t\n          (and (char-alphabetic? (car file_name))\n\
    \               (check_file_name_hel", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n\
    \    (if (empty? str)\n        0\n        (if (char-numeric? (first str))\n  \
    \          (+ 1 (count-digits (rest str)))\n            (count-digits (rest str)))))\n\
    \  (define (count-dots str)\n    (if (empty? str)\n        0\n        (if (char=?\
    \ (first str) #\\.)\n            (+ 1 (count-dots (rest str)))\n            (count-dots\
    \ (rest str)))))\n  (define (valid-extension? str)\n    (or (string=? str \"txt\"\
    )\n        (string=? str \"exe\")\n        (string=? str \"dll\")))\n  (define\
    \ (valid-name? str)\n    (and (not (empty? str))\n         (char-alphabetic? (first\
    \ str))\n         (not (char-numeric? (first str)))))\n  (define (valid-file-name?\
    \ str)\n    (and (not (> (count-digits str) 3))\n         (= (count-dots str)\
    \ 1)\n         (valid-name? (substring str 0 (string-index str #\\.)))\n     \
    \    (valid-extension? (substring str (+ 1 (string-index str #\\.))))))\n  (if\
    \ (valid-file-name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n \
    \   [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"\
    ]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension? ext)\n   \
    \ (or (string=? ext \"txt\")\n        (string=? ext \"exe\")\n        (string=?\
    \ ext \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (regexp-match? #rx\"[a-zA-Z]\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ((parts (string-split file_name #\\.)))\n      (and (=\
    \ (length parts) 2)\n           (is_valid_name? (first parts))\n           (is_valid_extension?\
    \ (second parts)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n \
    \     \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (let ((dot_index (string-index\
    \ file_name \".\"))\n        (digits_count (string-count file_name #rx\"[0-9]\"\
    )))\n    (cond\n      [(or (> digits_count 3)\n           (not (string-contains\
    \ file_name \".\"))\n           (string=? (substring file_name 0 1) \".\")\n \
    \          (string=? (substring file_name 0 1) \" \")\n           (string=? (substring\
    \ file_name 0 1) \"\")\n           (string=? (substring file_name (+ dot_index\
    \ 1) (string-length file_name)) \"\")\n           (string=? (substring file_name\
    \ (+ dot_index 1) (string-length file_name)) \" \")\n           (not (string-contains\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" (substring file_name\
    \ 0 1)))\n           (not (string-contains \"txtexe\" (substring file_name (+\
    \ dot_index 1) (string-length file_name))))\n           (not (string-contains\
    \ \"txtexe\" (substring file_name (+ dot_index 1) (string-length file_name)))))\n\
    \        \"No\"]\n      [else \"Yes\"])))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension\
    \ ext)\n    (cond\n      [(string=? ext \"txt\") #t]\n      [(string=? ext \"\
    exe\") #t]\n      [(string=? ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name\
    \ name)\n    (and (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name)\n       \
    \  (<= (string-length name) 3)))\n  (define (is_valid_file_name file_name)\n \
    \   (let ([parts (string-split file_name #\\.)])\n      (and (= (length parts)\
    \ 2)\n           (is_valid_name (first parts))\n           (is_valid_extension\
    \ (second parts)))))\n  (cond\n    [(is_valid_file_name file_name) \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (define (count-digits str)\n    (if (empty? str)\n\
    \        0\n        (if (char-numeric? (first str))\n            (+ 1 (count-digits\
    \ (rest str)))\n            (count-digits (rest str)))))\n  (define (count-dots\
    \ str)\n    (if (empty? str)\n        0\n        (if (char=? (first str) #\\.)\n\
    \            (+ 1 (count-dots (rest str)))\n            (count-dots (rest str)))))\n\
    \  (define (check-extension str)\n    (if (empty? str)\n        #f\n        (if\
    \ (or (string=? str \"txt\")\n                (string=? str \"exe\")\n       \
    \         (string=? str \"dll\"))\n            #t\n            #f)))\n  (define\
    \ (check-before-dot str)\n    (if (empty? str)\n        #f\n        (if (or (char-alphabetic?\
    \ (first str))\n                (char=? (first str) #\\_))\n            #t\n \
    \           #f)))\n  (define (split-file-name str)\n    (if (empty? str)\n   \
    \     '()\n        (if (char=? (first str) #\\.)\n            (cons (string (rest\
    \ str)) '())\n            (cons (string (first str)) (split-file-name (rest str))))))\n\
    \  (define (split-file-name-2 str)\n    (if (empty? str)\n        '()\n      \
    \  (if (char=? (first str) #\\.)\n            (cons (string (first str)) (cons\
    \ (string (rest str)) '()))\n            (cons (string (first str)) (split-file-name-2\
    \ (rest str))))))\n  (define (check-file-name str)\n    (if (and (= (count-digits\
    \ str) 3)\n             (= (count-dots str) 1)\n             (check-extension\
    \ (cadr (split-file-name str)))\n             (check-before-dot (string-join (split-file-name-2\
    \ str))))\n        \"Yes\"\n        \"No\"))\n  (check-file-", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_extension\
    \ file_name)\n    (cond ((string=? (substring file_name (+ (string-index file_name\
    \ #\\.) 1)) \"txt\") #t)\n          ((string=? (substring file_name (+ (string-index\
    \ file_name #\\.) 1)) \"exe\") #t)\n          ((string=? (substring file_name\
    \ (+ (string-index file_name #\\.) 1)) \"dll\") #t)\n          (else #f)))\n \
    \ (define (check_name file_name)\n    (cond ((and (char-alphabetic? (string-ref\
    \ file_name 0))\n                (not (string-contains file_name #\\.))\n    \
    \            (not (string-contains file_name #\\_))) #t)\n          (else #f)))\n\
    \  (define (check_digits file_name)\n    (cond ((> (string-length (string-filter\
    \ char-numeric? file_name)) 3) #f)\n          (else #t)))\n  (cond ((and (check_extension\
    \ file_name)\n              (check_name file_name)\n              (check_digits\
    \ file_name)) \"Yes\")\n        (else \"No\")))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (and (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z]{3}$\"\
    \ file_name)\n         (not (regexp-match? #rx\"[0-9]{4}\" file_name))))\n  (if\
    \ (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"\
    ]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (cond\n      [(string=? extension \"txt\") #t]\n      [(string=?\
    \ extension \"exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is_valid_name? name)\n    (define (is_valid_char? c)\n   \
    \   (or (char-alphabetic? c) (char-numeric? c)))\n    (define (is_valid_name-helper?\
    \ name)\n      (cond\n        [(empty? name) #t]\n        [(is_valid_char? (first\
    \ name)) (is_valid_name-helper? (rest name))]\n        [else #f]))\n    (and (is_valid_name-helper?\
    \ name)\n         (not (string-contains name #\\.))))\n  (define (is_valid_number?\
    \ number)\n    (cond\n      [(empty? number) #t]\n      [(char-numeric? (first\
    \ number)) (is_valid_number? (rest number))]\n      [else #f]))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_file_name-helper? file_name)\n      (cond\n\
    \        [(empty? file_name) #t]\n        [(char-alphabetic? (first file_name))\
    \ (is_valid_file_name-helper? (rest file_name))]\n        [(char-numeric? (first\
    \ file_name)) (is_valid_number? (rest file_name))]\n        [else #f]))\n    (and\
    \ (is_valid_file_name-helper? file_name)\n         (string-contains file_name\
    \ #\\.)))\n  (define (get_extension file_name)\n    (define (get_extension-helper\
    \ file_name)\n      (cond\n        [(empty? file_name) empty]\n        [(char=?\
    \ (first file_name) #\\.) (rest file_name)]\n        [else (get_extension-helper\
    \ (rest file_name))]))\n    (get_", "  (define (is_valid_extension ext)\n    (cond\
    \ [(equal? ext \"txt\") #t]\n          [(equal? ext \"exe\") #t]\n          [(equal?\
    \ ext \"dll\") #t]\n          [else #f]))\n  (define (is_valid_name name)\n  \
    \  (cond [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}$\" name) #t]\n          [else\
    \ #f]))\n  (define (is_valid_file_name file_name)\n    (define (split_file_name\
    \ file_name)\n      (regexp-match #rx\"^([a-zA-Z]+[0-9]{0,3})\\.(txt|exe|dll)$\"\
    \ file_name))\n    (define (get_name file_name)\n      (vector-ref (split_file_name\
    \ file_name) 1))\n    (define (get_extension file_name)\n      (vector-ref (split_file_name\
    \ file_name) 2))\n    (cond [(is_valid_name (get_name file_name))\n          \
    \ (is_valid_extension (get_extension file_name))]\n          [else #f]))\n  (cond\
    \ [(is_valid_file_name file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (define\
    \ (count-digits file_name)\n    (define (count-digits-iter file_name count)\n\
    \      (cond\n        [(empty? file_name) count]\n        [(char-numeric? (first\
    \ file_name))\n         (count-digits-iter (rest file_name) (+ count 1))]\n  \
    \      [else (count-digits-iter (rest file_name) count)]))\n    (count-digits-iter\
    \ file_name 0))\n  (define (count-dots file_name)\n    (define (count-dots-iter\
    \ file_name count)\n      (cond\n        [(empty? file_name) count]\n        [(char=?\
    \ (first file_name) #\\.)\n         (count-dots-iter (rest file_name) (+ count\
    \ 1))]\n        [else (count-dots-iter (rest file_name) count)]))\n    (count-dots-iter\
    \ file_name 0))\n  (define (valid-extension? file_name)\n    (define (valid-extension-iter\
    \ file_name)\n      (cond\n        [(empty? file_name) #f]\n        [(char=? (first\
    \ file_name) #\\.)\n         (cond\n           [(string=? (rest file_name) \"\
    txt\") #t]\n           [(string=? (rest file_name) \"exe\") #t]\n           [(string=?\
    \ (rest file_name) \"dll\") #t]\n           [else #f])]\n        [else (valid-extension-iter\
    \ (rest file_name))]))\n    (valid-extension-iter file_name))\n  (define (valid-prefix?\
    \ file_name)\n    (define (valid-prefix-iter file_name)\n      (cond\n       \
    \ [(empty? file_name) #f]\n        [(char=? (first file_name) #\\.) #t]\n    \
    \    [(char-alphabetic? (first file_name))\n         (valid-prefix-iter (rest\
    \ file_name))]\n        [else #f]))\n    (valid-prefix-iter file_name))\n  (cond\n\
    \    [(or (> (count-digits file_name) 3", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char-numeric? (first str))\
    \ (+ 1 (count-digits (rest str)))]\n      [else (count-digits (rest str))]))\n\
    \  (define (count-dots str)\n    (cond\n      [(empty? str) 0]\n      [(char=?\
    \ (first str) #\\.) (+ 1 (count-dots (rest str)))]\n      [else (count-dots (rest\
    \ str))]))\n  (define (is-valid-extension str)\n    (cond\n      [(string=? str\
    \ \"txt\") #t]\n      [(string=? str \"exe\") #t]\n      [(string=? str \"dll\"\
    ) #t]\n      [else #f]))\n  (define (is-valid-prefix str)\n    (and (not (empty?\
    \ str))\n         (char-alphabetic? (first str))))\n  (define (split-file-name\
    \ str)\n    (regexp-match #rx\"^(.*)\\.(.*)$\" str))\n  (define (get-prefix str)\n\
    \    (cond\n      [(empty? str) \"\"]\n      [(char=? (first str) #\\.) (get-prefix\
    \ (rest str))]\n      [else (string-append (string (first str)) (get-prefix (rest\
    \ str)))]))\n  (define (get-extension str)\n    (cond\n      [(empty? str) \"\"\
    ]\n      [(char=? (first str) #\\.) (string (first (rest str))) (get-extension\
    \ (rest (rest str)))]\n      [else (get-extension (rest str))]))\n  (cond\n  \
    \  [(empty? file_name) \"No\"]\n    [(not (is-valid-extension (get-extension file_name)))\
    \ \"No\"]\n    [(not (is-valid-prefix (get-prefix file_name))) \"No\"]\n    [(>\
    \ (count-digits file_name) 3) \"No\"]\n    [(> (count-dots file_name) 1) \"No\"\
    ]\n    [else \"Yes\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (or (string=?\
    \ extension \"txt\")\n          (string=? extension \"exe\")\n          (string=?\
    \ extension \"dll\")))\n    (define (is_valid_name? name)\n      (and (not (string-empty?\
    \ name))\n           (char-alphabetic? (string-ref name 0))))\n    (define (is_valid_number?\
    \ number)\n      (and (not (string-empty? number))\n           (<= (string-length\
    \ number) 3)\n           (string-for-each char-numeric? number)))\n    (define\
    \ (is_valid_file_name_without_extension? file_name)\n      (let ((name (substring\
    \ file_name 0 (string-index file_name #\\.)))\n            (number (substring\
    \ file_name (string-index file_name #\\.))))\n        (and (is_valid_name? name)\n\
    \             (is_valid_number? number))))\n    (let ((extension (substring file_name\
    \ (string-index file_name #\\.))))\n      (and (is_valid_file_name_without_extension?\
    \ file_name)\n           (is_valid_extension? extension))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (is_valid_file_name? file_name)\n    (define (is_valid_ext?\
    \ ext)\n      (or (string=? ext \"txt\") (string=? ext \"exe\") (string=? ext\
    \ \"dll\")))\n    (define (is_valid_name? name)\n      (and (not (string-empty?\
    \ name))\n           (regexp-match #rx\"[a-zA-Z]\" name)\n           (not (regexp-match\
    \ #rx\"[0-9]{4,}\" name))))\n    (define (is_valid_file_name_format? file_name)\n\
    \      (define (is_valid_dot_count? file_name)\n        (string-count file_name\
    \ #\\.))\n    (and (= (is_valid_dot_count? file_name) 1)\n         (is_valid_name?\
    \ (substring file_name 0 (string-index file_name #\\.)))\n         (is_valid_ext?\
    \ (substring file_name (+ 1 (string-index file_name #\\.))))))\n  (if (is_valid_file_name_format?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_file_name\
    \ file_name)\n    (define (is_valid_extension extension)\n      (or (= extension\
    \ \"txt\") (= extension \"exe\") (= extension \"dll\")))\n    (define (is_valid_prefix\
    \ prefix)\n      (and (not (empty? prefix))\n           (regexp-match? #rx\"[a-zA-Z]\"\
    \ prefix)))\n    (define (is_valid_digits digits)\n      (and (not (empty? digits))\n\
    \           (<= (string-length digits) 3)))\n    (define (is_valid_file_name_parts\
    \ parts)\n      (and (is_valid_prefix (first parts))\n           (is_valid_extension\
    \ (second parts))\n           (is_valid_digits (first (regexp-match #rx\"[0-9]+\"\
    \ (first parts))))))\n    (is_valid_file_name_parts (regexp-split #rx\"\\.\" file_name)))\n\
    \  (if (is_valid_file_name file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (define (check-extension file_name)\n    (cond\n \
    \     [(string=? (substring file_name (add1 (string-index file_name #\\.))) \"\
    txt\") #t]\n      [(string=? (substring file_name (add1 (string-index file_name\
    \ #\\.))) \"exe\") #t]\n      [(string=? (substring file_name (add1 (string-index\
    \ file_name #\\.))) \"dll\") #t]\n      [else #f]))\n  (define (check-digits file_name)\n\
    \    (let ([count 0])\n      (for ([c (in-string file_name)])\n        (cond\n\
    \          [(char-numeric? c) (set! count (add1 count))]))\n      (cond\n    \
    \    [(> count 3) #f]\n        [else #t])))\n  (define (check-dot file_name)\n\
    \    (cond\n      [(string-index file_name #\\.) #t]\n      [else #f]))\n  (define\
    \ (check-start file_name)\n    (cond\n      [(char-alphabetic? (string-ref file_name\
    \ 0)) #t]\n      [else #f]))\n  (cond\n    [(and (check-extension file_name) (check-digits\
    \ file_name) (check-dot file_name) (check-start file_name)) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_file_name\
    \ file_name)\n    (define (is_valid_extension file_name)\n      (cond\n      \
    \  [(string=? (substring file_name (string-length file_name) (- (string-length\
    \ file_name) 3)) \"txt\") #t]\n        [(string=? (substring file_name (string-length\
    \ file_name) (- (string-length file_name) 3)) \"exe\") #t]\n        [(string=?\
    \ (substring file_name (string-length file_name) (- (string-length file_name)\
    \ 3)) \"dll\") #t]\n        [else #f]))\n    (define (is_valid_name file_name)\n\
    \      (cond\n        [(string=? (substring file_name 0 1) \"a\") #t]\n      \
    \  [(string=? (substring file_name 0 1) \"b\") #t]\n        [(string=? (substring\
    \ file_name 0 1) \"c\") #t]\n        [(string=? (substring file_name 0 1) \"d\"\
    ) #t]\n        [(string=? (substring file_name 0 1) \"e\") #t]\n        [(string=?\
    \ (substring file_name 0 1) \"f\") #t]\n        [(string=? (substring file_name\
    \ 0 1) \"g\") #t]\n        [(string=? (substring file_name 0 1) \"h\") #t]\n \
    \       [(string=? (substring file_name 0 1) \"i\") #t]\n        [(string=? (substring\
    \ file_name 0 1) \"j\") #t]\n        [(string=? (substring file_name 0 1) \"k\"\
    ) #t]\n        [(string=? (substring file_name 0 1) \"l\") #t]\n        [(string=?\
    \ (substring file_name 0 1) \"m\") #t]\n        [(string=? (substring file_name\
    \ 0 1) \"n\") #t]\n        [(string=? (substring file_name 0 1) \"o\") #t]\n \
    \       [(string=? (substring file_name 0 1) \"p\") #t]\n        [(string", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}[.](txt|exe|dll)$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (cond ((equal? ext \"txt\") #t)\n          ((equal? ext \"exe\") #t)\n\
    \          ((equal? ext \"dll\") #t)\n          (else #f)))\n  (define (is_valid_name?\
    \ name)\n    (cond ((empty? name) #f)\n          ((not (char-alphabetic? (string-ref\
    \ name 0))) #f)\n          ((not (string-contains name #\\.)) #f)\n          ((not\
    \ (is_valid_extension? (substring name (+ 1 (string-index name #\\.))))) #f)\n\
    \          (else #t)))\n  (define (is_valid_number? number)\n    (cond ((empty?\
    \ number) #t)\n          ((not (char-numeric? (string-ref number 0))) #t)\n  \
    \        (else (is_valid_number? (substring number 1)))))\n  (cond ((is_valid_name?\
    \ file_name)\n         (is_valid_number? (substring file_name 0 (string-index\
    \ file_name #\\.))))\n        (else #f)))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (cond\n     \
    \   [(string=? extension \"txt\") #t]\n        [(string=? extension \"exe\") #t]\n\
    \        [(string=? extension \"dll\") #t]\n        [else #f]))\n    (define (is_valid_name?\
    \ name)\n      (and (not (empty? name))\n           (char-alphabetic? (string-ref\
    \ name 0))\n           (not (> (count-digits name) 3))))\n    (define (count-digits\
    \ str)\n      (define (count-digits-helper str count)\n        (cond\n       \
    \   [(empty? str) count]\n          [(char-numeric? (string-ref str 0)) (count-digits-helper\
    \ (substring str 1) (+ count 1))]\n          [else (count-digits-helper (substring\
    \ str 1) count)]))\n      (count-digits-helper str 0))\n    (define (split-file-name\
    \ file_name)\n      (define (split-file-name-helper file_name name extension)\n\
    \        (cond\n          [(empty? file_name) (values name extension)]\n     \
    \     [(char=? (string-ref file_name 0) #\\.) (split-file-name-helper (substring\
    \ file_name 1) name (string-append extension (string (string-ref file_name 0))))]\n\
    \          [else (split-file-name-helper (substring file_name 1) (string-append\
    \ name (string (string-ref file_name 0))) extension)]))\n      (split-file-name-helper\
    \ file_name \"\" \"\"))\n    (define (is_valid_file_name? file_name)\n      (define\
    \ (is_valid_extension? extension)\n        (cond\n          [(string=? extension\
    \ \"txt\") #t]\n          [(string=? extension \"exe\") #t]\n          [(string=?\
    \ extension \"dll\") #t]\n          [else #f]))\n      (define (is_valid_name?\
    \ name)\n        (and (not (empty? name))\n             (", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (regexp-match? #rx\"[a-zA-Z]\"\
    \ name)\n         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([parts (string-split file_name #\\.)])\n      (and (=\
    \ (length parts) 2)\n           (is_valid_name? (first parts))\n           (is_valid_extension?\
    \ (second parts)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n \
    \     \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_name\
    \ name)\n    (cond ((string=? name \"\") #t)\n          ((char-alphabetic? (string-ref\
    \ name 0)) (check_name (substring name 1)))\n          (else #f)))\n  (define\
    \ (check_extension extension)\n    (cond ((string=? extension \"txt\") #t)\n \
    \         ((string=? extension \"exe\") #t)\n          ((string=? extension \"\
    dll\") #t)\n          (else #f)))\n  (define (check_digits digits)\n    (cond\
    \ ((string=? digits \"\") #t)\n          ((char-numeric? (string-ref digits 0))\
    \ (check_digits (substring digits 1)))\n          (else #f)))\n  (define (check_dot\
    \ dot)\n    (cond ((string=? dot \"\") #f)\n          ((string=? dot \".\") #t)\n\
    \          (else (check_dot (substring dot 1)))))\n  (define (check_file_name\
    \ file_name)\n    (let ((dot_index (string-index file_name \".\")))\n      (cond\
    \ ((not dot_index) #f)\n            ((not (check_name (substring file_name 0 dot_index)))\
    \ #f)\n            ((not (check_extension (substring file_name (+ dot_index 1))))\
    \ #f)\n            ((not (check_digits (substring file_name 0 dot_index))) #f)\n\
    \            (else #t))))\n  (cond ((check_file_name file_name) \"Yes\")\n   \
    \     (else \"No\")))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check-extension\
    \ file_name)\n    (cond\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"txt\") \"Yes\"]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"exe\") \"Yes\"]\n      [(string=? (substring file_name (- (string-length\
    \ file_name) 3)) \"dll\") \"Yes\"]\n      [else \"No\"]))\n  (define (check-name\
    \ file_name)\n    (cond\n      [(string-contains file_name #\\.) \"Yes\"]\n  \
    \    [else \"No\"]))\n  (define (check-digits file_name)\n    (cond\n      [(>\
    \ (length (regexp-match #rx\"[0-9]\" file_name)) 3) \"No\"]\n      [else \"Yes\"\
    ]))\n  (define (check-first-letter file_name)\n    (cond\n      [(string-contains\
    \ file_name #\\.)\n       (cond\n         [(string-contains (substring file_name\
    \ 0 (string-index file_name #\\.)) #\\a) \"Yes\"]\n         [(string-contains\
    \ (substring file_name 0 (string-index file_name #\\.)) #\\b) \"Yes\"]\n     \
    \    [(string-contains (substring file_name 0 (string-index file_name #\\.)) #\\\
    c) \"Yes\"]\n         [(string-contains (substring file_name 0 (string-index file_name\
    \ #\\.)) #\\d) \"Yes\"]\n         [(string-contains (substring file_name 0 (string-index\
    \ file_name #\\.)) #\\e) \"Yes\"]\n         [(string-contains (substring file_name\
    \ 0 (string-index file_name #\\.)) #\\f) \"Yes\"]\n         [(string-contains\
    \ (substring file_name 0 (string-index file_name #\\.)) #\\g) \"Yes\"]\n     \
    \    [(string-contains (substring file_name 0 (string-index file_name #\\.)) #\\\
    h) \"Yes\"]\n         [(string-contains (substring file_name 0 (string", "  (define\
    \ (check_file_name_helper file_name)\n    (cond ((string=? file_name \"\") #t)\n\
    \          ((string-contains file_name #\\.) #f)\n          ((string-contains\
    \ file_name #\\0) #f)\n          ((string-contains file_name #\\1) #f)\n     \
    \     ((string-contains file_name #\\2) #f)\n          ((string-contains file_name\
    \ #\\3) #f)\n          ((string-contains file_name #\\4) #f)\n          ((string-contains\
    \ file_name #\\5) #f)\n          ((string-contains file_name #\\6) #f)\n     \
    \     ((string-contains file_name #\\7) #f)\n          ((string-contains file_name\
    \ #\\8) #f)\n          ((string-contains file_name #\\9) #f)\n          (else\
    \ (check_file_name_helper (substring file_name 1)))))\n  (cond ((check_file_name_helper\
    \ file_name) \"Yes\")\n        (else \"No\")))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (check-digits file_name)\n    (define (check-digit file_name)\n\
    \      (if (empty? file_name)\n          #f\n          (if (char-numeric? (first\
    \ file_name))\n              (check-digit (rest file_name))\n              #t)))\n\
    \    (if (check-digit file_name)\n        #t\n        (if (empty? file_name)\n\
    \            #f\n            (if (char-numeric? (first file_name))\n         \
    \       (check-digits (rest file_name))\n                #t))))\n  (define (check-dot\
    \ file_name)\n    (if (empty? file_name)\n        #f\n        (if (char=? (first\
    \ file_name) #\\.)\n            #t\n            (check-dot (rest file_name)))))\n\
    \  (define (check-substring-before-dot file_name)\n    (if (empty? file_name)\n\
    \        #f\n        (if (char-alphabetic? (first file_name))\n            #t\n\
    \            (check-substring-before-dot (rest file_name)))))\n  (define (check-substring-after-dot\
    \ file_name)\n    (if (empty? file_name)\n        #f\n        (if (char=? (first\
    \ file_name) #\\.)\n            (if (string=? (substring file_name 1 4) \"txt\"\
    )\n                #t\n                (if (string=? (substring file_name 1 4)\
    \ \"exe\")\n                    #t\n                    (if (string=? (substring\
    \ file_name 1 4) \"dll\")\n                        #t\n                      \
    \  #f)))\n            (check-substring-after-dot (rest file_name)))))\n  (if (check-digits\
    \ file_name)\n      (if (check-dot file_name)\n          (if (check-substring-before-dot\
    \ file_name)\n              (if (check-substring-after-dot file_name)\n      \
    \            \"Yes\"\n                  \"No\")\n              \"No\")\n     \
    \     \"No\")\n      \"No\"))\n", "  (define (is_valid_extension? ext)\n    (cond\n\
    \      [(string=? ext \"txt\") #t]\n      [(string=? ext \"exe\") #t]\n      [(string=?\
    \ ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (cond\n\
    \      [(regexp-match #rx\"^[a-zA-Z]+$\" name) #t]\n      [else #f]))\n  (define\
    \ (is_valid_file_name? file_name)\n    (let* ([parts (string-split file_name #\\\
    .)]\n           [name (first parts)]\n           [ext (second parts)])\n     \
    \ (cond\n        [(and (is_valid_name? name) (is_valid_extension? ext)) #t]\n\
    \        [else #f])))\n  (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (define (is_valid_file_name? file_name)\n    (define\
    \ (has_valid_extension? file_name)\n      (define (get_extension file_name)\n\
    \        (regexp-match #rx\"\\.([a-zA-Z]+)$\" file_name))\n      (define (is_valid_extension?\
    \ extension)\n        (member extension '(\"txt\" \"exe\" \"dll\")))\n      (is_valid_extension?\
    \ (get-extension file_name)))\n    (define (has_valid_name? file_name)\n     \
    \ (define (get_name file_name)\n        (regexp-match #rx\"^([a-zA-Z]+)\" file_name))\n\
    \      (define (is_valid_name? name)\n        (not (empty? name)))\n      (is_valid_name?\
    \ (get_name file_name)))\n    (define (has_valid_number_of_digits? file_name)\n\
    \      (define (get_number_of_digits file_name)\n        (regexp-match #rx\"[0-9]\"\
    \ file_name))\n      (define (is_valid_number_of_digits? number_of_digits)\n \
    \       (<= (length number_of_digits) 3))\n      (is_valid_number_of_digits? (get_number_of_digits\
    \ file_name)))\n    (and (has_valid_extension? file_name)\n         (has_valid_name?\
    \ file_name)\n         (has_valid_number_of_digits? file_name)))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (check_digits file_name)\n\
    \    (cond [(empty? file_name) 0]\n          [(char-numeric? (first file_name))\
    \ (+ 1 (check_digits (rest file_name)))]\n          [else (check_digits (rest\
    \ file_name))]))\n  (define (check_dot file_name)\n    (cond [(empty? file_name)\
    \ #f]\n          [(char=? (first file_name) #\\.) #t]\n          [else (check_dot\
    \ (rest file_name))]))\n  (define (check_substring_before_dot file_name)\n   \
    \ (cond [(empty? file_name) #f]\n          [(char=? (first file_name) #\\.) #t]\n\
    \          [(char-alphabetic? (first file_name)) (check_substring_before_dot (rest\
    \ file_name))]\n          [else #f]))\n  (define (check_substring_after_dot file_name)\n\
    \    (cond [(empty? file_name) #f]\n          [(char=? (first file_name) #\\.)\
    \ (check_substring_after_dot (rest file_name))]\n          [(string=? (rest file_name)\
    \ \"txt\") #t]\n          [(string=? (rest file_name) \"exe\") #t]\n         \
    \ [(string=? (rest file_name) \"dll\") #t]\n          [else #f]))\n  (cond [(<\
    \ (check_digits file_name) 4) #t]\n        [(not (check_dot file_name)) #f]\n\
    \        [(not (check_substring_before_dot file_name)) #f]\n        [(not (check_substring_after_dot\
    \ file_name)) #f]\n        [else #t]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_substring\
    \ s)\n    (if (empty? s)\n        #f\n        (let ([c (first s)])\n         \
    \ (if (or (char=? c #\\.)\n                  (char=? c #\\0)\n               \
    \   (char=? c #\\1)\n                  (char=? c #\\2)\n                  (char=?\
    \ c #\\3)\n                  (char=? c #\\4)\n                  (char=? c #\\\
    5)\n                  (char=? c #\\6)\n                  (char=? c #\\7)\n   \
    \               (char=? c #\\8)\n                  (char=? c #\\9))\n        \
    \      #f\n              (check_substring (rest s))))))\n  (define (check_extension\
    \ s)\n    (if (empty? s)\n        #f\n        (if (or (string=? s \"txt\")\n \
    \               (string=? s \"exe\")\n                (string=? s \"dll\"))\n\
    \            #t\n            #f)))\n  (define (count_digits s)\n    (if (empty?\
    \ s)\n        0\n        (let ([c (first s)])\n          (if (or (char=? c #\\\
    0)\n                  (char=? c #\\1)\n                  (char=? c #\\2)\n   \
    \               (char=? c #\\3)\n                  (char=? c #\\4)\n         \
    \         (char=? c #\\5)\n                  (char=? c #\\6)\n               \
    \   (char=? c #\\7)\n                  (char=? c #\\8)\n                  (char=?\
    \ c #\\9))\n              (+ 1 (count_digits (rest s)))\n              (count_digits\
    \ (rest s))))))\n  (define (count_dots s)\n    (if (empty? s)\n        0\n   \
    \     (let ([c (first s)])\n          (if (char=? c #\\.)\n              (+ 1\
    \ (count_dots (rest s)))\n              (count_dots (rest s))))))\n  (define (split_file_name\
    \ s)\n    (if (empty? s)\n        (values \"\"", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits\
    \ str)\n    (if (string-empty? str)\n        0\n        (+ (if (char-numeric?\
    \ (string-ref str 0)) 1 0)\n           (count-digits (substring str 1)))))\n \
    \ (define (count-dots str)\n    (if (string-empty? str)\n        0\n        (+\
    \ (if (char=? (string-ref str 0) #\\.) 1 0)\n           (count-dots (substring\
    \ str 1)))))\n  (define (is-valid-substr str)\n    (and (not (string-empty? str))\n\
    \         (char-alphabetic? (string-ref str 0))\n         (or (string=? str \"\
    txt\")\n             (string=? str \"exe\")\n             (string=? str \"dll\"\
    ))))\n  (if (and (= (count-digits file_name) 3)\n           (= (count-dots file_name)\
    \ 1)\n           (is-valid-substr (substring file_name (string-index file_name\
    \ #\\.))))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"[a-zA-Z]\" name)\n         (not\
    \ (regexp-match? #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n\
    \    (define (split_file_name file_name)\n      (regexp-split #rx\"\\.\" file_name))\n\
    \    (define (split_file_name_to_name_and_extension file_name)\n      (match (split_file_name\
    \ file_name)\n        [(list name extension) (values name extension)]))\n    (define\
    \ (is_valid_file_name? file_name)\n      (match (split_file_name_to_name_and_extension\
    \ file_name)\n        [(values name extension)\n         (and (is_valid_name?\
    \ name)\n              (is_valid_extension? extension))]))\n    (is_valid_file_name?\
    \ file_name))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"\
    No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][^.]{0,3}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][^.]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][^.]{0,3}\\\\.dll$\" file_name) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (is_valid_file_name? file_name)\n    (define (is_valid_extension?\
    \ extension)\n      (member extension '(\"txt\" \"exe\" \"dll\")))\n    (define\
    \ (is_valid_name? name)\n      (and (not (empty? name))\n           (regexp-match?\
    \ #rx\"[a-zA-Z]\" name)\n           (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n\
    \    (define (is_valid_file_name_format? file_name)\n      (define (split_file_name\
    \ file_name)\n        (regexp-split #rx\"\\.\" file_name))\n      (define (split_file_name_result\
    \ file_name)\n        (split_file_name file_name))\n      (define (is_valid_split_file_name?\
    \ split_file_name)\n        (and (= (length split_file_name) 2)\n            \
    \ (is_valid_name? (first split_file_name))\n             (is_valid_extension?\
    \ (second split_file_name))))\n      (is_valid_split_file_name? (split_file_name_result\
    \ file_name)))\n    (and (is_valid_file_name_format? file_name)\n         (is_valid_name?\
    \ (first (split_file_name file_name)))\n         (is_valid_extension? (second\
    \ (split_file_name file_name)))))\n  (if (is_valid_file_name? file_name)\n   \
    \   \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (is_valid_substring str)\n    (and (not (empty? str))\n         (or (regexp-match\
    \ #rx\"^[a-zA-Z]+$\" str)\n             (regexp-match #rx\"^[a-zA-Z]+[0-9]+$\"\
    \ str))))\n  (define (is_valid_extension str)\n    (or (equal? str \"txt\")\n\
    \        (equal? str \"exe\")\n        (equal? str \"dll\")))\n  (define (count-digits\
    \ str)\n    (cond [(empty? str) 0]\n          [(char-numeric? (car str)) (+ 1\
    \ (count-digits (cdr str)))]\n          [else (count-digits (cdr str))]))\n  (define\
    \ (count-dots str)\n    (cond [(empty? str) 0]\n          [(char=? (car str) #\\\
    .) (+ 1 (count-dots (cdr str)))]\n          [else (count-dots (cdr str))]))\n\
    \  (define (split-by-dot str)\n    (cond [(empty? str) '()]\n          [(char=?\
    \ (car str) #\\.) (list (list->string (reverse (cdr str)))\n                 \
    \                       (list->string (reverse (cdr (reverse str)))))]\n     \
    \     [else (split-by-dot (cdr str))]))\n  (define (is_valid_file_name str)\n\
    \    (and (is_valid_substring (car (split-by-dot str)))\n         (is_valid_extension\
    \ (cadr (split-by-dot str)))\n         (equal? (count-digits str) 3)\n       \
    \  (equal? (count-dots str) 1)))\n  (cond [(is_valid_file_name file_name) \"Yes\"\
    ]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]\\\\\
    w{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]\\\\w{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]\\\\w{0,2}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n\
    \    (cond\n      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (is-valid-extension str)\n    (cond\n      [(string=? str \"txt\") #t]\n   \
    \   [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (get-extension str)\n    (define (get-extension-helper str)\n\
    \      (cond\n        [(empty? str) \"\"]\n        [(char=? (first str) #\\.)\
    \ (string (first str))]\n        [else (string-append (string (first str)) (get-extension-helper\
    \ (rest str)))]))\n    (get-extension-helper (string-reverse str)))\n  (define\
    \ (get-name str)\n    (define (get-name-helper str)\n      (cond\n        [(empty?\
    \ str) \"\"]\n        [(char=? (first str) #\\.) (string (first str))]\n     \
    \   [else (string-append (string (first str)) (get-name-helper (rest str)))]))\n\
    \    (get-name-helper (string-reverse str)))\n  (cond\n    [(or (char-numeric?\
    \ (string-ref file_name 0))\n         (> (count-digits file_name) 3)\n       \
    \  (/= (count-dots file_name) 1)\n         (not (is-valid-extension (get-extension\
    \ file_name)))\n         (empty? (get-name file_name))) \"No\"]\n    [else \"\
    Yes\"]))\n", "  (define (is_valid_extension? extension)\n    (or (string=? extension\
    \ \"txt\")\n        (string=? extension \"exe\")\n        (string=? extension\
    \ \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (regexp-match? #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (count-digits file_name)\n      (define (count-digits-iter\
    \ file_name count)\n        (cond ((empty? file_name) count)\n              ((char-numeric?\
    \ (first file_name))\n               (count-digits-iter (rest file_name) (+ count\
    \ 1)))\n              (else (count-digits-iter (rest file_name) count))))\n  \
    \  (define (count-dots file_name)\n      (define (count-dots-iter file_name count)\n\
    \        (cond ((empty? file_name) count)\n              ((char=? (first file_name)\
    \ #\\.)\n               (count-dots-iter (rest file_name) (+ count 1)))\n    \
    \          (else (count-dots-iter (rest file_name) count))))\n    (and (<= (count-digits\
    \ file_name) 3)\n         (= (count-dots file_name) 1)\n         (is_valid_name?\
    \ (substring file_name 0 (string-index file_name #\\.)))\n         (is_valid_extension?\
    \ (substring file_name (+ (string-index file_name #\\.) 1)))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_file_name\
    \ file_name)\n    (define (is_valid_extension file_name)\n      (cond ((string=?\
    \ (substring file_name (string-index file_name #\\.)) \".txt\") #t)\n        \
    \    ((string=? (substring file_name (string-index file_name #\\.)) \".exe\")\
    \ #t)\n            ((string=? (substring file_name (string-index file_name #\\\
    .)) \".dll\") #t)\n            (else #f)))\n    (define (is_valid_name file_name)\n\
    \      (cond ((string-empty? (substring file_name 0 (string-index file_name #\\\
    .))) #f)\n            ((char-alphabetic? (string-ref file_name 0)) #t)\n     \
    \       (else #f)))\n    (define (is_valid_digits file_name)\n      (define (count_digits\
    \ file_name)\n        (cond ((string-empty? file_name) 0)\n              ((char-numeric?\
    \ (string-ref file_name 0)) (+ 1 (count_digits (substring file_name 1))))\n  \
    \            (else (count_digits (substring file_name 1)))))\n      (cond ((=\
    \ (count_digits file_name) 3) #t)\n            (else #f)))\n    (cond ((and (is_valid_name\
    \ file_name) (is_valid_extension file_name) (is_valid_digits file_name)) #t)\n\
    \          (else #f)))\n  (cond ((is_valid_file_name file_name) \"Yes\")\n   \
    \     (else \"No\")))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", " \
    \ (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name_helper?\
    \ file_name)\n      (define (is_valid_file_name_helper_helper? file_name)\n  \
    \      (define (is_valid_file_name_helper_helper_helper? file_name)\n        \
    \  (define (is_valid_file_name_helper_helper_helper_helper? file_name)\n     \
    \       (define (is_valid_file_name_helper_helper_helper_helper_helper? file_name)\n\
    \              (define (is_valid_file_name_helper_helper_helper_helper_helper_helper?\
    \ file_name)\n                (define (is_valid_file_name_helper_helper_helper_helper_helper_helper_helper?\
    \ file_name)\n                  (define (is_valid_file_name_helper_helper_helper_helper_helper_helper_helper_helper?\
    \ file_name)\n                    (define (is_valid_file_name_helper_helper_helper_helper_helper_helper_helper_helper_helper?\
    \ file_name)\n                      (define (is_valid_file_name_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper?\
    \ file_name)\n                        (define (is_valid_file_name_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper?\
    \ file_name)\n                          (define (is_valid_file_name_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper?\
    \ file_name)\n                            (define (is_valid_file_name_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper?\
    \ file_name", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (has_more_than_three_digits\
    \ file_name)\n    (if (empty? file_name)\n        #f\n        (if (and (char-numeric?\
    \ (first file_name))\n                 (has_more_than_three_digits (rest file_name)))\n\
    \            #t\n            (if (char-numeric? (first file_name))\n         \
    \       (has_more_than_three_digits (rest file_name))\n                #f))))\n\
    \  (define (has_exactly_one_dot file_name)\n    (if (empty? file_name)\n     \
    \   #f\n        (if (char=? (first file_name) #\\.)\n            (if (char=? (first\
    \ (rest file_name)) #\\.)\n                #f\n                #t)\n         \
    \   (has_exactly_one_dot (rest file_name)))))\n  (define (substring_before_dot_is_valid\
    \ file_name)\n    (if (empty? file_name)\n        #f\n        (if (char=? (first\
    \ file_name) #\\.)\n            #t\n            (if (char-numeric? (first file_name))\n\
    \                #f\n                (substring_before_dot_is_valid (rest file_name))))))\n\
    \  (define (substring_after_dot_is_valid file_name)\n    (if (empty? file_name)\n\
    \        #f\n        (if (char=? (first file_name) #\\.)\n            (if (or\
    \ (string=? (substring file_name 1 4) \"txt\")\n                    (string=?\
    \ (substring file_name 1 4) \"exe\")\n                    (string=? (substring\
    \ file_name 1 4) \"dll\"))\n                #t\n                #f)\n        \
    \    (substring_after_dot_is_valid (rest file_name)))))\n  (if (and (not (has_more_than_three_digits\
    \ file_name))\n           (has_exactly_one_dot file_name)\n           (substring_before_dot_is_valid\
    \ file_name)\n           (substring_after_dot_is_valid file", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (check_digits file_name)\n    (cond ((= (string-length\
    \ file_name) 0) #t)\n          ((char-numeric? (string-ref file_name 0))\n   \
    \        (if (<= (string-length file_name) 3)\n               (check_digits (substring\
    \ file_name 1))\n               #f))\n          (else #t)))\n  (define (check_dot\
    \ file_name)\n    (cond ((= (string-length file_name) 0) #f)\n          ((char=?\
    \ (string-ref file_name 0) #\\.)\n           (if (= (string-length file_name)\
    \ 1)\n               #t\n               (check_dot (substring file_name 1))))\n\
    \          (else (check_dot (substring file_name 1)))))\n  (define (check_before_dot\
    \ file_name)\n    (cond ((= (string-length file_name) 0) #f)\n          ((char-alphabetic?\
    \ (string-ref file_name 0))\n           (if (= (string-length file_name) 1)\n\
    \               #t\n               (check_before_dot (substring file_name 1))))\n\
    \          (else #f)))\n  (define (check_after_dot file_name)\n    (cond ((= (string-length\
    \ file_name) 0) #f)\n          ((char=? (string-ref file_name 0) #\\.)\n     \
    \      (if (member (substring file_name 1) '(\"txt\" \"exe\" \"dll\"))\n     \
    \          #t\n               #f))\n          (else (check_after_dot (substring\
    \ file_name 1)))))\n  (cond ((and (check_digits file_name)\n              (check_dot\
    \ file_name)\n              (check_before_dot file_name)\n              (check_after_dot\
    \ file_name))\n         \"Yes\")\n        (else \"No\")))\n", "  (define (is_valid_extension?\
    \ extension)\n    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (char-alphabetic? (string-ref\
    \ name 0))\n         (not (> (count (lambda (c) (char-numeric? c)) name) 3))))\n\
    \  (define (is_valid_file_name? file_name)\n    (let ((parts (string-split file_name\
    \ \"\\\\.\")))\n      (and (= (length parts) 2)\n           (is_valid_name? (first\
    \ parts))\n           (is_valid_extension? (second parts)))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(and (string-contains\
    \ file_name #\\.)\n          (string-contains file_name #\\.)\n          (string-contains\
    \ file_name #\\.)\n          (string-contains file_name #\\.))\n     \"No\"]\n\
    \    [(and (string-contains file_name #\\.)\n          (string-contains file_name\
    \ #\\.)\n          (string-contains file_name #\\.))\n     \"No\"]\n    [(and\
    \ (string-contains file_name #\\.)\n          (string-contains file_name #\\.))\n\
    \     \"No\"]\n    [(string-contains file_name #\\.)\n     \"No\"]\n    [else\n\
    \     \"Yes\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (is_valid_extension ext)\n    (cond [(string=? ext \"txt\"\
    ) #t]\n          [(string=? ext \"exe\") #t]\n          [(string=? ext \"dll\"\
    ) #t]\n          [else #f]))\n  (define (is_valid_name name)\n    (define (is_valid_char\
    \ c)\n      (or (char-alphabetic? c) (char-numeric? c)))\n    (define (is_valid_name_helper\
    \ name)\n      (if (empty? name)\n          #t\n          (and (is_valid_char\
    \ (first name))\n               (is_valid_name_helper (rest name)))))\n    (and\
    \ (is_valid_name_helper name)\n         (not (string-contains name #\\.))))\n\
    \  (define (is_valid_file_name file_name)\n    (define (is_valid_file_name_helper\
    \ file_name)\n      (if (empty? file_name)\n          #t\n          (and (is_valid_char\
    \ (first file_name))\n               (is_valid_file_name_helper (rest file_name)))))\n\
    \    (and (is_valid_file_name_helper file_name)\n         (string-contains file_name\
    \ #\\.)))\n  (define (get_extension file_name)\n    (string-split file_name #\\\
    .)\n    (second (string-split file_name #\\.)))\n  (define (get_name file_name)\n\
    \    (string-split file_name #\\.)\n    (first (string-split file_name #\\.)))\n\
    \  (cond [(is_valid_file_name file_name)\n         (cond [(is_valid_name (get_name\
    \ file_name))\n                (cond [(is_valid_extension (get_extension file_name))\n\
    \                       \"Yes\"]\n                      [else \"No\"])]\n    \
    \           [else \"No\"])]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_file_name? file_name)\n\
    \    (define (is_valid_file_name_helper? file_name)\n      (cond\n        [(empty?\
    \ file_name) #t]\n        [(char-alphabetic? (first file_name)) (is_valid_file_name_helper?\
    \ (rest file_name))]\n        [(char-numeric? (first file_name)) (is_valid_file_name_helper?\
    \ (rest file_name))]\n        [(char=? (first file_name) #\\.) (is_valid_file_name_helper?\
    \ (rest file_name))]\n        [else #f]))\n    (define (is_valid_file_name_helper2?\
    \ file_name)\n      (cond\n        [(empty? file_name) #t]\n        [(char-alphabetic?\
    \ (first file_name)) (is_valid_file_name_helper2? (rest file_name))]\n       \
    \ [(char-numeric? (first file_name)) (is_valid_file_name_helper2? (rest file_name))]\n\
    \        [else #f]))\n    (define (is_valid_file_name_helper3? file_name)\n  \
    \    (cond\n        [(empty? file_name) #t]\n        [(char-alphabetic? (first\
    \ file_name)) (is_valid_file_name_helper3? (rest file_name))]\n        [(char-numeric?\
    \ (first file_name)) (is_valid_file_name_helper3? (rest file_name))]\n       \
    \ [else #f]))\n    (define (is_valid_file_name_helper4? file_name)\n      (cond\n\
    \        [(empty? file_name) #t]\n        [(char-alphabetic? (first file_name))\
    \ (is_valid_file_name_helper4? (rest file_name))]\n        [(char-numeric? (first\
    \ file_name)) (is_valid_file_name_helper4? (rest file_name))]\n        [else #f]))\n\
    \    (define (is_valid_file_name", "  (define (count-digits str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (is-valid-extension? str)\n    (cond\n      [(string=? str \"txt\") #t]\n  \
    \    [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is-valid-name? str)\n    (cond\n      [(empty? str) #f]\n\
    \      [(char-alphabetic? (first str)) #t]\n      [else #f]))\n  (define (is-valid-file-name?\
    \ str)\n    (and\n      (= (count-digits str) 3)\n      (= (count-dots str) 1)\n\
    \      (is-valid-extension? (substring str (+ (string-index str #\\.) 1) (string-length\
    \ str)))\n      (is-valid-name? (substring str 0 (string-index str #\\.)))))\n\
    \  (cond\n    [(is-valid-file-name? file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_digits file_name)\n    (if\
    \ (string-empty? file_name)\n        #t\n        (if (char-numeric? (string-ref\
    \ file_name 0))\n            (check_digits (substring file_name 1))\n        \
    \    #t)))\n  (define (check_dot file_name)\n    (if (string-empty? file_name)\n\
    \        #f\n        (if (char=? (string-ref file_name 0) #\\.)\n            #t\n\
    \            (check_dot (substring file_name 1)))))\n  (define (check_extension\
    \ file_name)\n    (if (string-empty? file_name)\n        #f\n        (if (char=?\
    \ (string-ref file_name 0) #\\.)\n            (if (string=? (substring file_name\
    \ 1) \"txt\")\n                #t\n                (if (string=? (substring file_name\
    \ 1) \"exe\")\n                    #t\n                    (if (string=? (substring\
    \ file_name 1) \"dll\")\n                        #t\n                        #f)))\n\
    \            (check_extension (substring file_name 1)))))\n  (define (check_first_letter\
    \ file_name)\n    (if (string-empty? file_name)\n        #f\n        (if (char-alphabetic?\
    \ (string-ref file_name 0))\n            #t\n            #f)))\n  (if (and (check_digits\
    \ file_name)\n           (check_dot file_name)\n           (check_extension file_name)\n\
    \           (check_first_letter file_name))\n      \"Yes\"\n      \"No\"))\n",
  "  (define (count-digits file_name)\n    (cond\n      [(empty? file_name) 0]\n \
    \     [(char-numeric? (first file_name)) (+ 1 (count-digits (rest file_name)))]\n\
    \      [else (count-digits (rest file_name))]))\n  (define (count-dots file_name)\n\
    \    (cond\n      [(empty? file_name) 0]\n      [(char=? (first file_name) #\\\
    .) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots (rest file_name))]))\n\
    \  (define (valid-extension? file_name)\n    (cond\n      [(string=? (substring\
    \ file_name (string-index file_name #\\.)) \".txt\") #t]\n      [(string=? (substring\
    \ file_name (string-index file_name #\\.)) \".exe\") #t]\n      [(string=? (substring\
    \ file_name (string-index file_name #\\.)) \".dll\") #t]\n      [else #f]))\n\
    \  (define (valid-prefix? file_name)\n    (cond\n      [(char-alphabetic? (string-ref\
    \ file_name 0)) #t]\n      [else #f]))\n  (cond\n    [(and (= (count-digits file_name)\
    \ 3) (= (count-dots file_name) 1) (valid-extension? file_name) (valid-prefix?\
    \ file_name)) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_substring str)\n\
    \    (cond\n      [(empty? str) #t]\n      [(char-alphabetic? (string-ref str\
    \ 0)) (check_substring (substring str 1))]\n      [else #f]))\n  (define (check_digits\
    \ str)\n    (cond\n      [(empty? str) #t]\n      [(char-numeric? (string-ref\
    \ str 0)) (check_digits (substring str 1))]\n      [else #f]))\n  (define (check_extension\
    \ str)\n    (cond\n      [(empty? str) #f]\n      [(string=? str \"txt\") #t]\n\
    \      [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ (check_extension (substring str 1))]))\n  (define (count_digits str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char-numeric? (string-ref str 0)) (+ 1 (count_digits\
    \ (substring str 1)))]\n      [else (count_digits (substring str 1))]))\n  (cond\n\
    \    [(empty? file_name) \"No\"]\n    [(< (count_digits file_name) 4)\n     (cond\n\
    \       [(check_substring (substring file_name 0 (string-index file_name \".\"\
    )))\n        (cond\n          [(check_extension (substring file_name (+ 1 (string-index\
    \ file_name \".\"))))\n           \"Yes\"]\n          [else \"No\"])]\n      \
    \ [else \"No\"])]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_substring str)\n    (and\
    \ (not (empty? str))\n         (regexp-match? #rx\"^[a-zA-Z]\" str)))\n  (define\
    \ (is_valid_extension ext)\n    (member ext '(\"txt\" \"exe\" \"dll\")))\n  (define\
    \ (is_valid_file_name file_name)\n    (define (count_digits str)\n      (cond\n\
    \        [(empty? str) 0]\n        [(regexp-match? #rx\"^[0-9]\" str) (+ 1 (count_digits\
    \ (substring str 1)))]\n        [else (count_digits (substring str 1))]))\n  \
    \  (define (count_dots str)\n      (cond\n        [(empty? str) 0]\n        [(regexp-match?\
    \ #rx\"^\\.\" str) (+ 1 (count_dots (substring str 1)))]\n        [else (count_dots\
    \ (substring str 1))]))\n    (and (= (count_digits file_name) 3)\n         (=\
    \ (count_dots file_name) 1)\n         (is_valid_substring (substring file_name\
    \ 0 (string-index file_name #\\.)))\n         (is_valid_extension (substring file_name\
    \ (+ 1 (string-index file_name #\\.))))))\n  (cond\n    [(is_valid_file_name file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (or (string=?\
    \ extension \"txt\")\n          (string=? extension \"exe\")\n          (string=?\
    \ extension \"dll\")))\n    (define (is_valid_name? name)\n      (and (not (string-empty?\
    \ name))\n           (regexp-match? #rx\"[a-zA-Z]\" name)))\n    (define (is_valid_digits?\
    \ digits)\n      (and (not (string-empty? digits))\n           (<= (string-length\
    \ digits) 3)))\n    (define (is_valid_file_name-helper file_name)\n      (define\
    \ (is_valid_file_name-helper-helper file_name)\n        (define (is_valid_file_name-helper-helper-helper\
    \ file_name)\n          (define (is_valid_file_name-helper-helper-helper-helper\
    \ file_name)\n            (define (is_valid_file_name-helper-helper-helper-helper-helper\
    \ file_name)\n              (define (is_valid_file_name-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                  (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                    (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                      (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ file_name)\n                        (define (is_valid_file_name-helper-helper-helper-helper-helper-helper-helper-helper-",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_extension? extension)\n      (or (string=?\
    \ extension \"txt\")\n          (string=? extension \"exe\")\n          (string=?\
    \ extension \"dll\")))\n    (define (is_valid_name? name)\n      (and (not (empty?\
    \ name))\n           (regexp-match #rx\"[a-zA-Z]\" name)))\n    (define (is_valid_digits?\
    \ digits)\n      (and (not (empty? digits))\n           (<= (string-length digits)\
    \ 3)))\n    (define (is_valid_file_name_parts? parts)\n      (and (is_valid_name?\
    \ (car parts))\n           (is_valid_digits? (cadr parts))\n           (is_valid_extension?\
    \ (caddr parts))))\n    (is_valid_file_name_parts? (regexp-split #rx\"\\.\" file_name)))\n\
    \  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (count-digits file_name)\n    (if (empty? file_name)\n        0\n        (if\
    \ (char-numeric? (first file_name))\n            (+ 1 (count-digits (rest file_name)))\n\
    \            (count-digits (rest file_name)))))\n  (define (count-dots file_name)\n\
    \    (if (empty? file_name)\n        0\n        (if (char=? (first file_name)\
    \ #\\.)\n            (+ 1 (count-dots (rest file_name)))\n            (count-dots\
    \ (rest file_name)))))\n  (define (valid-extension? extension)\n    (or (string=?\
    \ extension \"txt\")\n        (string=? extension \"exe\")\n        (string=?\
    \ extension \"dll\")))\n  (define (valid-name? file_name)\n    (define (valid-name-helper\
    \ file_name)\n      (if (empty? file_name)\n          #t\n          (if (char-alphabetic?\
    \ (first file_name))\n              (valid-name-helper (rest file_name))\n   \
    \           #f)))\n    (if (empty? file_name)\n        #f\n        (if (char-alphabetic?\
    \ (first file_name))\n            (valid-name-helper (rest file_name))\n     \
    \       #f)))\n  (define (valid-file-name? file_name)\n    (let ([name (string-before\
    \ file_name #\\.)]\n          [extension (string-after file_name #\\.)])\n   \
    \   (and (valid-name? name)\n           (valid-extension? extension)\n       \
    \    (<= (count-digits name) 3)\n           (= (count-dots file_name) 1))))\n\
    \  (if (valid-file-name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n\
    \    [(regexp-match? #rx\"^[a-zA-Z][^0-9]*\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (string=? extension \"txt\")\n        (string=? extension\
    \ \"exe\")\n        (string=? extension \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (regexp-match #rx\"[a-zA-Z]\"\
    \ name)))\n  (define (is_valid_file_name? file_name)\n    (let ((file_name_parts\
    \ (string-split file_name #\\.)))\n      (and (equal? (length file_name_parts)\
    \ 2)\n           (is_valid_name? (first file_name_parts))\n           (is_valid_extension?\
    \ (second file_name_parts)))))\n  (define (is_valid_file_name_with_digits? file_name)\n\
    \    (let ((file_name_parts (string-split file_name #\\.)))\n      (and (equal?\
    \ (length file_name_parts) 2)\n           (is_valid_name? (first file_name_parts))\n\
    \           (is_valid_extension? (second file_name_parts))\n           (not (>\
    \ (length (regexp-match #rx\"[0-9]\" (first file_name_parts))) 3)))))\n  (if (is_valid_file_name_with_digits?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
