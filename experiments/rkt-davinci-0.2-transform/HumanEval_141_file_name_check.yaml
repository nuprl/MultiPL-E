name: HumanEval_141_file_name_check
language: rkt
prompt: "#lang racket\n\n;; Create a function which takes a string representing a\
  \ file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
  \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
  \ the following conditions \n;; are met:\n;; - There should not be more than three\
  \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one\
  \ dot '.'\n;; - The substring before the dot should not be empty, and it starts\
  \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n;;\
  \ >>> (file_name_check \"example.txt\")\n;; \"Yes\"\n;; >>> (file_name_check \"\
  1example.dll\")\n;; \"No\"\n(define (file_name_check file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (define (check-extension file_name)\n    (cond ((string=? (substring\
    \ file_name (string-length file_name) (- (string-length file_name) 3)) \"txt\"\
    ) #t)\n          ((string=? (substring file_name (string-length file_name) (-\
    \ (string-length file_name) 3)) \"exe\") #t)\n          ((string=? (substring\
    \ file_name (string-length file_name) (- (string-length file_name) 3)) \"dll\"\
    ) #t)\n          (else #f)))\n  (define (check-name file_name)\n    (cond ((and\
    \ (char-alphabetic? (string-ref file_name 0))\n                (not (string-contains\
    \ file_name #\\.))\n                (not (string-contains file_name #\\0))\n \
    \               (not (string-contains file_name #\\1))\n                (not (string-contains\
    \ file_name #\\2))\n                (not (string-contains file_name #\\3))\n \
    \               (not (string-contains file_name #\\4))\n                (not (string-contains\
    \ file_name #\\5))\n                (not (string-contains file_name #\\6))\n \
    \               (not (string-contains file_name #\\7))\n                (not (string-contains\
    \ file_name #\\8))\n                (not (string-contains file_name #\\9))) #t)\n\
    \          (else #f)))\n  (cond ((and (check-name file_name) (check-extension\
    \ file_name)) \"Yes\")\n        (else \"No\")))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (check-extension file_name)\n    (cond\n      [(string=? (substring file_name\
    \ (add1 (string-index file_name #\\.))) \"txt\") #t]\n      [(string=? (substring\
    \ file_name (add1 (string-index file_name #\\.))) \"exe\") #t]\n      [(string=?\
    \ (substring file_name (add1 (string-index file_name #\\.))) \"dll\") #t]\n  \
    \    [else #f]))\n  (define (check-name file_name)\n    (cond\n      [(string=?\
    \ (substring file_name 0 (string-index file_name #\\.)) \"\") #f]\n      [(char-alphabetic?\
    \ (string-ref file_name 0)) #t]\n      [else #f]))\n  (define (check-digits file_name)\n\
    \    (cond\n      [(> (string-length (regexp-replace* #rx\"[^0-9]\" file_name\
    \ \"\")) 3) #f]\n      [else #t]))\n  (cond\n    [(and (check-extension file_name)\
    \ (check-name file_name) (check-digits file_name)) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (define (is_valid_substring s)\n    (and (not (empty? s))\n       \
    \  (char-alphabetic? (string-ref s 0))\n         (not (string-contains s #\\0)\
    \ (string-contains s #\\9))))\n  (define (is_valid_extension ext)\n    (member\
    \ ext '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_file_name file_name)\n\
    \    (let ((substrings (string-split file_name #\\.)))\n      (and (= (length\
    \ substrings) 2)\n           (is_valid_substring (first substrings))\n       \
    \    (is_valid_extension (second substrings)))))\n  (if (is_valid_file_name file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (check-digits\
    \ file_name)\n    (cond ((string-empty? file_name) #t)\n          ((char-numeric?\
    \ (string-ref file_name 0))\n           (check-digits (substring file_name 1)))\n\
    \          (else #t)))\n  (define (check-dot file_name)\n    (cond ((string-empty?\
    \ file_name) #f)\n          ((char=? (string-ref file_name 0) #\\.) #t)\n    \
    \      (else (check-dot (substring file_name 1)))))\n  (define (check-extension\
    \ file_name)\n    (cond ((string-empty? file_name) #f)\n          ((string=? file_name\
    \ \"txt\") #t)\n          ((string=? file_name \"exe\") #t)\n          ((string=?\
    \ file_name \"dll\") #t)\n          (else #f)))\n  (define (check-before-dot file_name)\n\
    \    (cond ((string-empty? file_name) #f)\n          ((char-alphabetic? (string-ref\
    \ file_name 0)) #t)\n          (else #f)))\n  (define (check-file-name file_name)\n\
    \    (cond ((string-empty? file_name) #f)\n          ((check-digits file_name)\n\
    \           (cond ((check-dot file_name)\n                  (let ((dot-index (string-index\
    \ file_name #\\.)))\n                    (let ((before-dot (substring file_name\
    \ 0 dot-index))\n                          (after-dot (substring file_name (+\
    \ dot-index 1))))\n                      (cond ((check-before-dot before-dot)\n\
    \                             (check-extension after-dot))\n                 \
    \           (else #f)))))\n                 (else #f)))\n          (else #f)))\n\
    \  (cond ((check-file-name file_name) \"Yes\")\n        (else \"No\")))\n", " \
    \ (define (is_valid_extension ext)\n    (cond [(string=? ext \"txt\") #t]\n  \
    \        [(string=? ext \"exe\") #t]\n          [(string=? ext \"dll\") #t]\n\
    \          [else #f]))\n  (define (is_valid_name name)\n    (define (is_valid_char\
    \ c)\n      (or (char-alphabetic? c) (char-numeric? c)))\n    (define (is_valid_name_helper\
    \ name)\n      (cond [(empty? name) #t]\n            [(is_valid_char (first name))\
    \ (is_valid_name_helper (rest name))]\n            [else #f]))\n    (and (not\
    \ (empty? name)) (is_valid_name_helper name)))\n  (define (is_valid_file_name\
    \ file_name)\n    (define (is_valid_file_name_helper file_name)\n      (cond [(empty?\
    \ file_name) #f]\n            [(char-numeric? (first file_name)) (is_valid_file_name_helper\
    \ (rest file_name))]\n            [(char-alphabetic? (first file_name)) #t]\n\
    \            [else #f]))\n    (and (not (empty? file_name)) (is_valid_file_name_helper\
    \ file_name)))\n  (define (is_valid_file_name_helper file_name)\n    (cond [(empty?\
    \ file_name) #f]\n          [(char-numeric? (first file_name)) (is_valid_file_name_helper\
    \ (rest file_name))]\n          [(char-alphabetic? (first file_name)) #t]\n  \
    \        [else #f]))\n  (define (is_valid_file_name file_name)\n    (and (not\
    \ (empty? file_name)) (is_valid_file_name_helper file_name)))\n  (define (is_valid_file_name_helper\
    \ file_name)\n    (cond [(empty? file_name) #f]\n          [(char-numeric? (first\
    \ file_name)) (is_valid_file_name", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_substring s)\n    (and\
    \ (not (empty? s))\n         (regexp-match? #rx\"[a-zA-Z]\" (substring s 0 1))\n\
    \         (regexp-match? #rx\"[a-zA-Z0-9]+\" s)))\n  (define (is_valid_extension\
    \ s)\n    (regexp-match? #rx\"^(txt|exe|dll)$\" s))\n  (define (is_valid_file_name\
    \ s)\n    (define (count_digits s)\n      (cond\n        [(empty? s) 0]\n    \
    \    [(regexp-match? #rx\"[0-9]\" (first s)) (+ 1 (count_digits (rest s)))]\n\
    \        [else (count_digits (rest s))]))\n    (let ([parts (regexp-split #rx\"\
    \\.\" s)])\n      (and (= (length parts) 2)\n           (is_valid_substring (first\
    \ parts))\n           (<= (count_digits (first parts)) 3)\n           (is_valid_extension\
    \ (second parts)))))\n  (cond\n    [(is_valid_file_name file_name) \"Yes\"]\n\
    \    [else \"No\"]))\n", "  (define (check_digit_count file_name)\n    (define\
    \ (count_digits file_name)\n      (cond\n        [(empty? file_name) 0]\n    \
    \    [(char-numeric? (first file_name)) (+ 1 (count_digits (rest file_name)))]\n\
    \        [else (count_digits (rest file_name))]))\n    (if (> (count_digits file_name)\
    \ 3)\n        \"No\"\n        \"Yes\"))\n  (define (check_dot_count file_name)\n\
    \    (define (count_dots file_name)\n      (cond\n        [(empty? file_name)\
    \ 0]\n        [(char=? (first file_name) #\\.) (+ 1 (count_dots (rest file_name)))]\n\
    \        [else (count_dots (rest file_name))]))\n    (if (= (count_dots file_name)\
    \ 1)\n        \"Yes\"\n        \"No\"))\n  (define (check_substring_before_dot\
    \ file_name)\n    (define (check_first_char file_name)\n      (if (char-alphabetic?\
    \ (first file_name))\n          \"Yes\"\n          \"No\"))\n    (define (check_substring_length\
    \ file_name)\n      (if (empty? (rest file_name))\n          \"No\"\n        \
    \  \"Yes\"))\n    (if (and (check_first_char file_name) (check_substring_length\
    \ file_name))\n        \"Yes\"\n        \"No\"))\n  (define (check_substring_after_dot\
    \ file_name)\n    (define (get_substring_after_dot file_name)\n      (cond\n \
    \       [(empty? file_name) \"\"]\n        [(char=? (first file_name) #\\.) (rest\
    \ file_name)]\n        [else (get_substring_after_dot (rest file_name))]))\n \
    \   (define (check_substring_length file_name)\n      (if (= (string-length file_name)\
    \ 3)\n          \"Yes\"\n          \"No\"))\n    (define (check_substring_value\
    \ file_name)\n      (if (or (", "  (define (count-digits file_name)\n    (if (empty?\
    \ file_name)\n        0\n        (if (char-numeric? (first file_name))\n     \
    \       (+ 1 (count-digits (rest file_name)))\n            (count-digits (rest\
    \ file_name)))))\n  (define (count-dots file_name)\n    (if (empty? file_name)\n\
    \        0\n        (if (char=? (first file_name) #\\.)\n            (+ 1 (count-dots\
    \ (rest file_name)))\n            (count-dots (rest file_name)))))\n  (define\
    \ (valid-extension? file_name)\n    (if (empty? file_name)\n        #f\n     \
    \   (if (char=? (first file_name) #\\.)\n            (if (string=? (rest file_name)\
    \ \"txt\")\n                #t\n                (if (string=? (rest file_name)\
    \ \"exe\")\n                    #t\n                    (if (string=? (rest file_name)\
    \ \"dll\")\n                        #t\n                        #f)))\n      \
    \      (valid-extension? (rest file_name)))))\n  (define (valid-prefix? file_name)\n\
    \    (if (empty? file_name)\n        #f\n        (if (char=? (first file_name)\
    \ #\\.)\n            #t\n            (if (char-alphabetic? (first file_name))\n\
    \                (valid-prefix? (rest file_name))\n                #f))))\n  (if\
    \ (and (= (count-digits file_name) 3)\n           (= (count-dots file_name) 1)\n\
    \           (valid-extension? file_name)\n           (valid-prefix? file_name))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (check_extension file_name)\n  \
    \  (cond\n      [(string=? (substring file_name (sub1 (string-length file_name))\
    \ (string-length file_name)) \"txt\") #t]\n      [(string=? (substring file_name\
    \ (sub1 (string-length file_name)) (string-length file_name)) \"exe\") #t]\n \
    \     [(string=? (substring file_name (sub1 (string-length file_name)) (string-length\
    \ file_name)) \"dll\") #t]\n      [else #f]))\n  (define (check_name file_name)\n\
    \    (cond\n      [(string=? (substring file_name 0 1) \"a\") #t]\n      [(string=?\
    \ (substring file_name 0 1) \"b\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"c\") #t]\n      [(string=? (substring file_name 0 1) \"d\") #t]\n   \
    \   [(string=? (substring file_name 0 1) \"e\") #t]\n      [(string=? (substring\
    \ file_name 0 1) \"f\") #t]\n      [(string=? (substring file_name 0 1) \"g\"\
    ) #t]\n      [(string=? (substring file_name 0 1) \"h\") #t]\n      [(string=?\
    \ (substring file_name 0 1) \"i\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"j\") #t]\n      [(string=? (substring file_name 0 1) \"k\") #t]\n   \
    \   [(string=? (substring file_name 0 1) \"l\") #t]\n      [(string=? (substring\
    \ file_name 0 1) \"m\") #t]\n      [(string=? (substring file_name 0 1) \"n\"\
    ) #t]\n      [(string=? (substring file_name 0 1) \"o\") #t]\n      [(string=?\
    \ (substring file_name 0 1) \"p\") #t]\n      [(string=? (substring file_name\
    \ 0 1) \"q\") #t]\n      [(", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(string=?\
    \ file_name \"example.txt\") \"Yes\"]\n    [(string=? file_name \"1example.dll\"\
    ) \"No\"]\n    [else \"No\"]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
