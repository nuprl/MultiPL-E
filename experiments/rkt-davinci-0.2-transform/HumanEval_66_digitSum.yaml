name: HumanEval_66_digitSum
language: rkt
prompt: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
  \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
  ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
  \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\"\
  )\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n\
  \    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\"\
  ) 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate\
  \ \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
  \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref\
    \ s 0))\n                 (digitSum (substring s 1)))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(upper? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (if (string=? s \"\")\n     \
    \ 0\n      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n\
    \               (- c #\\A)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (apply + (map (lambda (x) (if\
    \ (char-upper-case? x) (char->integer x) 0)) (string->list s))))\n", "  (apply\
    \ + (map char->integer (filter char-upper-case? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer\
    \ c) 0)) s)))\n", "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref\
    \ s 0)])\n        (+ (if (char-upper-case? c)\n               (char->integer c)\n\
    \               0)\n           (digitSum (substring s 1))))))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply +\
    \ (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+\
    \ (if (char-upper-case? c)\n               (char->integer c)\n               0)\n\
    \           (digitSum (substring s 1))))))\n", "  (if (empty? s)\n      0\n  \
    \    (+ (if (char-upper-case? (string-ref s 0))\n             (char->integer (string-ref\
    \ s 0))\n             0)\n         (digitSum (substring s 1)))))\n", "  (define\
    \ (sum-of-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-of-upper-chars (rest s)))]\n  \
    \    [else (sum-of-upper-chars (rest s))]))\n  (sum-of-upper-chars (string->list\
    \ s)))\n", "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n\
    \        (+ (if (char-upper-case? c)\n               (char->integer c)\n     \
    \          0)\n           (digitSum (substring s 1))))))\n", "  (apply + (map\
    \ (lambda (c)\n                  (if (and (>= c 65) (<= c 90))\n             \
    \         (- c 64)\n                      0))\n                (string->list s))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (define (isUpper? c)\n\
    \    (and (char&lt;=? #\\A c) (char&lt;=? c #\\Z)))\n  (define (charToInt c)\n\
    \    (- (char-&gt;integer c) (char-&gt;integer #\\A)))\n  (apply + (map charToInt\
    \ (filter isUpper? (string-&gt;list s)))))\n</code>\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(upper? (first s)) (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (if (empty? s)\n\
    \      0\n      (+ (if (char-upper-case? (first s))\n             (char->integer\
    \ (first s))\n             0)\n         (digitSum (rest s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(upper? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (define (sum-upper-ascii-codes s)\n    (if (string-empty? s)\n        0\n  \
    \      (+ (char->integer (string-ref s 0))\n           (sum-upper-ascii-codes\
    \ (substring s 1)))))\n  (sum-upper-ascii-codes (string-upcase s)))\n", "  (if\
    \ (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+ (if\
    \ (char-upcase? c)\n               (char->integer c)\n               0)\n    \
    \       (digitSum (substring s 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (apply + (map (lambda\
    \ (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list s))))\n", " \
    \ (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (apply + (map (lambda (x) (if (char-upper-case? x)\
    \ (char->integer x) 0)) s)))\n", "  (apply + (map char->integer (filter char-upper-case?\
    \ (string->list s)))))\n", "  (apply + (map char->integer (filter char-upcase?\
    \ (string->list s)))))\n", "  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) s)))\n", "  (cond [(empty? s) 0]\n        [else (+\
    \ (char->integer (string-ref s 0))\n                 (digitSum (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(upper? (first s)) (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s\
    \ 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (if (string=? s \"\")\n     \
    \ 0\n      (let* ([c (string-ref s 0)]\n             [s (substring s 1)])\n  \
    \      (if (or (char=? c #\\A)\n                (char=? c #\\B)\n            \
    \    (char=? c #\\C)\n                (char=? c #\\D)\n                (char=?\
    \ c #\\E)\n                (char=? c #\\F)\n                (char=? c #\\G)\n\
    \                (char=? c #\\H)\n                (char=? c #\\I)\n          \
    \      (char=? c #\\J)\n                (char=? c #\\K)\n                (char=?\
    \ c #\\L)\n                (char=? c #\\M)\n                (char=? c #\\N)\n\
    \                (char=? c #\\O)\n                (char=? c #\\P)\n          \
    \      (char=? c #\\Q)\n                (char=? c #\\R)\n                (char=?\
    \ c #\\S)\n                (char=? c #\\T)\n                (char=? c #\\U)\n\
    \                (char=? c #\\V)\n                (char=? c #\\W)\n          \
    \      (char=? c #\\X)\n                (char=? c #\\Y)\n                (char=?\
    \ c #\\Z))\n            (+ (char->integer c) (digitSum s))\n            (digitSum\
    \ s))))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer\
    \ c) 0)) (string->list s))))\n", "  (define (char-&gt;int c)\n    (char-&gt;integer\
    \ c))\n  (define (is-upper? c)\n    (and (&gt;= c #\\A) (&lt;= c #\\Z)))\n  (define\
    \ (sum-upper-chars s)\n    (if (empty? s)\n        0\n        (+ (if (is-upper?\
    \ (first s))\n               (char-&gt;int (first s))\n               0)\n   \
    \        (sum-upper-chars (rest s)))))\n  (sum-upper-chars s))\n</code>\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n   \
    \ [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (define (isUpper? c)\n    (and (char? c)\n         (char-upper-case?\
    \ c)))\n  (define (char-to-int c)\n    (char->integer c))\n  (define (sum-of-upper-chars\
    \ s)\n    (cond ((null? s) 0)\n          ((isUpper? (car s)) (+ (char-to-int (car\
    \ s)) (sum-of-upper-chars (cdr s))))\n          (else (sum-of-upper-chars (cdr\
    \ s)))))\n  (sum-of-upper-chars (string->list s)))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map char->integer (filter char-upper-case? (string->list\
    \ s)))))\n", "  (if (empty? s)\n      0\n      (+ (char->integer (string-ref s\
    \ 0))\n         (digitSum (substring s 1)))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map char->integer (filter char-upper-case? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else\
    \ (digitSum (rest s))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n", "  (apply + (map char->integer (filter char-upper-case?\
    \ (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s\
    \ 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (cond [(empty? s) 0]\n        [else (+ (char->integer\
    \ (string-ref s 0))\n                 (digitSum (substring s 1)))]))\n", "  (if\
    \ (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+ (if\
    \ (char-upper-case? c)\n               (char->integer c)\n               0)\n\
    \           (digitSum (substring s 1))))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) s)))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map char->integer (filter char-upper-case? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first\
    \ s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref\
    \ s 0))\n                 (digitSum (substring s 1)))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(upper? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n", "  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n", "  (define (sum-upper-chars s)\n \
    \   (cond\n      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (sum-upper-chars (rest s)))]\n      [else (sum-upper-chars (rest\
    \ s))]))\n  (sum-upper-chars s))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer\
    \ x) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map char->integer (filter char-upper-case? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (define (sum-upper-chars\
    \ s)\n    (if (empty? s)\n        0\n        (if (char-upper-case? (first s))\n\
    \            (+ (char->integer (first s)) (sum-upper-chars (rest s)))\n      \
    \      (sum-upper-chars (rest s)))))\n  (sum-upper-chars s))\n", "  (cond\n  \
    \  [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (define (sum-of-upper-chars s)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(char-upper-case? (first s)) (+ (char->integer (first s)) (sum-of-upper-chars\
    \ (rest s)))]\n      [else (sum-of-upper-chars (rest s))]))\n  (sum-of-upper-chars\
    \ (string->list s)))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (if (string=? s \"\")\n      0\n      (if (char-numeric? (string-ref\
    \ s 0))\n          (digitSum (substring s 1))\n          (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1))))))\n", "  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n    \
    \           (char->integer c)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(char-upper-case? (first s)) (+ (char->integer (first s)) (sum-upper-chars\
    \ (rest s)))]\n      [else (sum-upper-chars (rest s))]))\n  (sum-upper-chars s))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(char-upper-case? (first s)) (+ (char->integer (first s)) (sum-upper-chars\
    \ (rest s)))]\n      [else (sum-upper-chars (rest s))]))\n  (sum-upper-chars s))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (if\
    \ (empty? s)\n      0\n      (+ (if (char-upper-case? (string-ref s 0))\n    \
    \         (char->integer (string-ref s 0))\n             0)\n         (digitSum\
    \ (substring s 1)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (string-ref s 0)) (+ (char->integer (string-ref s 0)) (digitSum\
    \ (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (define (char-&gt;int c)\n    (char-&gt;integer c))\n  (define\
    \ (is-upper? c)\n    (and (char? c)\n         (&gt;= c #\\A)\n         (&lt;=\
    \ c #\\Z)))\n  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is-upper? (first s)) (+ (char-&gt;int (first s)) (sum-upper-chars (rest\
    \ s)))]\n      [else (sum-upper-chars (rest s))]))\n  (sum-upper-chars s))\n</code>\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(upper? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (apply + (map (lambda (c)\n                  (if (char-upper-case?\
    \ c)\n                      (char->integer c)\n                      0))\n   \
    \             (string->list s))))\n", "  (cond [(empty? s) 0]\n        [else (+\
    \ (char->integer (string-ref s 0))\n                 (digitSum (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer\
    \ c) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s\
    \ 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (define (char-&gt;int c)\n\
    \    (char-&gt;integer c))\n  (define (is-upper? c)\n    (char-upcase c))\n  (define\
    \ (is-lower? c)\n    (char-downcase c))\n  (define (is-upper-or-lower? c)\n  \
    \  (or (is-upper? c) (is-lower? c)))\n  (define (sum-upper-chars s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is-upper-or-lower? (first s)) (+ (char-&gt;int\
    \ (first s)) (sum-upper-chars (rest s)))]\n      [else (sum-upper-chars (rest\
    \ s))]))\n  (sum-upper-chars s))\n</code>\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n", " \
    \ (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref\
    \ s 0))\n                 (digitSum (substring s 1)))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (let loop ([s s] [sum 0])\n    (if (empty? s)\n        sum\n        (let ([c\
    \ (first s)])\n          (if (and (>= c #\\A) (<= c #\\Z))\n              (loop\
    \ (rest s) (+ sum c))\n              (loop (rest s) sum))))))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply + (map char->integer\
    \ (filter char-upcase? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upcase? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n", "  (cond [(empty? s) 0]\n        [else (+\
    \ (char->integer (string-ref s 0))\n                 (digitSum (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else\
    \ (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (apply + (map char->integer\
    \ (filter char-upcase? (string->list s)))))\n", "  (apply + (map (lambda (c) (if\
    \ (char-upper-case? c) (char->integer c) 0)) s)))\n", "  (apply + (map (lambda\
    \ (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(string=? s \"\") 0]\n    [else\n     (let ([c (string-ref\
    \ s 0)])\n       (+ (cond\n            [(char-upper-case? c) (char->integer c)]\n\
    \            [else 0])\n          (digitSum (substring s 1))))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(upper? (first s)) (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (if (string=?\
    \ s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case?\
    \ c) (char->integer c) 0)\n           (digitSum (substring s 1))))))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply\
    \ + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(string=? s \"\") 0]\n    [else (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]))\n", "  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (string-ref\
    \ s 0)) (char-numeric? (string-ref s 0)))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [(and (char-upper-case? (string-ref\
    \ s 0)) (not (char-numeric? (string-ref s 0))))\n     (digitSum (substring s 1))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first\
    \ s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (define (sum-digits s)\n    (cond\n      [(empty? s) 0]\n    \
    \  [(char-upcase? (first s)) (+ (char->integer (first s)) (sum-digits (rest s)))]\n\
    \      [else (sum-digits (rest s))]))\n  (sum-digits s))\n", "  (define (sum-of-upper-chars\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (sum-of-upper-chars (rest s)))]\n      [else (sum-of-upper-chars\
    \ (rest s))]))\n  (sum-of-upper-chars (string->list s)))\n", "  (apply + (map\
    \ char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\
    \ [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0))\n        \
    \         (digitSum (substring s 1)))]))\n", "  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n    \
    \           (char->integer c)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
