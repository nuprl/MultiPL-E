name: HumanEval_88_sort_array
language: rkt
prompt: "#lang racket\n\n;; Given an array of non-negative integers, return a copy\
  \ of the given array after sorting,\n;; you will sort the given array in ascending\
  \ order if the sum( first index value, last index value) is odd,\n;; or sort it\
  \ in descending order if the sum( first index value, last index value) is even.\n\
  ;; Note:\n;; * don't change the given array.\n;; Examples:\n;; >>> (sort_array (list\
  \ ))\n;; (list )\n;; >>> (sort_array (list 5))\n;; (list 5)\n;; >>> (sort_array\
  \ (list 2 4 3 0 1 5))\n;; (list 0 1 2 3 4 5)\n;; >>> (sort_array (list 2 4 3 0 1\
  \ 5 6))\n;; (list 6 5 4 3 2 1 0)\n(define (sort_array array)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 5)) (list 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3\
  \ 4 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0))\n\
  \    (check-equal? (candidate (list 2 1)) (list 1 2))\n    (check-equal? (candidate\
  \ (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87))\n    (check-equal? (candidate\
  \ (list 21 14 23 11)) (list 23 21 14 11))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? array)\n      (list)\n      (if (odd? (+ (first array)\
    \ (last array)))\n          (sort array <)\n          (sort array >))))\n", " \
    \ (if (empty? array)\n      (list)\n      (if (= (add1 (length array)) 2)\n  \
    \        array\n          (if (odd? (add (list-ref array 0) (list-ref array (sub1\
    \ (length array)))))\n              (sort array <)\n              (sort array\
    \ >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1)\
    \ array]\n    [else\n     (let ([first (first array)]\n           [last (last\
    \ array)])\n       (if (odd? (+ first last))\n           (sort array <)\n    \
    \       (sort array >)))]))\n", "  (let ([first (car array)]\n        [last (car\
    \ (reverse array))])\n    (if (odd? (+ first last))\n        (sort array <)\n\
    \        (sort array >))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort (reverse array) <)\n\
    \          (sort array <))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort array <)\n         \
    \ (sort array >))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let* ([first (first array)]\n           \
    \ [last (last array)]\n            [sum (+ first last)]\n            [rest (rest\
    \ (butlast array))])\n       (if (odd? sum)\n           (sort rest <)\n      \
    \     (sort rest >)))]))\n", "  (if (empty? array)\n      (list)\n      (let ((first\
    \ (first array))\n            (last (last array)))\n        (if (odd? (+ first\
    \ last))\n            (sort array <)\n            (sort array >)))))\n", "  (if\
    \ (empty? array)\n      (list)\n      (if (= (length array) 1)\n          array\n\
    \          (if (odd? (+ (first array) (last array)))\n              (sort array\
    \ <)\n              (sort array >)))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (odd? (+ (first array) (last array)))\n          (sort array <)\n \
    \         (sort array >))))\n", "  (cond\n    [(empty? array) (list)]\n    [(empty?\
    \ (rest array)) array]\n    [else\n     (let ([sum (add (first array) (last array))])\n\
    \       (if (odd? sum)\n           (sort array <)\n           (sort array >)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first-element (first array)]\n            [last-element (last array)]\n\
    \            [sum (+ first-element last-element)]\n            [sorted-array (sort\
    \ array <)])\n       (if (odd? sum) sorted-array (reverse sorted-array)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [rest (butlast (rest array))])\n      \
    \ (cond\n         [(odd? sum) (append (sort_array rest) (list last))]\n      \
    \   [else (append (list first) (sort_array rest))]))]))\n", "  (define (sum-of-first-and-last-index-value\
    \ array)\n    (+ (car array) (car (reverse array))))\n  (define (sort-ascending\
    \ array)\n    (sort array <))\n  (define (sort-descending array)\n    (sort array\
    \ >))\n  (if (odd? (sum-of-first-and-last-index-value array))\n      (sort-ascending\
    \ array)\n      (sort-descending array)))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (empty? (rest array))\n          (list (first array))\n          (let*\
    \ ([first (first array)]\n                 [last (last array)]\n             \
    \    [sum (+ first last)]\n                 [odd? (odd? sum)])\n            (if\
    \ odd?\n                (sort array <)\n                (sort array >))))))\n",
  "  (cond [(empty? array) (list)]\n        [(empty? (rest array)) array]\n      \
    \  [else\n         (let* ([first (first array)]\n                [last (last array)]\n\
    \                [sum (+ first last)]\n                [ascending? (even? sum)]\n\
    \                [sorted (sort array (if ascending? < >))])\n           sorted)]))\n",
  "  (if (empty? array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort > array)\n          (sort < array))))\n", "  (define (odd? n)\n\
    \    (and (not (zero? n)) (even? (- n 1))))\n  (define (even? n)\n    (or (zero?\
    \ n) (odd? (- n 1))))\n  (define (sum-first-last array)\n    (if (empty? array)\n\
    \        0\n        (+ (first array) (last array))))\n  (define (sort-array-helper\
    \ array)\n    (if (empty? array)\n        (list)\n        (if (odd? (sum-first-last\
    \ array))\n            (sort array <)\n            (sort array >))))\n  (sort-array-helper\
    \ array))\n", "  (if (empty? array)\n      (list)\n      (if (even? (+ (first\
    \ array) (last array)))\n          (sort (reverse array) <)\n          (sort array\
    \ <))))\n", "  (define (sum-first-last array)\n    (if (null? array)\n       \
    \ 0\n        (+ (car array) (car (reverse array)))))\n  (if (odd? (sum-first-last\
    \ array))\n      (sort array <)\n      (sort array >)))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (= (length array) 1)\n          array\n          (if\
    \ (odd? (+ (first array) (last array)))\n              (sort array <)\n      \
    \        (sort array >)))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (empty? (rest array))\n          (list (first array))\n          (if (even?\
    \ (+ (first array) (last array)))\n              (sort (rest array) <)\n     \
    \         (sort (rest array) >)))))\n", "  (if (null? array)\n      (list)\n \
    \     (if (= (length array) 1)\n          array\n          (if (odd? (+ (car array)\
    \ (last array)))\n              (sort array <)\n              (sort array >)))))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [rest (rest (butlast array))])\n      \
    \ (if (odd? sum)\n           (sort array <)\n           (sort array >)))]))\n",
  "  (if (empty? array)\n      (list)\n      (if (= (length array) 1)\n          array\n\
    \          (if (odd? (+ (first array) (last array)))\n              (sort array\
    \ <)\n              (sort array >)))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n   \
    \         [last (last array)]\n            [sum (+ first last)]\n            [rest\
    \ (rest (butlast array))])\n       (if (odd? sum)\n           (sort array <)\n\
    \           (sort array >)))]))\n", "  (cond\n    [(empty? array) (list)]\n  \
    \  [(= (length array) 1) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (cond\n         [(= (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add", "  (if (empty? array)\n      (list)\n \
    \     (let* ([first (first array)]\n             [last (last array)]\n       \
    \      [sum (+ first last)]\n             [rest (rest (butlast array))])\n   \
    \     (if (odd? sum)\n            (sort array <)\n            (sort array >)))))\n",
  "  (if (empty? array)\n      (list)\n      (if (empty? (rest array))\n         \
    \ (list (first array))\n          (if (odd? (+ (first array) (last array)))\n\
    \              (sort (rest array) <)\n              (sort (rest array) >)))))\n",
  "  (define (sum_first_last array)\n    (if (empty? array)\n        0\n        (+\
    \ (first array) (last array))))\n  (define (sort_array_helper array)\n    (if\
    \ (empty? array)\n        (list)\n        (if (empty? (rest array))\n        \
    \    (list (first array))\n            (if (sum_first_last array)\n          \
    \      (append (sort_array_helper (rest array)) (list (first array)))\n      \
    \          (append (list (first array)) (sort_array_helper (rest array)))))))\n\
    \  (if (empty? array)\n      (list)\n      (if (empty? (rest array))\n       \
    \   (list (first array))\n          (if (even? (sum_first_last array))\n     \
    \         (reverse (sort_array_helper array))\n              (sort_array_helper\
    \ array)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [rest (rest (butlast\
    \ array))])\n       (if (odd? sum)\n           (sort array <)\n           (sort\
    \ array >)))]))\n", "  (cond ((null? array) (list))\n        ((null? (cdr array))\
    \ array)\n        ((= (modulo (+ (car array) (car (last array))) 2) 0)\n     \
    \    (sort (reverse array) <))\n        (else (sort array <))))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n   \
    \       (sort array >)\n          (sort array <))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first\
    \ (first array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first (first\
    \ array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first (first\
    \ array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (= (length array) 1)\n          array\n    \
    \      (if (odd? (+ (first array) (last array)))\n              (sort array <)\n\
    \              (sort array >)))))\n", "  (if (empty? array)\n      (list)\n  \
    \    (if (empty? (rest array))\n          (list (first array))\n          (if\
    \ (odd? (+ (first array) (last array)))\n              (sort array <)\n      \
    \        (sort array >)))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort array >)\n         \
    \ (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let* ([first (first array)]\n           \
    \ [last (last array)]\n            [sum (+ first last)]\n            [sorted (sort\
    \ array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", "  (define\
    \ (odd? n)\n    (and (not (zero? n)) (even? (- n 1))))\n  (define (even? n)\n\
    \    (or (zero? n) (odd? (- n 1))))\n  (define (sort-array-helper array)\n   \
    \ (cond ((null? array) '())\n          ((null? (cdr array)) array)\n         \
    \ (else\n           (let* ((first (car array))\n                  (second (cadr\
    \ array))\n                  (rest (cddr array)))\n             (cond ((and (odd?\
    \ first) (odd? second))\n                    (cons first (sort-array-helper (cons\
    \ second rest))))\n                   ((and (odd? first) (even? second))\n   \
    \                 (cons second (sort-array-helper (cons first rest))))\n     \
    \              ((and (even? first) (odd? second))\n                    (cons first\
    \ (sort-array-helper (cons second rest))))\n                   ((and (even? first)\
    \ (even? second))\n                    (cons second (sort-array-helper (cons first\
    \ rest)))))))))\n  (define (sort-array-helper-2 array)\n    (cond ((null? array)\
    \ '())\n          ((null? (cdr array)) array)\n          (else\n           (let*\
    \ ((first (car array))\n                  (second (cadr array))\n            \
    \      (rest (cddr array)))\n             (cond ((and (odd? first) (odd? second))\n\
    \                    (cons first (sort-array-helper-2 (cons second rest))))\n\
    \                   ((and (odd? first) (even? second))\n                    (cons\
    \ second (sort-array-helper-2 (cons first rest))))\n                   ((and (even?\
    \ first) (odd? second))\n                    (cons second (sort-array-helper-2\
    \ (cons first rest))))\n                   ((and (even? first) (even? second))\n\
    \                    (cons first (sort-array-helper-2 (cons second rest)))))))))\n\
    \  (define (sort-array-helper-3 array)\n    (cond ((null? array) '())\n      \
    \    ((null? (cdr array)) array)\n          (else\n           (let* ((first (car\
    \ array))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1)\
    \ array]\n    [else\n     (let ([sum (add (first array) (last array))])\n    \
    \   (if (odd? sum)\n           (sort array <)\n           (sort array >)))]))\n",
  "  (if (null? array)\n      (list)\n      (if (= (modulo (+ (car array) (last array))\
    \ 2) 0)\n          (sort array >)\n          (sort array <))))\n", "  (if (empty?\
    \ array)\n      array\n      (if (even? (+ (first array) (last array)))\n    \
    \      (sort (reverse array) <)\n          (sort array <))))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (= (length array) 1)\n          array\n    \
    \      (if (odd? (+ (first array) (last array)))\n              (sort array <)\n\
    \              (sort array >)))))\n", "  (cond [(empty? array) (list)]\n     \
    \   [(= (length array) 1) array]\n        [else\n         (let* ([first-index\
    \ (first array)]\n                [last-index (last array)]\n                [sum\
    \ (+ first-index last-index)]\n                [sorted-array (sort array (if (odd?\
    \ sum) < >))])\n           sorted-array)]))\n", "  (if (null? array)\n      (list)\n\
    \      (if (odd? (+ (car array) (last array)))\n          (sort array <)\n   \
    \       (sort array >))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let* ([first (first array)]\n           \
    \ [last (last array)]\n            [sum (+ first last)]\n            [sorted (sort\
    \ array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", "  (cond\n\
    \    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n  \
    \   (let* ([first (first array)]\n            [last (last array)]\n          \
    \  [sum (+ first last)]\n            [rest (rest (butlast array))])\n       (cond\n\
    \         [(odd? sum) (sort < (cons first rest))]\n         [else (sort > (cons\
    \ last rest))]))]))\n", "  (define (sum_first_last array)\n    (if (empty? array)\n\
    \        0\n        (+ (first array) (last array))))\n  (define (sort_array_helper\
    \ array)\n    (if (empty? array)\n        (list)\n        (if (empty? (rest array))\n\
    \            (list (first array))\n            (if (sum_first_last array)\n  \
    \              (append (sort_array_helper (rest array)) (list (first array)))\n\
    \                (append (list (first array)) (sort_array_helper (rest array)))))))\n\
    \  (if (empty? array)\n      (list)\n      (if (empty? (rest array))\n       \
    \   (list (first array))\n          (if (even? (sum_first_last array))\n     \
    \         (sort_array_helper array)\n              (reverse (sort_array_helper\
    \ array))))))\n", "  (if (null? array)\n      (list)\n      (if (= (modulo (+\
    \ (car array) (last array)) 2) 0)\n          (reverse array)\n          array)))\n",
  "  (if (empty? array)\n      (list)\n      (if (empty? (rest array))\n         \
    \ (list (first array))\n          (let ([first-value (first array)]\n        \
    \        [last-value (last array)])\n            (if (odd? (+ first-value last-value))\n\
    \                (sort array <)\n                (sort array >))))))\n", "  (if\
    \ (empty? array)\n      (list)\n      (if (empty? (rest array))\n          (list\
    \ (first array))\n          (let* ([first (first array)]\n                 [last\
    \ (last array)]\n                 [sum (+ first last)]\n                 [sorted\
    \ (sort array (if (odd? sum) < >))])\n            sorted))))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n   \
    \       (sort array >)\n          (sort array <))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first\
    \ (first array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (if (empty? array)\n\
    \      (list)\n      (let* ([first (first array)]\n             [last (last array)]\n\
    \             [sum (+ first last)]\n             [odd? (odd? sum)])\n        (if\
    \ odd?\n            (sort array <)\n            (sort array >)))))\n", "  (if\
    \ (empty? array)\n      (list)\n      (if (= (length array) 1)\n          array\n\
    \          (if (odd? (+ (first array) (last array)))\n              (sort array\
    \ <)\n              (sort array >)))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort array >)\n         \
    \ (sort array <))))\n", "  (if (empty? array)\n      (list)\n      (if (empty?\
    \ (rest array))\n          (list (first array))\n          (if (odd? (+ (first\
    \ array) (last array)))\n              (sort array <)\n              (sort array\
    \ >)))))\n", "  (if (empty? array)\n      (list)\n      (if (= (length array)\
    \ 1)\n          array\n          (if (odd? (+ (first array) (last array)))\n \
    \             (sort array <)\n              (sort array >)))))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n   \
    \       (sort > array)\n          (sort < array))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first\
    \ (first array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first (first\
    \ array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (cond\n\
    \         [(odd? (+ first last))\n          (sort array <)]\n         [else\n\
    \          (sort array >)]))]))\n", "  (define (odd? n)\n    (and (integer? n)\n\
    \         (not (zero? (remainder n 2)))))\n  (define (sort-ascending array)\n\
    \    (sort array <))\n  (define (sort-descending array)\n    (sort array >))\n\
    \  (if (odd? (+ (car array) (last array)))\n      (sort-ascending array)\n   \
    \   (sort-descending array)))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort array >)\n         \
    \ (sort array <))))\n", "  (if (empty? array)\n      (list)\n      (if (even?\
    \ (+ (first array) (last array)))\n          (sort array >)\n          (sort array\
    \ <))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n\
    \    [else\n     (let* ([first (first array)]\n            [last (last array)]\n\
    \            [sum (+ first last)]\n            [sorted (sort array <)])\n    \
    \   (if (odd? sum) sorted (reverse sorted)))]))\n", "  (if (empty? array)\n  \
    \    (list)\n      (if (= (length array) 1)\n          array\n          (if (odd?\
    \ (+ (first array) (last array)))\n              (sort array <)\n            \
    \  (sort array >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let ([first (first array)]\n           [last\
    \ (last array)])\n       (if (odd? (+ first last))\n           (sort array <)\n\
    \           (sort array >)))]))\n", "  (cond\n    [(empty? array) (list)]\n  \
    \  [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [rest (rest (butlast array))])\n       (if (odd? sum)\n           (sort array\
    \ <)\n           (sort array >)))]))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n   \
    \         [last (last array)]\n            [sum (+ first last)]\n            [sorted\
    \ (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", " \
    \ (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [sorted (sort array <)])\n       (if (odd?\
    \ sum) sorted (reverse sorted)))]))\n", "  (if (empty? array)\n      array\n \
    \     (if (even? (+ (first array) (last array)))\n          (sort array >)\n \
    \         (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n   \
    \         [last (last array)]\n            [sum (+ first last)]\n            [sorted\
    \ (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", " \
    \ (if (empty? array)\n      (list)\n      (if (= (length array) 1)\n         \
    \ array\n          (if (odd? (+ (first array) (last array)))\n              (sort\
    \ array <)\n              (sort array >)))))\n", "  (if (empty? array)\n     \
    \ (list)\n      (if (even? (+ (first array) (last array)))\n          (sort >\
    \ array)\n          (sort < array))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort array >)\n         \
    \ (sort array <))))\n", "  (if (null? array)\n      (list)\n      (let ((first\
    \ (car array))\n            (last (car (reverse array))))\n        (if (odd? (+\
    \ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (if (null? array)\n      (list)\n      (let* ([first (car array)]\n         \
    \    [last (car (reverse array))]\n             [sum (+ first last)])\n      \
    \  (if (odd? sum)\n            (sort array <)\n            (sort array >)))))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (if\
    \ (odd? (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (if (null? array)\n      (list)\n      (if (even? (+ (car array) (last array)))\n\
    \          (reverse array)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (odd? (+ (first array) (last array)))\n          (sort\
    \ array <)\n          (sort array >))))\n", "  (if (empty? array)\n      (list)\n\
    \      (let* ([first-index (first array)]\n             [last-index (last array)]\n\
    \             [sum (+ first-index last-index)]\n             [sorted-array (sort\
    \ array <)])\n        (if (odd? sum)\n            sorted-array\n            (reverse\
    \ sorted-array)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let ([first (first array)]\n           [last\
    \ (last array)])\n       (if (odd? (+ first last))\n           (sort array <)\n\
    \           (sort array >)))]))\n", "  (define (sum-of-first-and-last array)\n\
    \    (+ (car array) (car (reverse array))))\n  (define (sort-ascending array)\n\
    \    (sort array <))\n  (define (sort-descending array)\n    (sort array >))\n\
    \  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [(odd?\
    \ (sum-of-first-and-last array)) (sort-ascending array)]\n    [else (sort-descending\
    \ array)]))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let ([first (first array)]\n           [last (last\
    \ array)])\n       (cond\n         [(odd? (+ first last))\n          (sort array\
    \ <)]\n         [else\n          (sort array >)]))]))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (= (length array) 1)\n          array\n          (if\
    \ (odd? (+ (first array) (last array)))\n              (sort array <)\n      \
    \        (sort array >)))))\n", "  (cond [(empty? array) (list)]\n        [(=\
    \ (length array) 1) array]\n        [else (sort_array_helper array)]))\n", " \
    \ (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [sorted (sort array <)])\n       (if (odd?\
    \ sum) sorted (reverse sorted)))]))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort > array)\n\
    \          (sort < array))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort (sort array <) >)\n\
    \          (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n   \
    \         [last (last array)]\n            [sum (+ first last)]\n            [sorted\
    \ (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", " \
    \ (if (empty? array)\n      (list)\n      (if (= (length array) 1)\n         \
    \ array\n          (let ((first (first array))\n                (last (last array)))\n\
    \            (if (odd? (+ first last))\n                (sort array <)\n     \
    \           (sort array >))))))\n", "  (cond\n    [(empty? array) (list)]\n  \
    \  [(= (length array) 1) array]\n    [else\n     (let ([first-element (first array)]\n\
    \           [last-element (last array)])\n       (if (odd? (+ first-element last-element))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (empty? (rest array))\n          (list (first\
    \ array))\n          (if (odd? (+ (first array) (last array)))\n             \
    \ (sort array <)\n              (sort array >)))))\n", "  (if (null? array)\n\
    \      (list)\n      (if (even? (+ (car array) (last array)))\n          (reverse\
    \ array)\n          (sort array <))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n   \
    \         [last (last array)]\n            [sum (+ first last)]\n            [sorted\
    \ (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", " \
    \ (cond\n    [(empty? array) (list)]\n    [(empty? (rest array)) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (if\
    \ (odd? (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [rest (butlast (rest array))])\n      \
    \ (if (odd? sum)\n           (append (sort_array rest) (list last))\n        \
    \   (append (list first) (sort_array rest))))]))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(empty? (rest array)) array]\n    [else\n     (let ([first (first\
    \ array)]\n           [last (last array)])\n       (cond\n         [(odd? (+ first\
    \ last))\n          (sort array <)]\n         [else\n          (sort array >)]))]))\n\
    ```\n\n## Test Cases\n\n```racket", "  (cond\n    [(empty? array) (list)]\n  \
    \  [(= (length array) 1) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (cond\n         [(odd? (+ first last))\n\
    \          (sort array <)]\n         [else\n          (sort array >)]))]))\n",
  "  (if (empty? array)\n      array\n      (if (even? (+ (first array) (last array)))\n\
    \          (reverse array)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (even? (+ (first array) (last array)))\n          (sort\
    \ array >)\n          (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (if (odd? (+ first last))\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first (first\
    \ array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first\
    \ (first array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (even? (+ (first array) (last array)))\n          (sort\
    \ array >)\n          (sort array <))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort > array)\n\
    \          (sort < array))))\n", "  (if (empty? array)\n      (list)\n      (let*\
    \ ([first (first array)]\n             [last (last array)]\n             [sum\
    \ (+ first last)]\n             [rest (rest (butlast array))])\n        (if (odd?\
    \ sum)\n            (append (sort_array rest) (list first) (list last))\n    \
    \        (append (sort_array rest) (list last) (list first))))))\n", "  (if (null?\
    \ array)\n      (list)\n      (if (odd? (+ (car array) (last array)))\n      \
    \    (sort array <)\n          (sort array >))))\n", "  (cond [(empty? array)\
    \ empty]\n        [(= (length array) 1) array]\n        [else\n         (let*\
    \ ([first (first array)]\n                [last (last array)]\n              \
    \  [sum (+ first last)]\n                [rest (rest (butlast array))])\n    \
    \       (if (odd? sum)\n               (sort array <)\n               (sort array\
    \ >)))]))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1)\
    \ array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [new-array (rest (butlast\
    \ array))])\n       (cond\n         [(odd? sum) (sort new-array <)]\n        \
    \ [else (sort new-array >)]))]))\n", "  (if (empty? array)\n      (list)\n   \
    \   (if (even? (+ (first array) (last array)))\n          (reverse array)\n  \
    \        (sort array <))))\n", "  (if (null? array)\n      (list)\n      (if (even?\
    \ (+ (car array) (last array)))\n          (sort array >)\n          (sort array\
    \ <))))\n", "  (if (empty? array)\n      (list)\n      (if (odd? (+ (first array)\
    \ (last array)))\n          (sort array <)\n          (sort array >))))\n", " \
    \ (if (empty? array)\n      (list)\n      (if (= (add1 (length array)) 2)\n  \
    \        array\n          (if (odd? (add (first array) (last array)))\n      \
    \        (sort array <)\n              (sort array >)))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first\
    \ (first array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (if (empty? array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort > array)\n          (sort < array))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(empty? (rest array)) array]\n    [else\n     (let* ([first\
    \ (first array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (even? (+ (first array) (last array)))\n          (sort\
    \ array >)\n          (sort array <))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort array >)\n         \
    \ (sort array <))))\n", "  (define (sort_array_helper array)\n    (if (null? array)\n\
    \        (list)\n        (let ([first (car array)]\n              [rest (cdr array)])\n\
    \          (if (null? rest)\n              (list first)\n              (let ([second\
    \ (car rest)]\n                    [rest-rest (cdr rest)])\n                (if\
    \ (odd? (+ first second))\n                    (cons first (sort_array_helper\
    \ rest))\n                    (cons second (sort_array_helper (cons first rest-rest)))))))))\n\
    \  (sort_array_helper array))\n", "  (cond\n    [(empty? array) array]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n   \
    \         [last (last array)]\n            [sum (+ first last)]\n            [sorted-array\
    \ (sort array <)])\n       (if (odd? sum) sorted-array (reverse sorted-array)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [rest (rest (butlast array))])\n      \
    \ (if (odd? sum)\n           (sort array <)\n           (sort array >)))]))\n",
  "  (define (sum_first_last array)\n    (if (null? array)\n        0\n        (+\
    \ (car array) (car (reverse array)))))\n  (if (odd? (sum_first_last array))\n\
    \      (sort array <)\n      (sort array >)))\n", "  (if (empty? array)\n    \
    \  (list)\n      (if (= (length array) 1)\n          array\n          (if (odd?\
    \ (+ (first array) (last array)))\n              (sort array <)\n            \
    \  (sort array >)))))\n", "  (if (empty? array)\n      (list)\n      (if (even?\
    \ (+ (first array) (last array)))\n          (sort > array)\n          (sort <\
    \ array))))\n", "  (if (empty? array)\n      (list)\n      (if (odd? (+ (first\
    \ array) (last array)))\n          (sort array <)\n          (sort array >))))\n",
  "  (cond\n    [(empty? array) '()]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (cond\n\
    \         [(= (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1\
    \ (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add1 (add", "  (define\
    \ (ascending? array)\n    (odd? (+ (car array) (last array))))\n  (define (sort\
    \ array)\n    (cond [(empty? array) empty]\n          [(empty? (rest array)) array]\n\
    \          [else (sort (append (list (min (car array) (cadr array)))\n       \
    \                       (list (max (car array) (cadr array)))\n              \
    \                (sort (rest (rest array)))))]))\n  (cond [(empty? array) empty]\n\
    \        [(ascending? array) (sort array)]\n        [else (reverse (sort array))]))\n",
  "  (define (sum-of-first-and-last-index-value array)\n    (+ (car array) (car (reverse\
    \ array))))\n  (if (odd? (sum-of-first-and-last-index-value array))\n      (sort\
    \ array <)\n      (sort array >)))\n", "  (if (empty? array)\n      (list)\n \
    \     (if (= (length array) 1)\n          array\n          (if (odd? (+ (first\
    \ array) (last array)))\n              (sort array <)\n              (sort array\
    \ >)))))\n", "  (if (empty? array)\n      (list)\n      (if (odd? (+ (first array)\
    \ (last array)))\n          (sort array <)\n          (sort array >))))\n", " \
    \ (cond [(empty? array) (list)]\n        [(= (length array) 1) array]\n      \
    \  [else (cond [(odd? (+ (first array) (last array))) (sort array <)]\n      \
    \              [else (sort array >)])]))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [rest (rest (butlast array))])\n       (if (odd? sum)\n           (sort array\
    \ <)\n           (sort array >)))]))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (if\
    \ (odd? (+ first last))\n           (sort array <)\n           (sort array >)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [rest (rest (butlast array))])\n      \
    \ (if (odd? sum)\n           (sort array <)\n           (sort array >)))]))\n",
  "  (if (empty? array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (define (sum_first_last\
    \ array)\n    (if (null? array)\n        0\n        (+ (car array) (car (reverse\
    \ array)))))\n  (if (odd? (sum_first_last array))\n      (sort array <)\n    \
    \  (sort array >)))\n", "  (if (empty? array)\n      (list)\n      (let ([first\
    \ (first array)]\n            [last (last array)])\n        (if (odd? (+ first\
    \ last))\n            (sort array <)\n            (sort array >)))))\n", "  (if\
    \ (empty? array)\n      (list)\n      (if (empty? (rest array))\n          (list\
    \ (first array))\n          (if (odd? (+ (first array) (last array)))\n      \
    \        (sort array <)\n              (sort array >)))))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (even? (+ (first array) (last array)))\n          (sort\
    \ array >)\n          (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(empty? (rest array)) array]\n    [else\n     (cond\n       [(odd? (+ (first\
    \ array) (last array)))\n        (sort (rest (init array)) <)]\n       [else\n\
    \        (sort (rest (init array)) >)])]))\n", "  (let ([first (car array)]\n\
    \        [last (car (reverse array))])\n    (if (even? (+ first last))\n     \
    \   (reverse (sort array <))\n        (sort array <))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (if (null? array)\n\
    \      '()\n      (if (null? (cdr array))\n          array\n          (let ([first\
    \ (car array)]\n                [last (car (reverse array))])\n            (if\
    \ (odd? (+ first last))\n                (sort array <)\n                (sort\
    \ array >))))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [rest (rest (butlast\
    \ array))])\n       (if (odd? sum)\n           (append (sort_array rest) (list\
    \ first) (list last))\n           (append (sort_array rest) (list last) (list\
    \ first))))]))\n", "  (if (empty? array)\n      (list)\n      (if (empty? (rest\
    \ array))\n          (list (first array))\n          (if (even? (+ (first array)\
    \ (last array)))\n              (reverse array)\n              (sort array)))))\n",
  "  (if (empty? array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (if (odd? (+ first last))\n\
    \           (sort array <)\n           (sort array >)))]))\n", "  (if (empty?\
    \ array)\n      (list)\n      (if (empty? (rest array))\n          (list (first\
    \ array))\n          (let ([first (first array)]\n                [last (last\
    \ array)])\n            (if (odd? (+ first last))\n                (sort array\
    \ <)\n                (sort array >))))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort (reverse array)\
    \ <)\n          (sort array <))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let*\n         ([first (first\
    \ array)]\n          [last (last array)]\n          [sum (+ first last)]\n   \
    \       [rest (rest (butlast array))])\n       (if (odd? sum)\n           (sort\
    \ array <)\n           (sort array >)))]))\n", "  (if (empty? array)\n      array\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (if (empty? array)\n      (list)\n      (if\
    \ (= (sum (first array) (last array)) 0)\n          (list (first array) (last\
    \ array))\n          (if (odd? (sum (first array) (last array)))\n           \
    \   (sort array <)\n              (sort array >)))))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (cond\n         [(=\
    \ (add1 (remainder (+ first last) 2)) 1)\n          (sort array <)]\n        \
    \ [else\n          (sort array >)]))]))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n```\n\n### [Sort Array by String Length](https://www.codewars.com/kata/sort-array-by-string-length/train/racket)\n\
    \n```racket\n#lang racket\n", "  (if (empty? array)\n      (list)\n      (if (even?\
    \ (+ (first array) (last array)))\n          (reverse array)\n          (sort\
    \ array <))))\n", "  (if (empty? array)\n      array\n      (if (odd? (+ (first\
    \ array) (last array)))\n          (sort array <)\n          (sort array >))))\n",
  "  (if (empty? array)\n      (list)\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (define (sort-odd-even\
    \ array)\n    (if (empty? array)\n        (list)\n        (if (odd? (car array))\n\
    \            (cons (car array) (sort-odd-even (cdr array)))\n            (cons\
    \ (car array) (sort-odd-even (cdr array))))))\n  (define (sort-even-odd array)\n\
    \    (if (empty? array)\n        (list)\n        (if (odd? (car array))\n    \
    \        (cons (car array) (sort-even-odd (cdr array)))\n            (cons (car\
    \ array) (sort-even-odd (cdr array))))))\n  (if (empty? array)\n      (list)\n\
    \      (if (odd? (+ (car array) (last array)))\n          (sort-odd-even array)\n\
    \          (sort-even-odd array))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (odd? (+ (first array) (last array)))\n          (sort array <)\n \
    \         (sort array >))))\n", "  (cond\n    [(empty? array) (list)]\n    [(=\
    \ (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n   \
    \         [last (last array)]\n            [sum (+ first last)]\n            [sorted\
    \ (sort array (if (odd? sum) < >))])\n       sorted)]))\n", "  (if (empty? array)\n\
    \      (list)\n      (let ((first (first array))\n            (last (last array)))\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [sorted (sort array (if\
    \ (odd? sum) < >))])\n       sorted)]))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (= (length array) 1)\n          array\n          (if (odd? (+ (first\
    \ array) (last array)))\n              (sort array <)\n              (sort array\
    \ >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1)\
    \ array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [sorted-array (sort array\
    \ <)])\n       (if (odd? sum) sorted-array (reverse sorted-array)))]))\n", " \
    \ (if (empty? array)\n      (list)\n      (if (odd? (+ (first array) (last array)))\n\
    \          (sort array <)\n          (sort array >))))\n", "  (define (sort-array-helper\
    \ array)\n    (cond\n      [(empty? array) empty]\n      [(empty? (rest array))\
    \ array]\n      [else\n       (let* ([first (first array)]\n              [rest\
    \ (rest array)]\n              [sorted-rest (sort-array-helper rest)]\n      \
    \        [first-of-sorted-rest (first sorted-rest)]\n              [rest-of-sorted-rest\
    \ (rest sorted-rest)])\n         (if (< first first-of-sorted-rest)\n        \
    \     (cons first (cons first-of-sorted-rest rest-of-sorted-rest))\n         \
    \    (cons first-of-sorted-rest (cons first rest-of-sorted-rest))))]))\n  (let*\
    \ ([first (first array)]\n         [last (last array)]\n         [sum (+ first\
    \ last)])\n    (if (odd? sum)\n        (sort-array-helper array)\n        (reverse\
    \ (sort-array-helper array)))))\n", "  (if (empty? array)\n      (list)\n    \
    \  (if (odd? (+ (first array) (last array)))\n          (sort array <)\n     \
    \     (sort array >))))\n", "  (if (empty? array)\n      (list)\n      (if (=\
    \ (length array) 1)\n          array\n          (if (odd? (+ (first array) (last\
    \ array)))\n              (sort array <)\n              (sort array >)))))\n",
  "  (define (sum_first_last array)\n    (if (null? array)\n        0\n        (+\
    \ (car array) (car (reverse array)))))\n  (if (odd? (sum_first_last array))\n\
    \      (sort array <)\n      (sort array >)))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first (first\
    \ array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (if (empty? array)\n      (list)\n      (let* ([first (first array)]\n      \
    \       [last (last array)]\n             [sum (+ first last)]\n             [rest\
    \ (rest (butlast array))])\n        (if (odd? sum)\n            (sort array <)\n\
    \            (sort array >)))))\n", "  (if (empty? array)\n      (list)\n    \
    \  (if (= (length array) 1)\n          array\n          (if (odd? (+ (first array)\
    \ (last array)))\n              (sort array <)\n              (sort array >)))))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [rest (rest (butlast array))])\n      \
    \ (if (odd? sum)\n           (sort array <)\n           (sort array >)))]))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let ([first (first array)]\n           [last (last array)])\n       (cond\n\
    \         [(odd? (+ first last))\n          (sort array <)]\n         [else\n\
    \          (sort array >)]))]))\n", "  (if (empty? array)\n      (list)\n    \
    \  (if (= (length array) 1)\n          array\n          (if (odd? (+ (first array)\
    \ (last array)))\n              (sort array <)\n              (sort array >)))))\n",
  "  (if (empty? array)\n      (list)\n      (if (odd? (+ (first array) (last array)))\n\
    \          (sort array <)\n          (sort array >))))\n", "  (if (empty? array)\n\
    \      (list)\n      (if (empty? (cdr array))\n          (list (car array))\n\
    \          (if (odd? (+ (car array) (car (reverse array))))\n              (sort\
    \ array <)\n              (sort array >)))))\n", "  (if (empty? array)\n     \
    \ (list)\n      (if (odd? (+ (first array) (last array)))\n          (sort array\
    \ <)\n          (sort array >))))\n", "  (if (empty? array)\n      (list)\n  \
    \    (if (odd? (+ (first array) (last array)))\n          (sort array <)\n   \
    \       (sort array >))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let* ([sum (add (first array) (last array))]\n\
    \            [sorted (sort array <)]\n            [sorted-reversed (sort array\
    \ >)])\n       (if (odd? sum) sorted sorted-reversed))]))\n", "  (cond\n    [(empty?\
    \ array) (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first\
    \ (first array)]\n           [last (last array)])\n       (cond\n         [(=\
    \ (add1 (remainder (+ first last) 2)) 1)\n          (sort array <)]\n        \
    \ [else\n          (sort array >)]))]))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (cond\n         [(= (add1 (add1 (modulo\
    \ (+ first last) 2))) 1)\n          (sort array <)]\n         [else\n        \
    \  (sort array >)]))]))\n", "  (let ([sum (for/sum ([i (in-list array)]) i)])\n\
    \    (cond\n      [(= (remainder sum 2) 0) (sort array >)]\n      [else (sort\
    \ array <)])))\n", "  (if (empty? array)\n      (list)\n      (let* ([first (first\
    \ array)]\n             [last (last array)]\n             [sum (+ first last)]\n\
    \             [rest (rest (butlast array))])\n        (if (odd? sum)\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (if (null? array)\n\
    \      (list)\n      (if (even? (+ (car array) (last array)))\n          (sort\
    \ array >)\n          (sort array <))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (empty? (cdr array))\n          (list (car array))\n          (if (odd?\
    \ (+ (car array) (last array)))\n              (sort array <)\n              (sort\
    \ array >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [sorted (sort array (if\
    \ (odd? sum) < >))])\n       sorted)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
