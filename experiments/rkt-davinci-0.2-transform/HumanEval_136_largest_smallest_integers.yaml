name: HumanEval_136_largest_smallest_integers
language: rkt
prompt: "#lang racket\n\n;; Create a function that returns a tuple (a, b), where 'a'\
  \ is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive\
  \ integers in a list.\n;; If there is no negative or positive integers, return them\
  \ as None.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n\
  ;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
  \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n\
  \    (check-equal? (candidate (list 2 4 1 3 5 7)) (list #f 1))\n    (check-equal?\
  \ (candidate (list 2 4 1 3 5 7 0)) (list #f 1))\n    (check-equal? (candidate (list\
  \ 1 3 2 4 5 6 -2)) (list -2 1))\n    (check-equal? (candidate (list 4 5 3 6 2 7\
  \ -7)) (list -7 2))\n    (check-equal? (candidate (list 7 3 8 4 9 2 5 -9)) (list\
  \ -9 2))\n    (check-equal? (candidate (list )) (list #f #f))\n    (check-equal?\
  \ (candidate (list 0)) (list #f #f))\n    (check-equal? (candidate (list -1 -3 -5\
  \ -6)) (list -1 #f))\n    (check-equal? (candidate (list -1 -3 -5 -6 0)) (list -1\
  \ #f))\n    (check-equal? (candidate (list -6 -4 -4 -3 1)) (list -3 1))\n    (check-equal?\
  \ (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (positive? (first\
    \ lst)) (negative? (first lst))) (list #f #f)]\n    [(positive? (first lst)) (list\
    \ #f (first lst))]\n    [(negative? (first lst)) (list (first lst) #f)]\n    [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (define (largest_negative lst)\n\
    \    (cond ((null? lst) #f)\n          ((and (number? (car lst)) (< (car lst)\
    \ 0))\n           (max (car lst) (largest_negative (cdr lst))))\n          (else\
    \ (largest_negative (cdr lst)))))\n  (define (smallest_positive lst)\n    (cond\
    \ ((null? lst) #f)\n          ((and (number? (car lst)) (> (car lst) 0))\n   \
    \        (min (car lst) (smallest_positive (cdr lst))))\n          (else (smallest_positive\
    \ (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n</code>\n", "  (let ([neg (filter (lambda (x) (and (number? x) (< x 0)))\
    \ lst)]\n        [pos (filter (lambda (x) (and (number? x) (> x 0))) lst)])\n\
    \    (if (or (empty? neg) (empty? pos))\n        (list #f #f)\n        (list (apply\
    \ max neg) (apply min pos)))))\n", "  (define (largest_negative lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (negative? (first lst))\n            (or\
    \ (not (negative? (second lst)))\n                (empty? (rest lst)))) (first\
    \ lst)]\n      [else (largest_negative (rest lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n\
    \            (or (not (positive? (second lst)))\n                (empty? (rest\
    \ lst)))) (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list\
    \ (largest_negative lst) (smallest_positive lst)))\n", "  (define (helper lst\
    \ largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (helper (rest lst) (first lst) smallest)]\n      [(and (positive? (first\
    \ lst)) (or (not smallest) (&lt; (first lst) smallest)))\n       (helper (rest\
    \ lst) largest (first lst))]\n      [else (helper (rest lst) largest smallest)]))\n\
    \  (helper lst #f #f))\n</code>\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first\
    \ lst) smallest)))\n       (largest_smallest_integers_iter (rest lst) largest\
    \ (first lst))]\n      [(and (negative? (first lst)) (or (not (negative? largest))\
    \ (> (first lst) largest)))\n       (largest_smallest_integers_iter (rest lst)\
    \ (first lst) smallest)]\n      [else (largest_smallest_integers_iter (rest lst)\
    \ largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n", "  (let\
    \ ([negs (filter (lambda (x) (and (integer? x) (< x 0))) lst)]\n        [pos (filter\
    \ (lambda (x) (and (integer? x) (> x 0))) lst)])\n    (if (or (null? negs) (null?\
    \ pos))\n        (list #f #f)\n        (list (apply max negs) (apply min pos)))))\n",
  "  (define (helper lst largest smallest)\n    (cond\n      [(empty? lst) (list largest\
    \ smallest)]\n      [(and (positive? (first lst)) (or (not smallest) (< (first\
    \ lst) smallest)))\n       (helper (rest lst) largest (first lst))]\n      [(and\
    \ (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n      \
    \ (helper (rest lst) (first lst) smallest)]\n      [else (helper (rest lst) largest\
    \ smallest)]))\n  (helper lst #f #f))\n", "  (define (largest_negative_integer\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (empty? (rest\
    \ lst))))\n       (first lst)]\n      [else (largest_negative_integer (rest lst))]))\n\
    \  (define (smallest_positive_integer lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (positive? (first lst))\n            (or (not (positive? (second\
    \ lst)))\n                (empty? (rest lst))))\n       (first lst)]\n      [else\
    \ (smallest_positive_integer (rest lst))]))\n  (list (largest_negative_integer\
    \ lst)\n        (smallest_positive_integer lst)))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n</code>\n", "  (define (helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first\
    \ lst) smallest)))\n       (helper (rest lst) largest (first lst))]\n      [(and\
    \ (negative? (first lst)) (or (not (negative? largest)) (> (first lst) largest)))\n\
    \       (helper (rest lst) (first lst) smallest)]\n      [else (helper (rest lst)\
    \ largest smallest)]))\n  (helper lst #f #f))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(negative? (first lst)) (max\
    \ (first lst) (largest_negative (rest lst)))]\n      [else (largest_negative (rest\
    \ lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(positive? (first lst)) (min (first lst) (smallest_positive (rest\
    \ lst)))]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (or (not smallest) (< (first lst) smallest)))\n       (helper (rest\
    \ lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not largest)\
    \ (> (first lst) largest)))\n       (helper (rest lst) (first lst) smallest)]\n\
    \      [else (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_smallest_integers_iter lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (not smallest))\n       (largest_smallest_integers_iter (rest lst)\
    \ largest (first lst))]\n      [(and (negative? (first lst)) (not largest))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [(and (positive? (first lst)) (< (first lst) smallest))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (> (first\
    \ lst) largest))\n       (largest_smallest_integers_iter (rest lst) (first lst)\
    \ smallest)]\n      [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_iter lst #f #f))\n", "  (let* ([negatives (filter\
    \ (lambda (x) (< x 0)) lst)]\n         [positives (filter (lambda (x) (> x 0))\
    \ lst)])\n    (if (or (empty? negatives) (empty? positives))\n        (list #f\
    \ #f)\n        (list (apply max negatives) (apply min positives)))))\n", "  (define\
    \ (helper lst largest smallest)\n    (cond [(empty? lst) (list largest smallest)]\n\
    \          [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first\
    \ lst) smallest)))\n           (helper (rest lst) largest (first lst))]\n    \
    \      [(and (negative? (first lst)) (or (not (negative? largest)) (> (first lst)\
    \ largest)))\n           (helper (rest lst) (first lst) smallest)]\n         \
    \ [else (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n", " \
    \ (define (largest_smallest_integers_iter lst largest smallest)\n    (cond\n \
    \     [(null? lst) (list largest smallest)]\n      [(and (positive? (car lst))\
    \ (or (not (positive? smallest)) (< (car lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (cdr lst) largest (car lst))]\n      [(and (negative? (car lst)) (or (not (negative?\
    \ largest)) (> (car lst) largest)))\n       (largest_smallest_integers_iter (cdr\
    \ lst) (car lst) smallest)]\n      [else (largest_smallest_integers_iter (cdr\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst))\n            (or (not (negative? (second lst)))\n  \
    \              (negative? (first lst))\n                (not (negative? (second\
    \ lst)))))\n       (first lst)]\n      [else (largest_negative (rest lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(and (positive? (first lst))\n            (or (not (positive? (second lst)))\n\
    \                (positive? (first lst))\n                (not (positive? (second\
    \ lst)))))\n       (first lst)]\n      [else (smallest_positive (rest lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (define (is-positive?\
    \ n)\n    (and (number? n) (> n 0)))\n  (define (is-negative? n)\n    (and (number?\
    \ n) (< n 0)))\n  (define (is-zero? n)\n    (and (number? n) (= n 0)))\n  (define\
    \ (is-integer? n)\n    (and (number? n) (integer? n)))\n  (define (is-non-zero-integer?\
    \ n)\n    (and (is-integer? n) (not (is-zero? n))))\n  (define (is-non-zero-integer-list?\
    \ lst)\n    (and (list? lst)\n         (every is-non-zero-integer? lst)))\n  (define\
    \ (is-non-zero-integer-list-with-zero? lst)\n    (and (list? lst)\n         (every\
    \ is-integer? lst)\n         (member 0 lst)))\n  (define (is-non-zero-integer-list-with-zero-and-non-zero?\
    \ lst)\n    (and (list? lst)\n         (every is-integer? lst)\n         (member\
    \ 0 lst)\n         (member 0 (filter is-non-zero-integer? lst))))\n  (define (is-non-zero-integer-list-with-non-zero?\
    \ lst)\n    (and (list? lst)\n         (every is-non-zero-integer? lst)))\n  (define\
    \ (is-non-zero-integer-list-with-non-zero-and-zero? lst)\n    (and (list? lst)\n\
    \         (every is-integer? lst)\n         (member 0 lst)\n         (member 0\
    \ (filter is-non-zero-integer? lst))))\n  (define (is-non-zero-integer-list-with-non-zero-and-zero-and-non-zero?\
    \ lst)\n    (and (list? lst)\n         (every is-integer? lst)\n         (member\
    \ 0 lst)\n         (member 0 (filter is-non-zero-integer? lst))\n         (member\
    \ 0 (", "  (let loop ([lst lst]\n             [neg-max #f]\n             [pos-min\
    \ #f])\n    (cond\n      [(null? lst) (list neg-max pos-min)]\n      [(and (number?\
    \ (car lst))\n            (negative? (car lst))\n            (or (not (number?\
    \ neg-max))\n                (&gt; (car lst) neg-max)))\n       (loop (cdr lst)\
    \ (car lst) pos-min)]\n      [(and (number? (car lst))\n            (positive?\
    \ (car lst))\n            (or (not (number? pos-min))\n                (&lt; (car\
    \ lst) pos-min)))\n       (loop (cdr lst) neg-max (car lst))]\n      [else (loop\
    \ (cdr lst) neg-max pos-min)])))\n</code>\n", "  (let ([negs (filter (lambda (x)\
    \ (< x 0)) lst)]\n        [pos (filter (lambda (x) (> x 0)) lst)])\n    (if (empty?\
    \ negs)\n        (list #f (min pos))\n        (list (max negs) (if (empty? pos)\
    \ #f (min pos))))))\n", "  (define (helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (&lt; (first lst) smallest)))\n       (helper (rest lst)\
    \ largest (first lst))]\n      [(and (negative? (first lst)) (or (not largest)\
    \ (&gt; (first lst) largest)))\n       (helper (rest lst) (first lst) smallest)]\n\
    \      [else (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n",
  "  (let* ([negs (filter (lambda (x) (negative? x)) lst)]\n         [pos (filter\
    \ (lambda (x) (positive? x)) lst)])\n    (if (empty? negs)\n        (list #f (min\
    \ pos))\n        (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define\
    \ (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(negative?\
    \ (first lst)) (max (first lst) (largest_negative (rest lst)))]\n      [else (largest_negative\
    \ (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(positive? (first lst)) (min (first lst) (smallest_positive\
    \ (rest lst)))]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (negative? (car lst))\n\
    \            (or (not (negative? (cadr lst)))\n                (and (negative?\
    \ (cadr lst))\n                     (< (car lst) (cadr lst)))))\n       (largest_negative\
    \ (cdr lst))]\n      [else (car lst)]))\n  (define (smallest_positive lst)\n \
    \   (cond\n      [(null? lst) #f]\n      [(and (positive? (car lst))\n       \
    \     (or (not (positive? (cadr lst)))\n                (and (positive? (cadr\
    \ lst))\n                     (> (car lst) (cadr lst)))))\n       (smallest_positive\
    \ (cdr lst))]\n      [else (car lst)]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (let ([negs (filter (lambda (x) (< x 0)) lst)]\n        [pos (filter\
    \ (lambda (x) (> x 0)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n\
    \        (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n</code>\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n</code>\n", "  (let ([negs (filter\
    \ (lambda (x) (negative? x)) lst)]\n        [pos (filter (lambda (x) (positive?\
    \ x)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n        (list\
    \ (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(null? lst) (list largest smallest)]\n\
    \      [(and (positive? (car lst)) (or (not (positive? smallest)) (< (car lst)\
    \ smallest)))\n       (largest_smallest_integers_helper (cdr lst) largest (car\
    \ lst))]\n      [(and (negative? (car lst)) (or (not (negative? largest)) (> (car\
    \ lst) largest)))\n       (largest_smallest_integers_helper (cdr lst) (car lst)\
    \ smallest)]\n      [else (largest_smallest_integers_helper (cdr lst) largest\
    \ smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n", "  (define\
    \ (is-positive? n)\n    (and (number? n) (> n 0)))\n  (define (is-negative? n)\n\
    \    (and (number? n) (< n 0)))\n  (define (largest-negative lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(is-negative? (first lst))\n       (max (first\
    \ lst) (largest-negative (rest lst)))]\n      [else (largest-negative (rest lst))]))\n\
    \  (define (smallest-positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(is-positive? (first lst))\n       (min (first lst) (smallest-positive (rest\
    \ lst)))]\n      [else (smallest-positive (rest lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (let ([negs (filter (lambda (x) (and (number?\
    \ x) (< x 0))) lst)]\n        [pos (filter (lambda (x) (and (number? x) (> x 0)))\
    \ lst)])\n    (if (empty? negs)\n        (list #f (if (empty? pos) #f (min pos)))\n\
    \        (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n", "  (define (helper lst largest\
    \ smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and\
    \ (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n   \
    \    (helper (rest lst) (first lst) smallest)]\n      [(and (positive? (first\
    \ lst)) (or (not smallest) (&lt; (first lst) smallest)))\n       (helper (rest\
    \ lst) largest (first lst))]\n      [else (helper (rest lst) largest smallest)]))\n\
    \  (helper lst #f #f))\n", "  (define (largest_negative lst)\n    (cond\n    \
    \  [(null? lst) #f]\n      [(and (negative? (car lst))\n            (or (not (negative?\
    \ (cadr lst)))\n                (and (negative? (cadr lst))\n                \
    \     (> (car lst) (cadr lst)))))\n       (car lst)]\n      [else (largest_negative\
    \ (cdr lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(and (positive? (car lst))\n            (or (not (positive? (cadr\
    \ lst)))\n                (and (positive? (cadr lst))\n                     (<\
    \ (car lst) (cadr lst)))))\n       (car lst)]\n      [else (smallest_positive\
    \ (cdr lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_smallest_integers_iter lst largest smallest)\n    (cond\n  \
    \    [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (not smallest))\n       (largest_smallest_integers_iter (rest lst) largest (first\
    \ lst))]\n      [(and (negative? (first lst)) (not largest))\n       (largest_smallest_integers_iter\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (< (first\
    \ lst) smallest))\n       (largest_smallest_integers_iter (rest lst) largest (first\
    \ lst))]\n      [(and (negative? (first lst)) (> (first lst) largest))\n     \
    \  (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n      [else\
    \ (largest_smallest_integers_iter (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter\
    \ lst #f #f))\n", "  (define (largest_smallest_integers_iter lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(< (first lst)\
    \ 0)\n       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n\
    \      [(> (first lst) 0)\n       (largest_smallest_integers_iter (rest lst) largest\
    \ (first lst))]\n      [else (largest_smallest_integers_iter (rest lst) largest\
    \ smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n", "  (define (largest-negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (not (number?\
    \ (second lst)))))\n       (first lst)]\n      [else (largest-negative (rest lst))]))\n\
    \  (define (smallest-positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(and (positive? (first lst))\n            (or (not (positive? (second lst)))\n\
    \                (not (number? (second lst)))))\n       (first lst)]\n      [else\
    \ (smallest-positive (rest lst))]))\n  (list (largest-negative lst) (smallest-positive\
    \ lst)))\n", "  (define (largest-negative lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst)) (not (negative? (second lst)))) (first\
    \ lst)]\n      [else (largest-negative (rest lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\
    \ (not (positive? (second lst)))) (first lst)]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (largest-negative-integer lst)\n    (cond\n      [(null? lst) #f]\n \
    \     [(and (negative? (car lst)) (not (null? (cdr lst))))\n       (if (negative?\
    \ (car (cdr lst)))\n           (largest-negative-integer (cdr lst))\n        \
    \   (car lst))]\n      [(negative? (car lst)) (car lst)]\n      [else (largest-negative-integer\
    \ (cdr lst))]))\n  (define (smallest-positive-integer lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (positive? (car lst)) (not (null? (cdr lst))))\n     \
    \  (if (positive? (car (cdr lst)))\n           (smallest-positive-integer (cdr\
    \ lst))\n           (car lst))]\n      [(positive? (car lst)) (car lst)]\n   \
    \   [else (smallest-positive-integer (cdr lst))]))\n  (list (largest-negative-integer\
    \ lst) (smallest-positive-integer lst)))\n", "  (define (largest-negative lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n   \
    \         (or (not (negative? (second lst)))\n                (negative? (first\
    \ lst))\n                (negative? (first lst))))\n       (first lst)]\n    \
    \  [else (largest-negative (rest lst))]))\n  (define (smallest-positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n   \
    \         (or (not (positive? (second lst)))\n                (positive? (first\
    \ lst))\n                (positive? (first lst))))\n       (first lst)]\n    \
    \  [else (smallest-positive (rest lst))]))\n  (list (largest-negative lst) (smallest-positive\
    \ lst)))\n", "  (define (is-positive? n)\n    (and (number? n) (> n 0)))\n  (define\
    \ (is-negative? n)\n    (and (number? n) (< n 0)))\n  (define (is-zero? n)\n \
    \   (and (number? n) (= n 0)))\n  (define (is-integer? n)\n    (and (number? n)\
    \ (integer? n)))\n  (define (is-number? n)\n    (and (number? n) (not (integer?\
    \ n))))\n  (define (is-nan? n)\n    (and (number? n) (not (real? n))))\n  (define\
    \ (is-infinite? n)\n    (and (number? n) (not (finite? n))))\n  (define (is-finite?\
    \ n)\n    (and (number? n) (finite? n)))\n  (define (is-real? n)\n    (and (number?\
    \ n) (real? n)))\n  (define (is-complex? n)\n    (and (number? n) (not (real?\
    \ n))))\n  (define (is-rational? n)\n    (and (number? n) (rational? n)))\n  (define\
    \ (is-irrational? n)\n    (and (number? n) (not (rational? n))))\n  (define (is-exact?\
    \ n)\n    (and (number? n) (exact? n)))\n  (define (is-inexact? n)\n    (and (number?\
    \ n) (not (exact? n))))\n  (define (is-even? n)\n    (and (number? n) (even? n)))\n\
    \  (define (is-odd? n)\n    (and (number? n) (odd? n)))\n  (define (is-zero? n)\n\
    \    (and (number? n) (= n 0)))\n  (define (is-positive? n)\n    (and (number?\
    \ n) (> n 0)))\n  (define (is-negative? n)\n    (and (number? n) (< n 0)))\n \
    \ (define (is-positive-or-zero? n)\n    (and (number", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(and (negative? (first lst)) (positive? (first lst))) (list\
    \ #f #f)]\n    [(negative? (first lst)) (list (first lst) (first lst))]\n    [(positive?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (define (largest-negative lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (negative? (first lst))\n            (or (not (negative?\
    \ (second lst)))\n                (and (negative? (second lst))\n            \
    \         (< (first lst) (second lst)))))\n       (first lst)]\n      [else (largest-negative\
    \ (rest lst))]))\n  (define (smallest-positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst))\n            (or (not (positive?\
    \ (second lst)))\n                (and (positive? (second lst))\n            \
    \         (> (first lst) (second lst)))))\n       (first lst)]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (let ([negs (filter (lambda (x) (negative? x)) lst)]\n        [pos (filter (lambda\
    \ (x) (positive? x)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n\
    \        (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (cond\n  \
    \  [(empty? lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first\
    \ lst)))\n     (list #f (first lst))]\n    [(and (positive? (first lst)) (not\
    \ (negative? (first lst))))\n     (list #f (first lst))]\n    [(and (negative?\
    \ (first lst)) (not (positive? (first lst))))\n     (list (first lst) #f)]\n \
    \   [(and (negative? (first lst)) (positive? (first lst)))\n     (list (first\
    \ lst) #f)]\n    [else (list #f #f)]))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n", "  (define (helper lst negs\
    \ poss)\n    (cond\n      [(empty? lst) (list (largest negs) (smallest poss))]\n\
    \      [(positive? (first lst)) (helper (rest lst) negs (cons (first lst) poss))]\n\
    \      [(negative? (first lst)) (helper (rest lst) (cons (first lst) negs) poss)]\n\
    \      [else (helper (rest lst) negs poss)]))\n  (helper lst (list) (list)))\n",
  "  (define (is-positive? n)\n    (and (integer? n) (> n 0)))\n  (define (is-negative?\
    \ n)\n    (and (integer? n) (< n 0)))\n  (define (largest-negative lst)\n    (cond\n\
    \      [(null? lst) #f]\n      [(is-negative? (car lst)) (max (car lst) (largest-negative\
    \ (cdr lst)))]\n      [else (largest-negative (cdr lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(is-positive? (car lst)) (min\
    \ (car lst) (smallest-positive (cdr lst)))]\n      [else (smallest-positive (cdr\
    \ lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n", "  (define\
    \ (largest_smallest_integers_helper lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (negative? (second lst))))\n       (largest_negative\
    \ (cons (first lst) (rest (rest lst))))]\n      [else (largest_negative (rest\
    \ lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (positive? (first lst))\n            (or (not (positive? (second\
    \ lst)))\n                (positive? (second lst))))\n       (smallest_positive\
    \ (cons (first lst) (rest (rest lst))))]\n      [else (smallest_positive (rest\
    \ lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define\
    \ (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and (number?\
    \ (car lst)) (< (car lst) 0))\n           (max (car lst) (largest_negative (cdr\
    \ lst))))\n          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (number? (car lst)) (> (car\
    \ lst) 0))\n           (min (car lst) (smallest_positive (cdr lst))))\n      \
    \    (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (let ([negs (filter (lambda (x) (negative? x)) lst)]\n       \
    \ [pos (filter (lambda (x) (positive? x)) lst)])\n    (if (empty? negs)\n    \
    \    (if (empty? pos)\n            (list #f #f)\n            (list #f (min pos)))\n\
    \        (if (empty? pos)\n            (list (max negs) #f)\n            (list\
    \ (max negs) (min pos))))))\n", "  (define (helper lst largest smallest)\n   \
    \ (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (not smallest)) (helper (rest lst) largest (first lst))]\n    \
    \  [(and (negative? (first lst)) (not largest)) (helper (rest lst) (first lst)\
    \ smallest)]\n      [(and (positive? (first lst)) (< (first lst) smallest)) (helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (> (first\
    \ lst) largest)) (helper (rest lst) (first lst) smallest)]\n      [else (helper\
    \ (rest lst) largest smallest)]))\n  (helper lst #f #f))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first\
    \ lst) smallest)))\n       (largest_smallest_integers_iter (rest lst) largest\
    \ (first lst))]\n      [(and (negative? (first lst)) (or (not (negative? largest))\
    \ (> (first lst) largest)))\n       (largest_smallest_integers_iter (rest lst)\
    \ (first lst) smallest)]\n      [else (largest_smallest_integers_iter (rest lst)\
    \ largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n", "  (define\
    \ (largest_smallest_integers_helper lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n</code>\n", "  (define (largest-negative lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (negative? (first lst))\n            (or (not (negative?\
    \ (second lst)))\n                (and (negative? (second lst))\n            \
    \         (> (first lst) (second lst)))))\n       (first lst)]\n      [else (largest-negative\
    \ (rest lst))]))\n  (define (smallest-positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst))\n            (or (not (positive?\
    \ (second lst)))\n                (and (positive? (second lst))\n            \
    \         (< (first lst) (second lst)))))\n       (first lst)]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (negative? (first lst))\
    \ (or (not largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest-negative lst)\n    (cond ((null? lst) #f)\n   \
    \       ((and (negative? (car lst))\n                (or (not (negative? (cadr\
    \ lst)))\n                    (and (negative? (cadr lst))\n                  \
    \       (> (car lst) (cadr lst)))))\n           (car lst))\n          (else (largest-negative\
    \ (cdr lst)))))\n  (define (smallest-positive lst)\n    (cond ((null? lst) #f)\n\
    \          ((and (positive? (car lst))\n                (or (not (positive? (cadr\
    \ lst)))\n                    (and (positive? (cadr lst))\n                  \
    \       (< (car lst) (cadr lst)))))\n           (car lst))\n          (else (smallest-positive\
    \ (cdr lst)))))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (if (null?\
    \ lst)\n        (list largest smallest)\n        (let ([x (car lst)])\n      \
    \    (if (and (integer? x) (positive? x))\n              (if (or (not (integer?\
    \ smallest)) (&lt; x smallest))\n                  (largest_smallest_integers_helper\
    \ (cdr lst) largest x)\n                  (largest_smallest_integers_helper (cdr\
    \ lst) largest smallest))\n              (if (and (integer? x) (negative? x))\n\
    \                  (if (or (not (integer? largest)) (&gt; x largest))\n      \
    \                (largest_smallest_integers_helper (cdr lst) x smallest)\n   \
    \                   (largest_smallest_integers_helper (cdr lst) largest smallest))\n\
    \                  (largest_smallest_integers_helper (cdr lst) largest smallest))))))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n</code>\n", "  (let ([negs (filter\
    \ (lambda (x) (negative? x)) lst)]\n        [pos (filter (lambda (x) (positive?\
    \ x)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n        (list\
    \ (max negs) (if (empty? pos) #f (min pos))))))\n", "  (let ([negatives (filter\
    \ (lambda (x) (< x 0)) lst)]\n        [positives (filter (lambda (x) (> x 0))\
    \ lst)])\n    (list (if (empty? negatives) #f (apply max negatives))\n       \
    \   (if (empty? positives) #f (apply min positives)))))\n", "  (define (largest_negative_integer\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (negative? (car lst))\n  \
    \              (or (not (negative? (cadr lst)))\n                    (negative?\
    \ (car lst))\n                    (negative? (cadr lst))))\n           (car lst))\n\
    \          (else (largest_negative_integer (cdr lst)))))\n  (define (smallest_positive_integer\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (positive? (car lst))\n  \
    \              (or (not (positive? (cadr lst)))\n                    (positive?\
    \ (car lst))\n                    (positive? (cadr lst))))\n           (car lst))\n\
    \          (else (smallest_positive_integer (cdr lst)))))\n  (list (largest_negative_integer\
    \ lst)\n        (smallest_positive_integer lst)))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(null? lst) (list largest smallest)]\n\
    \      [(and (positive? (car lst)) (or (not (positive? smallest)) (< (car lst)\
    \ smallest)))\n       (largest_smallest_integers_helper (cdr lst) largest (car\
    \ lst))]\n      [(and (negative? (car lst)) (or (not (negative? largest)) (> (car\
    \ lst) largest)))\n       (largest_smallest_integers_helper (cdr lst) (car lst)\
    \ smallest)]\n      [else (largest_smallest_integers_helper (cdr lst) largest\
    \ smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n", "  (define\
    \ (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and (negative?\
    \ (car lst)) (not (null? (cdr lst))))\n           (if (< (car lst) (largest_negative\
    \ (cdr lst)))\n               (largest_negative (cdr lst))\n               (car\
    \ lst)))\n          ((negative? (car lst)) (car lst))\n          (else (largest_negative\
    \ (cdr lst)))))\n  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n\
    \          ((and (positive? (car lst)) (not (null? (cdr lst))))\n           (if\
    \ (> (car lst) (smallest_positive (cdr lst)))\n               (smallest_positive\
    \ (cdr lst))\n               (car lst)))\n          ((positive? (car lst)) (car\
    \ lst))\n          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (or (not (positive? smallest)) (< (first lst) smallest)))\n   \
    \    (helper (rest lst) largest (first lst))]\n      [(and (negative? (first lst))\
    \ (or (not (negative? largest)) (> (first lst) largest)))\n       (helper (rest\
    \ lst) (first lst) smallest)]\n      [else (helper (rest lst) largest smallest)]))\n\
    \  (helper lst #f #f))\n", "  (define (largest_smallest_integers_helper lst largest\
    \ smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and\
    \ (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n    \
    \   (largest_smallest_integers_helper (rest lst) largest (first lst))]\n     \
    \ [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(positive? (first lst))\n       (if (or (not smallest)\n             \
    \  (< (first lst) smallest))\n           (largest_smallest_integers_helper (rest\
    \ lst) largest (first lst))\n           (largest_smallest_integers_helper (rest\
    \ lst) largest smallest))]\n      [(negative? (first lst))\n       (if (or (not\
    \ largest)\n               (> (first lst) largest))\n           (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)\n           (largest_smallest_integers_helper\
    \ (rest lst) largest smallest))]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_smallest_integers_iter lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_iter\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n\
    </code>\n", "  (define (largest_smallest_integers_helper lst largest smallest)\n\
    \    (if (null? lst)\n        (list largest smallest)\n        (let ((curr (car\
    \ lst)))\n          (if (and (integer? curr) (not (zero? curr)))\n           \
    \   (if (and (not (integer? largest)) (not (integer? smallest)))\n           \
    \       (largest_smallest_integers_helper (cdr lst curr curr) largest smallest)\n\
    \                  (if (and (integer? largest) (integer? smallest))\n        \
    \              (if (and (> curr 0) (< curr smallest))\n                      \
    \    (largest_smallest_integers_helper (cdr lst largest curr) largest smallest)\n\
    \                          (if (and (< curr 0) (> curr largest))\n           \
    \                   (largest_smallest_integers_helper (cdr lst curr smallest)\
    \ largest smallest)\n                              (largest_smallest_integers_helper\
    \ (cdr lst largest smallest) largest smallest)))\n                      (if (integer?\
    \ largest)\n                          (if (< curr 0)\n                       \
    \       (largest_smallest_integers_helper (cdr lst curr smallest) largest smallest)\n\
    \                              (largest_smallest_integers_helper (cdr lst largest\
    \ curr) largest smallest))\n                          (if (> curr 0)\n       \
    \                       (largest_smallest_integers_helper (cdr lst largest curr)\
    \ largest smallest)\n                              (largest_smallest_integers_helper\
    \ (cdr lst curr smallest) largest smallest)))))\n              (largest_smallest_integers_helper\
    \ (cdr lst largest smallest) largest smallest)))))\n  (largest_smallest_integers_helper\
    \ lst #f #f))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst) (list\
    \ #f #f)]\n      [(and (positive? (first lst)) (negative? (second lst))) (list\
    \ (second lst) (first lst))]\n      [(and (negative? (first lst)) (positive? (second\
    \ lst))) (list (first lst) (second lst))]\n      [else (helper (rest lst))]))\n\
    \  (helper lst))\n", "  (let* ([negatives (filter (lambda (x) (and (number? x)\
    \ (< x 0))) lst)]\n         [positives (filter (lambda (x) (and (number? x) (>\
    \ x 0))) lst)])\n    (if (or (null? negatives) (null? positives))\n        (list\
    \ #f #f)\n        (list (apply max negatives) (apply min positives)))))\n", " \
    \ (let ([negs (filter (lambda (x) (< x 0)) lst)]\n        [pos (filter (lambda\
    \ (x) (> x 0)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n  \
    \      (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (largest_negative\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (negative? (car lst))\n  \
    \              (or (not (negative? (cadr lst)))\n                    (negative?\
    \ (car lst))\n                    (positive? (cadr lst))))\n           (car lst))\n\
    \          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (positive? (car lst))\n  \
    \              (or (not (positive? (cadr lst)))\n                    (positive?\
    \ (car lst))\n                    (negative? (cadr lst))))\n           (car lst))\n\
    \          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\n\
    \      [(null? lst) #f]\n      [(and (negative? (car lst)) (not (null? (cdr lst))))\n\
    \       (if (negative? (car (cdr lst)))\n           (largest_negative (cdr lst))\n\
    \           (car lst))]\n      [(negative? (car lst)) (car lst)]\n      [else\
    \ (largest_negative (cdr lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(null? lst) #f]\n      [(and (positive? (car lst)) (not (null? (cdr lst))))\n\
    \       (if (positive? (car (cdr lst)))\n           (smallest_positive (cdr lst))\n\
    \           (car lst))]\n      [(positive? (car lst)) (car lst)]\n      [else\
    \ (smallest_positive (cdr lst))]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst)) (or (not (negative? (second lst)))\
    \ (empty? (rest lst)))) (first lst)]\n      [else (largest_negative (rest lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(and (positive? (first lst)) (or (not (positive? (second lst))) (empty? (rest\
    \ lst)))) (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list\
    \ (largest_negative lst) (smallest_positive lst)))\n", "  (define (helper lst\
    \ largest smallest)\n    (cond [(empty? lst) (list largest smallest)]\n      \
    \    [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first lst)\
    \ smallest)))\n           (helper (rest lst) largest (first lst))]\n         \
    \ [(and (negative? (first lst)) (or (not (negative? largest)) (> (first lst) largest)))\n\
    \           (helper (rest lst) (first lst) smallest)]\n          [else (helper\
    \ (rest lst) largest smallest)]))\n  (helper lst #f #f))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(null? lst) (list largest smallest)]\n\
    \      [(and (negative? (car lst)) (or (not largest) (&gt; (car lst) largest)))\n\
    \       (largest_smallest_integers_helper (cdr lst) (car lst) smallest)]\n   \
    \   [(and (positive? (car lst)) (or (not smallest) (&lt; (car lst) smallest)))\n\
    \       (largest_smallest_integers_helper (cdr lst) largest (car lst))]\n    \
    \  [else (largest_smallest_integers_helper (cdr lst) largest smallest)]))\n  (largest_smallest_integers_helper\
    \ lst #f #f))\n", "  (define (largest_smallest_integers_helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n</code>\n", "  (define (is-positive? x)\n    (and (number? x)\n      \
    \   (> x 0)))\n  (define (is-negative? x)\n    (and (number? x)\n         (< x\
    \ 0)))\n  (define (max-negative lst)\n    (cond ((null? lst) #f)\n          ((is-negative?\
    \ (car lst))\n           (max (car lst) (max-negative (cdr lst))))\n         \
    \ (else (max-negative (cdr lst)))))\n  (define (min-positive lst)\n    (cond ((null?\
    \ lst) #f)\n          ((is-positive? (car lst))\n           (min (car lst) (min-positive\
    \ (cdr lst))))\n          (else (min-positive (cdr lst)))))\n  (list (max-negative\
    \ lst) (min-positive lst)))\n", "  (define (largest_smallest_integers_helper lst\
    \ largest smallest)\n    (cond\n      [(null? lst) (list largest smallest)]\n\
    \      [(and (positive? (car lst)) (or (not (positive? smallest)) (< (car lst)\
    \ smallest)))\n       (largest_smallest_integers_helper (cdr lst) largest (car\
    \ lst))]\n      [(and (negative? (car lst)) (or (not (negative? largest)) (> (car\
    \ lst) largest)))\n       (largest_smallest_integers_helper (cdr lst) (car lst)\
    \ smallest)]\n      [else (largest_smallest_integers_helper (cdr lst) largest\
    \ smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n", "  (define\
    \ (largest_smallest_integers_helper lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ (positive? smallest)) (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ (negative? largest)) (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest-negative lst)\n    (cond ((null? lst) #f)\n   \
    \       ((and (negative? (car lst))\n                (or (not (negative? (cadr\
    \ lst)))\n                    (and (negative? (cadr lst))\n                  \
    \       (< (car lst) (cadr lst)))))\n           (car lst))\n          (else (largest-negative\
    \ (cdr lst)))))\n  (define (smallest-positive lst)\n    (cond ((null? lst) #f)\n\
    \          ((and (positive? (car lst))\n                (or (not (positive? (cadr\
    \ lst)))\n                    (and (positive? (cadr lst))\n                  \
    \       (> (car lst) (cadr lst)))))\n           (car lst))\n          (else (smallest-positive\
    \ (cdr lst)))))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (largest_smallest_integers_iter lst largest smallest)\n    (cond\n  \
    \    [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_iter\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n\
    </code>\n", "  (define (largest_negative lst)\n    (cond\n      [(null? lst) #f]\n\
    \      [(and (negative? (car lst))\n            (or (not (negative? (cadr lst)))\n\
    \                (negative? (car lst))\n                (negative? (cadr lst))))\n\
    \       (largest_negative (cdr lst))]\n      [else (car lst)]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (positive? (car lst))\n\
    \            (or (not (positive? (cadr lst)))\n                (positive? (car\
    \ lst))\n                (positive? (cadr lst))))\n       (smallest_positive (cdr\
    \ lst))]\n      [else (car lst)]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_smallest_integers_iter lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (negative?\
    \ (first lst)) (or (not largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [else (largest_smallest_integers_iter\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n\
    </code>\n", "  (let ([negatives (filter (lambda (x) (< x 0)) lst)]\n        [positives\
    \ (filter (lambda (x) (> x 0)) lst)])\n    (if (empty? negatives)\n        (list\
    \ #f (min positives))\n        (list (max negatives) (if (empty? positives) #f\
    \ (min positives))))))\n", "  (define (largest_smallest_integers_helper lst largest\
    \ smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and\
    \ (positive? (first lst)) (not smallest))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (not largest))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [(and (positive? (first lst)) (< (first lst) smallest))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (> (first\
    \ lst) largest))\n       (largest_smallest_integers_helper (rest lst) (first lst)\
    \ smallest)]\n      [else (largest_smallest_integers_helper (rest lst) largest\
    \ smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n", "  (define\
    \ (largest_smallest_integers_iter lst largest smallest)\n    (cond ((null? lst)\
    \ (list largest smallest))\n          ((and (negative? (car lst)) (or (not largest)\
    \ (&gt; (car lst) largest)))\n           (largest_smallest_integers_iter (cdr\
    \ lst) (car lst) smallest))\n          ((and (positive? (car lst)) (or (not smallest)\
    \ (&lt; (car lst) smallest)))\n           (largest_smallest_integers_iter (cdr\
    \ lst) largest (car lst)))\n          (else (largest_smallest_integers_iter (cdr\
    \ lst) largest smallest))))\n  (largest_smallest_integers_iter lst #f #f))\n</code>\n",
  "  (let ([negs (filter (lambda (x) (< x 0)) lst)]\n        [pos (filter (lambda\
    \ (x) (> x 0)) lst)])\n    (if (empty? negs)\n        (list #f (first pos))\n\
    \        (list (apply max negs) (first pos)))))\n", "  (define (largest-negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (empty? (rest\
    \ lst))))\n       (first lst)]\n      [else (largest-negative (rest lst))]))\n\
    \  (define (smallest-positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(and (positive? (first lst))\n            (or (not (positive? (second lst)))\n\
    \                (empty? (rest lst))))\n       (first lst)]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (negative? (first lst)) (positive?\
    \ (first lst))) (list #f #f)]\n    [(negative? (first lst)) (cons (first lst)\
    \ (largest_smallest_integers (rest lst)))]\n    [(positive? (first lst)) (cons\
    \ #f (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (let ([negatives (filter (lambda (n) (negative? n)) lst)]\n\
    \        [positives (filter (lambda (n) (positive? n)) lst)])\n    (if (empty?\
    \ negatives)\n        (list #f (min positives))\n        (list (max negatives)\
    \ (if (empty? positives) #f (min positives))))))\n", "  (define (largest-negative\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (negative? (car lst)) (not\
    \ (negative? (cadr lst)))) (car lst))\n          (else (largest-negative (cdr\
    \ lst)))))\n  (define (smallest-positive lst)\n    (cond ((null? lst) #f)\n  \
    \        ((and (positive? (car lst)) (not (positive? (cadr lst)))) (car lst))\n\
    \          (else (smallest-positive (cdr lst)))))\n  (list (largest-negative lst)\
    \ (smallest-positive lst)))\n", "  (let ([neg-lst (filter (lambda (x) (< x 0))\
    \ lst)]\n        [pos-lst (filter (lambda (x) (> x 0)) lst)])\n    (if (empty?\
    \ neg-lst)\n        (list #f (min pos-lst))\n        (list (max neg-lst) (if (empty?\
    \ pos-lst) #f (min pos-lst))))))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n", "  (let ([negs (filter (lambda\
    \ (x) (< x 0)) lst)]\n        [pos (filter (lambda (x) (> x 0)) lst)])\n    (if\
    \ (empty? negs)\n        (list #f (first pos))\n        (list (apply max negs)\
    \ (first pos)))))\n", "  (define (helper lst largest smallest)\n    (cond\n  \
    \    [(empty? lst) (list largest smallest)]\n      [(and (negative? (first lst))\n\
    \            (or (not largest)\n                (&gt; (first lst) largest)))\n\
    \       (helper (rest lst) (first lst) smallest)]\n      [(and (positive? (first\
    \ lst))\n            (or (not smallest)\n                (&lt; (first lst) smallest)))\n\
    \       (helper (rest lst) largest (first lst))]\n      [else (helper (rest lst)\
    \ largest smallest)]))\n  (helper lst #f #f))\n</code>\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(negative? (first lst)) (max\
    \ (first lst) (largest_negative (rest lst)))]\n      [else (largest_negative (rest\
    \ lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(positive? (first lst)) (min (first lst) (smallest_positive (rest\
    \ lst)))]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n</code>\n", "  (define (helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(and (positive? (first\
    \ lst)) (not (positive? (second lst))))\n       (helper (rest lst) (cons (first\
    \ lst) acc))]\n      [(and (negative? (first lst)) (not (negative? (second lst))))\n\
    \       (helper (rest lst) (cons (first lst) acc))]\n      [else (helper (rest\
    \ lst) acc)]))\n  (define (helper2 lst acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(and (positive? (first lst)) (not (positive? (second lst))))\n       (helper2\
    \ (rest lst) (cons (first lst) acc))]\n      [(and (negative? (first lst)) (not\
    \ (negative? (second lst))))\n       (helper2 (rest lst) (cons (first lst) acc))]\n\
    \      [else (helper2 (rest lst) acc)]))\n  (define (helper3 lst acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(and (positive? (first lst)) (not (positive?\
    \ (second lst))))\n       (helper3 (rest lst) (cons (first lst) acc))]\n     \
    \ [(and (negative? (first lst)) (not (negative? (second lst))))\n       (helper3\
    \ (rest lst) (cons (first lst) acc))]\n      [else (helper3 (rest lst) acc)]))\n\
    \  (define (helper4 lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(and\
    \ (positive? (first lst)) (not (positive? (second lst))))\n       (helper4 (rest\
    \ lst) (cons (first lst) acc))]\n      [(and (negative? (first lst)) (not (negative?\
    \ (second lst))))\n       (helper4 (rest lst) (cons (first lst) acc))]\n     \
    \ [else (helper4 (rest lst) acc)]))\n  (define", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond ((null? lst) (list largest smallest))\n   \
    \       ((and (positive? (car lst)) (or (not (positive? smallest)) (< (car lst)\
    \ smallest)))\n           (largest_smallest_integers_helper (cdr lst) largest\
    \ (car lst)))\n          ((and (negative? (car lst)) (or (not (negative? largest))\
    \ (> (car lst) largest)))\n           (largest_smallest_integers_helper (cdr lst)\
    \ (car lst) smallest))\n          (else (largest_smallest_integers_helper (cdr\
    \ lst) largest smallest))))\n  (largest_smallest_integers_helper lst #f #f))\n",
  "  (let ([negs (filter (lambda (x) (negative? x)) lst)]\n        [pos (filter (lambda\
    \ (x) (positive? x)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n\
    \        (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (negative? (first lst))\n            (or (not largest)\n        \
    \        (&gt; (first lst) largest)))\n       (helper (rest lst) (first lst) smallest)]\n\
    \      [(and (positive? (first lst))\n            (or (not smallest)\n       \
    \         (&lt; (first lst) smallest)))\n       (helper (rest lst) largest (first\
    \ lst))]\n      [else (helper (rest lst) largest smallest)]))\n  (helper lst #f\
    \ #f))\n</code>\n", "  (define (is-positive? n)\n    (and (number? n) (> n 0)))\n\
    \  (define (is-negative? n)\n    (and (number? n) (< n 0)))\n  (define (is-zero?\
    \ n)\n    (and (number? n) (= n 0)))\n  (define (is-integer? n)\n    (and (number?\
    \ n) (integer? n)))\n  (define (is-non-zero-integer? n)\n    (and (is-integer?\
    \ n) (not (is-zero? n))))\n  (define (is-non-zero-positive-integer? n)\n    (and\
    \ (is-integer? n) (not (is-zero? n)) (> n 0)))\n  (define (is-non-zero-negative-integer?\
    \ n)\n    (and (is-integer? n) (not (is-zero? n)) (< n 0)))\n  (define (is-non-zero-integer-list?\
    \ lst)\n    (and (list? lst)\n         (not (null? lst))\n         (for/and ([n\
    \ lst])\n                  (is-non-zero-integer? n))))\n  (define (is-non-zero-positive-integer-list?\
    \ lst)\n    (and (list? lst)\n         (not (null? lst))\n         (for/and ([n\
    \ lst])\n                  (is-non-zero-positive-integer? n))))\n  (define (is-non-zero-negative-integer-list?\
    \ lst)\n    (and (list? lst)\n         (not (null? lst))\n         (for/and ([n\
    \ lst])\n                  (is-non-zero-negative-integer? n))))\n  (define (is-non-zero-integer-list-with-zero?\
    \ lst)\n    (and (list? lst)\n         (not (null? lst))\n         (for/and ([n\
    \ lst])\n                  (or (is-non-zero-integer? n)\n                    \
    \  (is-zero? n)))))\n  (define (is-non-zero-positive-integer-list-with-zero? lst)\n\
    \   ", "  (let ([negatives (filter (lambda (x) (< x 0)) lst)]\n        [positives\
    \ (filter (lambda (x) (> x 0)) lst)])\n    (if (empty? negatives)\n        (list\
    \ #f (min positives))\n        (list (max negatives) (if (empty? positives) #f\
    \ (min positives))))))\n", "  (define (largest-negative lst)\n    (cond\n    \
    \  [(null? lst) #f]\n      [(and (negative? (car lst)) (or (not (negative? (cadr\
    \ lst))) (null? (cdr lst)))) (car lst)]\n      [else (largest-negative (cdr lst))]))\n\
    \  (define (smallest-positive lst)\n    (cond\n      [(null? lst) #f]\n      [(and\
    \ (positive? (car lst)) (or (not (positive? (cadr lst))) (null? (cdr lst)))) (car\
    \ lst)]\n      [else (smallest-positive (cdr lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (if (null? lst)\n        (list largest smallest)\n\
    \        (let ([x (car lst)])\n          (if (and (integer? x) (not (zero? x)))\n\
    \              (if (and (not (integer? largest)) (not (integer? smallest)))\n\
    \                  (largest_smallest_integers_iter (cdr lst) x x)\n          \
    \        (if (and (integer? largest) (integer? smallest))\n                  \
    \    (if (and (< x 0) (< x largest))\n                          (if (> x smallest)\n\
    \                              (largest_smallest_integers_iter (cdr lst) x smallest)\n\
    \                              (largest_smallest_integers_iter (cdr lst) largest\
    \ x))\n                          (if (> x smallest)\n                        \
    \      (largest_smallest_integers_iter (cdr lst) largest x)\n                \
    \              (largest_smallest_integers_iter (cdr lst) x smallest)))\n     \
    \                 (if (integer? largest)\n                          (if (< x 0)\n\
    \                              (largest_smallest_integers_iter (cdr lst) x largest)\n\
    \                              (largest_smallest_integers_iter (cdr lst) largest\
    \ x))\n                          (if (< x 0)\n                              (largest_smallest_integers_iter\
    \ (cdr lst) x smallest)\n                              (largest_smallest_integers_iter\
    \ (cdr lst) smallest x)))))\n              (largest_smallest_integers_iter (cdr\
    \ lst) largest smallest)))))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (define (largest_smallest_integers_iter lst largest smallest)\n    (cond\n  \
    \    [(null? lst) (list largest smallest)]\n      [(and (positive? (car lst))\
    \ (or (not (positive? smallest)) (< (car lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (cdr lst) largest (car lst))]\n      [(and (negative? (car lst)) (or (not (negative?\
    \ largest)) (> (car lst) largest)))\n       (largest_smallest_integers_iter (cdr\
    \ lst) (car lst) smallest)]\n      [else (largest_smallest_integers_iter (cdr\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (let ([negs (filter (lambda (x) (negative? x)) lst)]\n        [pos (filter (lambda\
    \ (x) (positive? x)) lst)])\n    (if (or (empty? negs) (empty? pos))\n       \
    \ (list #f #f)\n        (list (apply max negs) (apply min pos)))))\n", "  (let\
    \ ([negs (filter (lambda (x) (and (number? x) (< x 0))) lst)]\n        [pos (filter\
    \ (lambda (x) (and (number? x) (> x 0))) lst)])\n    (if (and (empty? negs) (empty?\
    \ pos))\n        (list #f #f)\n        (list (apply max negs) (apply min pos)))))\n",
  "  (define (largest_smallest_integers_iter lst largest smallest)\n    (cond\n  \
    \    [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\n\
    \            (or (not smallest)\n                (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst))\n            (or (not largest)\n           \
    \     (> (first lst) largest)))\n       (largest_smallest_integers_iter (rest\
    \ lst) (first lst) smallest)]\n      [else (largest_smallest_integers_iter (rest\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(empty? (filter negative? lst))\
    \ (list #f (min (filter positive? lst)))]\n    [(empty? (filter positive? lst))\
    \ (list (max (filter negative? lst)) #f)]\n    [else (list (max (filter negative?\
    \ lst)) (min (filter positive? lst)))]))\n", "  (define (helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(positive? (first\
    \ lst))\n       (if (or (not smallest) (&lt; (first lst) smallest))\n        \
    \   (helper (rest lst) largest (first lst))\n           (helper (rest lst) largest\
    \ smallest))]\n      [(negative? (first lst))\n       (if (or (not largest) (&gt;\
    \ (first lst) largest))\n           (helper (rest lst) (first lst) smallest)\n\
    \           (helper (rest lst) largest smallest))]\n      [else (helper (rest\
    \ lst) largest smallest)]))\n  (helper lst #f #f))\n</code>\n", "  (define (helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (helper (rest lst) (first lst) smallest)]\n      [(and (positive? (first\
    \ lst)) (or (not smallest) (&lt; (first lst) smallest)))\n       (helper (rest\
    \ lst) largest (first lst))]\n      [else (helper (rest lst) largest smallest)]))\n\
    \  (helper lst #f #f))\n", "  (define (helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (< (first lst) smallest)))\n       (helper (rest lst) largest\
    \ (first lst))]\n      [(and (negative? (first lst)) (or (not largest) (> (first\
    \ lst) largest)))\n       (helper (rest lst) (first lst) smallest)]\n      [else\
    \ (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n", "  (define\
    \ (largest_smallest_integers_helper lst largest smallest)\n    (cond ((null? lst)\
    \ (list largest smallest))\n          ((and (positive? (car lst)) (or (not (positive?\
    \ smallest)) (< (car lst) smallest)))\n           (largest_smallest_integers_helper\
    \ (cdr lst) largest (car lst)))\n          ((and (negative? (car lst)) (or (not\
    \ (negative? largest)) (> (car lst) largest)))\n           (largest_smallest_integers_helper\
    \ (cdr lst) (car lst) smallest))\n          (else (largest_smallest_integers_helper\
    \ (cdr lst) largest smallest))))\n  (largest_smallest_integers_helper lst #f #f))\n",
  "  (let ([negs (filter (lambda (x) (< x 0)) lst)]\n        [pos (filter (lambda\
    \ (x) (> x 0)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n  \
    \      (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (define (helper lst largest\
    \ smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and\
    \ (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n    \
    \   (helper (rest lst) largest (first lst))]\n      [(and (negative? (first lst))\
    \ (or (not largest) (> (first lst) largest)))\n       (helper (rest lst) (first\
    \ lst) smallest)]\n      [else (helper (rest lst) largest smallest)]))\n  (helper\
    \ lst #f #f))\n", "  (define (is-positive? n)\n    (and (number? n) (> n 0)))\n\
    \  (define (is-negative? n)\n    (and (number? n) (< n 0)))\n  (define (largest-negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(is-negative? (first lst))\n\
    \       (max (first lst) (largest-negative (rest lst)))]\n      [else (largest-negative\
    \ (rest lst))]))\n  (define (smallest-positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(is-positive? (first lst))\n       (min (first lst) (smallest-positive\
    \ (rest lst)))]\n      [else (smallest-positive (rest lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst)) (or (not largest) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (empty? (rest\
    \ lst)))) (first lst)]\n      [else (largest_negative (rest lst))]))\n  (define\
    \ (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive?\
    \ (first lst))\n            (or (not (positive? (second lst)))\n             \
    \   (empty? (rest lst)))) (first lst)]\n      [else (smallest_positive (rest lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(= (length lst) 1) (list #f #f)]\n    [else\n     (let\
    \ ([neg-lst (filter (lambda (x) (< x 0)) lst)]\n           [pos-lst (filter (lambda\
    \ (x) (> x 0)) lst)])\n       (list (if (empty? neg-lst) #f (apply max neg-lst))\n\
    \             (if (empty? pos-lst) #f (apply min pos-lst))))]))\n", "  (let ((negs\
    \ (filter (lambda (x) (negative? x)) lst))\n        (pos (filter (lambda (x) (positive?\
    \ x)) lst)))\n    (if (empty? negs)\n        (list #f (min pos))\n        (list\
    \ (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (helper lst neg\
    \ pos)\n    (cond [(empty? lst) (list neg pos)]\n          [(negative? (first\
    \ lst)) (helper (rest lst) (first lst) pos)]\n          [(positive? (first lst))\
    \ (helper (rest lst) neg (first lst))]\n          [else (helper (rest lst) neg\
    \ pos)]))\n  (helper lst #f #f))\n", "  (define (is-positive? n)\n    (and (number?\
    \ n) (> n 0)))\n  (define (is-negative? n)\n    (and (number? n) (< n 0)))\n \
    \ (define (largest-negative lst)\n    (cond\n      [(null? lst) #f]\n      [(is-negative?\
    \ (car lst)) (max (car lst) (largest-negative (cdr lst)))]\n      [else (largest-negative\
    \ (cdr lst))]))\n  (define (smallest-positive lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(is-positive? (car lst)) (min (car lst) (smallest-positive (cdr\
    \ lst)))]\n      [else (smallest-positive (cdr lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (define (helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (negative?\
    \ (first lst)) (or (not largest) (&gt; (first lst) largest)))\n       (helper\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (helper (rest lst) largest (first\
    \ lst))]\n      [else (helper (rest lst) largest smallest)]))\n  (helper lst #f\
    \ #f))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(< (first lst) 0) (max (first lst) (largest_negative (rest lst)))]\n \
    \     [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(> (first lst) 0) (min (first lst)\
    \ (smallest_positive (rest lst)))]\n      [else (smallest_positive (rest lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (let ([neg-lst\
    \ (filter (lambda (x) (< x 0)) lst)]\n        [pos-lst (filter (lambda (x) (>\
    \ x 0)) lst)])\n    (if (empty? neg-lst)\n        (list #f (min pos-lst))\n  \
    \      (list (max neg-lst) (if (empty? pos-lst) #f (min pos-lst))))))\n", "  (define\
    \ (helper lst largest smallest)\n    (cond\n      [(empty? lst) (list largest\
    \ smallest)]\n      [(and (positive? (first lst)) (or (not (positive? smallest))\
    \ (< (first lst) smallest)))\n       (helper (rest lst) largest (first lst))]\n\
    \      [(and (negative? (first lst)) (or (not (negative? largest)) (> (first lst)\
    \ largest)))\n       (helper (rest lst) (first lst) smallest)]\n      [else (helper\
    \ (rest lst) largest smallest)]))\n  (helper lst #f #f))\n", "  (let ([pos (filter\
    \ positive? lst)]\n        [neg (filter negative? lst)])\n    (if (empty? pos)\n\
    \        (list #f #f)\n        (list (apply max neg) (apply min pos)))))\n", " \
    \ (define (largest-negative lst)\n    (cond ((null? lst) #f)\n          ((and\
    \ (negative? (car lst))\n                (or (not (negative? (cadr lst)))\n  \
    \                  (negative? (car lst))\n                    (not (negative?\
    \ (cadr lst)))))\n           (car lst))\n          (else (largest-negative (cdr\
    \ lst)))))\n  (define (smallest-positive lst)\n    (cond ((null? lst) #f)\n  \
    \        ((and (positive? (car lst))\n                (or (not (positive? (cadr\
    \ lst)))\n                    (positive? (car lst))\n                    (not\
    \ (positive? (cadr lst)))))\n           (car lst))\n          (else (smallest-positive\
    \ (cdr lst)))))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (largest_smallest_integers_iter lst largest smallest)\n    (cond\n  \
    \    [(empty? lst) (list largest smallest)]\n      [(positive? (first lst))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (min (first lst) smallest))]\n\
    \      [(negative? (first lst))\n       (largest_smallest_integers_iter (rest\
    \ lst) (max (first lst) largest) smallest)]\n      [else (largest_smallest_integers_iter\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (let ([negs (filter (lambda (x) (< x 0)) lst)]\n        [pos (filter\
    \ (lambda (x) (> x 0)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n\
    \        (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (let ([negatives (filter\
    \ (lambda (x) (and (number? x) (< x 0))) lst)]\n        [positives (filter (lambda\
    \ (x) (and (number? x) (> x 0))) lst)])\n    (if (or (null? negatives) (null?\
    \ positives))\n        (list #f #f)\n        (list (apply max negatives) (apply\
    \ min positives)))))\n", "  (define (largest_negative lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (negative? (car lst))\n            (or (not (negative?\
    \ (cadr lst)))\n                (and (negative? (cadr lst))\n                \
    \     (< (car lst) (cadr lst)))))\n       (largest_negative (cdr lst))]\n    \
    \  [else (car lst)]))\n  (define (smallest_positive lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (positive? (car lst))\n            (or (not (positive?\
    \ (cadr lst)))\n                (and (positive? (cadr lst))\n                \
    \     (> (car lst) (cadr lst)))))\n       (smallest_positive (cdr lst))]\n   \
    \   [else (car lst)]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(and (positive?\
    \ (first lst)) (not (positive? (second lst))))\n       (helper (rest lst) (cons\
    \ (first lst) acc))]\n      [(and (negative? (first lst)) (not (negative? (second\
    \ lst))))\n       (helper (rest lst) (cons (first lst) acc))]\n      [else (helper\
    \ (rest lst) acc)]))\n  (define (helper2 lst acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(and (positive? (first lst)) (not (positive? (second lst))))\n\
    \       (helper2 (rest lst) (cons (first lst) acc))]\n      [(and (negative? (first\
    \ lst)) (not (negative? (second lst))))\n       (helper2 (rest lst) (cons (first\
    \ lst) acc))]\n      [else (helper2 (rest lst) acc)]))\n  (if (empty? lst)\n \
    \     (list #f #f)\n      (list (first (helper lst '())) (first (helper2 lst '())))))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) (list #f #f)]\n      [(and\
    \ (positive? (first lst)) (negative? (first lst))) (helper (rest lst))]\n    \
    \  [(positive? (first lst)) (list (first lst) (helper (rest lst)))]\n      [(negative?\
    \ (first lst)) (list (helper (rest lst)) (first lst))]\n      [else (helper (rest\
    \ lst))]))\n  (helper lst))\n", "  (define (is-positive? n)\n    (and (number?\
    \ n) (> n 0)))\n  (define (is-negative? n)\n    (and (number? n) (< n 0)))\n \
    \ (define (largest-negative lst)\n    (cond\n      [(null? lst) #f]\n      [(is-negative?\
    \ (car lst)) (max (car lst) (largest-negative (cdr lst)))]\n      [else (largest-negative\
    \ (cdr lst))]))\n  (define (smallest-positive lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(is-positive? (car lst)) (min (car lst) (smallest-positive (cdr\
    \ lst)))]\n      [else (smallest-positive (cdr lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (if (null? lst)\n        (list largest smallest)\n\
    \        (let ((x (car lst)))\n          (cond\n            ((and (integer? x)\
    \ (< x 0))\n             (largest_smallest_integers_iter (cdr lst (max x largest)\
    \ smallest)))\n            ((and (integer? x) (> x 0))\n             (largest_smallest_integers_iter\
    \ (cdr lst largest (min x smallest))))\n            (else\n             (largest_smallest_integers_iter\
    \ (cdr lst largest smallest)))))))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (define (largest_smallest_integers_iter lst largest smallest)\n    (cond\n  \
    \    [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_iter\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n\
    </code>\n", "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n  \
    \        ((and (number? (car lst)) (< (car lst) 0))\n           (max (car lst)\
    \ (largest_negative (cdr lst))))\n          (else (largest_negative (cdr lst)))))\n\
    \  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n          ((and\
    \ (number? (car lst)) (> (car lst) 0))\n           (min (car lst) (smallest_positive\
    \ (cdr lst))))\n          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter\
    \ lst #f #f))\n</code>\n", "  (define (is-positive? n)\n    (and (number? n) (>\
    \ n 0)))\n  (define (is-negative? n)\n    (and (number? n) (< n 0)))\n  (define\
    \ (is-zero? n)\n    (and (number? n) (= n 0)))\n  (define (is-integer? n)\n  \
    \  (and (number? n) (integer? n)))\n  (define (is-not-integer? n)\n    (not (is-integer?\
    \ n)))\n  (define (is-not-zero? n)\n    (not (is-zero? n)))\n  (define (is-not-positive?\
    \ n)\n    (not (is-positive? n)))\n  (define (is-not-negative? n)\n    (not (is-negative?\
    \ n)))\n  (define (is-not-zero-or-positive? n)\n    (not (or (is-zero? n) (is-positive?\
    \ n))))\n  (define (is-not-zero-or-negative? n)\n    (not (or (is-zero? n) (is-negative?\
    \ n))))\n  (define (is-not-zero-or-integer? n)\n    (not (or (is-zero? n) (is-integer?\
    \ n))))\n  (define (is-not-positive-or-integer? n)\n    (not (or (is-positive?\
    \ n) (is-integer? n))))\n  (define (is-not-negative-or-integer? n)\n    (not (or\
    \ (is-negative? n) (is-integer? n))))\n  (define (is-not-zero-or-positive-or-integer?\
    \ n)\n    (not (or (is-zero? n) (is-positive? n) (is-integer? n))))\n  (define\
    \ (is-not-zero-or-negative-or-integer? n)\n    (not (or (is-zero? n) (is-negative?\
    \ n) (is-integer? n))))\n  (define (is-not-positive-or-negative-or-integer? n)\n\
    \    (not (or (is-positive? n) (is-negative", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      ((null? lst) (list largest smallest))\n\
    \      ((and (positive? (car lst)) (or (not smallest) (&lt; (car lst) smallest)))\n\
    \       (largest_smallest_integers_iter (cdr lst) largest (car lst)))\n      ((and\
    \ (negative? (car lst)) (or (not largest) (&gt; (car lst) largest)))\n       (largest_smallest_integers_iter\
    \ (cdr lst) (car lst) smallest))))\n  (largest_smallest_integers_iter lst #f #f))\n\
    </code>\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(negative? (first lst)) (max (first lst) (largest_negative (rest\
    \ lst)))]\n      [else (largest_negative (rest lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(positive? (first lst)) (min\
    \ (first lst) (smallest_positive (rest lst)))]\n      [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(and (positive?\
    \ (first lst)) (not (member (first lst) (cdr acc))))\n       (helper (rest lst)\
    \ (cons (first lst) acc))]\n      [(and (negative? (first lst)) (not (member (first\
    \ lst) (cdr acc))))\n       (helper (rest lst) (cons (first lst) acc))]\n    \
    \  [else (helper (rest lst) acc)]))\n  (let ([lst (helper lst (list #f #f))])\n\
    \    (if (empty? lst)\n        (list #f #f)\n        (list (apply max (filter\
    \ negative? lst))\n              (apply min (filter positive? lst))))))\n", " \
    \ (define (max-neg lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative?\
    \ (first lst))\n            (or (not (negative? (second lst)))\n             \
    \   (max-neg (rest lst))\n                (first lst)\n                (second\
    \ lst)))\n       (first lst)]\n      [else (max-neg (rest lst))]))\n  (define\
    \ (min-pos lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first\
    \ lst))\n            (or (not (positive? (second lst)))\n                (min-pos\
    \ (rest lst))\n                (first lst)\n                (second lst)))\n \
    \      (first lst)]\n      [else (min-pos (rest lst))]))\n  (list (max-neg lst)\
    \ (min-pos lst)))\n", "  (define (is-positive? n)\n    (and (integer? n)\n   \
    \      (positive? n)))\n  (define (is-negative? n)\n    (and (integer? n)\n  \
    \       (negative? n)))\n  (define (largest-negative lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(is-negative? (first lst))\n       (max (first lst) (largest-negative\
    \ (rest lst)))]\n      [else (largest-negative (rest lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(is-positive? (first lst))\n\
    \       (min (first lst) (smallest-positive (rest lst)))]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(> (first lst) 0)\n    \
    \   (if (or (not smallest) (< (first lst) smallest))\n           (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))\n           (largest_smallest_integers_helper\
    \ (rest lst) largest smallest))]\n      [(< (first lst) 0)\n       (if (or (not\
    \ largest) (> (first lst) largest))\n           (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)\n           (largest_smallest_integers_helper\
    \ (rest lst) largest smallest))]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (let ([negs (filter (lambda (x) (< x 0)) lst)]\n        [pos (filter\
    \ (lambda (x) (> x 0)) lst)])\n    (if (empty? negs)\n        (list #f (min pos))\n\
    \        (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (is-positive?\
    \ n)\n    (and (number? n) (> n 0)))\n  (define (is-negative? n)\n    (and (number?\
    \ n) (< n 0)))\n  (define (largest-negative lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(is-negative? (car lst)) (max (car lst) (largest-negative (cdr lst)))]\n\
    \      [else (largest-negative (cdr lst))]))\n  (define (smallest-positive lst)\n\
    \    (cond\n      [(null? lst) #f]\n      [(is-positive? (car lst)) (min (car\
    \ lst) (smallest-positive (cdr lst)))]\n      [else (smallest-positive (cdr lst))]))\n\
    \  (list (largest-negative lst) (smallest-positive lst)))\n", "  (define (largest_negative\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (negative? (car lst))\n  \
    \              (or (not (negative? (cadr lst)))\n                    (< (car lst)\
    \ (cadr lst))))\n           (car lst))\n          (else (largest_negative (cdr\
    \ lst)))))\n  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n  \
    \        ((and (positive? (car lst))\n                (or (not (positive? (cadr\
    \ lst)))\n                    (> (car lst) (cadr lst))))\n           (car lst))\n\
    \          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (define (is_positive? n)\n    (and (number?\
    \ n) (> n 0)))\n  (define (is_negative? n)\n    (and (number? n) (< n 0)))\n \
    \ (define (is_zero? n)\n    (and (number? n) (= n 0)))\n  (define (is_integer?\
    \ n)\n    (and (number? n) (integer? n)))\n  (define (is_not_integer? n)\n   \
    \ (not (is_integer? n)))\n  (define (is_not_zero? n)\n    (not (is_zero? n)))\n\
    \  (define (is_not_positive? n)\n    (not (is_positive? n)))\n  (define (is_not_negative?\
    \ n)\n    (not (is_negative? n)))\n  (define (is_not_zero_or_positive? n)\n  \
    \  (and (is_not_zero? n) (is_not_positive? n)))\n  (define (is_not_zero_or_negative?\
    \ n)\n    (and (is_not_zero? n) (is_not_negative? n)))\n  (define (is_not_zero_or_integer?\
    \ n)\n    (and (is_not_zero? n) (is_not_integer? n)))\n  (define (is_not_zero_or_not_integer?\
    \ n)\n    (and (is_not_zero? n) (is_not_integer? n)))\n  (define (is_not_zero_or_not_positive?\
    \ n)\n    (and (is_not_zero? n) (is_not_positive? n)))\n  (define (is_not_zero_or_not_negative?\
    \ n)\n    (and (is_not_zero? n) (is_not_negative? n)))\n  (define (is_not_zero_or_not_positive_or_not_negative?\
    \ n)\n    (and (is_not_zero? n) (is_not_positive? n) (is_not_negative? n)))\n\
    \  (define (is_not_zero_or_not_positive_or_not_integer?", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n</code>\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_iter (rest lst) largest (first lst))]\n   \
    \   [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n</code>\n", "  (define (is-negative?\
    \ n)\n    (and (number? n) (< n 0)))\n  (define (is-positive? n)\n    (and (number?\
    \ n) (> n 0)))\n  (define (largest-negative lst)\n    (cond [(empty? lst) #f]\n\
    \          [(is-negative? (first lst))\n           (max (first lst) (largest-negative\
    \ (rest lst)))]\n          [else (largest-negative (rest lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond [(empty? lst) #f]\n          [(is-positive? (first lst))\n \
    \          (min (first lst) (smallest-positive (rest lst)))]\n          [else\
    \ (smallest-positive (rest lst))]))\n  (list (largest-negative lst) (smallest-positive\
    \ lst)))\n", "  (define (helper lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (helper (rest lst) largest (first\
    \ lst))]\n      [(and (negative? (first lst)) (or (not largest) (&gt; (first lst)\
    \ largest)))\n       (helper (rest lst) (first lst) smallest)]\n      [else (helper\
    \ (rest lst) largest smallest)]))\n  (helper lst #f #f))\n</code>\n", "  (let\
    \ ((negs (filter (lambda (x) (negative? x)) lst))\n        (pos (filter (lambda\
    \ (x) (positive? x)) lst)))\n    (if (empty? negs)\n        (if (empty? pos)\n\
    \            (list #f #f)\n            (list #f (min pos)))\n        (if (empty?\
    \ pos)\n            (list (max negs) #f)\n            (list (max negs) (min pos))))))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (not (number? (second lst)))))\n       (first lst)]\n\
    \      [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n   \
    \         (or (not (positive? (second lst)))\n                (not (number? (second\
    \ lst)))))\n       (first lst)]\n      [else (smallest_positive (rest lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (let ([negs (filter\
    \ (lambda (x) (< x 0)) lst)]\n        [pos (filter (lambda (x) (> x 0)) lst)])\n\
    \    (if (null? negs)\n        (list #f (car pos))\n        (list (apply max negs)\
    \ (car pos)))))\n", "  (define (largest_negative lst)\n    (cond ((null? lst)\
    \ #f)\n          ((and (negative? (car lst))\n                (or (not (negative?\
    \ (cadr lst)))\n                    (negative? (car lst))\n                  \
    \  (not (negative? (cadr lst)))))\n           (car lst))\n          (else (largest_negative\
    \ (cdr lst)))))\n  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n\
    \          ((and (positive? (car lst))\n                (or (not (positive? (cadr\
    \ lst)))\n                    (positive? (car lst))\n                    (not\
    \ (positive? (cadr lst)))))\n           (car lst))\n          (else (smallest_positive\
    \ (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (is-positive? n)\n    (and (integer? n) (> n 0)))\n  (define (is-negative?\
    \ n)\n    (and (integer? n) (< n 0)))\n  (define (max-negatives lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(is-negative? (first lst))\n       (max (first\
    \ lst) (max-negatives (rest lst)))]\n      [else (max-negatives (rest lst))]))\n\
    \  (define (min-positives lst)\n    (cond\n      [(empty? lst) #f]\n      [(is-positive?\
    \ (first lst))\n       (min (first lst) (min-positives (rest lst)))]\n      [else\
    \ (min-positives (rest lst))]))\n  (list (max-negatives lst) (min-positives lst)))\n",
  "  (define (largest-negative lst)\n    (cond ((null? lst) #f)\n          ((and (negative?\
    \ (car lst))\n                (or (not (negative? (cadr lst)))\n             \
    \       (negative? (car lst))\n                    (and (negative? (cadr lst))\n\
    \                         (> (car lst) (cadr lst)))))\n           (car lst))\n\
    \          (else (largest-negative (cdr lst)))))\n  (define (smallest-positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (positive? (car lst))\n  \
    \              (or (not (positive? (cadr lst)))\n                    (positive?\
    \ (car lst))\n                    (and (positive? (cadr lst))\n              \
    \           (< (car lst) (cadr lst)))))\n           (car lst))\n          (else\
    \ (smallest-positive (cdr lst)))))\n  (list (largest-negative lst) (smallest-positive\
    \ lst)))\n", "  (define (helper lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (< (first lst) smallest)))\n       (helper (rest lst) largest (first\
    \ lst))]\n      [(and (negative? (first lst)) (or (not largest) (> (first lst)\
    \ largest)))\n       (helper (rest lst) (first lst) smallest)]\n      [else (helper\
    \ (rest lst) largest smallest)]))\n  (helper lst #f #f))\n", "  (define (helper\
    \ lst largest smallest)\n    (cond\n      [(null? lst) (list largest smallest)]\n\
    \      [(and (positive? (car lst))\n            (or (not (positive? smallest))\n\
    \                (< (car lst) smallest)))\n       (helper (cdr lst) largest (car\
    \ lst))]\n      [(and (negative? (car lst))\n            (or (not (negative? largest))\n\
    \                (> (car lst) largest)))\n       (helper (cdr lst) (car lst) smallest)]\n\
    \      [else (helper (cdr lst) largest smallest)]))\n  (helper lst #f #f))\n",
  "  (define (largest-negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst))\n            (or (not (negative? (second lst)))\n  \
    \              (negative? (first lst))))\n       (largest-negative (cons (first\
    \ lst) (rest lst)))]\n      [else (largest-negative (rest lst))]))\n  (define\
    \ (smallest-positive lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive?\
    \ (first lst))\n            (or (not (positive? (second lst)))\n             \
    \   (positive? (first lst))))\n       (smallest-positive (cons (first lst) (rest\
    \ lst)))]\n      [else (smallest-positive (rest lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (define (helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (or (not smallest) (< (first lst) smallest)))\n       (helper (rest\
    \ lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not largest)\
    \ (> (first lst) largest)))\n       (helper (rest lst) (first lst) smallest)]\n\
    \      [else (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n",
  "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and (negative?\
    \ (car lst))\n                (or (not (negative? (cadr lst)))\n             \
    \       (negative? (car lst))\n                    (negative? (cadr lst))))\n\
    \           (car lst))\n          (else (largest_negative (cdr lst)))))\n  (define\
    \ (smallest_positive lst)\n    (cond ((null? lst) #f)\n          ((and (positive?\
    \ (car lst))\n                (or (not (positive? (cadr lst)))\n             \
    \       (positive? (car lst))\n                    (positive? (cadr lst))))\n\
    \           (car lst))\n          (else (smallest_positive (cdr lst)))))\n  (list\
    \ (largest_negative lst) (smallest_positive lst)))\n", "  (let ((largest-neg #f)\n\
    \        (smallest-pos #f))\n    (for ([x lst])\n      (cond\n        [(and (negative?\
    \ x) (or (not largest-neg) (< x largest-neg)))\n         (set! largest-neg x)]\n\
    \        [(and (positive? x) (or (not smallest-pos) (> x smallest-pos)))\n   \
    \      (set! smallest-pos x)]))\n    (list largest-neg smallest-pos)))\n", " \
    \ (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and\
    \ (number? (car lst)) (< (car lst) 0))\n           (max (car lst) (largest_negative\
    \ (cdr lst))))\n          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (number? (car lst)) (> (car\
    \ lst) 0))\n           (min (car lst) (smallest_positive (cdr lst))))\n      \
    \    (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_smallest_integers_iter lst largest smallest)\n\
    \    (if (null? lst)\n        (list largest smallest)\n        (cond\n       \
    \  ((and (positive? (car lst)) (or (not (positive? smallest)) (< (car lst) smallest)))\n\
    \          (largest_smallest_integers_iter (cdr lst) largest (car lst)))\n   \
    \      ((and (negative? (car lst)) (or (not (negative? largest)) (> (car lst)\
    \ largest)))\n          (largest_smallest_integers_iter (cdr lst) (car lst) smallest))\n\
    \         (else\n          (largest_smallest_integers_iter (cdr lst) largest smallest)))))\n\
    \  (largest_smallest_integers_iter lst #f #f))\n", "  (define (is-positive? n)\n\
    \    (and (integer? n) (> n 0)))\n  (define (is-negative? n)\n    (and (integer?\
    \ n) (< n 0)))\n  (define (largest-negative lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(is-negative? (first lst))\n       (max (first lst) (largest-negative\
    \ (rest lst)))]\n      [else (largest-negative (rest lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(is-positive? (first lst))\n\
    \       (min (first lst) (smallest-positive (rest lst)))]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (is-positive? x)\n    (and (number? x) (> x 0)))\n  (define (is-negative?\
    \ x)\n    (and (number? x) (< x 0)))\n  (define (is-zero? x)\n    (and (number?\
    \ x) (= x 0)))\n  (define (is-integer? x)\n    (and (number? x) (integer? x)))\n\
    \  (define (is-non-zero-integer? x)\n    (and (is-integer? x) (not (is-zero? x))))\n\
    \  (define (is-non-zero-integer-list? lst)\n    (and (list? lst)\n         (for/and\
    \ ([x lst])\n           (is-non-zero-integer? x))))\n  (define (is-non-zero-integer-list-with-zero?\
    \ lst)\n    (and (list? lst)\n         (for/and ([x lst])\n           (or (is-non-zero-integer?\
    \ x) (is-zero? x)))))\n  (define (is-non-zero-integer-list-with-zero-or-empty?\
    \ lst)\n    (or (is-non-zero-integer-list-with-zero? lst)\n        (empty? lst)))\n\
    \  (define (largest-negative-integer lst)\n    (cond\n      [(is-non-zero-integer-list-with-zero-or-empty?\
    \ lst)\n       (cond\n         [(empty? lst) #f]\n         [(is-negative? (first\
    \ lst))\n          (max (first lst) (largest-negative-integer (rest lst)))]\n\
    \         [else (largest-negative-integer (rest lst))])]\n      [else (error \"\
    Argument is not a list of non-zero integers with zero or empty\")]))\n  (define\
    \ (smallest-positive-integer lst)\n    (cond\n      [(is-non-zero-integer-list-with-zero-or-empty?\
    \ lst)\n       (cond\n         [(empty? lst) #f]\n         [(is-positive? (first\
    \ lst))\n          (min (first", "  (define (largest-negative lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (negative? (first lst))\n            (or\
    \ (not (negative? (second lst)))\n                (empty? (rest lst))))\n    \
    \   (first lst)]\n      [else (largest-negative (rest lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n\
    \            (or (not (positive? (second lst)))\n                (empty? (rest\
    \ lst))))\n       (first lst)]\n      [else (smallest-positive (rest lst))]))\n\
    \  (list (largest-negative lst) (smallest-positive lst)))\n", "  (define (is-negative?\
    \ n)\n    (and (number? n) (< n 0)))\n  (define (is-positive? n)\n    (and (number?\
    \ n) (> n 0)))\n  (define (largest-negative lst)\n    (apply max (filter is-negative?\
    \ lst)))\n  (define (smallest-positive lst)\n    (apply min (filter is-positive?\
    \ lst)))\n  (list (largest-negative lst) (smallest-positive lst)))\n", "  (let\
    \ ([negatives (filter (lambda (x) (< x 0)) lst)]\n        [positives (filter (lambda\
    \ (x) (> x 0)) lst)])\n    (list (if (empty? negatives) #f (apply max negatives))\n\
    \          (if (empty? positives) #f (apply min positives)))))\n", "  (define\
    \ (largest_smallest_integers_helper lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (positive? (first\
    \ lst)) (negative? (first lst))) (list #f #f)]\n    [(positive? (first lst)) (list\
    \ #f (first lst))]\n    [(negative? (first lst)) (list (first lst) #f)]\n    [else\
    \ (largest_smallest_integers (rest lst))]))\n", "  (let ([negs (filter (lambda\
    \ (x) (< x 0)) lst)]\n        [pos (filter (lambda (x) (> x 0)) lst)])\n    (if\
    \ (empty? negs)\n        (list #f (car pos))\n        (list (car (sort negs <))\
    \ (car pos)))))\n", "  (define (largest-neg lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (empty? (rest lst))))\n       (first lst)]\n      [else\
    \ (largest-neg (rest lst))]))\n  (define (smallest-pos lst)\n    (cond\n     \
    \ [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or (not\
    \ (positive? (second lst)))\n                (empty? (rest lst))))\n       (first\
    \ lst)]\n      [else (smallest-pos (rest lst))]))\n  (list (largest-neg lst) (smallest-pos\
    \ lst)))\n", "  (let ([negs (filter (lambda (x) (and (integer? x) (< x 0))) lst)]\n\
    \        [pos (filter (lambda (x) (and (integer? x) (> x 0))) lst)])\n    (if\
    \ (and (empty? negs) (empty? pos))\n        (list #f #f)\n        (list (apply\
    \ max negs) (apply min pos)))))\n", "  (define (largest_negative lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (negative? (first lst))\n            (or\
    \ (not (negative? (second lst)))\n                (and (negative? (second lst))\n\
    \                     (> (first lst) (second lst)))))\n       (first lst)]\n \
    \     [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n   \
    \         (or (not (positive? (second lst)))\n                (and (positive?\
    \ (second lst))\n                     (< (first lst) (second lst)))))\n      \
    \ (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (loop lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (or (not smallest) (< (first lst) smallest)))\n       (loop (rest\
    \ lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not largest)\
    \ (> (first lst) largest)))\n       (loop (rest lst) (first lst) smallest)]\n\
    \      [else (loop (rest lst) largest smallest)]))\n  (loop lst #f #f))\n", " \
    \ (define (helper lst largest smallest)\n    (cond\n      [(null? lst) (list largest\
    \ smallest)]\n      [(and (not (positive? (car lst))) (or (not largest) (&gt;\
    \ (car lst) largest)))\n       (helper (cdr lst) (car lst) smallest)]\n      [(and\
    \ (positive? (car lst)) (or (not smallest) (&lt; (car lst) smallest)))\n     \
    \  (helper (cdr lst) largest (car lst))]\n      [else (helper (cdr lst) largest\
    \ smallest)]))\n  (helper lst #f #f))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n</code>\n", "  (let ([neg-lst\
    \ (filter (lambda (x) (< x 0)) lst)]\n        [pos-lst (filter (lambda (x) (>\
    \ x 0)) lst)])\n    (if (empty? neg-lst)\n        (if (empty? pos-lst)\n     \
    \       (list #f #f)\n            (list #f (apply min pos-lst)))\n        (if\
    \ (empty? pos-lst)\n            (list (apply max neg-lst) #f)\n            (list\
    \ (apply max neg-lst) (apply min pos-lst))))))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(empty? (filter (lambda (x) (and (integer? x) (< x 0)))\
    \ lst)) (list #f (min (filter integer? lst)))]\n    [(empty? (filter (lambda (x)\
    \ (and (integer? x) (> x 0))) lst)) (list (max (filter integer? lst)) #f)]\n \
    \   [else (list (max (filter (lambda (x) (and (integer? x) (< x 0))) lst)) (min\
    \ (filter (lambda (x) (and (integer? x) (> x 0))) lst)))]))\n", "  (define (largest-negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (negative? (first\
    \ lst))))\n       (largest-negative (cons (first lst) (rest lst)))]\n      [else\
    \ (largest-negative (rest lst))]))\n  (define (smallest-positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or\
    \ (not (positive? (second lst)))\n                (positive? (first lst))))\n\
    \       (smallest-positive (cons (first lst) (rest lst)))]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (helper lst largest smallest)\n    (cond\n      [(empty? lst) (list largest\
    \ smallest)]\n      [(and (positive? (first lst)) (not smallest)) (helper (rest\
    \ lst) largest (first lst))]\n      [(and (negative? (first lst)) (not largest))\
    \ (helper (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst))\
    \ (< (first lst) smallest)) (helper (rest lst) largest (first lst))]\n      [(and\
    \ (negative? (first lst)) (> (first lst) largest)) (helper (rest lst) (first lst)\
    \ smallest)]\n      [else (helper (rest lst) largest smallest)]))\n  (helper lst\
    \ #f #f))\n", "  (let ([neg (filter (lambda (x) (< x 0)) lst)]\n        [pos (filter\
    \ (lambda (x) (> x 0)) lst)])\n    (if (empty? neg)\n        (list #f (min pos))\n\
    \        (list (max neg) (if (empty? pos) #f (min pos))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
