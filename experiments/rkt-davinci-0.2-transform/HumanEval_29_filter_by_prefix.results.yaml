language: rkt
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-prefix? prefix x)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpla_8fmu0.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj4yq5kt6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
