name: HumanEval_22_filter_integers
language: rkt
prompt: "#lang racket\n\n;; Filter given list of any python values only for integers\n\
  ;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers\
  \ (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers\
  \ values)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_integers))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 4 #hash() (list ) 23.2 9 \"adasd\")) (list 4 9))\n    (check-equal? (candidate\
  \ (list 3 \"c\" 3 3 \"a\" \"b\")) (list 3 3 3))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (x) (integer? x)) values))\n", "  (filter (lambda\
    \ (x) (integer? x)) values))\n", "  (filter (lambda (x) (integer? x)) values))\n",
  "  (filter (lambda (x) (integer? x)) values))\n", "  (filter (lambda (x) (integer?\
    \ x)) values))\n", "  (filter (lambda (x) (integer? x)) values))\n", "  (filter\
    \ (lambda (x) (integer? x)) values))\n", "  (filter (lambda (x) (integer? x))\
    \ values))\n", "  (filter (lambda (x) (integer? x)) values))\n", "  (filter (lambda\
    \ (x) (integer? x)) values))\n", "  (filter (lambda (x) (integer? x)) values))\n",
  "  (filter (lambda (x) (integer? x)) values))\n", "  (filter (lambda (x) (integer?\
    \ x)) values))\n", "  (filter (lambda (x) (integer? x)) values))\n", "  (filter\
    \ (lambda (x) (integer? x)) values))\n", "  (filter (lambda (value) (integer?\
    \ value)) values))\n", "  (filter (lambda (x) (integer? x)) values))\n", "  (filter\
    \ (lambda (x) (integer? x)) values))\n", "  (filter (lambda (x) (integer? x))\
    \ values))\n", "  (filter (lambda (x) (integer? x)) values))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
