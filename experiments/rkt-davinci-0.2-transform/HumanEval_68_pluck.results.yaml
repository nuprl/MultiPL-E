language: rkt
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (null? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (null? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu02kld0j.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpu02kld0j.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]) ([i (in-naturals)])\n \
    \        (if (and (even? (list-ref arr i))\n                  (< (list-ref arr\
    \ i) min-even))\n             (values (list-ref arr i) i)\n             (values\
    \ min-even min-even-index)))]\n       (list min-even min-even-index))]\n    [else\
    \ (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmprotqqu8p.rkt:37:47: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039851
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfwlfdtw.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfwlfdtw.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (list min-even\n                  (index-of min-even arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsenh03yk.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsenh03yk.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsenh03yk.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsenh03yk.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsenh03yk.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsenh03yk.rkt:49:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsenh03yk.rkt:50:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp60gdczwr.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp60gdczwr.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([smallest (apply min evens)])\n          (list smallest (index\
    \ arr smallest))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp795wcn29.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp795wcn29.rkt:33:26\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([res (pluck (rest arr))])\n                (if (empty? res)\n\
    \                    empty\n                    (list (first res) (+ 1 (second\
    \ res)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr4xu8azn.rkt:41:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr4xu8azn.rkt:45:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (null? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (null? evens)\n            (list)\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1ry3v4cs.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp1ry3v4cs.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 1 empty))]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxc195d7b.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxc195d7b.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [index (index-of min-even\
    \ arr)])\n        (list min-even index))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgk2_wit4.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgk2_wit4.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgk2_wit4.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgk2_wit4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgk2_wit4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgk2_wit4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgk2_wit4.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (let ([plucked (pluck (rest arr))])\n                (if\
    \ (empty? plucked)\n                    (list)\n                    (if (and (even?\
    \ (first plucked))\n                             (< (first plucked) (first arr)))\n\
    \                        plucked\n                        (list (first arr) 0))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pr70_jr.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pr70_jr.rkt:45:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pr70_jr.rkt:47:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pr70_jr.rkt:48:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pr70_jr.rkt:49:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pr70_jr.rkt:50:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr))\n         (let ([min\
    \ (first arr)])\n           (for/fold ([min (first arr)]) ([i (in-list (rest arr))])\n\
    \             (if (and (even? i) (< i min))\n                 (values i i)\n \
    \                (values min min))))]\n        [else (pluck (rest arr))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyzvu_9qz.rkt:43:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpyzvu_9qz.rkt:44:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyzvu_9qz.rkt:46:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpyzvu_9qz.rkt:47:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyzvu_9qz.rkt:48:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpyzvu_9qz.rkt:49:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([smallest (apply min evens)])\n          (list smallest (index\
    \ arr smallest))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp795wcn29.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp795wcn29.rkt:33:26\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkn8fltv_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkn8fltv_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (null? evens)\n        (list)\n \
    \       (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (get-evens arr)\n\
    \    (filter is-even? arr))\n  (define (get-min-even arr)\n    (apply min (get-evens\
    \ arr)))\n  (define (get-index-of-min-even arr)\n    (index-of (get-min-even arr)\
    \ arr))\n  (define (index-of n arr)\n    (if (empty? arr)\n        -1\n      \
    \  (if (= (first arr) n)\n            0\n            (+ 1 (index-of n (rest arr))))))\n\
    \  (if (empty? arr)\n      (list)\n      (list (get-min-even arr) (get-index-of-min-even\
    \ arr))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4gj4htoj.rkt:59:4\n\
    \nmin: arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (null? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n   \
    \          [smallest-even (apply min evens)]\n             [smallest-even-index\
    \ (index arr smallest-even)])\n        (list smallest-even smallest-even-index))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_imgooq3.rkt:33:35: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp_imgooq3.rkt:33:35\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8ruakee.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8ruakee.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8ruakee.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8ruakee.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8ruakee.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo8ruakee.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnyqvrc93.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnyqvrc93.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (null? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (null? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu02kld0j.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpu02kld0j.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]) ([i (in-list (rest arr))])\n\
    \         (if (and (even? i) (< i min-even))\n             (values i (+ 1 i))\n\
    \             (values min-even min-even-index)))]\n     (list min-even min-even-index))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpx94f40jn.rkt:36:47: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (let* ([index (index-of min-even arr)]\n                \
    \   [value (list-ref arr index)])\n              (list value index))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg1t3drko.rkt:44:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg1t3drko.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg1t3drko.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg1t3drko.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg1t3drko.rkt:49:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg1t3drko.rkt:50:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg1t3drko.rkt:51:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxvklxvxe.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxvklxvxe.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxvklxvxe.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxvklxvxe.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxvklxvxe.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxvklxvxe.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m54jm2b.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m54jm2b.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m54jm2b.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m54jm2b.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m54jm2b.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9m54jm2b.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpachztbf9.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpachztbf9.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]) ([index (in-naturals)])\n\
    \         (if (and (even? (list-ref arr index))\n                  (< (list-ref\
    \ arr index) min-even))\n             (values (list-ref arr index) index)\n  \
    \           (values min-even min-even-index)))]\n       (list min-even min-even-index))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpdb5okgp4.rkt:37:47: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([smallest-even-value\
    \ (first arr)])\n       (for/fold ([smallest-even-value-index 0]\n           \
    \       [smallest-even-value-index-found? #f])\n                 ([i (in-naturals)])\n\
    \                 (cond\n                   [(and (even? (list-ref arr i))\n \
    \                        (< (list-ref arr i) smallest-even-value))\n         \
    \           (values (list-ref arr i) i #t)]\n                   [(and (even? (list-ref\
    \ arr i))\n                         (= (list-ref arr i) smallest-even-value))\n\
    \                    (cond\n                      [(not smallest-even-value-index-found?)\n\
    \                       (values smallest-even-value i #t)]\n                 \
    \     [(> i smallest-even-value-index)\n                       (values smallest-even-value\
    \ i #t)]\n                      [else\n                       (values smallest-even-value\
    \ smallest-even-value-index #t)])]\n                   [else\n               \
    \     (values smallest-even-value smallest-even-value-index #f)])))\n       (list\
    \ smallest-even-value smallest-even-value-index))]\n    [else\n     (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpsao7_suf.rkt:51:59: read-syntax: missing `]` to close `[` on line\
    \ 31, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 32\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-idx (index-of\
    \ min-even arr)])\n        (list min-even min-even-idx))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpujilg_la.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpujilg_la.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpujilg_la.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpujilg_la.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpujilg_la.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpujilg_la.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpujilg_la.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnyqvrc93.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnyqvrc93.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (let ([plucked (pluck (rest arr))])\n                (if\
    \ (empty? plucked)\n                    (list)\n                    (if (even?\
    \ (first plucked))\n                        (if (< (first plucked) (first arr))\n\
    \                            plucked\n                            (list (first\
    \ arr) 0))\n                        (list (first plucked) (+ 1 (second plucked))))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:45:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:46:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:48:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:49:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:50:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:51:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (list min-even (index arr min-even))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpccbj64kb.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpccbj64kb.rkt:35:28\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (null? evens)\n        (list)\n \
    \       (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5jj6a_g.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let loop ([arr arr] [min-even-value #f] [min-even-index #f])\n    (cond [(empty?\
    \ arr) (list min-even-value min-even-index)]\n          [(and (even? (first arr))\
    \ (or (not min-even-value) (< (first arr) min-even-value)))\n           (loop\
    \ (rest arr) (first arr) (add1 (length arr))) ]\n          [else (loop (rest arr)\
    \ min-even-value min-even-index)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqowtwtrk.rkt:40:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqowtwtrk.rkt:41:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqowtwtrk.rkt:42:4

    actual:     ''(#f #f)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqowtwtrk.rkt:43:4

    actual:     ''(0 6)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqowtwtrk.rkt:44:4

    actual:     ''(0 4)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqowtwtrk.rkt:45:4

    actual:     ''(4 5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqowtwtrk.rkt:46:4

    actual:     ''(6 4)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqowtwtrk.rkt:47:4

    actual:     ''(#f #f)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp60gdczwr.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp60gdczwr.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsdwa69c2.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmpsdwa69c2.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([index (index-of min-even arr)])\n       \
    \         (list min-even index)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp37f18sh0.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp37f18sh0.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp37f18sh0.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp37f18sh0.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp37f18sh0.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp37f18sh0.rkt:49:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (let ([plucked (pluck (rest arr))])\n                (if\
    \ (empty? plucked)\n                    (list)\n                    (if (even?\
    \ (first plucked))\n                        (if (< (first plucked) (first arr))\n\
    \                            plucked\n                            (list (first\
    \ arr) 0))\n                        (list (first plucked) (+ 1 (second plucked))))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:45:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:46:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:48:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:49:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:50:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:51:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(empty? (filter even? arr)) (list)]\n\
    \    [else (list (apply min (filter even? arr)) (index-of (apply min (filter even?\
    \ arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lcz4g9.rkt:39:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lcz4g9.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lcz4g9.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lcz4g9.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lcz4g9.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps8lcz4g9.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe5xek9ac.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpe5xek9ac.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkn8fltv_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkn8fltv_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([smallest (apply min\
    \ evens)])\n              (let ([index (index-of smallest arr)])\n           \
    \     (list smallest index)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehci3kyw.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpehci3kyw.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpehci3kyw.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpehci3kyw.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpehci3kyw.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpehci3kyw.rkt:49:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9wy6eomr.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9wy6eomr.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 1 (pluck (rest arr)) ))]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4z3_hzyx.rkt:38:4

    actual:     ''(4 1 2 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4z3_hzyx.rkt:41:4

    actual:     ''(0 1 0 1 4 1 2 1)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4z3_hzyx.rkt:42:4

    actual:     ''(2 1 0 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4z3_hzyx.rkt:43:4

    actual:     ''(4 1 8 1 4 1 8 1)

    expected:   ''(4 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (let ([plucked (pluck (rest arr))])\n                (if\
    \ (empty? plucked)\n                    (list)\n                    (if (even?\
    \ (first plucked))\n                        (if (< (first plucked) (first arr))\n\
    \                            plucked\n                            (list (first\
    \ arr) 0))\n                        (list (first plucked) (+ 1 (second plucked))))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:45:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:46:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:48:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:49:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:50:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprbjwc8q7.rkt:51:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else\
    \ (list (apply min (filter even? arr)) (index-of (apply min (filter even? arr))\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpotqkfjp_.rkt:39:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpotqkfjp_.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpotqkfjp_.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpotqkfjp_.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpotqkfjp_.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpotqkfjp_.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv2l3rvg4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnyqvrc93.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnyqvrc93.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwhjnc0g0.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (let ([res (pluck (rest arr))])\n            (cond\n        \
    \      [(empty? res) (list)]\n              [(even? (first res)) (if (< (first\
    \ res) (first arr)) res (list (first arr) 0))]\n              [else (list (first\
    \ arr) 0)]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b2hhy2s.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b2hhy2s.rkt:44:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b2hhy2s.rkt:46:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b2hhy2s.rkt:47:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b2hhy2s.rkt:48:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b2hhy2s.rkt:49:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1f3najj.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (even? n)\n    (= (remainder n 2) 0))\n  (define (find-even arr)\n \
    \   (cond [(empty? arr) (list)]\n          [(even? (first arr)) (list (first arr)\
    \ (first (rest arr)))]\n          [else (find-even (rest (rest arr)))]))\n  (define\
    \ (find-smallest arr)\n    (cond [(empty? arr) (list)]\n          [(empty? (rest\
    \ arr)) (list (first arr) (first (rest arr)))]\n          [(< (first arr) (first\
    \ (rest arr))) (find-smallest (cons (first arr) (rest (rest arr))))]\n       \
    \   [else (find-smallest (rest (rest arr)))]))\n  (find-smallest (find-even arr)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpltfehjzl.rkt:47:4\n\
    actual:     '()\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpltfehjzl.rkt:48:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpltfehjzl.rkt:50:4\nactual:     '()\nexpected:   '(0 1)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpltfehjzl.rkt:51:4\n\
    actual:     '()\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpltfehjzl.rkt:52:4\nactual:\
    \     '()\nexpected:   '(4 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpltfehjzl.rkt:53:4\nactual:     '()\n\
    expected:   '(6 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp60gdczwr.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp60gdczwr.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [smallest (apply min evens)])\n        (if (empty? evens)\n      \
    \      (list)\n            (list smallest (index-of smallest arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8j_4a9dy.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8j_4a9dy.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8j_4a9dy.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8j_4a9dy.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8j_4a9dy.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8j_4a9dy.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8j_4a9dy.rkt:49:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfwlfdtw.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphfwlfdtw.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p_3qf2z.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(empty? (filter even? arr)) (list)]\n\
    \    [else (list (apply min (filter even? arr))\n                 (index-of (apply\
    \ min (filter even? arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8v0pvnq9.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8v0pvnq9.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8v0pvnq9.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8v0pvnq9.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8v0pvnq9.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8v0pvnq9.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let loop ((arr arr) (min-even #f) (min-even-index #f))\n    (cond\n      [(empty?\
    \ arr) (list min-even min-even-index)]\n      [(and (even? (first arr)) (or (not\
    \ min-even) (< (first arr) min-even)))\n       (loop (rest arr) (first arr) (add1\
    \ (length arr)))]\n      [else (loop (rest arr) min-even min-even-index)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7x_ko0i.rkt:41:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7x_ko0i.rkt:42:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7x_ko0i.rkt:43:4

    actual:     ''(#f #f)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7x_ko0i.rkt:44:4

    actual:     ''(0 6)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7x_ko0i.rkt:45:4

    actual:     ''(0 4)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7x_ko0i.rkt:46:4

    actual:     ''(4 5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7x_ko0i.rkt:47:4

    actual:     ''(6 4)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb7x_ko0i.rkt:48:4

    actual:     ''(#f #f)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp38a89ohh.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3rp_z21m.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039853
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp__zg_u_k.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl4959bvl.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8dnrpeqj.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039852
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else\n     (let* ([rest (pluck (rest arr))]\n            [smallest-even\
    \ (first rest)]\n            [smallest-even-index (second rest)])\n       (cond\n\
    \         [(empty? rest) (list)]\n         [(even? (first arr))\n          (if\
    \ (< (first arr) smallest-even)\n              (list (first arr) 0)\n        \
    \      rest)]\n         [else (list smallest-even (+ smallest-even-index 1))]))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8de8425.rkt:49:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8de8425.rkt:53:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg8de8425.rkt:56:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 1
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe5xek9ac.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpe5xek9ac.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039854
- exit_code: 0
  program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (let ([res (pluck (rest arr))])\n                (if (empty?\
    \ res)\n                    (list)\n                    (list (first res) (+ 1\
    \ (second res)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmos_kf3u.rkt:41:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmos_kf3u.rkt:45:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039854
