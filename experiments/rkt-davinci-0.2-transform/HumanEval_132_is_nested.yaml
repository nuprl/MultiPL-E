name: HumanEval_132_is_nested
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a string as input which contains\
  \ only square brackets.\n;; The function should return True if and only if there\
  \ is a valid subsequence of brackets \n;; where at least one bracket in the subsequence\
  \ is nested.\n;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\"\
  )\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n\
  ;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define\
  \ (is_nested string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nested))\n\
  \    (check-equal? (candidate \"[[]]\") #t)\n    (check-equal? (candidate \"[]]]]]]][[[[[]\"\
  ) #f)\n    (check-equal? (candidate \"[][]\") #f)\n    (check-equal? (candidate\
  \ \"[]\") #f)\n    (check-equal? (candidate \"[[[[]]]]\") #t)\n    (check-equal?\
  \ (candidate \"[]]]]]]]]]]\") #f)\n    (check-equal? (candidate \"[][][[]]\") #t)\n\
  \    (check-equal? (candidate \"[[]\") #f)\n    (check-equal? (candidate \"[]]\"\
  ) #f)\n    (check-equal? (candidate \"[[]][[\") #t)\n    (check-equal? (candidate\
  \ \"[[][]]\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate\
  \ \"[[[[[[[[\") #f)\n    (check-equal? (candidate \"]]]]]]]]\") #f)\n))\n\n(test-humaneval)"
completions: ["  (let loop ([string string] [count 0])\n    (cond\n      [(empty?\
    \ string)\n       (zero? count)]\n      [(equal? (first string) #\\[)\n      \
    \ (loop (rest string) (+ count 1))]\n      [(equal? (first string) #\\])\n   \
    \    (and (positive? count)\n            (loop (rest string) (- count 1)))]\n\
    \      [else\n       (loop (rest string) count)])))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(equal?\
    \ (first string) \"[\") (is_nested-helper (rest string) (cons (first string) stack))]\n\
    \      [(equal? (first string) \"]\") (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]))\n  (is_nested-helper string '()))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count)) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string)\n   \
    \ (if (empty? string)\n        #f\n        (if (equal? (first string) \"[\")\n\
    \            (if (is_nested-helper (rest string))\n                #t\n      \
    \          (if (equal? (first (rest string)) \"]\")\n                    #t\n\
    \                    #f))\n            (if (equal? (first string) \"]\")\n   \
    \             (if (is_nested-helper (rest string))\n                    #t\n \
    \                   #f)\n                (is_nested-helper (rest string))))))\n\
    \  (is_nested-helper (string->list string)))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (not (zero? count)) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (if (= count 0) #t #f)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (if (&gt; count 0) (helper\
    \ (rest string) (- count 1)) #f)]))\n  (helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n \
    \     [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n\
    \      [(char=? (first string) #\\]) (if (> count 0) (is_nested-helper (rest string)\
    \ (- count 1)) #f)]\n      [else (is_nested-helper (rest string) count)]))\n \
    \ (is_nested-helper string 0))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (let loop ([string string] [count 0])\n    (cond [(empty?\
    \ string) (zero? count)]\n          [(char=? (first string) #\\[) (loop (rest\
    \ string) (+ count 1))]\n          [(char=? (first string) #\\]) (and (positive?\
    \ count) (loop (rest string) (- count 1)))]\n          [else (loop (rest string)\
    \ count)])))\n", "  (let loop ([string string] [stack '()])\n    (cond [(empty?\
    \ string) (empty? stack)]\n          [(equal? (first string) #\\[)\n         \
    \  (loop (rest string) (cons (first string) stack))]\n          [(equal? (first\
    \ string) #\\])\n           (and (not (empty? stack))\n                (loop (rest\
    \ string) (rest stack)))]\n          [else (loop (rest string) stack)])))\n",
  "  (define (is_nested-helper string stack)\n    (cond\n      [(empty? string) (empty?\
    \ stack)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (is_nested-helper (rest string) (rest stack)))]\n      [else (is_nested-helper\
    \ (rest string) stack)]))\n  (is_nested-helper string '()))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond ((null? string) (if (= count 0) #t #f))\n         \
    \ ((= (string-length string) 1) (if (= count 1) #t #f))\n          ((string=?\
    \ (substring string 0 1) \"[\") (is_nested-helper (substring string 1) (+ count\
    \ 1)))\n          ((string=? (substring string 0 1) \"]\") (is_nested-helper (substring\
    \ string 1) (- count 1)))\n          (else (is_nested-helper (substring string\
    \ 1) count))))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond [(empty? string) (if (= count 0) #t #f)]\n        \
    \  [(equal? (first string) \"[\") (is_nested-helper (rest string) (+ count 1))]\n\
    \          [(equal? (first string) \"]\") (if (= count 0) #f (is_nested-helper\
    \ (rest string) (- count 1)))]))\n  (is_nested-helper string 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(equal? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(equal? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string)\n    (cond\n  \
    \    [(empty? string) #f]\n      [(equal? (first string) \"[\") (helper (rest\
    \ string))]\n      [(equal? (first string) \"]\") (or (helper (rest string)) (not\
    \ (empty? (rest string))))]))\n  (helper (string->list string)))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (= count\
    \ 0)]\n      [(string-contains? string \"[\") (is_nested-helper (substring string\
    \ 1) (+ count 1))]\n      [(string-contains? string \"]\") (is_nested-helper (substring\
    \ string 1) (- count 1))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(equal?\
    \ (first string) \"[\") (is_nested-helper (rest string) (+ count 1))]\n      [(equal?\
    \ (first string) \"]\") (is_nested-helper (rest string) (- count 1))]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n     \
    \ [(empty? string) (empty? stack)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and\
    \ (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n     \
    \ [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (is_nested-helper string count)\n    (cond\n      [(empty?\
    \ string) (if (= count 0) #t #f)]\n      [(= (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(= (first string) #\\]) (if (&gt; count\
    \ 0) (is_nested-helper (rest string) (- count 1)) #f)]))\n  (is_nested-helper\
    \ string 0))\n</code>\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(equal? (first string) \"[\") (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) \"]\") (and (not\
    \ (zero? count)) (is_nested-helper (rest string) (- count 1)))]))\n  (is_nested-helper\
    \ (string-&gt;list string) 0))\n</code>\nI'm not sure if this is the most elegant\
    \ solution, but it works.\n", "  (define (helper string count)\n    (cond\n  \
    \    [(empty? string) (zero? count)]\n      [(equal? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) #\\]) (and (positive?\
    \ count) (helper (rest string) (- count 1)))]))\n  (helper string 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(equal? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(equal? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (zero? count)]\n      [(equal? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(equal? (first string)\
    \ #\\]) (and (positive? count) (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (helper string count)\n    (cond ((null? string) (if (= count\
    \ 0) #t #f))\n          ((equal? (car string) \"[\") (helper (cdr string) (+ count\
    \ 1)))\n          ((equal? (car string) \"]\") (if (= count 0) #f (helper (cdr\
    \ string) (- count 1))))\n          (else (helper (cdr string) count))))\n  (helper\
    \ (string->list string) 0))\n", "  (define (is_nested-helper string count)\n \
    \   (cond\n      [(empty? string) (zero? count)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\]) (and (positive? count) (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (= count 0)]\n      [(= (first string) #\\[) (helper (rest string) (+ count\
    \ 1))]\n      [(= (first string) #\\]) (and (not (zero? count)) (helper (rest\
    \ string) (- count 1)))]\n      [else (helper (rest string) count)]))\n  (helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond [(empty?\
    \ string) (zero? count)]\n          [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n          [(char=? (first string) #\\]) (is_nested-helper\
    \ (rest string) (- count 1))]\n          [else (is_nested-helper (rest string)\
    \ count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper string\
    \ count)\n    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n      [(equal?\
    \ (first string) \"[\") (is_nested-helper (rest string) (+ count 1))]\n      [(equal?\
    \ (first string) \"]\") (if (> count 0) (is_nested-helper (rest string) (- count\
    \ 1)) #f)]))\n  (is_nested-helper (string-&gt;list string) 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(equal? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(equal? (first string) #\\]) (and (not (zero? count)) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (let loop ([string string] [count 0])\n    (cond\n     \
    \ [(empty? string)\n       (zero? count)]\n      [(equal? (first string) #\\[)\n\
    \       (loop (rest string) (+ count 1))]\n      [(equal? (first string) #\\])\n\
    \       (and (positive? count)\n            (loop (rest string) (- count 1)))]\n\
    \      [else\n       (loop (rest string) count)])))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (positive? count) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (zero? count)]\n      [(equal? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (not (zero? count)) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (helper string stack)\n    (cond\n      [(empty? string)\
    \ (empty? stack)]\n      [(char=? (first string) #\\[) (helper (rest string) (cons\
    \ #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (helper (rest string) (rest stack)))]))\n  (helper string '()))\n", "  (let\
    \ loop ([string string] [count 0])\n    (if (string-empty? string)\n        (if\
    \ (= count 0)\n            #t\n            #f)\n        (let ([char (string-ref\
    \ string 0)])\n          (if (or (= char #\\[) (= char #\\]))\n              (if\
    \ (= char #\\[)\n                  (loop (substring string 1) (+ count 1))\n \
    \                 (if (&gt; count 0)\n                      (loop (substring string\
    \ 1) (- count 1))\n                      #f))\n              (loop (substring\
    \ string 1) count))))))\n</code>\n", "  (define (helper string)\n    (cond\n \
    \     [(empty? string) #f]\n      [(equal? (first string) \"[\") (helper (rest\
    \ string))]\n      [(equal? (first string) \"]\") (or (helper (rest string)) (not\
    \ (empty? (rest string))))]))\n  (helper (string->list string)))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (if (= count\
    \ 0) #t #f)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (if (> count 0) (is_nested-helper\
    \ (rest string) (- count 1)) #f)]\n      [else (is_nested-helper (rest string)\
    \ count)]))\n  (is_nested-helper string 0))\n", "  (let loop ([string string]\
    \ [count 0])\n    (cond [(empty? string) (zero? count)]\n          [(equal? (first\
    \ string) #\\[) (loop (rest string) (+ count 1))]\n          [(equal? (first string)\
    \ #\\]) (and (positive? count) (loop (rest string) (- count 1)))]\n          [else\
    \ (loop (rest string) count)])))\n", "  (define (helper string)\n    (cond\n \
    \     [(empty? string) #f]\n      [(equal? (first string) \"[\") (helper (rest\
    \ string))]\n      [(equal? (first string) \"]\") #t]\n      [else (helper (rest\
    \ string))]))\n  (helper string))\n", "  (let ([stack (list)])\n    (for ([char\
    \ (in-string string)])\n      (cond\n        [(equal? char #\\[) (push char stack)]\n\
    \        [(equal? char #\\]) (pop stack)]))\n    (empty? stack)))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(equal? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(equal? (first string) #\\]) (and (not (zero? count)) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(equal? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) #\\]) (and (positive?\
    \ count) (helper (rest string) (- count 1)))]))\n  (helper string 0))\n", "  (define\
    \ (is_nested-helper string open-brackets)\n    (cond\n      [(empty? string) (zero?\
    \ open-brackets)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest\
    \ string) (+ open-brackets 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ open-brackets) (is_nested-helper (rest string) (- open-brackets 1)))]\n    \
    \  [else (is_nested-helper (rest string) open-brackets)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n     \
    \ [(empty? string) (empty? stack)]\n      [(equal? (first string) \"[\") (is_nested-helper\
    \ (rest string) (cons (first string) stack))]\n      [(equal? (first string) \"\
    ]\") (and (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]))\n\
    \  (is_nested-helper string '()))\n", "  (define (is_nested-helper string count)\n\
    \    (cond ((null? string) (if (= count 0) #t #f))\n          ((string=? (car\
    \ string) \"[\") (is_nested-helper (cdr string) (+ count 1)))\n          ((string=?\
    \ (car string) \"]\") (is_nested-helper (cdr string) (- count 1)))\n         \
    \ (else (is_nested-helper (cdr string) count))))\n  (is_nested-helper (string->list\
    \ string) 0))\n", "  (define (is_nested-helper string count)\n    (cond\n    \
    \  [(empty? string) (= count 0)]\n      [(equal? (first string) \"[\") (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) \"]\") (is_nested-helper\
    \ (rest string) (- count 1))]))\n  (is_nested-helper string 0))\n", "  (define\
    \ (helper string)\n    (if (empty? string)\n        #f\n        (if (equal? (first\
    \ string) \"[\")\n            (if (equal? (last string) \"]\")\n             \
    \   #t\n                (helper (rest string)))\n            (helper (rest string)))))\n\
    \  (helper string))\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(equal? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ string)\n    (cond\n      [(empty? string) #f]\n      [(equal? (first string)\
    \ \"[\") (helper (rest string))]\n      [(equal? (first string) \"]\") (or (helper\
    \ (rest string)) (and (not (empty? (rest string))) (equal? (first (rest string))\
    \ \"[\")))]\n      [else (helper (rest string))]))\n  (helper (string->list string)))\n",
  "  (let loop ([string string] [count 0])\n    (cond [(empty? string) (zero? count)]\n\
    \          [(equal? (first string) #\\[) (loop (rest string) (+ count 1))]\n \
    \         [(equal? (first string) #\\]) (and (positive? count) (loop (rest string)\
    \ (- count 1)))]\n          [else (loop (rest string) count)])))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (= count\
    \ 0)]\n      [(equal? (first string) \"[\") (is_nested-helper (rest string) (+\
    \ count 1))]\n      [(equal? (first string) \"]\") (and (is_nested-helper (rest\
    \ string) (- count 1))\n                                        (not (= count\
    \ 0)))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper string\
    \ count)\n    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (if (= count 0) #f (is_nested-helper (rest string) (- count\
    \ 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (if (= count 0) #t #f)]\n      [(char=? (first string) #\\\
    [) (is_nested-helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\]) (if (= count 0) #f (is_nested-helper (rest string) (- count 1)))]\n  \
    \    [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (is_nested-helper string count)\n    (cond\n      [(empty?\
    \ string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string counter)\n    (cond\n      [(empty? string) (zero? counter)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ counter 1))]\n     \
    \ [(char=? (first string) #\\]) (and (positive? counter) (is_nested-helper (rest\
    \ string) (- counter 1)))]\n      [else (is_nested-helper (rest string) counter)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (is_nested-helper string count)\n    (cond\n   \
    \   [(empty? string)\n       (= count 0)]\n      [(char=? (first string) #\\[)\n\
    \       (is_nested-helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\])\n       (and (not (= count 0))\n            (is_nested-helper (rest string)\
    \ (- count 1)))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(equal?\
    \ (first string) \"[\") (is_nested-helper (rest string) (+ count 1))]\n      [(equal?\
    \ (first string) \"]\") (is_nested-helper (rest string) (- count 1))]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (if (= count 0) #t #f)]\n      [(equal? (first string) \"[\"\
    ) (is_nested-helper (rest string) (+ count 1))]\n      [(equal? (first string)\
    \ \"]\") (is_nested-helper (rest string) (- count 1))]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (if (empty? string)\n        (if (= count 0)\n          \
    \  #t\n            #f)\n        (if (= (first string) #\\[)\n            (is_nested-helper\
    \ (rest string) (+ count 1))\n            (if (= (first string) #\\])\n      \
    \          (if (&gt; count 0)\n                    (is_nested-helper (rest string)\
    \ (- count 1))\n                    #f)\n                #f))))\n  (is_nested-helper\
    \ string 0))\n</code>\n", "  (let ([stack (list)])\n    (for ([c (in-string string)])\n\
    \      (cond\n        [(equal? c #\\[) (push c stack)]\n        [(equal? c #\\\
    ]) (pop stack)]))\n    (not (empty? stack))))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (positive? count) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string)\n    (cond [(empty? string)\
    \ #f]\n          [(equal? (first string) \"[\") (is_nested-helper (rest string))]\n\
    \          [(equal? (first string) \"]\") #t]\n          [else (is_nested-helper\
    \ (rest string))]))\n  (is_nested-helper (string->list string)))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (if (= count\
    \ 0) #t #f)]\n      [(equal? (first string) \"[\") (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(equal? (first string) \"]\") (is_nested-helper (rest\
    \ string) (- count 1))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string)\n    (cond\n      [(empty? string) #f]\n      [(equal? (first string)\
    \ \"[\") (is_nested-helper (rest string))]\n      [(equal? (first string) \"]\"\
    ) (is_nested-helper (rest string))]\n      [else #t]))\n  (is_nested-helper (string->list\
    \ string)))\n", "  (define (helper str)\n    (if (empty? str)\n        #f\n  \
    \      (if (equal? (first str) \"[\")\n            (if (equal? (last str) \"]\"\
    )\n                #t\n                (helper (rest str)))\n            (helper\
    \ (rest str)))))\n  (helper (string->list string)))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\]) (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n", "  (define (is_nested-helper string open-count)\n\
    \    (cond\n      [(empty? string) (zero? open-count)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (+ open-count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (positive? open-count) (is_nested-helper (rest string)\
    \ (- open-count 1)))]\n      [else (is_nested-helper (rest string) open-count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (if (empty? string)\n        (if (= count 0)\n            #t\n          \
    \  #f)\n        (if (= (first string) #\\[)\n            (is_nested-helper (rest\
    \ string) (+ count 1))\n            (if (= (first string) #\\])\n            \
    \    (if (> count 0)\n                    (is_nested-helper (rest string) (- count\
    \ 1))\n                    #f)\n                (is_nested-helper (rest string)\
    \ count)))))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string stack)\n    (if (empty? string)\n        (not (empty? stack))\n     \
    \   (cond\n         ((char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (cons #\\[ stack)))\n         ((char=? (first string) #\\]) (and (not (empty?\
    \ stack)) (is_nested-helper (rest string) (rest stack))))\n         (else (is_nested-helper\
    \ (rest string) stack)))))\n  (is_nested-helper string '()))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond [(empty? string) (zero? count)]\n          [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n       \
    \   [(char=? (first string) #\\]) (is_nested-helper (rest string) (- count 1))]\n\
    \          [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond ((empty?\
    \ string) (zero? count))\n          ((equal? (first string) \"[\") (is_nested-helper\
    \ (rest string) (+ count 1)))\n          ((equal? (first string) \"]\") (is_nested-helper\
    \ (rest string) (- count 1)))\n          (else (is_nested-helper (rest string)\
    \ count))))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper string\
    \ count)\n    (if (string-empty? string)\n        (if (= count 0)\n          \
    \  #t\n            #f)\n        (if (string=? (string-ref string 0) #\\[)\n  \
    \          (is_nested-helper (substring string 1) (+ count 1))\n            (if\
    \ (string=? (string-ref string 0) #\\])\n                (if (= count 0)\n   \
    \                 #f\n                    (is_nested-helper (substring string\
    \ 1) (- count 1)))\n                #f))))\n  (is_nested-helper string 0))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (=\
    \ count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count))\
    \ (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(equal?\
    \ (first string) \"[\") (is_nested-helper (rest string) (+ count 1))]\n      [(equal?\
    \ (first string) \"]\") (is_nested-helper (rest string) (- count 1))]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (equal? count 0)]\n      [(equal? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) #\\]) (and (not (equal?\
    \ count 0)) (is_nested-helper (rest string) (- count 1)))]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (zero? count)]\n      [(equal? (first string) \"[\") (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) \"]\") (is_nested-helper\
    \ (rest string) (- count 1))]))\n  (is_nested-helper (string-&gt;list string)\
    \ 0))\n</code>\n", "  (define (is_nested-helper string stack)\n    (cond\n   \
    \   [(empty? string) (and (empty? stack) #t)]\n      [(char=? (first string) #\\\
    [) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\])\n       (cond\n         [(empty? stack) #f]\n         [else (is_nested-helper\
    \ (rest string) (rest stack))])]))\n  (is_nested-helper string empty))\n", " \
    \ (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (=\
    \ count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (is-positive? count)\
    \ (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string counter)\n    (cond\n      [(empty? string) (zero? counter)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ counter 1))]\n     \
    \ [(char=? (first string) #\\]) (and (positive? counter) (is_nested-helper (rest\
    \ string) (- counter 1)))]\n      [else (is_nested-helper (rest string) counter)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (equal? count 0)]\n      [(equal? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(equal? (first string)\
    \ #\\]) (and (is_nested-helper (rest string) (- count 1)) (not (equal? count 0)))]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (zero? count)]\n      [(equal? (first string)\
    \ \"[\") (is_nested-helper (rest string) (+ count 1))]\n      [(equal? (first\
    \ string) \"]\") (and (is-positive? count) (is_nested-helper (rest string) (-\
    \ count 1)))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond [(empty? string) (zero? count)]\n          [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n       \
    \   [(char=? (first string) #\\]) (and (positive? count) (is_nested-helper (rest\
    \ string) (- count 1)))]\n          [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string)\n    (cond\n  \
    \    [(empty? string) #f]\n      [(and (equal? (first string) #\\[) (equal? (last\
    \ string) #\\])) #t]\n      [else (helper (rest string))]))\n  (helper string))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (if\
    \ (= count 0) #t #f)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest\
    \ string) (+ count 1))]\n      [(char=? (first string) #\\]) (if (> count 0) (is_nested-helper\
    \ (rest string) (- count 1)) #f)]\n      [else (is_nested-helper (rest string)\
    \ count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper string\
    \ stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=?\
    \ (first string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string)\
    \ (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (is_nested-helper string count)\n    (cond\n   \
    \   [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\]) (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (zero? count)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\]) (and (positive? count) (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (is_nested-helper string count)\n    (cond\n      [(empty?\
    \ string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n \
    \     [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n\
    \      [(char=? (first string) #\\]) (if (> count 0) (is_nested-helper (rest string)\
    \ (- count 1)) #f)]\n      [else (is_nested-helper (rest string) count)]))\n \
    \ (is_nested-helper string 0))\n", "  (let loop ([string string] [count 0])\n\
    \    (cond [(empty? string) (zero? count)]\n          [(equal? (first string)\
    \ #\\[) (loop (rest string) (+ count 1))]\n          [(equal? (first string) #\\\
    ]) (and (positive? count) (loop (rest string) (- count 1)))]\n          [else\
    \ (loop (rest string) count)])))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string)\n       (= count 0)]\n      [(char=? (first\
    \ string) #\\[)\n       (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\])\n       (and (positive? count)\n            (is_nested-helper\
    \ (rest string) (- count 1)))]))\n  (is_nested-helper string 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (if (empty? string)\n        (if (= count\
    \ 0)\n            #t\n            #f)\n        (if (= (string-ref string 0) #\\\
    [)\n            (is_nested-helper (substring string 1) (+ count 1))\n        \
    \    (if (= (string-ref string 0) #\\])\n                (if (&gt; count 0)\n\
    \                    (is_nested-helper (substring string 1) (- count 1))\n   \
    \                 #f)\n                #f))))\n  (is_nested-helper string 0))\n\
    </code>\n", "  (define (is_nested_helper string count)\n    (cond\n      [(empty?\
    \ string) (if (= count 0) #t #f)]\n      [(char=? (first string) #\\[) (is_nested_helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (if (&gt; count\
    \ 0) (is_nested_helper (rest string) (- count 1)) #f)]))\n  (is_nested_helper\
    \ string 0))\n</code>\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(equal? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond [(empty? string) (empty? stack)]\n          [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \         [(char=? (first string) #\\]) (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]))\n  (is_nested-helper string '()))\n", "  (define\
    \ (is_nested-helper string level)\n    (cond\n      [(empty? string) (zero? level)]\n\
    \      [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ level\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (zero? level)) (is_nested-helper\
    \ (rest string) (- level 1)))]\n      [else (is_nested-helper (rest string) level)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond ((null? string) (if (= count 0) #t #f))\n          ((equal? (car string)\
    \ #\\[) (is_nested-helper (cdr string) (+ count 1)))\n          ((equal? (car\
    \ string) #\\]) (if (= count 0) #f (is_nested-helper (cdr string) (- count 1))))\n\
    \          (else (is_nested-helper (cdr string) count))))\n  (is_nested-helper\
    \ (string->list string) 0))\n", "  (let loop ([string string] [count 0])\n   \
    \ (cond [(empty? string) (zero? count)]\n          [(equal? (first string) #\\\
    [) (loop (rest string) (+ count 1))]\n          [(equal? (first string) #\\])\
    \ (and (positive? count) (loop (rest string) (- count 1)))]\n          [else (loop\
    \ (rest string) count)])))\n", "  (define (helper string count)\n    (cond\n \
    \     [(empty? string) (if (= count 0) #t #f)]\n      [(equal? (first string)\
    \ \"[\") (helper (rest string) (+ count 1))]\n      [(equal? (first string) \"\
    ]\") (if (= count 0) #f (helper (rest string) (- count 1)))]))\n  (helper string\
    \ 0))\n", "  (define (helper string count)\n    (cond\n      [(empty? string)\
    \ (if (= count 0) #t #f)]\n      [(equal? (first string) \"[\") (helper (rest\
    \ string) (+ count 1))]\n      [(equal? (first string) \"]\") (if (> count 0)\
    \ (helper (rest string) (- count 1)) #f)]))\n  (helper string 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count)) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (zero? count)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\]) (and (positive? count) (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (is_nested-helper string)\n    (cond\n      [(empty? string)\
    \ #f]\n      [(equal? (first string) \"[\") (is_nested-helper (rest string))]\n\
    \      [(equal? (first string) \"]\") (is_nested-helper (rest string))]\n    \
    \  [else #t]))\n  (is_nested-helper (string->list string)))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(equal?\
    \ (first string) \"[\") (is_nested-helper (rest string) (cons (first string) stack))]\n\
    \      [(equal? (first string) \"]\") (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]))\n  (is_nested-helper string '()))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string count)\n    (if\
    \ (empty? string)\n        (if (= count 0)\n            #t\n            #f)\n\
    \        (if (= (first string) #\\[)\n            (helper (rest string) (+ count\
    \ 1))\n            (if (= (first string) #\\])\n                (if (&gt; count\
    \ 0)\n                    (helper (rest string) (- count 1))\n               \
    \     #f)\n                (helper (rest string) count)))))\n  (helper string\
    \ 0))\n</code>\n", "  (define (is_nested-helper string count)\n    (cond\n   \
    \   [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ string)\n    (cond\n      [(empty? string) #f]\n      [(string=? (first string)\
    \ \"[\") (helper (rest string))]\n      [(string=? (first string) \"]\") (or (helper\
    \ (rest string)) (is_nested (rest string)))]))\n  (helper string))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (if (= count\
    \ 0) #t #f)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (if (= count 0) #f (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string)\n   \
    \ (if (empty? string)\n        '()\n        (let ((first (first string))\n   \
    \           (rest (rest string)))\n          (cond\n           ((equal? first\
    \ #\\[)\n            (cons first (is_nested-helper rest)))\n           ((equal?\
    \ first #\\])\n            (if (empty? (rest string))\n                (list first)\n\
    \                (if (equal? (first (rest string)) #\\])\n                   \
    \ (cons first (is_nested-helper (rest (rest string))))\n                    (cons\
    \ first (is_nested-helper (rest string))))))\n           (else\n            (is_nested-helper\
    \ rest))))))\n  (if (empty? (is_nested-helper string))\n      #f\n      #t))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (=\
    \ count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (is-positive? count)\
    \ (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (positive? count) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (is-positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n \
    \     [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n\
    \      [(char=? (first string) #\\]) (if (> count 0) (is_nested-helper (rest string)\
    \ (- count 1)) #f)]\n      [else (is_nested-helper (rest string) count)]))\n \
    \ (is_nested-helper string 0))\n", "  (define (is_nested-helper string)\n    (cond\n\
    \      [(empty? string) #f]\n      [(equal? (first string) \"[\") (is_nested-helper\
    \ (rest string))]\n      [(equal? (first string) \"]\") #t]\n      [else (is_nested-helper\
    \ (rest string))]))\n  (is_nested-helper (string->list string)))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count)) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string count)\n    (if\
    \ (empty? string)\n        (if (= count 0)\n            #t\n            #f)\n\
    \        (if (= (first string) #\\[)\n            (helper (rest string) (+ count\
    \ 1))\n            (if (= (first string) #\\])\n                (if (&gt; count\
    \ 0)\n                    (helper (rest string) (- count 1))\n               \
    \     #f)\n                (helper (rest string) count)))))\n  (helper string\
    \ 0))\n</code>\n", "  (define (is_nested-helper string count)\n    (if (empty?\
    \ string)\n        (zero? count)\n        (let ([char (first string)])\n     \
    \     (cond\n            [(equal? char #\\[) (is_nested-helper (rest string) (+\
    \ count 1))]\n            [(equal? char #\\]) (is_nested-helper (rest string)\
    \ (- count 1))]\n            [else (is_nested-helper (rest string) count)]))))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond\n      [(empty? string) (empty? stack)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first\
    \ string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest\
    \ stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper\
    \ string '()))\n", "  (define (helper string count)\n    (cond\n      [(empty?\
    \ string) (= count 0)]\n      [(char=? (first string) #\\[) (helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (= count 0)) (helper\
    \ (rest string) (- count 1)))]\n      [else (helper (rest string) count)]))\n\
    \  (helper string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string)\n       (if (= count 0)\n \
    \          #t\n           #f)]\n      [(equal? (first string) \"[\")\n       (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) \"]\")\n       (is_nested-helper\
    \ (rest string) (- count 1))]))\n  (is_nested-helper string 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string)\n    (cond\n  \
    \    [(empty? string) #f]\n      [(equal? (first string) \"[\") (helper (rest\
    \ string))]\n      [(equal? (first string) \"]\") (or (helper (rest string)) (not\
    \ (empty? (rest string))))]))\n  (helper (string->list string)))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(equal? (first string) #\\[) (helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) #\\]) (and (positive?\
    \ count) (helper (rest string) (- count 1)))]))\n  (helper string 0))\n", "  (define\
    \ (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero? count)]\n\
    \      [(equal? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(equal? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (zero? count)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\]) (and (positive? count) (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (is_nested-helper string count)\n    (if (empty? string)\n\
    \        (if (= count 0)\n            #t\n            #f)\n        (if (= (first\
    \ string) #\\[)\n            (is_nested-helper (rest string) (+ count 1))\n  \
    \          (if (= (first string) #\\])\n                (if (&gt; count 0)\n \
    \                   (is_nested-helper (rest string) (- count 1))\n           \
    \         #f)\n                #f))))\n  (is_nested-helper string 0))\n</code>\n",
  "  (let loop ([string string] [open 0] [close 0])\n    (cond\n      [(empty? string)\
    \ (and (zero? open) (zero? close))]\n      [(string=? (first string) \"[\") (loop\
    \ (rest string) (+ open 1) close)]\n      [(string=? (first string) \"]\") (loop\
    \ (rest string) open (+ close 1))]\n      [else (loop (rest string) open close)])))\n",
  "  (let* ([brackets (string->list string)]\n         [brackets-count (count brackets)])\n\
    \    (if (empty? brackets)\n        #f\n        (let loop ([brackets brackets]\n\
    \                   [brackets-count brackets-count]\n                   [nested\
    \ #f])\n          (if (empty? brackets)\n              nested\n              (let*\
    \ ([first (first brackets)]\n                     [rest (rest brackets)])\n  \
    \              (if (or (equal? first #\\[)\n                        (equal? first\
    \ #\\]))\n                    (if (equal? first #\\[)\n                      \
    \  (loop rest (- brackets-count 1) #t)\n                        (if (equal? brackets-count\
    \ 0)\n                            #f\n                            (loop rest (-\
    \ brackets-count 1) #t)))\n                    (loop rest brackets-count nested))))))))\n",
  "  (define (is_nested-helper string)\n    (cond\n      [(empty? string) #f]\n  \
    \    [(equal? (first string) \"[\") (is_nested-helper (rest string))]\n      [(equal?\
    \ (first string) \"]\") (is_nested-helper (rest string))]\n      [else #t]))\n\
    \  (is_nested-helper (string->list string)))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (not (empty? stack))]\n   \
    \   [(char=? (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n\
    \      [(char=? (first string) #\\]) (is_nested-helper (rest string) (rest stack))]\n\
    \      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (is_nested-helper string count)\n    (cond\n      [(empty?\
    \ string) (if (= count 0) #t #f)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (if (> count\
    \ 0) (is_nested-helper (rest string) (- count 1)) #f)]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (let loop ([string\
    \ string] [count 0])\n    (cond [(empty? string) (zero? count)]\n          [(equal?\
    \ (first string) #\\[) (loop (rest string) (+ count 1))]\n          [(equal? (first\
    \ string) #\\]) (and (positive? count) (loop (rest string) (- count 1)))]\n  \
    \        [else (loop (rest string) count)])))\n", "  (define (helper string count)\n\
    \    (cond ((empty? string) (zero? count))\n          ((equal? (first string)\
    \ \"[\") (helper (rest string) (+ count 1)))\n          ((equal? (first string)\
    \ \"]\") (and (not (zero? count)) (helper (rest string) (- count 1))))\n     \
    \     (else (helper (rest string) count))))\n  (helper string 0))\n", "  (cond\n\
    \    [(empty? string) #f]\n    [(string=? string \"[]\") #t]\n    [(string=? string\
    \ \"[\") #f]\n    [(string=? string \"]\") #f]\n    [(string=? (substring string\
    \ 0 1) \"[\")\n     (is_nested (substring string 1))]\n    [(string=? (substring\
    \ string 0 1) \"]\")\n     (is_nested (substring string 1))]\n    [else #f]))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (count\
    \ = 0)]\n      [(eq? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(eq? (first string) #\\]) (and (not (zero? count)) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string)\n    (if (empty?\
    \ string)\n        #f\n        (if (equal? (first string) \"[\")\n           \
    \ (if (equal? (last string) \"]\")\n                #t\n                (helper\
    \ (rest string)))\n            (helper (rest string)))))\n  (helper string))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero?\
    \ count)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (= count 0)]\n      [(equal? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(equal? (first string)\
    \ #\\]) (and (not (zero? count)) (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (let loop ([string string] [count 0])\n    (cond\n      [(empty?\
    \ string) (if (= count 0) #t #f)]\n      [(string-contains? string \"[\") (loop\
    \ (substring string 1) (+ count 1))]\n      [(string-contains? string \"]\") (loop\
    \ (substring string 1) (- count 1))])))\n", "  (define (is_nested-helper string\
    \ stack)\n    (cond\n      [(empty? string) (not (empty? stack))]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\]) (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n", "  (define (is_nested-helper string count)\n\
    \    (cond [(empty? string) (zero? count)]\n          [(equal? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n          [(equal? (first\
    \ string) #\\]) (and (positive? count) (is_nested-helper (rest string) (- count\
    \ 1)))]\n          [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (= count 0)]\n      [(string-contains? string #\\[) (is_nested-helper\
    \ (substring string 1) (+ count 1))]\n      [(string-contains? string #\\]) (is_nested-helper\
    \ (substring string 1) (- count 1))]))\n  (is_nested-helper string 0))\n", " \
    \ (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero?\
    \ count)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero? count))\
    \ (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n \
    \     [(equal? (first string) \"[\") (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(equal? (first string) \"]\") (is_nested-helper (rest string) (-\
    \ count 1))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n \
    \     [(char=? (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n\
    \      [(char=? (first string) #\\]) (if (> count 0) (is_nested-helper (rest string)\
    \ (- count 1)) #f)]\n      [else (is_nested-helper (rest string) count)]))\n \
    \ (is_nested-helper string 0))\n", "  (define (is_nested-helper string stack)\n\
    \    (cond [(empty? string) (empty? stack)]\n          [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n          [(char=?\
    \ (first string) #\\]) (and (not (empty? stack)) (is_nested-helper (rest string)\
    \ (rest stack)))]))\n  (is_nested-helper string '()))\n", "  (define (is_nested-helper\
    \ string accum)\n    (cond\n      [(empty? string) (not (empty? accum))]\n   \
    \   [(equal? (first string) \"[\") (is_nested-helper (rest string) (cons (first\
    \ string) accum))]\n      [(equal? (first string) \"]\") (is_nested-helper (rest\
    \ string) (rest accum))]\n      [else (is_nested-helper (rest string) accum)]))\n\
    \  (is_nested-helper (string->list string) '()))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(equal?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(equal?\
    \ (first string) #\\]) (and (not (zero? count)) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string open-brackets)\n    (cond\n\
    \      [(empty? string)\n       (zero? open-brackets)]\n      [(char=? (first\
    \ string) #\\[)\n       (is_nested-helper (rest string) (+ open-brackets 1))]\n\
    \      [(char=? (first string) #\\])\n       (and (positive? open-brackets)\n\
    \            (is_nested-helper (rest string) (- open-brackets 1)))]\n      [else\n\
    \       (is_nested-helper (rest string) open-brackets)]))\n  (is_nested-helper\
    \ string 0))\n", "  (let loop ([string string] [count 0])\n    (cond\n      [(empty?\
    \ string)\n       (if (zero? count)\n           #t\n           #f)]\n      [(string-contains?\
    \ string \"[\")\n       (loop (substring string 1) (+ count 1))]\n      [(string-contains?\
    \ string \"]\")\n       (loop (substring string 1) (- count 1))]\n      [else\n\
    \       #f])))\n", "  (define (helper string)\n    (cond\n      [(empty? string)\
    \ #f]\n      [(equal? (first string) \"[\") (if (equal? (last string) \"]\") #t\
    \ (helper (rest string)))]\n      [else (helper (rest string))]))\n  (helper string))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero?\
    \ count)]\n      [(equal? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(equal? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (let loop ([string string] [count 0])\n\
    \    (cond [(empty? string) (zero? count)]\n          [(char=? (first string)\
    \ #\\[) (loop (rest string) (+ count 1))]\n          [(char=? (first string) #\\\
    ]) (loop (rest string) (- count 1))]\n          [else (loop (rest string) count)])))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero?\
    \ count)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (equal? count 0)]\n      [(equal? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(equal? (first string)\
    \ #\\]) (and (not (equal? count 0)) (is_nested-helper (rest string) (- count 1)))]))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (if (&gt; count 0) (is_nested-helper (rest string) (- count\
    \ 1)) #f)]))\n  (is_nested-helper string 0))\n</code>\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n \
    \     [(equal? (first string) \"[\") (is_nested-helper (rest string) (+ count\
    \ 1))]\n      [(equal? (first string) \"]\") (is_nested-helper (rest string) (-\
    \ count 1))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond ((empty? string) (zero? count))\n          ((char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1)))\n       \
    \   ((char=? (first string) #\\]) (and (positive? count) (is_nested-helper (rest\
    \ string) (- count 1))))\n          (else (is_nested-helper (rest string) count))))\n\
    \  (is_nested-helper string 0))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (zero? count)]\n      [(char=? (first string)\
    \ #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=? (first string)\
    \ #\\]) (and (not (zero? count)) (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (is_nested-helper string count)\n    (cond\n      [(empty?\
    \ string) (if (= count 0) #t #f)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (if (> count\
    \ 0) (is_nested-helper (rest string) (- count 1)) #f)]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(equal?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(equal?\
    \ (first string) #\\]) (and (positive? count) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (let loop ([string string] [count 0])\n    (cond\n      [(empty?\
    \ string) (zero? count)]\n      [(equal? (first string) #\\[) (loop (rest string)\
    \ (+ count 1))]\n      [(equal? (first string) #\\]) (and (positive? count) (loop\
    \ (rest string) (- count 1)))]\n      [else (loop (rest string) count)])))\n",
  "  (define (is_nested-helper string stack)\n    (cond\n      [(empty? string) (empty?\
    \ stack)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (cons #\\[ stack))]\n      [(char=? (first string) #\\]) (and (not (empty? stack))\
    \ (is_nested-helper (rest string) (rest stack)))]\n      [else (is_nested-helper\
    \ (rest string) stack)]))\n  (is_nested-helper string '()))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (is-positive? count) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (is-positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (positive? count) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (= count 0)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (not (zero?\
    \ count)) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (nest-count\
    \ string)\n    (cond\n      [(empty? string) 0]\n      [(equal? (first string)\
    \ \"[\") (+ 1 (nest-count (rest string)))]\n      [(equal? (first string) \"]\"\
    ) (- 1 (nest-count (rest string)))]))\n  (and (not (empty? string))\n       (not\
    \ (equal? (nest-count string) 0))\n       (not (negative? (nest-count string)))))\n",
  "  (define (is_nested-helper string count)\n    (cond\n      [(empty? string) (zero?\
    \ count)]\n      [(char=? (first string) #\\[) (is_nested-helper (rest string)\
    \ (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive? count) (is_nested-helper\
    \ (rest string) (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string)\n    (cond\n  \
    \    [(empty? string) #f]\n      [(and (equal? (first string) #\\[) (equal? (last\
    \ string) #\\])) #t]\n      [else (or (helper (rest string)) (helper (butlast\
    \ string)))]))\n  (helper string))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (if (= count 0) #t #f)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (if (> count 0) (is_nested-helper (rest string) (- count\
    \ 1)) #f)]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (let loop ([string string] [count 0])\n    (cond [(empty?\
    \ string) (if (zero? count) #t #f)]\n          [(equal? (first string) \"[\")\
    \ (loop (rest string) (+ count 1))]\n          [(equal? (first string) \"]\")\
    \ (loop (rest string) (- count 1))]\n          [else (loop (rest string) count)])))\n",
  "  (define (is_nested-helper string count)\n    (if (empty? string)\n        (if\
    \ (= count 0)\n            #t\n            #f)\n        (if (= (first string)\
    \ #\\[)\n            (is_nested-helper (rest string) (+ count 1))\n          \
    \  (if (= (first string) #\\])\n                (if (= count 0)\n            \
    \        #f\n                    (is_nested-helper (rest string) (- count 1)))\n\
    \                (is_nested-helper (rest string) count)))))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond [(empty?\
    \ string) (if (= count 0) #t #f)]\n          [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n          [(char=? (first string) #\\]) (if (&gt;\
    \ count 0) (is_nested-helper (rest string) (- count 1)) #f)]))\n  (is_nested-helper\
    \ string 0))\n</code>\n", "  (let ([stack '()])\n    (for ([char (in-string string)])\n\
    \      (cond\n        [(equal? char #\\[) (push char stack)]\n        [(equal?\
    \ char #\\]) (pop stack)]))\n    (empty? stack)))\n", "  (define (is_nested-helper\
    \ string stack)\n    (cond\n      [(empty? string) (empty? stack)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (cons #\\[ stack))]\n \
    \     [(char=? (first string) #\\]) (and (not (empty? stack)) (is_nested-helper\
    \ (rest string) (rest stack)))]\n      [else (is_nested-helper (rest string) stack)]))\n\
    \  (is_nested-helper string '()))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (= count 0)]\n      [(= (first string) #\\\
    [) (is_nested-helper (rest string) (+ count 1))]\n      [(= (first string) #\\\
    ]) (and (is-positive? count) (is_nested-helper (rest string) (- count 1)))]\n\
    \      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper string\
    \ 0))\n", "  (define (helper string)\n    (cond\n      [(empty? string) #f]\n\
    \      [(eq? (first string) #\\[) (helper (rest string))]\n      [(eq? (first\
    \ string) #\\]) (and (helper (rest string)) (not (empty? string)))]\n      [else\
    \ #f]))\n  (helper string))\n", "  (define (is_nested-helper string count)\n \
    \   (cond\n      [(empty? string) (if (= count 0) #t #f)]\n      [(string=? (first\
    \ string) \"[\") (is_nested-helper (rest string) (+ count 1))]\n      [(string=?\
    \ (first string) \"]\") (if (= count 0) #f (is_nested-helper (rest string) (-\
    \ count 1)))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (is_nested-helper (rest string) (- count 1)) (< count\
    \ 1))]))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper string\
    \ count)\n    (cond\n      [(empty? string) (zero? count)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (positive? count) (is_nested-helper (rest string)\
    \ (- count 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string count)\n    (cond\n     \
    \ [(empty? string) (zero? count)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (and (positive?\
    \ count) (is_nested-helper (rest string) (- count 1)))]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n", "  (define (helper\
    \ string)\n    (cond\n      [(empty? string) #f]\n      [(equal? (first string)\
    \ \"[\") (helper (rest string))]\n      [(equal? (first string) \"]\") (or (helper\
    \ (rest string)) (not (empty? (rest string))))]))\n  (helper (string->list string)))\n",
  "  (define (is_nested-helper string count)\n    (cond ((empty? string) (zero? count))\n\
    \          ((equal? (first string) #\\[) (is_nested-helper (rest string) (+ count\
    \ 1)))\n          ((equal? (first string) #\\]) (and (not (zero? count)) (is_nested-helper\
    \ (rest string) (- count 1))))\n          (else (is_nested-helper (rest string)\
    \ count))))\n  (is_nested-helper string 0))\n", "  (define (is_nested-helper string\
    \ count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=? (first\
    \ string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (and (> count 0) (is_nested-helper (rest string) (- count\
    \ 1)))]\n      [else (is_nested-helper (rest string) count)]))\n  (is_nested-helper\
    \ string 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n     \
    \ [(empty? string) (empty? stack)]\n      [(equal? (first string) \"[\") (is_nested-helper\
    \ (rest string) (cons (first string) stack))]\n      [(equal? (first string) \"\
    ]\") (and (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]))\n\
    \  (is_nested-helper string '()))\n", "  (define (is_nested-helper string count)\n\
    \    (cond\n      [(empty? string) (= count 0)]\n      [(= (first string) #\\\
    [) (is_nested-helper (rest string) (+ count 1))]\n      [(= (first string) #\\\
    ]) (and (not (zero? count)) (is_nested-helper (rest string) (- count 1)))]))\n\
    \  (is_nested-helper string 0))\n", "  (define (helper string count)\n    (cond\
    \ ((null? string) (zero? count))\n          ((equal? (car string) \"[\") (helper\
    \ (cdr string) (+ count 1)))\n          ((equal? (car string) \"]\") (and (positive?\
    \ count) (helper (cdr string) (- count 1))))\n          (else (helper (cdr string)\
    \ count))))\n  (helper (string->list string) 0))\n", "  (define (is_nested-helper\
    \ string count)\n    (cond\n      [(empty? string) (= count 0)]\n      [(char=?\
    \ (first string) #\\[) (is_nested-helper (rest string) (+ count 1))]\n      [(char=?\
    \ (first string) #\\]) (is_nested-helper (rest string) (- count 1))]\n      [else\
    \ (is_nested-helper (rest string) count)]))\n  (is_nested-helper string 0))\n",
  "  (define (helper string count)\n    (cond ((null? string) (if (= count 0) #t #f))\n\
    \          ((string=? (car string) \"[\") (helper (cdr string) (+ count 1)))\n\
    \          ((string=? (car string) \"]\") (if (= count 0) #f (helper (cdr string)\
    \ (- count 1))))\n          (else (helper (cdr string) count))))\n  (helper (string->list\
    \ string) 0))\n", "  (define (is_nested-helper string stack)\n    (cond\n    \
    \  [(empty? string) (not (empty? stack))]\n      [(char=? (first string) #\\[)\
    \ (is_nested-helper (rest string) (cons #\\[ stack))]\n      [(char=? (first string)\
    \ #\\]) (and (not (empty? stack)) (is_nested-helper (rest string) (rest stack)))]\n\
    \      [else (is_nested-helper (rest string) stack)]))\n  (is_nested-helper string\
    \ '()))\n", "  (define (is_nested-helper string count)\n    (cond\n      [(empty?\
    \ string) (if (= count 0) #t #f)]\n      [(char=? (first string) #\\[) (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(char=? (first string) #\\]) (if (&gt; count\
    \ 0) (is_nested-helper (rest string) (- count 1)) #f)]\n      [else (is_nested-helper\
    \ (rest string) count)]))\n  (is_nested-helper string 0))\n</code>\nI'm not sure\
    \ if this is the most efficient way to do it, but it works.\n\n\nA:\n\nI think\
    \ you are over-complicating things. You can do it with a simple <code>for/fold</code>\
    \ loop:\n<code>(define (is-nested str)\n  (for/fold ([count 0]) ([ch (in-string\
    \ str)])\n    (cond\n      [(char=? ch #\\[) (+ count 1)]\n      [(char=? ch #\\\
    ]) (if (&gt; count 0) (- count 1) #f)]\n      [else count])))\n</code>\nThe <code>for/fold</code>\
    \ loop is similar to a <code>for</code> loop, but it also has an accumulator that\
    \ is updated at each iteration. In this case, we use it to keep track of the number\
    \ of open brackets.\n", "  (define (is_nested-helper string count)\n    (cond\n\
    \      [(empty? string) (zero? count)]\n      [(equal? (first string) \"[\") (is_nested-helper\
    \ (rest string) (+ count 1))]\n      [(equal? (first string) \"]\") (and (not\
    \ (zero? count)) (is_nested-helper (rest string) (- count 1)))]))\n  (is_nested-helper\
    \ (string-&gt;list string) 0))\n</code>\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
