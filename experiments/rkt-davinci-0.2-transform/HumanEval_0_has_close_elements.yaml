name: HumanEval_0_has_close_elements
language: rkt
prompt: "#lang racket\n\n;; Check if in given list of numbers, are any two numbers\
  \ closer to each other than\n;; given threshold.\n;; >>> (has_close_elements (list\
  \ 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0\
  \ 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate has_close_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t)\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t)\n    (check-equal? (candidate (list 1.0 2.0\
  \ 5.9 4.0 5.0) 0.8) #f)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0\
  \ 2.0) 0.1) #t)\n    (check-equal? (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t)\n\
  \    (check-equal? (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f)\n))\n\n(test-humaneval)"
completions: ["  (let loop ([numbers numbers]\n             [threshold threshold])\n\
    \    (cond [(empty? numbers) #f]\n          [(empty? (rest numbers)) #f]\n   \
    \       [(< (abs (- (first numbers) (second numbers))) threshold) #t]\n      \
    \    [else (loop (rest numbers) threshold)])))\n", "  (cond\n    [(empty? numbers)\
    \ #f]\n    [(empty? (rest numbers)) #f]\n    [else\n     (cond\n       [(< (abs\
    \ (- (first numbers) (second numbers))) threshold) #t]\n       [else (has_close_elements\
    \ (rest numbers) threshold)])]))\n", "  (cond\n    [(empty? numbers) #f]\n   \
    \ [(empty? (rest numbers)) #f]\n    [else\n     (let ([first (first numbers)]\n\
    \           [second (first (rest numbers))])\n       (cond\n         [(< (abs\
    \ (- first second)) threshold) #t]\n         [else (has_close_elements (rest numbers)\
    \ threshold)]))]))\n", "  (define (has_close_elements_iter numbers threshold)\n\
    \    (if (null? (cdr numbers))\n        #f\n        (if (< (abs (- (car numbers)\
    \ (cadr numbers))) threshold)\n            #t\n            (has_close_elements_iter\
    \ (cdr numbers) threshold))))\n  (has_close_elements_iter numbers threshold))\n",
  "  (cond\n    [(empty? numbers) #f]\n    [(empty? (rest numbers)) #f]\n    [else\n\
    \     (cond\n       [(< (abs (- (first numbers) (second numbers))) threshold)\
    \ #t]\n       [else (has_close_elements (rest numbers) threshold)])]))\n", " \
    \ (cond\n    [(empty? numbers) #f]\n    [(empty? (rest numbers)) #f]\n    [else\n\
    \     (let ([first (first numbers)]\n           [second (first (rest numbers))])\n\
    \       (if (< (abs (- first second)) threshold)\n           #t\n           (has_close_elements\
    \ (rest numbers) threshold)))]))\n", "  (define (has_close_elements_iter numbers\
    \ threshold)\n    (cond\n      [(empty? numbers) #f]\n      [(empty? (rest numbers))\
    \ #f]\n      [(< (abs (- (first numbers) (first (rest numbers)))) threshold) #t]\n\
    \      [else (has_close_elements_iter (rest numbers) threshold)]))\n  (has_close_elements_iter\
    \ numbers threshold))\n", "  (let loop ([numbers numbers]\n             [threshold\
    \ threshold])\n    (cond [(empty? numbers) #f]\n          [(= (length numbers)\
    \ 1) #f]\n          [(< (abs (- (first numbers) (second numbers))) threshold)\
    \ #t]\n          [else (loop (rest numbers) threshold)])))\n", "  (cond\n    [(empty?\
    \ numbers) #f]\n    [(empty? (rest numbers)) #f]\n    [else\n     (let ([first\
    \ (first numbers)]\n           [second (first (rest numbers))])\n       (cond\n\
    \         [(< (abs (- first second)) threshold) #t]\n         [else (has_close_elements\
    \ (rest numbers) threshold)]))]))\n", "  (cond\n    [(empty? numbers) #f]\n  \
    \  [(empty? (rest numbers)) #f]\n    [else\n     (let* ([first (first numbers)]\n\
    \            [second (first (rest numbers))])\n       (if (< (abs (- first second))\
    \ threshold)\n           #t\n           (has_close_elements (rest numbers) threshold)))]))\n",
  "  (define (has_close_elements_iter numbers threshold)\n    (if (null? (cdr numbers))\n\
    \        #f\n        (if (< (abs (- (car numbers) (cadr numbers))) threshold)\n\
    \            #t\n            (has_close_elements_iter (cdr numbers) threshold))))\n\
    \  (has_close_elements_iter numbers threshold))\n", "  (define (has_close_elements_iter\
    \ numbers threshold)\n    (if (null? (cdr numbers))\n        #f\n        (if (<\
    \ (abs (- (car numbers) (cadr numbers))) threshold)\n            #t\n        \
    \    (has_close_elements_iter (cdr numbers) threshold))))\n  (has_close_elements_iter\
    \ numbers threshold))\n", "  (define (has_close_elements_iter numbers threshold)\n\
    \    (cond ((null? numbers) #f)\n          ((null? (cdr numbers)) #f)\n      \
    \    ((< (abs (- (car numbers) (cadr numbers))) threshold) #t)\n          (else\
    \ (has_close_elements_iter (cdr numbers) threshold))))\n  (has_close_elements_iter\
    \ numbers threshold))\n", "  (let loop ([numbers numbers]\n             [threshold\
    \ threshold])\n    (cond\n      [(empty? numbers) #f]\n      [(empty? (rest numbers))\
    \ #f]\n      [(< (abs (- (first numbers) (second numbers))) threshold) #t]\n \
    \     [else (loop (rest numbers) threshold)])))\n", "  (cond\n    [(empty? numbers)\
    \ #f]\n    [(empty? (rest numbers)) #f]\n    [else\n     (if (< (abs (- (first\
    \ numbers) (second numbers))) threshold)\n         #t\n         (has_close_elements\
    \ (rest numbers) threshold))]))\n", "  (cond\n    [(empty? numbers) #f]\n    [(empty?\
    \ (rest numbers)) #f]\n    [else\n     (let ([first (first numbers)]\n       \
    \    [second (first (rest numbers))])\n       (cond\n         [(< (abs (- first\
    \ second)) threshold) #t]\n         [else (has_close_elements (rest numbers) threshold)]))]))\n",
  "  (cond\n    [(empty? numbers) #f]\n    [(empty? (rest numbers)) #f]\n    [else\n\
    \     (cond\n       [(< (abs (- (first numbers) (second numbers))) threshold)\
    \ #t]\n       [else (has_close_elements (rest numbers) threshold)])]))\n", " \
    \ (cond\n    [(empty? numbers) #f]\n    [(empty? (rest numbers)) #f]\n    [else\n\
    \     (let ([first (first numbers)]\n           [second (second numbers)])\n \
    \      (if (< (abs (- first second)) threshold)\n           #t\n           (has_close_elements\
    \ (rest numbers) threshold)))]))\n", "  (cond\n    [(empty? numbers) #f]\n   \
    \ [(empty? (rest numbers)) #f]\n    [else\n     (let ([first (first numbers)]\n\
    \           [second (first (rest numbers))])\n       (if (< (abs (- first second))\
    \ threshold)\n           #t\n           (has_close_elements (rest numbers) threshold)))]))\n",
  "  (cond\n    [(empty? numbers) #f]\n    [(empty? (rest numbers)) #f]\n    [else\n\
    \     (let ([first (first numbers)]\n           [second (first (rest numbers))])\n\
    \       (if (< (abs (- first second)) threshold)\n           #t\n           (has_close_elements\
    \ (rest numbers) threshold)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
