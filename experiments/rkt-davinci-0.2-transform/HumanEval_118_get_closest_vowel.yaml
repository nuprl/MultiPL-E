name: HumanEval_118_get_closest_vowel
language: rkt
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\"\
  )\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel\
  \ \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (get-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(member (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (first word)]\n\
    \      [else (get-vowel (rest word))]))\n  (define (get-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(member (first word) '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\")) empty]\n      [else (first word)]))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (not (empty? (get-vowel\
    \ word))) (not (empty? (get-consonant (rest word))))) (get-vowel word)]\n    \
    \  [else (get-closest-vowel-from-right (rest word))]))\n  (get-closest-vowel-from-right\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\
    \ ((null? word) \"\")\n          ((and (is-vowel? (car word)) (is-consonant? (cadr\
    \ word))) (car word))\n          (else (find-closest-vowel (cdr word)))))\n  (find-closest-vowel\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond [(empty? word)\
    \ empty]\n          [(is-vowel? (first word)) empty]\n          [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]\n          [else (first word)]))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (let loop ([word (string-reverse word)]\n               [prev-char #\\])\n\
    \               [next-char #\\])\n      (cond [(empty? word) \"\"]\n         \
    \   [(is-vowel? (first word)) (first word)]\n            [(and (is-consonant?\
    \ prev-char) (is-consonant? next-char))\n             (loop (rest word) (first\
    \ word) prev-char)]\n            [else (loop (rest word) (first word) prev-char)])))\n\
    \  (get-closest-vowel-from-right word))\n", "  (define (is_vowel? c)\n    (or\
    \ (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\\
    u)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (let\
    \ ((first (car word))\n              (second (cadr word)))\n          (if (and\
    \ (is_consonant? first) (is_vowel? second))\n              (string second)\n \
    \             (get-closest-vowel-helper (cdr word))))))\n  (get-closest-vowel-helper\
    \ (string->list word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if (empty?\
    \ word)\n        \"\"\n        (if (and (is-consonant? (first word))\n       \
    \          (is-vowel? (second word)))\n            (string (second word))\n  \
    \          (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n   \
    \     (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n    \
    \    (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (let loop ([word word]\n \
    \              [vowel #\\])\n      (cond\n        [(empty? word) vowel]\n    \
    \    [(is-vowel? (first word)) (loop (rest word) (first word))]\n        [(is-consonant?\
    \ (first word)) (loop (rest word) vowel)])))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (null? word)\n        \"\"\
    \n        (if (and (is-consonant? (car word))\n                 (is-vowel? (cadr\
    \ word)))\n            (string (cadr word))\n            (find-closest-vowel (cdr\
    \ word)))))\n  (find-closest-vowel word))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (char-consonant?\
    \ (first word)) (char-vowel? (second word))) (first word)]\n      [(and (char-consonant?\
    \ (first word)) (char-consonant? (second word))) (get-closest-vowel-helper (rest\
    \ word))]\n      [else (get-closest-vowel-helper (rest word))]))\n  (if (char-consonant?\
    \ (first word))\n      (get-closest-vowel-helper word)\n      empty))\n", "  (define\
    \ (get-closest-vowel-helper word)\n    (define (is-vowel? c)\n      (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n    (define (is-consonant?\
    \ c)\n      (not (is-vowel? c)))\n    (define (get-closest-vowel-helper-helper\
    \ word)\n      (if (null? word)\n          \"\"\n          (if (and (is-consonant?\
    \ (car word))\n                   (is-vowel? (cadr word)))\n              (string\
    \ (cadr word))\n              (get-closest-vowel-helper-helper (cdr word)))))\n\
    \    (get-closest-vowel-helper-helper (reverse (string->list word))))\n  (get-closest-vowel-helper\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))))\n  (define (get-next-vowel lst)\n\
    \    (if (null? lst)\n        \"\"\n        (if (is-consonant? (car lst))\n  \
    \          (get-next-vowel (cdr lst))\n            (car lst))))\n  (get-next-vowel\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant?\
    \ #f]\n               [prev-vowel? #f]\n               [closest-vowel #f])\n \
    \     (cond [(null? word) (if closest-vowel (list-&gt;string closest-vowel) \"\
    \")]\n            [(is-vowel? (car word)) (loop (cdr word) prev-consonant? #t\
    \ (car word))]\n            [(is-consonant? (car word)) (if prev-vowel?\n    \
    \                                        (if closest-vowel\n                 \
    \                               (if (&lt; (string-length (list-&gt;string closest-vowel))\n\
    \                                                        (string-length (list-&gt;string\
    \ (car word))))\n                                                    (loop (cdr\
    \ word) #t prev-vowel? (car word))\n                                         \
    \           (loop (cdr word) #t prev-vowel? closest-vowel))\n                \
    \                                (loop (cdr word) #t prev-vowel? (car word)))\n\
    \                                            (loop (cdr word) #t prev-vowel? closest-vowel))]\n\
    \            [else (error \"should not happen\")])))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if (or (null?\
    \ word) (null? (cdr word)))\n        \"\"\n        (if (and (is_consonant? (car\
    \ word)) (is_vowel? (cadr word)))\n            (list-ref word 1)\n           \
    \ (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (or (empty? word) (empty?\
    \ (rest word)))\n        \"\"\n        (if (and (is-consonant? (first word)) (is-vowel?\
    \ (second word)))\n            (second word)\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (if (null? word)\n        \"\"\n        (if (and (is-consonant? (car word))\n\
    \                 (is-vowel? (cadr word)))\n            (string (cadr word))\n\
    \            (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define\
    \ (get-closest-vowel-iter word)\n    (if (null? word)\n        \"\"\n        (if\
    \ (is_vowel? (car word))\n            (if (is_consonant? (cadr word))\n      \
    \          (string (car word))\n                (get-closest-vowel-iter (cdr word)))\n\
    \            (get-closest-vowel-iter (cdr word)))))\n  (get-closest-vowel-iter\
    \ (string->list word)))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (null?\
    \ word)\n        \"\"\n        (if (and (is-consonant? (car word))\n         \
    \        (is-vowel? (cadr word)))\n            (cadr word)\n            (find-closest-vowel\
    \ (cdr word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n \
    \       (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (char-vowel? (first word))\
    \ (char-vowel? (second word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel?\
    \ (first word)) (char-consonant? (second word))) (first word)]\n    [(and (char-consonant?\
    \ (first word)) (char-vowel? (second word))) (second word)]\n    [(and (char-consonant?\
    \ (first word)) (char-consonant? (second word))) (get_closest_vowel (rest word))]))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (cond [(empty? word) empty]\n      \
    \    [(is-vowel? (first word)) (first word)]\n          [(is-consonant? (first\
    \ word)) (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-consonant? (first word))\
    \ (first word)]\n          [(is-vowel? (first word)) (find-closest-consonant (rest\
    \ word))]))\n  (define (find-closest-vowel-between-consonants word)\n    (cond\
    \ [(empty? word) empty]\n          [(is-vowel? (first word)) (find-closest-vowel-between-consonants\
    \ (rest word))]\n          [(is-consonant? (first word))\n           (let ([vowel\
    \ (find-closest-vowel (rest word))]\n                 [consonant (find-closest-consonant\
    \ (rest word))])\n             (if (and vowel consonant) vowel empty))]))\n  (find-closest-vowel-between-consonants\
    \ word))\n", "  (define (is-vowel? c)\n    (or (equal? c #\\a)\n        (equal?\
    \ c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c\
    \ #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (first word)]\n          [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-consonant? (first word))\
    \ (first word)]\n          [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond [(empty? word) empty]\n          [(and (is-consonant? (first\
    \ word))\n                (is-vowel? (second word))\n                (is-consonant?\
    \ (third word)))\n           (second word)]\n          [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond [(empty? word) empty]\n        [(is-vowel? (first word))\
    \ empty]\n        [(is-consonant? (first word))\n         (cond [(empty? (rest\
    \ word)) empty]\n               [(is-vowel? (second word)) empty]\n          \
    \     [(is-consonant? (second word))\n                (cond [(empty? (rest (rest\
    \ word))) empty]\n                      [(is-vowel? (third word)) empty]\n   \
    \                   [(is-consonant? (third word))\n                       (cond\
    \ [(empty? (rest (rest (rest word)))) empty]\n                             [(is-vowel?\
    \ (fourth word)) empty]\n                             [(is-consonant? (fourth\
    \ word))\n                              (cond [(empty? (rest (rest (rest (rest\
    \ word))))) empty]\n                                    [(is-vowel? (fifth word))\
    \ empty]\n                                    [(", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (if (is-vowel? (string-ref word 0))\n        (string-ref word 0)\n      \
    \  (if (is-consonant? (string-ref word 0))\n            (if (is-consonant? (string-ref\
    \ word 1))\n                (find-closest-vowel (substring word 1))\n        \
    \        (string-ref word 0))\n            (string-ref word 0))))\n  (find-closest-vowel\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-from-right word)\n    (if (is-vowel? (string-ref\
    \ word 0))\n        (string-ref word 0)\n        (get-closest-vowel-from-right\
    \ (substring word 1))))\n  (define (get-closest-vowel-from-left word)\n    (if\
    \ (is-vowel? (string-ref word (- (string-length word) 1)))\n        (string-ref\
    \ word (- (string-length word) 1))\n        (get-closest-vowel-from-left (substring\
    \ word 0 (- (string-length word) 1)))))\n  (define (get-closest-vowel-from-right-and-left\
    \ word)\n    (if (is-vowel? (string-ref word 0))\n        (string-ref word 0)\n\
    \        (if (is-vowel? (string-ref word (- (string-length word) 1)))\n      \
    \      (string-ref word (- (string-length word) 1))\n            (get-closest-vowel-from-right-and-left\
    \ (substring word 1 (- (string-length word) 1))))))\n  (define (get-closest-vowel-from-right-and-left-with-consonant\
    \ word)\n    (if (is-vowel? (string-ref word 0))\n        (string-ref word 0)\n\
    \        (if (is-vowel? (string-ref word (- (string-length word) 1)))\n      \
    \      (string-ref word (- (string-length word) 1))\n            (if (is-consonant?\
    \ (string-ref word 1))\n                (get-closest-vowel-from-right-and-left-with-consonant\
    \ (substring word 1 (-", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n \
    \       (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n  \
    \      (char=? c #\\u)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n\
    \  (define (get-closest-vowel-helper word)\n    (if (empty? word)\n        \"\"\
    \n        (let ([c (first word)])\n          (if (is_vowel? c)\n             \
    \ (if (and (not (empty? (rest word)))\n                       (is_consonant? (second\
    \ word)))\n                  (string c)\n                  (get-closest-vowel-helper\
    \ (rest word)))\n              (get-closest-vowel-helper (rest word))))))\n  (get-closest-vowel-helper\
    \ (string-reverse word)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-helper word)\n    (if (or (null? word)\n       \
    \     (null? (cdr word)))\n        \"\"\n        (if (and (is-consonant? (car\
    \ word))\n                 (is-vowel? (cadr word)))\n            (string (cadr\
    \ word))\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (find-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(member (first word) '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\")) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) empty]\n      [(member\
    \ (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\")) empty]\n      [else (first word)]))\n\
    \  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(member (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\")) empty]\n      [(empty?\
    \ (rest word)) empty]\n      [(member (first (rest word)) '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\")) (first (rest word))]\n      [else (find-closest-vowel (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(member (first word) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) empty]\n    [(empty? (rest word)) empty]\n    [(member (first\
    \ (rest word)) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (first (rest word))]\n    [else\
    \ (find-closest-vowel (rest word))]))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (or (empty? word) (is-vowel? (first word)))\n        \"\"\n        (if\
    \ (is-vowel? (second word))\n            (second word)\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word)) (is-vowel? (second word))) (first word)]\n      [else (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (get-closest-vowel word)\n    (define (get-closest-vowel word)\n      (define\
    \ (get-closest-vowel word)\n        (define (get-closest-vowel word)\n       \
    \   (define (get-closest-vowel word)\n            (define (get-closest-vowel word)\n\
    \              (define (get-closest-vowel word)\n                (define (get-closest-vowel\
    \ word)\n                  (define (get-closest-vowel word)\n                \
    \    (define (get-closest-vowel word)\n                      (define (get-closest-vowel\
    \ word)\n                        (define (get-closest-vowel word)\n          \
    \                (define (get-closest-vowel word)\n                          \
    \  (define (get-closest-vowel word)\n                              (define (get-closest-vowel\
    \ word)\n                                (define (get-closest-vowel word)\n  \
    \                                (define (get-closest-vowel word)\n          \
    \                          (define (get-closest-vowel word)\n                \
    \                      (define (get-closest-vowel word)\n                    \
    \                    (define (get-closest-vowel word)\n                      \
    \                    (define (get-closest-vowel word)\n                      \
    \                      (define (get-closest-vowel word)\n                    \
    \                          (define (get-closest-vowel word)\n                \
    \                                (define (get-closest-vowel word)\n          \
    \                                        (define (get-closest-vowel word)\n  \
    \                                                  (define (get-closest-vowel\
    \ word)\n                                                      (define (get-closest-vowel\
    \ word)\n                                                        (define (get-closest-vowel\
    \ word)\n                                                          (define (get-closest-vowel\
    \ word)\n                                                            (define (get-closest-vowel\
    \ word)\n                ", "  (define (get-closest-vowel-helper word i)\n   \
    \ (cond\n      [(= i 0) \"\"]\n      [(and (char-vowel? (string-ref word (- i\
    \ 1)))\n            (char-consonant? (string-ref word (- i 2))))\n       (string-ref\
    \ word (- i 1))]\n      [else (get-closest-vowel-helper word (- i 1))]))\n  (get-closest-vowel-helper\
    \ word (string-length word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n  \
    \    [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n  \
    \    [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n  (define\
    \ (find-closest-consonant word)\n    (cond\n      [(empty? word) empty]\n    \
    \  [(is-consonant? (first word)) (first word)]\n      [(is-vowel? (first word))\
    \ (find-closest-consonant (rest word))]))\n  (cond\n    [(empty? word) empty]\n\
    \    [(is-vowel? (first word)) (find-closest-consonant (rest word))]\n    [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (if (and (is-consonant?\
    \ (car word))\n                 (is-vowel? (cadr word)))\n            (string\
    \ (cadr word))\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (string-&gt;list word)))\n</code>\n", "  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond [(empty? word) empty]\n          [(is_vowel? (first word)) (first word)]\n\
    \          [(is_consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (define (helper word)\n \
    \   (cond ((null? word) \"\")\n          ((member (string-ref word 0) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n           (string-ref word 0))\n          (else\
    \ (helper (substring word 1)))))\n  (helper (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel (rest\
    \ word))]))\n  (find-closest-vowel (reverse word)))\n", "  (let ([vowels (list\
    \ #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([word word]\
    \ [pos 0])\n      (cond\n        [(null? word) \"\"]\n        [(member (car word)\
    \ vowels) (substring word pos (+ pos 1))]\n        [else (loop (cdr word) (+ pos\
    \ 1))]))))\n", "  (let loop ([i (sub1 (string-length word))]\n             [vowel\
    \ #f])\n    (cond\n      [(= i 0) (if vowel vowel \"\")]\n      [(regexp-match\
    \ #rx\"[aeiou]\" (string-ref word i))\n       (loop (sub1 i) i)]\n      [(regexp-match\
    \ #rx\"[aeiou]\" (string-ref word (sub1 i)))\n       (loop (sub1 i) (sub1 i))]\n\
    \      [else (loop (sub1 i) vowel)])))\n", "  (if (or (empty? word) (empty? (rest\
    \ word)))\n      \"\"\n      (let ([first-char (first word)]\n            [rest-word\
    \ (rest word)])\n        (if (or (vowel? first-char) (vowel? (first rest-word)))\n\
    \            (get_closest_vowel rest-word)\n            (if (vowel? (first (rest\
    \ rest-word)))\n                (first (rest rest-word))\n                (get_closest_vowel\
    \ (rest rest-word)))))))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n    \
    \  [(null? word) empty]\n      [(is-vowel? (car word)) (car word)]\n      [else\
    \ (find-closest-vowel (cdr word))]))\n  (define (find-closest-consonant word)\n\
    \    (cond\n      [(null? word) empty]\n      [(is-consonant? (car word)) (car\
    \ word)]\n      [else (find-closest-consonant (cdr word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(null? word) empty]\n      [(and (is-vowel? (car word))\n\
    \            (is-consonant? (cadr word)))\n       (car word)]\n      [else (find-closest-vowel-between-consonants\
    \ (cdr word))]))\n  (cond\n    [(null? word) empty]\n    [(is-vowel? (car word))\
    \ empty]\n    [(is-consonant? (car word))\n     (cond\n       [(null? (cdr word))\
    \ empty]\n       [(is-vowel? (cadr word)) empty]\n       [else (find-closest-vowel-between-consonants\
    \ (cdr word))])]\n    [else (find-closest-vowel-between-consonants (cdr word))]))\n",
  "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n\
    \  (define (get-closest-vowel-helper word)\n    (if (empty? word)\n        \"\"\
    \n        (if (and (is_consonant? (first word))\n                 (is_vowel? (second\
    \ word)))\n            (second word)\n            (get-closest-vowel-helper (rest\
    \ word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (first word)]\n          [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (is_consonant_vowel_consonant?\
    \ word)\n    (and (is_consonant? (string-ref word 0))\n         (is_vowel? (string-ref\
    \ word 1))\n         (is_consonant? (string-ref word 2))))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (cond ((is_consonant_vowel_consonant? word)\n           (string-ref\
    \ word 1))\n          ((&gt; (string-length word) 2)\n           (get-closest-vowel-from-right\
    \ (substring word 1)))))\n  (get-closest-vowel-from-right word))\n</code>\n",
  "  (define (is_vowel? c)\n    (or (equal? c \"a\") (equal? c \"e\") (equal? c \"\
    i\") (equal? c \"o\") (equal? c \"u\")))\n  (define (is_consonant? c)\n    (and\
    \ (not (is_vowel? c)) (not (equal? c \"\"))))\n  (define (find-closest-vowel word)\n\
    \    (cond ((and (is_consonant? (string-ref word 0)) (is_consonant? (string-ref\
    \ word 1)))\n           (find-closest-vowel (substring word 1)))\n          ((and\
    \ (is_consonant? (string-ref word 0)) (is_vowel? (string-ref word 1)))\n     \
    \      (string-ref word 1))\n          ((and (is_vowel? (string-ref word 0)) (is_consonant?\
    \ (string-ref word 1)))\n           (string-ref word 0))\n          (else \"\"\
    )))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (if (or (empty? word)\n      \
    \      (is-vowel? (first word)))\n        \"\"\n        (if (is-vowel? (second\
    \ word))\n            (string (second word))\n            (get-closest-vowel (rest\
    \ word)))))\n  (get-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (string-reverse word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(empty? word) #f]\n     \
    \       [(is-vowel? (first word))\n             (if prev-consonant\n         \
    \        (string-reverse (first word))\n                 (loop (rest word) prev-consonant\
    \ #t))]\n            [(is-consonant? (first word))\n             (if prev-vowel\n\
    \                 (string-reverse prev-vowel)\n                 (loop (rest word)\
    \ #t prev-vowel))])))\n  (get-closest-vowel-from-right word))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o)\
    \ (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n \
    \ (define (get-closest-vowel-helper word)\n    (if (or (null? word) (null? (cdr\
    \ word)))\n        \"\"\n        (if (and (is-consonant? (car word)) (is-vowel?\
    \ (cadr word)))\n            (list->string (list (cadr word)))\n            (get-closest-vowel-helper\
    \ (cdr word)))))\n  (get-closest-vowel-helper (string->list word)))\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(and (is_vowel? (first word))\n            (is_consonant?\
    \ (first (rest word))))\n       (first word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is_vowel? (first\
    \ word)) empty]\n    [(is_consonant? (first word))\n     (find-closest-vowel-between-consonants\
    \ (rest word))]\n    [else\n     (find-closest-vowel-between-consonants\n    \
    \  (append (list (find-closest-consonant word))\n              (find-closest-vowel\
    \ word)))]))\n", "  (define (get-closest-vowel-helper word index)\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(vowel? (first word)) (get-closest-vowel-helper\
    \ (rest word) (+ index 1))]\n      [(vowel? (second word)) (get-closest-vowel-helper\
    \ (rest word) (+ index 1))]\n      [(vowel? (third word)) (get-closest-vowel-helper\
    \ (rest word) (+ index 1))]\n      [else (get-closest-vowel-helper (rest word)\
    \ (+ index 1))]))\n  (get-closest-vowel-helper word 0))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-from-right word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel-from-right\
    \ (rest word))]))\n  (define (find-closest-consonant-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-closest-consonant-from-right (rest word))]))\n  (cond\n   \
    \ [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n    [(is-consonant?\
    \ (first word))\n     (cond\n       [(is-vowel? (find-closest-vowel word))\n \
    \       (cond\n          [(is-consonant? (find-closest-consonant-from-right word))\n\
    \           (find-closest-vowel word)]\n          [else empty])]\n       [else\
    \ empty])]\n    [else empty]))\n", "  (define (is_vowel? c)\n    (or (char=? c\
    \ #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (if\
    \ (and (is_consonant? (car word)) (is_vowel? (cadr word)))\n            (list-ref\
    \ word 1)\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (is_vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (is_consonant_pair? c1 c2)\n    (and\
    \ (is_consonant? c1) (is_consonant? c2)))\n  (define (is_vowel_between_consonants?\
    \ c1 c2 c3)\n    (and (is_consonant_pair? c1 c3) (is_vowel? c2)))\n  (define (get-closest-vowel-between-consonants\
    \ word)\n    (cond [(empty? word) empty]\n          [(is_vowel_between_consonants?\
    \ (first word) (second word) (third word))\n           (second word)]\n      \
    \    [else (get-closest-vowel-between-consonants (rest word))]))\n  (get-closest-vowel-between-consonants\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond [(empty? word) empty]\n       \
    \   [(is-vowel? (first word)) (first word)]\n          [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond [(empty? word) empty]\n\
    \          [(is-consonant? (first word)) (first word)]\n          [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond [(empty?\
    \ word) empty]\n          [(is-vowel? (first word))\n           (if (is-consonant?\
    \ (second word))\n               (first word)\n               (find-vowel-between-consonants\
    \ (rest word)))]\n          [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond [(empty? word) empty]\n        [(is-vowel? (first word)) empty]\n   \
    \     [(is-consonant? (first word))\n         (cond [(empty? (rest word)) empty]\n\
    \               [(is-vowel? (second word)) empty]\n               [(is-consonant?\
    \ (second word))\n                (find-vowel-between-consonants (rest word))]\n\
    \               [else empty])]\n        [else empty]))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o)\
    \ (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n \
    \ (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word)) (is-consonant? (second word))) (first word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word)) (find-closest-vowel-between-consonants\
    \ (rest word))]\n    [else empty]))\n", "  (define (is-vowel? c)\n    (or (equal?\
    \ c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c\
    \ #\\o)\n        (equal? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [else (get-closest-vowel\
    \ (rest word))]))\n  (define (get-closest-consonant word)\n    (cond [(empty?\
    \ word) empty]\n          [(is-consonant? (first word)) (first word)]\n      \
    \    [else (get-closest-consonant (rest word))]))\n  (define (get-closest-vowel-between-consonants\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (get-closest-consonant (rest word))]\n          [else (get-closest-vowel-between-consonants\
    \ (rest word))]))\n  (define (get-closest-vowel-between-consonants-from-right\
    \ word)\n    (get-closest-vowel-between-consonants (reverse word)))\n  (get-closest-vowel-between-consonants-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [(is-consonant? (first word))\
    \ (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse word)))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word)) (is-consonant? (second word))) (first word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word)) (find-closest-vowel-between-consonants\
    \ (rest word))]\n    [else (find-closest-vowel-between-consonants (rest word))]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant?\
    \ (first word)) (first word)]\n      [else (find-consonant (rest word))]))\n \
    \ (define (find-vowel-between-consonants word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(and (is-vowel? (first word))\n            (is-consonant? (second\
    \ word))\n            (is-consonant? (third word)))\n       (first word)]\n  \
    \    [else (find-vowel-between-consonants (rest word))]))\n  (cond\n    [(empty?\
    \ word) empty]\n    [(is-vowel? (first word)) empty]\n    [(is-consonant? (first\
    \ word))\n     (cond\n       [(empty? (rest word)) empty]\n       [(is-vowel?\
    \ (second word)) empty]\n       [(is-consonant? (second word))\n        (cond\n\
    \          [(empty? (rest (rest word))) empty]\n          [(is-vowel? (third word))\
    \ empty]\n          [(is-consonant? (third word))\n           (cond\n        \
    \     [(empty? (rest (rest (rest word)))) empty]\n             [(is-vowel? (fourth\
    \ word)) empty]\n             [(is-consonant? (fourth word))\n              (find-vowel-between-consonants\
    \ (rest (rest (rest (rest word)))))]\n             [else empty])]\n          [else\
    \ empty])]\n       [else empty", "  (define (is-vowel? ch)\n    (member ch '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? ch)\n\
    \    (not (is-vowel? ch)))\n  (define (get-closest-vowel-from-right word)\n  \
    \  (let loop ([word (string-&gt;list word)]\n               [vowel-pos -1]\n \
    \              [consonant-pos -1])\n      (cond\n        [(null? word)\n     \
    \    (if (and (&gt; vowel-pos 0)\n                  (&gt; consonant-pos 0)\n \
    \                 (&gt; (- consonant-pos vowel-pos) 1))\n             (list-ref\
    \ word vowel-pos)\n             #f)]\n        [(is-vowel? (car word))\n      \
    \   (loop (cdr word)\n               (+ vowel-pos 1)\n               consonant-pos)]\n\
    \        [(is-consonant? (car word))\n         (loop (cdr word)\n            \
    \   vowel-pos\n               (+ consonant-pos 1))])))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n    \
    \    (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n     \
    \   (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (if (or (is-vowel? (string-ref\
    \ word 0))\n            (is-vowel? (string-ref word 1)))\n        \"\"\n     \
    \   (let* ([word-len (string-length word)]\n               [last-char (string-ref\
    \ word (- word-len 1))]\n               [second-last-char (string-ref word (-\
    \ word-len 2))])\n          (if (and (is-consonant? last-char)\n             \
    \      (is-consonant? second-last-char))\n              (string-ref word (- word-len\
    \ 3))\n              (get-closest-vowel-from-right (substring word 0 (- word-len\
    \ 1)))))))\n  (get-closest-vowel-from-right word))\n", "  (define (is_vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is_consonant? (first word)) (is_vowel? (second word)))\n       \
    \     (second word)\n            (get-closest-vowel-helper (rest word)))))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (let loop ([word (string->list\
    \ word)]\n             [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")]\n             [consonants '(\"b\" \"c\" \"d\" \"f\" \"g\" \"\
    h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"\
    x\" \"y\" \"z\" \"B\" \"C\" \"D\" \"F\" \"G\" \"H\" \"J\" \"K\" \"L\" \"M\" \"\
    N\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"V\" \"W\" \"X\" \"Y\" \"Z\")]\n          \
    \   [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n\
    \          [(member (car word) vowels) (loop (cdr word) vowels consonants (cons\
    \ (car word) result))]\n          [(member (car word) consonants) (loop (cdr word)\
    \ vowels consonants result)]\n          [else (loop (cdr word) vowels consonants\
    \ result)])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-from-right word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [vowel-pos -1])\n      (cond [(empty? word) vowel-pos]\n\
    \            [(is-vowel? (first word)) (loop (rest word) (add1 vowel-pos))]\n\
    \            [(is-consonant? (first word)) (loop (rest word) vowel-pos)])))\n\
    \  (define (get-closest-vowel-from-left word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [vowel-pos -1])\n      (cond [(empty? word) vowel-pos]\n\
    \            [(is-vowel? (first word)) (loop (rest word) vowel-pos)]\n       \
    \     [(is-consonant? (first word)) (loop (rest word) (add1 vowel-pos))])))\n\
    \  (let ([right-vowel-pos (get-closest-vowel-from-right word)]\n        [left-vowel-pos\
    \ (get-closest-vowel-from-left word)])\n    (cond [(and (not (negative? right-vowel-pos))\n\
    \                (not (negative? left-vowel-pos)))\n           (if (&lt; right-vowel-pos\
    \ left-vowel-pos)\n               (list-ref (string-&gt;list word) right-vowel-pos)\n\
    \               (list-ref (string-&gt;list word) left-vowel-pos))]\n         \
    \ [(not (negative? right-vowel-pos))\n           (list-ref (string-&gt;list word)\
    \ right-vowel-pos)]\n          [(not (negative? left-vowel-pos))\n           (",
  "  (define (is-vowel? ch)\n    (or (equal? ch #\\a)\n        (equal? ch #\\e)\n\
    \        (equal? ch #\\i)\n        (equal? ch #\\o)\n        (equal? ch #\\u)))\n\
    \  (define (is-consonant? ch)\n    (not (is-vowel? ch)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond ((empty? word) \"\")\n          ((and (is-vowel? (first word))\n\
    \                (is-consonant? (second word)))\n           (first word))\n  \
    \        (else (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond [(empty? word)\
    \ \"\"]\n          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (empty? word)\n        \"\
    \"\n        (if (is-vowel? (first word))\n            (if (is-consonant? (second\
    \ word))\n                (string (first word))\n                (find-closest-vowel\
    \ (rest word)))\n            (find-closest-vowel (rest word)))))\n  (find-closest-vowel\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]\n      [else (first word)]))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (null? word)\n        \"\"\n        (if (and (is-consonant? (car word))\n\
    \                 (is-vowel? (cadr word)))\n            (string (cadr word))\n\
    \            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let\
    \ loop ([word (string-&gt;list word)]\n               [vowel-pos #f]\n       \
    \        [consonant-pos #f])\n      (cond [(empty? word)\n             (if vowel-pos\n\
    \                 (list-ref word vowel-pos)\n                 \"\")]\n       \
    \     [(is-vowel? (first word))\n             (loop (rest word)\n            \
    \       (add1 (or vowel-pos #f))\n                   consonant-pos)]\n       \
    \     [(is-consonant? (first word))\n             (loop (rest word)\n        \
    \           vowel-pos\n                   (add1 (or consonant-pos #f)))]\n   \
    \         [else\n             (error 'find-closest-vowel \"unknown case\")])))\n\
    \  (find-closest-vowel word))\n</code>\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (is-vowel? (first word))\n\
    \            (if (is-consonant? (second word))\n                (string (first\
    \ word))\n                (get-closest-vowel-helper (rest word)))\n          \
    \  (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (if (or (empty? word) (empty?\
    \ (rest word)))\n        \"\"\n        (if (and (is-consonant? (first word)) (is-vowel?\
    \ (second word)))\n            (second word)\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (get-closest-vowel-iter word i)\n    (cond\n      [(= i (- (string-length word)\
    \ 1)) \"\"]\n      [(and (char-vowel? (string-ref word i)) (char-consonant? (string-ref\
    \ word (- i 1))))\n       (string-ref word i)]\n      [else (get-closest-vowel-iter\
    \ word (+ i 1))]))\n  (get-closest-vowel-iter word 0))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (if\
    \ (and (is_consonant? (car word)) (is_vowel? (cadr word)))\n            (list-ref\
    \ word 1)\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (get-closest-vowel-helper word i)\n    (if (is_vowel?\
    \ (string-ref word i))\n        (string-ref word i)\n        (if (is_consonant?\
    \ (string-ref word i))\n            (get-closest-vowel-helper word (- i 1))\n\
    \            \"\")))\n  (get-closest-vowel-helper word (- (string-length word)\
    \ 1)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u\
    \ #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-iter word)\n    (if (empty? word)\n     \
    \   \"\"\n        (let ([c (first word)])\n          (if (is-vowel? c)\n     \
    \         (if (is-consonant? (second word))\n                  (string c)\n  \
    \                (get-closest-vowel-iter (rest word)))\n              (get-closest-vowel-iter\
    \ (rest word))))))\n  (get-closest-vowel-iter (reverse word)))\n", "  (define\
    \ (get-closest-vowel-iter word i)\n    (cond\n      [(= i (- (string-length word)\
    \ 1)) \"\"]\n      [(and (char-consonant? (string-ref word i)) (char-vowel? (string-ref\
    \ word (+ i 1)))) (string-ref word (+ i 1))]\n      [else (get-closest-vowel-iter\
    \ word (+ i 1))]))\n  (get-closest-vowel-iter word (- (string-length word) 1)))\n",
  "  (cond\n    [(empty? word) empty]\n    [(empty? (rest word)) empty]\n    [(and\
    \ (consonant? (first word)) (vowel? (second word))) (second word)]\n    [(and\
    \ (consonant? (first word)) (consonant? (second word))) (get_closest_vowel (rest\
    \ word))]\n    [else (get_closest_vowel (rest word))]))\n", "  (define (is_vowel?\
    \ c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\\
    i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (or (empty? word) (empty? (rest word)))\n        \"\"\n        (if (and\
    \ (is_consonant? (first word))\n                 (is_vowel? (second word)))\n\
    \            (string (second word))\n            (get-closest-vowel-helper (rest\
    \ word)))))\n  (get-closest-vowel-helper (reverse (string->list word))))\n", " \
    \ (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n  \
    \      (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond ((null? word) \"\")\n          ((and (is-vowel? (car word))\n\
    \                (is-consonant? (cadr word)))\n           (string (car word)))\n\
    \          (else (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n   \
    \     (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word)\n            (empty? (rest word)))\n      \
    \  \"\"\n        (if (and (is-consonant? (first word))\n                 (is-vowel?\
    \ (second word)))\n            (string (second word))\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (reverse (string->list word))))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond ((null? word) \"\")\n          ((is-vowel?\
    \ (car word)) (car word))\n          ((is-consonant? (car word)) (find-closest-vowel\
    \ (cdr word)))))\n  (define (find-closest-consonant word)\n    (cond ((null? word)\
    \ \"\")\n          ((is-consonant? (car word)) (car word))\n          ((is-vowel?\
    \ (car word)) (find-closest-consonant (cdr word)))))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond ((null? word) \"\")\n          ((and (is-vowel? (car word))\n\
    \                (is-consonant? (cadr word)))\n           (car word))\n      \
    \    (else (find-closest-vowel-between-consonants (cdr word)))))\n  (cond ((null?\
    \ word) \"\")\n        ((is-vowel? (car word)) (find-closest-vowel-between-consonants\
    \ (cdr word)))\n        ((is-consonant? (car word)) (find-closest-vowel-between-consonants\
    \ (cdr word)))))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i\
    \ #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (null? word)\n\
    \        \"\"\n        (if (and (is-consonant? (car word))\n                 (is-vowel?\
    \ (cadr word)))\n            (list-ref word 1)\n            (find-closest-vowel\
    \ (cdr word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-vowel-from-right word)\n    (let loop\
    \ ([word (string-reverse word)]\n               [prev-char #\\])\n           \
    \    [vowel #\\])\n      (cond [(empty? word) vowel]\n            [(is-vowel?\
    \ (first word))\n             (loop (rest word) (first word) (first word))]\n\
    \            [(and (is-consonant? (first word))\n                  (is-consonant?\
    \ prev-char))\n             (loop (rest word) (first word) vowel)]\n         \
    \   [else (loop (rest word) (first word) vowel)])))\n  (string (find-vowel-from-right\
    \ word)))\n", "  (define (is-vowel? c)\n    (or (equal? c #\\a)\n        (equal?\
    \ c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c\
    \ #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond ((empty? word) \"\")\n          ((is-vowel? (first word)) (first\
    \ word))\n          (else (find-vowel (rest word)))))\n  (define (find-consonant\
    \ word)\n    (cond ((empty? word) \"\")\n          ((is-consonant? (first word))\
    \ (first word))\n          (else (find-consonant (rest word)))))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond ((empty? word) \"\")\n          ((and (is-consonant? (first\
    \ word))\n                (is-vowel? (second word))\n                (is-consonant?\
    \ (third word)))\n           (second word))\n          (else (find-vowel-between-consonants\
    \ (rest word)))))\n  (find-vowel-between-consonants word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (reverse word)] [prev-c #f] [prev-v #f])\n     \
    \ (cond [(empty? word) prev-v]\n            [(is-vowel? (first word))\n      \
    \       (if (and prev-c (is-consonant? prev-c))\n                 (first word)\n\
    \                 (loop (rest word) (first word) prev-v))]\n            [else\
    \ (loop (rest word) (first word) prev-v)])))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (if (or (empty? word) (is-vowel?\
    \ (first word)))\n        \"\"\n        (if (is-vowel? (second word))\n      \
    \      (first word)\n            (get-closest-vowel (rest word)))))\n  (get-closest-vowel\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n\
    \    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is_vowel? (first word)) (first word)]\n\
    \      [(is_consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (let ([vowels (list #\\a\
    \ #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([i (sub1 (string-length\
    \ word))])\n      (cond\n        [(= i 0) \"\"]\n        [(member (string-ref\
    \ word i) vowels) (string-ref word i)]\n        [else (loop (sub1 i))]))))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond ((null? word) \"\")\n          ((is-vowel? (car\
    \ word)) (car word))\n          (else (find-vowel (cdr word)))))\n  (define (find-consonant\
    \ word)\n    (cond ((null? word) \"\")\n          ((is-consonant? (car word))\
    \ (car word))\n          (else (find-consonant (cdr word)))))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond ((null? word) \"\")\n          ((and (is-consonant? (car word))\n\
    \                (is-vowel? (cadr word))\n                (is-consonant? (caddr\
    \ word)))\n           (cadr word))\n          (else (find-vowel-between-consonants\
    \ (cdr word)))))\n  (cond ((null? word) \"\")\n        ((is-vowel? (car word))\
    \ \"\")\n        ((is-consonant? (car word))\n         (find-vowel-between-consonants\
    \ (reverse word)))\n        (else (find-vowel (reverse word)))))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(null? word) prev-vowel]\n\
    \            [(is-vowel? (car word))\n             (loop (cdr word) prev-consonant\
    \ (car word))]\n            [(is-consonant? (car word))\n             (if prev-vowel\n\
    \                 prev-vowel\n                 (loop (cdr word) (car word) prev-vowel))])))\n\
    \  (get-closest-vowel-from-right word))\n</code>\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-from-right word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel-from-right\
    \ (rest word))]))\n  (define (find-closest-consonant-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-closest-consonant-from-right (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word)) (is-vowel? (second word)) (is-consonant? (third word))) (second word)]\n\
    \      [else (find-closest-vowel-between-consonants (rest word))]))\n  (cond\n\
    \    [(empty? word) empty]\n    [(and (is-vowel? (first word)) (is-consonant?\
    \ (second word))) (first word)]\n    [(and (is-consonant?", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-vowel\
    \ #\\a]\n               [prev-consonant #\\a])\n      (cond [(empty? word)\n \
    \            (if (and (is_vowel? prev-vowel)\n                      (is_consonant?\
    \ prev-consonant))\n                 (list-&gt;string (list prev-vowel))\n   \
    \              \"\")]\n            [(is_vowel? (car word))\n             (loop\
    \ (cdr word) (car word) prev-consonant)]\n            [(is_consonant? (car word))\n\
    \             (loop (cdr word) prev-vowel (car word))]\n            [else\n  \
    \           (loop (cdr word) prev-vowel prev-consonant)])))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word))\
    \ \"\"]\n    [(and (consonant? (first word)) (consonant? (second word)))\n   \
    \  (get_closest_vowel (rest word))]\n    [(consonant? (first word))\n     (cond\n\
    \       [(vowel? (second word)) (string (second word))]\n       [else (get_closest_vowel\
    \ (rest word))])]\n    [else (get_closest_vowel (rest word))]))\n", "  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (is_consonant_pair? c1 c2)\n    (and\
    \ (is_consonant? c1)\n         (is_consonant? c2)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_consonant_pair? (first\
    \ word) (second word))\n       (get-closest-vowel-helper (rest word))]\n     \
    \ [(is_vowel? (first word)) (first word)]\n      [else (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (string->list word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(null? word) prev-vowel]\n\
    \            [(is-vowel? (car word))\n             (loop (cdr word) prev-consonant\
    \ (car word))]\n            [(is-consonant? (car word))\n             (if prev-vowel\n\
    \                 prev-vowel\n                 (loop (cdr word) (car word) prev-vowel))])))\n\
    \  (let ([closest-vowel (find-closest-vowel word)])\n    (if closest-vowel\n \
    \       (list-&gt;string (list closest-vowel))\n        \"\")))\n</code>\n", " \
    \ (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (get-closest-vowel-helper word)\n    (if (empty?\
    \ word)\n        \"\"\n        (if (and (is-vowel? (first word)) (is-vowel? (second\
    \ word)))\n            (get-closest-vowel-helper (rest word))\n            (if\
    \ (is-vowel? (first word))\n                (first word)\n                (get-closest-vowel-helper\
    \ (rest word))))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (let loop\
    \ ([word word]\n             [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")]\n             [closest-vowel \"\"])\n    (cond [(empty?\
    \ word) closest-vowel]\n          [(member (first word) vowels) (loop (rest word)\
    \ vowels (first word))]\n          [else (loop (rest word) vowels closest-vowel)])))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond ((empty? word) empty)\n          ((is-vowel? (first\
    \ word)) (first word))\n          (else (find-vowel (rest word)))))\n  (define\
    \ (find-consonant word)\n    (cond ((empty? word) empty)\n          ((is-consonant?\
    \ (first word)) (first word))\n          (else (find-consonant (rest word)))))\n\
    \  (define (find-vowel-between-consonants word)\n    (cond ((empty? word) empty)\n\
    \          ((is-vowel? (first word)) empty)\n          ((is-consonant? (first\
    \ word))\n           (cond ((empty? (rest word)) empty)\n                 ((is-vowel?\
    \ (second word)) (second word))\n                 (else (find-vowel-between-consonants\
    \ (rest word)))))\n          (else (find-vowel-between-consonants (rest word)))))\n\
    \  (find-vowel-between-consonants word))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (let loop ([word word] [i 0])\n      (cond [(empty? word) \"\"]\n       \
    \     [(is-vowel? (first word)) (first word)]\n            [(is-consonant? (first\
    \ word)) (loop (rest word) (+ i 1))])))\n  (let loop ([word word] [i 0])\n   \
    \ (cond [(empty? word) \"\"]\n          [(is-vowel? (first word)) (loop (rest\
    \ word) (+ i 1))]\n          [(is-consonant? (first word)) (find-closest-vowel\
    \ (rest word))])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]\n      [else (cons (first word)\
    \ (find-closest-vowel (rest word)))]))\n  (string-&gt;list (find-closest-vowel\
    \ (string-&gt;list word))))\n</code>\n", "  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel word)\n    (let loop\
    \ ([word (string->list word)]\n               [vowel-pos -1]\n               [consonant-pos\
    \ -1])\n      (cond [(null? word) (if (= vowel-pos -1) \"\" (list-ref word vowel-pos))]\n\
    \            [(is_vowel? (car word)) (loop (cdr word) (add1 vowel-pos) consonant-pos)]\n\
    \            [(is_consonant? (car word)) (loop (cdr word) vowel-pos (add1 consonant-pos))]\n\
    \            [else (loop (cdr word) vowel-pos consonant-pos)])))\n  (get-closest-vowel\
    \ word))\n", "  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))))\n  (define (is-vowel? c)\n \
    \   (not (is-consonant? c)))\n  (define (find-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-from-right word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel-from-right\
    \ (rest word))]))\n  (define (find-closest-consonant-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-closest-consonant-from-right (rest word))]))\n  (define (find-closest-vowel-from-right-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word)) (is-consonant? (second word))) (first word)]\n      [else (find-closest-vowel-from-right-between-consonants\
    \ (rest word))]))\n  (define (find-closest-vowel-between-consonants word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first word)) (is-conson",
  "  (define (get-closest-vowel-iter word i)\n    (cond\n      [(= i (string-length\
    \ word)) \"\"]\n      [(and (char-vowel? (string-ref word i))\n            (char-consonant?\
    \ (string-ref word (- i 1)))\n            (char-consonant? (string-ref word (+\
    \ i 1))))\n       (string (string-ref word i))]\n      [else (get-closest-vowel-iter\
    \ word (+ i 1))]))\n  (get-closest-vowel-iter word 0))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is_consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [(is_consonant? (first word)) (find-closest-vowel (rest\
    \ word))]\n      [else empty]))\n  (define (find-closest-consonant word)\n   \
    \ (cond\n      [(empty? word) empty]\n      [(is_consonant? (first word)) (first\
    \ word)]\n      [(is_vowel? (first word)) (find-closest-consonant (rest word))]\n\
    \      [else empty]))\n  (define (find-closest-vowel-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is_vowel? (first word)) (first word)]\n\
    \      [(is_consonant? (first word)) (find-closest-vowel-from-right (rest word))]\n\
    \      [else empty]))\n  (define (find-closest-consonant-from-right word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is_consonant? (first word)) (first\
    \ word)]\n      [(is_vowel? (first word)) (find-closest", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word)) (is-consonant? (second word))) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (find-closest-vowel word))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (consonant? (first word))\
    \ (consonant? (second word)))\n     (get_closest_vowel (rest word))]\n    [(and\
    \ (consonant? (first word)) (vowel? (second word)))\n     (second word)]\n   \
    \ [(and (vowel? (first word)) (consonant? (second word)))\n     (first word)]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (char-vowel? (first word))\
    \ (char-vowel? (second word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel?\
    \ (first word)) (char-consonant? (second word))) (first word)]\n    [(and (char-consonant?\
    \ (first word)) (char-vowel? (second word))) (second word)]\n    [(and (char-consonant?\
    \ (first word)) (char-consonant? (second word))) (get_closest_vowel (rest word))]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (if (null? word)\n        \"\"\n        (if (and (is-consonant?\
    \ (car word))\n                 (is-vowel? (cadr word)))\n            (cadr word)\n\
    \            (find-vowel (cdr word)))))\n  (find-vowel (reverse word)))\n", " \
    \ (define (get-closest-vowel-helper word)\n    (cond ((null? word) \"\")\n   \
    \       ((and (member (car word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n         \
    \       (member (cadr word) '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\"\
    \ \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\"\
    ))\n                (member (caddr word) '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\"\
    \ \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\"\
    \ \"y\" \"z\")))\n           (car word))\n          (else (get-closest-vowel-helper\
    \ (cdr word)))))\n  (get-closest-vowel-helper word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel\
    \ word)\n    (let loop ([word (string-reverse word)]\n               [prev #\\\
    \ ]\n               [curr #\\ ]\n               [next #\\ ])\n      (cond\n  \
    \      [(empty? word) \"\"]\n        [(is-vowel? (first word)) (string (first\
    \ word))]\n        [(and (is-consonant? prev) (is-consonant? curr) (is-vowel?\
    \ next)) (string next)]\n        [else (loop (rest word) curr (first word) next)])))\n\
    \  (get-closest-vowel word))\n", "  (define (is-vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n  \
    \    [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n  \
    \    [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n  (define\
    \ (find-closest-consonant word)\n    (cond\n      [(empty? word) empty]\n    \
    \  [(is-consonant? (first word)) (first word)]\n      [(is-vowel? (first word))\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word))\n       (cond\n         [(empty?\
    \ (rest word)) empty]\n         [(is-consonant? (second word)) (find-closest-vowel-from-right\
    \ (rest word))]\n         [(is-vowel? (second word)) (first word)])]))\n  (cond\n\
    \    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n    [(is-consonant?\
    \ (first word))\n     (cond\n       [(empty? (rest word)) empty]\n       [(is-consonant?\
    \ (second word)) (find-closest-vowel-from-right (rest word))]\n       [(is-vowel?\
    \ (second word)) (first word)])]))\n", "  (cond\n    [(empty? word) \"\"]\n  \
    \  [(vowel? (first word)) (get_closest_vowel (rest word))]\n    [(consonant? (first\
    \ word)) (get_closest_vowel (rest word))]\n    [else (first word)]))\n", "  (let\
    \ ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let\
    \ ([word-list (string->list word)])\n      (let loop ([word-list word-list] [prev-char\
    \ #\\])\n        (cond [(null? word-list) \"\"]\n              [(member (car word-list)\
    \ vowels)\n               (if (and (not (member prev-char vowels))\n         \
    \               (not (member (car (cdr word-list)) vowels)))\n               \
    \    (string (car word-list))\n                   (loop (cdr word-list) (car word-list)))]\n\
    \              [else (loop (cdr word-list) (car word-list))])))))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (is-consonant-vowel-consonant? c1 c2 c3)\n    (and (is-consonant? c1) (is-vowel?\
    \ c2) (is-consonant? c3)))\n  (define (get-closest-vowel-from-right word)\n  \
    \  (cond ((is-consonant-vowel-consonant? (string-ref word (- (string-length word)\
    \ 1))\n                                          (string-ref word (- (string-length\
    \ word) 2))\n                                          (string-ref word (- (string-length\
    \ word) 3)))\n           (string-ref word (- (string-length word) 2)))\n     \
    \     ((is-consonant-vowel-consonant? (string-ref word (- (string-length word)\
    \ 2))\n                                          (string-ref word (- (string-length\
    \ word) 3))\n                                          (string-ref word (- (string-length\
    \ word) 4)))\n           (string-ref word (- (string-length word) 3)))\n     \
    \     ((is-consonant-vowel-consonant? (string-ref word (- (string-length word)\
    \ 3))\n                                          (string-ref word (- (string-length\
    \ word) 4))\n                                          (string-ref word (- (string-length\
    \ word) 5)))\n           (string-ref word (- (string-length word) 4)))\n     \
    \     ((is-consonant-vowel-consonant? (string-ref word (- (string-length word)\
    \ 4))\n                                          (string-ref word (- (string-length\
    \ word) 5))\n                                          (string-ref word (- (string-length\
    \ word) 6)))\n           (string-ref word (- (string-length word) 5)))\n     \
    \     ((is-consonant-vowel-consonant? (string-ref word", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word)) (is-consonant? (second word))) (first word)]\n      [else (get-closest-vowel\
    \ (rest word))]))\n  (get-closest-vowel (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-first-vowel\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(is-vowel? (car lst)) (car lst)]\n\
    \      [else (find-first-vowel (cdr lst))]))\n  (define (find-first-consonant\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(is-consonant? (car lst)) (car\
    \ lst)]\n      [else (find-first-consonant (cdr lst))]))\n  (define (find-first-vowel-between-consonants\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (is-consonant? (car lst))\n\
    \            (is-vowel? (cadr lst))\n            (is-consonant? (caddr lst)))\
    \ (cadr lst)]\n      [else (find-first-vowel-between-consonants (cdr lst))]))\n\
    \  (cond\n    [(or (null? word) (string=? word \"\")) \"\"]\n    [(is-vowel? (string-ref\
    \ word 0)) \"\"]\n    [(is-vowel? (string-ref word (- (string-length word) 1)))\
    \ \"\"]\n    [else (find-first-vowel-between-consonants (string->list word))]))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word)))\n       (first word)]\n \
    \     [else (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word)) (get-closest-vowel-from-right (rest word))]\n      [else (first\
    \ word)]))\n  (get-closest-vowel-from-right (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (let loop ([word word]\n               [prev-char #\\])\n               [curr-char\
    \ #\\])\n      (cond [(empty? word) #f]\n            [(is-vowel? curr-char)\n\
    \             (if (and (is-consonant? prev-char)\n                      (is-consonant?\
    \ (first word)))\n                 curr-char\n                 (loop (rest word)\
    \ curr-char (first word)))]\n            [else (loop (rest word) curr-char (first\
    \ word))])))\n  (let ([closest-vowel (get-closest-vowel-from-right word)])\n \
    \   (if closest-vowel\n        (string closest-vowel)\n        \"\")))\n", " \
    \ (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-from-right word)\n    (let loop ([word (string-reverse word)]\n\
    \               [prev-char #\\])\n               [prev-prev-char #\\])\n     \
    \ (cond\n        [(empty? word) #f]\n        [(and (is-vowel? (first word))\n\
    \              (is-consonant? prev-char)\n              (is-consonant? prev-prev-char))\n\
    \         (string-reverse (first word))]\n        [else (loop (rest word) (first\
    \ word) prev-char)])))\n  (get-closest-vowel-from-right word))\n", "  (define\
    \ (get-closest-vowel-iter word i)\n    (cond\n      [(empty? word) \"\"]\n   \
    \   [(and (char-vowel? (first word)) (char-consonant? (second word))) (first word)]\n\
    \      [else (get-closest-vowel-iter (rest word) (+ i 1))]))\n  (get-closest-vowel-iter\
    \ word 0))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-from-right word)\n    (if (is-vowel? (string-ref\
    \ word 0))\n        (string-ref word 0)\n        (get-closest-vowel-from-right\
    \ (substring word 1))))\n  (define (get-closest-vowel-from-left word)\n    (if\
    \ (is-vowel? (string-ref word (- (string-length word) 1)))\n        (string-ref\
    \ word (- (string-length word) 1))\n        (get-closest-vowel-from-left (substring\
    \ word 0 (- (string-length word) 1)))))\n  (define (get-closest-vowel-from-right-and-left\
    \ word)\n    (if (is-vowel? (string-ref word 0))\n        (string-ref word 0)\n\
    \        (if (is-vowel? (string-ref word (- (string-length word) 1)))\n      \
    \      (string-ref word (- (string-length word) 1))\n            (if (is-consonant?\
    \ (string-ref word 0))\n                (get-closest-vowel-from-right (substring\
    \ word 1))\n                (get-closest-vowel-from-left (substring word 0 (-\
    \ (string-length word) 1)))))))\n  (get-closest-vowel-from-right-and-left word))\n",
  "  (define (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(vowel? (first word)) (first word)]\n      [else (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-char\
    \ #\\])\n               [prev-prev-char #\\])\n      (cond [(empty? word) \"\"\
    ]\n            [(is-vowel? (first word)) (list-&gt;string (reverse word))]\n \
    \           [(is-consonant? (first word))\n             (loop (rest word) (first\
    \ word) prev-char)]\n            [(is-vowel? prev-char) (list-&gt;string (reverse\
    \ word))]\n            [(is-consonant? prev-char)\n             (loop (rest word)\
    \ (first word) prev-char)]\n            [(is-vowel? prev-prev-char) (list-&gt;string\
    \ (reverse word))]\n            [(is-consonant? prev-prev-char)\n            \
    \ (loop (rest word) (first word) prev-char)]\n            [else \"\"])))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (get-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (get-closest-vowel (rest word))]))\n  (get-closest-vowel\
    \ (reverse word)))\n", "  (define (get-closest-vowel-iter word i)\n    (if (or\
    \ (= i 0) (= i (- (string-length word) 1)))\n        \"\"\n        (if (and (member\
    \ (string-ref word i) \"aeiouAEIOU\")\n                 (not (member (string-ref\
    \ word (- i 1)) \"aeiouAEIOU\"))\n                 (not (member (string-ref word\
    \ (+ i 1)) \"aeiouAEIOU\")))\n            (string-ref word i)\n            (get-closest-vowel-iter\
    \ word (- i 1)))))\n  (get-closest-vowel-iter word (- (string-length word) 1)))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel-from-right word)\n    (let loop ([word (string-reverse word)]\n\
    \               [prev-consonant #f]\n               [prev-vowel #f])\n      (cond\
    \ [(empty? word) (if prev-vowel\n                               (string-reverse\
    \ prev-vowel)\n                               \"\")]\n            [(is-vowel?\
    \ (first word))\n             (if prev-consonant\n                 (string-reverse\
    \ prev-vowel)\n                 (loop (rest word) prev-consonant (first word)))]\n\
    \            [(is-consonant? (first word))\n             (loop (rest word) (first\
    \ word) prev-vowel)])))\n  (find-vowel-from-right word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n\
    \    (cond ((empty? word) \"\")\n          ((is-vowel? (first word)) (first word))\n\
    \          (else (find-vowel (rest word)))))\n  (define (find-consonant word)\n\
    \    (cond ((empty? word) \"\")\n          ((is-consonant? (first word)) (first\
    \ word))\n          (else (find-consonant (rest word)))))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond ((empty? word) \"\")\n          ((is-vowel? (first word)) (find-consonant\
    \ (rest word)))\n          ((is-consonant? (first word)) (find-vowel (rest word)))\n\
    \          (else (find-vowel-between-consonants (rest word)))))\n  (find-vowel-between-consonants\
    \ word))\n", "  (define (is-vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? ch)\n    (not (is-vowel?\
    \ ch)))\n  (define (get-closest-vowel-from-right word)\n    (if (empty? word)\n\
    \        \"\"\n        (if (is-vowel? (first word))\n            (first word)\n\
    \            (get-closest-vowel-from-right (rest word)))))\n  (define (get-closest-vowel-from-left\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (is-vowel? (last word))\n\
    \            (last word)\n            (get-closest-vowel-from-left (butlast word)))))\n\
    \  (define (get-closest-vowel-from-right-with-consonant word)\n    (if (empty?\
    \ word)\n        \"\"\n        (if (and (is-consonant? (first word)) (is-vowel?\
    \ (second word)))\n            (second word)\n            (get-closest-vowel-from-right-with-consonant\
    \ (rest word)))))\n  (define (get-closest-vowel-from-left-with-consonant word)\n\
    \    (if (empty? word)\n        \"\"\n        (if (and (is-consonant? (last word))\
    \ (is-vowel? (second-to-last word)))\n            (second-to-last word)\n    \
    \        (get-closest-vowel-from-left-with-consonant (butlast word)))))\n  (cond\n\
    \    [(empty? word) \"\"]\n    [(is-vowel? (first word)) (get-closest-vowel-from-right-with-consonant\
    \ word)]\n    [(is-vowel? (last word)) (get-closest-vowel-from-left-with-conson",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first\
    \ word)) (first word)]\n          [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond [(empty? word) empty]\n          [(is-consonant?\
    \ (first word)) (first word)]\n          [else (find-consonant (rest word))]))\n\
    \  (define (find-vowel-between-consonants word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (find-consonant (rest word))]\n         \
    \ [(is-consonant? (first word)) (find-vowel (rest word))]\n          [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (find-vowel-between-consonants word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel (rest\
    \ word))]))\n  (find-closest-vowel (reverse word)))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]\n      [(vowel? (first word)) (first\
    \ word)]\n      [else (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond [(empty?\
    \ word) empty]\n          [(is_vowel? (first word)) (first word)]\n          [(is_consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (and\
    \ (not (is-vowel? c))\n         (not (char=? c #\\y))\n         (not (char=? c\
    \ #\\Y))))\n  (define (get-vowel-index word)\n    (let loop ((i 0) (vowel-index\
    \ -1))\n      (if (&lt; i (string-length word))\n          (if (is-vowel? (string-ref\
    \ word i))\n              (loop (+ i 1) i)\n              (loop (+ i 1) vowel-index))\n\
    \          vowel-index)))\n  (define (get-consonant-index word)\n    (let loop\
    \ ((i (- (string-length word) 1)) (consonant-index -1))\n      (if (&gt;= i 0)\n\
    \          (if (is-consonant? (string-ref word i))\n              (loop (- i 1)\
    \ i)\n              (loop (- i 1) consonant-index))\n          consonant-index)))\n\
    \  (let ((vowel-index (get-vowel-index word))\n        (consonant-index (get-consonant-index\
    \ word)))\n    (if (&lt; vowel-index consonant-index)\n        (string (string-ref\
    \ word vowel-index))\n        \"\")))\n</code>\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is-consonant? (first word)) (is-vowel? (second word)))\n       \
    \     (second word)\n            (get-closest-vowel-helper (rest word)))))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (let ([vowels (list #\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([word word] [i (sub1\
    \ (string-length word))])\n      (cond\n        [(or (zero? i) (member (string-ref\
    \ word i) vowels)) (string-ref word i)]\n        [(and (not (member (string-ref\
    \ word i) vowels)) (member (string-ref word (sub1 i)) vowels)) (string-ref word\
    \ (sub1 i))]\n        [else (loop word (sub1 i))]))))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (if (and (is-consonant?\
    \ (car word))\n                 (is-vowel? (cadr word)))\n            (list->string\
    \ (list (cadr word)))\n            (get-closest-vowel-helper (cdr word)))))\n\
    \  (get-closest-vowel-helper (string->list word)))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n     \
    \ [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n     \
    \ [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant (rest word))]))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (find-closest-vowel (rest word))]\n\
    \      [else empty]))\n  (define (find-closest-consonant word)\n    (cond\n  \
    \    [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [(is-vowel? (first word)) (find-closest-consonant (rest word))]\n     \
    \ [else empty]))\n  (define (find-closest-vowel-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (find-closest-vowel-from-right (rest word))]\n\
    \      [else empty]))\n  (define (find-closest-consonant-from-right word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [(is-vowel? (first word)) (find-closest", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(is-consonant? (first word))\
    \ (first word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (find-vowel-between-consonants word))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (get-closest-vowel word)\n    (let loop ([word (string-&gt;list word)]\n\
    \               [vowel #f]\n               [consonant #f])\n      (cond [(null?\
    \ word) (if vowel vowel \"\")]\n            [(is_vowel? (car word))\n        \
    \     (if consonant vowel (loop (cdr word) (car word) consonant))]\n         \
    \   [else (loop (cdr word) vowel (car word))])))\n  (get-closest-vowel word))\n\
    </code>\n", "  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"\
    f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"\
    v\" \"w\" \"x\" \"y\" \"z\")))\n  (define (is-vowel? c)\n    (member c '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\")))\n  (define (get-closest-vowel-helper word)\n    (cond\
    \ ((null? word) \"\")\n          ((and (is-consonant? (car word))\n          \
    \      (is-vowel? (cadr word)))\n           (cadr word))\n          (else (get-closest-vowel-helper\
    \ (cdr word)))))\n  (get-closest-vowel-helper (reverse (string->list word))))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel\
    \ (rest word))]))\n  (find-closest-vowel (reverse word)))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [else (find-vowel-from-right (rest word))]))\n  (define\
    \ (find-consonant-from-right word)\n    (cond\n      [(empty? word) empty]\n \
    \     [(is_consonant? (first word)) (first word)]\n      [else (find-consonant-from-right\
    \ (rest word))]))\n  (define (find-vowel-from-right-between-consonants word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\n   \
    \    (if (is_consonant? (second word))\n           (first word)\n           (find-vowel-from-right-between-consonants\
    \ (rest word)))]\n      [else (find-vowel-from-right-between-consonants (rest\
    \ word))]))\n  (find-vowel-from-right-between-consonants word))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants\
    \ (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r\
    \ #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\\
    L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop\
    \ ([word (string->list word)]\n               [i (length word)])\n      (cond\
    \ [(empty? word) \"\"]\n            [(and (member (car word) vowels) (member (cadr\
    \ word) consonants)) (list->string (take word i))]\n            [else (loop (cdr\
    \ word) (sub1 i))]))))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (is-consonant? c)\n    (and (not (is-vowel?\
    \ c))\n         (not (char=? c #\\y))))\n  (define (find-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel (rest\
    \ word))]\n      [else empty]))\n  (define (find-closest-consonant word)\n   \
    \ (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [(is-vowel? (first word)) (find-closest-consonant (rest word))]\n\
    \      [else empty]))\n  (define (find-closest-vowel-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (find-closest-vowel-from-right (rest word))]\n\
    \      [else empty]))\n  (define (find-closest-consonant-from-right word)\n  \
    \  (cond\n      [(empty? word) empty]\n", "  (define (is_vowel? c)\n    (or (equal?\
    \ c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c\
    \ #\\o)\n        (equal? c #\\u)))\n  (define (is_consonant? c)\n    (not (is_vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (if (or (empty? word)\n\
    \            (equal? (length word) 1))\n        \"\"\n        (let ([c (first\
    \ word)])\n          (if (is_vowel? c)\n              (if (and (is_consonant?\
    \ (second word))\n                       (is_consonant? (third word)))\n     \
    \             (string c)\n                  (get-closest-vowel-helper (rest word)))\n\
    \              (get-closest-vowel-helper (rest word))))))\n  (get-closest-vowel-helper\
    \ (string-reverse word)))\n", "  (define (is-vowel? c)\n    (or (equal? c #\\\
    a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n\
    \        (equal? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) \"\
    \"]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant? (first\
    \ word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest\
    \ word)) \"\"]\n    [(consonant? (first word)) (get_closest_vowel (rest word))]\n\
    \    [(vowel? (first word)) (get_closest_vowel (rest word))]\n    [(consonant?\
    \ (second word)) (first word)]\n    [(vowel? (second word)) (get_closest_vowel\
    \ (rest word))]\n    [else (get_closest_vowel (rest word))]))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [else (find-vowel-from-right (rest word))]))\n  (define\
    \ (find-consonant-from-right word)\n    (cond\n      [(empty? word) empty]\n \
    \     [(is_consonant? (first word)) (first word)]\n      [else (find-consonant-from-right\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is_vowel? (first word))\n         \
    \   (is_consonant? (find-consonant-from-right (rest word))))\n       (first word)]\n\
    \      [else (find-vowel-between-consonants (rest word))]))\n  (find-vowel-between-consonants\
    \ word))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\\
    F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\\
    Y #\\Z)])\n    (let loop ([word (string->list word)]\n               [closest-vowel\
    \ #\\])\n      (cond [(null? word) (list->string (list closest-vowel))]\n    \
    \        [(member (car word) vowels) (loop (cdr word) (car word))]\n         \
    \   [(member (car word) consonants) (loop (cdr word) closest-vowel)]\n       \
    \     [else (loop (cdr word) closest-vowel)]))))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (define (get-closest-vowel-from-right-iter word closest-vowel)\n\
    \      (if (empty? word)\n          closest-vowel\n          (let ([c (first word)])\n\
    \            (if (is-vowel? c)\n                (get-closest-vowel-from-right-iter\
    \ (rest word) c)\n                (get-closest-vowel-from-right-iter (rest word)\
    \ closest-vowel)))))\n    (get-closest-vowel-from-right-iter word #\\ ))\n  (define\
    \ (get-closest-vowel-from-left word)\n    (define (get-closest-vowel-from-left-iter\
    \ word closest-vowel)\n      (if (empty? word)\n          closest-vowel\n    \
    \      (let ([c (first (reverse word))])\n            (if (is-vowel? c)\n    \
    \            (get-closest-vowel-from-left-iter (reverse (rest (reverse word)))\
    \ c)\n                (get-closest-vowel-from-left-iter (reverse (rest (reverse\
    \ word))) closest-vowel)))))\n    (get-closest-vowel-from-left-iter word #\\ ))\n\
    \  (define (get-closest-vowel-from-right-and-left word)\n    (define (get-closest-vowel-from-right-and-left-iter\
    \ word closest-vowel)\n      (if (empty? word)\n          closest-vowel\n    \
    \      (let ([c (first word)])\n            (if (is-vowel? c)\n              \
    \  (get-clos", "  (let loop ([word word]\n             [i (sub1 (string-length\
    \ word))])\n    (cond\n      [(or (= i 0) (= i 1)) \"\"]\n      [(and (char-vowel?\
    \ (string-ref word i))\n            (char-consonant? (string-ref word (sub1 i)))\n\
    \            (char-consonant? (string-ref word (sub1 (sub1 i)))))\n       (string\
    \ (string-ref word i))]\n      [else (loop word (sub1 i))])))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is-consonant? (first word)) (is-vowel? (second word)))\n       \
    \     (second word)\n            (get-closest-vowel-helper (rest word)))))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (char-consonant?\
    \ (first word))\n                 (char-vowel? (second word)))\n            (string\
    \ (second word))\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (string-&gt;list word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a\
    \ #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond ((null?\
    \ word) '())\n          ((and (is-vowel? (car word))\n                (is-consonant?\
    \ (cadr word)))\n           (list (car word)))\n          (else (find-closest-vowel\
    \ (cdr word)))))\n  (if (null? (find-closest-vowel word))\n      \"\"\n      (list->string\
    \ (find-closest-vowel word))))\n", "  (define (get-closest-vowel-iter word i)\n\
    \    (cond [(empty? word) \"\"]\n          [(and (not (empty? (rest word)))\n\
    \                (char-vowel? (first word))\n                (char-consonant?\
    \ (second word)))\n           (string (first word))]\n          [else (get-closest-vowel-iter\
    \ (rest word) (+ i 1))]))\n  (get-closest-vowel-iter word 0))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (first word)]\n          [(is-consonant? (first word)) (find-closest-vowel (rest\
    \ word))]))\n  (define (find-closest-consonant word)\n    (cond [(empty? word)\
    \ empty]\n          [(is-consonant? (first word)) (first word)]\n          [(is-vowel?\
    \ (first word)) (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (find-closest-consonant (rest word))]\n          [(is-consonant? (first word))\
    \ (find-closest-vowel-between-consonants (rest word))]))\n  (cond [(empty? word)\
    \ empty]\n        [(is-vowel? (first word)) empty]\n        [(is-consonant? (first\
    \ word)) (find-closest-vowel-between-consonants (rest word))]))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (if (or (empty? word)\n            (empty? (rest\
    \ word)))\n        \"\"\n        (if (and (is-consonant? (first word))\n     \
    \            (is-vowel? (second word)))\n            (second word)\n         \
    \   (find-closest-vowel (rest word)))))\n  (find-closest-vowel word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (and (is-consonant? (car\
    \ word))\n                 (is-vowel? (cadr word)))\n            (string (cadr\
    \ word))\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([word word] [i 0])\n      (cond\n\
    \        [(empty? word) \"\"]\n        [(member (first word) vowels) (substring\
    \ word i (+ i 1))]\n        [else (loop (rest word) (+ i 1))]))))\n", "  (define\
    \ (helper word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\
    \n        (if (and (char-vowel? (first word)) (char-consonant? (second word)))\n\
    \            (string (first word))\n            (helper (rest word)))))\n  (helper\
    \ (string-reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if (null?\
    \ word)\n        \"\"\n        (if (is-vowel? (car word))\n            (if (is-consonant?\
    \ (car (cdr word)))\n                (string (car word))\n                (get-closest-vowel-helper\
    \ (cdr word)))\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (string-&gt;list word)))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n    (let loop\
    \ ([word (string-reverse word)]\n               [prev-char #\\])\n           \
    \    [next-char #\\])\n      (cond [(empty? word) \"\"]\n            [(is-vowel?\
    \ (first word))\n             (if (and (is-consonant? prev-char)\n           \
    \           (is-consonant? next-char))\n                 (string (first word))\n\
    \                 (loop (rest word) (first word) next-char))]\n            [else\
    \ (loop (rest word) prev-char (first word))])))\n  (get-closest-vowel word))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (if (null? word)\n        \"\"\n        (if (and\
    \ (is_consonant? (car word))\n                 (is_vowel? (cadr word)))\n    \
    \        (string (cadr word))\n            (find-closest-vowel (cdr word)))))\n\
    \  (find-closest-vowel word))\n", "  (define (is_vowel? c)\n    (or (char=? c\
    \ #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\\
    o)\n        (char=? c #\\u)))\n  (define (is_consonant? c)\n    (not (is_vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is_vowel? (first word)) (first word)]\n      [(is_consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (or (equal? c \"a\") (equal?\
    \ c \"e\") (equal? c \"i\") (equal? c \"o\") (equal? c \"u\")\n        (equal?\
    \ c \"A\") (equal? c \"E\") (equal? c \"I\") (equal? c \"O\") (equal? c \"U\"\
    )))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (if (is-consonant-vowel-consonant? word)\n        (string-ref word\
    \ 1)\n        (get-closest-vowel-from-right (substring word 1))))\n  (if (is-consonant-vowel-consonant?\
    \ word)\n      (string-ref word 1)\n      (get-closest-vowel-from-right (substring\
    \ word 1))))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [(is-consonant? (first word))\
    \ (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [(is-vowel? (first word)) (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word))\n       (cond\n         [(is-vowel?\
    \ (second word)) (second word)]\n         [(is-consonant? (second word)) (find-closest-vowel-between-consonants\
    \ (rest word))])]\n      [(is-vowel? (first word)) (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (find-closest-vowel-between-consonants (reverse word)))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel word)\n\
    \    (if (or (null? word)\n            (null? (cdr word)))\n        \"\"\n   \
    \     (let ((first (car word))\n              (second (cadr word)))\n        \
    \  (if (and (is-consonant? first)\n                   (is-vowel? second))\n  \
    \            (list->string (list second))\n              (get-closest-vowel (cdr\
    \ word))))))\n  (get-closest-vowel (string->list word)))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]\n      [(vowel? (first word)) (first\
    \ word)]\n      [else (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (get-closest-vowel-iter word i)\n    (cond\n\
    \      [(= i 0) \"\"]\n      [(and (char-vowel? (string-ref word (- i 1)))\n \
    \           (char-consonant? (string-ref word (- i 2))))\n       (string-ref word\
    \ (- i 1))]\n      [else (get-closest-vowel-iter word (- i 1))]))\n  (get-closest-vowel-iter\
    \ word (string-length word)))\n", "  (define (is-vowel? c)\n    (member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (if (is-vowel? (string-ref word 0))\n        (string-ref word 0)\n      \
    \  (get-closest-vowel-from-right (substring word 1))))\n  (define (get-closest-vowel-from-left\
    \ word)\n    (if (is-vowel? (string-ref word (- (string-length word) 1)))\n  \
    \      (string-ref word (- (string-length word) 1))\n        (get-closest-vowel-from-left\
    \ (substring word 0 (- (string-length word) 1)))))\n  (define (get-closest-vowel-from-right-with-consonant\
    \ word)\n    (if (and (is-consonant? (string-ref word 0))\n             (is-consonant?\
    \ (string-ref word 1)))\n        (get-closest-vowel-from-right (substring word\
    \ 2))\n        (get-closest-vowel-from-right word)))\n  (define (get-closest-vowel-from-left-with-consonant\
    \ word)\n    (if (and (is-consonant? (string-ref word (- (string-length word)\
    \ 1)))\n             (is-consonant? (string-ref word (- (string-length word) 2))))\n\
    \        (get-closest-vowel-from-left (substring word 0 (- (string-length word)\
    \ 2)))\n        (get-closest-vowel-from-left word)))\n  (cond ((string=? word\
    \ \"\") \"\")\n        ((string=? word \"a\") \"\")\n        ((string=? word \"\
    e\") \"\")\n        ((string=? word \"i\") \"\")", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) word]\n\
    \      [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n  (define\
    \ (find-closest-consonant word)\n    (cond\n      [(empty? word) empty]\n    \
    \  [(is-consonant? (first word)) word]\n      [(is-vowel? (first word)) (find-closest-consonant\
    \ (rest word))]))\n  (define (find-closest-vowel-between-consonants word)\n  \
    \  (let ([vowel (find-closest-vowel word)]\n          [consonant (find-closest-consonant\
    \ vowel)])\n      (if (empty? consonant)\n          empty\n          (first vowel))))\n\
    \  (find-closest-vowel-between-consonants word))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (char-vowel? (first\
    \ word))\n                 (char-consonant? (second word)))\n            (string\
    \ (first word))\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (cond\n    [(empty? word) \"\"]\n   \
    \ [(empty? (rest word)) \"\"]\n    [(and (char-vowel? (first word)) (char-vowel?\
    \ (second word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first\
    \ word)) (char-consonant? (second word))) (get_closest_vowel (rest word))]\n \
    \   [(and (char-consonant? (first word)) (char-vowel? (second word))) (first word)]\n\
    \    [(and (char-consonant? (first word)) (char-consonant? (second word))) (get_closest_vowel\
    \ (rest word))]))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if (or (null?\
    \ word) (null? (cdr word)))\n        \"\"\n        (if (and (is_consonant? (car\
    \ word)) (is_vowel? (cadr word)))\n            (list-ref word 1)\n           \
    \ (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond ((null? word) \"\")\n          ((and (is_vowel? (car word))\n\
    \                (is_consonant? (cadr word)))\n           (string (car word)))\n\
    \          (else (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (consonant?\
    \ (first word)) (consonant? (second word)))\n     (get_closest_vowel (rest word))]\n\
    \    [(and (consonant? (first word)) (vowel? (second word)))\n     (second word)]\n\
    \    [(and (vowel? (first word)) (consonant? (second word)))\n     (first word)]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (let ([vowels (list #\\a\
    \ #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([word (string->list\
    \ word)]\n               [prev-char #\\ ]\n               [curr-char #\\ ]\n \
    \              [next-char #\\ ]\n               [closest-vowel #\\ ]\n       \
    \        [closest-vowel-pos 0])\n      (if (null? word)\n          (if (char-alphabetic?\
    \ closest-vowel)\n              (list->string (list closest-vowel))\n        \
    \      \"\")\n          (let ([curr-char (car word)]\n                [next-char\
    \ (cadr word)])\n            (if (and (char-alphabetic? curr-char)\n         \
    \            (char-alphabetic? next-char)\n                     (char-alphabetic?\
    \ prev-char)\n                     (not (member curr-char vowels))\n         \
    \            (member next-char vowels))\n                (loop (cdr word)\n  \
    \                    curr-char\n                      next-char\n            \
    \          (caddr word)\n                      next-char\n                   \
    \   (+ 1 closest-vowel-pos))\n                (loop (cdr word)\n             \
    \         curr-char\n                      next-char\n                      (caddr\
    \ word)\n                      closest-vowel\n                      closest-vowel-pos)))))))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (if (or (empty? word) (empty? (rest word)))\n\
    \        \"\"\n        (if (and (is_consonant? (first word)) (is_vowel? (second\
    \ word)))\n            (second word)\n            (get-closest-vowel-helper (rest\
    \ word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [(is_consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (let loop\
    \ ([word word]\n             [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")]\n             [vowel-pos -1])\n    (cond\n      [(empty?\
    \ word) (if (= vowel-pos -1) \"\" (list-ref word vowel-pos)))\n      [(member\
    \ (first word) vowels) (loop (rest word) vowels (add1 vowel-pos))]\n      [else\
    \ (loop (rest word) vowels vowel-pos)])))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is-consonant? (first word)) (is-vowel? (second word)))\n       \
    \     (second word)\n            (get-closest-vowel-helper (rest word)))))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (consonant? (first word))\
    \ (consonant? (second word)))\n     (get_closest_vowel (rest word))]\n    [(and\
    \ (consonant? (first word)) (vowel? (second word)))\n     (second word)]\n   \
    \ [(and (vowel? (first word)) (consonant? (second word)))\n     (first word)]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (define (is-vowel? c)\n \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond ((null? word) \"\")\n          ((and (is-vowel? (car word))\n     \
    \           (is-consonant? (cadr word)))\n           (string (car word)))\n  \
    \        (else (find-closest-vowel (cdr word)))))\n  (find-closest-vowel (reverse\
    \ (string->list word))))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\n   \
    \    (if (is-consonant? (second word))\n           (first word)\n           (find-vowel-between-consonants\
    \ (rest word)))]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n  \
    \  [(is-consonant? (first word))\n     (cond\n       [(empty? (rest word)) empty]\n\
    \       [(is-vowel? (second word)) empty]\n       [else (find-vowel-between-consonants\
    \ (rest word))])]\n    [else empty]))\n", "  (let ([vowels (list #\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([word word] [i (sub1 (string-length\
    \ word))])\n      (if (and (not (string-empty? word)) (not (member (string-ref\
    \ word i) vowels)))\n          (loop word (sub1 i))\n          (if (and (not (string-empty?\
    \ word)) (member (string-ref word i) vowels))\n              (string-ref word\
    \ i)\n              \"\")))))\n", "  (define (is-vowel? c)\n    (or (equal? c\
    \ #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\\
    o)\n        (equal? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (is-consonant-vowel-consonant? word)\n    (and (is-consonant?\
    \ (string-ref word 0))\n         (is-vowel? (string-ref word 1))\n         (is-consonant?\
    \ (string-ref word 2))))\n  (define (is-consonant-vowel? word)\n    (and (is-consonant?\
    \ (string-ref word 0))\n         (is-vowel? (string-ref word 1))))\n  (define\
    \ (is-vowel-consonant? word)\n    (and (is-vowel? (string-ref word 0))\n     \
    \    (is-consonant? (string-ref word 1))))\n  (define (find-closest-vowel word)\n\
    \    (cond ((is-consonant-vowel-consonant? word)\n           (string-ref word\
    \ 1))\n          ((is-consonant-vowel? word)\n           (string-ref word 1))\n\
    \          ((is-vowel-consonant? word)\n           (string-ref word 0))\n    \
    \      (else \"\")))\n  (find-closest-vowel word))\n", "  (define (is_vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (is_consonant_vowel_consonant?\
    \ c1 c2 c3)\n    (and (is_consonant? c1) (is_vowel? c2) (is_consonant? c3)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (let loop ((word (reverse\
    \ word)) (result #f))\n      (cond ((null? word) result)\n            ((is_consonant_vowel_consonant?\
    \ (car word) (cadr word) (caddr word))\n             (loop (cdddr word) (cadr\
    \ word)))\n            (else (loop (cdr word) result)))))\n  (if (is_consonant_vowel_consonant?\
    \ (string-ref word 0) (string-ref word 1) (string-ref word 2))\n      (get-closest-vowel-from-right\
    \ word)\n      \"\"))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (get-vowel-index word)\n    (let loop ((i (sub1\
    \ (string-length word))))\n      (cond ((= i 0) #f)\n            ((and (is-consonant?\
    \ (string-ref word i))\n                  (is-consonant? (string-ref word (sub1\
    \ i))))\n             (loop (sub1 i)))\n            ((is-vowel? (string-ref word\
    \ i)) i)\n            (else #f))))\n  (let ((vowel-index (get-vowel-index word)))\n\
    \    (if vowel-index\n        (substring word vowel-index (add1 vowel-index))\n\
    \        \"\")))\n", "  (define (is-vowel? c)\n    (or (equal? c #\\a)\n     \
    \   (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n      \
    \  (equal? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-helper word)\n    (if (or (empty? word)\n      \
    \      (and (is-vowel? (first word))\n                 (is-vowel? (second word))))\n\
    \        \"\"\n        (if (and (is-consonant? (first word))\n               \
    \  (is-vowel? (second word)))\n            (second word)\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (if (or (empty? word)\n            (is-vowel? (first word)))\n  \
    \      \"\"\n        (if (is-vowel? (second word))\n            (string (second\
    \ word))\n            (get-closest-vowel-from-right (rest word)))))\n  (get-closest-vowel-from-right\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond [(empty?\
    \ word) empty]\n          [(is_vowel? (first word)) (first word)]\n          [(is_consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(vowel? (first word)) (first word)]\n   \
    \   [else (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-vowel word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond [(empty? word) empty]\n\
    \          [(is-consonant? (first word)) (first word)]\n          [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond [(empty?\
    \ word) empty]\n          [(and (is-consonant? (first word))\n               \
    \ (is-vowel? (second word))\n                (is-consonant? (third word)))\n \
    \          (second word)]\n          [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (cond [(empty? word) empty]\n        [(is-vowel? (first word))\
    \ empty]\n        [(is-consonant? (first word))\n         (cond [(empty? (rest\
    \ word)) empty]\n               [(is-vowel? (second word)) empty]\n          \
    \     [(is-consonant? (second word))\n                (cond [(empty? (rest (rest\
    \ word))) empty]\n                      [(is-vowel? (third word)) empty]\n   \
    \                   [(is-consonant? (third word))\n                       (find-vowel-between-consonants\
    \ (rest (rest (rest word))))])])])\n        [else empty]))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (char-alphabetic?\
    \ (first word))\n                 (not (member (first word) '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\"))))\n            (get-closest-vowel-helper (rest word))\n      \
    \      (if (and (char-alphabetic? (second word))\n                     (not (member\
    \ (second word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n                (first word)\n\
    \                (get-closest-vowel-helper (rest word))))))\n  (get-closest-vowel-helper\
    \ (string->list word)))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper (rest\
    \ word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [(is_consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([word\
    \ word] [idx (sub1 (string-length word))])\n      (if (or (negative? idx) (member\
    \ (string-ref word idx) vowels))\n          (if (or (negative? idx) (member (string-ref\
    \ word (sub1 idx)) vowels))\n              (if (or (negative? idx) (member (string-ref\
    \ word (sub1 (sub1 idx))) vowels))\n                  \"\"\n                 \
    \ (string (string-ref word (sub1 (sub1 idx)))))\n              (string (string-ref\
    \ word (sub1 idx))))\n          (loop (substring word 0 idx) (sub1 idx))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
