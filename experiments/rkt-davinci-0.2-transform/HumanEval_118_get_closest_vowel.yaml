name: HumanEval_118_get_closest_vowel
language: rkt
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\"\
  )\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel\
  \ \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (get-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(member (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (first word)]\n\
    \      [else (get-vowel (rest word))]))\n  (define (get-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(member (first word) '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\")) empty]\n      [else (first word)]))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (not (empty? (get-vowel\
    \ word))) (not (empty? (get-consonant (rest word))))) (get-vowel word)]\n    \
    \  [else (get-closest-vowel-from-right (rest word))]))\n  (get-closest-vowel-from-right\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\
    \ ((null? word) \"\")\n          ((and (is-vowel? (car word)) (is-consonant? (cadr\
    \ word))) (car word))\n          (else (find-closest-vowel (cdr word)))))\n  (find-closest-vowel\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond [(empty? word)\
    \ empty]\n          [(is-vowel? (first word)) empty]\n          [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]\n          [else (first word)]))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (let loop ([word (string-reverse word)]\n               [prev-char #\\])\n\
    \               [next-char #\\])\n      (cond [(empty? word) \"\"]\n         \
    \   [(is-vowel? (first word)) (first word)]\n            [(and (is-consonant?\
    \ prev-char) (is-consonant? next-char))\n             (loop (rest word) (first\
    \ word) prev-char)]\n            [else (loop (rest word) (first word) prev-char)])))\n\
    \  (get-closest-vowel-from-right word))\n", "  (define (is_vowel? c)\n    (or\
    \ (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\\
    u)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (let\
    \ ((first (car word))\n              (second (cadr word)))\n          (if (and\
    \ (is_consonant? first) (is_vowel? second))\n              (string second)\n \
    \             (get-closest-vowel-helper (cdr word))))))\n  (get-closest-vowel-helper\
    \ (string->list word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if (empty?\
    \ word)\n        \"\"\n        (if (and (is-consonant? (first word))\n       \
    \          (is-vowel? (second word)))\n            (string (second word))\n  \
    \          (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n   \
    \     (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n    \
    \    (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (let loop ([word word]\n \
    \              [vowel #\\])\n      (cond\n        [(empty? word) vowel]\n    \
    \    [(is-vowel? (first word)) (loop (rest word) (first word))]\n        [(is-consonant?\
    \ (first word)) (loop (rest word) vowel)])))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (null? word)\n        \"\"\
    \n        (if (and (is-consonant? (car word))\n                 (is-vowel? (cadr\
    \ word)))\n            (string (cadr word))\n            (find-closest-vowel (cdr\
    \ word)))))\n  (find-closest-vowel word))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (char-consonant?\
    \ (first word)) (char-vowel? (second word))) (first word)]\n      [(and (char-consonant?\
    \ (first word)) (char-consonant? (second word))) (get-closest-vowel-helper (rest\
    \ word))]\n      [else (get-closest-vowel-helper (rest word))]))\n  (if (char-consonant?\
    \ (first word))\n      (get-closest-vowel-helper word)\n      empty))\n", "  (define\
    \ (get-closest-vowel-helper word)\n    (define (is-vowel? c)\n      (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n    (define (is-consonant?\
    \ c)\n      (not (is-vowel? c)))\n    (define (get-closest-vowel-helper-helper\
    \ word)\n      (if (null? word)\n          \"\"\n          (if (and (is-consonant?\
    \ (car word))\n                   (is-vowel? (cadr word)))\n              (string\
    \ (cadr word))\n              (get-closest-vowel-helper-helper (cdr word)))))\n\
    \    (get-closest-vowel-helper-helper (reverse (string->list word))))\n  (get-closest-vowel-helper\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))))\n  (define (get-next-vowel lst)\n\
    \    (if (null? lst)\n        \"\"\n        (if (is-consonant? (car lst))\n  \
    \          (get-next-vowel (cdr lst))\n            (car lst))))\n  (get-next-vowel\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant?\
    \ #f]\n               [prev-vowel? #f]\n               [closest-vowel #f])\n \
    \     (cond [(null? word) (if closest-vowel (list-&gt;string closest-vowel) \"\
    \")]\n            [(is-vowel? (car word)) (loop (cdr word) prev-consonant? #t\
    \ (car word))]\n            [(is-consonant? (car word)) (if prev-vowel?\n    \
    \                                        (if closest-vowel\n                 \
    \                               (if (&lt; (string-length (list-&gt;string closest-vowel))\n\
    \                                                        (string-length (list-&gt;string\
    \ (car word))))\n                                                    (loop (cdr\
    \ word) #t prev-vowel? (car word))\n                                         \
    \           (loop (cdr word) #t prev-vowel? closest-vowel))\n                \
    \                                (loop (cdr word) #t prev-vowel? (car word)))\n\
    \                                            (loop (cdr word) #t prev-vowel? closest-vowel))]\n\
    \            [else (error \"should not happen\")])))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if (or (null?\
    \ word) (null? (cdr word)))\n        \"\"\n        (if (and (is_consonant? (car\
    \ word)) (is_vowel? (cadr word)))\n            (list-ref word 1)\n           \
    \ (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (or (empty? word) (empty?\
    \ (rest word)))\n        \"\"\n        (if (and (is-consonant? (first word)) (is-vowel?\
    \ (second word)))\n            (second word)\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (if (null? word)\n        \"\"\n        (if (and (is-consonant? (car word))\n\
    \                 (is-vowel? (cadr word)))\n            (string (cadr word))\n\
    \            (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define\
    \ (get-closest-vowel-iter word)\n    (if (null? word)\n        \"\"\n        (if\
    \ (is_vowel? (car word))\n            (if (is_consonant? (cadr word))\n      \
    \          (string (car word))\n                (get-closest-vowel-iter (cdr word)))\n\
    \            (get-closest-vowel-iter (cdr word)))))\n  (get-closest-vowel-iter\
    \ (string->list word)))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (null?\
    \ word)\n        \"\"\n        (if (and (is-consonant? (car word))\n         \
    \        (is-vowel? (cadr word)))\n            (cadr word)\n            (find-closest-vowel\
    \ (cdr word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n \
    \       (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (char-vowel? (first word))\
    \ (char-vowel? (second word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel?\
    \ (first word)) (char-consonant? (second word))) (first word)]\n    [(and (char-consonant?\
    \ (first word)) (char-vowel? (second word))) (second word)]\n    [(and (char-consonant?\
    \ (first word)) (char-consonant? (second word))) (get_closest_vowel (rest word))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
