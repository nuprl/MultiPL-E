name: HumanEval_119_match_parens
language: rkt
prompt: "#lang racket\n\n;; You are given a list of two strings, both strings consist\
  \ of open\n;; parentheses '(' or close parentheses ')' only.\n;; Your job is to\
  \ check if it is possible to concatenate the two strings in\n;; some order, that\
  \ the resulting string will be good.\n;; A string S is considered to be good if\
  \ and only if all parentheses in S\n;; are balanced. For example: the string '(())()'\
  \ is good, while the string\n;; '())' is not.\n;; Return 'Yes' if there's a way\
  \ to make a good string, and return 'No' otherwise.\n;; Examples:\n;; >>> (match_parens\
  \ (list \"()(\" \")\"))\n;; \"Yes\"\n;; >>> (match_parens (list \")\" \")\"))\n\
  ;; \"No\"\n(define (match_parens lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n\
  \    (check-equal? (candidate (list \"()(\" \")\")) \"Yes\")\n    (check-equal?\
  \ (candidate (list \")\" \")\")) \"No\")\n    (check-equal? (candidate (list \"\
  (()(())\" \"())())\")) \"No\")\n    (check-equal? (candidate (list \")())\" \"(()()(\"\
  )) \"Yes\")\n    (check-equal? (candidate (list \"(())))\" \"(()())((\")) \"Yes\"\
  )\n    (check-equal? (candidate (list \"()\" \"())\")) \"No\")\n    (check-equal?\
  \ (candidate (list \"(()(\" \"()))()\")) \"Yes\")\n    (check-equal? (candidate\
  \ (list \"((((\" \"((())\")) \"No\")\n    (check-equal? (candidate (list \")(()\"\
  \ \"(()(\")) \"No\")\n    (check-equal? (candidate (list \")(\" \")(\")) \"No\"\
  )\n    (check-equal? (candidate (list \"(\" \")\")) \"Yes\")\n    (check-equal?\
  \ (candidate (list \")\" \"(\")) \"Yes\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"\
    ]\n    [(and (string=? (car lst) \"(\") (string=? (cadr lst) \")\")) (match_parens\
    \ (cddr lst))]\n    [(and (string=? (car lst) \")\") (string=? (cadr lst) \"(\"\
    )) (match_parens (cddr lst))]\n    [else \"No\"]))\n", "  (define (is-good? s)\n\
    \    (define (helper s)\n      (cond\n        [(empty? s) 0]\n        [(equal?\
    \ (first s) #\\() (+ 1 (helper (rest s)))]\n        [(equal? (first s) #\\)) (-\
    \ 1 (helper (rest s)))]))\n    (equal? (helper s) 0))\n  (cond\n    [(is-good?\
    \ (string-append (first lst) (second lst))) \"Yes\"]\n    [(is-good? (string-append\
    \ (second lst) (first lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1 (helper (rest\
    \ lst)))]))\n  (if (equal? (helper (first lst)) 0)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (is-good? str)\n    (let loop ([str str] [count 0])\n      (cond\
    \ [(empty? str) (zero? count)]\n            [(char=? (first str) #\\() (loop (rest\
    \ str) (+ count 1))]\n            [(char=? (first str) #\\)) (loop (rest str)\
    \ (- count 1))]\n            [else #f])))\n  (define (is-good-concat? str1 str2)\n\
    \    (or (is-good? (string-append str1 str2))\n        (is-good? (string-append\
    \ str2 str1))))\n  (cond [(is-good-concat? (first lst) (second lst)) \"Yes\"]\n\
    \        [else \"No\"]))\n", "  (define (paren-count s)\n    (cond ((null? s)\
    \ 0)\n          ((eq? (car s) ?\\() (+ 1 (paren-count (cdr s))))\n          ((eq?\
    \ (car s) ?\\)) (- 1 (paren-count (cdr s))))))\n  (define (is-good? s)\n    (eq?\
    \ (paren-count s) 0))\n  (define (concat-all lst)\n    (cond ((null? lst) \"\"\
    )\n          (else (string-append (car lst) (concat-all (cdr lst))))))\n  (cond\
    \ ((and (is-good? (car lst)) (is-good? (cadr lst))) \"Yes\")\n        ((and (is-good?\
    \ (car lst)) (not (is-good? (cadr lst))))\n         (cond ((is-good? (string-append\
    \ (car lst) (cadr lst))) \"Yes\")\n               (else \"No\")))\n        ((and\
    \ (not (is-good? (car lst))) (is-good? (cadr lst)))\n         (cond ((is-good?\
    \ (string-append (cadr lst) (car lst))) \"Yes\")\n               (else \"No\"\
    )))\n        ((and (not (is-good? (car lst))) (not (is-good? (cadr lst))))\n \
    \        (cond ((is-good? (string-append (car lst) (cadr lst))) \"Yes\")\n   \
    \            ((is-good? (string-append (cadr lst) (car lst))) \"Yes\")\n     \
    \          (else \"No\")))))\n", "  (define (is-good? s)\n    (let loop ([s s]\
    \ [n 0])\n      (cond [(empty? s) (= n 0)]\n            [(char=? (first s) #\\\
    () (loop (rest s) (+ n 1))]\n            [(char=? (first s) #\\)) (loop (rest\
    \ s) (- n 1))]\n            [else #f])))\n  (define (is-good-concat? s1 s2)\n\
    \    (and (is-good? s1) (is-good? s2) (is-good? (string-append s1 s2))))\n  (cond\
    \ [(is-good-concat? (first lst) (second lst)) \"Yes\"]\n        [(is-good-concat?\
    \ (second lst) (first lst)) \"Yes\"]\n        [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1\
    \ (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (sub1\
    \ (match-parens-helper (rest lst)))]))\n  (if (equal? (match-parens-helper (append\
    \ (first lst) (second lst))) 0)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (cond\n      [(null? lst1) (if (null? lst2)\
    \ \"Yes\" \"No\")]\n      [(null? lst2) (if (null? lst1) \"Yes\" \"No\")]\n  \
    \    [(char=? (car lst1) ?\\() (match-parens-helper (cdr lst1) lst2)]\n      [(char=?\
    \ (car lst1) ?\\)) (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(char=?\
    \ (car lst2) ?\\() (match-parens-helper lst1 (cdr lst2))]\n      [(char=? (car\
    \ lst2) ?\\)) (match-parens-helper (cdr lst1) (cdr lst2))]))\n  (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\"\
    )]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first\
    \ lst1) #\\() (match-parens-helper (rest lst1) lst2)]\n      [(char=? (first lst1)\
    \ #\\)) (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) #\\() (match-parens-helper lst1 (rest lst2))]\n      [(char=? (first lst2)\
    \ #\\)) (match-parens-helper (rest lst1) (rest lst2))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1\
    \ (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (sub1\
    \ (match-parens-helper (rest lst)))]))\n  (cond\n    [(equal? (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [else \"No\"]))\n", "  (cond [(empty? lst) \"\
    Yes\"]\n        [(empty? (cdr lst)) \"Yes\"]\n        [(and (string=? (car lst)\
    \ \"(\")\n              (string=? (cadr lst) \")\"))\n         (match_parens (cddr\
    \ lst))]\n        [(and (string=? (car lst) \")\")\n              (string=? (cadr\
    \ lst) \"(\"))\n         (match_parens (cddr lst))]\n        [else \"No\"]))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond ((null? lst1) (if (null? lst2)\
    \ \"Yes\" \"No\"))\n          ((null? lst2) (if (null? lst1) \"Yes\" \"No\"))\n\
    \          ((and (equal? (car lst1) \")\") (equal? (car lst2) \")\"))\n      \
    \     (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and (equal? (car\
    \ lst1) \"(\") (equal? (car lst2) \")\"))\n           (match-parens-helper (cdr\
    \ lst1) (cdr lst2)))\n          ((and (equal? (car lst1) \"(\") (equal? (car lst2)\
    \ \"(\"))\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n         \
    \ ((and (equal? (car lst1) \")\") (equal? (car lst2) \"(\"))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          (else \"No\")))\n  (match-parens-helper (car\
    \ lst) (cadr lst)))\n", "  (define (helper lst1 lst2)\n    (cond\n      [(empty?\
    \ lst1)\n       (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n \
    \     [(empty? lst2)\n       (if (empty? lst1)\n           \"Yes\"\n         \
    \  \"No\")]\n      [(char=? (first lst1) #\\()\n       (helper (rest lst1) (cons\
    \ (first lst1) lst2))]\n      [(char=? (first lst1) #\\))\n       (if (empty?\
    \ lst2)\n           \"No\"\n           (helper (rest lst1) (rest lst2)))]))\n\
    \  (helper (string->list (first lst)) (string->list (second lst))))\n", "  (define\
    \ (helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\"\
    \ \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=?\
    \ (first lst1) ?\\() (helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst1) ?\\)) (helper (rest lst1) (cons (first lst2) (rest lst2)))]\n      [(char=?\
    \ (first lst2) ?\\() (helper (cons (first lst1) (rest lst1)) (rest lst2))]\n \
    \     [(char=? (first lst2) ?\\)) (helper (rest lst1) (rest lst2))]))\n  (helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (good?\
    \ s)\n    (let loop ([s s] [c 0])\n      (cond [(empty? s) (= c 0)]\n        \
    \    [(char=? (first s) #\\() (loop (rest s) (+ c 1))]\n            [(char=? (first\
    \ s) #\\)) (loop (rest s) (- c 1))]\n            [else (error \"bad string\")])))\n\
    \  (define (match? s1 s2)\n    (cond [(empty? s1) (good? s2)]\n          [(empty?\
    \ s2) (good? s1)]\n          [(char=? (first s1) #\\() (or (match? (rest s1) s2)\n\
    \                                       (match? (rest s1) (cons (first s2) s2)))]\n\
    \          [(char=? (first s1) #\\)) (or (match? (rest s1) s2)\n             \
    \                          (match? (rest s1) (cons (first s2) s2)))]\n       \
    \   [else (error \"bad string\")]))\n  (if (match? (string->list (first lst))\
    \ (string->list (second lst)))\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\"\
    )]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first\
    \ lst1) ?\\()\n       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n\
    \      [(char=? (first lst1) ?\\))\n       (if (empty? lst2) \"No\"\n        \
    \   (match-parens-helper (rest lst1) (rest lst2)))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1\
    \ (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (sub1\
    \ (match-parens-helper (rest lst)))]))\n  (if (equal? (match-parens-helper (first\
    \ lst)) 0)\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond ((null? lst1) (if (null? lst2) \"Yes\" \"No\"))\n    \
    \      ((null? lst2) (if (null? lst1) \"Yes\" \"No\"))\n          ((equal? (car\
    \ lst1) (car lst2)) (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((equal?\
    \ (car lst1) \")\") (match-parens-helper (cdr lst1) lst2))\n          ((equal?\
    \ (car lst2) \"(\") (match-parens-helper lst1 (cdr lst2)))\n          (else \"\
    No\")))\n  (match-parens-helper (string->list (car lst)) (string->list (cadr lst))))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal?\
    \ (second lst) \")\")) \"No\"]\n    [(and (equal? (first lst) \"(\") (equal? (second\
    \ lst) \")\")) \"Yes\"]\n    [(and (equal? (first lst) \"(\") (equal? (second\
    \ lst) \"(\")) \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second\
    \ lst) \"(\")) \"Yes\"]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty?\
    \ (cdr lst)) \"Yes\"]\n    [(string=? (car lst) \")\") \"No\"]\n    [(string=?\
    \ (cadr lst) \"(\") \"No\"]\n    [else (match_parens (cdr lst))]))\n", "  (define\
    \ (is-good? str)\n    (let loop ([i 0] [balance 0])\n      (cond [(= i (string-length\
    \ str)) (= balance 0)]\n            [(char=? (string-ref str i) #\\() (loop (+\
    \ i 1) (+ balance 1))]\n            [(char=? (string-ref str i) #\\)) (loop (+\
    \ i 1) (- balance 1))])))\n  (define (concat-and-check str1 str2)\n    (cond [(is-good?\
    \ (string-append str1 str2)) \"Yes\"]\n          [(is-good? (string-append str2\
    \ str1)) \"Yes\"]\n          [else \"No\"]))\n  (apply concat-and-check lst))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if\
    \ (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\"\
    \ \"No\")]\n      [(char=? (first lst1) ?\\() (match-parens-helper (rest lst1)\
    \ (rest lst2))]\n      [(char=? (first lst1) ?\\)) (match-parens-helper (rest\
    \ lst1) (cons (first lst2) (rest lst2)))]\n      [(char=? (first lst2) ?\\() (match-parens-helper\
    \ (cons (first lst1) (rest lst1)) (rest lst2))]\n      [(char=? (first lst2) ?\\\
    )) (match-parens-helper (rest lst1) (rest lst2))]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1\
    \ (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (sub1\
    \ (match-parens-helper (rest lst)))]))\n  (define (match-parens-helper2 lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \")\") (add1 (match-parens-helper2\
    \ (rest lst)))]\n      [(equal? (first lst) \"(\") (sub1 (match-parens-helper2\
    \ (rest lst)))]))\n  (cond\n    [(and (equal? (match-parens-helper (first lst))\
    \ 0)\n          (equal? (match-parens-helper2 (second lst)) 0)) \"Yes\"]\n   \
    \ [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\n        \
    \   \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1)\n           \"Yes\"\
    \n           \"No\")]\n      [(char=? (first lst1) (first lst2))\n       (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst2) #\\()\n       (match-parens-helper\
    \ lst1 (rest lst2))]\n      [else\n       \"No\"]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2) \"Yes\"\
    \ \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1) \"Yes\" \"No\")]\n\
    \      [(char=? (car lst1) (car lst2))\n       (match-parens-helper (cdr lst1)\
    \ (cdr lst2))]\n      [(char=? (car lst1) #\\()\n       (match-parens-helper (cdr\
    \ lst1) lst2)]\n      [(char=? (car lst2) #\\()\n       (match-parens-helper lst1\
    \ (cdr lst2))]\n      [else \"No\"]))\n  (match-parens-helper (string->list (car\
    \ lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty?\
    \ lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) ?\\()\
    \ (match-parens-helper (rest lst1) lst2)]\n      [(char=? (first lst1) ?\\)) (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst2) ?\\() (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) ?\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(null? lst1) (if (null? lst2) \"Yes\" \"No\")]\n      [(null? lst2) (if\
    \ (null? lst1) \"Yes\" \"No\")]\n      [(char=? (car lst1) ?\\() (match-parens-helper\
    \ (cdr lst1) lst2)]\n      [(char=? (car lst1) ?\\)) (match-parens-helper (cdr\
    \ lst1) (cdr lst2))]\n      [(char=? (car lst2) ?\\() (match-parens-helper lst1\
    \ (cdr lst2))]\n      [(char=? (car lst2) ?\\)) (match-parens-helper (cdr lst1)\
    \ (cdr lst2))]))\n  (match-parens-helper (string->list (car lst)) (string->list\
    \ (cadr lst))))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond ((null?\
    \ lst1) (if (null? lst2) \"Yes\" \"No\"))\n          ((null? lst2) (if (null?\
    \ lst1) \"Yes\" \"No\"))\n          ((equal? (car lst1) \"(\") (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((equal? (car lst2) \")\") (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          (else \"No\")))\n  (match-parens-helper (string->list\
    \ (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper lst)\n\
    \    (cond\n      [(empty? lst) #t]\n      [(equal? (first lst) \")\") #f]\n \
    \     [else (match-parens-helper (rest lst))]))\n  (if (match-parens-helper (append\
    \ (first lst) (second lst)))\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond ((null? lst) 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper\
    \ (cdr lst))))\n          ((equal? (car lst) \")\") (- 1 (match-parens-helper\
    \ (cdr lst))))))\n  (if (equal? (match-parens-helper (car lst)) 0)\n      \"Yes\"\
    \n      \"No\"))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper (rest\
    \ lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper (rest\
    \ lst)))]))\n  (cond\n    [(equal? (match-parens-helper (first lst)) 0) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\n        \
    \   \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1)\n           \"Yes\"\
    \n           \"No\")]\n      [(char=? (first lst1) ?\\()\n       (match-parens-helper\
    \ (rest lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) ?\\))\n\
    \       (if (empty? lst2)\n           \"No\"\n           (match-parens-helper\
    \ (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst))\
    \ (string->list (second lst))))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty?\
    \ lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\()\
    \ (match-parens-helper (rest lst1) lst2)]\n      [(char=? (first lst1) #\\)) (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst2) #\\() (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) #\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (if (null? lst)\n      \"Yes\"\n      (let ([s1 (car\
    \ lst)]\n            [s2 (cadr lst)])\n        (if (string=? s1 \"\")\n      \
    \      (if (string=? s2 \"\")\n                \"Yes\"\n                \"No\"\
    )\n            (if (string=? s2 \"\")\n                (if (string=? s1 \"()\"\
    )\n                    \"Yes\"\n                    \"No\")\n                (if\
    \ (string=? (substring s1 0 1) \"(\")\n                    (if (string=? (substring\
    \ s2 (sub1 (string-length s2))) \")\")\n                        (match_parens\
    \ (list (substring s1 1 (string-length s1))\n                                \
    \            (substring s2 0 (sub1 (string-length s2)))))\n                  \
    \      \"No\")\n                    (if (string=? (substring s2 (sub1 (string-length\
    \ s2))) \"(\")\n                        (match_parens (list (substring s2 0 (sub1\
    \ (string-length s2)))\n                                            (substring\
    \ s1 1 (string-length s1))))\n                        \"No\"))))))))\n", "  (define\
    \ (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first\
    \ lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n  (define (match-parens-helper2\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \")\") (+\
    \ 1 (match-parens-helper2 (rest lst)))]\n      [(equal? (first lst) \"(\") (-\
    \ 1 (match-parens-helper2 (rest lst)))]))\n  (cond\n    [(> (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [(> (match-parens-helper2 (second lst)) 0) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n \
    \   (cond\n      [(empty? lst1) (empty? lst2)]\n      [(empty? lst2) (empty? lst1)]\n\
    \      [(char=? (first lst1) (first lst2))\n       (match-parens-helper (rest\
    \ lst1) (rest lst2))]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst2) #\\()\n       (match-parens-helper\
    \ lst1 (rest lst2))]\n      [else #f]))\n  (define (parens-to-list str)\n    (cond\n\
    \      [(empty? str) '()]\n      [else (cons (first str) (parens-to-list (rest\
    \ str)))]))\n  (define (list-to-parens lst)\n    (cond\n      [(empty? lst) \"\
    \"]\n      [else (string-append (list->string (list (first lst)))\n          \
    \                 (list-to-parens (rest lst)))]))\n  (define (concat-parens lst1\
    \ lst2)\n    (cond\n      [(empty? lst1) lst2]\n      [(empty? lst2) lst1]\n \
    \     [else (cons (first lst1) (concat-parens (rest lst1) lst2))]))\n  (define\
    \ (concat-parens-all lst)\n    (cond\n      [(empty? lst) '()]\n      [(empty?\
    \ (rest lst)) lst]\n      [else (cons (concat-parens (first lst) (second lst))\n\
    \                  (concat-parens-all (rest lst)))]))\n  (define (parens-to-parens\
    \ lst)\n    (map list-to-parens lst))\n  (define (parens-to-parens-all lst)\n\
    \    (map parens-to-parens lst))\n  (define (", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(null? lst1) (if (null? lst2) \"Yes\" \"No\")]\n\
    \      [(null? lst2) (if (null? lst1) \"Yes\" \"No\")]\n      [(char=? (car lst1)\
    \ (car lst2)) (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(char=? (car\
    \ lst1) #\\() (match-parens-helper (cdr lst1) lst2)]\n      [(char=? (car lst2)\
    \ #\\() (match-parens-helper lst1 (cdr lst2))]\n      [else \"No\"]))\n  (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper\
    \ str1 str2)\n    (cond ((and (empty? str1) (empty? str2)) \"Yes\")\n        \
    \  ((and (empty? str1) (not (empty? str2))) \"No\")\n          ((and (not (empty?\
    \ str1)) (empty? str2)) \"No\")\n          ((and (not (empty? str1)) (not (empty?\
    \ str2)))\n           (cond ((char=? (first str1) ?\\()\n                  (match-parens-helper\
    \ (rest str1) (cons (first str1) str2)))\n                 ((char=? (first str1)\
    \ ?\\))\n                  (cond ((empty? str2) \"No\")\n                    \
    \    ((char=? (first str2) ?\\()\n                         (match-parens-helper\
    \ (rest str1) (rest str2)))\n                        (else (match-parens-helper\
    \ (rest str1) str2))))\n                 (else (match-parens-helper (rest str1)\
    \ str2))))))\n  (match-parens-helper (first lst) (second lst)))\n", "  (cond\n\
    \    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and (string=?\
    \ (car lst) \"(\") (string=? (cadr lst) \")\"))\n     (match_parens (cddr lst))]\n\
    \    [(and (string=? (car lst) \")\") (string=? (cadr lst) \"(\"))\n     (match_parens\
    \ (cddr lst))]\n    [else \"No\"]))\n", "  (define (match-parens-helper str1 str2)\n\
    \    (cond\n      [(empty? str1) str2]\n      [(empty? str2) str1]\n      [(char=?\
    \ (first str1) (first str2)) (match-parens-helper (rest str1) (rest str2))]\n\
    \      [(char=? (first str1) #\\() (match-parens-helper (rest str1) str2)]\n \
    \     [(char=? (first str2) #\\() (match-parens-helper str1 (rest str2))]\n  \
    \    [else #f]))\n  (define (parens-balanced? str)\n    (let loop ([str str] [count\
    \ 0])\n      (cond\n        [(empty? str) (zero? count)]\n        [(char=? (first\
    \ str) #\\() (loop (rest str) (+ count 1))]\n        [(char=? (first str) #\\\
    )) (loop (rest str) (- count 1))]\n        [else (loop (rest str) count)])))\n\
    \  (cond\n    [(parens-balanced? (match-parens-helper (first lst) (second lst)))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst)\n   \
    \ (cond\n      [(empty? lst) 0]\n      [(= (first lst) #\\() (+ 1 (match-parens-helper\
    \ (rest lst)))]\n      [(= (first lst) #\\)) (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (define (match-parens-helper-2 lst)\n    (cond\n      [(empty? lst) 0]\n  \
    \    [(= (first lst) #\\() (- 1 (match-parens-helper-2 (rest lst)))]\n      [(=\
    \ (first lst) #\\)) (+ 1 (match-parens-helper-2 (rest lst)))]))\n  (define (match-parens-helper-3\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(= (first lst) #\\() (- 1 (match-parens-helper-3\
    \ (rest lst)))]\n      [(= (first lst) #\\)) (+ 1 (match-parens-helper-3 (rest\
    \ lst)))]))\n  (define (match-parens-helper-4 lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= (first lst) #\\() (+ 1 (match-parens-helper-4 (rest lst)))]\n\
    \      [(= (first lst) #\\)) (- 1 (match-parens-helper-4 (rest lst)))]))\n  (cond\n\
    \    [(and (= (match-parens-helper (first lst)) 0) (= (match-parens-helper-2 (second\
    \ lst)) 0)) \"Yes\"]\n    [(and (= (match-parens-helper-3 (first lst)) 0) (= (match-parens-helper-4\
    \ (second lst)) 0)) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (car lst)) (match_parens (cdr lst))]\n    [(empty? (cdr\
    \ lst)) (match_parens (list (car lst) \"\"))]\n    [else\n     (define (count-parens\
    \ str)\n       (cond\n         [(empty? str) 0]\n         [(char=? (car str) #\\\
    () 1]\n         [(char=? (car str) #\\)) -1]\n         [else (count-parens (cdr\
    \ str))]))\n     (define (count-parens-lst lst)\n       (cond\n         [(empty?\
    \ lst) 0]\n         [else (+ (count-parens (car lst)) (count-parens-lst (cdr lst)))]))\n\
    \     (cond\n       [(= (count-parens-lst lst) 0) \"Yes\"]\n       [else \"No\"\
    ])]))\n", "  (define (helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n   \
    \    (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n      [(empty?\
    \ lst2)\n       (if (empty? lst1)\n           \"Yes\"\n           \"No\")]\n \
    \     [(and (equal? (first lst1) \")\")\n            (equal? (first lst2) \")\"\
    ))\n       (helper (rest lst1) (rest lst2))]\n      [(and (equal? (first lst1)\
    \ \"(\")\n            (equal? (first lst2) \")\"))\n       (helper (rest lst1)\
    \ (rest lst2))]\n      [(and (equal? (first lst1) \"(\")\n            (equal?\
    \ (first lst2) \"(\"))\n       (or (helper (rest lst1) lst2)\n           (helper\
    \ lst1 (rest lst2)))]\n      [(and (equal? (first lst1) \")\")\n            (equal?\
    \ (first lst2) \"(\"))\n       (or (helper (rest lst1) lst2)\n           (helper\
    \ lst1 (rest lst2)))]))\n  (helper (first lst) (rest lst)))\n", "  (define (is-good?\
    \ str)\n    (let loop ([str str] [count 0])\n      (cond [(empty? str) (= count\
    \ 0)]\n            [(equal? (first str) #\\() (loop (rest str) (+ count 1))]\n\
    \            [(equal? (first str) #\\)) (loop (rest str) (- count 1))]\n     \
    \       [else #f])))\n  (cond [(is-good? (string-append (first lst) (second lst)))\
    \ \"Yes\"]\n        [(is-good? (string-append (second lst) (first lst))) \"Yes\"\
    ]\n        [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n  \
    \  (cond ((null? lst1) (if (null? lst2) \"Yes\" \"No\"))\n          ((null? lst2)\
    \ (if (null? lst1) \"Yes\" \"No\"))\n          ((char=? (car lst1) ?\\()\n   \
    \        (if (char=? (car lst2) ?\\))\n               (match-parens-helper (cdr\
    \ lst1) (cdr lst2))\n               (match-parens-helper (cdr lst1) lst2)))\n\
    \          ((char=? (car lst1) ?\\))\n           (if (char=? (car lst2) ?\\()\n\
    \               (match-parens-helper (cdr lst1) (cdr lst2))\n               (match-parens-helper\
    \ lst1 (cdr lst2))))))\n  (match-parens-helper (string->list (car lst)) (string->list\
    \ (cadr lst))))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(and (equal? (first\
    \ lst) \")\") (equal? (second lst) \")\")) \"No\"]\n    [(and (equal? (first lst)\
    \ \"(\") (equal? (second lst) \")\")) \"Yes\"]\n    [(and (equal? (first lst)\
    \ \"(\") (equal? (second lst) \"(\")) \"Yes\"]\n    [(and (equal? (first lst)\
    \ \")\") (equal? (second lst) \"(\")) \"Yes\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\"\
    )]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first\
    \ lst1) ?\\() (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst1) ?\\)) (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) ?\\() (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) ?\\)) (match-parens-helper (rest lst1) (rest lst2))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\"\
    )]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(equal? (first\
    \ lst1) (first lst2)) (match-parens-helper (rest lst1) (rest lst2))]\n      [(equal?\
    \ (first lst1) '(') (match-parens-helper (rest lst1) lst2)]\n      [(equal? (first\
    \ lst2) '(') (match-parens-helper lst1 (rest lst2))]\n      [else \"No\"]))\n\
    \  (match-parens-helper (string->list (first lst)) (string->list (second lst))))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond ((null? lst1) lst2)\n    \
    \      ((null? lst2) lst1)\n          ((equal? (car lst1) (car lst2)) (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((equal? (car lst1) '(') (match-parens-helper\
    \ (cdr lst1) (cons (car lst2) (cdr lst2))))\n          ((equal? (car lst2) '(')\
    \ (match-parens-helper (cons (car lst1) (cdr lst1)) (cdr lst2)))\n          (else\
    \ '())))\n  (define (is-good? lst)\n    (define (is-good-helper lst count)\n \
    \     (cond ((null? lst) (= count 0))\n            ((equal? (car lst) '(') (is-good-helper\
    \ (cdr lst) (+ count 1)))\n            ((equal? (car lst) ')') (is-good-helper\
    \ (cdr lst) (- count 1)))\n            (else #f)))\n    (is-good-helper lst 0))\n\
    \  (cond ((is-good? (match-parens-helper (car lst) (cdr lst))) \"Yes\")\n    \
    \    (else \"No\")))\n", "  (define (helper lst1 lst2)\n    (cond ((null? lst1)\
    \ (if (null? lst2) \"Yes\" \"No\"))\n          ((null? lst2) (helper (cdr lst1)\
    \ (list (car lst1))))\n          ((eq? (car lst1) (car lst2)) (helper (cdr lst1)\
    \ (cdr lst2)))\n          ((eq? (car lst1) '(') (helper (cdr lst1) (cons (car\
    \ lst1) lst2)))\n          ((eq? (car lst1) ')') (helper (cdr lst1) (cdr lst2)))\n\
    \          (else (helper (cdr lst1) (cons (car lst1) lst2)))))\n  (helper (string->list\
    \ (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n\
    \      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(equal? (first\
    \ lst1) (first lst2)) (match-parens-helper (rest lst1) (rest lst2))]\n      [(equal?\
    \ (first lst1) '()) (match-parens-helper (rest lst1) lst2)]\n      [(equal? (first\
    \ lst2) '()) (match-parens-helper lst1 (rest lst2))]\n      [else \"No\"]))\n\
    \  (match-parens-helper (list->string (first lst)) (list->string (second lst))))\n",
  "  (define (helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first\
    \ lst) \"(\") (add1 (helper (rest lst)))]\n      [(equal? (first lst) \")\") (sub1\
    \ (helper (rest lst)))]))\n  (cond\n    [(> (helper (first lst)) 0) \"Yes\"]\n\
    \    [(< (helper (first lst)) 0) \"No\"]\n    [(= (helper (first lst)) 0) (cond\n\
    \                                 [(> (helper (rest lst)) 0) \"Yes\"]\n      \
    \                           [(< (helper (rest lst)) 0) \"No\"]\n             \
    \                    [(= (helper (rest lst)) 0) \"Yes\"])]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond ((null? lst1) (if (null? lst2) \"Yes\" \"No\"))\n    \
    \      ((null? lst2) (if (null? lst1) \"Yes\" \"No\"))\n          ((eq? (car lst1)\
    \ (car lst2)) (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((eq? (car\
    \ lst1) '()) (match-parens-helper (cdr lst1) lst2))\n          ((eq? (car lst2)\
    \ '()) (match-parens-helper lst1 (cdr lst2)))\n          (else \"No\")))\n  (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (if (equal? (match-parens-helper (first\
    \ lst)) (match-parens-helper (rest lst)))\n      \"Yes\"\n      \"No\"))\n", " \
    \ (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n \
    \      (cond\n         [(empty? lst2) \"Yes\"]\n         [else \"No\"])]\n   \
    \   [(empty? lst2)\n       (cond\n         [(empty? lst1) \"Yes\"]\n         [else\
    \ \"No\"])]\n      [(char=? (first lst1) (first lst2))\n       (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst2) #\\()\n       (match-parens-helper\
    \ lst1 (rest lst2))]\n      [else \"No\"]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (is-good? str)\n \
    \   (define (helper str acc)\n      (cond\n        [(empty? str) (= acc 0)]\n\
    \        [(char=? (first str) #\\() (helper (rest str) (+ acc 1))]\n        [(char=?\
    \ (first str) #\\)) (helper (rest str) (- acc 1))]))\n    (helper str 0))\n  (define\
    \ (helper lst)\n    (cond\n      [(empty? lst) #f]\n      [(is-good? (first lst))\
    \ #t]\n      [else (helper (rest lst))]))\n  (cond\n    [(helper lst) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2)\
    \ (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\() (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst1) #\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]\n      [(char=? (first lst2) #\\() (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) #\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2)\
    \ (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\() (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst1) #\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]\n      [(char=? (first lst2) #\\() (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) #\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper (rest\
    \ lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper (rest\
    \ lst)))]))\n  (if (equal? (match-parens-helper (first lst)) 0)\n      \"Yes\"\
    \n      \"No\"))\n", "  (define (is-good? str)\n    (let loop ([str str] [acc\
    \ 0])\n      (cond [(empty? str) (zero? acc)]\n            [(char=? (first str)\
    \ #\\() (loop (rest str) (+ acc 1))]\n            [(char=? (first str) #\\)) (loop\
    \ (rest str) (- acc 1))]\n            [else (error 'is-good? \"invalid char\"\
    )])))\n  (define (is-good-concat? str1 str2)\n    (and (is-good? str1) (is-good?\
    \ str2) (is-good? (string-append str1 str2))))\n  (cond [(is-good-concat? (first\
    \ lst) (second lst)) \"Yes\"]\n        [(is-good-concat? (second lst) (first lst))\
    \ \"Yes\"]\n        [else \"No\"]))\n", "  (define (is-good? s)\n    (let loop\
    \ ([s s] [n 0])\n      (cond [(empty? s) (= n 0)]\n            [(char=? (first\
    \ s) #\\() (loop (rest s) (+ n 1))]\n            [(char=? (first s) #\\)) (loop\
    \ (rest s) (- n 1))]\n            [else #f])))\n  (define (is-good-concat? s1\
    \ s2)\n    (or (and (is-good? s1) (is-good? s2))\n        (and (is-good? s1) (is-good?\
    \ (string-append s2 s1)))\n        (and (is-good? s2) (is-good? (string-append\
    \ s1 s2)))))\n  (cond [(is-good-concat? (first lst) (second lst)) \"Yes\"]\n \
    \       [else \"No\"]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty?\
    \ (car lst)) (match_parens (cdr lst))]\n    [(empty? (cdr lst)) (match_parens\
    \ (list (car lst) \"\"))]\n    [else\n     (let ([s1 (car lst)]\n           [s2\
    \ (cadr lst)])\n       (cond\n         [(empty? s1) (match_parens (list s2 (caddr\
    \ lst)))]\n         [(empty? s2) (match_parens (list (cdr lst) \"\"))]\n     \
    \    [(char=? (string-ref s1 0) (string-ref s2 0))\n          (match_parens (list\
    \ (substring s1 1) (substring s2 1)))]\n         [else\n          (match_parens\
    \ (list (substring s1 1) (substring s2 0 (sub1 (string-length s2)))))]))]))\n",
  "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first\
    \ lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n  (define (match-parens-helper2\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \")\") (+\
    \ 1 (match-parens-helper2 (rest lst)))]\n      [(equal? (first lst) \"(\") (-\
    \ 1 (match-parens-helper2 (rest lst)))]))\n  (define (match-parens-helper3 lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \")\") (- 1 (match-parens-helper3\
    \ (rest lst)))]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper3\
    \ (rest lst)))]))\n  (define (match-parens-helper4 lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (- 1 (match-parens-helper4 (rest\
    \ lst)))]\n      [(equal? (first lst) \")\") (+ 1 (match-parens-helper4 (rest\
    \ lst)))]))\n  (cond\n    [(and (= (match-parens-helper (first lst)) 0) (= (match-parens-helper2\
    \ (second lst)) 0)) \"Yes\"]\n    [(and (= (match-parens-helper3 (first lst))\
    \ 0) (= (match-parens-helper4 (second lst)) 0)) \"Yes\"]\n    [else \"No\"]))",
  "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first\
    \ lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n  (if (equal? (match-parens-helper\
    \ (first lst)) (match-parens-helper (rest lst)))\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (is-good? str)\n    (let loop ([s str] [acc 0])\n      (cond\
    \ [(empty? s) (= acc 0)]\n            [(char=? (first s) #\\() (loop (rest s)\
    \ (+ acc 1))]\n            [(char=? (first s) #\\)) (loop (rest s) (- acc 1))]\n\
    \            [else (error \"Invalid character\")])))\n  (define (is-good-concat?\
    \ str1 str2)\n    (is-good? (string-append str1 str2)))\n  (cond [(is-good-concat?\
    \ (first lst) (second lst)) \"Yes\"]\n        [(is-good-concat? (second lst) (first\
    \ lst)) \"Yes\"]\n        [else \"No\"]))\n", "  (define (helper str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(equal? (first str) #\\() (add1 (helper (rest\
    \ str)))]\n      [(equal? (first str) #\\)) (sub1 (helper (rest str)))]))\n  (define\
    \ (good? str)\n    (equal? (helper str) 0))\n  (cond\n    [(good? (string-append\
    \ (first lst) (second lst))) \"Yes\"]\n    [(good? (string-append (second lst)\
    \ (first lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond ((null? lst) 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper\
    \ (cdr lst))))\n          ((equal? (car lst) \")\") (- 1 (match-parens-helper\
    \ (cdr lst))))))\n  (if (equal? (match-parens-helper (car lst)) (match-parens-helper\
    \ (cadr lst)))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(empty? (car lst)) (match_parens\
    \ (cdr lst))]\n    [(empty? (cadr lst)) (match_parens (cons (car lst) (cddr lst)))]\n\
    \    [(string=? (car lst) \")\") (match_parens (cons (cadr lst) (cddr lst)))]\n\
    \    [(string=? (cadr lst) \"(\") (match_parens (cons (car lst) (cddr lst)))]\n\
    \    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\
    \ ((or (null? lst1) (null? lst2)) #t)\n          ((and (equal? (car lst1) \"(\"\
    ) (equal? (car lst2) \")\"))\n           (match-parens-helper (cdr lst1) (cdr\
    \ lst2)))\n          ((and (equal? (car lst1) \"(\") (equal? (car lst2) \"(\"\
    ))\n           (or (match-parens-helper (cdr lst1) lst2)\n               (match-parens-helper\
    \ lst1 (cdr lst2))))\n          ((and (equal? (car lst1) \")\") (equal? (car lst2)\
    \ \")\"))\n           (or (match-parens-helper (cdr lst1) lst2)\n            \
    \   (match-parens-helper lst1 (cdr lst2))))\n          ((and (equal? (car lst1)\
    \ \")\") (equal? (car lst2) \"(\"))\n           (match-parens-helper (cdr lst1)\
    \ (cdr lst2)))\n          (else #f)))\n  (if (match-parens-helper (car lst) (cadr\
    \ lst))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(empty? lst) \"No\"\
    ]\n    [(empty? (cdr lst)) \"No\"]\n    [(and (equal? (car lst) \"()\") (equal?\
    \ (cadr lst) \")\")) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal? (cadr\
    \ lst) \"()\")) \"Yes\"]\n    [else (match_parens (cdr lst))]))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if\
    \ (empty? lst2)\n           \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n\
    \       (if (empty? lst1)\n           \"Yes\"\n           \"No\")]\n      [(char=?\
    \ (first lst1) ?\\()\n       (match-parens-helper (rest lst1) (cons (first lst1)\
    \ lst2))]\n      [(char=? (first lst1) ?\\))\n       (if (char=? (first lst2)\
    \ ?\\()\n           (match-parens-helper (rest lst1) (rest lst2))\n          \
    \ \"No\")]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (helper lst1 lst2)\n    (cond\n      [(empty?\
    \ lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if (empty? lst1)\
    \ \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\() (helper (rest lst1) (cons\
    \ (first lst1) lst2))]\n      [(char=? (first lst1) #\\)) (if (empty? lst2) \"\
    No\" (helper (rest lst1) (rest lst2)))]\n      [(char=? (first lst2) #\\() (helper\
    \ (cons (first lst2) lst1) (rest lst2))]\n      [(char=? (first lst2) #\\)) (if\
    \ (empty? lst1) \"No\" (helper (rest lst1) (rest lst2)))]))\n  (helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (cond\n    [(empty? lst) \"\
    Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second lst) \"()\")) \"\
    Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second lst) \")\")) \"\
    Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"()\")) \"\
    Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \")\")) \"No\"\
    ]\n    [else (match_parens (rest lst))]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n    \
    \       \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n       (if (empty?\
    \ lst1)\n           \"Yes\"\n           \"No\")]\n      [(char=? (first lst1)\
    \ #\\()\n       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n\
    \      [(char=? (first lst1) #\\))\n       (if (empty? lst2)\n           \"No\"\
    \n           (match-parens-helper (rest lst1) (rest lst2)))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (is-good?\
    \ str)\n    (let loop ([count 0] [i 0])\n      (cond [(= i (string-length str))\
    \ (= count 0)]\n            [(char=? (string-ref str i) #\\() (loop (+ count 1)\
    \ (+ i 1))]\n            [(char=? (string-ref str i) #\\)) (loop (- count 1) (+\
    \ i 1))]\n            [else (loop count (+ i 1))])))\n  (define (concat-and-check\
    \ str1 str2)\n    (cond [(is-good? (string-append str1 str2)) \"Yes\"]\n     \
    \     [(is-good? (string-append str2 str1)) \"Yes\"]\n          [else \"No\"]))\n\
    \  (concat-and-check (list-ref lst 0) (list-ref lst 1)))\n", "  (define (is-good?\
    \ str)\n    (let loop ([str str] [count 0])\n      (cond\n        [(empty? str)\
    \ (zero? count)]\n        [(char=? (first str) #\\() (loop (rest str) (+ count\
    \ 1))]\n        [(char=? (first str) #\\)) (loop (rest str) (- count 1))])))\n\
    \  (define (concat-and-check str1 str2)\n    (cond\n      [(is-good? (string-append\
    \ str1 str2)) \"Yes\"]\n      [(is-good? (string-append str2 str1)) \"Yes\"]\n\
    \      [else \"No\"]))\n  (concat-and-check (first lst) (second lst)))", "  (define\
    \ (is-good? str)\n    (let loop ([str str] [acc 0])\n      (cond [(empty? str)\
    \ (= acc 0)]\n            [(char=? (first str) #\\() (loop (rest str) (+ acc 1))]\n\
    \            [(char=? (first str) #\\)) (loop (rest str) (- acc 1))]\n       \
    \     [else (error \"Invalid input\")])))\n  (define (is-good-concat? str1 str2)\n\
    \    (and (is-good? str1) (is-good? str2) (is-good? (string-append str1 str2))))\n\
    \  (cond [(is-good-concat? (first lst) (second lst)) \"Yes\"]\n        [(is-good-concat?\
    \ (second lst) (first lst)) \"Yes\"]\n        [else \"No\"]))\n", "  (define (is-good?\
    \ s)\n    (let loop ([s s] [n 0])\n      (cond [(empty? s) (= n 0)]\n        \
    \    [(char=? (first s) #\\() (loop (rest s) (+ n 1))]\n            [(char=? (first\
    \ s) #\\)) (loop (rest s) (- n 1))]\n            [else (error \"Invalid input\"\
    )])))\n  (define (is-good-concat? s1 s2)\n    (and (is-good? s1) (is-good? s2)\
    \ (is-good? (string-append s1 s2))))\n  (cond [(is-good-concat? (first lst) (second\
    \ lst)) \"Yes\"]\n        [(is-good-concat? (second lst) (first lst)) \"Yes\"\
    ]\n        [else \"No\"]))\n", "  (define (match-parens-helper lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper\
    \ (rest lst)))]))\n  (define (is-good? lst)\n    (cond\n      [(empty? lst) #t]\n\
    \      [(equal? (first lst) \"(\") (is-good? (rest lst))]\n      [(equal? (first\
    \ lst) \")\") (and (is-good? (rest lst)) (positive? (match-parens-helper (rest\
    \ lst))))]))\n  (cond\n    [(is-good? (append (first lst) (second lst))) \"Yes\"\
    ]\n    [(is-good? (append (second lst) (first lst))) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"\
    ]\n    [(string-contains? (car lst) \")\") \"No\"]\n    [(string-contains? (cadr\
    \ lst) \"(\") \"No\"]\n    [else (match_parens (cdr lst))]))\n", "  (define (helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\"\
    )]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first\
    \ lst1) ?\\() (helper (rest lst1) (rest lst2))]\n      [(char=? (first lst2) ?\\\
    () (helper (rest lst1) (rest lst2))]\n      [else (helper (rest lst1) (rest lst2))]))\n\
    \  (helper (string->list (first lst)) (string->list (second lst))))\n", "  (define\
    \ (match-parens-helper lst)\n    (cond\n      [(null? lst) #t]\n      [(equal?\
    \ (car lst) \"(\") (match-parens-helper (cdr lst))]\n      [(equal? (car lst)\
    \ \")\") (match-parens-helper (cdr lst))]\n      [else #f]))\n  (if (match-parens-helper\
    \ (append (car lst) (cadr lst)))\n      \"Yes\"\n      \"No\"))\n", "  (cond [(empty?\
    \ lst) \"Yes\"]\n        [(empty? (car lst)) (match_parens (cdr lst))]\n     \
    \   [(equal? (car (car lst)) #\\()\n         (if (empty? (cdr lst))\n        \
    \     (match_parens (list (string-append (car lst) (car (cdr lst)))\n        \
    \                         (cdr (cdr lst))))\n             (match_parens (list\
    \ (string-append (car lst) (car (cdr lst)))\n                                \
    \ (cdr (cdr lst)))))]\n        [(equal? (car (car lst)) #\\))\n         (if (empty?\
    \ (cdr lst))\n             (match_parens (list (string-append (car lst) (car (cdr\
    \ lst)))\n                                 (cdr (cdr lst))))\n             (match_parens\
    \ (list (string-append (car lst) (car (cdr lst)))\n                          \
    \       (cdr (cdr lst)))))]\n        [else \"No\"]))\n", "  (cond\n    [(empty?\
    \ lst) \"Yes\"]\n    [(not (equal? (first lst) (last lst))) \"No\"]\n    [else\
    \ (match_parens (rest (butlast lst)))]))\n", "  (define (match-parens-helper lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper\
    \ (rest lst)))]))\n  (cond\n    [(< (match-parens-helper (first lst)) 0) \"No\"\
    ]\n    [(equal? (match-parens-helper (first lst)) 0) (match-parens-helper (rest\
    \ lst))]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst)\n    (cond\n\
    \      [(empty? lst) #t]\n      [(equal? (first lst) \"(\") (match-parens-helper\
    \ (rest lst))]\n      [(equal? (first lst) \")\")\n       (cond\n         [(empty?\
    \ (rest lst)) #f]\n         [(equal? (first (rest lst)) \"(\") (match-parens-helper\
    \ (rest (rest lst)))]\n         [else #f])]))\n  (cond\n    [(match-parens-helper\
    \ (append (first lst) (second lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n\
    \    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(string=?\
    \ (car lst) \")\") \"No\"]\n    [(string=? (cadr lst) \"(\") \"No\"]\n    [else\
    \ (match_parens (cdr lst))]))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\
    \n           \"No\")]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper\
    \ (rest lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) #\\))\n\
    \       (if (empty? lst2)\n           \"No\"\n           (match-parens-helper\
    \ (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst))\
    \ (list))\n  (match-parens-helper (string->list (second lst)) (list)))\n", " \
    \ (define (match-parens-helper lst)\n    (cond ((null? lst) '())\n          ((equal?\
    \ (car lst) \"(\") (cons 'open (match-parens-helper (cdr lst))))\n          ((equal?\
    \ (car lst) \")\") (cons 'close (match-parens-helper (cdr lst))))))\n  (define\
    \ (match-parens-helper2 lst)\n    (cond ((null? lst) '())\n          ((equal?\
    \ (car lst) \")\") (cons 'open (match-parens-helper2 (cdr lst))))\n          ((equal?\
    \ (car lst) \"(\") (cons 'close (match-parens-helper2 (cdr lst))))))\n  (define\
    \ (match-parens-helper3 lst)\n    (cond ((null? lst) '())\n          ((equal?\
    \ (car lst) \")\") (cons 'close (match-parens-helper3 (cdr lst))))\n         \
    \ ((equal? (car lst) \"(\") (cons 'open (match-parens-helper3 (cdr lst))))))\n\
    \  (define (match-parens-helper4 lst)\n    (cond ((null? lst) '())\n         \
    \ ((equal? (car lst) \"(\") (cons 'close (match-parens-helper4 (cdr lst))))\n\
    \          ((equal? (car lst) \")\") (cons 'open (match-parens-helper4 (cdr lst))))))\n\
    \  (define (match-parens-helper5 lst)\n    (cond ((null? lst) '())\n         \
    \ ((equal? (car lst) \")\") (cons 'close (match-parens-helper5 (cdr lst))))\n\
    \          ((equal? (car lst) \"(\") (cons 'open (match-parens-helper5 (cdr lst))))))\n\
    \  (define (match-parens-helper6 lst)\n    (cond ((null? lst) '())\n         \
    \ ((equal? (car lst) \"(\") (cons 'close (match-parens-helper6 (c", "  (define\
    \ (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (add1 (match-parens-helper (rest lst)))]\n      [(equal?\
    \ (first lst) \")\") (sub1 (match-parens-helper (rest lst)))]))\n  (cond\n   \
    \ [(< (match-parens-helper (first lst)) 0) \"No\"]\n    [(= (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [(> (match-parens-helper (first lst)) 0)\n   \
    \  (cond\n       [(< (match-parens-helper (rest lst)) 0) \"No\"]\n       [(= (match-parens-helper\
    \ (rest lst)) 0) \"Yes\"]\n       [(> (match-parens-helper (rest lst)) 0) \"No\"\
    ])]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(and (equal? (first lst)\
    \ \")\") (equal? (second lst) \")\")) \"No\"]\n    [(and (equal? (first lst) \"\
    (\") (equal? (second lst) \")\")) \"Yes\"]\n    [(and (equal? (first lst) \"(\"\
    ) (equal? (second lst) \"(\")) \"Yes\"]\n    [(and (equal? (first lst) \")\")\
    \ (equal? (second lst) \"(\")) \"Yes\"]))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) #t]\n      [(equal? (first lst) \"(\")\
    \ (match-parens-helper (rest lst))]\n      [(equal? (first lst) \")\") (match-parens-helper\
    \ (rest lst))]\n      [else #f]))\n  (define (count-parens lst)\n    (cond\n \
    \     [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (count-parens (rest\
    \ lst)))]\n      [(equal? (first lst) \")\") (- 1 (count-parens (rest lst)))]\n\
    \      [else (count-parens (rest lst))]))\n  (cond\n    [(and (match-parens-helper\
    \ (first lst)) (match-parens-helper (rest lst)))\n     (if (equal? (count-parens\
    \ (first lst)) (count-parens (rest lst)))\n         \"Yes\"\n         \"No\")]\n\
    \    [else \"No\"]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(string-empty?\
    \ (car lst)) (match_parens (cdr lst))]\n    [(string-empty? (cadr lst)) (match_parens\
    \ (cons (car lst) (cddr lst)))]\n    [(string-empty? (string-append (car lst)\
    \ (cadr lst))) \"Yes\"]\n    [else (if (good? (string-append (car lst) (cadr lst)))\n\
    \              \"Yes\"\n              (match_parens (cons (car lst) (cddr lst))))]))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(string-contains?\
    \ (car lst) \")\") \"No\"]\n    [(string-contains? (cadr lst) \"(\") \"No\"]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty? lst) \"Yes\"\
    ]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal?\
    \ (cadr lst) \")\")) \"No\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr\
    \ lst) \")\")) \"Yes\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst)\
    \ \"(\")) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \"(\"\
    )) \"Yes\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n    \
    \  [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if\
    \ (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) (first lst2)) (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst1) #\\() (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst2) #\\() (match-parens-helper lst1\
    \ (rest lst2))]\n      [else \"No\"]))\n  (match-parens-helper (string->list (first\
    \ lst)) (string->list (second lst))))\n", "  (cond\n    [(empty? lst) \"Yes\"\
    ]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(empty? (car lst)) (match_parens (cdr\
    \ lst))]\n    [(empty? (cadr lst)) (match_parens (cons (car lst) (cddr lst)))]\n\
    \    [(equal? (car lst) \")\") (match_parens (cons (cadr lst) (cddr lst)))]\n\
    \    [(equal? (cadr lst) \"(\") (match_parens (cons (car lst) (cddr lst)))]\n\
    \    [else \"No\"]))", "  (define (is-good? str)\n    (let loop ([i 0] [count\
    \ 0])\n      (cond\n        [(= i (string-length str))\n         (zero? count)]\n\
    \        [(char=? (string-ref str i) #\\()\n         (loop (+ i 1) (+ count 1))]\n\
    \        [(char=? (string-ref str i) #\\))\n         (and (> count 0) (loop (+\
    \ i 1) (- count 1)))]\n        [else\n         #f])))\n  (define (match-parens-helper\
    \ str1 str2)\n    (cond\n      [(is-good? (string-append str1 str2))\n       \"\
    Yes\"]\n      [(is-good? (string-append str2 str1))\n       \"Yes\"]\n      [else\n\
    \       \"No\"]))\n  (match-parens-helper (list-ref lst 0) (list-ref lst 1)))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n  \
    \     (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n      [(char=?\
    \ (first lst1) #\\()\n       (match-parens-helper (rest lst1) (cons (first lst1)\
    \ lst2))]\n      [(char=? (first lst1) #\\))\n       (if (empty? lst2)\n     \
    \      \"No\"\n           (match-parens-helper (rest lst1) (rest lst2)))]))\n\
    \  (match-parens-helper (string->list (first lst)) '())\n  (match-parens-helper\
    \ (string->list (second lst)) '()))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond ((null? lst1) (if (null? lst2) \"Yes\" \"No\"))\n          ((null?\
    \ lst2) (if (null? lst1) \"Yes\" \"No\"))\n          ((and (equal? (car lst1)\
    \ \"(\") (equal? (car lst2) \")\"))\n           (match-parens-helper (cdr lst1)\
    \ (cdr lst2)))\n          ((and (equal? (car lst1) \")\") (equal? (car lst2) \"\
    (\"))\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((equal?\
    \ (car lst1) \"(\") (match-parens-helper (cdr lst1) lst2))\n          ((equal?\
    \ (car lst1) \")\") (match-parens-helper (cdr lst1) lst2))\n          ((equal?\
    \ (car lst2) \"(\") (match-parens-helper lst1 (cdr lst2)))\n          ((equal?\
    \ (car lst2) \")\") (match-parens-helper lst1 (cdr lst2)))))\n  (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) #t]\n      [(equal? (first lst) \"(\")\
    \ (match-parens-helper (rest lst))]\n      [(equal? (first lst) \")\") (match-parens-helper\
    \ (rest lst))]\n      [else #f]))\n  (cond\n    [(match-parens-helper (append\
    \ (first lst) (second lst))) \"Yes\"]\n    [else \"No\"]))", "  (define (is-good?\
    \ str)\n    (let loop ([str str] [count 0])\n      (cond [(empty? str) (zero?\
    \ count)]\n            [(char=? (first str) #\\() (loop (rest str) (+ count 1))]\n\
    \            [(char=? (first str) #\\)) (loop (rest str) (- count 1))]\n     \
    \       [else #f])))\n  (define (concat-and-check str1 str2)\n    (cond [(is-good?\
    \ (string-append str1 str2)) \"Yes\"]\n          [(is-good? (string-append str2\
    \ str1)) \"Yes\"]\n          [else \"No\"]))\n  (concat-and-check (first lst)\
    \ (second lst)))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n \
    \     [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\n         \
    \  \"No\")]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper (rest\
    \ lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) #\\))\n      \
    \ (if (empty? lst2)\n           \"No\"\n           (match-parens-helper (rest\
    \ lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst)) '()))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (car lst)) (match_parens (cdr\
    \ lst))]\n    [(equal? (car (car lst)) \")\") (match_parens (cons (string-append\
    \ (cdr (car lst)) (cadr lst)) (cddr lst)))]\n    [else (match_parens (cons (cdr\
    \ (car lst)) (cdr lst)))]))\n", "  (define (match-parens-helper lst1 lst2)\n \
    \   (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty?\
    \ lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\()\n\
    \       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n      [(char=?\
    \ (first lst1) #\\))\n       (if (empty? lst2) \"No\"\n           (match-parens-helper\
    \ (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst))\
    \ (string->list (second lst))))\n", "  (define (match-parens-helper lst)\n   \
    \ (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest\
    \ lst)))]))\n  (cond\n    [(equal? (match-parens-helper (first lst)) 0) \"Yes\"\
    ]\n    [(equal? (match-parens-helper (rest lst)) 0) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"\
    ]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \")\")) \"No\"]\n   \
    \ [(and (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) (match_parens (cdr\
    \ lst))]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \"(\")) (match_parens\
    \ (cons (string-append (car lst) (cadr lst)) (cddr lst)))]\n    [(and (equal?\
    \ (car lst) \")\") (equal? (cadr lst) \"(\")) (match_parens (cons (string-append\
    \ (car lst) (cadr lst)) (cddr lst)))]))\n", "  (cond\n    [(empty? lst) \"Yes\"\
    ]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \")\")) \"No\"]\n\
    \    [(and (equal? (first lst) \"(\") (equal? (second lst) \")\")) \"Yes\"]\n\
    \    [(and (equal? (first lst) \"(\") (equal? (second lst) \"(\")) \"Yes\"]\n\
    \    [(and (equal? (first lst) \")\") (equal? (second lst) \"(\")) \"Yes\"]))\n",
  "  (define (helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty?\
    \ lst2)\n           \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n     \
    \  (if (empty? lst1)\n           \"Yes\"\n           \"No\")]\n      [(char=?\
    \ (first lst1) ?\\()\n       (helper (rest lst1) (cons (first lst1) lst2))]\n\
    \      [(char=? (first lst1) ?\\))\n       (if (empty? lst2)\n           \"No\"\
    \n           (helper (rest lst1) (rest lst2)))]))\n  (helper (string->list (first\
    \ lst)) (string->list (second lst))))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (if (null? lst1)\n        (if (null? lst2)\n            #t\n    \
    \        #f)\n        (if (null? lst2)\n            #f\n            (if (equal?\
    \ (car lst1) (car lst2))\n                (match-parens-helper (cdr lst1) (cdr\
    \ lst2))\n                (if (equal? (car lst1) \"(\")\n                    (match-parens-helper\
    \ (cdr lst1) lst2)\n                    (match-parens-helper lst1 (cdr lst2)))))))\n\
    \  (define (parens-to-list str)\n    (if (null? str)\n        '()\n        (cons\
    \ (car str) (parens-to-list (cdr str)))))\n  (if (match-parens-helper (parens-to-list\
    \ (car lst)) (parens-to-list (cadr lst)))\n      \"Yes\"\n      \"No\"))\n", " \
    \ (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and\
    \ (string=? (car lst) \"(\") (string=? (cadr lst) \")\"))\n     (match_parens\
    \ (cddr lst))]\n    [(and (string=? (car lst) \")\") (string=? (cadr lst) \"(\"\
    ))\n     (match_parens (cddr lst))]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(null? lst1)\n       (if (null? lst2)\n      \
    \     \"Yes\"\n           \"No\")]\n      [(null? lst2)\n       (if (null? lst1)\n\
    \           \"Yes\"\n           \"No\")]\n      [(and (equal? (car lst1) \"(\"\
    )\n            (equal? (car lst2) \")\"))\n       (match-parens-helper (cdr lst1)\
    \ (cdr lst2))]\n      [(and (equal? (car lst1) \")\")\n            (equal? (car\
    \ lst2) \"(\"))\n       (match-parens-helper (cdr lst1) (cdr lst2))]\n      [else\n\
    \       (if (equal? (car lst1) \"(\")\n           (match-parens-helper (cdr lst1)\
    \ lst2)\n           (match-parens-helper lst1 (cdr lst2)))]))\n  (match-parens-helper\
    \ (car lst) (cadr lst)))\n", "  (define (match-parens-helper lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [(eq? (first lst) '()) (add1 (match-parens-helper\
    \ (rest lst)))]\n      [(eq? (first lst) ')) (sub1 (match-parens-helper (rest\
    \ lst)))]))\n  (if (eq? (match-parens-helper lst) 0) \"Yes\" \"No\"))\n", "  (define\
    \ (helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(= (first lst) #\\()\
    \ (add1 (helper (rest lst)))]\n      [(= (first lst) #\\)) (sub1 (helper (rest\
    \ lst)))]))\n  (define (helper2 lst)\n    (cond\n      [(empty? lst) 0]\n    \
    \  [(= (first lst) #\\() (sub1 (helper2 (rest lst)))]\n      [(= (first lst) #\\\
    )) (add1 (helper2 (rest lst)))]))\n  (cond\n    [(and (zero? (helper (first lst)))\
    \ (zero? (helper2 (second lst)))) \"Yes\"]\n    [else \"No\"]))\n", "  (define\
    \ (match-parens-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n   \
    \   [(empty? str2) str1]\n      [(char=? (first str1) (first str2))\n       (string-append\
    \ (first str1) (match-parens-helper (rest str1) (rest str2)))]\n      [(char=?\
    \ (first str1) #\\()\n       (string-append (first str1) (match-parens-helper\
    \ (rest str1) str2))]\n      [(char=? (first str2) #\\()\n       (string-append\
    \ (first str2) (match-parens-helper str1 (rest str2)))]\n      [else (string-append\
    \ (first str1) (first str2))]))\n  (define (is-good? str)\n    (define (is-good-helper\
    \ str count)\n      (cond\n        [(empty? str) (= count 0)]\n        [(char=?\
    \ (first str) #\\() (is-good-helper (rest str) (+ count 1))]\n        [(char=?\
    \ (first str) #\\)) (is-good-helper (rest str) (- count 1))]))\n    (is-good-helper\
    \ str 0))\n  (cond\n    [(is-good? (match-parens-helper (first lst) (second lst)))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is-good? str)\n    (define (helper\
    \ str n)\n      (cond\n        [(empty? str) (= n 0)]\n        [(char=? (first\
    \ str) #\\() (helper (rest str) (+ n 1))]\n        [(char=? (first str) #\\))\
    \ (and (not (= n 0)) (helper (rest str) (- n 1)))]))\n    (helper str 0))\n  (cond\n\
    \    [(is-good? (string-append (first lst) (second lst))) \"Yes\"]\n    [(is-good?\
    \ (string-append (second lst) (first lst))) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (car lst)) (match_parens (cdr\
    \ lst))]\n    [(empty? (cdr lst)) (match_parens (list (car lst) \"\"))]\n    [(string=?\
    \ (car lst) \")\") (match_parens (list (cdr lst) (string-append (car lst) (cadr\
    \ lst))))]\n    [(string=? (cadr lst) \"(\") (match_parens (list (string-append\
    \ (car lst) (cadr lst)) (cddr lst)))]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) 'Yes 'No)]\n \
    \     [(empty? lst2) (if (empty? lst1) 'Yes 'No)]\n      [(char=? (first lst1)\
    \ ?\\() (match-parens-helper (rest lst1) lst2)]\n      [(char=? (first lst1) ?\\\
    )) (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first lst2)\
    \ ?\\() (match-parens-helper lst1 (rest lst2))]\n      [(char=? (first lst2) ?\\\
    )) (match-parens-helper (rest lst1) (rest lst2))]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (helper s)\n    (cond\n\
    \      [(empty? s) #t]\n      [(equal? (first s) '(') (helper (rest s))]\n   \
    \   [(equal? (first s) ')')\n       (if (empty? (rest s))\n           #f\n   \
    \        (if (equal? (first (rest s)) '(')\n               (helper (rest (rest\
    \ s)))\n               #f))]))\n  (define (is-good? s)\n    (let ([c (count (lambda\
    \ (x) (equal? x '(')) s)])\n      (and (helper s)\n           (= c (count (lambda\
    \ (x) (equal? x ')')) s)))))\n  (if (is-good? (append (first lst) (second lst)))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty?\
    \ (cdr lst)) \"Yes\"]\n    [(equal? (car lst) \")\") \"No\"]\n    [(equal? (cadr\
    \ lst) \"(\") \"No\"]\n    [else (match_parens (cdr lst))]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond ((null? lst1) (if (null? lst2) \"Yes\" \"No\"))\n    \
    \      ((null? lst2) (if (null? lst1) \"Yes\" \"No\"))\n          ((eq? (car lst1)\
    \ (car lst2)) (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((eq? (car\
    \ lst1) '()) (match-parens-helper (cdr lst1) lst2))\n          ((eq? (car lst2)\
    \ '()) (match-parens-helper lst1 (cdr lst2)))\n          (else \"No\")))\n  (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst))))\n", "  (define (is-good?\
    \ s)\n    (let loop ([s s] [cnt 0])\n      (cond [(empty? s) (zero? cnt)]\n  \
    \          [(char=? (first s) #\\() (loop (rest s) (+ cnt 1))]\n            [(char=?\
    \ (first s) #\\)) (loop (rest s) (- cnt 1))]\n            [else #f])))\n  (cond\
    \ [(is-good? (string-append (first lst) (second lst))) \"Yes\"]\n        [(is-good?\
    \ (string-append (second lst) (first lst))) \"Yes\"]\n        [else \"No\"]))\n",
  "  (define (match-parens-helper lst)\n    (cond ((null? lst) 0)\n          ((equal?\
    \ (car lst) \"(\") (add1 (match-parens-helper (cdr lst))))\n          ((equal?\
    \ (car lst) \")\") (sub1 (match-parens-helper (cdr lst))))))\n  (if (and (equal?\
    \ (match-parens-helper (car lst)) 0)\n           (equal? (match-parens-helper\
    \ (cadr lst)) 0))\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) #t]\n      [(equal? (first lst) \"(\")\
    \ (match-parens-helper (rest lst))]\n      [(equal? (first lst) \")\") (match-parens-helper\
    \ (rest lst))]\n      [else #f]))\n  (define (count-parens lst)\n    (cond\n \
    \     [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (count-parens (rest\
    \ lst)))]\n      [(equal? (first lst) \")\") (- 1 (count-parens (rest lst)))]\n\
    \      [else (count-parens (rest lst))]))\n  (define (count-parens-2 lst)\n  \
    \  (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (count-parens-2\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (- 1 (count-parens-2 (rest\
    \ lst)))]\n      [else (count-parens-2 (rest lst))]))\n  (cond\n    [(and (match-parens-helper\
    \ (first lst)) (match-parens-helper (second lst)))\n     (cond\n       [(= (count-parens\
    \ (first lst)) (count-parens-2 (second lst))) \"Yes\"]\n       [else \"No\"])]\n\
    \    [else \"No\"]))\n", "  (define (helper lst1 lst2)\n    (cond ((null? lst1)\
    \ (if (null? lst2) \"Yes\" \"No\"))\n          ((null? lst2) (helper (cdr lst1)\
    \ (cdr lst2)))\n          ((and (equal? (car lst1) \"(\") (equal? (car lst2) \"\
    )\"))\n           (helper (cdr lst1) (cdr lst2)))\n          ((and (equal? (car\
    \ lst1) \"(\") (equal? (car lst2) \"(\"))\n           (or (helper (cdr lst1) lst2)\
    \ (helper lst1 (cdr lst2))))\n          ((and (equal? (car lst1) \")\") (equal?\
    \ (car lst2) \")\"))\n           (or (helper (cdr lst1) lst2) (helper lst1 (cdr\
    \ lst2))))\n          ((and (equal? (car lst1) \")\") (equal? (car lst2) \"(\"\
    ))\n           (helper (cdr lst1) (cdr lst2)))))\n  (helper (car lst) (cadr lst)))\n",
  "  (define (match-parens-helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n\
    \      [(empty? str2) str1]\n      [(char=? (first str1) #\\() (match-parens-helper\
    \ (rest str1) (append str2 (list #\\())))\n       (char=? (first str1) #\\)) (match-parens-helper\
    \ (rest str1) (append str2 (list #\\))))]))\n  (define (is-good? str)\n    (define\
    \ (is-good-helper str count)\n      (cond\n        [(empty? str) (= count 0)]\n\
    \        [(char=? (first str) #\\() (is-good-helper (rest str) (+ count 1))]\n\
    \        [(char=? (first str) #\\)) (is-good-helper (rest str) (- count 1))]))\n\
    \    (is-good-helper str 0))\n  (cond\n    [(is-good? (match-parens-helper (first\
    \ lst) (list))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (cond\n    [(equal? (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [(equal? (match-parens-helper (rest lst)) 0) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define (is-good? str)\n    (let loop ([i 0]\
    \ [cnt 0])\n      (cond [(= i (string-length str))\n             (zero? cnt)]\n\
    \            [(char=? (string-ref str i) #\\()\n             (loop (+ i 1) (+\
    \ cnt 1))]\n            [(char=? (string-ref str i) #\\))\n             (and (not\
    \ (zero? cnt))\n                  (loop (+ i 1) (- cnt 1)))]\n            [else\n\
    \             #f])))\n  (define (match? str1 str2)\n    (cond [(is-good? str1)\n\
    \           #t]\n          [(is-good? str2)\n           #t]\n          [(is-good?\
    \ (string-append str1 str2))\n           #t]\n          [(is-good? (string-append\
    \ str2 str1))\n           #t]\n          [else\n           #f]))\n  (if (match?\
    \ (car lst) (cadr lst))\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n    \
    \       \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n       (if (empty?\
    \ lst1)\n           \"Yes\"\n           \"No\")]\n      [(char=? (first lst1)\
    \ ?\\()\n       (match-parens-helper (rest lst1) lst2)]\n      [(char=? (first\
    \ lst1) ?\\))\n       (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=?\
    \ (first lst2) ?\\()\n       (match-parens-helper lst1 (rest lst2))]\n      [(char=?\
    \ (first lst2) ?\\))\n       (match-parens-helper lst1 (rest lst2))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (cond\n    [(empty?\
    \ lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(string-contains? (car\
    \ lst) \")\") \"No\"]\n    [(string-contains? (cadr lst) \"(\") \"No\"]\n    [else\
    \ (match_parens (cdr lst))]))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(null? lst1) (if (null? lst2) #t #f)]\n      [(null? lst2)\
    \ (if (null? lst1) #t #f)]\n      [(and (eq? (car lst1) '()) (eq? (car lst2) '()))\n\
    \       (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(and (eq? (car lst1)\
    \ '()) (eq? (car lst2) '()))\n       (match-parens-helper (cdr lst1) (cdr lst2))]\n\
    \      [(and (eq? (car lst1) '()) (eq? (car lst2) '()))\n       (match-parens-helper\
    \ (cdr lst1) (cdr lst2))]\n      [(and (eq? (car lst1) '()) (eq? (car lst2) '()))\n\
    \       (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(and (eq? (car lst1)\
    \ '()) (eq? (car lst2) '()))\n       (match-parens-helper (cdr lst1) (cdr lst2))]\n\
    \      [(and (eq? (car lst1) '()) (eq? (car lst2) '()))\n       (match-parens-helper\
    \ (cdr lst1) (cdr lst2))]\n      [(and (eq? (car lst1) '()) (eq? (car lst2) '()))\n\
    \       (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(and (eq? (car lst1)\
    \ '()) (eq? (car lst2) '()))\n       (match-parens-helper (cdr lst1) (cdr lst2))]\n\
    \      [(and (eq? (car lst1) '()) (eq? (car lst2) '()))", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (cond\n    [(> (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [(< (match-parens-helper (first lst)) 0) \"No\"\
    ]\n    [(= (match-parens-helper (first lst)) 0)\n     (cond\n       [(> (match-parens-helper\
    \ (rest lst)) 0) \"Yes\"]\n       [(< (match-parens-helper (rest lst)) 0) \"No\"\
    ]\n       [(= (match-parens-helper (rest lst)) 0) \"Yes\"])]))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty?\
    \ lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\"\
    )]\n      [(char=? (first lst1) ?())]\n      [(char=? (first lst2) ?())]\n   \
    \   [else (match-parens-helper (rest lst1) (rest lst2))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(string=? (car lst) \"(\") (+\
    \ 1 (match-parens-helper (cdr lst)))]\n      [(string=? (car lst) \")\") (- 1\
    \ (match-parens-helper (cdr lst)))]))\n  (cond\n    [(= (match-parens-helper (car\
    \ lst)) 0) \"Yes\"]\n    [else \"No\"]))\n", "  (define (helper lst1 lst2)\n \
    \   (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty?\
    \ lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(equal? (first lst1) (first\
    \ lst2)) (helper (rest lst1) (rest lst2))]\n      [(equal? (first lst1) \")\"\
    ) (helper (rest lst1) lst2)]\n      [(equal? (first lst2) \"(\") (helper lst1\
    \ (rest lst2))]\n      [else \"No\"]))\n  (helper (list->string (first lst)) (list->string\
    \ (second lst))))\n", "  (define (parens-match? s)\n    (define (parens-match-helper\
    \ s i)\n      (if (= i (string-length s))\n          (= 0 i)\n          (if (char=?\
    \ (string-ref s i) #\\()\n              (parens-match-helper s (+ i 1))\n    \
    \          (if (and (> i 0) (char=? (string-ref s (- i 1)) #\\()))\n         \
    \         (parens-match-helper (substring s 0 (- i 1)) (- i 1))\n            \
    \      #f))))\n    (parens-match-helper s 0))\n  (define (concat-parens s1 s2)\n\
    \    (if (or (parens-match? s1) (parens-match? s2))\n        #t\n        (if (and\
    \ (parens-match? (string-append s1 s2))\n                 (parens-match? (string-append\
    \ s2 s1)))\n            #t\n            #f)))\n  (if (concat-parens (car lst)\
    \ (cadr lst))\n      \"Yes\"\n      \"No\"))\n", "  (define (is-good? str)\n \
    \   (define (is-good-helper str count)\n      (cond\n        [(empty? str) (=\
    \ count 0)]\n        [(char=? (first str) #\\() (is-good-helper (rest str) (+\
    \ count 1))]\n        [(char=? (first str) #\\)) (is-good-helper (rest str) (-\
    \ count 1))]))\n    (is-good-helper str 0))\n  (define (is-match? str1 str2)\n\
    \    (cond\n      [(empty? str1) (is-good? str2)]\n      [(empty? str2) (is-good?\
    \ str1)]\n      [(char=? (first str1) #\\() (is-match? (rest str1) str2)]\n  \
    \    [(char=? (first str1) #\\)) (is-match? (rest str1) (cons (first str2) str2))]))\n\
    \  (cond\n    [(is-match? (first lst) (second lst)) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (define (helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty?\
    \ lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\"\
    )]\n      [(char=? (first lst1) ?\\() (helper (rest lst1) (cons (first lst1) lst2))]\n\
    \      [(char=? (first lst1) ?\\)) (if (empty? lst2) \"No\" (helper (rest lst1)\
    \ (rest lst2)))]\n      [(char=? (first lst2) ?\\() (helper (cons (first lst2)\
    \ lst1) (rest lst2))]\n      [(char=? (first lst2) ?\\)) (if (empty? lst1) \"\
    No\" (helper (rest lst1) (rest lst2)))]))\n  (helper (string->list (first lst))\
    \ (string->list (second lst))))\n", "  (define (helper str)\n    (cond ((null?\
    \ str) 0)\n          ((equal? (car str) \"(\") (+ 1 (helper (cdr str))))\n   \
    \       ((equal? (car str) \")\") (- 1 (helper (cdr str))))))\n  (cond ((< (helper\
    \ (car lst)) 0) \"No\")\n        ((< (helper (cadr lst)) 0) \"No\")\n        (else\
    \ \"Yes\")))\n", "  (define (is-good? str)\n    (define (iter count str)\n   \
    \   (cond\n        [(empty? str) (= count 0)]\n        [(char=? (first str) #\\\
    () (iter (+ count 1) (rest str))]\n        [(char=? (first str) #\\)) (iter (-\
    \ count 1) (rest str))]))\n    (iter 0 str))\n  (define (concat-all lst)\n   \
    \ (foldl string-append \"\" lst))\n  (define (iter lst)\n    (cond\n      [(empty?\
    \ lst) \"Yes\"]\n      [(is-good? (concat-all lst)) \"Yes\"]\n      [else (iter\
    \ (rest lst))]))\n  (iter lst))\n", "  (let ((s1 (car lst))\n        (s2 (cadr\
    \ lst)))\n    (let loop ((s1 s1)\n               (s2 s2)\n               (s (string-append\
    \ s1 s2)))\n      (cond ((string=? s \"\") \"Yes\")\n            ((string-contains\
    \ s \"()\")\n             (loop (string-replace s1 \"()\" \"\")\n            \
    \       (string-replace s2 \"()\" \"\")\n                   (string-replace s\
    \ \"()\" \"\")))\n            (else \"No\")))))\n", "  (define (is-good? str)\n\
    \    (let loop ([s str] [cnt 0])\n      (cond\n        [(empty? s) (zero? cnt)]\n\
    \        [(char=? (first s) #\\() (loop (rest s) (+ cnt 1))]\n        [(char=?\
    \ (first s) #\\)) (loop (rest s) (- cnt 1))])))\n  (define (concat-and-check str1\
    \ str2)\n    (cond\n      [(is-good? (string-append str1 str2)) \"Yes\"]\n   \
    \   [(is-good? (string-append str2 str1)) \"Yes\"]\n      [else \"No\"]))\n  (concat-and-check\
    \ (first lst) (second lst)))\n", "  (define (helper lst1 lst2)\n    (cond\n  \
    \    [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if\
    \ (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) ?\\() (helper (rest\
    \ lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) ?\\)) (if (empty?\
    \ lst2) \"No\" (helper (rest lst1) (rest lst2)))]\n      [(char=? (first lst2)\
    \ ?\\() (helper (cons (first lst2) lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) ?\\)) (if (empty? lst1) \"No\" (helper (rest lst1) (rest lst2)))]))\n\
    \  (helper (string->list (first lst)) (string->list (second lst))))\n", "  (define\
    \ (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (add1 (match-parens-helper (rest lst)))]\n      [(equal?\
    \ (first lst) \")\") (sub1 (match-parens-helper (rest lst)))]))\n  (if (equal?\
    \ (match-parens-helper (first lst)) 0)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\"\
    \ \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=?\
    \ (first lst1) #\\() (helper (rest lst1) (cons (first lst1) lst2))]\n      [(char=?\
    \ (first lst1) #\\)) (if (empty? lst2) \"No\" (helper (rest lst1) (rest lst2)))]\n\
    \      [(char=? (first lst2) #\\() (helper (cons (first lst2) lst1) (rest lst2))]\n\
    \      [(char=? (first lst2) #\\)) (if (empty? lst1) \"No\" (helper (rest lst1)\
    \ (rest lst2)))]))\n  (helper (string->list (first lst)) (string->list (second\
    \ lst))))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(not (equal? (length\
    \ (car lst)) (length (cadr lst)))) \"No\"]\n    [(and (equal? (car (car lst))\
    \ (car (cadr lst)))\n          (equal? (car (car lst)) #\\()\n          (equal?\
    \ (car (cadr lst)) #\\())]\n     (match_parens (list (cdr (car lst)) (cdr (cadr\
    \ lst)))))\n    [(and (equal? (car (car lst)) (car (cadr lst)))\n          (equal?\
    \ (car (car lst)) #\\))\n          (equal? (car (cadr lst)) #\\)))]\n     (match_parens\
    \ (list (cdr (car lst)) (cdr (cadr lst)))))\n    [(and (equal? (car (car lst))\
    \ #\\()\n          (equal? (car (cadr lst)) #\\)))]\n     (match_parens (list\
    \ (cdr (car lst)) (cdr (cadr lst)))))\n    [(and (equal? (car (car lst)) #\\))\n\
    \          (equal? (car (cadr lst)) #\\())]\n     (match_parens (list (cdr (car\
    \ lst)) (cdr (cadr lst)))))\n    [else \"No\"]))\n", "  (let ([s1 (car lst)]\n\
    \        [s2 (cadr lst)])\n    (if (and (string=? s1 \"\") (string=? s2 \"\"))\n\
    \        \"Yes\"\n        (if (string=? s1 \"\")\n            (if (string=? (substring\
    \ s2 0 1) \"(\")\n                (match_parens (list s1 (substring s2 1)))\n\
    \                (match_parens (list (substring s2 1) \"\")))\n            (if\
    \ (string=? (substring s1 0 1) \"(\")\n                (match_parens (list (substring\
    \ s1 1) s2))\n                (match_parens (list \"\" (substring s2 1))))))))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and\
    \ (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) (match_parens (cddr lst))]\n\
    \    [(and (equal? (car lst) \")\") (equal? (cadr lst) \"(\")) (match_parens (cddr\
    \ lst))]\n    [else \"No\"]))\n", "  (define (is-good? str)\n    (let loop ([i\
    \ 0] [n 0])\n      (cond\n        [(= i (string-length str)) (= n 0)]\n      \
    \  [(char=? (string-ref str i) #\\() (loop (+ i 1) (+ n 1))]\n        [(char=?\
    \ (string-ref str i) #\\)) (loop (+ i 1) (- n 1))])))\n  (cond\n    [(is-good?\
    \ (string-append (car lst) (cadr lst))) \"Yes\"]\n    [(is-good? (string-append\
    \ (cadr lst) (car lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is-good?\
    \ str)\n    (let loop ([s (string->list str)] [n 0])\n      (cond [(empty? s)\
    \ (zero? n)]\n            [(char=? (first s) #\\() (loop (rest s) (+ n 1))]\n\
    \            [(char=? (first s) #\\)) (and (zero? n) (loop (rest s) (- n 1)))])))\n\
    \  (define (concatenate str1 str2)\n    (string-append str1 str2))\n  (define\
    \ (helper str1 str2)\n    (cond [(is-good? (concatenate str1 str2)) \"Yes\"]\n\
    \          [(is-good? (concatenate str2 str1)) \"Yes\"]\n          [else \"No\"\
    ]))\n  (helper (list-ref lst 0) (list-ref lst 1)))\n", "  (cond\n    [(empty?\
    \ lst) \"Yes\"]\n    [(empty? (second lst)) \"Yes\"]\n    [(empty? (first lst))\
    \ \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"(\"))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (helper lst)\n    (cond\n     \
    \ [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1 (helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (sub1 (helper (rest lst)))]))\n  (cond\n  \
    \  [(> (helper (first lst)) 0) \"Yes\"]\n    [(< (helper (first lst)) 0) \"No\"\
    ]\n    [(= (helper (first lst)) 0) (cond\n                                 [(>\
    \ (helper (rest lst)) 0) \"Yes\"]\n                                 [(< (helper\
    \ (rest lst)) 0) \"No\"]\n                                 [(= (helper (rest lst))\
    \ 0) \"Yes\"])]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1)\n       (cond\n         [(empty? lst2) \"Yes\"]\n      \
    \   [else \"No\"])]\n      [(empty? lst2)\n       (cond\n         [(empty? lst1)\
    \ \"Yes\"]\n         [else \"No\"])]\n      [(char=? (first lst1) (first lst2))\n\
    \       (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst1) #\\()\n       (match-parens-helper (rest lst1) lst2)]\n      [(char=?\
    \ (first lst2) #\\()\n       (match-parens-helper lst1 (rest lst2))]\n      [else\
    \ \"No\"]))\n  (match-parens-helper (string->list (first lst)) (string->list (second\
    \ lst))))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst) 0]\n   \
    \   [(equal? (first lst) \"(\") (add1 (helper (rest lst)))]\n      [(equal? (first\
    \ lst) \")\") (sub1 (helper (rest lst)))]))\n  (cond\n    [(equal? (helper (first\
    \ lst)) 0) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n         \
    \  \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1)\n\
    \           \"Yes\"\n           \"No\")]\n      [(char=? (first lst1) #\\()\n\
    \       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n      [(char=?\
    \ (first lst1) #\\))\n       (if (empty? lst2)\n           \"No\"\n          \
    \ (match-parens-helper (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond ((null? lst1) (null? lst2))\n          ((null? lst2) (null?\
    \ lst1))\n          ((and (eq? (car lst1) '()) (eq? (car lst2) '()))\n       \
    \    (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and (eq? (car lst1)\
    \ '()) (eq? (car lst2) '()))\n           (match-parens-helper (cdr lst1) (cdr\
    \ lst2)))\n          ((and (eq? (car lst1) '()) (eq? (car lst2) '()))\n      \
    \     (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and (eq? (car\
    \ lst1) '()) (eq? (car lst2) '()))\n           (match-parens-helper (cdr lst1)\
    \ (cdr lst2)))\n          (else #f)))\n  (if (match-parens-helper (string->list\
    \ (car lst)) (string->list (cadr lst)))\n      \"Yes\"\n      \"No\"))\n", " \
    \ (let ([s1 (car lst)]\n        [s2 (cadr lst)])\n    (cond\n      [(and (string=?\
    \ s1 \"\") (string=? s2 \"\")) \"Yes\"]\n      [(string=? s1 \"\") (match_parens\
    \ (list s2 \"\"))]\n      [(string=? s2 \"\") (match_parens (list \"\" s1))]\n\
    \      [(string=? (substring s1 0 1) \"(\") (match_parens (list (substring s1\
    \ 1) s2))]\n      [(string=? (substring s2 0 1) \"(\") (match_parens (list s1\
    \ (substring s2 1)))]\n      [(string=? (substring s1 0 1) \")\") (match_parens\
    \ (list \"\" (string-append s2 (substring s1 0 1))))]\n      [(string=? (substring\
    \ s2 0 1) \")\") (match_parens (list (string-append s1 (substring s2 0 1)) \"\"\
    ))]\n      [else \"No\"])))\n", "  (define (match-parens-helper lst)\n    (cond\
    \ ((null? lst) 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper\
    \ (cdr lst))))\n          ((equal? (car lst) \")\") (- 1 (match-parens-helper\
    \ (cdr lst))))))\n  (if (equal? (match-parens-helper (car lst)) 0)\n      \"Yes\"\
    \n      \"No\"))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond ((null?\
    \ lst1) (null? lst2))\n          ((null? lst2) (null? lst1))\n          ((and\
    \ (eq? (car lst1) '()) (eq? (car lst2) '()))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((and (eq? (car lst1) '()) (eq? (car lst2)\
    \ '()))\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and\
    \ (eq? (car lst1) '()) (eq? (car lst2) '()))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((and (eq? (car lst1) '()) (eq? (car lst2)\
    \ '()))\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n          (else\
    \ #f)))\n  (if (match-parens-helper (string->list (car lst)) (string->list (cadr\
    \ lst)))\n      \"Yes\"\n      \"No\"))\n", "  (define (helper lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1 (helper (rest\
    \ lst)))]\n      [(equal? (first lst) \")\") (sub1 (helper (rest lst)))]))\n \
    \ (cond\n    [(> (helper (first lst)) 0) \"Yes\"]\n    [(< (helper (first lst))\
    \ 0) \"No\"]\n    [(= (helper (first lst)) 0) (cond\n                        \
    \         [(> (helper (rest lst)) 0) \"Yes\"]\n                              \
    \   [(< (helper (rest lst)) 0) \"No\"]\n                                 [(= (helper\
    \ (rest lst)) 0) \"Yes\"])]))\n", "  (define (helper lst1 lst2)\n    (cond\n \
    \     [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2)\
    \ (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\() (helper\
    \ (rest lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) #\\)) (if\
    \ (empty? lst2) \"No\" (helper (rest lst1) (rest lst2)))]\n      [(char=? (first\
    \ lst2) #\\() (helper (cons (first lst2) lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) #\\)) (if (empty? lst1) \"No\" (helper (rest lst1) (rest lst2)))]))\n\
    \  (helper (string->list (first lst)) (string->list (second lst))))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (if (null? lst1)\n        (if (null? lst2)\n\
    \            #t\n            #f)\n        (if (null? lst2)\n            #t\n \
    \           (if (equal? (car lst1) (car lst2))\n                (match-parens-helper\
    \ (cdr lst1) (cdr lst2))\n                (if (equal? (car lst1) \"(\")\n    \
    \                (match-parens-helper (cdr lst1) lst2)\n                    (match-parens-helper\
    \ lst1 (cdr lst2)))))))\n  (define (parens-to-list str)\n    (if (null? str)\n\
    \        '()\n        (cons (string-&gt;symbol (substring str 0 1))\n        \
    \      (parens-to-list (substring str 1)))))\n  (if (match-parens-helper (parens-to-list\
    \ (car lst))\n                           (parens-to-list (cadr lst)))\n      \"\
    Yes\"\n      \"No\"))\n</code>\n", "  (define (match-parens-helper lst)\n    (cond\n\
    \      [(null? lst) 0]\n      [(string=? (car lst) \"(\") (+ 1 (match-parens-helper\
    \ (cdr lst)))]\n      [(string=? (car lst) \")\") (- 1 (match-parens-helper (cdr\
    \ lst)))]))\n  (cond\n    [(= (match-parens-helper (car lst)) 0) \"Yes\"]\n  \
    \  [else \"No\"]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(and (equal?\
    \ (first lst) \")\") (equal? (second lst) \")\")) \"No\"]\n    [(and (equal? (first\
    \ lst) \"(\") (equal? (second lst) \")\")) \"Yes\"]\n    [(and (equal? (first\
    \ lst) \"(\") (equal? (second lst) \"(\")) \"Yes\"]\n    [(and (equal? (first\
    \ lst) \")\") (equal? (second lst) \"(\")) \"Yes\"]))\n", "  (define (is-good?\
    \ str)\n    (let loop ([str str] [count 0])\n      (cond [(empty? str) (= count\
    \ 0)]\n            [(char=? (first str) #\\() (loop (rest str) (+ count 1))]\n\
    \            [(char=? (first str) #\\)) (loop (rest str) (- count 1))]\n     \
    \       [else #f])))\n  (define (concat-and-check str1 str2)\n    (cond [(is-good?\
    \ (string-append str1 str2)) \"Yes\"]\n          [(is-good? (string-append str2\
    \ str1)) \"Yes\"]\n          [else \"No\"]))\n  (concat-and-check (first lst)\
    \ (second lst)))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n \
    \     [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2)\
    \ (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\() (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst1) #\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]\n      [(char=? (first lst2) #\\() (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) #\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond ((null?\
    \ lst1) (null? lst2))\n          ((null? lst2) (null? lst1))\n          ((and\
    \ (equal? (car lst1) \"(\") (equal? (car lst2) \")\"))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((and (equal? (car lst1) \")\") (equal? (car\
    \ lst2) \"(\"))\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n   \
    \       ((and (equal? (car lst1) \"(\") (equal? (car lst2) \"(\"))\n         \
    \  (or (match-parens-helper (cdr lst1) lst2)\n               (match-parens-helper\
    \ lst1 (cdr lst2))))\n          ((and (equal? (car lst1) \")\") (equal? (car lst2)\
    \ \")\"))\n           (or (match-parens-helper (cdr lst1) lst2)\n            \
    \   (match-parens-helper lst1 (cdr lst2))))))\n  (if (match-parens-helper (string->list\
    \ (car lst))\n                           (string->list (cadr lst)))\n      \"\
    Yes\"\n      \"No\"))\n", "  (define (match-parens-helper lst)\n    (cond\n  \
    \    [(empty? lst) #t]\n      [(equal? (first lst) \"(\") (match-parens-helper\
    \ (rest lst))]\n      [(equal? (first lst) \")\") (match-parens-helper (rest lst))]\n\
    \      [else #f]))\n  (cond\n    [(match-parens-helper (append (first lst) (second\
    \ lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (cond ((and (null? lst1) (null? lst2)) \"Yes\")\n          ((or (null?\
    \ lst1) (null? lst2)) \"No\")\n          ((and (eq? (car lst1) '()) (eq? (car\
    \ lst2) '()))\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n     \
    \     ((and (eq? (car lst1) '()) (eq? (car lst2) '()))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((and (eq? (car lst1) '()) (eq? (car lst2)\
    \ '()))\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and\
    \ (eq? (car lst1) '()) (eq? (car lst2) '()))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          (else \"No\")))\n  (match-parens-helper (string->list\
    \ (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (cond\n      [(null? lst1) (if (null? lst2) \"Yes\" \"No\")]\n  \
    \    [(null? lst2) (if (null? lst1) \"Yes\" \"No\")]\n      [(eq? (car lst1) (car\
    \ lst2)) (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(eq? (car lst1)\
    \ ')') (match-parens-helper (cdr lst1) lst2)]\n      [(eq? (car lst2) ')') (match-parens-helper\
    \ lst1 (cdr lst2))]\n      [else (match-parens-helper (cdr lst1) (cdr lst2))]))\n\
    \  (match-parens-helper (string->list (car lst)) (string->list (cadr lst))))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal?\
    \ (second lst) \"()\")) \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal?\
    \ (second lst) \")\")) \"No\"]\n    [(and (equal? (first lst) \")\") (equal? (second\
    \ lst) \"()\")) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second\
    \ lst) \")\")) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second\
    \ lst) \"()\")) \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second\
    \ lst) \")\")) \"No\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst)\
    \ \"()\")) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second lst)\
    \ \")\")) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second lst)\
    \ \"()\")) \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst)\
    \ \")\")) \"No\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"\
    ()\")) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second lst) \"\
    )\")) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second lst) \"\
    ()\")) \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"\
    )\")) \"No\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"()\"\
    )) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second lst) \")\"\
    )) \"Yes\"]\n    [(and (equal? (first lst) \"()\") (equal? (second lst) \"()\"\
    )) \"Yes\"]\n    [(and", "  (define (is-good? str)\n    (let loop ([i 0] [count\
    \ 0])\n      (cond\n        [(= i (string-length str))\n         (zero? count)]\n\
    \        [(char=? (string-ref str i) #\\()\n         (loop (+ i 1) (+ count 1))]\n\
    \        [(char=? (string-ref str i) #\\))\n         (and (> count 0) (loop (+\
    \ i 1) (- count 1)))]\n        [else\n         (loop (+ i 1) count)])))\n  (define\
    \ (helper str1 str2)\n    (cond\n      [(is-good? str1)\n       (is-good? str2)]\n\
    \      [(is-good? str2)\n       (is-good? str1)]\n      [else\n       (or (is-good?\
    \ (string-append str1 str2))\n           (is-good? (string-append str2 str1)))]))\n\
    \  (if (helper (car lst) (cadr lst))\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst)\
    \ \"(\") (add1 (helper (rest lst)))]\n      [(equal? (first lst) \")\") (sub1\
    \ (helper (rest lst)))]))\n  (define (is_good? lst)\n    (cond\n      [(empty?\
    \ lst) #t]\n      [(equal? (first lst) \"(\") (is_good? (rest lst))]\n      [(equal?\
    \ (first lst) \")\") (is_good? (rest lst))]))\n  (cond\n    [(and (is_good? (first\
    \ lst)) (is_good? (rest lst)))\n     (cond\n       [(>= (helper (first lst)) 0)\
    \ \"Yes\"]\n       [else \"No\"])]\n    [else \"No\"]))\n", "  (define (is-good?\
    \ str)\n    (andmap (lambda (c) (equal? c #\\() str))\n            (andmap (lambda\
    \ (c) (equal? c #\\)) str))\n            (equal? 0 (count (lambda (c) (equal?\
    \ c #\\() str))\n                             (lambda (c) (equal? c #\\)) str)))))\n\
    \  (cond ((is-good? (string-append (car lst) (cadr lst))) \"Yes\")\n        ((is-good?\
    \ (string-append (cadr lst) (car lst))) \"Yes\")\n        (else \"No\")))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(and (string=? (car lst) \")\") (string=?\
    \ (cadr lst) \")\")) \"No\"]\n    [(and (string=? (car lst) \"(\") (string=? (cadr\
    \ lst) \")\")) \"Yes\"]\n    [(and (string=? (car lst) \"(\") (string=? (cadr\
    \ lst) \"(\")) \"Yes\"]\n    [(and (string=? (car lst) \")\") (string=? (cadr\
    \ lst) \"(\")) \"Yes\"]))\n", "  (define (helper lst1 lst2)\n    (cond\n     \
    \ [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if\
    \ (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) ?\\() (helper (rest\
    \ lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) ?\\)) (if (empty?\
    \ lst2) \"No\" (helper (rest lst1) (rest lst2)))]\n      [(char=? (first lst2)\
    \ ?\\() (helper (cons (first lst2) lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) ?\\)) (if (empty? lst1) \"No\" (helper (rest lst1) (rest lst2)))]))\n\
    \  (helper (string->list (first lst)) (string->list (second lst))))\n", "  (define\
    \ (helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\"\
    \ \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=?\
    \ (first lst1) #\\() (helper (rest lst1) (cons (first lst1) lst2))]\n      [(char=?\
    \ (first lst1) #\\)) (if (empty? lst2) \"No\" (helper (rest lst1) (rest lst2)))]\n\
    \      [(char=? (first lst2) #\\() (helper (cons (first lst2) lst1) (rest lst2))]\n\
    \      [(char=? (first lst2) #\\)) (if (empty? lst1) \"No\" (helper (rest lst1)\
    \ (rest lst2)))]))\n  (helper (string->list (first lst)) (string->list (second\
    \ lst))))\n", "  (define (match-parens-helper str1 str2)\n    (cond\n      [(empty?\
    \ str1) str2]\n      [(empty? str2) str1]\n      [(char=? (first str1) #\\() (match-parens-helper\
    \ (rest str1) (append str2 (list #\\()))]\n      [(char=? (first str1) #\\)) (match-parens-helper\
    \ (rest str1) (append str2 (list #\\)))]\n      [(char=? (first str2) #\\() (match-parens-helper\
    \ (append str1 (list #\\())) (rest str2))]\n      [(char=? (first str2) #\\))\
    \ (match-parens-helper (append str1 (list #\\))) (rest str2))]))\n  (define (is-good?\
    \ str)\n    (define (is-good-helper str count)\n      (cond\n        [(empty?\
    \ str) (= count 0)]\n        [(char=? (first str) #\\() (is-good-helper (rest\
    \ str) (+ count 1))]\n        [(char=? (first str) #\\)) (and (> count 0) (is-good-helper\
    \ (rest str) (- count 1)))]))\n    (is-good-helper str 0))\n  (cond\n    [(is-good?\
    \ (match-parens-helper (first lst) (second lst))) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if\
    \ (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\"\
    \ \"No\")]\n      [(char=? (first lst1) #\\() (match-parens-helper (rest lst1)\
    \ lst2)]\n      [(char=? (first lst1) #\\)) (match-parens-helper (rest lst1) (rest\
    \ lst2))]\n      [(char=? (first lst2) #\\() (match-parens-helper lst1 (rest lst2))]\n\
    \      [(char=? (first lst2) #\\)) (match-parens-helper (rest lst1) (rest lst2))]))\n\
    \  (match-parens-helper (string->list (first lst)) (string->list (second lst))))\n",
  "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first\
    \ lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n  (cond\n    [(= (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [(= (match-parens-helper (rest lst)) 0) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst)\n    (cond\n \
    \     [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest\
    \ lst)))]))\n  (cond\n    [(> (match-parens-helper (first lst)) 0) \"Yes\"]\n\
    \    [(< (match-parens-helper (first lst)) 0) \"No\"]\n    [(= (match-parens-helper\
    \ (first lst)) 0)\n     (cond\n       [(> (match-parens-helper (rest lst)) 0)\
    \ \"Yes\"]\n       [(< (match-parens-helper (rest lst)) 0) \"No\"]\n       [(=\
    \ (match-parens-helper (rest lst)) 0) \"Yes\"])]))\n", "  (if (or (empty? lst)\
    \ (null? lst))\n      \"No\"\n      (if (or (equal? (car lst) \")\") (equal? (cadr\
    \ lst) \"(\"))\n          \"No\"\n          \"Yes\")))\n", "  (cond\n    [(empty?\
    \ lst) \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"\
    )\")) \"No\"]\n    [(and (equal? (first lst) \"(\") (equal? (second lst) \")\"\
    )) \"Yes\"]\n    [(and (equal? (first lst) \"(\") (equal? (second lst) \"(\"))\
    \ \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"(\"))\
    \ \"Yes\"]))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (cond\n    [(< (match-parens-helper (first lst)) 0) \"No\"]\n    [(> (match-parens-helper\
    \ (second lst)) 0) \"No\"]\n    [else \"Yes\"]))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (car lst)) (match_parens (cdr lst))]\n    [(empty? (cdr\
    \ lst)) (match_parens (list (car lst) \"\"))]\n    [else\n     (let* ([s1 (car\
    \ lst)]\n            [s2 (cadr lst)]\n            [s1-c (string-length s1)]\n\
    \            [s2-c (string-length s2)]\n            [s1-last (substring s1 (-\
    \ s1-c 1) s1-c)]\n            [s2-last (substring s2 (- s2-c 1) s2-c)])\n    \
    \   (cond\n         [(string=? s1-last \")\")\n          (cond\n            [(string=?\
    \ s2-last \"(\")\n             (match_parens (list (substring s1 0 (- s1-c 1))\n\
    \                                 (substring s2 0 (- s2-c 1))))]\n           \
    \ [else\n             (match_parens (list (substring s1 0 (- s1-c 1)) s2))])]\n\
    \         [else\n          (cond\n            [(string=? s2-last \")\")\n    \
    \         (match_parens (list s1 (substring s2 0 (- s2-c 1))))]\n            [else\n\
    \             (match_parens (list (string-append s1 s2) \"\"))])]))]))\n", " \
    \ (define (is-good? str)\n    (define (count-parens str)\n      (if (empty? str)\n\
    \          0\n          (if (equal? (first str) #\\()\n              (+ 1 (count-parens\
    \ (rest str)))\n              (- 1 (count-parens (rest str))))))\n    (zero? (count-parens\
    \ str)))\n  (define (concat-and-check str1 str2)\n    (if (is-good? (string-append\
    \ str1 str2))\n        \"Yes\"\n        \"No\"))\n  (concat-and-check (list-ref\
    \ lst 0) (list-ref lst 1)))\n", "  (define (match-parens-helper lst1 lst2)\n \
    \   (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\n\
    \           \"No\")]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper\
    \ (rest lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) #\\))\n\
    \       (if (empty? lst2)\n           \"No\"\n           (match-parens-helper\
    \ (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst))\
    \ '()))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty?\
    \ lst1)\n       (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n \
    \     [(char=? (first lst1) #\\()\n       (match-parens-helper (rest lst1) (cons\
    \ (first lst1) lst2))]\n      [(char=? (first lst1) #\\))\n       (if (empty?\
    \ lst2)\n           \"No\"\n           (match-parens-helper (rest lst1) (rest\
    \ lst2)))]))\n  (match-parens-helper (string->list (first lst)) '())\n  (match-parens-helper\
    \ (string->list (second lst)) '()))\n", "  (define (balance str)\n    (let loop\
    \ ([str str] [count 0])\n      (cond [(empty? str) (= count 0)]\n            [(char=?\
    \ (first str) #\\() (loop (rest str) (+ count 1))]\n            [(char=? (first\
    \ str) #\\)) (loop (rest str) (- count 1))]\n            [else (error \"Invalid\
    \ input\")])))\n  (define (concat-and-balance str1 str2)\n    (balance (string-append\
    \ str1 str2)))\n  (cond [(concat-and-balance (first lst) (second lst)) \"Yes\"\
    ]\n        [(concat-and-balance (second lst) (first lst)) \"Yes\"]\n        [else\
    \ \"No\"]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst))\
    \ \"Yes\"]\n    [(string=? (car lst) \")\") \"No\"]\n    [(string=? (cadr lst)\
    \ \"(\") \"No\"]\n    [else (match_parens (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and (string=? (car lst)\
    \ \"(\") (string=? (cadr lst) \")\")) (match_parens (cddr lst))]\n    [(and (string=?\
    \ (car lst) \")\") (string=? (cadr lst) \"(\")) (match_parens (cddr lst))]\n \
    \   [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1)\n       (cond\n         [(empty? lst2) \"Yes\"]\n      \
    \   [else \"No\"])]\n      [(empty? lst2)\n       (cond\n         [(empty? lst1)\
    \ \"Yes\"]\n         [else \"No\"])]\n      [(char=? (car lst1) (car lst2))\n\
    \       (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(char=? (car lst1)\
    \ ?\\()\n       (match-parens-helper (cdr lst1) lst2)]\n      [(char=? (car lst2)\
    \ ?\\()\n       (match-parens-helper lst1 (cdr lst2))]\n      [else \"No\"]))\n\
    \  (match-parens-helper (string->list (car lst)) (string->list (cadr lst))))\n",
  "  (define (is-good? str)\n    (define (helper str count)\n      (cond\n       \
    \ [(empty? str) (= count 0)]\n        [(char=? (first str) #\\() (helper (rest\
    \ str) (+ count 1))]\n        [(char=? (first str) #\\)) (helper (rest str) (-\
    \ count 1))]))\n    (helper str 0))\n  (define (helper lst)\n    (cond\n     \
    \ [(empty? lst) \"Yes\"]\n      [(is-good? (string-append (first lst) (second\
    \ lst))) \"Yes\"]\n      [else (helper (rest lst))]))\n  (helper lst))\n", " \
    \ (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if\
    \ (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\"\
    \ \"No\")]\n      [(char=? (first lst1) ?\\() (match-parens-helper (rest lst1)\
    \ (rest lst2))]\n      [(char=? (first lst1) ?\\)) (match-parens-helper (rest\
    \ lst1) (cons (first lst2) (rest lst2)))]\n      [(char=? (first lst2) ?\\() (match-parens-helper\
    \ (cons (first lst1) (rest lst1)) (rest lst2))]\n      [(char=? (first lst2) ?\\\
    )) (match-parens-helper (rest lst1) (rest lst2))]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (cond\n    [(empty? lst) \"\
    Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(string-contains? (car lst) \"\
    )\") \"No\"]\n    [(string-contains? (cadr lst) \"(\") \"No\"]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(null?\
    \ lst) 0]\n      [(equal? (car lst) \"(\") (+ 1 (match-parens-helper (cdr lst)))]\n\
    \      [(equal? (car lst) \")\") (- 1 (match-parens-helper (cdr lst)))]))\n  (if\
    \ (equal? (match-parens-helper (car lst)) (match-parens-helper (cadr lst)))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(eq? (first lst) '()) 1]\n      [(eq? (first lst) ')) -1]))\n\
    \  (define (helper2 lst)\n    (cond\n      [(empty? lst) 0]\n      [(eq? (first\
    \ lst) '()) -1]\n      [(eq? (first lst) ')) 1]))\n  (define (helper3 lst)\n \
    \   (cond\n      [(empty? lst) 0]\n      [(eq? (first lst) '()) 0]\n      [(eq?\
    \ (first lst) ')) 0]))\n  (define (helper4 lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(eq? (first lst) '()) 0]\n      [(eq? (first lst) ')) 0]))\n  (define\
    \ (helper5 lst)\n    (cond\n      [(empty? lst) 0]\n      [(eq? (first lst) '())\
    \ 0]\n      [(eq? (first lst) ')) 0]))\n  (define (helper6 lst)\n    (cond\n \
    \     [(empty? lst) 0]\n      [(eq? (first lst) '()) 0]\n      [(eq? (first lst)\
    \ ')) 0]))\n  (define (helper7 lst)\n    (cond\n      [(empty? lst) 0]\n     \
    \ [(eq? (first lst) '()) 0]\n      [(eq? (first lst) ')) 0]))\n  (define (helper8\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(eq? (first lst) '()) 0]\n \
    \     [(eq? (first lst) ')) 0]))\n  (define (helper9 lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(eq? (first lst) '()) 0]\n      [(eq? (first lst) ')) 0]))\n\
    \  (define (helper10 lst)\n    (cond\n      [(empty? lst) 0]", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(null? lst1) (if (null? lst2) \"Yes\" \"No\")]\n\
    \      [(null? lst2) (if (null? lst1) \"Yes\" \"No\")]\n      [(char=? (car lst1)\
    \ ?\\() (match-parens-helper (cdr lst1) lst2)]\n      [(char=? (car lst1) ?\\\
    )) (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(char=? (car lst2) ?\\\
    () (match-parens-helper lst1 (cdr lst2))]\n      [(char=? (car lst2) ?\\)) (match-parens-helper\
    \ (cdr lst1) (cdr lst2))]))\n  (match-parens-helper (string->list (car lst)) (string->list\
    \ (cadr lst))))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (define (match-parens-helper2 lst)\n    (cond\n      [(empty? lst) 0]\n   \
    \   [(equal? (first lst) \")\") (+ 1 (match-parens-helper2 (rest lst)))]\n   \
    \   [(equal? (first lst) \"(\") (- 1 (match-parens-helper2 (rest lst)))]))\n \
    \ (define (match-parens-helper3 lst)\n    (cond\n      [(empty? lst) 0]\n    \
    \  [(equal? (first lst) \")\") (- 1 (match-parens-helper3 (rest lst)))]\n    \
    \  [(equal? (first lst) \"(\") (+ 1 (match-parens-helper3 (rest lst)))]))\n  (define\
    \ (match-parens-helper4 lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (- 1 (match-parens-helper4 (rest lst)))]\n      [(equal?\
    \ (first lst) \")\") (+ 1 (match-parens-helper4 (rest lst)))]))\n  (cond\n   \
    \ [(and (= (match-parens-helper (first lst)) 0) (= (match-parens-helper2 (second\
    \ lst)) 0)) \"Yes\"]\n    [(and (= (match-parens-helper3 (first lst)) 0) (= (match-parens-helper4\
    \ (second lst)) 0)) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \")\"))\
    \ \"No\"]\n    [(and (equal? (first lst) \"(\") (equal? (second lst) \")\")) \"\
    Yes\"]\n    [(and (equal? (first lst) \"(\") (equal? (second lst) \"(\")) \"Yes\"\
    ]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"(\")) \"Yes\"]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
