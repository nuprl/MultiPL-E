language: rkt
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"max_element:\
    \ empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l)\
    \ (max_element (rest l)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate max_element))\n    (check-equal? (candidate (list 1\
    \ 2 3)) 3)\n    (check-equal? (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) 0]\n    [(= (length\
    \ l) 1) (first l)]\n    [else\n     (let ([max (max_element (rest l))])\n    \
    \   (if (> (first l) max)\n           (first l)\n           max))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n\
    \    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) 0]\n    [(empty? (rest\
    \ l)) (first l)]\n    [else (max (first l) (max_element (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n\
    \    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746640
- exit_code: 1
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) 0]\n    [(empty? (rest\
    \ l)) (first l)]\n    [else (max (first l) (max_element (rest l)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n\
    \    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) 0]\n    [(= (length\
    \ l) 1) (first l)]\n    [else\n     (let ([max (max_element (rest l))])\n    \
    \   (if (> (first l) max)\n           (first l)\n           max))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n\
    \    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list\
    \ 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"Empty list\"\
    )]\n    [(null? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest\
    \ l)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ max_element))\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal?\
    \ (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
    \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
    ;; 123\n(define (max_element l)\n  (cond\n    [(empty? l) (error \"max_element:\
    \ empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l)\
    \ (max_element (rest l)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate max_element))\n    (check-equal? (candidate (list 1\
    \ 2 3)) 3)\n    (check-equal? (candidate (list 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
