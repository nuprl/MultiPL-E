name: HumanEval_84_solve
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer N, return the total sum of its\
  \ digits in binary.\n;; Example\n;; >>> (solve 1000)\n;; \"1\"\n;; >>> (solve 150)\n\
  ;; \"110\"\n;; >>> (solve 147)\n;; \"1100\"\n;; Variables:\n;; @N integer\n;; Constraints:\
  \ 0 \u2264 N \u2264 10000.\n;; Output:\n;; a string of binary number\n(define (solve\
  \ N)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate 1000) \"1\")\n    (check-equal? (candidate 150) \"\
  110\")\n    (check-equal? (candidate 147) \"1100\")\n    (check-equal? (candidate\
  \ 333) \"1001\")\n    (check-equal? (candidate 963) \"10010\")\n))\n\n(test-humaneval)"
completions: ["  (define (solve-iter N acc)\n    (cond\n      [(= N 0) acc]\n    \
    \  [else (solve-iter (quotient N 2) (string-append acc (number->string (remainder\
    \ N 2))))]))\n  (solve-iter N \"\"))\n", "  (define (solve-iter N acc)\n    (cond\n\
    \      [(= N 0) acc]\n      [else (solve-iter (/ N 2) (string (+ (modulo N 2)\
    \ (string->number acc))))]))\n  (solve-iter N \"\"))\n", "  (number->string (string->number\
    \ (number->string N) 2)))\n", "  (define (sum-digits n)\n    (if (zero? n)\n \
    \       0\n        (+ (remainder n 10) (sum-digits (quotient n 10)))))\n  (define\
    \ (to-binary n)\n    (if (zero? n)\n        \"\"\n        (string-append (to-binary\
    \ (quotient n 2)) (number->string (remainder n 2)))))\n  (number->string (sum-digits\
    \ (string->number (to-binary N)))))\n", "  (define (solve-iter N acc)\n    (cond\n\
    \      [(= N 0) acc]\n      [else (solve-iter (quotient N 2) (string-append acc\
    \ (number->string (remainder N 2))))]))\n  (solve-iter N \"\"))\n", "  (number->string\
    \ (integer-length (integer->binary N))))\n", "  (number->string (integer-length\
    \ (integer->binary N))))\n", "  (define (decimal-to-binary n)\n    (cond ((= n\
    \ 0) \"\")\n          ((= n 1) \"1\")\n          (else (string-append (decimal-to-binary\
    \ (quotient n 2))\n                               (number->string (remainder n\
    \ 2))))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+\
    \ (remainder n 10) (sum-digits (quotient n 10))))))\n  (number->string (sum-digits\
    \ (string->number (decimal-to-binary N)))))\n", "  (define (solve-iter N acc)\n\
    \    (cond\n      [(zero? N) acc]\n      [else (solve-iter (quotient N 2) (string-append\
    \ acc (number->string (remainder N 2))))]))\n  (solve-iter N \"\"))\n", "  (define\
    \ (solve-iter N acc)\n    (cond\n      [(= N 0) (number->string acc)]\n      [else\
    \ (solve-iter (quotient N 2) (+ (* (remainder N 2) (expt 10 acc)) acc))]))\n \
    \ (solve-iter N 0))\n", "  (define (solve-iter N acc)\n    (if (zero? N)\n   \
    \     acc\n        (solve-iter (quotient N 2) (string-append acc (number->string\
    \ (remainder N 2))))))\n  (solve-iter N \"\"))\n", "  (number->string (integer-length\
    \ (integer->binary N))))\n```\n\n## Problem 2\n\n```racket\n#lang racket\n", " \
    \ (define (solve-iter N acc)\n    (cond\n      [(= N 0) acc]\n      [else (solve-iter\
    \ (quotient N 2) (string-append acc (number->string (remainder N 2))))]))\n  (solve-iter\
    \ N \"\"))\n", "  (define (solve-iter N acc)\n    (cond [(= N 0) acc]\n      \
    \    [else (solve-iter (quotient N 2) (string-append acc (number->string (remainder\
    \ N 2))))]))\n  (solve-iter N \"\"))\n", "  (define (sum-digits n)\n    (if (zero?\
    \ n)\n        0\n        (+ (remainder n 10) (sum-digits (quotient n 10)))))\n\
    \  (define (binary n)\n    (if (zero? n)\n        \"\"\n        (string-append\
    \ (binary (quotient n 2)) (number->string (remainder n 2)))))\n  (binary (sum-digits\
    \ N)))\n", "  (number->string (integer-length (integer->binary N))))\n", "  (define\
    \ (decimal-to-binary n)\n    (cond ((= n 0) '())\n          ((= n 1) '(1))\n \
    \         (else (append (decimal-to-binary (quotient n 2))\n                 \
    \       (list (remainder n 2))))))\n  (define (sum-digits n)\n    (cond ((= n\
    \ 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (number->string (sum-digits (apply + (decimal-to-binary N)))))\n", "  (define\
    \ (solve-iter N acc)\n    (cond\n      [(= N 0) acc]\n      [else (solve-iter\
    \ (quotient N 2) (string-append acc (number->string (remainder N 2))))]))\n  (solve-iter\
    \ N \"\"))\n", "  (define (solve-iter N acc)\n    (cond [(= N 0) (number->string\
    \ acc)]\n          [else (solve-iter (/ N 2) (+ (* N (% N 2)) acc))]))\n  (solve-iter\
    \ N 0))\n", "  (define (solve-iter N acc)\n    (cond\n      [(= N 0) acc]\n  \
    \    [else (solve-iter (quotient N 2) (string-append acc (number->string (remainder\
    \ N 2))))]))\n  (solve-iter N \"\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
