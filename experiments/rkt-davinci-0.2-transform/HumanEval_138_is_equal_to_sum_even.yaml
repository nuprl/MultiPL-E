name: HumanEval_138_is_equal_to_sum_even
language: rkt
prompt: "#lang racket\n\n;; Evaluate whether the given number n can be written as\
  \ the sum of exactly 4 positive even numbers\n;; Example\n;; >>> (is_equal_to_sum_even\
  \ 4)\n;; #f\n;; >>> (is_equal_to_sum_even 6)\n;; #f\n;; >>> (is_equal_to_sum_even\
  \ 8)\n;; #t\n(define (is_equal_to_sum_even n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n\
  \    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 6) #f)\n    (check-equal?\
  \ (candidate 8) #t)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate\
  \ 11) #f)\n    (check-equal? (candidate 12) #t)\n    (check-equal? (candidate 13)\
  \ #f)\n    (check-equal? (candidate 16) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i n)\
    \ #t]\n      [(= i 0) (is_equal_to_sum_even-iter n 2)]\n      [(= i 1) (is_equal_to_sum_even-iter\
    \ n 4)]\n      [(= i 2) (is_equal_to_sum_even-iter n 6)]\n      [(= i 3) (is_equal_to_sum_even-iter\
    \ n 8)]\n      [(= i 4) (is_equal_to_sum_even-iter n 10)]\n      [(= i 5) (is_equal_to_sum_even-iter\
    \ n 12)]\n      [(= i 6) (is_equal_to_sum_even-iter n 14)]\n      [(= i 7) (is_equal_to_sum_even-iter\
    \ n 16)]\n      [(= i 8) (is_equal_to_sum_even-iter n 18)]\n      [(= i 9) (is_equal_to_sum_even-iter\
    \ n 20)]\n      [(= i 10) (is_equal_to_sum_even-iter n 22)]\n      [(= i 11) (is_equal_to_sum_even-iter\
    \ n 24)]\n      [(= i 12) (is_equal_to_sum_even-iter n 26)]\n      [(= i 13) (is_equal_to_sum_even-iter\
    \ n 28)]\n      [(= i 14) (is_equal_to_sum_even-iter n 30)]\n      [(= i 15) (is_equal_to_sum_even-iter\
    \ n 32)]\n      [(= i 16) (is_equal_to_sum_even-iter n 34)]\n      [(= i 17) (is_equal_to_sum_even-iter\
    \ n 36)]\n      [(= i 18) (is_equal_to_sum_even-iter n 38)]\n      [(= i 19) (is_equal_to_sum_even-iter\
    \ n 40)]\n      [(= i 20) (is_equal_to_sum_even-iter n 42)]\n      [(= i 21) (is_equal_to_sum_even",
  "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond ((= count 4) (= n\
    \ sum))\n          ((= n sum) #t)\n          ((< n sum) #f)\n          (else (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1)))))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_helper n i)\n    (cond\n      [(= i n) #t]\n      [(=\
    \ i 0) #f]\n      [(= n 0) #f]\n      [else (or (is_equal_to_sum_even_helper (-\
    \ n i) (+ i 2))\n                (is_equal_to_sum_even_helper n (+ i 2)))]))\n\
    \  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i 1) (is_equal_to_sum_even_iter n 4))\n          ((= i\
    \ 2) (is_equal_to_sum_even_iter n 6))\n          ((= i 3) (is_equal_to_sum_even_iter\
    \ n 8))\n          ((= i 4) (is_equal_to_sum_even_iter n 10))\n          ((= i\
    \ 5) (is_equal_to_sum_even_iter n 12))\n          ((= i 6) (is_equal_to_sum_even_iter\
    \ n 14))\n          ((= i 7) (is_equal_to_sum_even_iter n 16))\n          ((=\
    \ i 8) (is_equal_to_sum_even_iter n 18))\n          ((= i 9) (is_equal_to_sum_even_iter\
    \ n 20))\n          ((= i 10) (is_equal_to_sum_even_iter n 22))\n          ((=\
    \ i 11) (is_equal_to_sum_even_iter n 24))\n          ((= i 12) (is_equal_to_sum_even_iter\
    \ n 26))\n          ((= i 13) (is_equal_to_sum_even_iter n 28))\n          ((=\
    \ i 14) (is_equal_to_sum_even_iter n 30))\n          ((= i 15) (is_equal_to_sum_even_iter\
    \ n 32))\n          ((= i 16) (is_equal_to_sum_even_iter n 34))\n          ((=\
    \ i 17) (is_equal_to_sum_even_iter n 36))\n          ((= i 18) (is_equal_to_sum_even_iter\
    \ n 38))\n          ((= i 19) (is_equal_to_sum_even_iter n 40))\n          ((=\
    \ i 20) (is_equal_to_sum_even_iter n 42))\n          ((= i 21) (is_equal_to_sum_even_iter",
  "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= n sum)\
    \ (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count\
    \ 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n          ((= i n)\
    \ #f)\n          ((= n (+ i (* 2 i))) #t)\n          (else (is_equal_to_sum_even-iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even-iter n 2))\n```\n\n### Problem 2\n\n\
    ```racket\n#lang racket\n", "  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even\
    \ (- n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even_iter n i)\n\
    \    (cond ((= i n) #t)\n          ((= i 0) #f)\n          ((= (remainder n i)\
    \ 0) (is_equal_to_sum_even_iter (- n i) (- i 2)))\n          (else (is_equal_to_sum_even_iter\
    \ n (- i 2)))))\n  (is_equal_to_sum_even_iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n i) #f]\n\
    \      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter n (- i\
    \ 2))]))\n  (is_equal_to_sum_even_iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n (+ (* 2 i) (* 2 (+ i 1)) (* 2 (+ i 2)) (* 2 (+\
    \ i 3)))) #t]\n      [(> n (+ (* 2 i) (* 2 (+ i 1)) (* 2 (+ i 2)) (* 2 (+ i 3))))\
    \ (is_equal_to_sum_even_iter n (+ i 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond ((=\
    \ count 4) (= n sum))\n          ((= n sum) #t)\n          ((&gt; n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1)))\n          (#t #f)))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n</code>\n", "  (define (is_equal_to_sum_even_helper n sum count)\n\
    \    (cond ((= count 4) (= n sum))\n          ((= n sum) #t)\n          ((= n\
    \ 0) #f)\n          ((= n 1) #f)\n          ((= n 2) #f)\n          ((= n 3) #f)\n\
    \          ((= n 4) #f)\n          ((= n 5) #f)\n          ((= n 6) #f)\n    \
    \      ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n        \
    \  ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #t)\n         \
    \ ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((=\
    \ n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n\
    \ 19) #f)\n          ((= n 20) #t)\n          ((= n 21) #f)\n          ((= n 22)\
    \ #f)\n          ((= n 23) #f)\n          ((= n 24) #t)\n          ((= n 25) #f)\n\
    \          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #t)\n \
    \         ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n  \
    \        ((= n 32) #t)\n          ((= n 33) #f)\n          ((= n 34) #f)\n   \
    \       ((= n 35) #f)\n          ((= n 36) #t)\n          ((= n 37) #f)\n    \
    \      ((= n 38) #f)\n          ((= n 39) #f)\n          ((= n 40) #t)\n     \
    \     ((= n 41) #f)\n          ((= n 42) #f)\n          ((= n 43) #f)\n      \
    \    ((= n 44) #t)\n          ((= n 45) #f)\n          ((= n 46) #", "  (define\
    \ (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= n sum) (= count\
    \ 4)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i (+ n 2)) #f)\n          ((= i\
    \ (+ n 4)) #f)\n          ((= i (+ n 6)) #f)\n          ((= i (+ n 8)) #f)\n \
    \         (else (is_equal_to_sum_even_iter n (+ i 2)))))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+\
    \ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n",
  "  (define (is_equal_to_sum_even-iter n counter)\n    (cond\n      [(= n 0) (= counter\
    \ 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(=\
    \ counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(= counter 4) (=\
    \ n 0)]\n      [(= n 0) (= counter 4)]\n      [(= counter 4) (= n 0)]\n      [(=\
    \ n 0) (= counter 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter\
    \ 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(=\
    \ counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(= counter 4) (=\
    \ n 0)]\n      [(= n 0) (= counter 4)]\n      [(= counter 4) (= n 0)]\n      [(=\
    \ n 0) (= counter 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter\
    \ 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(=\
    \ counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(= counter 4) (=\
    \ n 0)]\n      [(= n 0) (= counter 4)]\n      [(= counter 4) (= n 0)]\n      [(=\
    \ n 0) (= counter 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter\
    \ 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(=\
    \ counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(= counter 4) (=\
    \ n 0)]\n      [(= n 0) (= counter 4)]\n      [(= counter 4) (= n 0)]\n      [(=\
    \ n 0) (= counter 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter\
    \ 4)]\n      [(= counter 4) (= n 0)]\n      [(= n 0) (= counter 4)]\n      [(=\
    \ counter 4) (= n 0)]\n      [(= n", "  (define (is_equal_to_sum_even-iter n i)\n\
    \    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (modulo n i) 0)\
    \ (is_equal_to_sum_even-iter (- n i) (- i 2))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- i 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n (+ i (*\
    \ 2 (+ i (* 2 (+ i (* 2 (+ i (* 2 i))))))))) #t)\n          (else (is_equal_to_sum_even_iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_helper\
    \ n a b c d)\n    (cond ((= n (+ a b c d)) #t)\n          ((< n (+ a b c d)) #f)\n\
    \          ((> n (+ a b c d)) (or (is_equal_to_sum_even_helper n (+ a 2) b c d)\n\
    \                                 (is_equal_to_sum_even_helper n a (+ b 2) c d)\n\
    \                                 (is_equal_to_sum_even_helper n a b (+ c 2) d)\n\
    \                                 (is_equal_to_sum_even_helper n a b c (+ d 2))))))\n\
    \  (is_equal_to_sum_even_helper n 2 2 2 2))\n", "  (cond\n    [(= n 0) #t]\n \
    \   [(< n 0) #f]\n    [else (or (is_equal_to_sum_even (- n 2))\n             \
    \ (is_equal_to_sum_even (- n 4))\n              (is_equal_to_sum_even (- n 6))\n\
    \              (is_equal_to_sum_even (- n 8)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
