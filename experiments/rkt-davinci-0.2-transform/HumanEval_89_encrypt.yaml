name: HumanEval_89_encrypt
language: rkt
prompt: "#lang racket\n\n;; Create a function encrypt that takes a string as an argument\
  \ and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet\
  \ should be rotated in a manner such that the letters \n;; shift down by two multiplied\
  \ to two places.\n;; For example:\n;; >>> (encrypt \"hi\")\n;; \"lm\"\n;; >>> (encrypt\
  \ \"asdfghjkl\")\n;; \"ewhjklnop\"\n;; >>> (encrypt \"gf\")\n;; \"kj\"\n;; >>> (encrypt\
  \ \"et\")\n;; \"ix\"\n(define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s \"\")\n        \"\
    \"\n        (string-append (rotate s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n   \
    \   (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n       \
    \     ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n           \
    \ ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n            ((char=?\
    \ c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=? c #\\\
    i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\k) #\\\
    m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\o)\n \
    \           ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n     \
    \       ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n         \
    \   ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n            ((char=?\
    \ c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=? c #\\\
    v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\x) #\\\
    z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\b)))\n\
    \    (rotate-char-helper c))\n  (define (rotate-string s)\n    (cond ((string=?\
    \ s \"\") \"\")\n          (else (string-append (string (rotate-char (string-ref\
    \ s 0)))\n                               (rotate-string (substring s 1))))))\n\
    \  (rotate-string s))\n", "  (define (encrypt-helper s i)\n    (cond\n      [(empty?\
    \ s) empty]\n      [else (cons (string-ref (string-append s s) (+ i 2))\n    \
    \              (encrypt-helper (rest s) (+ i 1)))]))\n  (encrypt-helper s 0))\n",
  "  (define (rotate n s)\n    (if (zero? n)\n        s\n        (rotate (- n 1) (string-append\
    \ (substring s -1) (substring s 0 -1)))))\n  (rotate 2 s))\n", "  (define (rotate-char\
    \ c)\n    (let ([c (string-&gt;char c)])\n      (if (char&lt;=? #\\a c #\\z)\n\
    \          (char-&gt;string (char-&gt;integer c)\n                        (+ 2\
    \ (* 2 (modulo (- (char-&gt;integer c)\n                                     \
    \        (char-&gt;integer #\\a))\n                                          26))))\n\
    \          c)))\n  (string-join (map rotate-char (string-&gt;list s))\n      \
    \         \"\"))\n</code>\n", "  (let ([s (string->list s)])\n    (map (lambda\
    \ (c)\n           (let ([c (char-downcase c)])\n             (if (char-alphabetic?\
    \ c)\n                 (let ([c (+ c (* 2 2))])\n                   (if (> c 122)\n\
    \                       (char (+ (- c 122) 96))\n                       (char\
    \ c)))\n                 c)))\n         s)))\n", "  (define (rotate n s)\n   \
    \ (if (empty? s)\n        \"\"\n        (let ([c (first s)])\n          (if (char-alphabetic?\
    \ c)\n              (let ([n (modulo (+ n (char->integer c)) 26)])\n         \
    \       (if (char-lower-case? c)\n                    (integer->char (+ n (char->integer\
    \ #\\a)))\n                    (integer->char (+ n (char->integer #\\A)))))\n\
    \              c))))\n  (let ([s (string-upcase s)])\n    (string-join (map (lambda\
    \ (c) (rotate 2 c)) (string->list s)))))\n", "  (define (rotate-char c)\n    (let\
    \ ((c-num (char->integer c)))\n      (integer->char (+ c-num (* 2 2)))))\n  (string-map\
    \ rotate-char s))\n", "  (define (rotate n s)\n    (string-append (substring s\
    \ n) (substring s 0 n)))\n  (rotate (* 2 2) s))\n", "  (let ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n      (lambda\
    \ (c)\n        (list-ref alphabet (+ (list-index c alphabet) (* 2 2))))\n    \
    \  (string->list s)))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n    \
    \  [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n  (rotate-string\
    \ s))\n", "  (define (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n\
    \      [else (cons (rotate-letter (first s)) (encrypt-helper (rest s)))]))\n \
    \ (list->string (encrypt-helper (string->list s))))\n", "  (define (shift-down\
    \ c)\n    (integer->char (+ c (* 2 2))))\n  (string-map shift-down s))\n", " \
    \ (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\z)\n                  #\\b\n                 \
    \ (if (char=? c #\\y)\n                      #\\a\n                      (integer->char\
    \ (+ (char->integer c) 2)))))))\n    (rotate-char-helper c))\n  (define (encrypt-helper\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (rotate-char (first s))\
    \ (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (rotate n c)\n    (if (char-alphabetic? c)\n        (let\
    \ ([c (char-downcase c)])\n          (if (char-&gt;integer c)\n              (integer-&gt;char\
    \ (+ n (char-&gt;integer c)))\n              c))\n        c))\n  (define (rotate-string\
    \ s n)\n    (string-map (lambda (c) (rotate n c)) s))\n  (rotate-string s 2))\n",
  "  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n      (cond\n    \
    \    [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c])))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n   \
    \   (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n     \
    \         #\\d\n              (if (char=? c #\\c)\n                  #\\e\n  \
    \                (if (char=? c #\\d)\n                      #\\f\n           \
    \           (if (char=? c #\\e)\n                          #\\g\n            \
    \              (if (char=? c #\\f)\n                              #\\h\n     \
    \                         (if (char=? c #\\g)\n                              \
    \    #\\i\n                                  (if (char=? c #\\h)\n           \
    \                           #\\j\n                                      (if (char=?\
    \ c #\\i)\n                                          #\\k\n                  \
    \                        (if (char=? c #\\j)\n                               \
    \               #\\l\n                                              (if (char=?\
    \ c #\\k)\n                                                  #\\m\n          \
    \                                        (if (char=? c #\\l)\n               \
    \                                       #\\n\n                               \
    \                       (if (char=? c #\\m)\n                                \
    \                          #\\o\n                                            \
    \              (if (char=? c #\\n)\n                                         \
    \                     #\\p\n                                                 \
    \             (if (char=? c #\\o)\n                                          \
    \                        #\\q\n                                              \
    \                    (if (char=? c #\\p)\n                                   \
    \                                   #\\r\n                                   \
    \                                   (if (char=? c #\\q)\n                    \
    \                                                      #\\s\n                \
    \                                                          (if (char=? c #\\r)\n\
    \                                                                            \
    \  #\\t\n                                                                    \
    \          (if (char=? c #\\s)\n                                             \
    \                                     #\\u\n                                 \
    \                                                 (if (char=? c #\\t)\n      \
    \                                                                            \
    \    #\\v\n                                                                  \
    \                    (if (char=? c #\\u)\n                                   \
    \                                                       #\\w\n               \
    \                                                                           (if\
    \ (char=? c #\\v)\n                                                          \
    \                      ", "  (define (encrypt-helper s i)\n    (if (= i (string-length\
    \ s))\n        \"\"\n        (string-append (string (modulo (+ (string-ref s i)\
    \ (* 2 2)) 26) (+ (char->integer #\\a) 26)))\n        (encrypt-helper s (+ i 1))))\n\
    \  (encrypt-helper s 0))\n", "  (define (rotate n)\n    (if (zero? n)\n      \
    \  s\n        (rotate (- n 1))\n        (string-append (substring s (- n 1) n)\n\
    \                       (substring s 0 (- n 1)))))\n  (rotate 2))\n", "  (define\
    \ (rotate-by-two c)\n    (let ([c (string-ref s 0)])\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c])))\n  (string (rotate-by-two (string-ref s 0))))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (encrypt-helper\
    \ s i)\n    (if (= i (string-length s))\n        \"\"\n        (string-append\
    \ (string (char-downcase (+ (char-downcase (string-ref s i)) 2)))\n          \
    \             (encrypt-helper s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (string-append\
    \ (string-append (substring s 0 2) (substring s 4 6))\n                 (substring\
    \ s 2 4)))\n", "  (define (rotate n s)\n    (if (empty? s)\n        s\n      \
    \  (rotate n (string-append (substring s n) (substring s 0 n)))))\n  (rotate (*\
    \ 2 2) s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n  \
    \            #\\d\n              (if (char=? c #\\c)\n                  #\\e\n\
    \                  (if (char=? c #\\d)\n                      #\\f\n         \
    \             (if (char=? c #\\e)\n                          #\\g\n          \
    \                (if (char=? c #\\f)\n                              #\\h\n   \
    \                           (if (char=? c #\\g)\n                            \
    \      #\\i\n                                  (if (char=? c #\\h)\n         \
    \                             #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (rotate-n s n)\n    (if (= n\
    \ 0)\n        s\n        (rotate-n (rotate s) (- n 1))))\n  (define (encrypt-helper\
    \ s)\n    (define (encrypt-helper-inner s)\n      (if (empty? s)\n          \"\
    \"\n          (string-append (rotate-n (substring s 0 1) 2) (encrypt-helper-inner\
    \ (substring s 1)))))\n    (encrypt-helper-inner s))\n  (encrypt-helper s))\n",
  "  (define (rotate-char c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n\
    \  (map rotate-char (string->list s)))\n", "  (define (rotate-char c)\n    (if\
    \ (char=? c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n            #\\\
    a\n            (integer->char (+ (char->integer c) 2)))))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate n s)\n    (string-append (substring s n) (substring\
    \ s 0 n)))\n  (rotate (* 2 2) s))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond\n        ((char=? c #\\a) #\\c)\n      \
    \  ((char=? c #\\b) #\\d)\n        ((char=? c #\\c) #\\e)\n        ((char=? c\
    \ #\\d) #\\f)\n        ((char=? c #\\e) #\\g)\n        ((char=? c #\\f) #\\h)\n\
    \        ((char=? c #\\g) #\\i)\n        ((char=? c #\\h) #\\j)\n        ((char=?\
    \ c #\\i) #\\k)\n        ((char=? c #\\j) #\\l)\n        ((char=? c #\\k) #\\\
    m)\n        ((char=? c #\\l) #\\n)\n        ((char=? c #\\m) #\\o)\n        ((char=?\
    \ c #\\n) #\\p)\n        ((char=? c #\\o) #\\q)\n        ((char=? c #\\p) #\\\
    r)\n        ((char=? c #\\q) #\\s)\n        ((char=? c #\\r) #\\t)\n        ((char=?\
    \ c #\\s) #\\u)\n        ((char=? c #\\t) #\\v)\n        ((char=? c #\\u) #\\\
    w)\n        ((char=? c #\\v) #\\x)\n        ((char=? c #\\w) #\\y)\n        ((char=?\
    \ c #\\x) #\\z)\n        ((char=? c #\\y) #\\a)\n        ((char=? c #\\z) #\\\
    b)\n        (else c)))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (if (string=? s \"\")\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (let ([s (string->list s)])\n    (map\
    \ (lambda (x)\n           (let ([x (char->integer x)])\n             (integer->char\
    \ (+ x (* 2 2)))))\n         s)))\n", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty?\
    \ s)\n        \"\"\n        (string-append (rotate (string-ref s 0))\n       \
    \                (encrypt-helper (substring s 1)))))\n  (encrypt-helper s))\n",
  "  (define (rotate-by-two c)\n    (if (char=? c #\\z)\n        #\\b\n        (if\
    \ (char=? c #\\y)\n            #\\a\n            (integer->char (+ (char->integer\
    \ c) 2)))))\n  (string-map rotate-by-two s))\n", "  (string-map (lambda (c)\n\
    \                (if (char-alphabetic? c)\n                    (let ([n (char->integer\
    \ c)])\n                      (integer->char (+ n (* 2 2))))\n               \
    \     c))\n              s))\n", "  (define (encrypt-helper s i)\n    (if (= i\
    \ (string-length s))\n        \"\"\n        (string-append (string (char-downcase\
    \ (+ (char-downcase (string-ref s i)) 2)))\n                       (encrypt-helper\
    \ s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (define (rotate n)\n    (if (zero?\
    \ n)\n        s\n        (rotate (- n 1))\n        (string-append (substring s\
    \ (- n 1) n) (substring s 0 (- n 1)))))\n  (rotate 2))\n", "  (string-append (string-append\
    \ (substring s 0 1) (substring s 1 2))\n                 (string-append (substring\
    \ s 2 3) (substring s 3 4))))\n", "  (define (rotate-char c)\n    (if (char=?\
    \ c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n            #\\a\n     \
    \       (integer->char (+ (char->integer c) 2)))))\n  (string-map rotate-char\
    \ s))\n", "  (define (encrypt-helper s i)\n    (cond\n      [(= i (string-length\
    \ s)) \"\"]\n      [else (string-append (string (char-downcase (+ (char-downcase\
    \ (string-ref s i)) 2)))\n                           (encrypt-helper s (+ i 1)))]))\n\
    \  (encrypt-helper s 0))\n", "  (define (encrypt-helper s i)\n    (if (= i (string-length\
    \ s))\n        \"\"\n        (string-append (string (rotate-char (string-ref s\
    \ i) 2))\n                       (encrypt-helper s (+ i 1)))))\n  (encrypt-helper\
    \ s 0))\n", "  (string-append (string-append (substring s 0 1) (substring s 1\
    \ 2))\n                 (string-append (substring s 2 3) (substring s 3 4))))\n",
  "  (define (rotate n)\n    (cond\n      [(= n 0) #\\a]\n      [(= n 1) #\\b]\n \
    \     [(= n 2) #\\c]\n      [(= n 3) #\\d]\n      [(= n 4) #\\e]\n      [(= n\
    \ 5) #\\f]\n      [(= n 6) #\\g]\n      [(= n 7) #\\h]\n      [(= n 8) #\\i]\n\
    \      [(= n 9) #\\j]\n      [(= n 10) #\\k]\n      [(= n 11) #\\l]\n      [(=\
    \ n 12) #\\m]\n      [(= n 13) #\\n]\n      [(= n 14) #\\o]\n      [(= n 15) #\\\
    p]\n      [(= n 16) #\\q]\n      [(= n 17) #\\r]\n      [(= n 18) #\\s]\n    \
    \  [(= n 19) #\\t]\n      [(= n 20) #\\u]\n      [(= n 21) #\\v]\n      [(= n\
    \ 22) #\\w]\n      [(= n 23) #\\x]\n      [(= n 24) #\\y]\n      [(= n 25) #\\\
    z]))\n  (define (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n    \
    \  [else (cons (rotate (+ (char->integer (car s)) 2))\n                   (encrypt-helper\
    \ (cdr s)))]))\n  (list->string (encrypt-helper (string->list s))))\n", "  (define\
    \ (rotate n s)\n    (if (= n 0)\n        s\n        (rotate (- n 1) (string-append\
    \ (substring s 1) (string (string-ref s 0))))))\n  (define (encrypt-helper s)\n\
    \    (if (empty? s)\n        \"\"\n        (string-append (string (string-ref\
    \ s 0)) (encrypt-helper (substring s 1)))))\n  (define (encrypt-helper2 s)\n \
    \   (if (empty? s)\n        \"\"\n        (string-append (string (string-ref s\
    \ 0)) (encrypt-helper2 (substring s 1)))))\n  (define (encrypt-helper3 s)\n  \
    \  (if (empty? s)\n        \"\"\n        (string-append (string (string-ref s\
    \ 0)) (encrypt-helper3 (substring s 1)))))\n  (define (encrypt-helper4 s)\n  \
    \  (if (empty? s)\n        \"\"\n        (string-append (string (string-ref s\
    \ 0)) (encrypt-helper4 (substring s 1)))))\n  (define (encrypt-helper5 s)\n  \
    \  (if (empty? s)\n        \"\"\n        (string-append (string (string-ref s\
    \ 0)) (encrypt-helper5 (substring s 1)))))\n  (define (encrypt-helper6 s)\n  \
    \  (if (empty? s)\n        \"\"\n        (string-append (string (string-ref s\
    \ 0)) (encrypt-helper6 (substring s 1)))))\n  (define (encrypt-helper7 s)\n  \
    \  (if (empty? s)\n        \"\"\n        (string-append (string (string-ref s\
    \ 0)) (encrypt-helper7 (substring s 1)))))\n  (define (encrypt-helper8 s)\n  \
    \  (if (empty? s)\n        \"\"\n        (string-append (string (string-ref s\
    \ 0)) (encrypt-helper8 (substring s 1)))))\n  (define (encrypt-helper9 s)\n  \
    \  (if (empty? s)\n        \"\"\n        (string-append (", "  (define (encrypt-helper\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (rotate-char (first s))\n\
    \              (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s \"\")\n        \"\
    \"\n        (string-append (rotate s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (encrypt-helper s)\n    (if (empty? s)\n        empty\n \
    \       (cons (rotate-char (first s))\n              (encrypt-helper (rest s)))))\n\
    \  (list->string (encrypt-helper (string->list s))))\n", "  (define (rotate n\
    \ s)\n    (string-append (substring s n) (substring s 0 n)))\n  (rotate (* 2 2)\
    \ s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n   \
    \   (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n       \
    \     ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n           \
    \ ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n            ((char=?\
    \ c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=? c #\\\
    i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\k) #\\\
    m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\o)\n \
    \           ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n     \
    \       ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n         \
    \   ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n            ((char=?\
    \ c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=? c #\\\
    v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\x) #\\\
    z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\b)))\n\
    \    (rotate-char-helper c))\n  (define (rotate-string s)\n    (if (string=? s\
    \ \"\")\n        \"\"\n        (string-append (string (rotate-char (string-ref\
    \ s 0)))\n                       (rotate-string (substring s 1)))))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (if (char-alphabetic? c)\n        (let*\
    \ ([a (char->integer #\\a)]\n               [z (char->integer #\\z)]\n       \
    \        [c (char->integer c)]\n               [c (+ c (* 2 2))])\n          (integer->char\
    \ (if (> c z)\n                             (- c z a 1)\n                    \
    \         c)))\n        c))\n  (string-map rotate-char s))\n", "  (string-append\
    \ (string-append (substring s 0 1) (substring s 1 2))\n                 (string-append\
    \ (substring s 2 3) (substring s 3 4))))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond ((= c #\\a) #\\c)\n            ((= c #\\\
    b) #\\d)\n            ((= c #\\c) #\\e)\n            ((= c #\\d) #\\f)\n     \
    \       ((= c #\\e) #\\g)\n            ((= c #\\f) #\\h)\n            ((= c #\\\
    g) #\\i)\n            ((= c #\\h) #\\j)\n            ((= c #\\i) #\\k)\n     \
    \       ((= c #\\j) #\\l)\n            ((= c #\\k) #\\m)\n            ((= c #\\\
    l) #\\n)\n            ((= c #\\m) #\\o)\n            ((= c #\\n) #\\p)\n     \
    \       ((= c #\\o) #\\q)\n            ((= c #\\p) #\\r)\n            ((= c #\\\
    q) #\\s)\n            ((= c #\\r) #\\t)\n            ((= c #\\s) #\\u)\n     \
    \       ((= c #\\t) #\\v)\n            ((= c #\\u) #\\w)\n            ((= c #\\\
    v) #\\x)\n            ((= c #\\w) #\\y)\n            ((= c #\\x) #\\z)\n     \
    \       ((= c #\\y) #\\a)\n            ((= c #\\z) #\\b)))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond ((null? s) '())\n          (else\
    \ (cons (rotate-char (car s)) (rotate-string (cdr s))))))\n  (rotate-string s))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (or (char=?\
    \ c #\\a) (char=? c #\\b))\n          #\\c\n          (rotate-char-helper (char-downcase\
    \ (char-downcase c)))))\n    (if (char-alphabetic? c)\n        (rotate-char-helper\
    \ c)\n        c))\n  (define (encrypt-helper s)\n    (if (string-empty? s)\n \
    \       \"\"\n        (string-append (string (rotate-char (string-ref s 0)))\n\
    \                       (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s \"\")\n        \"\
    \"\n        (string-append (rotate s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate-char c)\n    (if (char=? c #\\z)\n        #\\a\n\
    \        (if (char=? c #\\y)\n            #\\z\n            (char+ c 2))))\n \
    \ (define (rotate-string s)\n    (if (string=? s \"\")\n        \"\"\n       \
    \ (string-append (string (rotate-char (string-ref s 0)))\n                   \
    \    (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (for/list\
    \ ([c (in-string s)])\n    (let ([c (char-downcase c)])\n      (if (char-alphabetic?\
    \ c)\n          (let ([c (+ c (* 2 2))])\n            (if (> c 122)\n        \
    \        (char (- c 26))\n                c))\n          c))))\n", "  (define\
    \ (rotate-char c)\n    (let ((c (string-&gt;char c)))\n      (char-&gt;string\
    \ (+ c (* 2 2)))))\n  (string-join (map rotate-char (string-&gt;list s)) \"\"\
    ))\n</code>\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (cons (rotate-char\
    \ (first s) (* 2 2))\n           (encrypt (rest s)))]))\n", "  (string-append\
    \ (string-append (substring s 0 2) (substring s 4 6))\n                 (substring\
    \ s 2 4)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (if (char=? c #\\z)\n          #\\b\n          (if (char=? c #\\y)\n  \
    \            #\\a\n              (if (char=? c #\\Z)\n                  #\\B\n\
    \                  (if (char=? c #\\Y)\n                      #\\A\n         \
    \             (integer->char (+ (char->integer c) 2)))))))\n    (rotate-char-helper\
    \ c))\n  (define (encrypt-helper s)\n    (if (empty? s)\n        empty\n     \
    \   (cons (rotate-char (first s))\n              (encrypt-helper (rest s)))))\n\
    \  (list->string (encrypt-helper (string->list s))))\n", "  (let ([l (string->list\
    \ s)])\n    (map (lambda (c)\n           (let ([c (char-downcase c)])\n      \
    \       (if (char-alphabetic? c)\n                 (let ([c (+ c (* 2 2))])\n\
    \                   (if (> c #\\z)\n                       (char-downcase (- c\
    \ 26))\n                       (char-downcase c)))\n                 c)))\n  \
    \       l)))\n", "  (define (rotate-char c)\n    (if (char=? c #\\z)\n       \
    \ #\\a\n        (if (char=? c #\\y)\n            #\\z\n            (integer->char\
    \ (+ (char->integer c) 2)))))\n  (define (rotate-string s)\n    (if (string=?\
    \ s \"\")\n        \"\"\n        (string-append (string (rotate-char (string-ref\
    \ s 0)))\n                       (rotate-string (substring s 1)))))\n  (rotate-string\
    \ s))\n", "  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n\
    \                    (let ([n (char->integer c)])\n                      (integer->char\
    \ (+ n (* 2 2))))\n                    c))\n              s))\n", "  (define (rotate\
    \ c)\n    (if (char=? c #\\a) #\\c\n        (if (char=? c #\\b) #\\d\n       \
    \     (if (char=? c #\\c) #\\e\n                (if (char=? c #\\d) #\\f\n   \
    \                 (if (char=? c #\\e) #\\g\n                        (if (char=?\
    \ c #\\f) #\\h\n                            (if (char=? c #\\g) #\\i\n       \
    \                         (if (char=? c #\\h) #\\j\n                         \
    \           (if (char=? c #\\i) #\\k\n                                       \
    \ (if (char=? c #\\j) #\\l\n                                            (if (char=?\
    \ c #\\k) #\\m\n                                                (if (char=? c\
    \ #\\l) #\\n\n                                                    (if (char=?\
    \ c #\\m) #\\o\n                                                        (if (char=?\
    \ c #\\n) #\\p\n                                                            (if\
    \ (char=? c #\\o) #\\q\n                                                     \
    \           (if (char=? c #\\p) #\\r\n                                       \
    \                             (if (char=? c #\\q) #\\s\n                     \
    \                                                   (if (char=? c #\\r) #\\t\n\
    \                                                                            (if\
    \ (char=? c #\\s) #\\u\n                                                     \
    \                           (if (char=? c #\\t) #\\v\n                       \
    \                                                             (if (char=? c #\\\
    u) #\\w\n                                                                    \
    \                    (if (char=? c #\\v) #\\x\n                              \
    \                                                              (if (char=? c #\\\
    w) #\\y\n                                                                    \
    \                            (if (char=? c #\\x) #\\z\n                      \
    \                                                                            \
    \  (if (char=? c #\\y) #\\a\n                                                \
    \                                                        (if (char=? c #\\z) #\\\
    b\n                                                                          \
    \                                  c))))))))))))))))))))))))))))))\n  (string-map\
    \ rotate s))\n", "  (string-map (lambda (c)\n                (if (char-alphabetic?\
    \ c)\n                    (let ((c (char-downcase c)))\n                     \
    \ (if (char-&gt;integer c)\n                          (integer-&gt;char (+ (char-&gt;integer\
    \ c) 2))\n                          (integer-&gt;char (+ (char-&gt;integer c)\
    \ 2))))\n                    c))\n              s))\n</code>\nI am getting the\
    \ following error:\n<code>string-map: expects argument of type &lt;string-char-mapper&gt;;\
    \ given: #&lt;procedure:encrypt&gt;\n</code>\nI am not sure what I am doing wrong.\n\
    \n\nA:\n\nYou're calling <code>string-map</code> with the wrong arguments. The\
    \ first argument to <code>string-map</code> is a function that takes a single\
    \ character and returns a character. You're passing in the function <code>encrypt</code>,\
    \ which takes a string and returns a string.\nYou need to pass in a function that\
    \ takes a character and returns a character. You can define that function inline\
    \ with a <code>lambda</code> expression, or you can define it separately and pass\
    \ it in.\n", "  (if (string=? s \"\")\n      \"\"\n      (string-append (string\
    \ (rotate-char (string-ref s 0) 2))\n                     (encrypt (substring\
    \ s 1)))))\n", "  (string-append (string-take s 2) (string-drop s 2)))\n", " \
    \ (let ([s (string->list s)])\n    (map (lambda (c)\n           (let ([c (char-downcase\
    \ c)])\n             (if (char-alphabetic? c)\n                 (let ([c (+ c\
    \ (* 2 2))])\n                   (if (> c #\\z)\n                       (char-downcase\
    \ (+ c (- #\\a 1)))\n                       (char-downcase c)))\n            \
    \     c)))\n         s)))\n", "  (let ([s (string->list s)])\n    (map (lambda\
    \ (c)\n           (let ([c (char-downcase c)])\n             (if (char-alphabetic?\
    \ c)\n                 (let ([c (+ c (* 2 2))])\n                   (if (> c #\\\
    z)\n                       (char-downcase (+ c (- #\\a 1)))\n                \
    \       (char-downcase c)))\n                 c)))\n         s)))\n", "  (string-append\
    \ (string-take s 2) (string-drop s 2)))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\c\n        \
    \  (if (char=? c #\\b)\n              #\\d\n              (if (char=? c #\\c)\n\
    \                  #\\e\n                  (if (char=? c #\\d)\n             \
    \         #\\f\n                      (if (char=? c #\\e)\n                  \
    \        #\\g\n                          (if (char=? c #\\f)\n               \
    \               #\\h\n                              (if (char=? c #\\g)\n    \
    \                              #\\i\n                                  (if (char=?\
    \ c #\\h)\n                                      #\\j\n                      \
    \                (if (char=? c #\\i)\n                                       \
    \   #\\k\n                                          (if (char=? c #\\j)\n    \
    \                                          #\\l\n                            \
    \                  (if (char=? c #\\k)\n                                     \
    \             #\\m\n                                                  (if (char=?\
    \ c #\\l)\n                                                      #\\n\n      \
    \                                                (if (char=? c #\\m)\n       \
    \                                                   #\\o\n                   \
    \                                       (if (char=? c #\\n)\n                \
    \                                              #\\p\n                        \
    \                                      (if (char=? c #\\o)\n                 \
    \                                                 #\\q\n                     \
    \                                             (if (char=? c #\\p)\n          \
    \                                                            #\\r\n          \
    \                                                            (if (char=? c #\\\
    q)\n                                                                         \
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r)\n                                                  \
    \                            #\\t\n                                          \
    \                                    (if (char=? c #\\s)\n                   \
    \                                                               #\\u\n       \
    \                                                                           (if\
    \ (char=? c #\\t)\n                                                          \
    \                            #\\v\n                                          \
    \                                            (if (char=? c #\\u)\n           \
    \                                                                            \
    \   #\\w\n                                                                   \
    \                       (if (char=? c #\\v)\n                                \
    \                                                ", "  (define (rotate s)\n  \
    \  (string-append (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper\
    \ s)\n    (if (empty? s)\n        \"\"\n        (string-append (rotate (string-ref\
    \ s 0))\n                       (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer c)\
    \ (* 2 2))))\n  (map rotate-char (string->list s)))\n", "  (let ([s (string->list\
    \ s)])\n    (map (lambda (c)\n           (let ([c (char-downcase c)])\n      \
    \       (if (char-alphabetic? c)\n                 (let ([c (+ c (* 2 2))])\n\
    \                   (if (> c 122)\n                       (char (+ c (- 122 97)))\n\
    \                       (char c)))\n                 c)))\n         s)))\n", " \
    \ (define (encrypt-helper s i)\n    (cond\n      [(= i (string-length s)) \"\"\
    ]\n      [else (string-append (list (string-ref s i))\n                      \
    \     (encrypt-helper s (+ i 1)))]))\n  (encrypt-helper s 0))\n", "  (define (rotate-char\
    \ c)\n    (if (char=? c #\\a)\n        #\\c\n        (if (char=? c #\\b)\n   \
    \         #\\d\n            (if (char=? c #\\c)\n                #\\e\n      \
    \          (if (char=? c #\\d)\n                    #\\f\n                   \
    \ (if (char=? c #\\e)\n                        #\\g\n                        (if\
    \ (char=? c #\\f)\n                            #\\h\n                        \
    \    (if (char=? c #\\g)\n                                #\\i\n             \
    \                   (if (char=? c #\\h)\n                                    #\\\
    j\n                                    (if (char=? c #\\i)\n                 \
    \                       #\\k\n                                        (if (char=?\
    \ c #\\j)\n                                            #\\l\n                \
    \                            (if (char=? c #\\k)\n                           \
    \                     #\\m\n                                                (if\
    \ (char=? c #\\l)\n                                                    #\\n\n\
    \                                                    (if (char=? c #\\m)\n   \
    \                                                     #\\o\n                 \
    \                                       (if (char=? c #\\n)\n                \
    \                                            #\\p\n                          \
    \                                  (if (char=? c #\\o)\n                     \
    \                                           #\\q\n                           \
    \                                     (if (char=? c #\\p)\n                  \
    \                                                  #\\r\n                    \
    \                                                (if (char=? c #\\q)\n       \
    \                                                                 #\\s\n     \
    \                                                                   (if (char=?\
    \ c #\\r)\n                                                                  \
    \          #\\t\n                                                            \
    \                (if (char=? c #\\s)\n                                       \
    \                                         #\\u\n                             \
    \                                                   (if (char=? c #\\t)\n    \
    \                                                                            \
    \    #\\v\n                                                                  \
    \                  (if (char=? c #\\u)\n                                     \
    \                                                   #\\w\n                   \
    \                                                                     (if (char=?\
    \ c #\\v)\n                                                                  \
    \                          #\\x\n                                            \
    \                                                (if (char=? c #\\w)\n       \
    \         ", "  (define (encrypt-helper s i)\n    (if (= i (string-length s))\n\
    \        \"\"\n        (string-append (string (char-downcase (+ (char-downcase\
    \ (string-ref s i)) 2)))\n                       (encrypt-helper s (+ i 1)))))\n\
    \  (encrypt-helper s 0))\n", "  (string-append (string-take s 2) (string-drop\
    \ s 2)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n\
    \        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (define (rotate-string-helper s)\n   \
    \   (cond\n        [(empty? s) empty]\n        [else (cons (rotate-char (first\
    \ s)) (rotate-string-helper (rest s)))]))\n    (rotate-string", "  (define (rotate\
    \ n s)\n    (if (= n 0)\n        s\n        (rotate (- n 1) (string-append (substring\
    \ s 1) (string (string-ref s 0))))))\n  (define (encrypt-helper s)\n    (if (empty?\
    \ s)\n        \"\"\n        (string-append (rotate 2 (string (string-ref s 0)))\
    \ (encrypt-helper (substring s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate\
    \ c)\n    (define (rotate-helper c)\n      (cond\n        [(char=? c #\\a) #\\\
    c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=?\
    \ c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\\
    h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (rotate-helper (rotate-helper c)))\n  (define (encrypt-helper\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate (first s))\
    \ (encrypt-helper (rest s)))]))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s \"\")\n        \"\
    \"\n        (string-append (rotate s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate n s)\n    (string-append (substring s n) (substring\
    \ s 0 n)))\n  (rotate (* 2 2) s))\n", "  (let ([l (string->list s)])\n    (map\
    \ (lambda (x) (list->string (list (+ x (* 2 2))))) l)))\n", "  (string-append\
    \ (string-append (substring s 0 1) (substring s 2))\n                 (substring\
    \ s 1 2)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n  \
    \            #\\d\n              (if (char=? c #\\c)\n                  #\\e\n\
    \                  (if (char=? c #\\d)\n                      #\\f\n         \
    \             (if (char=? c #\\e)\n                          #\\g\n          \
    \                (if (char=? c #\\f)\n                              #\\h\n   \
    \                           (if (char=? c #\\g)\n                            \
    \      #\\i\n                                  (if (char=? c #\\h)\n         \
    \                             #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (list->string\n     (map\n      (lambda (c)\n        (let ([index (string-index\
    \ alphabet c)])\n          (if (not index)\n              c\n              (list-ref\
    \ alphabet (+ index (* 2 2))))))\n      (string->list s)))))\n", "  (define (rotate-char\
    \ c)\n    (if (char-alphabetic? c)\n        (let* ([a (char->integer #\\a)]\n\
    \               [z (char->integer #\\z)]\n               [c (char->integer c)]\n\
    \               [c (+ c (* 2 2))])\n          (if (> c z)\n              (integer->char\
    \ (+ a (- c z 1)))\n              (integer->char c)))\n        c))\n  (string-map\
    \ rotate-char s))\n", "  (define (rotate n s)\n    (if (equal? n 0)\n        s\n\
    \        (rotate (- n 1) (string-append (substring s -1) (substring s 0 -1)))))\n\
    \  (rotate (* 2 2) s))\n", "  (define (rotate s)\n    (string-append (substring\
    \ s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s\
    \ \"\")\n        \"\"\n        (string-append (rotate s) (encrypt-helper (substring\
    \ s 1)))))\n  (encrypt-helper s))\n", "  (string-append (string-append (substring\
    \ s 0 1) (substring s 1 2)) (substring s 2 3)))\n", "  (define (encrypt-helper\
    \ s i)\n    (cond\n      ((= i (string-length s)) \"\")\n      (else\n       (string-append\n\
    \        (string (char-downcase (+ (char-downcase (string-ref s i)) 2)))\n   \
    \     (encrypt-helper s (+ i 1))))))\n  (encrypt-helper s 0))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s)) (rotate-string-helper (rest s)))]))\n\
    \    (rotate-string", "  (define (rotate n s)\n    (if (= n 0)\n        s\n  \
    \      (rotate (- n 1) (string-append (substring s -1) (substring s 0 -1)))))\n\
    \  (rotate 2 (rotate 2 s)))\n", "  (define (encrypt-helper s i)\n    (if (= i\
    \ (string-length s))\n        \"\"\n        (string-append (string (char-downcase\
    \ (+ (char-downcase (string-ref s i)) (* 2 2))))\n                       (encrypt-helper\
    \ s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\c\n        \
    \  (if (char=? c #\\b)\n              #\\d\n              (if (char=? c #\\c)\n\
    \                  #\\e\n                  (if (char=? c #\\d)\n             \
    \         #\\f\n                      (if (char=? c #\\e)\n                  \
    \        #\\g\n                          (if (char=? c #\\f)\n               \
    \               #\\h\n                              (if (char=? c #\\g)\n    \
    \                              #\\i\n                                  (if (char=?\
    \ c #\\h)\n                                      #\\j\n                      \
    \                (if (char=? c #\\i)\n                                       \
    \   #\\k\n                                          (if (char=? c #\\j)\n    \
    \                                          #\\l\n                            \
    \                  (if (char=? c #\\k)\n                                     \
    \             #\\m\n                                                  (if (char=?\
    \ c #\\l)\n                                                      #\\n\n      \
    \                                                (if (char=? c #\\m)\n       \
    \                                                   #\\o\n                   \
    \                                       (if (char=? c #\\n)\n                \
    \                                              #\\p\n                        \
    \                                      (if (char=? c #\\o)\n                 \
    \                                                 #\\q\n                     \
    \                                             (if (char=? c #\\p)\n          \
    \                                                            #\\r\n          \
    \                                                            (if (char=? c #\\\
    q)\n                                                                         \
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r)\n                                                  \
    \                            #\\t\n                                          \
    \                                    (if (char=? c #\\s)\n                   \
    \                                                               #\\u\n       \
    \                                                                           (if\
    \ (char=? c #\\t)\n                                                          \
    \                            #\\v\n                                          \
    \                                            (if (char=? c #\\u)\n           \
    \                                                                            \
    \   #\\w\n                                                                   \
    \                       (if (char=? c #\\v)\n                                \
    \                                                ", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (cond\n        ((char=? c #\\a) #\\\
    c)\n        ((char=? c #\\b) #\\d)\n        ((char=? c #\\c) #\\e)\n        ((char=?\
    \ c #\\d) #\\f)\n        ((char=? c #\\e) #\\g)\n        ((char=? c #\\f) #\\\
    h)\n        ((char=? c #\\g) #\\i)\n        ((char=? c #\\h) #\\j)\n        ((char=?\
    \ c #\\i) #\\k)\n        ((char=? c #\\j) #\\l)\n        ((char=? c #\\k) #\\\
    m)\n        ((char=? c #\\l) #\\n)\n        ((char=? c #\\m) #\\o)\n        ((char=?\
    \ c #\\n) #\\p)\n        ((char=? c #\\o) #\\q)\n        ((char=? c #\\p) #\\\
    r)\n        ((char=? c #\\q) #\\s)\n        ((char=? c #\\r) #\\t)\n        ((char=?\
    \ c #\\s) #\\u)\n        ((char=? c #\\t) #\\v)\n        ((char=? c #\\u) #\\\
    w)\n        ((char=? c #\\v) #\\x)\n        ((char=? c #\\w) #\\y)\n        ((char=?\
    \ c #\\x) #\\z)\n        ((char=? c #\\y) #\\a)\n        ((char=? c #\\z) #\\\
    b)\n        (else c)))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (cond\n      ((string=? s \"\") \"\")\n      (else (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                           (rotate-string (substring\
    \ s 1))))))\n  (rotate-string s))\n", "  (define (rotate-char c)\n    (if (char-alphabetic?\
    \ c)\n        (let* ([n (char->integer c)]\n               [n (+ n (* 2 2))])\n\
    \          (integer->char n))\n        c))\n  (string-map rotate-char s))\n",
  "  (define (rotate n s)\n    (if (zero? n)\n        s\n        (rotate (- n 1) (string-append\
    \ (substring s -1) (substring s 0 -1)))))\n  (rotate 2 (rotate 2 s)))\n", "  (define\
    \ (rotate-char c)\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\\
    b) #\\d]\n      [(char=? c #\\c) #\\e]\n      [(char=? c #\\d) #\\f]\n      [(char=?\
    \ c #\\e) #\\g]\n      [(char=? c #\\f) #\\h]\n      [(char=? c #\\g) #\\i]\n\
    \      [(char=? c #\\h) #\\j]\n      [(char=? c #\\i) #\\k]\n      [(char=? c\
    \ #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n      [(char=? c #\\l) #\\n]\n  \
    \    [(char=? c #\\m) #\\o]\n      [(char=? c #\\n) #\\p]\n      [(char=? c #\\\
    o) #\\q]\n      [(char=? c #\\p) #\\r]\n      [(char=? c #\\q) #\\s]\n      [(char=?\
    \ c #\\r) #\\t]\n      [(char=? c #\\s) #\\u]\n      [(char=? c #\\t) #\\v]\n\
    \      [(char=? c #\\u) #\\w]\n      [(char=? c #\\v) #\\x]\n      [(char=? c\
    \ #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n      [(char=? c #\\y) #\\a]\n  \
    \    [(char=? c #\\z) #\\b]\n      [else c]))\n  (string-map rotate-char s))\n",
  "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n      (if (char&lt;=?\
    \ #\\a c #\\z)\n          (char-&gt;string (+ c 2))\n          (char-&gt;string\
    \ c))))\n  (string-join (map rotate-char (string-&gt;list s)) \"\"))\n", "  (define\
    \ (rotate-char c)\n    (if (char-alphabetic? c)\n        (let* ([a (char->integer\
    \ #\\a)]\n               [z (char->integer #\\z)]\n               [c (char->integer\
    \ c)]\n               [c (+ c (* 2 2))])\n          (if (> c z)\n            \
    \  (integer->char (+ a (- c z 1)))\n              (integer->char c)))\n      \
    \  c))\n  (string-map rotate-char s))\n", "  (define (shift-char c)\n    (let\
    \ ([c (string-&gt;char c)])\n      (if (char=? c #\\z)\n          #\\b\n     \
    \     (if (char=? c #\\y)\n              #\\a\n              (char-&gt;string\
    \ (+ c 2))))))\n  (string-join (map shift-char (string-&gt;list s))))\n</code>\n",
  "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n      (if (char=?\
    \ c #\\z)\n          #\\b\n          (if (char=? c #\\y)\n              #\\a\n\
    \              (char-&gt;string (+ c 2))))))\n  (string-join (map rotate-char\
    \ (string-&gt;list s))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n\
    \            ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n    \
    \        ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n        \
    \    ((char=? c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=?\
    \ c #\\i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\\
    k) #\\m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\\
    o)\n            ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n \
    \           ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n     \
    \       ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n         \
    \   ((char=? c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=?\
    \ c #\\v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\\
    x) #\\z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\\
    b)))\n    (rotate-char-helper c))\n  (define (rotate-string s)\n    (if (string=?\
    \ s \"\")\n        \"\"\n        (string-append (string (rotate-char (string-ref\
    \ s 0)))\n                       (rotate-string (substring s 1)))))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n   \
    \   (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n  \
    \      [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c])))\n  (string-join\
    \ (map rotate-char (string-&gt;list s))))\n</code>\n", "  (define (rotate n)\n\
    \    (cond\n      [(= n 0) 'a]\n      [(= n 1) 'b]\n      [(= n 2) 'c]\n     \
    \ [(= n 3) 'd]\n      [(= n 4) 'e]\n      [(= n 5) 'f]\n      [(= n 6) 'g]\n \
    \     [(= n 7) 'h]\n      [(= n 8) 'i]\n      [(= n 9) 'j]\n      [(= n 10) 'k]\n\
    \      [(= n 11) 'l]\n      [(= n 12) 'm]\n      [(= n 13) 'n]\n      [(= n 14)\
    \ 'o]\n      [(= n 15) 'p]\n      [(= n 16) 'q]\n      [(= n 17) 'r]\n      [(=\
    \ n 18) 's]\n      [(= n 19) 't]\n      [(= n 20) 'u]\n      [(= n 21) 'v]\n \
    \     [(= n 22) 'w]\n      [(= n 23) 'x]\n      [(= n 24) 'y]\n      [(= n 25)\
    \ 'z]))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n  \
    \    [else (cons (rotate (char-&gt;integer (car s))) (rotate-string (cdr s)))]))\n\
    \  (list-&gt;string (rotate-string (string-&gt;list s))))\n</code>\nI'm not sure\
    \ if this is the best way to do it, but it works.\n\n\nA:\n\nI think you're overcomplicating\
    \ things. You can use <code>string-map</code> to apply a function to each character\
    \ in a string, and then use <code>char-&gt;integer</code> and <code>integer-&gt;char</code>\
    \ to convert between characters and numbers.\n<code>(define (encrypt s)\n  (string-map\
    \ (lambda (c)\n                (integer-&gt;char (+ (char-&gt;integer c) 2)))\n\
    \              s))\n</code>\n", "  (define (rotate s)\n    (string-append (substring\
    \ s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s\
    \ \"\")\n        \"\"\n        (string-append (rotate s) (encrypt-helper (substring\
    \ s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (char=? c #\\z)\n          #\\b\n        \
    \  (if (char=? c #\\y)\n              #\\a\n              (if (char=? c #\\Z)\n\
    \                  #\\B\n                  (if (char=? c #\\Y)\n             \
    \         #\\A\n                      (integer->char (+ (char->integer c) 2)))))))\n\
    \    (rotate-char-helper c))\n  (define (rotate-string s)\n    (if (empty? s)\n\
    \        \"\"\n        (string-append (string (rotate-char (string-ref s 0)))\n\
    \                       (rotate-string (substring s 1)))))\n  (rotate-string s))\n",
  "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map (lambda (c)\n            (list-ref alphabet\n                     \
    \ (+ (string-index \"abcdefghijklmnopqrstuvwxyz\" c)\n                       \
    \  (* 2 2))))\n          (string->list s)))))\n", "  (define (rotate n s)\n  \
    \  (if (zero? n)\n        s\n        (rotate (- n 1) (string-append (substring\
    \ s 1) (string (string-ref s 0))))))\n  (define (shift n s)\n    (string-append\
    \ (rotate n s) (rotate n s)))\n  (shift 2 s))\n", "  (string-append (string-take\
    \ s 2) (string-drop s 2)))\n", "  (define (rotate-char c)\n    (if (char=? c #\\\
    z)\n        #\\b\n        (if (char=? c #\\y)\n            #\\a\n            (integer->char\
    \ (+ (char->integer c) 2)))))\n  (string-map rotate-char s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (if (string=? s \"\")\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (define (rotate-char c)\n    (if (char=?\
    \ c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n            #\\a\n     \
    \       (integer->char (+ (char->integer c) 2)))))\n  (string-map rotate-char\
    \ s))\n", "  (define (rotate n s)\n    (if (empty? s)\n        s\n        (rotate\
    \ n (append (rest s) (list (first s))))))\n  (rotate (* 2 2) s))\n", "  (define\
    \ (rotate-alphabet n)\n    (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n      (list->string (map (lambda (c) (list-ref alphabet (+ c n)))\n     \
    \                    (map char->integer (string->list s))))))\n  (rotate-alphabet\
    \ (* 2 2)))\n", "  (map (lambda (c)\n         (if (char-alphabetic? c)\n     \
    \        (let* ([a (char-upcase c)]\n                    [i (- (char-code a) 65)]\n\
    \                    [j (+ (* 2 i) 2)])\n               (char (+ (modulo j 26)\
    \ 65)))\n             c))\n       s))\n", "  (define (rotate n s)\n    (string-append\
    \ (substring s n) (substring s 0 n)))\n  (rotate (* 2 2) s))\n", "  (define (rotate-char\
    \ c)\n    (let ([c (char-downcase c)])\n      (if (char-alphabetic? c)\n     \
    \     (let ([n (char->integer c)])\n            (integer->char (+ n (* 2 2))))\n\
    \          c)))\n  (string-map rotate-char s))\n", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\\
    c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=?\
    \ c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\\
    h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (string-map rotate-char s))\n  (rotate-string s))\n", "  (define (encrypt-helper\
    \ s i)\n    (cond ((= i (string-length s)) \"\")\n          (else (string-append\
    \ (list (string-ref s i))\n                               (encrypt-helper s (+\
    \ i 1))))))\n  (encrypt-helper s 0))\n", "  (string-append (string-append (substring\
    \ s 2) (substring s 0 2))\n                 (string-append (substring s 4) (substring\
    \ s 0 4))))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) (* 2 2))))\n  (map rotate-char (string->list s)))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s)) (rotate-string-helper (rest s)))]))\n\
    \    (rotate-string", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) 4)))\n  (map rotate-char (string->list s)))\n", "  (define (rotate-char c)\n\
    \    (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list\
    \ s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n  \
    \    (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n \
    \       [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string\
    \ s))\n", "  (define (helper s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (if (char-alphabetic? (car s))\n                  (if (char-lower-case? (car\
    \ s))\n                      (integer->char (+ (char->integer (car s)) 2))\n \
    \                     (integer->char (+ (char->integer (car s)) 2)))\n       \
    \           (car s))\n              (helper (cdr s)))))\n  (list->string (helper\
    \ (string->list s))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ (rotate-char-helper c)))\n  (define (rotate-string s)\n    (string-map rotate-char\
    \ s))\n  (rotate-string s))\n", "  (define (rotate n s)\n    (if (empty? s)\n\
    \        s\n        (string-append (string (modulo (+ (string-ref s 0) n) 26))\n\
    \                       (rotate n (substring s 1)))))\n  (rotate (* 2 2) s))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n  \
    \      [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n    \
    \  [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n  (rotate-string\
    \ s))\n", "  (string-map (lambda (x) (char (+ x (* 2 2)))) s))\n", "  (define\
    \ (rotate n s)\n    (string-append (substring s n) (substring s 0 n)))\n  (rotate\
    \ (* 2 2) s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n    \
    \  [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n  (rotate-string\
    \ s))\n", "  (string-append (string-append (substring s 0 1) (substring s 1 2))\n\
    \                 (string-append (substring s 2 3) (substring s 3 4))))\n", " \
    \ (define (encrypt-helper s i)\n    (if (= i (string-length s))\n        \"\"\n\
    \        (string-append (string (char-downcase (+ (char-downcase (string-ref s\
    \ i)) 2)))\n                       (encrypt-helper s (+ i 1)))))\n  (encrypt-helper\
    \ s 0))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n \
    \     (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n\
    \        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (define (rotate-string-helper s)\n   \
    \   (cond\n        [(empty? s) empty]\n        [else (cons (rotate-char (first\
    \ s)) (rotate-string-helper (rest s)))]))\n    (rotate-string", "  (define (encrypt-helper\
    \ s i)\n    (if (= i (string-length s))\n        \"\"\n        (string-append\
    \ (string (char-downcase (string-ref s i)))\n                       (encrypt-helper\
    \ s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (define (rotate-char c)\n    (if\
    \ (char=? c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n            #\\\
    a\n            (integer->char (+ (char->integer c) 2)))))\n  (define (rotate-string\
    \ s)\n    (if (empty? s)\n        \"\"\n        (string-append (string (rotate-char\
    \ (string-ref s 0)))\n                       (rotate-string (substring s 1)))))\n\
    \  (rotate-string s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (or (char=? c #\\a) (char=? c #\\A))\n          (if (char=? c\
    \ #\\a)\n              #\\c\n              #\\C)\n          (if (or (char=? c\
    \ #\\b) (char=? c #\\B))\n              (if (char=? c #\\b)\n                \
    \  #\\d\n                  #\\D)\n              (if (or (char=? c #\\c) (char=?\
    \ c #\\C))\n                  (if (char=? c #\\c)\n                      #\\e\n\
    \                      #\\E)\n                  (if (or (char=? c #\\d) (char=?\
    \ c #\\D))\n                      (if (char=? c #\\d)\n                      \
    \    #\\f\n                          #\\F)\n                      (if (or (char=?\
    \ c #\\e) (char=? c #\\E))\n                          (if (char=? c #\\e)\n  \
    \                            #\\g\n                              #\\G)\n     \
    \                     (if (or (char=? c #\\f) (char=? c #\\F))\n             \
    \                 (if (char=? c #\\f)\n                                  #\\h\n\
    \                                  #\\H)\n                              (if (or\
    \ (char=? c #\\g) (char=? c #\\G))\n                                  (if (char=?\
    \ c #\\g)\n                                      #\\i\n                      \
    \                #\\I)\n                                  (if (or (char=? c #\\\
    h) (char=? c #\\H))\n                                      (if (char=? c #\\h)\n\
    \                                          #\\j\n                            \
    \              #\\J)\n                                      (if (or (char=? c\
    \ #\\i) (char=? c #\\I))\n                                          (if (char=?\
    \ c #\\i)\n                                              #\\k\n              \
    \                                #\\K)\n                                     \
    \     (if (or (char=? c #\\j) (char=? c #\\J))\n                             \
    \   ", "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n      (cond\n\
    \        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c])))\n  (string-join (map rotate-char\
    \ (string-&gt;list s))))\n</code>\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list s)))\n", " \
    \ (string-append (string-append (substring s 0 1) (substring s 1 2))\n       \
    \          (substring s 2)))\n", "  (define (rotate s)\n    (string-append (substring\
    \ s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s\
    \ \"\")\n        \"\"\n        (string-append (string (rotate s))\n          \
    \             (encrypt-helper (substring s 1)))))\n  (encrypt-helper s))\n", " \
    \ (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n \
    \       [(= c #\\a) #\\c]\n        [(= c #\\b) #\\d]\n        [(= c #\\c) #\\\
    e]\n        [(= c #\\d) #\\f]\n        [(= c #\\e) #\\g]\n        [(= c #\\f)\
    \ #\\h]\n        [(= c #\\g) #\\i]\n        [(= c #\\h) #\\j]\n        [(= c #\\\
    i) #\\k]\n        [(= c #\\j) #\\l]\n        [(= c #\\k) #\\m]\n        [(= c\
    \ #\\l) #\\n]\n        [(= c #\\m) #\\o]\n        [(= c #\\n) #\\p]\n        [(=\
    \ c #\\o) #\\q]\n        [(= c #\\p) #\\r]\n        [(= c #\\q) #\\s]\n      \
    \  [(= c #\\r) #\\t]\n        [(= c #\\s) #\\u]\n        [(= c #\\t) #\\v]\n \
    \       [(= c #\\u) #\\w]\n        [(= c #\\v) #\\x]\n        [(= c #\\w) #\\\
    y]\n        [(= c #\\x) #\\z]\n        [(= c #\\y) #\\a]\n        [(= c #\\z)\
    \ #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (if (string-empty? s)\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (define (rotate-char c)\n    (if (char=?\
    \ c #\\z)\n        #\\a\n        (if (char=? c #\\y)\n            #\\z\n     \
    \       (char+ c 2))))\n  (define (rotate-string s)\n    (if (string=? s \"\"\
    )\n        \"\"\n        (string-append (string (rotate-char (string-ref s 0)))\n\
    \                       (rotate-string (substring s 1)))))\n  (rotate-string s))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char-alphabetic?\
    \ c)\n          (if (char-lower-case? c)\n              (if (> c #\\h)\n     \
    \             (char-downcase (char-upcase c))\n                  (char-upcase\
    \ c))\n              (if (> c #\\H)\n                  (char-downcase c)\n   \
    \               (char-upcase (char-downcase c))))\n          c))\n    (rotate-char-helper\
    \ (rotate-char-helper c)))\n  (string-map rotate-char s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper (rotate-char-helper\
    \ c)))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n   \
    \   [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (integer->char (+ (char->integer c)\
    \ (* 2 2))))\n  (string-map rotate-char s))\n", "  (define (rotate-char c)\n \
    \   (let ([c (string-&gt;char c)])\n      (if (char=? c #\\z)\n          #\\b\n\
    \          (if (char=? c #\\y)\n              #\\a\n              (char-&gt;string\
    \ (+ c 2))))))\n  (string-join (map rotate-char (string-&gt;list s))))\n</code>\n",
  "  (define (rotate n s)\n    (if (zero? n)\n        s\n        (rotate (- n 1) (string-append\
    \ (substring s -1) (substring s 0 -1)))))\n  (rotate 2 (rotate 2 s)))\n", "  (define\
    \ (rotate s)\n    (if (null? s)\n        '()\n        (cons (if (char-alphabetic?\
    \ (car s))\n                  (if (or (= (char-downcase (car s)) #\\a)\n     \
    \                     (= (char-downcase (car s)) #\\b))\n                    \
    \  (char-upcase (car s))\n                      (char-downcase (car s)))\n   \
    \               (car s))\n              (rotate (cdr s)))))\n  (rotate s))\n",
  "  (define (shift c)\n    (if (char=? c #\\a) #\\c\n        (if (char=? c #\\b)\
    \ #\\d\n            (if (char=? c #\\c) #\\e\n                (if (char=? c #\\\
    d) #\\f\n                    (if (char=? c #\\e) #\\g\n                      \
    \  (if (char=? c #\\f) #\\h\n                            (if (char=? c #\\g) #\\\
    i\n                                (if (char=? c #\\h) #\\j\n                \
    \                    (if (char=? c #\\i) #\\k\n                              \
    \          (if (char=? c #\\j) #\\l\n                                        \
    \    (if (char=? c #\\k) #\\m\n                                              \
    \  (if (char=? c #\\l) #\\n\n                                                \
    \    (if (char=? c #\\m) #\\o\n                                              \
    \          (if (char=? c #\\n) #\\p\n                                        \
    \                    (if (char=? c #\\o) #\\q\n                              \
    \                                  (if (char=? c #\\p) #\\r\n                \
    \                                                    (if (char=? c #\\q) #\\s\n\
    \                                                                        (if (char=?\
    \ c #\\r) #\\t\n                                                             \
    \               (if (char=? c #\\s) #\\u\n                                   \
    \                                             (if (char=? c #\\t) #\\v\n     \
    \                                                                            \
    \   (if (char=? c #\\u) #\\w\n                                               \
    \                                         (if (char=? c #\\v) #\\x\n         \
    \                                                                            \
    \       (if (char=? c #\\w) #\\y\n                                           \
    \                                                     (if (char=? c #\\x) #\\\
    z\n                                                                          \
    \                          (if (char=? c #\\y) #\\a\n                        \
    \                                                                            \
    \    (if (char=? c #\\z) #\\b\n                                              \
    \                                                              c))))))))))))))))))))))))))))))\n\
    \  (define (shift2 c)\n   ", "  (define (rotate-char c)\n    (let ([c (string-&gt;char\
    \ c)])\n      (if (&lt;= c #\\z)\n          (char-&gt;string (+ c 2))\n      \
    \    (char-&gt;string (+ c 2)))))\n  (string-join (map rotate-char (string-&gt;list\
    \ s))))\n</code>\nThe above code works for all the test cases except for the last\
    \ one.\n<code>&gt; (encrypt \"et\")\n\"ix\"\n</code>\nI am not sure why the last\
    \ test case is failing.\n\n\nA:\n\nThe problem is that you're not handling the\
    \ case when the character is <code>z</code> or <code>y</code>. You need to add\
    \ a special case for that, because if you add 2 to <code>z</code> you'll get <code>{</code>\
    \ and not <code>a</code>.\n<code>(define (rotate-char c)\n  (let ([c (string-&gt;char\
    \ c)])\n    (if (&lt;= c #\\z)\n        (if (= c #\\z)\n            (char-&gt;string\
    \ #\\a)\n            (if (= c #\\y)\n                (char-&gt;string #\\b)\n\
    \                (char-&gt;string (+ c 2))))\n        (char-&gt;string (+ c 2)))))\n\
    </code>\n", "  (string-append (substring s 2) (substring s 0 2)))\n", "  (define\
    \ (helper s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase\
    \ (car s))\n              (helper (cdr s)))))\n  (define (rotate s)\n    (if (empty?\
    \ s)\n        empty\n        (cons (char-downcase (car s))\n              (rotate\
    \ (cdr s)))))\n  (define (rotate-by-two s)\n    (if (empty? s)\n        empty\n\
    \        (cons (char-downcase (car s))\n              (rotate-by-two (cdr s)))))\n\
    \  (define (rotate-by-four s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (char-downcase (car s))\n              (rotate-by-four (cdr s)))))\n  (define\
    \ (rotate-by-six s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase\
    \ (car s))\n              (rotate-by-six (cdr s)))))\n  (define (rotate-by-eight\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (char-downcase (car s))\n\
    \              (rotate-by-eight (cdr s)))))\n  (define (rotate-by-ten s)\n   \
    \ (if (empty? s)\n        empty\n        (cons (char-downcase (car s))\n     \
    \         (rotate-by-ten (cdr s)))))\n  (define (rotate-by-twelve s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (char-downcase (car s))\n         \
    \     (rotate-by-twelve (cdr s)))))\n  (define (rotate-by-fourteen s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (char-downcase (car s))\n         \
    \     (rotate-by-fourteen (cdr s)))))\n  (define (rotate-by-sixteen s)\n    (if\
    \ (empty? s)\n        empty\n        (cons (char-downcase (car s))\n         \
    \     (rotate-by-", "  (define (rotate-char c)\n    (integer->char (+ (char->integer\
    \ c) (* 2 2))))\n  (define (rotate-string s)\n    (if (empty? s)\n        \"\"\
    \n        (string-append (string (rotate-char (string-ref s 0)))\n           \
    \            (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (define\
    \ (rotate s)\n    (cond [(empty? s) empty]\n          [(char=? (first s) #\\a)\
    \ (cons #\\c (rotate (rest s)))]\n          [(char=? (first s) #\\b) (cons #\\\
    d (rotate (rest s)))]\n          [(char=? (first s) #\\c) (cons #\\e (rotate (rest\
    \ s)))]\n          [(char=? (first s) #\\d) (cons #\\f (rotate (rest s)))]\n \
    \         [(char=? (first s) #\\e) (cons #\\g (rotate (rest s)))]\n          [(char=?\
    \ (first s) #\\f) (cons #\\h (rotate (rest s)))]\n          [(char=? (first s)\
    \ #\\g) (cons #\\i (rotate (rest s)))]\n          [(char=? (first s) #\\h) (cons\
    \ #\\j (rotate (rest s)))]\n          [(char=? (first s) #\\i) (cons #\\k (rotate\
    \ (rest s)))]\n          [(char=? (first s) #\\j) (cons #\\l (rotate (rest s)))]\n\
    \          [(char=? (first s) #\\k) (cons #\\m (rotate (rest s)))]\n         \
    \ [(char=? (first s) #\\l) (cons #\\n (rotate (rest s)))]\n          [(char=?\
    \ (first s) #\\m) (cons #\\o (rotate (rest s)))]\n          [(char=? (first s)\
    \ #\\n) (cons #\\p (rotate (rest s)))]\n          [(char=? (first s) #\\o) (cons\
    \ #\\q (rotate (rest s)))]\n          [(char=? (first s) #\\p) (cons #\\r (rotate\
    \ (rest s)))]\n          [(char=? (first s) #\\q) (cons #\\s (rotate (rest s)))]\n\
    \          [(char=? (first s) #\\r) (cons #\\t (rotate (rest s)))]\n         \
    \ [(char=?", "  (string-append (string-take s 2) (string-drop s 2)))\n", "  (define\
    \ (rotate n)\n    (if (= n 0)\n        s\n        (rotate (- n 1))\n        (string-append\
    \ (substring s (- n 1) n) (substring s 0 (- n 1)))))\n  (rotate 2))\n", "  (string-append\
    \ (string-append (substring s 0 2) (substring s 4 6)) (substring s 2 4)))\n",
  "  (string-map (lambda (c)\n                (if (char-alphabetic? c)\n         \
    \           (let* ([a (char-upcase c)]\n                           [n (char-&gt;integer\
    \ a)]\n                           [n (+ n (* 2 2))])\n                      (integer-&gt;char\
    \ (modulo n 26)))\n                    c))\n              s))\n", "  (let ([s\
    \ (string->list s)])\n    (map (lambda (x)\n           (let ([x (char->integer\
    \ x)])\n             (integer->char (+ x (* 2 2)))))\n         s)))\n", "  (string-append\
    \ (string-take s 2) (string-drop s 2)))\n", "  (define (rotate n)\n    (cond ((=\
    \ n 0) '())\n          ((= n 1) '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\\
    i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\\
    y #\\z))\n          ((= n 2) '(#\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\\
    l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\\
    b))\n          ((= n 3) '(#\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\\
    o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d))\n\
    \          ((= n 4) '(#\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d #\\e #\\f))\n  \
    \        ((= n 5) '(#\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h))\n  \
    \        ((= n 6) '(#\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\\
    v #\\w #\\x #\\y #\\z #", "  (define (rotate n s)\n    (string-append (substring\
    \ s n) (substring s 0 n)))\n  (rotate (* 2 2) s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (define (rotate-string-helper s)\n      (cond\n        [(empty? s) empty]\n\
    \        [else (cons (rotate-char (first s))\n                    (rotate-string-helper\
    \ (rest s)))]))\n    (rotate", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n\
    \            ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n    \
    \        ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n        \
    \    ((char=? c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=?\
    \ c #\\i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\\
    k) #\\m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\\
    o)\n            ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n \
    \           ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n     \
    \       ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n         \
    \   ((char=? c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=?\
    \ c #\\v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\\
    x) #\\z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\\
    b)))\n    (rotate-char-helper c))\n  (define (rotate-string s)\n    (cond ((null?\
    \ s) '())\n          (else (cons (rotate-char (car s)) (rotate-string (cdr s))))))\n\
    \  (list->string (rotate-string (string->list s))))\n", "  (string-map (lambda\
    \ (c)\n                (if (char-alphabetic? c)\n                    (let ([c\
    \ (char-downcase c)])\n                      (if (char-&gt;integer c)\n      \
    \                    (integer-&gt;char (+ (char-&gt;integer c) 2))\n         \
    \                 (integer-&gt;char (+ (char-&gt;integer c) 2))))\n          \
    \          c))\n              s))\n</code>\nI'm getting the following error:\n\
    <code>string-map: expects argument of type &lt;string-char-mapper&gt;; given:\
    \ #&lt;procedure&gt;\n</code>\nI'm not sure what I'm doing wrong. I'm new to Racket\
    \ and I'm not sure what this error means.\n\n\nA:\n\nThe <code>string-map</code>\
    \ function takes a function that takes a single character as an argument and returns\
    \ a character. You're passing a function that takes a single character and returns\
    \ a number.\nYou can fix this by wrapping the call to <code>integer-&gt;char</code>\
    \ in a call to <code>char-&gt;integer</code>:\n<code>(define (encrypt s)\n  (string-map\
    \ (lambda (c)\n                (if (char-alphabetic? c)\n                    (let\
    \ ([c (char-downcase c)])\n                      (if (char-&gt;integer c)\n  \
    \                        (char-&gt;integer (integer-&gt;char (+ (char-&gt;integer\
    \ c) 2)))\n                          (char-&gt;integer (integer-&gt;char (+ (char-&gt;integer\
    \ c) 2)))))\n                    c))\n              s))\n</code>\n", "  (define\
    \ (rotate-char c)\n    (let ((c (string-&gt;char c)))\n      (char-&gt;string\
    \ (+ c (* 2 2)))))\n  (string-join (map rotate-char (string-&gt;list s)) \"\"\
    ))\n", "  (define (encrypt-helper s i)\n    (if (= i (string-length s))\n    \
    \    \"\"\n        (string-append (string (char-downcase (+ (char-downcase (string-ref\
    \ s i)) 2)))\n                       (encrypt-helper s (+ i 1)))))\n  (encrypt-helper\
    \ s 0))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n \
    \     (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n\
    \        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond\n      [(string=? s \"\") \"\"]\n\
    \      [else (string-append (string (rotate-char (string-ref s 0)))\n        \
    \                   (rotate-string (substring s 1)))]))\n  (rotate-string s))\n",
  "  (define (rotate-char c)\n    (let ((c (string-&gt;char c)))\n      (char-&gt;string\
    \ (if (&gt;= c #\\a)\n                         (if (&lt;= c #\\x)\n          \
    \                   (+ c 2)\n                             (+ c 2))\n         \
    \                (if (&lt;= c #\\Z)\n                             (+ c 2)\n  \
    \                           (+ c 2))))))\n  (map rotate-char (string-&gt;list\
    \ s)))\n</code>\nI'm getting an error:\n<code>string-&gt;list: expects argument\
    \ of type &lt;string&gt;; given #&lt;procedure:rotate-char&gt;\n</code>\nI'm not\
    \ sure what I'm doing wrong.\n\n\nA:\n\nThe problem is that you're passing the\
    \ <code>rotate-char</code> procedure to <code>map</code>, instead of the string.\
    \ You need to call <code>rotate-char</code> with the string as argument, and then\
    \ pass the result to <code>map</code>.\n<code>(define (encrypt s)\n  (define (rotate-char\
    \ c)\n    (let ((c (string-&gt;char c)))\n      (char-&gt;string (if (&gt;= c\
    \ #\\a)\n                         (if (&lt;= c #\\x)\n                       \
    \      (+ c 2)\n                             (+ c 2))\n                      \
    \   (if (&lt;= c #\\Z)\n                             (+ c 2)\n               \
    \              (+ c 2))))))\n  (map rotate-char (string-&gt;list (rotate-char\
    \ s))))\n</code>\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (cons (rotate-char\
    \ (first s) 2)\n           (encrypt (rest s)))]))\n", "  (define (rotate-char\
    \ c)\n    (let ([c (string-&gt;char c)])\n      (if (char=? c #\\z)\n        \
    \  #\\a\n          (if (char=? c #\\y)\n              #\\b\n              (char-&gt;string\
    \ (+ c 2))))))\n  (string-join (map rotate-char (string-&gt;list s))))\n</code>\n",
  "  (define (rotate n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (string-ref\
    \ s n) (rotate (- n 1)))]))\n  (define (rotate-string s)\n    (cond\n      [(=\
    \ (string-length s) 0) '()]\n      [else (cons (string-ref s (+ (string-length\
    \ s) -1)) (rotate-string (substring s 0 (- (string-length s) 1))))]))\n  (define\
    \ (rotate-string-by-n s n)\n    (cond\n      [(= n 0) s]\n      [else (rotate-string-by-n\
    \ (rotate-string s) (- n 1))]))\n  (define (encrypt-string s)\n    (cond\n   \
    \   [(= (string-length s) 0) '()]\n      [else (cons (string-ref (rotate-string-by-n\
    \ (string->list \"abcdefghijklmnopqrstuvwxyz\") 2) (string-ref s 0)) (encrypt-string\
    \ (substring s 1)))]))\n  (list->string (encrypt-string s)))\n", "  (string-map\
    \ (lambda (c) (string-ref \"abcdefghijklmnopqrstuvwxyz\" (+ 2 (* 2 (string-index\
    \ \"abcdefghijklmnopqrstuvwxyz\" c))))) s))\n", "  (define (encrypt-helper s)\n\
    \    (if (empty? s)\n        '()\n        (cons (encrypt-char (first s))\n   \
    \           (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n \
    \     (if (char&lt;=? #\\a c #\\z)\n          (char-&gt;string (char+ c 2))\n\
    \          (char-&gt;string c))))\n  (string-join (map rotate-char (string-&gt;list\
    \ s)) \"\"))\n</code>\n", "  (define (rotate s)\n    (string-append (substring\
    \ s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s\
    \ \"\")\n        \"\"\n        (string-append (rotate s) (encrypt-helper (substring\
    \ s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=?\
    \ s \"\")\n        \"\"\n        (string-append (rotate s) (encrypt-helper (substring\
    \ s 1)))))\n  (encrypt-helper s))\n", "  (define (encrypt-helper s i)\n    (if\
    \ (= i (string-length s))\n        \"\"\n        (string-append (string (char-downcase\
    \ (+ (char-downcase (string-ref s i)) 2)))\n                       (encrypt-helper\
    \ s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=?\
    \ s \"\")\n        \"\"\n        (string-append (rotate s) (encrypt-helper (substring\
    \ s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate n)\n    (cond\n     \
    \ [(= n 0) #\\a]\n      [(= n 1) #\\b]\n      [(= n 2) #\\c]\n      [(= n 3) #\\\
    d]\n      [(= n 4) #\\e]\n      [(= n 5) #\\f]\n      [(= n 6) #\\g]\n      [(=\
    \ n 7) #\\h]\n      [(= n 8) #\\i]\n      [(= n 9) #\\j]\n      [(= n 10) #\\\
    k]\n      [(= n 11) #\\l]\n      [(= n 12) #\\m]\n      [(= n 13) #\\n]\n    \
    \  [(= n 14) #\\o]\n      [(= n 15) #\\p]\n      [(= n 16) #\\q]\n      [(= n\
    \ 17) #\\r]\n      [(= n 18) #\\s]\n      [(= n 19) #\\t]\n      [(= n 20) #\\\
    u]\n      [(= n 21) #\\v]\n      [(= n 22) #\\w]\n      [(= n 23) #\\x]\n    \
    \  [(= n 24) #\\y]\n      [(= n 25) #\\z]))\n  (define (rotate-string s)\n   \
    \ (cond\n      [(empty? s) empty]\n      [else (cons (rotate (char-&gt;integer\
    \ (car s))) (rotate-string (cdr s)))]))\n  (list-&gt;string (rotate-string (string-&gt;list\
    \ s))))\n</code>\nI'm not sure if I'm using the <code>cond</code> statement correctly.\
    \ I'm getting the error:\n<code>application: not a procedure;\n expected a procedure\
    \ that can be applied to arguments\n  given: #\\a\n  arguments...:\n   #\\h\n\
    </code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're not using <code>cond</code>\
    \ correctly. The first argument to each clause is a predicate, not a value.\n\
    <code>(define (rotate n)\n  (cond\n    [(=", "  (string-map (lambda (c)\n    \
    \            (let ((new-c (+ c (* 2 2))))\n                  (if (&gt; new-c 122)\n\
    \                      (- new-c 26)\n                    new-c)))\n          \
    \    s))\n</code>\n", "  (define (rotate-char c)\n    (cond\n      [(char=? c\
    \ #\\a) #\\c]\n      [(char=? c #\\b) #\\d]\n      [(char=? c #\\c) #\\e]\n  \
    \    [(char=? c #\\d) #\\f]\n      [(char=? c #\\e) #\\g]\n      [(char=? c #\\\
    f) #\\h]\n      [(char=? c #\\g) #\\i]\n      [(char=? c #\\h) #\\j]\n      [(char=?\
    \ c #\\i) #\\k]\n      [(char=? c #\\j) #\\l]\n      [(char=? c #\\k) #\\m]\n\
    \      [(char=? c #\\l) #\\n]\n      [(char=? c #\\m) #\\o]\n      [(char=? c\
    \ #\\n) #\\p]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\p) #\\r]\n  \
    \    [(char=? c #\\q) #\\s]\n      [(char=? c #\\r) #\\t]\n      [(char=? c #\\\
    s) #\\u]\n      [(char=? c #\\t) #\\v]\n      [(char=? c #\\u) #\\w]\n      [(char=?\
    \ c #\\v) #\\x]\n      [(char=? c #\\w) #\\y]\n      [(char=? c #\\x) #\\z]\n\
    \      [(char=? c #\\y) #\\a]\n      [(char=? c #\\z) #\\b]\n      [else c]))\n\
    \  (string-map rotate-char s))\n", "  (define (rotate n s)\n    (string-append\
    \ (substring s n) (substring s 0 n)))\n  (rotate (* 2 2) s))\n", "  (define (rotate-char\
    \ c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n   \
    \         #\\a\n            (integer->char (+ (char->integer c) 2)))))\n  (map\
    \ rotate-char (string->list s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n\
    \            ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n    \
    \        ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n        \
    \    ((char=? c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=?\
    \ c #\\i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\\
    k) #\\m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\\
    o)\n            ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n \
    \           ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n     \
    \       ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n         \
    \   ((char=? c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=?\
    \ c #\\v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\\
    x) #\\z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\\
    b)))\n    (rotate-char-helper c))\n  (define (rotate-string s)\n    (if (string=?\
    \ s \"\")\n        \"\"\n        (string-append (string (rotate-char (string-ref\
    \ s 0)))\n                       (rotate-string (substring s 1)))))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n   \
    \   (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n     \
    \         #\\d\n              (if (char=? c #\\c)\n                  #\\e\n  \
    \                (if (char=? c #\\d)\n                      #\\f\n           \
    \           (if (char=? c #\\e)\n                          #\\g\n            \
    \              (if (char=? c #\\f)\n                              #\\h\n     \
    \                         (if (char=? c #\\g)\n                              \
    \    #\\i\n                                  (if (char=? c #\\h)\n           \
    \                           #\\j\n                                      (if (char=?\
    \ c #\\i)\n                                          #\\k\n                  \
    \                        (if (char=? c #\\j)\n                               \
    \               #\\l\n                                              (if (char=?\
    \ c #\\k)\n                                                  #\\m\n          \
    \                                        (if (char=? c #\\l)\n               \
    \                                       #\\n\n                               \
    \                       (if (char=? c #\\m)\n                                \
    \                          #\\o\n                                            \
    \              (if (char=? c #\\n)\n                                         \
    \                     #\\p\n                                                 \
    \             (if (char=? c #\\o)\n                                          \
    \                        #\\q\n                                              \
    \                    (if (char=? c #\\p)\n                                   \
    \                                   #\\r\n                                   \
    \                                   (if (char=? c #\\q)\n                    \
    \                                                      #\\s\n                \
    \                                                          (if (char=? c #\\r)\n\
    \                                                                            \
    \  #\\t\n                                                                    \
    \          (if (char=? c #\\s)\n                                             \
    \                                     #\\u\n                                 \
    \                                                 (if (char=? c #\\t)\n      \
    \                                                                            \
    \    #\\v\n                                                                  \
    \                    (if (char=? c #\\u)\n                                   \
    \                                                       #\\w\n               \
    \                                                                           (if\
    \ (char=? c #\\v)\n                                                          \
    \                      ", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (or (= c #\\a) (= c #\\b))\n          (+ c 24)\n          (+ c\
    \ 2)))\n    (integer->char (rotate-char-helper (char->integer c))))\n  (define\
    \ (encrypt-helper s)\n    (if (empty? s)\n        empty\n        (cons (rotate-char\
    \ (first s))\n              (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper\
    \ (string->list s))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char c)])\n   \
    \   (char-&gt;string (+ c (* 2 2)))))\n  (string-join (map rotate-char (string-&gt;list\
    \ s)) \"\"))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (if (char=? c #\\z)\n          #\\b\n          (if (char=? c #\\y)\n  \
    \            #\\a\n              (char+ c 2))))\n    (rotate-char-helper c))\n\
    \  (map rotate-char (string->list s)))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\c]\n      \
    \  [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c\
    \ #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n\
    \        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (encrypt-helper\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s)) (encrypt-helper (rest s)))]))\n  (encrypt-helper s))\n", "  (define (rotate-char\
    \ c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n  (map rotate-char (string->list\
    \ s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n  \
    \    (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n \
    \       [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string\
    \ s))\n", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n\
    \    (string-join (map (lambda (c)\n                        (if (char-alphabetic?\
    \ c)\n                            (list-ref alphabet (+ (modulo (- (char->integer\
    \ c) 97) 26) 8))\n                            c))\n                      (string->list\
    \ s))\n                 \"\")))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
