name: HumanEval_28_concatenate
language: rkt
prompt: "#lang racket\n\n;; Concatenate list of strings into a single string\n;; >>>\
  \ (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"c\"))\n\
  ;; \"abc\"\n(define (concatenate strings)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
  \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
  \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\" \"\
  z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
completions: ["  (apply string-append strings))\n", "  (cond\n    [(empty? strings)\
    \ \"\" ]\n    [else (string-append (first strings) (concatenate (rest strings)))]))\n",
  "  (cond\n    [(empty? strings) \"\" ]\n    [else (string-append (first strings)\
    \ (concatenate (rest strings)))]))\n", "  (string-append (car strings) (concatenate\
    \ (cdr strings))))\n", "  (if (empty? strings)\n      \"\"\n      (string-append\
    \ (first strings) (concatenate (rest strings)))))\n", "  (apply string-append\
    \ strings))\n", "  (apply string-append strings))\n", "  (apply string-append\
    \ strings))\n", "  (apply string-append strings))\n", "  (apply string-append\
    \ strings))\n", "  (cond\n    [(empty? strings) \"\"]\n    [else (string-append\
    \ (first strings) (concatenate (rest strings)))]))\n", "  (cond [(empty? strings)\
    \ \"\"]\n        [else (string-append (first strings) (concatenate (rest strings)))]))\n",
  "  (apply string-append strings))\n", "  (apply string-append strings))\n", "  (apply\
    \ string-append strings))\n", "  (cond\n    [(empty? strings) \"\" ]\n    [else\
    \ (string-append (first strings) (concatenate (rest strings)))]))\n", "  (cond\n\
    \    [(empty? strings)\n     \"\"\n     ]\n    [else\n     (string-append (first\
    \ strings) (concatenate (rest strings)))]))\n", "  (apply string-append strings))\n",
  "  (apply string-append strings))\n", "  (apply string-append strings))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
