name: HumanEval_97_multiply
language: rkt
prompt: "#lang racket\n\n;; Complete the function that takes two integers and returns\
  \ \n;; the product of their unit digits.\n;; Assume the input is always valid.\n\
  ;; Examples:\n;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;; 72\n\
  ;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20\n(define (multiply\
  \ a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n\
  \    (check-equal? (candidate 148 412) 16)\n    (check-equal? (candidate 19 28)\
  \ 72)\n    (check-equal? (candidate 2020 1851) 0)\n    (check-equal? (candidate\
  \ 14 -15) 20)\n    (check-equal? (candidate 76 67) 42)\n    (check-equal? (candidate\
  \ 17 27) 49)\n    (check-equal? (candidate 0 1) 0)\n    (check-equal? (candidate\
  \ 0 0) 0)\n))\n\n(test-humaneval)"
completions: ["  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n</code>\n", "  (modulo (* (modulo\
    \ a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (define (unit-digit n)\n    (modulo n 10))\n  (define\
    \ (product a b)\n    (* (unit-digit a) (unit-digit b)))\n  (product a b))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n",
  "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10)\
    \ (modulo b 10)) 10))\n", '  (modulo (modulo a 10) (modulo b 10)))', "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (modulo (* (modulo a 10) (modulo\
    \ b 10)) 10))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
