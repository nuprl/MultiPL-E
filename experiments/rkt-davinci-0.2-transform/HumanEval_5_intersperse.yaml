name: HumanEval_5_intersperse
language: rkt
prompt: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
  \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
  ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse numbers\
  \ delimeter)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n\
  \    (check-equal? (candidate (list ) 7) (list ))\n    (check-equal? (candidate\
  \ (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2))\n    (check-equal? (candidate (list 2\
  \ 2 2) 2) (list 2 2 2 2 2))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers))\
    \ numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse (rest\
    \ numbers) delimeter)))]))\n", "  (cond [(empty? numbers) empty]\n        [(empty?\
    \ (rest numbers)) numbers]\n        [else (cons (first numbers)\n            \
    \        (cons delimeter\n                          (intersperse (rest numbers)\
    \ delimeter)))]))\n", "  (cond [(empty? numbers) empty]\n        [(empty? (rest\
    \ numbers)) numbers]\n        [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n", "  (cond\n    [(empty? numbers) empty]\n\
    \    [(empty? (rest numbers)) numbers]\n    [else (cons (first numbers) (cons\
    \ delimeter (intersperse (rest numbers) delimeter)))]))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(empty? (rest numbers)) numbers]\n    [else (cons (first\
    \ numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n", " \
    \ (cond\n    [(empty? numbers) (list)]\n    [(empty? (rest numbers)) (list (first\
    \ numbers))]\n    [else (cons (first numbers) (cons delimeter (intersperse (rest\
    \ numbers) delimeter)))]))\n", "  (if (null? numbers)\n      (list)\n      (append\
    \ (list (car numbers))\n              (list delimeter)\n              (intersperse\
    \ (cdr numbers) delimeter))))\n", "  (cond [(empty? numbers) empty]\n        [(empty?\
    \ (rest numbers)) numbers]\n        [else (cons (first numbers) (cons delimeter\
    \ (intersperse (rest numbers) delimeter)))]))\n", "  (cond\n    [(empty? numbers)\
    \ empty]\n    [(empty? (rest numbers)) numbers]\n    [else (cons (first numbers)\
    \ (cons delimeter (intersperse (rest numbers) delimeter)))]))\n", "  (cond\n \
    \   [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n    [else\
    \ (cons (first numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n",
  "  (if (null? numbers)\n      (list)\n      (cons (car numbers)\n            (cons\
    \ delimeter\n                  (intersperse (cdr numbers) delimeter)))))\n", " \
    \ (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n\
    \    [else (cons (first numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n",
  "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n\
    \    [else (cons (first numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n",
  "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n\
    \    [else (cons (first numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n",
  "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n\
    \    [else (cons (first numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n",
  "  (cond\n    [(empty? numbers) (list)]\n    [(empty? (rest numbers)) (list (first\
    \ numbers))]\n    [else (cons (first numbers) (cons delimeter (intersperse (rest\
    \ numbers) delimeter)))]))\n", "  (cond\n    [(empty? numbers) empty]\n    [(empty?\
    \ (rest numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n", "  (cond\n    [(empty? numbers) empty]\n\
    \    [(empty? (rest numbers)) numbers]\n    [else (cons (first numbers) (cons\
    \ delimeter (intersperse (rest numbers) delimeter)))]))\n", "  (if (null? numbers)\n\
    \      (list)\n      (cons (car numbers)\n            (cons delimeter\n      \
    \            (intersperse (cdr numbers) delimeter)))))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(empty? (rest numbers)) numbers]\n    [else (cons (first\
    \ numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
