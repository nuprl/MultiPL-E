name: HumanEval_37_sort_even
language: rkt
prompt: "#lang racket\n\n;; This function takes a list l and returns a list l' such\
  \ that\n;; l' is identical to l in the odd indicies, while its values at the even\
  \ indicies are equal\n;; to the values of the even indicies of l, but sorted.\n\
  ;; >>> (sort_even (list 1 2 3))\n;; (list 1 2 3)\n;; >>> (sort_even (list 5 6 3\
  \ 4))\n;; (list 3 6 5 4)\n(define (sort_even l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_even))\n\
  \    (check-equal? (candidate (list 1 2 3)) (list 1 2 3))\n    (check-equal? (candidate\
  \ (list 5 3 -5 2 -3 3 9 0 123 1 -10)) (list -10 3 -5 2 -3 3 5 0 9 1 123))\n    (check-equal?\
  \ (candidate (list 5 8 -12 4 23 2 3 11 12 -10)) (list -12 8 3 4 5 2 12 11 23 -10))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (empty? l)\n      empty\n      (if (empty? (rest l))\n      \
    \    l\n          (cons (first l)\n                (sort_even (cons (min (second\
    \ l) (third l))\n                                 (cons (max (second l) (third\
    \ l))\n                                       (rest (rest l)))))))))\n", "  (cond\n\
    \    [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else (cons (first l)\
    \ (sort_even (sort (rest (rest l)))))]))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(empty? (rest l)) l]\n    [else (cons (first l) (sort_even (sort (rest (rest\
    \ l)))))]))\n", "  (cond [(empty? l) empty]\n        [(empty? (rest l)) l]\n \
    \       [else (list (first l) (sort (rest (rest l))) (first (rest l)))]))\n",
  "  (if (null? l)\n      '()\n      (cons (car l)\n            (if (null? (cdr l))\n\
    \                '()\n                (sort (cdr l) <)))))\n", "  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) l]\n    [else (cons (first l) (sort_even (sort\
    \ (rest (rest l)))))]))\n", "  (cond\n    [(empty? l) empty]\n    [(empty? (rest\
    \ l)) l]\n    [else (cons (first l) (sort_even (sort (rest (rest l)))))]))\n",
  "  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else (cons (first\
    \ l) (sort_even (cons (sort (rest (rest l))) (rest l))))]))\n", "  (cond\n   \
    \ [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else (cons (first l) (sort_even\
    \ (sort (rest (rest l)))))]))\n", "  (cond\n    [(empty? l) empty]\n    [(empty?\
    \ (rest l)) l]\n    [else (cons (first l) (sort_even (sort (rest (rest l)))))]))\n",
  "  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else\n     (cons\
    \ (first l)\n           (sort_even (cons (sort (rest l)) (rest (rest l))))]))\n",
  "  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else\n     (cons\
    \ (first l)\n           (sort_even (cons (sort (rest l)) (rest (rest l))))]))\n",
  "  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else (cons (first\
    \ l) (sort_even (cons (sort (rest l)) (rest (rest l)))))]))\n", "  (cond\n   \
    \ [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else\n     (cons (first\
    \ l)\n           (sort_even (cons (sort (rest l)) (rest (rest l))))]))\n", " \
    \ (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else (cons (first\
    \ l) (sort_even (sort (rest (rest l)))))]))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(empty? (rest l)) l]\n    [else (cons (first l) (sort_even (sort (rest (rest\
    \ l)))))]))\n", "  (if (null? l)\n      '()\n      (cons (car l)\n           \
    \ (if (null? (cdr l))\n                '()\n                (sort (cdr (cdr l))\n\
    \                      (lambda (x y) (< x y)))))))\n", "  (if (null? l)\n    \
    \  '()\n      (cons (car l)\n            (if (null? (cdr l))\n               \
    \ '()\n                (sort (cdr (cdr l))\n                      <)))))\n", " \
    \ (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) l]\n    [else (cons (first\
    \ l) (sort_even (sort (rest (rest l)))))]))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(empty? (rest l)) l]\n    [else (cons (first l) (sort_even (sort (rest (rest\
    \ l)))))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
