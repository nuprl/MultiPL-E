name: HumanEval_108_count_nums
language: rkt
prompt: "#lang racket\n\n;; Write a function count_nums which takes an array of integers\
  \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a\
  \ number is negative, then its first signed digit will be negative:\n;; e.g. -123\
  \ has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums\
  \ (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums\
  \ arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1\
  \ -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
  \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
  \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
  \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
  \ 1)) 1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) 0]\n    [else\n     (if (> (sum_digits (first\
    \ arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n         (count_nums (rest\
    \ arr)))]))\n", "  (cond [(empty? arr) 0]\n        [else\n         (if (sum_digits\
    \ (first arr))\n             (+ 1 (count_nums (rest arr)))\n             (count_nums\
    \ (rest arr)))]))\n", "  (define (sum_digits n)\n    (cond\n      [(< n 0) (+\
    \ (modulo n 10) (sum_digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else\
    \ (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_iter\
    \ arr count)\n    (cond\n      [(empty? arr) count]\n      [(> (sum_digits (first\
    \ arr)) 0) (count_nums_iter (rest arr) (+ count 1))]\n      [else (count_nums_iter\
    \ (rest arr) count)]))\n  (count_nums_iter arr 0))\n", "  (cond [(empty? arr)\
    \ 0]\n        [else (+ (if (sum_digits (first arr)) 1 0)\n                 (count_nums\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (sum-digits\
    \ (first arr))\n         (+ 1 (count_nums (rest arr)))\n         (count_nums (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (sum_digits\
    \ (first arr))\n         (+ 1 (count_nums (rest arr)))\n         (count_nums (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (positive?\
    \ (sum-digits (first arr)))\n         (+ 1 (count_nums (rest arr)))\n        \
    \ (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n\
    \     (if (sum_digits (first arr))\n         (+ 1 (count_nums (rest arr)))\n \
    \        (count_nums (rest arr)))]))\n", "  (define (sum_digits n)\n    (cond\n\
    \      [(zero? n) 0]\n      [(negative? n) (+ (sum_digits (abs n)) (remainder\
    \ n 10))]\n      [else (+ (sum_digits (quotient n 10)) (remainder n 10))]))\n\
    \  (define (count_nums_helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr) (+ count\
    \ 1))]\n      [else (count_nums_helper (rest arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (sum_digits\
    \ (first arr))\n         (+ 1 (count_nums (rest arr)))\n         (count_nums (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else (+ (if (> (sum_digits\
    \ (first arr)) 0) 1 0)\n             (count_nums (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [else\n     (if (sum_digits (first arr))\n        \
    \ (+ 1 (count_nums (rest arr)))\n         (count_nums (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [else\n     (cond\n       [(> (sum_digits (first arr))\
    \ 0)\n        (+ 1 (count_nums (rest arr)))]\n       [else\n        (count_nums\
    \ (rest arr))])]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (positive?\
    \ (sum_digits (first arr)))\n         (+ 1 (count_nums (rest arr)))\n        \
    \ (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n\
    \     (if (> (sum-digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [else\n     (if (sum_digits (first arr))\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n", "  (define (sum_digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n\
    \  (define (count_nums_helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum_digits (first arr)) 0) (count_nums_helper (rest arr) (+ count\
    \ 1))]\n      [else (count_nums_helper (rest arr) count)]))\n  (count_nums_helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (> (sum-digits\
    \ (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n         (count_nums\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (> (sum_digits\
    \ (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n         (count_nums\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (not\
    \ (zero? (sum-digits (first arr))))\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
