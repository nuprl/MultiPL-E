name: HumanEval_128_prod_signs
language: rkt
prompt: "#lang racket\n\n;; You are given an array arr of integers and you need to\
  \ return\n;; sum of magnitudes of integers multiplied by product of all signs\n\
  ;; of each number in the array, represented by 1, -1 or 0.\n;; Note: return None\
  \ for empty arr.\n;; Example:\n;; >>> (prod_signs (list 1 2 2 -4))\n;; 9\n;; >>>\
  \ (prod_signs (list 0 1))\n;; 0\n;; >>> (prod_signs (list ))\n;; #f\n(define (prod_signs\
  \ arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prod_signs))\n\
  \    (check-equal? (candidate (list 1 2 2 -4)) -9)\n    (check-equal? (candidate\
  \ (list 0 1)) 0)\n    (check-equal? (candidate (list 1 1 1 2 3 -1 1)) -10)\n   \
  \ (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list 2 4\
  \ 1 2 -1 -1 9)) 20)\n    (check-equal? (candidate (list -1 1 -1 1)) 4)\n    (check-equal?\
  \ (candidate (list -1 1 1 1)) -4)\n    (check-equal? (candidate (list -1 1 1 0))\
  \ 0)\n))\n\n(test-humaneval)"
completions: ["  (if (null? arr)\n      #f\n      (let loop ((arr arr)\n         \
    \        (prod 1)\n                 (sum 0))\n        (if (null? arr)\n      \
    \      (* prod sum)\n            (let ((x (car arr)))\n              (cond ((>\
    \ x 0)\n                     (loop (cdr arr)\n                           (* prod\
    \ 1)\n                           (+ sum x)))\n                    ((< x 0)\n \
    \                    (loop (cdr arr)\n                           (* prod -1)\n\
    \                           (+ sum (- x))))\n                    (else\n     \
    \                (loop (cdr arr)\n                           (* prod 0)\n    \
    \                       (+ sum 0)))))))))\n", "  (cond\n    [(empty? arr) #f]\n\
    \    [(empty? (rest arr)) (abs (first arr))]\n    [else (* (signum (first arr))\
    \ (prod_signs (rest arr)))]))\n", "  (cond\n    [(empty? arr) #f]\n    [(= (length\
    \ arr) 1) (abs (first arr))]\n    [else (* (prod_signs (rest arr)) (sign (first\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (abs\
    \ (car arr))]\n    [else (* (abs (car arr)) (prod_signs (cdr arr)))]))\n", " \
    \ (if (null? arr)\n      #f\n      (let* ([signs (map (lambda (x) (if (zero? x)\
    \ 0 (if (> x 0) 1 -1))) arr)]\n             [sign-prod (apply * signs)]\n    \
    \         [magnitudes (map abs arr)])\n        (apply + (map * magnitudes signs)))))\n",
  "  (if (null? arr)\n      #f\n      (let ([signs (map (lambda (x) (if (zero? x)\
    \ 0 (if (> x 0) 1 -1))) arr)])\n        (apply * (map abs arr))\n        (apply\
    \ * signs))))\n", "  (if (empty? arr)\n      #f\n      (let ([signs (map abs arr)])\n\
    \        (apply * (map signum arr))\n        (apply + signs))))\n", "  (if (null?\
    \ arr)\n      #f\n      (let ((signs (map (lambda (x)\n                      \
    \    (if (zero? x)\n                              0\n                        \
    \      (if (< x 0)\n                                  -1\n                   \
    \               1)))\n                        arr)))\n        (let ((magnitudes\
    \ (map abs arr)))\n          (let ((product (apply * signs)))\n            (apply\
    \ + (map * magnitudes signs)))))))\n", "  (if (null? arr)\n      #f\n      (let\
    \ ([prod (apply * (map (lambda (x) (if (zero? x) 0 (if (> x 0) 1 -1))) arr))])\n\
    \        (apply + (map (lambda (x) (abs x)) arr))\n        (* prod (apply + (map\
    \ (lambda (x) (abs x)) arr))))))\n", "  (if (null? arr)\n      #f\n      (let\
    \ ([signs (map (lambda (x) (if (zero? x) 0 (if (> x 0) 1 -1))) arr)])\n      \
    \  (let ([magnitudes (map abs arr)])\n          (let ([prod (apply * signs)])\n\
    \            (apply + (map * magnitudes signs)))))))\n", "  (if (null? arr)\n\
    \      #f\n      (let ([signs (map (lambda (x)\n                          (if\
    \ (zero? x)\n                              0\n                              (if\
    \ (< x 0)\n                                  -1\n                            \
    \      1)))\n                        arr)])\n        (let ([magnitudes (map abs\
    \ arr)])\n          (apply * signs)\n          (apply + magnitudes)))))\n", " \
    \ (if (null? arr)\n      #f\n      (let loop ([arr arr] [prod 1])\n        (if\
    \ (null? arr)\n            (* (apply + (map abs arr)) prod)\n            (loop\
    \ (cdr arr) (* prod (signum (car arr))))))))\n", "  (if (null? arr)\n      #f\n\
    \      (let ([signs (map (lambda (x) (if (zero? x) 0 (if (> x 0) 1 -1))) arr)])\n\
    \        (apply * (map abs arr))\n        (apply * signs))))\n", "  (if (null?\
    \ arr)\n      #f\n      (let ([prod (apply * (map (lambda (x) (if (zero? x) 0\
    \ (if (> x 0) 1 -1))) arr))])\n        (apply + (map (lambda (x) (abs x)) arr)))))\n",
  "  (if (null? arr)\n      #f\n      (let ([signs (map (lambda (x)\n            \
    \              (if (zero? x)\n                              0\n              \
    \                (if (< x 0)\n                                  -1\n         \
    \                         1)))\n                        arr)])\n        (let ([magnitudes\
    \ (map abs arr)])\n          (let ([sign-prod (apply * signs)])\n            (let\
    \ ([mag-sum (apply + magnitudes)])\n              (* sign-prod mag-sum)))))))\n",
  "  (if (null? arr)\n      #f\n      (let* ([signs (map (lambda (x) (if (zero? x)\
    \ 0 (if (> x 0) 1 -1))) arr)]\n             [magnitudes (map abs arr)]\n     \
    \        [prod (apply * signs)]\n             [sum (apply + magnitudes)])\n  \
    \      (* prod sum))))\n", "  (if (null? arr)\n      #f\n      (let ((signs (map\
    \ (lambda (x) (if (zero? x) 0 (if (> x 0) 1 -1))) arr)))\n        (apply * (map\
    \ abs arr))\n        (apply * signs))))\n", "  (if (null? arr)\n      #f\n   \
    \   (let ([signs (map (lambda (x) (if (zero? x) 0 (if (> x 0) 1 -1))) arr)])\n\
    \        (apply * (map abs arr))\n        (apply * signs))))\n", "  (cond\n  \
    \  [(empty? arr) #f]\n    [(= (length arr) 1) (abs (first arr))]\n    [else\n\
    \     (* (prod_signs (rest arr))\n        (signum (first arr))\n        (abs (first\
    \ arr)))]))\n", "  (if (null? arr)\n      #f\n      (let ([signs (map (lambda\
    \ (x) (if (> x 0) 1 -1)) arr)])\n        (let ([magnitudes (map abs arr)])\n \
    \         (let ([prod (apply * signs)])\n            (apply + (map * magnitudes\
    \ signs)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
