name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> (mean_absolute_deviation\
  \ (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (average (absolute-differences-from-mean numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define mean (mean numbers))\n  (define absolute-differences\
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute-differences))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-deviation number)\n    (abs (- number (mean numbers))))\n  (define\
    \ (absolute-deviations numbers)\n    (map absolute-deviation numbers))\n  (/ (apply\
    \ + (absolute-deviations numbers)) (length numbers)))\n", "  (define mean (mean\
    \ numbers))\n  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (mean\
    \ diffs))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean\
    \ numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute-deviation-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (define (absolute-deviations-from-mean\
    \ numbers)\n    (map absolute-deviation-from-mean numbers))\n  (define (mean-absolute-deviation\
    \ numbers)\n    (/ (apply + (absolute-deviations-from-mean numbers))\n       (length\
    \ numbers)))\n  (mean-absolute-deviation numbers))\n", "  (define (absolute-difference\
    \ x)\n    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x\
    \ (mean numbers))))\n  (mean (map absolute-difference numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute-differences (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute-differences))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean_absolute_deviation_iter (cdr numbers)\n                              \
    \        (+ sum (abs (- (car numbers) (/ sum count))))\n                     \
    \                 (+ count 1))))\n  (mean_absolute_deviation_iter numbers 0 0))\n",
  "  (define (mean-of-numbers numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-deviation-from-mean number)\n    (abs (- number (mean-of-numbers\
    \ numbers))))\n  (define (absolute-deviations-from-mean numbers)\n    (map absolute-deviation-from-mean\
    \ numbers))\n  (define (mean-of-absolute-deviations numbers)\n    (/ (apply +\
    \ (absolute-deviations-from-mean numbers))\n       (length numbers)))\n  (mean-of-absolute-deviations\
    \ numbers))\n", "  (define (abs-diff x)\n    (if (&lt; x (mean numbers))\n   \
    \     (- (mean numbers) x)\n        (- x (mean numbers))))\n  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (abs-diffs numbers)\n\
    \    (map abs-diff numbers))\n  (/ (apply + (abs-diffs numbers)) (length numbers)))\n",
  "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define\
    \ (abs-diff x)\n    (if (&lt; x (mean numbers))\n        (- (mean numbers) x)\n\
    \        (- x (mean numbers))))\n  (define (abs-diff-list lst)\n    (if (null?\
    \ lst)\n        '()\n        (cons (abs-diff (car lst)) (abs-diff-list (cdr lst)))))\n\
    \  (define (mean-abs-diff lst)\n    (/ (sum (abs-diff-list lst)) (length lst)))\n\
    \  (mean-abs-diff numbers))\n</code>\n", "  (define (average numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (define (absolute-difference number)\n\
    \    (abs (- number (average numbers))))\n  (define (absolute-differences numbers)\n\
    \    (map absolute-difference numbers))\n  (define (mean-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences numbers)) (length numbers)))\n\
    \  (mean-absolute-differences numbers))\n", "  (define (mean numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (define\
    \ (mean_absolute_deviation_helper numbers sum mean)\n    (if (null? numbers)\n\
    \        (/ sum (length numbers))\n        (mean_absolute_deviation_helper (cdr\
    \ numbers)\n                                        (+ sum (abs (- (car numbers)\
    \ mean)))\n                                        mean)))\n  (mean_absolute_deviation_helper\
    \ numbers 0 (/ (apply + numbers) (length numbers))))\n", "  (let ([mean (mean\
    \ numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n", " \
    \ (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (average (absolute-differences-from-mean numbers)))\n", "  (define (absolute-value\
    \ x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (mean-absolute-deviation-helper\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean-absolute-deviation-helper (cdr numbers)\n                            \
    \            (+ sum (absolute-value (- (car numbers) (/ sum count))))\n      \
    \                                  (+ count 1))))\n  (mean-absolute-deviation-helper\
    \ numbers 0 0))\n", "  (define (abs-diff x)\n    (if (< x (mean numbers))\n  \
    \      (- (mean numbers) x)\n        (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
