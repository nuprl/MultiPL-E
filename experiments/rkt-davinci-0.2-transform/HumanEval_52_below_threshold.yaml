name: HumanEval_52_below_threshold
language: rkt
prompt: "#lang racket\n\n;; Return True if all numbers in the list l are below threshold\
  \ t.\n;; >>> (below_threshold (list 1 2 4 10) 100)\n;; #t\n;; >>> (below_threshold\
  \ (list 1 20 4 10) 5)\n;; #f\n(define (below_threshold l t)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate below_threshold))\n\
  \    (check-equal? (candidate (list 1 2 4 10) 100) #t)\n    (check-equal? (candidate\
  \ (list 1 20 4 10) 5) #f)\n    (check-equal? (candidate (list 1 20 4 10) 21) #t)\n\
  \    (check-equal? (candidate (list 1 20 4 10) 22) #t)\n    (check-equal? (candidate\
  \ (list 1 8 4 10) 11) #t)\n    (check-equal? (candidate (list 1 8 4 10) 10) #f)\n\
  ))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold\
    \ (rest l) t)]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first\
    \ l) t) (below_threshold (rest l) t)]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold\
    \ (rest l) t)]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first\
    \ l) t) (below_threshold (rest l) t)]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold\
    \ (rest l) t)]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first\
    \ l) t) (below_threshold (rest l) t)]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold\
    \ (rest l) t)]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first\
    \ l) t) (below_threshold (rest l) t)]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(> (first l) t) #f]\n\
    \    [else (below_threshold (rest l) t)]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(< (first l) t) (below_threshold (rest l) t)]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(< (first l) t) (below_threshold (rest l) t)]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(< (first l) t) (below_threshold\
    \ (rest l) t)]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
