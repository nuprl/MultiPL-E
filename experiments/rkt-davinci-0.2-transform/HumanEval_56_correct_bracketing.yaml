name: HumanEval_56_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"<\" and \">\".\n;; return True\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing\
  \ \"<\")\n;; #f\n;; >>> (correct_bracketing \"<>\")\n;; #t\n;; >>> (correct_bracketing\
  \ \"<<><>>\")\n;; #t\n;; >>> (correct_bracketing \"><<>\")\n;; #f\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"<>\") #t)\n    (check-equal? (candidate \"<<><>>\"\
  ) #t)\n    (check-equal? (candidate \"<><><<><>><>\") #t)\n    (check-equal? (candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") #t)\n    (check-equal? (candidate \"<<<><>>>>\"\
  ) #f)\n    (check-equal? (candidate \"><<>\") #f)\n    (check-equal? (candidate\
  \ \"<\") #f)\n    (check-equal? (candidate \"<<<<\") #f)\n    (check-equal? (candidate\
  \ \">\") #f)\n    (check-equal? (candidate \"<<>\") #f)\n    (check-equal? (candidate\
  \ \"<><><<><>><>><<>\") #f)\n    (check-equal? (candidate \"<><><<><>><>>><>\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (if\
    \ (string=? (last brackets) \">\")\n         (correct_bracketing (substring brackets\
    \ 1 (- (string-length brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond ((empty?\
    \ brackets) (= count 0))\n          ((char=? (first brackets) #\\<) (helper (rest\
    \ brackets) (+ count 1)))\n          ((char=? (first brackets) #\\>) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1))))))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond [(empty? brackets) (= count 0)]\n       \
    \   [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n  \
    \        [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (if (string=? (last\
    \ brackets) \">\")\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (let loop ([brackets brackets]\
    \ [count 0])\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first\
    \ brackets) #\\<) (loop (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\>) (loop (rest brackets) (- count 1))]\n          [else (error\
    \ \"invalid input\")])))\n", "  (define (helper brackets count)\n    (cond\n \
    \     [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\"\
    ) (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (and (equal? (first (rest brackets))\
    \ \">\")\n          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond ((empty? brackets) (= count 0))\n\
    \          ((char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1)))\n\
    \          ((char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1))))))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty?\
    \ (rest brackets)) #f]\n    [(equal? (first brackets) \"<\")\n     (if (equal?\
    \ (first (rest brackets)) \">\")\n         (correct_bracketing (rest (rest brackets)))\n\
    \         (correct_bracketing (rest brackets)))]\n    [(equal? (first brackets)\
    \ \">\")\n     (if (equal? (first (rest brackets)) \"<\")\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         (correct_bracketing (rest brackets)))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (cond\n       [(empty?\
    \ (rest brackets)) #f]\n       [(string=? (first (rest brackets)) \">\")\n   \
    \     (correct_bracketing (rest (rest brackets)))]\n       [else (correct_bracketing\
    \ (rest brackets))])]\n    [else (correct_bracketing (rest brackets))]))\n", " \
    \ (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \"<\")\n\
    \     (if (string=? (last brackets) \">\")\n         (correct_bracketing (substring\
    \ brackets 1 (- (string-length brackets) 1)))\n         #f)]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
