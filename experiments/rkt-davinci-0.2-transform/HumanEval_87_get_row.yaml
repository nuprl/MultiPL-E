name: HumanEval_87_get_row
language: rkt
prompt: "#lang racket\n\n;; You are given a 2 dimensional data, as a nested lists,\n\
  ;; which is similar to matrix, however, unlike matrices,\n;; each row may contain\
  \ a different number of columns.\n;; Given lst, and integer x, find integers x in\
  \ the list,\n;; and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n\
  ;; each tuple is a coordinate - (row, columns), starting with 0.\n;; Sort coordinates\
  \ initially by rows in ascending order.\n;; Also, sort coordinates of the row by\
  \ columns in descending order.\n;; Examples:\n;; >>> (get_row (list (list 1 2 3\
  \ 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1)\n;; (list (list 0 0) (list 1\
  \ 4) (list 1 0) (list 2 5) (list 2 0))\n;; >>> (get_row (list ) 1)\n;; (list )\n\
  ;; >>> (get_row (list (list ) (list 1) (list 1 2 3)) 3)\n;; (list (list 2 2))\n\
  (define (get_row lst x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list\
  \ 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list\
  \ 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list\
  \ (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)))\n    (check-equal?\
  \ (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list\
  \ 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list\
  \ (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list\
  \ 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)))\n    (check-equal? (candidate\
  \ (list ) 1) (list ))\n    (check-equal? (candidate (list (list 1)) 2) (list ))\n\
  \    (check-equal? (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list\
  \ 2 2)))\n))\n\n(test-humaneval)"
completions: ["  (sort (for/list ([row (in-list lst)]\n                   [col (in-list\
    \ row)])\n        (when (= x col)\n          (list (length lst) col)))\n     \
    \   <))\n", "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list\
    \ row)])\n         (if (= x col)\n             (list (list (length lst) col)\n\
    \                   (list (length row) col))))\n        <))\n", "  (sort (filter\
    \ (lambda (coord)\n                  (equal? x (list-ref (list-ref lst (car coord))\
    \ (cdr coord))))\n                (for/list ([i (in-range (length lst))]\n   \
    \                        [j (in-range (length (list-ref lst i)))])\n         \
    \         (list i j)))\n        (lambda (coord1 coord2)\n          (cond\n   \
    \         [(< (car coord1) (car coord2)) #t]\n            [(> (car coord1) (car\
    \ coord2)) #f]\n            [(> (cdr coord1) (cdr coord2)) #t]\n            [(<\
    \ (cdr coord1) (cdr coord2)) #f]))))\n", "  (define (get_row_helper lst x acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get_row_helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (get_row_helper (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper\
    \ lst x (list))\n        (lambda (lst1 lst2)\n          (cond\n            [(<\
    \ (first lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n\
    \            [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list\
    \ lst)]\n                   [col (in-list row)])\n         (if (= x col)\n   \
    \          (list row col)))\n        (lambda (x y)\n          (cond\n        \
    \    [(< (car x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n        \
    \    [(> (cadr x) (cadr y)) #t]\n            [(< (cadr x) (cadr y)) #f]))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [else #f]))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n\
    \     (append\n      (get_row (rest lst) x)\n      (get_row_in_row (first lst)\
    \ x 0 (add1 (length lst))))]))\n", "  (cond [(empty? lst) empty]\n        [else\
    \ (append (get_row (rest lst) x)\n                      (get_row_helper (first\
    \ lst) x (length lst) (rest lst)))]))\n", "  (define (get_row-helper lst x result)\n\
    \    (cond ((null? lst) result)\n          ((null? (car lst)) (get_row-helper\
    \ (cdr lst) x result))\n          ((= x (car (car lst)))\n           (get_row-helper\
    \ (cdr lst) x (cons (list (length result) (length (car lst))) result)))\n    \
    \      (else (get_row-helper (cdr lst) x (cons (car lst) result)))))\n  (sort\
    \ (get_row-helper lst x '())\n        (lambda (l1 l2)\n          (cond ((= (car\
    \ l1) (car l2))\n                 (if (< (cadr l1) (cadr l2)) #t #f))\n      \
    \          ((< (car l1) (car l2)) #t)\n                (else #f)))))\n", "  (sort\
    \ (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n  \
    \       (when (= x col)\n           (list (list (length lst) col))))\n       \
    \ (\u03BB (a b)\n          (cond [(> (cadr a) (cadr b)) #t]\n                [(<\
    \ (cadr a) (cadr b)) #f]\n                [(> (car a) (car b)) #t]\n         \
    \       [(< (car a) (car b)) #f]))))\n", "  (sort (for/list ([(row . cols) (in-list\
    \ lst)]\n                   [col (in-list cols)])\n         (when (= x col)\n\
    \           (list row col)))\n        (\u03BB (x y) (cond [(< (car x) (car y))\
    \ #t]\n                       [(> (car x) (car y)) #f]\n                     \
    \  [(> (cadr x) (cadr y)) #t]\n                       [(< (cadr x) (cadr y)) #f]))))\n",
  "  (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n   \
    \   [(empty? (first lst)) (get_row-helper (rest lst) x acc)]\n      [(equal? x\
    \ (first (first lst)))\n       (get_row-helper (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row-helper (rest lst) x\
    \ (cons (list (length acc) 0) acc))]))\n  (sort (get_row-helper lst x (list))\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty?\
    \ lst) (reverse acc)]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(= x (first (first lst)))\n       (get_row_helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x acc)]))\n  (get_row_helper lst x (list)))\n", "  (define (get_row-helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n\
    \       (get_row-helper (rest lst) x (cons (list (length acc) 0) acc))]\n    \
    \  [(= x (first (rest (first lst))))\n       (get_row-helper (rest lst) x (cons\
    \ (list (length acc) 1) acc))]\n      [(= x (first (rest (rest (first lst)))))\n\
    \       (get_row-helper (rest lst) x (cons (list (length acc) 2) acc))]\n    \
    \  [else (get_row-helper (rest lst) x acc)]))\n  (get_row-helper lst x (list)))\n",
  "  (define (helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n \
    \     [(empty? (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first\
    \ lst)))\n       (helper (rest lst) x (cons (list (length acc) 0) acc))]\n   \
    \   [(> x (first (first lst)))\n       (helper (rest lst) x (cons (list (length\
    \ acc) 0) acc))]\n      [else\n       (helper (rest (first lst)) x (cons (list\
    \ (length acc) (add1 (length (first lst)))) acc))]))\n  (helper lst x (list)))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col)\n        \
    \           (list (length row) col))))\n        (lambda (x y)\n          (cond\n\
    \            [(< (car (car x)) (car (car y))) #t]\n            [(> (car (car x))\
    \ (car (car y))) #f]\n            [(> (cadr (car x)) (cadr (car y))) #t]\n   \
    \         [(< (cadr (car x)) (cadr (car y))) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [else\n     (append\n      (get_row (rest lst)\
    \ x)\n      (get_row_helper (first lst) x 0))]))\n", "  (sort (for/list ([row\
    \ (in-list lst)]\n                   [col (in-list row)])\n         (if (= x col)\
    \ (list (list (length lst) col) (list (length row) col))))\n        (\u03BB (x\
    \ y) (or (and (equal? (car x) (car y))\n                          (equal? (cadr\
    \ x) (cadr y)))\n                     (and (equal? (car x) (car y))\n        \
    \                  (equal? (cadr x) (cadr y)))\n                     (and (equal?\
    \ (car x) (car y))\n                          (equal? (cadr x) (cadr y)))))))\n",
  "  (define (get-row-helper lst x row-num)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row-num 1))]\n  \
    \    [(equal? x (first (first lst)))\n       (cons (list row-num 0) (get-row-helper\
    \ (rest lst) x row-num))]\n      [else (get-row-helper (rest (first lst)) x row-num)]))\n\
    \  (sort (get-row-helper lst x 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n     \
    \              [col (in-list row)])\n         (if (= x col)\n             (list\
    \ (list (list-ref lst (sub1 (length lst)) row)\n                         (list-ref\
    \ row (sub1 (length row)) col))))\n         (list))\n        (lambda (x y)\n \
    \         (cond\n            [(< (car (car x)) (car (car y))) #t]\n          \
    \  [(> (car (car x)) (car (car y))) #f]\n            [(> (cadr (car x)) (cadr\
    \ (car y))) #t]\n            [(< (cadr (car x)) (cadr (car y))) #f]\n        \
    \    [else #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest\
    \ lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [else #f]))))\n", "  (define (get_row_helper lst x)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x)]\n      [(equal? x (first (first lst))) (cons (list (get_row_helper\
    \ lst x) (first (first lst))) (get_row_helper (rest lst) x))]\n      [else (get_row_helper\
    \ (rest lst) x)]))\n  (get_row_helper lst x))\n", "  (sort (for/list ([row (in-list\
    \ lst)]\n                   [col (in-list row)])\n         (when (= x col)\n \
    \          (list (list (length lst) col))))\n        (\u03BB (x y)\n         \
    \ (if (= (car x) (car y))\n              (if (= (cadr x) (cadr y))\n         \
    \         #t\n                  (> (cadr x) (cadr y)))\n              (< (car\
    \ x) (car y))))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n \
    \     [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest\
    \ lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n \
    \           [(> (first x) (first y)) #f]\n            [(> (second x) (second y))\
    \ #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n    \
    \  [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(= x (first (first lst)))\n       (get_row_helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper lst\
    \ x (list))\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n\
    \      (get_row (rest lst) x)\n      (get_row_helper (first lst) x 0))]))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (when (= x col)\n           (list (length lst) col)))\n        (\u03BB\
    \ (a b) (or (< (car a) (car b))\n                     (and (= (car a) (car b))\n\
    \                          (> (cadr a) (cadr b)))))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row-helper (rest lst) x row (add1 col))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define\
    \ (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (get_row_helper (rest lst) x acc)]\n      [(equal? x (first (first\
    \ lst)))\n       (get_row_helper (rest lst) x (cons (list (length acc) (length\
    \ (first lst))) acc))]\n      [else (get_row_helper (rest lst) x (cons (list (length\
    \ acc) 0) acc))]))\n  (define (sort_by_row lst)\n    (sort lst (lambda (x y) (<\
    \ (first x) (first y)))))\n  (define (sort_by_col lst)\n    (sort lst (lambda\
    \ (x y) (> (second x) (second y)))))\n  (sort_by_col (sort_by_row (get_row_helper\
    \ lst x '()))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col result)\n    (cond\n      [(empty? lst) result]\n      [(empty?\
    \ (first lst)) (get_row_helper (rest lst) x (+ row 1) 0 result)]\n      [(= x\
    \ (first (first lst)))\n       (get_row_helper (rest (first lst)) x row (+ col\
    \ 1) (cons (list row col) result))]\n      [else (get_row_helper (rest (first\
    \ lst)) x row (+ col 1) result)]))\n  (sort (get_row_helper lst x 0 0 '())\n \
    \       (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n   \
    \   [(empty? (first lst)) (get_row-helper (rest lst) x acc)]\n      [(equal? x\
    \ (first (first lst)))\n       (get_row-helper (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row-helper (rest lst) x\
    \ (cons (list (length acc) 0) acc))]))\n  (sort (get_row-helper lst x (list))\n\
    \        (lambda (x y)\n          (cond\n            [(< (first x) (first y))\
    \ #t]\n            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (get_row (rest\
    \ lst) x)\n      (get_row_helper (first lst) x 0))]))\n", "  (sort (for/list ([(row\
    \ . cols) (in-list lst)]\n                   [col (in-list cols)])\n         (when\
    \ (= x col)\n           (list row col)))\n        (\u03BB (a b)\n          (cond\n\
    \            [(< (car a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n\
    \            [(> (cadr a) (cadr b)) #t]\n            [(< (cadr a) (cadr b)) #f]))))\n",
  "  (define (get_row_helper lst x row)\n    (cond\n      [(empty? lst) empty]\n \
    \     [(empty? (first lst)) (get_row_helper (rest lst) x (+ row 1))]\n      [(equal?\
    \ x (first (first lst)))\n       (append (list (list row (get_column (first lst)\
    \ x)))\n               (get_row_helper (rest lst) x (+ row 1)))]\n      [else\
    \ (get_row_helper (rest lst) x (+ row 1))]))\n  (get_row_helper lst x 0))\n",
  "  (define (get_row-helper lst x row)\n    (cond\n      [(empty? lst) empty]\n \
    \     [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1))]\n      [(=\
    \ x (first (first lst)))\n       (cons (list row 0) (get_row-helper (rest lst)\
    \ x row))]\n      [else (get_row-helper (rest lst) x row)]))\n  (define (get_row-helper-2\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper-2 (rest lst) x (+ row 1) col)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper-2 (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper-2 (rest lst) x row (+ col 1))]))\n  (define\
    \ (sort-by-row lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest\
    \ lst)) lst]\n      [(< (first (first lst)) (first (first (rest lst))))\n    \
    \   (cons (first lst) (sort-by-row (rest lst)))]\n      [else (cons (first (rest\
    \ lst)) (sort-by-row (cons (first lst) (rest (rest lst)))))]))\n  (define (sort-by-col\
    \ lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) lst]\n\
    \      [(> (second (first lst)) (second (first (rest lst))))\n       (cons (first\
    \ lst) (sort-by-col (rest lst)))]\n      [else (cons (first (rest lst)) (sort-by-col\
    \ (cons (first lst) (rest (rest lst)))))]))\n  (define (sort-by-row-and-col lst)\n\
    \    (cond\n      [(empty? lst) empty]\n     ", "  (define (get-row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst))\
    \ (get-row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get-row-helper (rest lst) x row (add1 col))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n   \
    \   [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(=\
    \ x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest lst)\
    \ x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [else #f]))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row_helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (x y)\n        \
    \  (cond\n            [(< (first x) (first y)) #t]\n            [(> (first x)\
    \ (first y)) #f]\n            [(< (second x) (second y)) #f]\n            [(>\
    \ (second x) (second y)) #t]\n            [else #f]))))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= x col)\n             (list (list (length lst) col) (list (length row) col))))\n\
    \        (lambda (x y)\n          (cond\n            [(> (car (car x)) (car (car\
    \ y))) #t]\n            [(< (car (car x)) (car (car y))) #f]\n            [(>\
    \ (cadr (car x)) (cadr (car y))) #f]\n            [(< (cadr (car x)) (cadr (car\
    \ y))) #t]))))\n", "  (define (get_row_helper lst x row col result)\n    (cond\n\
    \      [(empty? lst) result]\n      [(empty? (first lst)) (get_row_helper (rest\
    \ lst) x (add1 row) 0 result)]\n      [(= x (first (first lst)))\n       (get_row_helper\
    \ (rest (first lst)) x row (add1 col) (cons (list row col) result))]\n      [else\
    \ (get_row_helper (rest (first lst)) x row (add1 col) result)]))\n  (sort (get_row_helper\
    \ lst x 0 0 (list))\n        (lambda (x y)\n          (cond\n            [(< (first\
    \ x) (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(>\
    \ (second x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n   \
    \         [else #f]))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n  \
    \   (append\n      (get_row (rest lst) x)\n      (get_row_helper (first lst) x\
    \ 0))]))\n", "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row\
    \ 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper\
    \ (rest lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row\
    \ (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [else #f]))))\n", "  (define (get_row_helper lst x row col result)\n\
    \    (cond\n      [(empty? lst) result]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (+ row 1) 0 result)]\n      [(= x (first (first lst)))\n      \
    \ (get_row_helper (rest (first lst)) x row (+ col 1) (cons (list row col) result))]\n\
    \      [else (get_row_helper (rest (first lst)) x row (+ col 1) result)]))\n \
    \ (sort (get_row_helper lst x 0 0 '())\n        (lambda (x y)\n          (cond\n\
    \            [(< (first x) (first y)) #t]\n            [(> (first x) (first y))\
    \ #f]\n            [(> (second x) (second y)) #t]\n            [(< (second x)\
    \ (second y)) #f]\n            [else #f]))))\n", "  (define (get-row-helper lst\
    \ x row-num)\n    (cond\n      [(empty? lst) empty]\n      [(member x (first lst))\n\
    \       (append (get-row-helper (rest lst) x (+ row-num 1))\n               (list\
    \ (list row-num (index x (first lst)))))]\n      [else (get-row-helper (rest lst)\
    \ x (+ row-num 1))]))\n  (sort (get-row-helper lst x 0)\n        (lambda (x y)\n\
    \          (cond\n            [(< (first x) (first y)) #t]\n            [(> (first\
    \ x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]))))\n", "  (sort (filter (lambda (row) (member x\
    \ row))\n                (map (lambda (row) (map (lambda (y) (list (car row) y))\n\
    \                                        (filter (lambda (y) (= x y))\n      \
    \                                          (cdr row))))\n                    \
    \ (map (lambda (row) (cons (car row) (range (length row))))\n                \
    \          (range (length lst)))))\n        (lambda (x y) (or (< (car (car x))\
    \ (car (car y)))\n                          (and (= (car (car x)) (car (car y)))\n\
    \                               (> (cadr (car x)) (cadr (car y))))))))\n", " \
    \ (define (get_row-helper lst x row col)\n    (cond\n      [(null? lst) '()]\n\
    \      [(null? (car lst)) (get_row-helper (cdr lst) x (+ row 1) 0)]\n      [(=\
    \ x (car (car lst)))\n       (cons (list row col) (get_row-helper (cdr (car lst))\
    \ x row (+ col 1)))]\n      [else (get_row-helper (cdr (car lst)) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n  \
    \        (cond\n            [(< (car lst1) (car lst2)) #t]\n            [(> (car\
    \ lst1) (car lst2)) #f]\n            [(> (cadr lst1) (cadr lst2)) #t]\n      \
    \      [(< (cadr lst1) (cadr lst2)) #f]\n            [else #f]))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n    \
    \  [(empty? (first lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n      [(equal?\
    \ x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest lst)\
    \ x row (add1 col)))]\n      [else (get_row-helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (x y)\n          (cond\n\
    \            [(< (first x) (first y)) #t]\n            [(> (first x) (first y))\
    \ #f]\n            [(> (second x) (second y)) #t]\n            [(< (second x)\
    \ (second y)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n          \
    \         [col (in-list row)])\n         (if (= x col)\n             (list (list\
    \ (length lst) col) (list (length lst) 0))))\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (car (car l1)) (car (car l2))) #t]\n            [(>\
    \ (car (car l1)) (car (car l2))) #f]\n            [(> (cadr (car l1)) (cadr (car\
    \ l2))) #t]\n            [(< (cadr (car l1)) (cadr (car l2))) #f]))))\n", "  (define\
    \ (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (get_row-helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n\
    \       (get_row-helper (rest lst) x (cons (list (length acc) (length (first lst)))\
    \ acc))]\n      [else (get_row-helper (rest lst) x (cons (list (length acc) 0)\
    \ acc))]))\n  (sort (get_row-helper lst x '())\n        (lambda (x y)\n      \
    \    (cond\n            [(< (first x) (first y)) #t]\n            [(> (first x)\
    \ (first y)) #f]\n            [(< (second x) (second y)) #f]\n            [(>\
    \ (second x) (second y)) #t]\n            [else #f]))))\n", "  (define (get_row-helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n\
    \       (get_row-helper (rest lst) x (cons (list (length acc) (length (first lst)))\
    \ acc))]\n      [else (get_row-helper (rest lst) x (cons (list (length acc) 0)\
    \ acc))]))\n  (sort (get_row-helper lst x '())\n        (lambda (x y)\n      \
    \    (cond\n            [(< (first x) (first y)) #t]\n            [(> (first x)\
    \ (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]\n            [else #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get-row-helper (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (helper lst x res)\n    (cond\n      [(empty? lst)\
    \ res]\n      [(empty? (first lst)) (helper (rest lst) x res)]\n      [(= x (first\
    \ (first lst)))\n       (helper (rest lst) x (cons (list (length res) 0) res))]\n\
    \      [(= x (first (rest (first lst))))\n       (helper (rest lst) x (cons (list\
    \ (length res) 1) res))]\n      [(= x (first (rest (rest (first lst)))))\n   \
    \    (helper (rest lst) x (cons (list (length res) 2) res))]\n      [else (helper\
    \ (rest lst) x res)]))\n  (sort (helper lst x (list))\n        (lambda (x y)\n\
    \          (cond\n            [(< (first x) (first y)) #t]\n            [(> (first\
    \ x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]))))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) col)]\n      [(= x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(= (first x) (first y)) (> (second x) (second y))]\n\
    \            [else #f]))))\n", "  (define (get-row-helper lst x row col)\n   \
    \ (cond ((null? lst) '())\n          ((null? (car lst)) (get-row-helper (cdr lst)\
    \ x (+ row 1) 0))\n          ((= x (car (car lst))) (cons (list row col) (get-row-helper\
    \ (cdr (car lst)) x row (+ col 1))))\n          (else (get-row-helper (cdr (car\
    \ lst)) x row (+ col 1)))))\n  (sort (get-row-helper lst x 0 0)\n        (lambda\
    \ (x y)\n          (cond ((< (car x) (car y)) #t)\n                ((> (car x)\
    \ (car y)) #f)\n                ((> (cadr x) (cadr y)) #t)\n                (else\
    \ #f)))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row\
    \ 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper\
    \ (rest lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row\
    \ (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (x y)\n \
    \         (cond\n            [(< (first x) (first y)) #t]\n            [(> (first\
    \ x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= x col)\n           \
    \  (list (list (list-ref lst (sub1 (length lst)) row)\n                      \
    \   (list-ref row (sub1 (length row)) col))))\n         (list))\n        (lambda\
    \ (x y)\n          (or (and (= (car (car x)) (car (car y)))\n                \
    \   (> (cadr (car x)) (cadr (car y))))\n              (< (car (car x)) (car (car\
    \ y)))))))\n", "  (define (get_row_helper lst x acc)\n    (cond ((null? lst) acc)\n\
    \          ((null? (car lst)) (get_row_helper (cdr lst) x acc))\n          ((equal?\
    \ x (car (car lst)))\n           (get_row_helper (cdr lst) x (cons (list (length\
    \ acc) (length (car lst))) acc)))\n          (else (get_row_helper (cdr lst) x\
    \ (cons (list (length acc) 0) acc)))))\n  (sort (get_row_helper lst x (list))\n\
    \        (lambda (x y)\n          (cond ((< (car x) (car y)) #t)\n           \
    \     ((> (car x) (car y)) #f)\n                ((> (cadr x) (cadr y)) #t)\n \
    \               ((< (cadr x) (cadr y)) #f)\n                (else #f)))))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n  \
    \        (cond\n            [(< (first lst1) (first lst2)) #t]\n            [(>\
    \ (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x acc)\n    (if (null? lst)\n        acc\n        (get-row-helper (cdr lst)\
    \ x\n                        (append (get-row-helper-2 x (car lst) (list (list\
    \ (length acc) 0)))\n                                acc))))\n  (get-row-helper\
    \ lst x (list)))\n", "  (sort (for/list ([row (in-list lst)]\n               \
    \    [col (in-list row)])\n         (if (= x col)\n             (list (list (list-ref\
    \ lst row) col))))\n        (\u03BB (x y)\n          (cond\n            [(> (list-ref\
    \ x 0) (list-ref y 0)) #t]\n            [(< (list-ref x 0) (list-ref y 0)) #f]\n\
    \            [(> (list-ref x 1) (list-ref y 1)) #t]\n            [(< (list-ref\
    \ x 1) (list-ref y 1)) #f]))))\n", "  (define (get_row_helper lst x acc)\n   \
    \ (if (null? lst)\n        acc\n        (get_row_helper (cdr lst) x (append (get_row_helper_2\
    \ (car lst) x acc 0) acc))))\n  (define (get_row_helper_2 lst x acc y)\n    (if\
    \ (null? lst)\n        acc\n        (if (= x (car lst))\n            (get_row_helper_2\
    \ (cdr lst) x (cons (list y (length acc)) acc) (+ y 1))\n            (get_row_helper_2\
    \ (cdr lst) x acc (+ y 1)))))\n  (sort (get_row_helper lst x '()) (lambda (x y)\
    \ (< (car x) (car y)))))\n", "  (sort (for/list ([row (in-list lst)]\n       \
    \            [col (in-list row)])\n         (when (= x col)\n           (list\
    \ (list (length lst) col))))\n        (\u03BB (a b)\n          (cond\n       \
    \     [(> (car (car a)) (car (car b))) #t]\n            [(< (car (car a)) (car\
    \ (car b))) #f]\n            [(> (cadr (car a)) (cadr (car b))) #f]\n        \
    \    [(< (cadr (car a)) (cadr (car b))) #t]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row-iter lst x acc)\n    (cond\n      [(empty?\
    \ lst) acc]\n      [(empty? (first lst)) (get_row-iter (rest lst) x acc)]\n  \
    \    [(= x (first (first lst)))\n       (get_row-iter (rest lst) x (cons (list\
    \ (length acc) 0) acc))]\n      [(= x (first (rest (first lst))))\n       (get_row-iter\
    \ (rest lst) x (cons (list (length acc) 1) acc))]\n      [(= x (first (rest (rest\
    \ (first lst)))))\n       (get_row-iter (rest lst) x (cons (list (length acc)\
    \ 2) acc))]\n      [else (get_row-iter (rest lst) x acc)]))\n  (sort (get_row-iter\
    \ lst x (list))\n        (lambda (x y)\n          (cond\n            [(< (first\
    \ x) (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(>\
    \ (second x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n   \
    \         [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n        \
    \           [col (in-list row)])\n         (when (= x col)\n           (list (length\
    \ lst) col)))\n        <))\n", "  (sort (for/list ([row (in-list lst)]\n     \
    \              [col (in-list row)])\n         (if (= x col)\n             (list\
    \ (list (length lst) col))))\n        (\u03BB (x y)\n          (cond\n       \
    \     [(> (car (car x)) (car (car y))) #t]\n            [(< (car (car x)) (car\
    \ (car y))) #f]\n            [(> (cadr (car x)) (cadr (car y))) #f]\n        \
    \    [(< (cadr (car x)) (cadr (car y))) #t]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define\
    \ (helper lst x res)\n    (if (null? lst)\n        res\n        (helper (cdr lst)\
    \ x (append res (get_row_helper (car lst) x 0 (list))))))\n  (helper lst x (list)))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [else #f]))))\n", "  (define (get-row-helper lst x row col result)\n    (cond\n\
    \      [(empty? lst) result]\n      [(empty? (first lst)) (get-row-helper (rest\
    \ lst) x (+ row 1) 0 result)]\n      [(equal? x (first (first lst)))\n       (get-row-helper\
    \ (rest lst) x row (+ col 1) (cons (list row col) result))]\n      [else (get-row-helper\
    \ (rest lst) x row (+ col 1) result)]))\n  (sort (get-row-helper lst x 0 0 (list))\n\
    \        (lambda (x y)\n          (cond\n            [(< (first x) (first y))\
    \ #t]\n            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (sort (filter\
    \ (lambda (coord)\n                  (equal? x (list-ref (list-ref lst (car coord))\
    \ (cdr coord))))\n                (for/list ([i (in-range (length lst))]\n   \
    \                        [j (in-range (length (list-ref lst i)))])\n         \
    \         (list i j)))\n        (lambda (coord1 coord2)\n          (cond\n   \
    \         [(< (car coord1) (car coord2)) #t]\n            [(> (car coord1) (car\
    \ coord2)) #f]\n            [(> (cdr coord1) (cdr coord2)) #t]\n            [(<\
    \ (cdr coord1) (cdr coord2)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= x col)\n           \
    \  (list (list (length lst) col) (list (length row) col))))\n        (\u03BB (x\
    \ y)\n          (cond [(< (car (car x)) (car (car y))) #t]\n                [(>\
    \ (car (car x)) (car (car y))) #f]\n                [(< (cadr (car x)) (cadr (car\
    \ y))) #f]\n                [(> (cadr (car x)) (cadr (car y))) #t]))))\n", " \
    \ (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list row col)))\n        <))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [else (append (get_row (rest lst) x)\n        \
    \          (get_row_helper (first lst) x (length lst) (rest lst)))]))\n", "  (define\
    \ (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (get_row-helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n\
    \       (get_row-helper (rest lst) x (cons (list (length acc) (length (first lst)))\
    \ acc))]\n      [else (get_row-helper (rest lst) x (cons (list (length acc) 0)\
    \ acc))]))\n  (sort (get_row-helper lst x (list))\n        (lambda (x y)\n   \
    \       (cond\n            [(< (first x) (first y)) #t]\n            [(> (first\
    \ x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]\n            [else #f]))))\n", "  (define (get_row_helper\
    \ lst x row col acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (+ row 1) 0 acc)]\n      [(= x (first (first\
    \ lst)))\n       (get_row_helper (rest (first lst)) x row (+ col 1) (cons (list\
    \ row col) acc))]\n      [else (get_row_helper (rest (first lst)) x row (+ col\
    \ 1) acc)]))\n  (define (sort_by_row lst)\n    (sort lst < #:key (lambda (x) (first\
    \ x))))\n  (define (sort_by_col lst)\n    (sort lst > #:key (lambda (x) (second\
    \ x))))\n  (sort_by_col (sort_by_row (get_row_helper lst x 0 0 (list)))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (x y)\n      \
    \    (cond\n            [(< (first x) (first y)) #t]\n            [(> (first x)\
    \ (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]\n            [else #f]))))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [else\n     (let ([row (first lst)])\n       (cond\n      \
    \   [(empty? row)\n          (get_row (rest lst) x)]\n         [(= x (first row))\n\
    \          (cons (list (length lst) (length row))\n                (get_row (rest\
    \ lst) x))]\n         [else\n          (get_row (rest lst) x)]))]))\n", "  (sort\
    \ (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n  \
    \       (if (= x col)\n             (list (list (length lst) col))))\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(> (car (car l1)) (car (car l2)))\
    \ #t]\n            [(< (car (car l1)) (car (car l2))) #f]\n            [(> (cadr\
    \ (car l1)) (cadr (car l2))) #f]\n            [(< (cadr (car l1)) (cadr (car l2)))\
    \ #t]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty?\
    \ lst) acc]\n      [(empty? (first lst)) (get_row_helper (rest lst) x acc)]\n\
    \      [(equal? x (first (first lst)))\n       (get_row_helper (rest lst) x (cons\
    \ (cons (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x (cons (cons (length acc) (length (first lst))) acc))]))\n  (sort\
    \ (get_row_helper lst x '())\n        (lambda (x y)\n          (cond\n       \
    \     [(< (first x) (first y)) #t]\n            [(> (first x) (first y)) #f]\n\
    \            [(> (second x) (second y)) #t]\n            [(< (second x) (second\
    \ y)) #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= x col)\n           \
    \  (list (list (length lst) (length row)))))\n        <))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (when\
    \ (= x col)\n           (list row col)))\n        (\u03BB (a b)\n          (cond\n\
    \            [(< (car a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n\
    \            [(> (cadr a) (cadr b)) #t]\n            [(< (cadr a) (cadr b)) #f]))))\n",
  "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n   \
    \   [(empty? (first lst)) (get_row_helper (rest lst) x acc)]\n      [(= x (first\
    \ (first lst)))\n       (get_row_helper (rest lst) x (cons (list (length acc)\
    \ (length (first lst))) acc))]\n      [else (get_row_helper (rest lst) x (cons\
    \ (list (length acc) 0) acc))]))\n  (sort (get_row_helper lst x (list))\n    \
    \    (lambda (x y)\n          (cond\n            [(= (first x) (first y))\n  \
    \           (if (> (second x) (second y))\n                 #t\n             \
    \    #f)]\n            [(> (first x) (first y)) #t]\n            [else #f]))))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [else #f]))))\n", "  (define (get_row_helper lst x row col)\n    (cond\n\
    \      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row_helper (rest\
    \ lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= x col)\n           \
    \  (list (list (length lst) col)\n                   (list (length row) col))))\n\
    \        (\u03BB (a b)\n          (cond\n            [(< (car (car a)) (car (car\
    \ b))) #t]\n            [(> (car (car a)) (car (car b))) #f]\n            [(<\
    \ (cadr (car a)) (cadr (car b))) #f]\n            [(> (cadr (car a)) (cadr (car\
    \ b))) #t]))))\n", "  (define (get_row-helper lst x)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest lst) x)]\n  \
    \    [(equal? x (first (first lst)))\n       (cons (list (first lst) (first (rest\
    \ lst)))\n             (get_row-helper (rest lst) x))]\n      [else (get_row-helper\
    \ (rest lst) x)]))\n  (sort (get_row-helper lst x)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n       (helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (helper (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (helper lst\
    \ x (list))\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row_helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get-row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n  \
    \        (cond\n            [(> (first lst1) (first lst2)) #t]\n            [(<\
    \ (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #f]\n            [(< (second lst1) (second lst2)) #t]))))\n", "  (define (helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n       (helper\
    \ (rest lst) x (append acc (list (list (length acc) 0))))]\n      [else (helper\
    \ (rest lst) x (append acc (list (list (length acc) (length (first lst)))))])]))\n\
    \  (define (sort-by-row lst)\n    (sort lst (lambda (lst1 lst2) (< (first lst1)\
    \ (first lst2)))))\n  (define (sort-by-col lst)\n    (sort lst (lambda (lst1 lst2)\
    \ (> (second lst1) (second lst2)))))\n  (sort-by-col (sort-by-row (helper lst\
    \ x '()))))\n", "  (sort (filter (lambda (lst) (equal? x (car lst))) (flatten\
    \ lst))\n        (lambda (lst1 lst2)\n          (cond\n            [(< (car lst1)\
    \ (car lst2)) #t]\n            [(> (car lst1) (car lst2)) #f]\n            [(>\
    \ (cadr lst1) (cadr lst2)) #t]\n            [(< (cadr lst1) (cadr lst2)) #f]\n\
    \            [else #f]))))\n", "  (sort (filter (lambda (lst) (equal? x (car lst)))\
    \ (get_row_helper lst 0))\n        (lambda (lst1 lst2)\n          (cond ((> (car\
    \ lst1) (car lst2)) #t)\n                ((< (car lst1) (car lst2)) #f)\n    \
    \            ((> (cadr lst1) (cadr lst2)) #f)\n                ((< (cadr lst1)\
    \ (cadr lst2)) #t)\n                (else #f)))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= x col)\n           \
    \  (list (list (list-ref lst (sub1 (length lst)) 0)\n                        \
    \ (list-ref row (sub1 (length row)) 0))))\n         (list (list (list-ref lst\
    \ (sub1 (length lst)) 0)\n                     (list-ref row (sub1 (length row))\
    \ 0))))\n       (lambda (x y)\n         (cond\n           [(< (list-ref x 0) (list-ref\
    \ y 0)) #t]\n           [(> (list-ref x 0) (list-ref y 0)) #f]\n           [(>\
    \ (list-ref x 1) (list-ref y 1)) #t]\n           [(< (list-ref x 1) (list-ref\
    \ y 1)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n                \
    \   [col (in-list row)])\n         (if (= x col) (list (list (length lst) col)\
    \ (list (length row) col))))\n        (lambda (l1 l2)\n          (cond\n     \
    \       [(< (car (car l1)) (car (car l2))) #t]\n            [(> (car (car l1))\
    \ (car (car l2))) #f]\n            [(> (cadr (car l1)) (cadr (car l2))) #t]\n\
    \            [(< (cadr (car l1)) (cadr (car l2))) #f]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (get_row (rest\
    \ lst) x)\n      (get_row_helper (first lst) x 0))]))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row_helper\
    \ (cdr lst) x (+ row 1) 0))\n          ((= x (car (car lst)))\n           (cons\
    \ (list row col) (get_row_helper (cdr (car lst)) x row (+ col 1))))\n        \
    \  (else (get_row_helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond ((< (car lst1) (car\
    \ lst2)) #t)\n                ((> (car lst1) (car lst2)) #f)\n               \
    \ ((> (cadr lst1) (cadr lst2)) #t)\n                ((< (cadr lst1) (cadr lst2))\
    \ #f)\n                (else #f)))))\n", "  (define (get-row-helper lst x row\
    \ col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons\
    \ (list row col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (sort (for/list ([(row-index\
    \ row) (in-indexed lst)])\n          (for/list ([(col-index col) (in-indexed row)])\n\
    \            (when (= x col)\n              (list row-index col-index))))\n  \
    \      (\u03BB (l1 l2)\n          (cond\n            [(< (car l1) (car l2)) #t]\n\
    \            [(> (car l1) (car l2)) #f]\n            [(< (cadr l1) (cadr l2))\
    \ #f]\n            [(> (cadr l1) (cadr l2)) #t]\n            [else #f]))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (x y)\n      \
    \    (cond\n            [(< (first x) (first y)) #t]\n            [(> (first x)\
    \ (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]\n            [else #f]))))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= x col)\n             (list (list (list-ref lst (sub1 (length lst)) 0)\n \
    \                        (sub1 (length row)))))\n         (list (list (list-ref\
    \ lst (sub1 (length lst)) 0)\n                     (sub1 (length row)))))\n  \
    \      (lambda (x y)\n          (cond\n            [(> (list-ref x 0) (list-ref\
    \ y 0)) #t]\n            [(< (list-ref x 0) (list-ref y 0)) #f]\n            [(>\
    \ (list-ref x 1) (list-ref y 1)) #t]\n            [(< (list-ref x 1) (list-ref\
    \ y 1)) #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest lst)\
    \ x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper (rest\
    \ lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n         \
    \   [(> (first x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n\
    \            [(< (second x) (second y)) #f]\n            [else #f]))))\n", " \
    \ (define (get_row_helper lst x result)\n    (cond\n      [(empty? lst) result]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x result)]\n      [(equal?\
    \ x (first (first lst)))\n       (get_row_helper (rest lst) x (cons (list (length\
    \ result) (length (first lst))) result))]\n      [else (get_row_helper (rest lst)\
    \ x result)]))\n  (get_row_helper lst x (list)))\n", "  (cond\n    [(empty? lst)\
    \ (list)]\n    [else\n     (cond\n       [(empty? (first lst)) (get_row (rest\
    \ lst) x)]\n       [(equal? x (first (first lst)))\n        (append (list (list\
    \ (length lst) (length (first lst))))\n                (get_row (rest lst) x))]\n\
    \       [else (get_row (rest lst) x)])]))\n", "  (define (get_row_helper lst x\
    \ row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [else\n     (cond\n       [(empty? (first\
    \ lst)) (get_row (rest lst) x)]\n       [(member x (first lst))\n        (append\
    \ (map (lambda (y) (list (first lst) y))\n                     (filter (lambda\
    \ (y) (= x (list-ref (first lst) y)))\n                             (range (length\
    \ (first lst)))))\n                (get_row (rest lst) x))]\n       [else (get_row\
    \ (rest lst) x)])]))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n     (define\
    \ (get_row_helper lst x)\n       (cond\n         [(empty? lst) empty]\n      \
    \   [else\n          (append\n           (get_row_helper (rest lst) x)\n     \
    \      (get_row_helper (first lst) x (add1 (length (rest lst))) 0))]))\n     (define\
    \ (get_row_helper lst x y z)\n       (cond\n         [(empty? lst) empty]\n  \
    \       [(= x (first lst)) (cons (list y z) (get_row_helper (rest lst) x y (add1\
    \ z)))]\n         [else (get_row_helper (rest lst) x y (add1 z))]))\n     (sort\
    \ (get_row_helper lst x)\n           (lambda (lst1 lst2)\n             (cond\n\
    \               [(< (first lst1) (first lst2)) #t]\n               [(> (first\
    \ lst1) (first lst2)) #f]\n               [(> (second lst1) (second lst2)) #t]\n\
    \               [(< (second lst1) (second lst2)) #f])))]))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [else\n     (append\n      (get_row (rest lst) x)\n      (get_row_helper\
    \ (first lst) x 0))]))\n", "  (define (get_row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest\
    \ lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n \
    \           [(> (first x) (first y)) #f]\n            [(> (second x) (second y))\
    \ #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (list-ref lst (sub1 (length\
    \ lst)) 0)\n                         (list-ref row (sub1 (length row)) 0))))\n\
    \         #:when (not (empty? row)))\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (list-ref l1 0) (list-ref l2 0)) #t]\n            [(> (list-ref\
    \ l1 0) (list-ref l2 0)) #f]\n            [(> (list-ref l1 1) (list-ref l2 1))\
    \ #t]\n            [(< (list-ref l1 1) (list-ref l2 1)) #f]))))\n", "  (sort (for/list\
    \ ([(row . cols) (in-list lst)]\n                   [col (in-list cols)])\n  \
    \       (if (= x col)\n             (list row col)))\n        (\u03BB (a b)\n\
    \          (cond [(< (car a) (car b)) #t]\n                [(> (car a) (car b))\
    \ #f]\n                [(> (cadr a) (cadr b)) #t]\n                [(< (cadr a)\
    \ (cadr b)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n            \
    \       [col (in-list row)])\n         (when (= x col)\n           (list (length\
    \ lst) col)))\n        <))\n", "  (define (get_row_helper lst x row col)\n   \
    \ (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get_row_helper (rest lst) x row (+ col 1)))]\n      [else (get_row_helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row_helper lst x 0 0)\n       \
    \ (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (define (get-row-helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n\
    \       (get-row-helper (rest lst) x (cons (list (length acc) 0) acc))]\n    \
    \  [(equal? x (first (rest (first lst))))\n       (get-row-helper (rest lst) x\
    \ (cons (list (length acc) 1) acc))]\n      [(equal? x (first (rest (rest (first\
    \ lst)))))\n       (get-row-helper (rest lst) x (cons (list (length acc) 2) acc))]\n\
    \      [else (get-row-helper (rest lst) x acc)]))\n  (get-row-helper lst x (list)))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (list-ref lst (sub1 (length\
    \ lst)) row)\n                         (sub1 (length row)))))\n         (list\
    \ (list (list-ref lst (sub1 (length lst)) row)\n                     (sub1 (length\
    \ row)))))\n        (lambda (a b)\n          (cond\n            [(and (equal?\
    \ (car a) (car b))\n                  (equal? (cadr a) (cadr b)))\n          \
    \   #t]\n            [(and (equal? (car a) (car b))\n                  (not (equal?\
    \ (cadr a) (cadr b))))\n             (if (> (cadr a) (cadr b))\n             \
    \    #t\n                 #f)]\n            [(not (equal? (car a) (car b)))\n\
    \             (if (> (car a) (car b))\n                 #t\n                 #f)]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (when (= x col)\n           (list (list (length lst) col))))\n     \
    \   <))\n", "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) '()]\n      [(empty? (first lst)) (get_row-helper (rest lst) x (add1 row)\
    \ 0)]\n      [(equal? x (first (first lst)))\n       (cons (list row col) (get_row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (x y)\n\
    \          (cond\n            [(< (first x) (first y)) #t]\n            [(> (first\
    \ x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\
    \ (append (get_row (rest lst) x)\n                  (get_row_helper (first lst)\
    \ x (length lst) (length (first lst))))]))\n", "  (define (get_row-helper lst\
    \ x row-num)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x (+ row-num 1))]\n      [(= x (first (first lst)))\n\
    \       (cons (list row-num 0) (get_row-helper (rest lst) x row-num))]\n     \
    \ [else (get_row-helper (rest lst) x row-num)]))\n  (sort (get_row-helper lst\
    \ x 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first\
    \ l2)) #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second\
    \ l1) (second l2)) #t]\n            [(< (second l1) (second l2)) #f]))))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (get_row (rest\
    \ lst) x)\n      (get_row_helper (first lst) x 0))]))\n", "  (sort (for/list ([row\
    \ (in-list lst)]\n                   [col (in-list row)])\n         (when (= x\
    \ col)\n           (list (length lst) col)))\n        <))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (a b)\n          (cond\n            [(< (first a)\
    \ (first b)) #t]\n            [(> (first a) (first b)) #f]\n            [(< (second\
    \ a) (second b)) #f]\n            [(> (second a) (second b)) #t]\n           \
    \ [else #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) '()]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (add1 row) col)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get-row-helper (rest lst) x row (add1 col)))]\n      [else (get-row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n      \
    \  (lambda (a b)\n          (cond\n            [(< (first a) (first b)) #t]\n\
    \            [(> (first a) (first b)) #f]\n            [(> (second a) (second\
    \ b)) #t]\n            [(< (second a) (second b)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [else #f]))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (x y)\n      \
    \    (cond\n            [(< (first x) (first y)) #t]\n            [(= (first x)\
    \ (first y)) (> (second x) (second y))]\n            [else #f]))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n    \
    \  [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(=\
    \ x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest lst)\
    \ x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n\
    \            [(< (first lst1) (first lst2)) #t]\n            [(> (first lst1)\
    \ (first lst2)) #f]\n            [(> (second lst1) (second lst2)) #t]\n      \
    \      [else #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest\
    \ lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [else #f]))))\n", "  (sort (for/list ([(row . cols) (in-list\
    \ lst)]\n                   [col (in-list cols)])\n         (when (= x col)\n\
    \           (list row col)))\n        (\u03BB (x y) (cond [(< (car x) (car y))\
    \ #t]\n                       [(> (car x) (car y)) #f]\n                     \
    \  [(> (cadr x) (cadr y)) #t]\n                       [(< (cadr x) (cadr y)) #f]))))\n",
  "  (sort (filter (lambda (y) (equal? x (car y)))\n                (map (lambda (y)\
    \ (map (lambda (z) (list (car y) (cdr z)))\n                                 \
    \     (enumerate (cdr y))))\n                     (enumerate lst)))\n        (lambda\
    \ (x y) (and (< (car (car x)) (car (car y)))\n                           (> (cdr\
    \ (car x)) (cdr (car y)))))))\n", "  (sort (for/list ([row (in-list lst)]\n  \
    \                 [col (in-list row)])\n         (when (= x col)\n           (list\
    \ (list (length (take row (sub1 (length lst)))) col)))\n         (remove empty?))\n\
    \        (lambda (x y)\n          (cond\n            [(> (car (car x)) (car (car\
    \ y))) #t]\n            [(< (car (car x)) (car (car y))) #f]\n            [(>\
    \ (cadr (car x)) (cadr (car y))) #f]\n            [(< (cadr (car x)) (cadr (car\
    \ y))) #t]))))\n", "  (define (get_row_helper lst x row col)\n    (cond\n    \
    \  [(null? lst) (list)]\n      [(null? (car lst)) (get_row_helper (cdr lst) x\
    \ (+ row 1) 0)]\n      [(= x (car (car lst)))\n       (cons (list row col) (get_row_helper\
    \ (cdr (car lst)) x row (+ col 1)))]\n      [else (get_row_helper (cdr (car lst))\
    \ x row (+ col 1))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (l1\
    \ l2)\n          (cond\n            [(< (car l1) (car l2)) #t]\n            [(>\
    \ (car l1) (car l2)) #f]\n            [(> (cadr l1) (cadr l2)) #t]\n         \
    \   [(< (cadr l1) (cadr l2)) #f]\n            [else #f]))))\n", "  (define (helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (helper (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (helper\
    \ (rest lst) x (append acc (list (list (length acc) 0))))]\n      [else (helper\
    \ (rest (first lst)) x (append acc (list (list (length acc) (add1 (length (first\
    \ lst)))))))]))\n  (sort (helper lst x '()) (lambda (x y) (or (and (< (first x)\
    \ (first y)) (not (equal? (first x) (first y))))\n                           \
    \                  (and (equal? (first x) (first y)) (> (second x) (second y)))))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get-row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (x y)\n        \
    \  (cond\n            [(< (first x) (first y)) #t]\n            [(> (first x)\
    \ (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]\n            [else #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty?\
    \ lst) (reverse acc)]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(= x (first (first lst)))\n       (get_row_helper (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [(> x (first (first lst)))\n   \
    \    (get_row_helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [else\n\
    \       (get_row_helper (rest (first lst)) x (cons (list (length acc) (length\
    \ (first lst))) acc))]))\n  (get_row_helper lst x (list)))\n", "  (sort (for/list\
    \ ([(row . cols) (in-list lst)]\n                   [col (in-list cols)])\n  \
    \       (when (= x col)\n           (list row col)))\n        (\u03BB (a b)\n\
    \          (cond [(< (car a) (car b)) #t]\n                [(> (car a) (car b))\
    \ #f]\n                [(> (cadr a) (cadr b)) #t]\n                [(< (cadr a)\
    \ (cadr b)) #f]))))\n", "  (define (get_row_iter lst x acc)\n    (cond ((null?\
    \ lst) acc)\n          ((null? (car lst)) (get_row_iter (cdr lst) x acc))\n  \
    \        ((= x (car (car lst))) (get_row_iter (cdr lst) x (cons (list (length\
    \ acc) 0) acc)))\n          (else (get_row_iter (cdr lst) x (cons (list (length\
    \ acc) (length (car lst))) acc)))))\n  (sort (get_row_iter lst x '()) (lambda\
    \ (a b) (cond ((< (car a) (car b)) #t)\n                                     \
    \                ((> (car a) (car b)) #f)\n                                  \
    \                   ((> (cadr a) (cadr b)) #t)\n                             \
    \                        ((< (cadr a) (cadr b)) #f)\n                        \
    \                             (else #f)))))\n", "  (define (get_row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(equal? x (first (first lst)))\n\
    \       (cons (list row col) (get_row-helper (rest lst) x row (+ col 1)))]\n \
    \     [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get_row-helper lst x row col result)\n\
    \    (cond\n      [(empty? lst) result]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (+ row 1) 0 result)]\n      [(= x (first (first lst)))\n      \
    \ (get_row-helper (rest (first lst)) x row (+ col 1) (cons (list row col) result))]\n\
    \      [else (get_row-helper (rest (first lst)) x row (+ col 1) result)]))\n \
    \ (sort (get_row-helper lst x 0 0 (list))\n        (lambda (x y)\n          (cond\n\
    \            [(< (first x) (first y)) #t]\n            [(> (first x) (first y))\
    \ #f]\n            [(> (second x) (second y)) #t]\n            [(< (second x)\
    \ (second y)) #f]))))\n", "  (define (get_row_helper lst x row col)\n    (cond\
    \ [(null? lst) '()]\n          [(null? (car lst)) (get_row_helper (cdr lst) x\
    \ (+ row 1) 0)]\n          [(= x (car (car lst)))\n           (cons (list row\
    \ col) (get_row_helper (cdr (car lst)) x row (+ col 1)))]\n          [else (get_row_helper\
    \ (cdr (car lst)) x row (+ col 1))]))\n  (sort (get_row_helper lst x 0 0)\n  \
    \      (lambda (lst1 lst2)\n          (cond [(< (car lst1) (car lst2)) #t]\n \
    \               [(> (car lst1) (car lst2)) #f]\n                [(> (cadr lst1)\
    \ (cadr lst2)) #t]\n                [(< (cadr lst1) (cadr lst2)) #f]\n       \
    \         [else #f]))))\n", "  (define (get_row_iter lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_iter (rest lst)\
    \ x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get_row_iter (rest lst) x row (add1 col)))]\n      [else (get_row_iter (rest\
    \ lst) x row (add1 col))]))\n  (sort (get_row_iter lst x 0 0)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n         \
    \   [(> (first x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n\
    \            [(< (second x) (second y)) #f]\n            [else #f]))))\n", " \
    \ (cond\n    [(empty? lst) empty]\n    [else\n     (let ([row (first lst)])\n\
    \       (cond\n         [(empty? row) (get_row (rest lst) x)]\n         [(= x\
    \ (first row))\n          (append (list (list (length lst) (length row)))\n  \
    \                (get_row (rest lst) x))]\n         [else (get_row (rest lst)\
    \ x)]))]))\n", "  (define (get_row_helper lst x row col)\n    (cond ((null? lst)\
    \ '())\n          ((null? (car lst)) (get_row_helper (cdr lst) x (+ row 1) 0))\n\
    \          ((= x (car (car lst)))\n           (cons (list row col) (get_row_helper\
    \ (cdr (car lst)) x row (+ col 1))))\n          (else (get_row_helper (cdr (car\
    \ lst)) x row (+ col 1)))))\n  (sort (get_row_helper lst x 0 0)\n        (lambda\
    \ (l1 l2)\n          (cond ((< (car l1) (car l2)) #t)\n                ((> (car\
    \ l1) (car l2)) #f)\n                ((> (cadr l1) (cadr l2)) #t)\n          \
    \      ((< (cadr l1) (cadr l2)) #f)\n                (else #f)))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n    \
    \  [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(=\
    \ x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest lst)\
    \ x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (x y)\n          (cond\n\
    \            [(< (first x) (first y)) #t]\n            [(> (first x) (first y))\
    \ #f]\n            [(> (second x) (second y)) #t]\n            [(< (second x)\
    \ (second y)) #f]\n            [else #f]))))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [else\n     (let*\n         ([row (first lst)]\n          [rest (rest lst)]\n\
    \          [found (get_row rest x)]\n          [found-in-row (get-row-coordinates\
    \ row x)]\n          [found-in-row-with-row-number (map (lambda (y) (list (length\
    \ lst) y)) found-in-row)])\n       (append found-in-row-with-row-number found))]))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (l1 l2)\n    \
    \      (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", "  (sort\
    \ (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n  \
    \       (when (= x col)\n           (list (list (length lst) col))))\n       \
    \ (\u03BB (a b) (or (and (< (car (car a)) (car (car b)))\n                   \
    \       (> (cadr (car a)) (cadr (car b))))\n                     (and (= (car\
    \ (car a)) (car (car b)))\n                          (> (cadr (car a)) (cadr (car\
    \ b))))))))\n", "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(empty? (first lst)) (get_row_helper (rest lst) x (add1\
    \ row) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list row col)\
    \ (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= x col)\n             (list (list (list-ref lst (sub1 (length lst)) row)\n\
    \                         (list-ref row (sub1 (length row)) col))))\n        \
    \ #:when (not (empty? row)))\n        (lambda (a b)\n          (if (= (car (car\
    \ a)) (car (car b)))\n              (if (= (cadr (car a)) (cadr (car b)))\n  \
    \                #t\n                  (> (cadr (car a)) (cadr (car b))))\n  \
    \            (< (car (car a)) (car (car b)))))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row-helper\
    \ (cdr lst) x (+ row 1) col))\n          ((= x (car (car lst))) (cons (list row\
    \ col) (get_row-helper (cdr (car lst)) x row (+ col 1))))\n          (else (get_row-helper\
    \ (cdr (car lst)) x row (+ col 1)))))\n  (sort (get_row-helper lst x 0 0)\n  \
    \      (lambda (x y)\n          (cond ((= (car x) (car y)) (< (cadr y) (cadr x)))\n\
    \                (else (< (car x) (car y)))))))\n", "  (define (get_row_helper\
    \ lst x row acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst))\
    \ (get_row_helper (rest lst) x (add1 row) acc)]\n      [(equal? x (first (first\
    \ lst)))\n       (get_row_helper (rest lst) x row (cons (list row 0) acc))]\n\
    \      [else (get_row_helper (rest lst) x row acc)]))\n  (sort (get_row_helper\
    \ lst x 0 '())\n        (lambda (x y)\n          (cond\n            [(< (first\
    \ x) (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(>\
    \ (second x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n   \
    \         [else #f]))))\n", "  (sort (filter (lambda (y) (equal? x (car y))) (get-coordinates\
    \ lst))\n        (lambda (x y)\n          (cond\n            [(> (car x) (car\
    \ y)) #t]\n            [(< (car x) (car y)) #f]\n            [(> (cadr x) (cadr\
    \ y)) #f]\n            [(< (cadr x) (cadr y)) #t]))))\n", "  (sort (for/list ([row\
    \ (in-list lst)]\n                   [col (in-list row)])\n        (when (= x\
    \ col)\n          (list (list (length lst) col))))\n        <))\n", "  (define\
    \ (get_row_helper lst x row col result)\n    (cond\n      [(empty? lst) result]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (+ row 1) 0 result)]\n\
    \      [(= x (first (first lst)))\n       (get_row_helper (rest (first lst)) x\
    \ row (+ col 1) (cons (list row col) result))]\n      [else (get_row_helper (rest\
    \ (first lst)) x row (+ col 1) result)]))\n  (sort (get_row_helper lst x 0 0 (list))\
    \ (lambda (x y) (or (< (first x) (first y))\n                                \
    \                           (and (= (first x) (first y))\n                   \
    \                                             (> (second x) (second y)))))))\n",
  "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n   \
    \   [(empty? (first lst)) (get_row_helper (rest lst) x acc)]\n      [(equal? x\
    \ (first (first lst)))\n       (get_row_helper (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row_helper (rest lst) x\
    \ (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper lst x (list))\n\
    \        (lambda (x y)\n          (cond\n            [(< (first x) (first y))\
    \ #t]\n            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (define (get_row_helper lst x row col acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (+ row 1) 0 acc)]\n\
    \      [(= x (first (first lst)))\n       (get_row_helper (rest (first lst)) x\
    \ row (+ col 1) (cons (list row col) acc))]\n      [else (get_row_helper (rest\
    \ (first lst)) x row (+ col 1) acc)]))\n  (sort (get_row_helper lst x 0 0 '())\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n                \
    \   [col (in-list row)])\n         (when (= x col)\n           (list (list (list-ref\
    \ lst row) col))))\n        (lambda (lst1 lst2)\n          (cond\n           \
    \ [(< (list-ref lst1 0) (list-ref lst2 0)) #t]\n            [(> (list-ref lst1\
    \ 0) (list-ref lst2 0)) #f]\n            [(> (list-ref lst1 1) (list-ref lst2\
    \ 1)) #t]\n            [(< (list-ref lst1 1) (list-ref lst2 1)) #f]))))\n", " \
    \ (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (when (= x col)\n           (list (length lst) col)))\n        <))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col)\n        \
    \           (list (length row) col))))\n        (lambda (x y)\n          (cond\
    \ [(> (car (car x)) (car (car y))) #t]\n                [(< (car (car x)) (car\
    \ (car y))) #f]\n                [(> (cadr (car x)) (cadr (car y))) #f]\n    \
    \            [(< (cadr (car x)) (cadr (car y))) #t]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define\
    \ (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (get_row-helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n\
    \       (get_row-helper (rest lst) x (cons (list (length acc) 0) acc))]\n    \
    \  [else (get_row-helper (rest (first lst)) x\n                            (cons\
    \ (list (length acc)\n                                        (length (first lst)))\n\
    \                                  acc))]))\n  (sort (get_row-helper lst x '())\n\
    \        (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first\
    \ lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(>\
    \ (second lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2))\
    \ #f]\n            [else #f]))))\n", "  (define (helper lst x acc)\n    (cond\n\
    \      [(empty? lst) (reverse acc)]\n      [(empty? (first lst)) (helper (rest\
    \ lst) x acc)]\n      [(= x (first (first lst)))\n       (helper (rest lst) x\
    \ (cons (list (length acc) 0) acc))]\n      [(= x (first (rest (first lst))))\n\
    \       (helper (rest lst) x (cons (list (length acc) 1) acc))]\n      [(= x (first\
    \ (rest (rest (first lst)))))\n       (helper (rest lst) x (cons (list (length\
    \ acc) 2) acc))]\n      [else (helper (rest lst) x acc)]))\n  (helper lst x (list)))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get-row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", "  (define\
    \ (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n   \
    \   [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(equal?\
    \ x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest lst)\
    \ x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get_row_helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]\n            [else #f]))))\n", "  (define (get-row-helper\
    \ lst x row col result)\n    (cond\n      [(empty? lst) result]\n      [(empty?\
    \ (first lst)) (get-row-helper (rest lst) x (+ row 1) 0 result)]\n      [(= x\
    \ (first (first lst)))\n       (get-row-helper (rest (first lst)) x row (+ col\
    \ 1) (cons (list row col) result))]\n      [else (get-row-helper (rest (first\
    \ lst)) x row (+ col 1) result)]))\n  (sort (get-row-helper lst x 0 0 '())\n \
    \       (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (define (get_row-helper lst x row col acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (add1 row) 0 acc)]\n\
    \      [(equal? x (first (first lst)))\n       (get_row-helper (rest (first lst))\
    \ x row (add1 col) (cons (list row col) acc))]\n      [else (get_row-helper (rest\
    \ (first lst)) x row (add1 col) acc)]))\n  (sort (get_row-helper lst x 0 0 '())\n\
    \        (lambda (a b)\n          (cond\n            [(< (first a) (first b))\
    \ #t]\n            [(> (first a) (first b)) #f]\n            [(> (second a) (second\
    \ b)) #t]\n            [(< (second a) (second b)) #f]\n            [else #f]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col)\n        \
    \           (list (length row) col))))\n        (lambda (lst1 lst2)\n        \
    \  (cond [(< (car (car lst1)) (car (car lst2))) #t]\n                [(> (car\
    \ (car lst1)) (car (car lst2))) #f]\n                [(< (cadr (car lst1)) (cadr\
    \ (car lst2))) #f]\n                [(> (cadr (car lst1)) (cadr (car lst2))) #t]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col)\n        \
    \           (list (length lst) col))))\n        (\u03BB (a b) (and (or (< (car\
    \ (car a)) (car (car b)))\n                          (= (car (car a)) (car (car\
    \ b))\n                             (< (cadr (car a)) (cadr (car b)))))\n    \
    \                  (or (> (cadr (car a)) (cadr (car b)))\n                   \
    \       (= (cadr (car a)) (cadr (car b))\n                             (> (car\
    \ (car a)) (car (car b)))))))))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row_helper (cdr\
    \ lst) x (+ row 1) 0))\n          ((= x (car (car lst)))\n           (cons (list\
    \ row col) (get_row_helper (cdr (car lst)) x row (+ col 1))))\n          (else\
    \ (get_row_helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond ((< (car x) (car y)) #t)\n\
    \                ((> (car x) (car y)) #f)\n                ((> (cadr x) (cadr\
    \ y)) #t)\n                ((< (cadr x) (cadr y)) #f)\n                (else #f)))))\n",
  "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n   \
    \   [(empty? (first lst)) (get_row_helper (rest lst) x acc)]\n      [(= x (first\
    \ (first lst)))\n       (get_row_helper (rest lst) x (cons (list (length acc)\
    \ 0) acc))]\n      [(= x (first (rest (first lst))))\n       (get_row_helper (rest\
    \ lst) x (cons (list (length acc) 1) acc))]\n      [(= x (first (rest (rest (first\
    \ lst)))))\n       (get_row_helper (rest lst) x (cons (list (length acc) 2) acc))]\n\
    \      [else (get_row_helper (rest lst) x acc)]))\n  (sort (get_row_helper lst\
    \ x (list))\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(< (second l1) (second l2)) #f]\n            [(> (second l1) (second l2))\
    \ #t]))))\n", "  (define (get_row_helper lst x row col result)\n    (cond\n  \
    \    [(null? lst) result]\n      [(null? (car lst)) (get_row_helper (cdr lst)\
    \ x (+ row 1) 0 result)]\n      [(equal? x (car (car lst)))\n       (get_row_helper\
    \ (cdr (car lst)) x row (+ col 1) (cons (list row col) result))]\n      [else\
    \ (get_row_helper (cdr (car lst)) x row (+ col 1) result)]))\n  (sort (get_row_helper\
    \ lst x 0 0 '())\n        (lambda (lst1 lst2)\n          (cond\n            [(<\
    \ (car lst1) (car lst2)) #t]\n            [(> (car lst1) (car lst2)) #f]\n   \
    \         [(> (cadr lst1) (cadr lst2)) #t]\n            [(< (cadr lst1) (cadr\
    \ lst2)) #f]\n            [else #f]))))\n", "  (cond\n    [(empty? lst) empty]\n\
    \    [else\n     (let ([row (first lst)])\n       (cond\n         [(empty? row)\
    \ (get_row (rest lst) x)]\n         [(= x (first row))\n          (append (list\
    \ (list (length lst) (length row)))\n                  (get_row (rest lst) x))]\n\
    \         [else (get_row (rest lst) x)]))]))\n", "  (define (get_row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row-helper (rest lst) x row (add1 col))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= x col) (list (list (list-ref\
    \ lst row) col))))\n        (\u03BB (x y) (and (< (car (car x)) (car (car y)))\n\
    \                      (> (cadr (car x)) (cadr (car y)))))))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= x col)\n             (list (length lst) col)))\n        <))\n", "  (define\
    \ (helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first\
    \ lst)) (helper (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n  \
    \     (helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [(equal?\
    \ x (first (rest (first lst))))\n       (helper (rest lst) x (cons (list (length\
    \ acc) 1) acc))]\n      [(equal? x (first (rest (rest (first lst)))))\n      \
    \ (helper (rest lst) x (cons (list (length acc) 2) acc))]\n      [else (helper\
    \ (rest lst) x acc)]))\n  (sort (helper lst x (list))\n        (lambda (x y)\n\
    \          (cond\n            [(< (first x) (first y)) #t]\n            [(> (first\
    \ x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]))))\n", "  (define (get_row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n \
    \           [(> (first x) (first y)) #f]\n            [(> (second x) (second y))\
    \ #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get-row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(= (first\
    \ l1) (first l2)) (< (second l1) (second l2))]\n            [else #f]))))\n",
  "  (sort (for/list ([(row . cols) (in-list lst)]\n                   [col (in-list\
    \ cols)])\n         (if (= x col)\n             (list row col)))\n        (\u03BB\
    \ (a b)\n          (cond\n            [(< (car a) (car b)) #t]\n            [(>\
    \ (car a) (car b)) #f]\n            [(< (cadr a) (cadr b)) #f]\n            [(>\
    \ (cadr a) (cadr b)) #t]))))\n", "  (define (get_row_helper lst x row col)\n \
    \   (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst))) (cons (list row\
    \ col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0) (lambda\
    \ (l1 l2) (cond\n                                                    [(< (first\
    \ l1) (first l2)) #t]\n                                                    [(>\
    \ (first l1) (first l2)) #f]\n                                               \
    \     [(> (second l1) (second l2)) #t]\n                                     \
    \               [(< (second l1) (second l2)) #f]))))\n", "  (cond [(empty? lst)\
    \ empty]\n        [(empty? (first lst)) (get_row (rest lst) x)]\n        [(equal?\
    \ x (first (first lst)))\n         (cons (list (length lst) (length (first lst)))\n\
    \               (get_row (rest lst) x))]\n        [else (get_row (rest lst) x)]))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (x y)\n      \
    \    (cond\n            [(< (first x) (first y)) #t]\n            [(> (first x)\
    \ (first y)) #f]\n            [(> (second x) (second y)) #t]\n            [(<\
    \ (second x) (second y)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (when (= x col)\n         \
    \  (list (list (length lst) col))))\n        (\u03BB (x y) (and (< (car (car x))\
    \ (car (car y)))\n                      (> (cadr (car x)) (cadr (car y)))))))\n",
  "  (sort (for/list ([(row i) (in-indexed lst)])\n          (for/list ([(col j) (in-indexed\
    \ row)])\n            (when (= x col)\n              (list i j))))\n        (\u03BB\
    \ (l1 l2)\n          (cond\n            [(< (car l1) (car l2)) #t]\n         \
    \   [(> (car l1) (car l2)) #f]\n            [(> (cadr l1) (cadr l2)) #t]\n   \
    \         [(< (cadr l1) (cadr l2)) #f]\n            [else #f]))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n    \
    \  [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(=\
    \ x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest lst)\
    \ x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (x y)\n          (cond\n\
    \            [(< (first x) (first y)) #t]\n            [(> (first x) (first y))\
    \ #f]\n            [(> (second x) (second y)) #t]\n            [(< (second x)\
    \ (second y)) #f]\n            [else #f]))))\n", "  (define (get-row-helper lst\
    \ x row-num)\n    (cond\n      [(empty? lst) empty]\n      [(member x (first lst))\n\
    \       (append (get-row-helper (rest lst) x (+ row-num 1))\n               (list\
    \ (list row-num (index-of x (first lst)))))\n       ]\n      [else (get-row-helper\
    \ (rest lst) x (+ row-num 1))]))\n  (sort (get-row-helper lst x 0)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n         \
    \   [(> (first x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n\
    \            [(< (second x) (second y)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond ((null? lst) '())\n          ((null?\
    \ (car lst)) (get_row-helper (cdr lst) x (+ row 1) 0))\n          ((= x (car (car\
    \ lst)))\n           (cons (list row col) (get_row-helper (cdr (car lst)) x row\
    \ (+ col 1))))\n          (else (get_row-helper (cdr (car lst)) x row (+ col 1)))))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (x y)\n          (cond ((<\
    \ (car x) (car y)) #t)\n                ((> (car x) (car y)) #f)\n           \
    \     ((> (cadr x) (cadr y)) #t)\n                ((< (cadr x) (cadr y)) #f)\n\
    \                (else #f)))))\n", "  (define (get_row_helper lst x acc)\n   \
    \ (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get_row_helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (get_row_helper (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper\
    \ lst x (list))\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row-helper lst x row col)\n\
    \    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row-helper (cdr\
    \ lst) x (+ row 1) 0))\n          ((= x (car (car lst)))\n           (cons (list\
    \ row col) (get_row-helper (cdr (car lst)) x row (+ col 1))))\n          (else\
    \ (get_row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond ((< (car x) (car y)) #t)\n\
    \                ((> (car x) (car y)) #f)\n                ((> (cadr x) (cadr\
    \ y)) #t)\n                ((< (cadr x) (cadr y)) #f)\n                (else #f)))))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (a b)\n        \
    \  (cond\n            [(< (first a) (first b)) #t]\n            [(> (first a)\
    \ (first b)) #f]\n            [(> (second a) (second b)) #t]\n            [(<\
    \ (second a) (second b)) #f]\n            [else #f]))))\n", "  (define (helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n\
    \       (cons (list row col) (helper (rest lst) x row (add1 col)))]\n      [else\
    \ (helper (rest lst) x row (add1 col))]))\n  (sort (helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
