name: HumanEval_114_minSubArraySum
language: rkt
prompt: "#lang racket\n\n;; Given an array of integers nums, find the minimum sum\
  \ of any non-empty sub-array\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list\
  \ 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6\n(define (minSubArraySum\
  \ nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n\
  \    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)\n    (check-equal? (candidate\
  \ (list -1 -2 -3)) -6)\n    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)\n\
  \    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)\n   \
  \ (check-equal? (candidate (list 0 10 20 1000000)) 0)\n    (check-equal? (candidate\
  \ (list -1 -2 -3 10 -5)) -6)\n    (check-equal? (candidate (list 100 -1 -2 -3 10\
  \ -5)) -6)\n    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)\n    (check-equal?\
  \ (candidate (list 100 -33 32 -1 0 -2)) -33)\n    (check-equal? (candidate (list\
  \ -10)) -10)\n    (check-equal? (candidate (list 7)) 7)\n    (check-equal? (candidate\
  \ (list 1 -1)) -1)\n))\n\n(test-humaneval)"
completions: ["  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n\
    \        min-sum\n        (let ((sum (apply + nums)))\n          (minSubArraySum-helper\
    \ (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (first nums) min-sum) (minSubArraySum-helper (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (first nums)))\n", "  (define (minSubArraySumHelper nums min-so-far)\n\
    \    (if (null? nums)\n        min-so-far\n        (minSubArraySumHelper (cdr\
    \ nums) (min min-so-far (apply + nums)))))\n  (minSubArraySumHelper nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let ((new-sum (+ (car nums) min-sum)))\n  \
    \        (minSubArraySum-helper (cdr nums) (min new-sum min-sum)))))\n  (minSubArraySum-helper\
    \ nums (car nums)))\n", "  (define (minSubArraySum-iter nums min-sum)\n    (cond\
    \ [(empty? nums) min-sum]\n          [(< (sum nums) min-sum) (minSubArraySum-iter\
    \ (rest nums) (sum nums))]\n          [else (minSubArraySum-iter (rest nums) min-sum)]))\n\
    \  (minSubArraySum-iter nums (sum nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-so-far)\n    (if (null? nums)\n        min-so-far\n        (let* ([curr-val\
    \ (car nums)]\n               [curr-min (min min-so-far curr-val)])\n        \
    \  (minSubArraySum-helper (cdr nums) curr-min))))\n  (minSubArraySum-helper nums\
    \ (car nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n              \
    \ [new-min-sum (if (< sum min-sum) sum min-sum)])\n          (minSubArraySum-helper\
    \ (cdr nums) new-min-sum))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-iter nums min-sum sum)\n  \
    \  (cond\n      [(empty? nums) min-sum]\n      [else\n       (let* ([n (first\
    \ nums)]\n              [new-sum (+ sum n)]\n              [new-min-sum (min min-sum\
    \ new-sum)])\n         (minSubArraySum-iter (rest nums) new-min-sum new-sum))]))\n\
    \  (minSubArraySum-iter nums (first nums) 0))\n", "  (define (minSubArraySum'\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let* ([sum (apply\
    \ + nums)]\n               [new-min-sum (if (< sum min-sum) sum min-sum)])\n \
    \         (minSubArraySum' (cdr nums) new-min-sum))))\n  (minSubArraySum' nums\
    \ (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\n \
    \                              (min min-sum (apply + nums)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n\
    \    (if (null? nums)\n        min-so-far\n        (let ((new-min (min min-so-far\
    \ (apply + nums))))\n          (minSubArraySum-helper (cdr nums) new-min))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum)\n    (match nums\n      [(list) min-sum]\n      [(list x xs)\n\
    \       (minSubArraySum-iter xs (min x (apply + xs)))]))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\
    \ (min min-sum (apply + nums)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let* ([sum (apply + nums)]\n               [new-min-sum (if (< sum min-sum)\
    \ sum min-sum)])\n          (minSubArraySum-helper (cdr nums) new-min-sum))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ((sum (apply\
    \ + nums)))\n          (if (< sum min-sum)\n              (minSubArraySum-helper\
    \ (cdr nums) sum)\n              (minSubArraySum-helper (cdr nums) min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum)\
    \ (minSubArraySum-iter (rest nums) (sum nums))]\n          [else (minSubArraySum-iter\
    \ (rest nums) min-sum)]))\n  (minSubArraySum-iter nums (sum nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n  \
    \        [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (cond\n\
    \      [(empty? nums) min-sum]\n      [(< (first nums) min-sum) (minSubArraySum'\
    \ (rest nums) (first nums))]\n      [else (minSubArraySum' (rest nums) min-sum)]))\n\
    \  (minSubArraySum' nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(< (sum nums)\
    \ min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n      [else (minSubArraySum-helper\
    \ (rest nums) min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
