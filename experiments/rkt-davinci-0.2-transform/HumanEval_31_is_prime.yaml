name: HumanEval_31_is_prime
language: rkt
prompt: "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n\
  ;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n\
  ;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime\
  \ 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n\
  \    (check-equal? (candidate 6) #f)\n    (check-equal? (candidate 101) #t)\n  \
  \  (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 13441) #t)\n \
  \   (check-equal? (candidate 61) #t)\n    (check-equal? (candidate 4) #f)\n    (check-equal?\
  \ (candidate 1) #f)\n    (check-equal? (candidate 5) #t)\n    (check-equal? (candidate\
  \ 11) #t)\n    (check-equal? (candidate 17) #t)\n    (check-equal? (candidate 85)\
  \ #f)\n    (check-equal? (candidate 77) #f)\n    (check-equal? (candidate 255379)\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 1)\n      #f\n      (if (= n 2)\n          #t\n        \
    \  (if (even? n)\n              #f\n              (let loop ((i 3))\n        \
    \        (if (> (* i i) n)\n                    #t\n                    (if (zero?\
    \ (modulo n i))\n                        #f\n                        (loop (+\
    \ i 2)))))))))\n", "  (define (is_prime-helper n i)\n    (cond\n      [(= i n)\
    \ #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_prime-helper n (+ i 1))]))\n\
    \  (cond\n    [(= n 1) #f]\n    [(= n 2) #t]\n    [else (is_prime-helper n 2)]))\n",
  "  (if (= n 1)\n      #f\n      (if (= n 2)\n          #t\n          (if (even?\
    \ n)\n              #f\n              (let loop ((i 3))\n                (if (=\
    \ i n)\n                    #t\n                    (if (zero? (modulo n i))\n\
    \                        #f\n                        (loop (+ i 2)))))))))\n",
  "  (define (is_prime-helper n i)\n    (cond ((= i 1) #t)\n          ((= (modulo\
    \ n i) 0) #f)\n          (else (is_prime-helper n (- i 1)))))\n  (is_prime-helper\
    \ n (- n 1)))\n", "  (define (is_prime-helper n i)\n    (cond ((= i 1) #t)\n \
    \         ((= (modulo n i) 0) #f)\n          (else (is_prime-helper n (- i 1)))))\n\
    \  (is_prime-helper n (- n 1)))\n", "  (define (is_prime-helper n divisor)\n \
    \   (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= (remainder n divisor)\
    \ 0) #f)\n          ((= divisor (sqrt n)) #t)\n          (else (is_prime-helper\
    \ n (+ divisor 1)))))\n  (is_prime-helper n 2))\n", "  (cond\n    [(= n 1) #f]\n\
    \    [(= n 2) #t]\n    [(= n 3) #t]\n    [(= n 5) #t]\n    [(= n 7) #t]\n    [(=\
    \ n 11) #t]\n    [(= n 13) #t]\n    [(= n 17) #t]\n    [(= n 19) #t]\n    [(=\
    \ n 23) #t]\n    [(= n 29) #t]\n    [(= n 31) #t]\n    [(= n 37) #t]\n    [(=\
    \ n 41) #t]\n    [(= n 43) #t]\n    [(= n 47) #t]\n    [(= n 53) #t]\n    [(=\
    \ n 59) #t]\n    [(= n 61) #t]\n    [(= n 67) #t]\n    [(= n 71) #t]\n    [(=\
    \ n 73) #t]\n    [(= n 79) #t]\n    [(= n 83) #t]\n    [(= n 89) #t]\n    [(=\
    \ n 97) #t]\n    [(= n 101) #t]\n    [(= n 103) #t]\n    [(= n 107) #t]\n    [(=\
    \ n 109) #t]\n    [(= n 113) #t]\n    [(= n 127) #t]\n    [(= n 131) #t]\n   \
    \ [(= n 137) #t]\n    [(= n 139) #t]\n    [(= n 149) #t]\n    [(= n 151) #t]\n\
    \    [(= n 157) #t]\n    [(= n 163) #t]\n    [(= n 167) #t]\n    [(= n 173) #t]\n\
    \    [(= n 179) #t]\n    [(= n 181) #t]\n    [(= n 191) #t]\n    [(= n 193) #t]\n\
    \    [(= n 197) #t]\n    [(= n 199) #t]\n    [(= n 211) #t]\n    [(= n 223) #t]\n\
    \    [(= n 227) #t]\n    [(= n 229) #", "  (if (= n 1)\n      #f\n      (if (=\
    \ n 2)\n          #t\n          (if (even? n)\n              #f\n            \
    \  (let loop ((i 3))\n                (if (= i n)\n                    #t\n  \
    \                  (if (zero? (modulo n i))\n                        #f\n    \
    \                    (loop (+ i 2)))))))))\n", "  (define (is_prime-helper n i)\n\
    \    (cond ((= i 1) #t)\n          ((= (modulo n i) 0) #f)\n          (else (is_prime-helper\
    \ n (- i 1)))))\n  (is_prime-helper n (floor (/ n 2))))\n", "  (define (is_prime-helper\
    \ n d)\n    (cond\n      [(= d 1) #t]\n      [(= (modulo n d) 0) #f]\n      [else\
    \ (is_prime-helper n (- d 1))]))\n  (if (= n 1)\n      #f\n      (is_prime-helper\
    \ n (- n 1))))\n", "  (define (is_prime-helper n divisor)\n    (cond ((= n 1)\
    \ #f)\n          ((= n 2) #t)\n          ((= n divisor) #t)\n          ((= (remainder\
    \ n divisor) 0) #f)\n          (else (is_prime-helper n (+ divisor 1)))))\n  (is_prime-helper\
    \ n 2))\n", "  (define (is_prime-helper n i)\n    (if (= i 1)\n        #t\n  \
    \      (if (= (modulo n i) 0)\n            #f\n            (is_prime-helper n\
    \ (- i 1)))))\n  (if (= n 1)\n      #f\n      (is_prime-helper n (- n 1))))\n",
  "  (define (is_prime-iter x)\n    (cond ((= x 1) #t)\n          ((= (modulo n x)\
    \ 0) #f)\n          (else (is_prime-iter (- x 1)))))\n  (is_prime-iter (- n 1)))\n",
  "  (define (is_prime-helper n i)\n    (cond\n      [(= i 1) #t]\n      [(= (modulo\
    \ n i) 0) #f]\n      [else (is_prime-helper n (- i 1))]))\n  (if (= n 1)\n   \
    \   #f\n      (is_prime-helper n (- n 1))))\n", "  (if (= n 1)\n      #f\n   \
    \   (if (= n 2)\n          #t\n          (let loop ((i 2))\n            (if (=\
    \ i n)\n                #t\n                (if (= (remainder n i) 0)\n      \
    \              #f\n                    (loop (+ i 1))))))))\n", "  (define (is_prime-helper\
    \ n i)\n    (cond\n      [(= i 1) #t]\n      [(= (modulo n i) 0) #f]\n      [else\
    \ (is_prime-helper n (- i 1))]))\n  (is_prime-helper n (floor (/ n 2))))\n", " \
    \ (cond\n    [(= n 1) #f]\n    [(= n 2) #t]\n    [(= n 3) #t]\n    [(= n 4) #f]\n\
    \    [(= n 5) #t]\n    [(= n 6) #f]\n    [(= n 7) #t]\n    [(= n 8) #f]\n    [(=\
    \ n 9) #f]\n    [(= n 10) #f]\n    [(= n 11) #t]\n    [(= n 12) #f]\n    [(= n\
    \ 13) #t]\n    [(= n 14) #f]\n    [(= n 15) #f]\n    [(= n 16) #f]\n    [(= n\
    \ 17) #t]\n    [(= n 18) #f]\n    [(= n 19) #t]\n    [(= n 20) #f]\n    [(= n\
    \ 21) #f]\n    [(= n 22) #f]\n    [(= n 23) #t]\n    [(= n 24) #f]\n    [(= n\
    \ 25) #f]\n    [(= n 26) #f]\n    [(= n 27) #f]\n    [(= n 28) #f]\n    [(= n\
    \ 29) #t]\n    [(= n 30) #f]\n    [(= n 31) #t]\n    [(= n 32) #f]\n    [(= n\
    \ 33) #f]\n    [(= n 34) #f]\n    [(= n 35) #f]\n    [(= n 36) #f]\n    [(= n\
    \ 37) #t]\n    [(= n 38) #f]\n    [(= n 39) #f]\n    [(= n 40) #f]\n    [(= n\
    \ 41) #t]\n    [(= n 42) #f]\n    [(= n 43) #t]\n    [(= n 44) #f]\n    [(= n\
    \ 45) #f]\n    [(= n 46) #f]\n    [(= n 47) #t]\n    [(= n 48) #f]\n    [(= n\
    \ 49) #f]\n    [(= n 50) #f]\n    [(= n 51) #", "  (define (is_prime-helper n\
    \ i)\n    (cond\n      [(= i 1) #t]\n      [(= (modulo n i) 0) #f]\n      [else\
    \ (is_prime-helper n (- i 1))]))\n  (is_prime-helper n (- n 1)))\n", "  (define\
    \ (divisible? a b)\n    (= (remainder a b) 0))\n  (define (find-divisor n test-divisor)\n\
    \    (cond ((> (square test-divisor) n) n)\n          ((divisible? n test-divisor)\
    \ test-divisor)\n          (else (find-divisor n (+ test-divisor 1)))))\n  (define\
    \ (smallest-divisor n)\n    (find-divisor n 2))\n  (define (prime? n)\n    (=\
    \ n (smallest-divisor n)))\n  (prime? n))\n", "  (define (is_prime-iter i)\n \
    \   (cond\n      [(= i 1) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_prime-iter\
    \ (- i 1))]))\n  (is_prime-iter (- n 1)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
