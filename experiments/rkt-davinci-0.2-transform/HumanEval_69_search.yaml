name: HumanEval_69_search
language: rkt
prompt: "#lang racket\n\n;; You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n;; zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n;; The frequency of an integer\
  \ is the number of times it appears in the list.\n;; If no such a value exist, return\
  \ -1.\n;; Examples:\n;; >>> (search (list 4 1 2 2 3 1))\n;; 2\n;; >>> (search (list\
  \ 1 2 2 3 3 3 4 4 4))\n;; 3\n;; >>> (search (list 5 5 4 4 4))\n;; -1\n(define (search\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n\
  \    (check-equal? (candidate (list 5 5 5 5 1)) 1)\n    (check-equal? (candidate\
  \ (list 4 1 4 1 4 4)) 4)\n    (check-equal? (candidate (list 3 3)) -1)\n    (check-equal?\
  \ (candidate (list 8 8 8 8 8 8 8 8)) 8)\n    (check-equal? (candidate (list 2 3\
  \ 3 2 2)) 2)\n    (check-equal? (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6\
  \ 7 1 7 4 10 8 1)) 1)\n    (check-equal? (candidate (list 3 2 8 2)) 2)\n    (check-equal?\
  \ (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1)\n    (check-equal? (candidate (list\
  \ 8 8 3 6 5 6 4)) -1)\n    (check-equal? (candidate (list 6 9 6 7 1 4 7 1 8 8 9\
  \ 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1)\n    (check-equal? (candidate (list 1 9 10\
  \ 1 3)) 1)\n    (check-equal? (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10\
  \ 2 8 6 5 4 9 5 3 10)) 5)\n    (check-equal? (candidate (list 1)) 1)\n    (check-equal?\
  \ (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4)\n    (check-equal?\
  \ (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2)\n    (check-equal?\
  \ (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1)\n    (check-equal? (candidate\
  \ (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4)\n \
  \   (check-equal? (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10\
  \ 7)) 4)\n    (check-equal? (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2\
  \ 3 1)) 2)\n    (check-equal? (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4\
  \ 10 7 7 10 8)) -1)\n    (check-equal? (candidate (list 10)) -1)\n    (check-equal?\
  \ (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2)\n    (check-equal? (candidate\
  \ (list 5 4 10 2 1 1 10 3 6 1 8)) 1)\n    (check-equal? (candidate (list 7 9 9 9\
  \ 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1)\n    (check-equal? (candidate (list\
  \ 3 10 10 9 2)) -1)\n))\n\n(test-humaneval)"
completions: ["  (let loop ((lst lst) (max 0) (freq 0))\n    (cond ((null? lst) (if\
    \ (>= freq max) max -1))\n          ((> (car lst) max) (loop (cdr lst) (car lst)\
    \ 1))\n          ((= (car lst) max) (loop (cdr lst) max (+ freq 1)))\n       \
    \   (else (loop (cdr lst) max freq)))))\n", "  (define (count x lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [(equal? x (first lst)) (+ 1 (count x (rest lst)))]\n\
    \      [else (count x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(and (> (count (first lst) lst) (first lst))\n\
    \            (> (first lst) 0)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper lst))\n", "  (let ([freq (make-hash)])\n    (for\
    \ ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq (apply max\
    \ (hash-values freq))])\n      (for ([i lst])\n        (when (and (> i 0) (= (hash-ref\
    \ freq i 0) i))\n          (return i)))\n      (for ([i lst])\n        (when (and\
    \ (> i 0) (>= (hash-ref freq i 0) i) (> i max-freq))\n          (return i)))\n\
    \      -1)))\n", "  (let ([max-freq (apply max (map (\u03BB (x) (length (filter\
    \ (\u03BB (y) (= x y)) lst))) lst))])\n    (if (= max-freq 1)\n        -1\n  \
    \      (apply max (filter (\u03BB (x) (= (length (filter (\u03BB (y) (= x y))\
    \ lst)) x)) lst)))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n  \
    \    (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when (and (> x\
    \ 0) (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define\
    \ (count x lst)\n    (cond [(empty? lst) 0]\n          [(= x (first lst)) (+ 1\
    \ (count x (rest lst)))]\n          [else (count x (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ lst))\n", "  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((=\
    \ x (car lst)) (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n\
    \  (define (search-helper lst)\n    (cond ((null? lst) -1)\n          ((= (count\
    \ (car lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper (sort lst <)))\n", "  (define (freq x lst)\n    (cond\n    \
    \  [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n   \
    \   [else (freq x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n \
    \     [(empty? lst) -1]\n      [(>= (freq (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ <)))\n", "  (define (search-aux lst acc)\n    (if (null? lst)\n        acc\n\
    \        (let ([x (car lst)])\n          (if (and (> x 0) (>= x (length (filter\
    \ (lambda (y) (= x y)) lst))))\n              (search-aux (cdr lst) x)\n     \
    \         (search-aux (cdr lst) acc)))))\n  (search-aux lst -1))\n", "  (let ([freq\
    \ (sort (map (\u03BB (x) (list x (count x lst))) (remove-duplicates lst))\n  \
    \                   (\u03BB (x y) (< (cadr x) (cadr y))))])\n    (cond [(empty?\
    \ freq) -1]\n          [(>= (cadr (first freq)) (car (first freq))) (car (first\
    \ freq))]\n          [else -1])))\n", "  (define (search-helper lst)\n    (if\
    \ (empty? lst)\n        -1\n        (let* ([x (first lst)]\n               [xs\
    \ (rest lst)]\n               [freq (count x lst)]\n               [rest-max (search-helper\
    \ xs)])\n          (if (and (>= freq x) (> x rest-max))\n              x\n   \
    \           rest-max))))\n  (search-helper lst))\n", "  (let ([max-freq (apply\
    \ max (map (lambda (x) (count x lst)) lst))])\n    (for/first ([x lst]\n     \
    \           #:when (and (> x 0)\n                            (>= (count x lst)\
    \ x)\n                            (>= (count x lst) max-freq)))\n      x)))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort > lst)))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst max)\n    (cond\n      [(empty? lst) max]\n      [(>= (count (first lst)\
    \ lst) (first lst)) (search-helper (rest lst) (first lst))]\n      [else (search-helper\
    \ (rest lst) max)]))\n  (search-helper lst -1))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (count x lst)\n\
    \    (cond [(empty? lst) 0]\n          [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n          [else (count x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ lst))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq (make-hash)])\n\
    \    (for-each (lambda (x) (hash-set! freq x (+ 1 (hash-ref freq x 0)))) lst)\n\
    \    (let ([max-freq (apply max (hash-values freq))])\n      (for-each (lambda\
    \ (x) (when (= (hash-ref freq x 0) x) (hash-set! freq x -1))) lst)\n      (apply\
    \ max (hash-values freq)))))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (if (>= (count i lst) i)\n          i\n\
    \          -1))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-set!\
    \ freq i (+ 1 (hash-ref freq i 0))))\n    (let ([max (apply max lst)])\n     \
    \ (for ([i (in-range 1 max)])\n        (when (and (>= (hash-ref freq i 0) i)\n\
    \                   (> i (hash-ref freq max 0)))\n          (set! max i)))\n \
    \     (if (> (hash-ref freq max 0) max)\n          max\n          -1))))\n", " \
    \ (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>=\
    \ (length (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (let ([max-freq (apply max (map (lambda (x) (count x lst)) lst))])\n    (if (and\
    \ (> max-freq 0) (member max-freq lst))\n        max-freq\n        -1)))\n", " \
    \ (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([lst (sort lst <)])\n\
    \    (for/first ([x (in-list lst)]\n                #:when (>= (count x lst) x))\n\
    \      x)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([lst (sort lst <)])\n    (let loop ([lst lst] [prev\
    \ (first lst)] [count 1])\n      (cond [(empty? lst) -1]\n            [(>= count\
    \ prev) prev]\n            [else (loop (rest lst) (first lst) 1)]))))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([x (in-list lst)])\n      (if (>= (count\
    \ x lst) x)\n          x\n          -1))))\n", "  (let ([max (apply max lst)])\n\
    \    (for/first ([i (in-range 1 (add1 max))])\n      (if (>= (count i lst) i)\n\
    \          i\n          -1))))\n", "  (letrec ([freq (lambda (lst)\n         \
    \          (cond [(empty? lst) empty]\n                         [(member? (first\
    \ lst) (rest lst)) (cons (first lst) (freq (rest lst)))]\n                   \
    \      [else (freq (rest lst))]))]\n           [freq-count (lambda (lst)\n   \
    \                      (cond [(empty? lst) empty]\n                          \
    \     [(member? (first lst) (rest lst)) (cons (first lst) (freq-count (rest lst)))]\n\
    \                               [else (freq-count (rest lst))]))]\n          \
    \ [freq-count-2 (lambda (lst)\n                           (cond [(empty? lst)\
    \ empty]\n                                 [(member? (first lst) (rest lst)) (cons\
    \ (first lst) (freq-count-2 (rest lst)))]\n                                 [else\
    \ (freq-count-2 (rest lst))]))]\n           [freq-count-3 (lambda (lst)\n    \
    \                       (cond [(empty? lst) empty]\n                         \
    \        [(member? (first lst) (rest lst)) (cons (first lst) (freq-count-3 (rest\
    \ lst)))]\n                                 [else (freq-count-3 (rest lst))]))]\n\
    \           [freq-count-4 (lambda (lst)\n                           (cond [(empty?\
    \ lst) empty]\n                                 [(member? (first lst) (rest lst))\
    \ (cons (first lst) (freq-count-4 (rest lst)))]\n                            \
    \     [else (freq-count-4 (rest lst))]))]\n           [freq-count-5 (lambda (lst)\n\
    \                           (cond [(empty? lst) empty]\n                     \
    \            [(member? (first lst) (rest lst)) (cons (first lst) (freq-count-5\
    \ (rest lst)))]\n                                 [else (freq-count-5 (rest lst))]))]\n\
    \           [freq-count-6 (lambda (lst)\n                           (cond [(empty?\
    \ lst) empty", "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([max (apply max\
    \ lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (if (>= (count i\
    \ lst) i)\n          i\n          -1))))\n", "  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq i 0) i))\n   \
    \       (return i)))\n      (for ([i lst])\n        (when (and (> i 0) (>= (hash-ref\
    \ freq i 0) i) (> i max-freq))\n          (return i)))\n      -1)))\n", "  (cond\n\
    \    [(empty? lst) -1]\n    [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \    [else (search (rest lst))]))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort > lst)))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (= (hash-ref freq x 0) x))\n          (return x))))\n    -1))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([i lst]\n                #:when (>= i\
    \ (count i lst)))\n      i)))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ >)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst >)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-set!\
    \ freq i (+ 1 (hash-ref freq i 0))))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([i lst])\n        (when (and (> i 0) (= max-freq (hash-ref\
    \ freq i)))\n          (return i))))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max (apply\
    \ max (hash-keys freq))])\n      (if (and (> max 0)\n               (>= (hash-ref\
    \ freq max 0) max))\n          max\n          -1))))\n", "  (let ([max (apply\
    \ max lst)])\n    (for/first ([i (in-range 1 max)])\n      (and (>= (count i lst)\
    \ i) i))))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1\
    \ (add1 max))])\n      (if (>= (count i lst) i)\n          i\n          -1))))\n",
  "  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((= x (car lst))\
    \ (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n  (define\
    \ (helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count (car lst) lst)\
    \ (car lst)) (car lst))\n          (else (helper (cdr lst)))))\n  (helper (sort\
    \ lst <)))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n \
    \         [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n\
    \          [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([max-freq (apply max (map (lambda (x) (length (filter\
    \ (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq 0)\n        -1\n  \
    \      (apply max (filter (lambda (x) (= (length (filter (lambda (y) (= x y))\
    \ lst)) x)) lst)))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort > lst)))\n", " \
    \ (let ([max-val (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max-val))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", " \
    \ (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \       [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (let ([frequencies (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first\
    \ ([(x f) frequencies] #:when (>= f x))\n      x)))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (count-occurrences\
    \ lst n)\n    (cond ((null? lst) 0)\n          ((= (car lst) n) (+ 1 (count-occurrences\
    \ (cdr lst) n)))\n          (else (count-occurrences (cdr lst) n))))\n  (define\
    \ (search-helper lst n)\n    (cond ((null? lst) -1)\n          ((and (<= (count-occurrences\
    \ lst n) n) (> n 0)) n)\n          (else (search-helper (cdr lst) (car lst)))))\n\
    \  (search-helper lst (car lst)))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq\
    \ 1)\n        -1\n        (apply max (filter (lambda (x) (= (length (filter (lambda\
    \ (y) (= x y)) lst)) x)) lst)))))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq\
    \ 0) -1 (apply max (filter (lambda (x) (and (> x 0) (>= x (length (filter (lambda\
    \ (y) (= x y)) lst))))) lst)))))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (< x max-freq) (= (hash-ref\
    \ freq x 0) x))\n          (return x)))\n      -1)))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([max (apply max\
    \ lst)])\n    (for/first ([i (in-range 1 max)])\n      (if (>= (count i lst) i)\n\
    \          i\n          -1))))\n", "  (define (count-occurrences lst n)\n    (cond\
    \ ((null? lst) 0)\n          ((= (car lst) n) (+ 1 (count-occurrences (cdr lst)\
    \ n)))\n          (else (count-occurrences (cdr lst) n))))\n  (define (find-max\
    \ lst)\n    (cond ((null? lst) -1)\n          ((>= (count-occurrences lst (car\
    \ lst)) (car lst)) (car lst))\n          (else (find-max (cdr lst)))))\n  (find-max\
    \ lst))\n", "  (let ([max-freq (apply max (map (lambda (x) (length (filter (lambda\
    \ (y) (= x y)) lst))) lst))])\n    (if (= max-freq 1)\n        -1\n        (apply\
    \ max (filter (lambda (x) (= (length (filter (lambda (y) (= x y)) lst)) x)) lst)))))\n",
  "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n    [else (search (rest lst))]))\n", "  (let ([max-freq (apply max (map\
    \ (lambda (x) (count x lst)) lst))])\n    (if (and (positive? max-freq) (not (zero?\
    \ (count max-freq lst))))\n        max-freq\n        -1)))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([max-freq (apply\
    \ max (map (\u03BB (x) (length (filter (\u03BB (y) (= x y)) lst))) lst))])\n \
    \   (if (= max-freq 0)\n        -1\n        (apply max (filter (\u03BB (x) (and\
    \ (> x 0) (>= (length (filter (\u03BB (y) (= x y)) lst)) x))) lst)))))\n", " \
    \ (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>=\
    \ (length (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (if (null?\
    \ lst)\n      -1\n      (let ([x (car lst)]\n            [xs (cdr lst)])\n   \
    \     (if (and (> x 0)\n                 (>= x (count x xs)))\n            x\n\
    \            (search xs)))))\n", "  (let ([max-freq (apply max (map (lambda (x)\
    \ (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq 1)\
    \ -1\n        (apply max (filter (lambda (x) (= (length (filter (lambda (y) (=\
    \ x y)) lst)) x)) lst)))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n\
    \      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref freq\
    \ x 0) x) (> x max-freq))\n          (set! max-freq x)))\n      (if (= max-freq\
    \ 0) -1 max-freq))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst) (lambda (x y)\
    \ (< (cadr x) (cadr y))))])\n    (if (null? freq)\n        -1\n        (let ([max\
    \ (car (last freq))])\n          (if (< (cadr max) (car max))\n              -1\n\
    \              (car max))))))\n", "  (cond [(empty? lst) -1]\n        [else (let\
    \ ([max (apply max lst)])\n                (cond [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n                      [else (search (rest lst))]))]))\n",
  "  (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([f\
    \ freq]\n                #:when (and (> (car f) 0)\n                         \
    \   (>= (car f) (cadr f))))\n      (car f))))\n", "  (let ([max-val (apply max\
    \ lst)])\n    (for/first ([i (in-range 1 (add1 max-val))])\n      (and (member\
    \ i lst)\n           (>= (count i lst) i)\n           i))))\n", "  (define (freq\
    \ x lst)\n    (cond ((null? lst) 0)\n          ((= x (car lst)) (+ 1 (freq x (cdr\
    \ lst))))\n          (else (freq x (cdr lst)))))\n  (define (search-helper lst)\n\
    \    (cond ((null? lst) -1)\n          ((>= (freq (car lst) lst) (car lst)) (car\
    \ lst))\n          (else (search-helper (cdr lst)))))\n  (search-helper (sort\
    \ lst <)))\n", "  (let ([max-freq (apply max (map (\u03BB (x) (length (filter\
    \ (\u03BB (y) (= x y)) lst))) lst))])\n    (if (= max-freq 1)\n        -1\n  \
    \      (apply max (filter (\u03BB (x) (>= x (length (filter (\u03BB (y) (= x y))\
    \ lst)))) lst)))))\n", "  (let ([max-freq (apply max (map (lambda (x) (length\
    \ (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq 0)\n      \
    \  -1\n        (apply max (filter (lambda (x) (>= x (length (filter (lambda (y)\
    \ (= x y)) lst)))) lst)))))\n", "  (define (search-helper lst)\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst))) lst))\
    \ (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n \
    \ (search-helper (sort lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n      (when\
    \ (and (> x 0) (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n    [else (search (rest lst))]))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (count x lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (count x lst)\n    (cond [(empty? lst) 0]\n  \
    \        [(= x (first lst)) (+ 1 (count x (rest lst)))]\n          [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n\
    \          [(>= (count (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([max-freq\
    \ (apply max (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n\
    \    (if (= max-freq 1)\n        -1\n        (apply max (filter (lambda (x) (=\
    \ max-freq (length (filter (lambda (y) (= x y)) lst)))) lst)))))\n", "  (define\
    \ (freq x)\n    (count x lst))\n  (define (greater-than-freq x)\n    (> (freq\
    \ x) x))\n  (define (greater-than-zero x)\n    (> x 0))\n  (define (greater-than-zero-and-freq\
    \ x)\n    (and (greater-than-freq x) (greater-than-zero x)))\n  (define (max-freq\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(greater-than-zero-and-freq (first\
    \ lst)) (first lst)]\n          [else (max-freq (rest lst))]))\n  (max-freq lst))\n",
  "  (let ([max-freq (apply max (map (lambda (x) (length (filter (lambda (y) (= x\
    \ y)) lst))) lst))])\n    (if (= max-freq 0)\n        -1\n        (car (filter\
    \ (lambda (x) (= (length (filter (lambda (y) (= x y)) lst)) max-freq)) lst)))))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst >)))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq\
    \ 0)\n        -1\n        (car (filter (lambda (x) (= (length (filter (lambda\
    \ (y) (= x y)) lst)) max-freq)) lst)))))\n", "  (let ([max-freq (apply max (map\
    \ length (group lst)))]\n        [max-val (apply max lst)])\n    (if (< max-val\
    \ max-freq)\n        max-val\n        -1)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (>= (hash-ref freq x 0) x) (> x max-freq))\n          (set! max-freq x)))\n\
    \      (if (= max-freq 0) -1 max-freq))))\n", "  (define (search-helper lst)\n\
    \    (cond [(null? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (car\
    \ lst))) lst)) (car lst)) (car lst)]\n          [else (search-helper (cdr lst))]))\n\
    \  (search-helper (sort lst >)))\n", "  (define (count x lst)\n    (cond\n   \
    \   [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n \
    \     [else (count x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort > lst)))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (member i lst)\n           (>= (count i lst) i)\n           i))))\n",
  "  (let ([max-freq (apply max (map (lambda (x) (length (filter (lambda (y) (= x\
    \ y)) lst))) lst))])\n    (if (and (> max-freq 0) (member max-freq lst))\n   \
    \     max-freq\n        -1)))\n", "  (define (count x lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n   \
    \ (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n   \
    \     (when (and (> x 0) (= (hash-ref freq x 0) x))\n          (return x)))\n\
    \      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref freq x 0) x) (>\
    \ x max-freq))\n          (return x)))\n      -1)))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (greatest-freq lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (greatest-freq (rest lst))]))\n  (greatest-freq\
    \ (sort lst <)))\n", "  (define (count x lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (find-max lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else (find-max\
    \ (rest lst))]))\n  (find-max lst))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (count x lst)) lst))])\n    (cond [(> max-freq 0) (cond [(>= max-freq (count\
    \ max-freq lst)) max-freq] [else -1])] [else -1])))\n", "  (define (search-helper\
    \ lst max)\n    (cond\n      [(empty? lst) max]\n      [(>= (count (first lst)\
    \ lst) (first lst)) (search-helper (rest lst) (first lst))]\n      [else (search-helper\
    \ (rest lst) max)]))\n  (if (empty? lst) -1 (search-helper lst 0)))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first\
    \ ([x freq]\n                #:when (and (> (cadr x) 0)\n                    \
    \        (>= (cadr x) (car x))))\n      (car x))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-set! freq i (+ 1 (hash-ref freq i 0))))\n   \
    \ (let ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n   \
    \     (when (= (hash-ref freq i) max-freq)\n          (when (>= i max-freq)\n\
    \            (return i))))\n      -1)))\n", "  (let ([max (apply max lst)])\n\
    \    (for/first ([x (in-range 1 (add1 max))]\n                #:when (>= (count\
    \ x lst) x))\n      x)))\n", "  (let ([lst (sort lst <)])\n    (for/first ([i\
    \ lst]\n                #:when (and (> i 0)\n                            (>= i\
    \ (count i lst))))\n      i)))\n", "  (define (search-helper lst)\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst))) lst))\
    \ (first lst))\n           (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([max-freq (apply\
    \ max (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n \
    \   (if (and (> max-freq 0) (member max-freq lst)) max-freq -1)))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n\
    \    (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n\
    \        (when (and (> x 0) (= (hash-ref freq x 0) x))\n          (return x)))\n\
    \      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref freq x 0) x) (>\
    \ x max-freq))\n          (return x)))\n      -1)))\n", "  (let ([lst (sort lst\
    \ <)])\n    (for/first ([x (in-list lst)])\n      (if (>= (count x lst) x)\n \
    \         x\n          -1))))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (if (>= (count i lst) i)\n          i\n\
    \          -1))))\n", "  (define (count x lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort > lst)))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq-lst\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (cond\n      [(empty? freq-lst)\
    \ -1]\n      [(>= (cadr (car freq-lst)) (car (car freq-lst))) (car (car freq-lst))]\n\
    \      [else (search (cdr freq-lst))])))\n", "  (let ([max (apply max lst)])\n\
    \    (for/first ([x (in-range 1 (add1 max))])\n      (and (member x lst)\n   \
    \        (count x lst)\n           (>= (count x lst) x)\n           x))))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (cond\n    [(empty? lst) -1]\n    [(>= (length (filter (lambda (x) (= x (first\
    \ lst))) lst)) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (let ([max-freq (apply max (map (lambda (x) (length (filter (lambda (y) (= x\
    \ y)) lst))) lst))])\n    (if (not (member max-freq lst))\n        -1\n      \
    \  max-freq)))\n", "  (define (count-occurrences lst n)\n    (cond ((null? lst)\
    \ 0)\n          ((= (car lst) n) (+ 1 (count-occurrences (cdr lst) n)))\n    \
    \      (else (count-occurrences (cdr lst) n))))\n  (define (search-helper lst\
    \ n)\n    (cond ((null? lst) -1)\n          ((>= (count-occurrences lst n) n)\
    \ n)\n          (else (search-helper (cdr lst) (+ n 1)))))\n  (search-helper lst\
    \ 1))\n", "  (let ([lst (sort lst <)])\n    (for/first ([i lst]\n            \
    \    #:when (>= (count i lst) i))\n      i)))\n", "  (let ([lst (sort lst <)])\n\
    \    (let loop ([lst lst] [prev (car lst)] [count 1])\n      (cond [(null? lst)\
    \ -1]\n            [(>= count prev) prev]\n            [else (loop (cdr lst) (car\
    \ lst) (if (= prev (car lst)) (+ count 1) 1))]))))\n", "  (define (count x lst)\n\
    \    (cond ((null? lst) 0)\n          ((= x (car lst)) (+ 1 (count x (cdr lst))))\n\
    \          (else (count x (cdr lst)))))\n  (define (search-helper lst)\n    (cond\
    \ ((null? lst) -1)\n          ((>= (count (car lst) lst) (car lst)) (car lst))\n\
    \          (else (search-helper (cdr lst)))))\n  (search-helper (sort lst >)))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n\
    \        (when (and (> x 0) (= (hash-ref freq x 0) x))\n          (return x)))\n\
    \      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref freq x 0) x) (>\
    \ x max-freq))\n          (return x)))\n      -1)))\n", "  (define (search-helper\
    \ lst)\n    (if (empty? lst)\n        -1\n        (let* ([x (first lst)]\n   \
    \            [xs (rest lst)]\n               [count (count x xs)])\n         \
    \ (if (and (> x 0) (>= count x))\n              x\n              (search-helper\
    \ xs)))))\n  (search-helper lst))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq\
    \ 1)\n        -1\n        (apply max (filter (lambda (x) (and (> x 0) (= (length\
    \ (filter (lambda (y) (= x y)) lst)) x))) lst)))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i lst])\n        (when (and (>\
    \ i 0) (= (hash-ref freq i 0) i))\n          (return i)))\n      (when (and (>\
    \ max-freq 0) (>= max-freq (hash-ref freq max-freq 0)))\n        max-freq)\n \
    \     -1)))\n", "  (let ([max-freq (apply max (map (lambda (x) (count x lst))\
    \ lst))])\n    (if (and (not (zero? max-freq))\n             (not (zero? (count\
    \ max-freq lst))))\n        max-freq\n        -1)))\n", "  (let ([max (apply max\
    \ lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (and (>= (count\
    \ i lst) i) i))))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (if (>= (count i lst) i)\n          i\n          -1))))\n",
  "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n    [else (search (rest lst))]))\n", "  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (let ([lst (sort lst <)])\n    (for/first ([x (in-list\
    \ lst)])\n      (if (>= (count x lst) x)\n          x\n          -1))))\n", " \
    \ (let ([max-freq (apply max (map (\u03BB (x) (length (filter (\u03BB (y) (= x\
    \ y)) lst))) lst))])\n    (if (= max-freq 1)\n        -1\n        (apply max (filter\
    \ (\u03BB (x) (= max-freq (length (filter (\u03BB (y) (= x y)) lst)))) lst)))))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for/first\
    \ ([x lst] #:when (>= (hash-ref freq x 0) x))\n        x))))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n   \
    \ (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n   \
    \     (when (and (>= (hash-ref freq x 0) x)\n                   (> x (hash-ref\
    \ freq max-freq -1)))\n          (hash-set! freq max-freq x)))\n      (hash-ref\
    \ freq max-freq -1))))\n", "  (define (count x lst)\n    (cond [(empty? lst) 0]\n\
    \          [(= x (first lst)) (+ 1 (count x (rest lst)))]\n          [else (count\
    \ x (rest lst))]))\n  (define (max-freq lst)\n    (cond [(empty? lst) -1]\n  \
    \        [(>= (count (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (max-freq (rest lst))]))\n  (max-freq lst))\n", "  (define (search-helper lst)\n\
    \    (cond [(null? lst) -1]\n          [(>= (count (car lst) lst) (car lst)) (car\
    \ lst)]\n          [else (search-helper (cdr lst))]))\n  (search-helper (sort\
    \ lst <)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let loop ([lst lst] [freq (make-hash)])\n    (cond [(empty?\
    \ lst) -1]\n          [(hash-ref freq (first lst) (lambda () 0))\n           (loop\
    \ (rest lst) freq)]\n          [else\n           (hash-set! freq (first lst) (+\
    \ 1 (hash-ref freq (first lst) (lambda () 0))))\n           (loop (rest lst) freq)])))\n",
  "  (define (search-helper lst)\n    (cond [(null? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (car lst))) lst)) (car lst)) (car lst)]\n         \
    \ [else (search-helper (cdr lst))]))\n  (search-helper (sort lst >)))\n", "  (define\
    \ (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+\
    \ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (cond\n   \
    \ [(empty? lst) -1]\n    [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \    [else (search (rest lst))]))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq\
    \ x 0) x))\n          (return x)))\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (>= (hash-ref freq x 0) x) (> x max-freq))\n          (return x)))\n  \
    \    -1)))\n", "  (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n\
    \    (for/first ([x (in-list freq)]\n                #:when (and (> (car x) 0)\
    \ (>= (car x) (cadr x))))\n      (car x))))\n", "  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x\
    \ (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define (search-helper\
    \ lst)\n    (cond ((null? lst) -1)\n          ((>= (length (filter (lambda (x)\
    \ (= x (car lst))) lst)) (car lst)) (car lst))\n          (else (search-helper\
    \ (cdr lst)))))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst)\n    (define (count-occurrences lst x)\n      (cond [(empty? lst) 0]\n\
    \            [(= (first lst) x) (+ 1 (count-occurrences (rest lst) x))]\n    \
    \        [else (count-occurrences (rest lst) x)]))\n    (cond [(empty? lst) -1]\n\
    \          [(>= (count-occurrences lst (first lst)) (first lst)) (first lst)]\n\
    \          [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", " \
    \ (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>=\
    \ (length (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let loop ([lst lst])\n      (cond [(null? lst) -1]\n            [(>=\
    \ (hash-ref freq (car lst) 0) (car lst)) (car lst)]\n            [else (loop (cdr\
    \ lst))]))))\n", "  (let ([max-val (apply max lst)])\n    (define (search-helper\
    \ lst max-val)\n      (cond\n        [(empty? lst) -1]\n        [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n        [else (search-helper (rest lst)\
    \ max-val)]))\n    (search-helper lst max-val)))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq (map (\u03BB\
    \ (x) (list x (count x lst))) lst)])\n    (for/first ([x freq]\n             \
    \   #:when (and (not (null? x))\n                            (> (car x) 0)\n \
    \                           (>= (car x) (cadr x))))\n      (car x))))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([i lst]\n                #:when (and (>\
    \ i 0)\n                            (>= i (count i lst))))\n      i)))\n", " \
    \ (define (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first\
    \ lst)) (+ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([lst (sort lst <)])\n    (for/first\
    \ ([x (in-list lst)])\n      (if (>= (count x lst) x)\n          x\n         \
    \ -1))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-set!\
    \ freq x (+ 1 (hash-ref freq x 0))))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (= (hash-ref freq x 0) max-freq)\n\
    \          (when (>= max-freq x)\n            (return x))))\n      -1)))\n", " \
    \ (cond\n    [(empty? lst) -1]\n    [(>= (length (filter (lambda (x) (= x (first\
    \ lst))) lst)) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (>= (hash-ref freq x 0) x) (> x max-freq))\n          (set! max-freq x)))\n\
    \      (if (= max-freq 0) -1 max-freq))))\n", "  (define (count x lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n\
    \      [else (count x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ >)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst <)))\n", "  (let ([max-val (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max-val))])\n      (if (>= (count i lst) i)\n          i\n         \
    \ -1))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (cond [(empty? lst) -1]\n\
    \        [else (cond [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \                    [else (search (rest lst))])]))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (define\
    \ (search-helper lst)\n    (define (count-occurences lst num)\n      (cond\n \
    \       [(empty? lst) 0]\n        [(= (first lst) num) (+ 1 (count-occurences\
    \ (rest lst) num))]\n        [else (count-occurences (rest lst) num)]))\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count-occurences lst (first lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([max (apply max lst)])\n    (for/first ([n (in-range\
    \ 1 max)])\n      (if (>= (count n lst) n)\n          n\n          -1))))\n",
  "  (let ([freq (make-hash)])\n    (for ([e lst])\n      (hash-update! freq e add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([e lst])\n\
    \        (when (and (> e 0) (= (hash-ref freq e 0) e))\n          (return e))))\n\
    \    -1))\n", "  (let ([freq-lst (map (lambda (x) (list x (count x lst))) lst)])\n\
    \    (for/first ([x freq-lst] #:when (and (> (car x) 0) (>= (car x) (cadr x))))\n\
    \      (car x))))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n     \
    \ (hash-update! freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n\
    \      (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq i 0) i))\n\
    \          (return i))))\n    -1))\n", "  (let ([lst (sort lst <)])\n    (let\
    \ loop ([lst lst] [prev (car lst)] [count 1])\n      (cond [(null? lst) -1]\n\
    \            [(>= count prev) prev]\n            [else (loop (cdr lst) (car lst)\
    \ (if (= prev (car lst)) (+ count 1) 1))]))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (if (and (> max-freq 0) (>= max-freq\
    \ (hash-ref freq max-freq)))\n          max-freq\n          -1))))\n", "  (define\
    \ (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+\
    \ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort > lst)))\n", "  (let ([max-freq (apply max (map (lambda (x) (count x lst))\
    \ lst))])\n    (if (and (not (zero? max-freq))\n             (not (zero? (count\
    \ max-freq lst))))\n        max-freq\n        -1)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([e lst])\n      (hash-set! freq e (+ 1 (hash-ref freq e 0))))\n   \
    \ (let ([max-freq (apply max (hash-values freq))])\n      (for ([e lst])\n   \
    \     (when (and (> e 0) (= (hash-ref freq e) max-freq))\n          (return e))))\n\
    \    -1))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-set!\
    \ freq i (add1 (hash-ref freq i 0))))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq\
    \ i 0) max-freq))\n          (return i))))\n    -1))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(null? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (car lst))) lst)) (car lst)) (car lst)]\n      [else (search-helper\
    \ (cdr lst))]))\n  (search-helper (sort lst <)))\n", "  (cond\n    [(empty? lst)\
    \ -1]\n    [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n    [else (search (rest lst))]))\n", "  (define (count x lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
