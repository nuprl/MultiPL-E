name: HumanEval_40_triples_sum_to_zero
language: rkt
prompt: "#lang racket\n\n;; triples_sum_to_zero takes a list of integers as an input.\n\
  ;; it returns True if there are three distinct elements in the list that\n;; sum\
  \ to zero, and False otherwise.\n;; >>> (triples_sum_to_zero (list 1 3 5 0))\n;;\
  \ #f\n;; >>> (triples_sum_to_zero (list 1 3 -2 1))\n;; #t\n;; >>> (triples_sum_to_zero\
  \ (list 1 2 3 7))\n;; #f\n;; >>> (triples_sum_to_zero (list 2 4 -5 3 9 7))\n;; #t\n\
  ;; >>> (triples_sum_to_zero (list 1))\n;; #f\n(define (triples_sum_to_zero l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 5 -1)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #t)\n    (check-equal?\
  \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 1 2 5 7)) #f)\n\
  \    (check-equal? (candidate (list 2 4 -5 3 9 7)) #t)\n    (check-equal? (candidate\
  \ (list 1)) #f)\n    (check-equal? (candidate (list 1 3 5 -100)) #f)\n    (check-equal?\
  \ (candidate (list 100 3 5 -100)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (cond\n       [(= (list-ref\
    \ l 0) (list-ref l 1) (list-ref l 2)) #f]\n       [(= (list-ref l 0) (list-ref\
    \ l 1) (- (list-ref l 2))) #t]\n       [(= (list-ref l 0) (list-ref l 2) (- (list-ref\
    \ l 1))) #t]\n       [(= (list-ref l 1) (list-ref l 2) (- (list-ref l 0))) #t]\n\
    \       [else (triples_sum_to_zero (rest l))])])\n  )\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (or\n      (and\n       (= (sum (first l) (first (rest\
    \ l)) (first (rest (rest l)))) 0)\n       (not (member (first l) (rest (rest l))))\n\
    \       (not (member (first (rest l)) (rest (rest l))))\n       (not (member (first\
    \ (rest (rest l))) (rest (rest l)))))\n      (triples_sum_to_zero (rest l)))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (rest l))\n    \
    \      (member (list-ref l 0) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (cond\n       [(= (list-ref\
    \ l 0) (list-ref l 1) (list-ref l 2)) #f]\n       [(= (list-ref l 0) (list-ref\
    \ l 1) (list-ref l 2)) #f]\n       [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n       [else\n        (cond\n          [(= (list-ref l 0) (list-ref\
    \ l 1) (list-ref l 2)) #f]\n          [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n          [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n\
    \          [else\n           (cond\n             [(= (list-ref l 0) (list-ref\
    \ l 1) (list-ref l 2)) #f]\n             [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n             [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n\
    \             [else\n              (cond\n                [(= (list-ref l 0) (list-ref\
    \ l 1) (list-ref l 2)) #f]\n                [(= (list-ref l 0) (list-ref l 1)\
    \ (list-ref l 2)) #f]\n                [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n                [else\n                 (cond\n                 \
    \  [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n                   [(=\
    \ (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n                   [(= (list-ref\
    \ l 0) (list-ref l 1) (list-ref l 2)) #f]\n                   [else\n        \
    \            (cond\n                      [(=", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l)\
    \ (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest\
    \ l))) #f]\n    [else\n     (let ([x (first l)]\n           [y (first (rest l))]\n\
    \           [z (first (rest (rest l)))])\n       (or\n        (and (= x 0) (=\
    \ y 0) (= z 0))\n        (and (= (+ x y z) 0))\n        (triples_sum_to_zero (rest\
    \ l))))]))\n", "  (cond\n    [(null? l) #f]\n    [(and (member (car l) (cdr l))\
    \ (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(null?\
    \ (cddr l)) #f]\n    [(and (not (member 0 l))\n          (not (member (car l)\
    \ (cdr l)))\n          (not (member (car l) (cddr l)))\n          (not (member\
    \ (cadr l) (cddr l))))\n     (triples_sum_to_zero (cdr l))]\n    [else\n     (or\
    \ (and (= (car l) 0)\n              (member (cadr l) (cddr l))\n             \
    \ (member (caddr l) (cddr l)))\n         (and (= (cadr l) 0)\n              (member\
    \ (car l) (cddr l))\n              (member (caddr l) (cddr l)))\n         (and\
    \ (= (caddr l) 0)\n              (member (car l) (cdr l))\n              (member\
    \ (cadr l) (cdr l)))\n         (and (= (+ (car l) (cadr l)) (caddr l))\n     \
    \         (member (- (caddr l) (car l)) (cddr l)))\n         (and (= (+ (car l)\
    \ (caddr l)) (cadr l))\n              (member (- (cadr l) (car l)) (cddr l)))\n\
    \         (and (= (+ (cadr l) (caddr l)) (car l))\n              (member (- (car\
    \ l) (cadr l)) (cddr l)))\n         (triples_sum_to_zero (cdr l)))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty?\
    \ (rest (rest l))) #f]\n    [else\n     (or\n      (and\n       (= (sum (first\
    \ l) (first (rest l)) (first (rest (rest l)))) 0)\n       (not (member (first\
    \ l) (rest (rest l))))\n       (not (member (first (rest l)) (rest (rest l))))\n\
    \       (not (member (first (rest (rest l))) (rest (rest l)))))\n      (triples_sum_to_zero\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond ((null? l) #f)\n        ((null? (cdr l)) #f)\n   \
    \     ((null? (cddr l)) #f)\n        ((and (member 0 l) (member (car l) (cdr l))\
    \ (member (car l) (cddr l))) #t)\n        (else (triples_sum_to_zero (cdr l)))))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty?\
    \ (rest (rest l))) #f]\n    [else\n     (cond\n       [(= (sum (first l) (first\
    \ (rest l)) (first (rest (rest l)))) 0) #t]\n       [else (triples_sum_to_zero\
    \ (rest l))])]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(= (length l) 1) #f]\n \
    \   [(= (length l) 2) #f]\n    [else\n     (let ([a (first l)]\n           [b\
    \ (second l)]\n           [c (third l)])\n       (cond\n         [(= (+ a b c)\
    \ 0) #t]\n         [else (triples_sum_to_zero (rest l))]))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (define (triples_sum_to_zero_helper l1 l2)\n    (cond\n \
    \     [(empty? l1) #f]\n      [(empty? l2) (triples_sum_to_zero_helper (rest l1)\
    \ (rest l1))]\n      [(empty? (rest l2)) (triples_sum_to_zero_helper (rest l1)\
    \ (rest l1))]\n      [(zero? (+ (first l1) (first l2) (first (rest l2)))) #t]\n\
    \      [else (triples_sum_to_zero_helper l1 (rest l2))]))\n  (triples_sum_to_zero_helper\
    \ l l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\
    \ (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (define (helper l)\n    (cond\n      [(empty? l) #f]\n      [(and\
    \ (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n      [else\
    \ (helper (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\
    \ (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (let loop ([l l] [i 0])\n    (cond [(empty? l) #f]\n          [(and (member (sub1\
    \ i) l) (member (sub1 (- 0 i)) l)) #t]\n          [else (loop (rest l) (add1 i))])))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty?\
    \ (rest (rest l))) #f]\n    [else\n     (let* ([a (first l)]\n            [b (first\
    \ (rest l))]\n            [c (first (rest (rest l)))]\n            [rest-of-list\
    \ (rest (rest (rest l)))]\n            [rest-of-list-with-a (cons a rest-of-list)]\n\
    \            [rest-of-list-with-b (cons b rest-of-list)]\n            [rest-of-list-with-c\
    \ (cons c rest-of-list)])\n       (or (and (member? (- a b) rest-of-list-with-c)\n\
    \                (not (member? a rest-of-list-with-b))\n                (not (member?\
    \ b rest-of-list-with-a))\n                (not (member? c rest-of-list-with-a))\n\
    \                (not (member? c rest-of-list-with-b)))\n           (triples_sum_to_zero\
    \ (rest l))))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n    [(empty?\
    \ (cddr l)) #f]\n    [(and (not (empty? (cdddr l)))\n          (member (list (car\
    \ l) (cadr l) (caddr l))\n                  (list (list (car l) (cadr l) (caddr\
    \ l))\n                        (list (car l) (cadr l) (cadddr l))\n          \
    \              (list (car l) (caddr l) (cadddr l))\n                        (list\
    \ (cadr l) (caddr l) (cadddr l)))))\n     #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l))\n          (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n \
    \   [(empty? (cddr l)) #f]\n    [(and (not (empty? (cdddr l)))\n          (or\
    \ (and (= (car l) (car (cdr l)))\n                   (= (car l) (car (cddr l))))\n\
    \              (and (= (car l) (car (cddr l)))\n                   (= (car l)\
    \ (car (cdddr l))))\n              (and (= (car l) (car (cdr l)))\n          \
    \         (= (car l) (car (cdddr l))))))\n     (triples_sum_to_zero (cdr l))]\n\
    \    [(and (not (empty? (cdddr l)))\n          (or (and (= (car l) (car (cdr l)))\n\
    \                   (= (car l) (car (cddr l))))\n              (and (= (car l)\
    \ (car (cddr l)))\n                   (= (car l) (car (cdddr l))))\n         \
    \     (and (= (car l) (car (cdr l)))\n                   (= (car l) (car (cdddr\
    \ l))))))\n     (triples_sum_to_zero (cdr l))]\n    [(and (not (empty? (cdddr\
    \ l)))\n          (or (and (= (car l) (car (cdr l)))\n                   (= (car\
    \ l) (car (cddr l))))\n              (and (= (car l) (car (cddr l)))\n       \
    \            (= (car l) (car (cdddr l))))\n              (and (= (car l) (car\
    \ (cdr l)))\n                   (= (car l) (car (cdddr l))))))\n     (triples_sum_to_zero\
    \ (cdr l))]\n    [(and (not (empty? (cdddr l)))\n          (or (and (= (car l)\
    \ (car (cdr l)))\n                   (= (car l) (car (cddr l))))\n           \
    \   (and (= (car l) (car (cddr l)))\n                   (= (car l) (car (cdddr\
    \ l))))\n              (and", "  (cond [(empty? l) #f]\n        [(and (member\
    \ (list-ref l 0) (cdr l))\n              (member (list-ref l 0) (cddr l))) #t]\n\
    \        [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest l))))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (let* ([a (first l)]\n            [b (first (rest l))]\n\
    \            [c (first (rest (rest l)))]\n            [rest-l (rest (rest (rest\
    \ l)))]\n            [sum (+ a b c)])\n       (cond\n         [(= sum 0) #t]\n\
    \         [else (triples_sum_to_zero (cons a rest-l))]))]))\n", "  (cond\n   \
    \ [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l))\
    \ (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l))\n         \
    \ (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (define (triples_sum_to_zero_helper l)\n    (cond\n      [(null? l) #f]\n   \
    \   [(and (member (- (car l) (car (cdr l))) (cdr (cdr l)))\n            (member\
    \ (- (car l) (car (cdr (cdr l)))) (cdr (cdr l)))) #t]\n      [else (triples_sum_to_zero_helper\
    \ (cdr l))]))\n  (triples_sum_to_zero_helper (sort l <)))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(null? l) #f]\n    [(and (member (car l) (cdr l))\n          (member (car\
    \ l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n\
    \    [(empty? (rest (rest l))) false]\n    [else\n     (or\n      (and\n     \
    \  (= (sum (first l) (first (rest l)) (first (rest (rest l)))) 0)\n       true)\n\
    \      (triples_sum_to_zero (rest l)))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\
    \ (or (and (zero? (+ (first l) (first (rest l)) (first (rest (rest l))))) #t)\n\
    \              (triples_sum_to_zero (rest l)))]))\n", "  (cond ((null? l) #f)\n\
    \        ((null? (cdr l)) #f)\n        ((null? (cddr l)) #f)\n        ((and (member\
    \ (- (car l) (cadr l)) (cddr l))\n              (not (member (car l) (cddr l))))\n\
    \         #t)\n        (else (triples_sum_to_zero (cdr l)))))\n", "  (define (triples_sum_to_zero_helper\
    \ l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n      [(empty?\
    \ (rest (rest l))) #f]\n      [(and (not (member (add1 (add1 (add1 0))) l))\n\
    \            (not (member (add1 (add1 0)) l))\n            (not (member (add1\
    \ 0) l)))\n       (triples_sum_to_zero_helper (rest l))]\n      [else #t]))\n\
    \  (triples_sum_to_zero_helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\
    \ #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n \
    \   [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (define (triples_sum_to_zero_helper l1 l2)\n    (cond ((null?\
    \ l1) #f)\n          ((null? l2) (triples_sum_to_zero_helper (cdr l1) (cdr l1)))\n\
    \          ((= (list-ref l1 0) (- (list-ref l2 0))) #f)\n          ((= 0 (+ (list-ref\
    \ l1 0) (list-ref l2 0))) #t)\n          (else (triples_sum_to_zero_helper l1\
    \ (cdr l2)))))\n  (triples_sum_to_zero_helper l l))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (define\
    \ (triples_sum_to_zero_helper l1 l2)\n    (cond\n      [(empty? l1) #f]\n    \
    \  [(empty? l2) (triples_sum_to_zero_helper (rest l1) (rest l1))]\n      [(= 0\
    \ (+ (first l1) (first l2))) #t]\n      [else (triples_sum_to_zero_helper l1 (rest\
    \ l2))]))\n  (triples_sum_to_zero_helper l l))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\
    \ #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (rest l))\n          (member\
    \ (list-ref l 0) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\n          (member\
    \ (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", " \
    \ (define (triples_sum_to_zero_helper l1 l2)\n    (cond\n      [(empty? l1) #f]\n\
    \      [(empty? l2) (triples_sum_to_zero_helper (rest l1) (rest l1))]\n      [(empty?\
    \ (rest l2)) (triples_sum_to_zero_helper (rest l1) (rest l1))]\n      [(= (sum\
    \ (list (first l1) (first l2) (second l2))) 0) #t]\n      [else (triples_sum_to_zero_helper\
    \ l1 (rest l2))]))\n  (triples_sum_to_zero_helper l l))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\n\
    \     (cond\n       [(= (sum (first l) (first (rest l)) (first (rest (rest l))))\
    \ 0) #t]\n       [else (triples_sum_to_zero (rest l))])]))\n", "  (define (triples_sum_to_zero_helper\
    \ l1 l2)\n    (cond\n      [(empty? l1) #f]\n      [(empty? l2) (triples_sum_to_zero_helper\
    \ (rest l1) (rest l1))]\n      [(= 0 (+ (first l1) (first l2))) #t]\n      [else\
    \ (triples_sum_to_zero_helper l1 (rest l2))]))\n  (triples_sum_to_zero_helper\
    \ l l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l))\n\
    \          (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (define (triples_sum_to_zero_helper l1 l2)\n    (cond\n      [(empty? l1) #f]\n\
    \      [(empty? l2) (triples_sum_to_zero_helper (rest l1) (rest l1))]\n      [(=\
    \ (sum (list (first l1) (first l2))) 0) #t]\n      [else (triples_sum_to_zero_helper\
    \ l1 (rest l2))]))\n  (triples_sum_to_zero_helper l l))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n         \
    \ (member (list-ref l 0) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (define (triples_sum_to_zero_helper l)\n    (cond\n     \
    \ [(empty? l) #f]\n      [(empty? (rest l)) #f]\n      [(empty? (rest (rest l)))\
    \ #f]\n      [(zero? (+ (first l) (first (rest l)) (first (rest (rest l))))) #t]\n\
    \      [else (triples_sum_to_zero_helper (rest l))]))\n  (triples_sum_to_zero_helper\
    \ l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member\
    \ (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (or\n      (and\n       (=\
    \ (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n\
    \      (and\n       (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0)\
    \ (list-ref l 2)))\n      (and\n       (= (list-ref l 0) (list-ref l 1))\n   \
    \    (= (list-ref l 0) (list-ref l 2))))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l1 l2)\n    (cond\n      [(empty? l1) #f]\n      [(empty? l2) (triples_sum_to_zero_helper\
    \ (rest l1) (rest l1))]\n      [(zero? (+ (first l1) (first l2))) #t]\n      [else\
    \ (triples_sum_to_zero_helper l1 (rest l2))]))\n  (triples_sum_to_zero_helper\
    \ l l))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty?\
    \ (rest (rest l))) #f]\n    [else (or (and (= (sum (list (first l) (first (rest\
    \ l)) (first (rest (rest l))))) 0) #t)\n              (triples_sum_to_zero (rest\
    \ l)))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0)\
    \ (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (rest l))\n          (member (list-ref l 0) (rest (rest l))))\n     #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n    [(and (not (empty?\
    \ (cdddr l)))\n          (or (and (= (car l) (car (cdr l)))\n                \
    \   (= (car l) (car (cddr l))))\n              (and (= (car l) (car (cdr l)))\n\
    \                   (= (car l) (car (cddr l))))))\n     (triples_sum_to_zero (cdr\
    \ l))]\n    [(= (car l) (car (cdr l)))\n     (triples_sum_to_zero (cdr l))]\n\
    \    [(= (car l) (car (cddr l)))\n     (triples_sum_to_zero (cdr l))]\n    [(=\
    \ (car (cdr l)) (car (cddr l)))\n     (triples_sum_to_zero (cdr l))]\n    [(=\
    \ (+ (car l) (car (cdr l)) (car (cddr l))) 0)\n     #t]\n    [else\n     (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\
    \ (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l))\n          (member (first l) (rest (rest l))))\n     #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(empty? (rest\
    \ (rest l))) false]\n    [else\n     (or\n      (and\n       (= (sum (first l)\
    \ (first (rest l)) (first (rest (rest l)))) 0)\n       (not (member (first l)\
    \ (rest (rest l))))\n       (not (member (first (rest l)) (rest (rest l))))\n\
    \       (not (member (first (rest (rest l))) (rest (rest l)))))\n      (triples_sum_to_zero\
    \ (rest l)))]))\n", "  (cond [(empty? l) false]\n        [(and (member (list-ref\
    \ l 0) (cdr l))\n              (member (- (list-ref l 0)) (cdr l)))\n        \
    \ true]\n        [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (rest l))\n          (member (list-ref\
    \ l 0) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car\
    \ l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest\
    \ l))) #f]\n    [else\n     (or\n      (and\n       (= (sum (first l) (first (rest\
    \ l)) (first (rest (rest l)))) 0)\n       (not (equal? (first l) (first (rest\
    \ l))))\n       (not (equal? (first l) (first (rest (rest l)))))\n       (not\
    \ (equal? (first (rest l)) (first (rest (rest l)))))\n       )\n      (triples_sum_to_zero\
    \ (rest l))\n      )\n     ]\n    )\n  )\n", "  (cond\n    [(empty? l) #f]\n \
    \   [(empty? (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n    [(and (not (empty?\
    \ (cdddr l)))\n          (or (and (= (car l) (cadr l))\n                   (=\
    \ (cadr l) (caddr l)))\n              (and (= (car l) (caddr l))\n           \
    \        (= (cadr l) (cadddr l)))))\n     (triples_sum_to_zero (cdddr l))]\n \
    \   [(and (not (empty? (cdddr l)))\n          (or (and (= (car l) (cadr l))\n\
    \                   (= (caddr l) (cadddr l)))\n              (and (= (car l) (caddr\
    \ l))\n                   (= (cadr l) (cadddr l)))\n              (and (= (car\
    \ l) (cadddr l))\n                   (= (cadr l) (caddr l)))))\n     (triples_sum_to_zero\
    \ (cdddr l))]\n    [(and (not (empty? (cdddr l)))\n          (or (and (= (car\
    \ l) (cadr l))\n                   (= (caddr l) (cadddr l)))\n              (and\
    \ (= (car l) (caddr l))\n                   (= (cadr l) (cadddr l)))\n       \
    \       (and (= (car l) (cadddr l))\n                   (= (cadr l) (caddr l)))))\n\
    \     (triples_sum_to_zero (cdddr l))]\n    [(and (not (empty? (cdddr l)))\n \
    \         (or (and (= (car l) (cadr l))\n                   (= (caddr l) (cadddr\
    \ l)))\n              (and (= (car l) (caddr l))\n                   (= (cadr\
    \ l) (cadddr l)))\n              (and (= (car l) (cadddr l))\n               \
    \    (= (cadr l) (caddr l)))))\n     (triples_sum_to_zero (cdddr l))]\n    [(and\
    \ (not (empty? (", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (rest l))\n          (member (list-ref l 0) (rest (rest l)))) #t]\n   \
    \ [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n    [(and (not\
    \ (empty? (cdddr l)))\n          (member (zero? (- (car l) (cadr l) (caddr l)))\
    \ '(#t #f)))\n     (triples_sum_to_zero (cdr l))]\n    [else (zero? (- (car l)\
    \ (cadr l) (caddr l)))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member\
    \ (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n \
    \   [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member? (list-ref l 0) (rest l))\n          (member? (list-ref l 0) (rest (rest\
    \ l))))\n     #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (let loop\
    \ ([l l] [a (car l)] [b (cadr l)] [c (caddr l)])\n    (cond [(and (not (null?\
    \ a)) (not (null? b)) (not (null? c)))\n           (cond [(= (+ a b c) 0) #t]\n\
    \                 [else (loop (cdr l) (car l) (cadr l) (caddr l))])]\n       \
    \   [else #f])))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l)\
    \ (cdr l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty?\
    \ (rest (rest l))) #f]\n    [else\n     (or\n      (and\n       (= (sum (first\
    \ l) (first (rest l)) (first (rest (rest l)))) 0)\n       #t)\n      (triples_sum_to_zero\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (or\n      (and (= (sum (first\
    \ l) (first (rest l)) (first (rest (rest l)))) 0) #t)\n      (triples_sum_to_zero\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list (first\
    \ l) (second l) (third l)) (list-of-triples l))\n          (= (sum (list (first\
    \ l) (second l) (third l))) 0)) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (not (empty? (rest l))) (not (empty? (rest\
    \ (rest l)))))\n     (or (and (= (sum (list (first l) (second l) (third l))) 0)\
    \ #t)\n         (triples_sum_to_zero (rest l)))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (or\n      (and\n       (=\
    \ (list-ref l 0) (- (list-ref l 1) (list-ref l 2)))\n       (or\n        (and\n\
    \         (= (list-ref l 0) (list-ref l 1))\n         (and\n          (= (list-ref\
    \ l 0) (list-ref l 2))\n          (= (list-ref l 1) (list-ref l 2))))\n      \
    \  (and\n         (not (= (list-ref l 0) (list-ref l 1)))\n         (not (= (list-ref\
    \ l 0) (list-ref l 2)))\n         (not (= (list-ref l 1) (list-ref l 2))))))\n\
    \      (triples_sum_to_zero (rest l))))))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\
    \ #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (define (triples_sum_to_zero-helper\
    \ l1 l2)\n    (cond\n      [(empty? l1) #f]\n      [(empty? l2) (triples_sum_to_zero-helper\
    \ (rest l1) (rest l1))]\n      [(empty? (rest l2)) (triples_sum_to_zero-helper\
    \ (rest l1) (rest l1))]\n      [(zero? (+ (first l1) (first l2) (first (rest l2))))\
    \ #t]\n      [else (triples_sum_to_zero-helper l1 (rest l2))]))\n  (triples_sum_to_zero-helper\
    \ l l))\n", "  (define (triples_sum_to_zero_helper l1 l2 l3)\n    (cond ((and\
    \ (null? l1) (null? l2) (null? l3)) #f)\n          ((and (null? l1) (null? l2))\
    \ (triples_sum_to_zero_helper l3 (cdr l3) (cdr (cdr l3))))\n          ((and (null?\
    \ l1) (null? l3)) (triples_sum_to_zero_helper l2 (cdr l2) (cdr (cdr l2))))\n \
    \         ((null? l1) (triples_sum_to_zero_helper l1 (cdr l1) (cdr (cdr l1))))\n\
    \          ((and (null? l2) (null? l3)) (triples_sum_to_zero_helper l1 (cdr l1)\
    \ (cdr (cdr l1))))\n          ((null? l2) (triples_sum_to_zero_helper l1 (cdr\
    \ l1) (cdr (cdr l1))))\n          ((null? l3) (triples_sum_to_zero_helper l1 (cdr\
    \ l1) (cdr (cdr l1))))\n          ((= (+ (car l1) (car l2) (car l3)) 0) #t)\n\
    \          (else (triples_sum_to_zero_helper l1 l2 (cdr l3)))))\n  (triples_sum_to_zero_helper\
    \ l (cdr l) (cdr (cdr l))))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member\
    \ (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n \
    \   [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond [(empty? l) #f]\n  \
    \      [(and (member (car l) (cdr l))\n              (member (- (car l)) (cdr\
    \ l))) #t]\n        [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member? (list-ref l 0)\
    \ (cdr l))\n          (member? (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(null? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest\
    \ (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (car l) (cdr l)) (member (car\
    \ l) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\
    \ (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\n          (member\
    \ (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", " \
    \ (cond [(empty? l) false]\n        [(and (member (list-ref l 0) (cdr l))\n  \
    \            (member (list-ref l 0) (cddr l)))\n         true]\n        [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (list (first l) (second l) (- (first l) (second l))) (combinations 3\
    \ l))\n          (not (member (list (first l) (second l) (- (first l) (second\
    \ l))) (combinations 3 (rest l)))))\n     #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
