name: HumanEval_40_triples_sum_to_zero
language: rkt
prompt: "#lang racket\n\n;; triples_sum_to_zero takes a list of integers as an input.\n\
  ;; it returns True if there are three distinct elements in the list that\n;; sum\
  \ to zero, and False otherwise.\n;; >>> (triples_sum_to_zero (list 1 3 5 0))\n;;\
  \ #f\n;; >>> (triples_sum_to_zero (list 1 3 -2 1))\n;; #t\n;; >>> (triples_sum_to_zero\
  \ (list 1 2 3 7))\n;; #f\n;; >>> (triples_sum_to_zero (list 2 4 -5 3 9 7))\n;; #t\n\
  ;; >>> (triples_sum_to_zero (list 1))\n;; #f\n(define (triples_sum_to_zero l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 5 -1)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #t)\n    (check-equal?\
  \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 1 2 5 7)) #f)\n\
  \    (check-equal? (candidate (list 2 4 -5 3 9 7)) #t)\n    (check-equal? (candidate\
  \ (list 1)) #f)\n    (check-equal? (candidate (list 1 3 5 -100)) #f)\n    (check-equal?\
  \ (candidate (list 100 3 5 -100)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (cond\n       [(= (list-ref\
    \ l 0) (list-ref l 1) (list-ref l 2)) #f]\n       [(= (list-ref l 0) (list-ref\
    \ l 1) (- (list-ref l 2))) #t]\n       [(= (list-ref l 0) (list-ref l 2) (- (list-ref\
    \ l 1))) #t]\n       [(= (list-ref l 1) (list-ref l 2) (- (list-ref l 0))) #t]\n\
    \       [else (triples_sum_to_zero (rest l))])])\n  )\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (or\n      (and\n       (= (sum (first l) (first (rest\
    \ l)) (first (rest (rest l)))) 0)\n       (not (member (first l) (rest (rest l))))\n\
    \       (not (member (first (rest l)) (rest (rest l))))\n       (not (member (first\
    \ (rest (rest l))) (rest (rest l)))))\n      (triples_sum_to_zero (rest l)))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (rest l))\n    \
    \      (member (list-ref l 0) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (cond\n       [(= (list-ref\
    \ l 0) (list-ref l 1) (list-ref l 2)) #f]\n       [(= (list-ref l 0) (list-ref\
    \ l 1) (list-ref l 2)) #f]\n       [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n       [else\n        (cond\n          [(= (list-ref l 0) (list-ref\
    \ l 1) (list-ref l 2)) #f]\n          [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n          [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n\
    \          [else\n           (cond\n             [(= (list-ref l 0) (list-ref\
    \ l 1) (list-ref l 2)) #f]\n             [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n             [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n\
    \             [else\n              (cond\n                [(= (list-ref l 0) (list-ref\
    \ l 1) (list-ref l 2)) #f]\n                [(= (list-ref l 0) (list-ref l 1)\
    \ (list-ref l 2)) #f]\n                [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n                [else\n                 (cond\n                 \
    \  [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n                   [(=\
    \ (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n                   [(= (list-ref\
    \ l 0) (list-ref l 1) (list-ref l 2)) #f]\n                   [else\n        \
    \            (cond\n                      [(=", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l)\
    \ (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest\
    \ l))) #f]\n    [else\n     (let ([x (first l)]\n           [y (first (rest l))]\n\
    \           [z (first (rest (rest l)))])\n       (or\n        (and (= x 0) (=\
    \ y 0) (= z 0))\n        (and (= (+ x y z) 0))\n        (triples_sum_to_zero (rest\
    \ l))))]))\n", "  (cond\n    [(null? l) #f]\n    [(and (member (car l) (cdr l))\
    \ (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(null?\
    \ (cddr l)) #f]\n    [(and (not (member 0 l))\n          (not (member (car l)\
    \ (cdr l)))\n          (not (member (car l) (cddr l)))\n          (not (member\
    \ (cadr l) (cddr l))))\n     (triples_sum_to_zero (cdr l))]\n    [else\n     (or\
    \ (and (= (car l) 0)\n              (member (cadr l) (cddr l))\n             \
    \ (member (caddr l) (cddr l)))\n         (and (= (cadr l) 0)\n              (member\
    \ (car l) (cddr l))\n              (member (caddr l) (cddr l)))\n         (and\
    \ (= (caddr l) 0)\n              (member (car l) (cdr l))\n              (member\
    \ (cadr l) (cdr l)))\n         (and (= (+ (car l) (cadr l)) (caddr l))\n     \
    \         (member (- (caddr l) (car l)) (cddr l)))\n         (and (= (+ (car l)\
    \ (caddr l)) (cadr l))\n              (member (- (cadr l) (car l)) (cddr l)))\n\
    \         (and (= (+ (cadr l) (caddr l)) (car l))\n              (member (- (car\
    \ l) (cadr l)) (cddr l)))\n         (triples_sum_to_zero (cdr l)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
