name: HumanEval_91_is_bored
language: rkt
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  ;; >>> (is_bored \"Hello world\")\n;; 0\n;; >>> (is_bored \"The sky is blue. The\
  \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \"\
    ) (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count-if\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n            (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n  \
    \  [else (is_bored (substring S 1))]))\n", "  (let ([words (string-split S #\\\
    space)])\n    (if (empty? words)\n        0\n        (if (string=? (first words)\
    \ \"I\")\n            (+ 1 (is_bored (string-join (rest words) #\\space)))\n \
    \           (is_bored (string-join (rest words) #\\space))))))", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (define (is-bored-helper S)\n    (cond\n    \
    \  [(empty? S) 0]\n      [(equal? (first S) \"I\") (+ 1 (is-bored-helper (rest\
    \ S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split\
    \ S #\\.))\n)\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (define\
    \ (is_bored-helper S N)\n    (cond\n      [(empty? S) N]\n      [(string=? (first\
    \ S) \"I\") (is_bored-helper (rest S) (+ N 1))]\n      [else (is_bored-helper\
    \ (rest S) N)]))\n  (is_bored-helper (string-split S #\\.) 0))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (length (filter (lambda (s) (string=?\
    \ (string-take s 1) \"I\"))\n                  (regexp-split #rx\"\\\\.|\\\\?|!\"\
    \ S))))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n      \
    \   (regexp-split #rx\"\\.|\\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (string-take S\
    \ 1) \"I\") (+ 1 (is_bored (string-drop S 1)))]\n    [else (is_bored (string-drop\
    \ S 1))]))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n   \
    \      (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (count-matches (regexp #rx\"^I\"\
    ) (string-split S #rx\"[.?!]\")))\n", "  (define (is_bored-helper S)\n    (cond\n\
    \      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split\
    \ S #\\.)))\n", "  (cond [(empty? S) 0]\n        [else (if (string=? (string-take\
    \ S 1) \"I\")\n                 (+ 1 (is_bored (string-drop S 1)))\n         \
    \        (is_bored (string-drop S 1)))]))\n", "  (let ([words (string-split S)])\n\
    \    (length (filter (lambda (x) (string=? \"I\" (car x)))\n                 \
    \   (partition words (lambda (x) (member x '(#\\! #\\? #\\.))))))))\n", "  (count-if\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n            (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (count-if (lambda (x) (string=? (string-trim (car (string-split\
    \ x #\\.)) #\\space) \"I\"))\n            (string-split S #\\!)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (count (lambda (x)\n\
    \           (and (string=? (substring x 0 1) \"I\")\n                (or (string=?\
    \ (substring x (sub1 (string-length x)) (string-length x)) \".\")\n          \
    \          (string=? (substring x (sub1 (string-length x)) (string-length x))\
    \ \"?\")\n                    (string=? (substring x (sub1 (string-length x))\
    \ (string-length x)) \"!\"))))\n         (regexp-split #rx\"[.?!]\" S)))\n", " \
    \ (count-if (lambda (s) (string=? (string-take s 1) \"I\"))\n            (string-split\
    \ (string-replace S \"!\" \".\")\n                          (string-append \"\
    .\" \"?\" \"!\"))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond ((string=? S \"\") 0)\n        ((string-contains S \"\
    I\")\n         (+ 1 (is_bored (substring S (string-index S \"I\") (string-length\
    \ S)))))\n        (else (is_bored (substring S 1 (string-length S))))))\n", " \
    \ (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (split-string\
    \ S \"[.?!]\")))\n", "  (count (string-split S #rx\"[.?!]\")\n         (lambda\
    \ (s) (string-prefix? \"I\" (string-trim s)))))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (count-if (lambda (x) (string=? (substring x 0 1) \"I\"\
    ))\n            (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (cond [(empty?\
    \ S) 0]\n        [else (cond [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n                    [else (is_bored (rest S))])]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n\
    \    [(string=? S \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? \"I\" (first (string-split S #\\space)))\n\
    \     (+ 1 (is_bored (string-drop S 1)))]\n    [else (is_bored (string-drop S\
    \ 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(regexp-match #rx\"^I\" S) (+\
    \ 1 (is_bored (regexp-replace #rx\"^I[^.!?]*[.!?]\" S \"\")))]\n    [else (is_bored\
    \ (regexp-replace #rx\"^[^.!?]*[.!?]\" S \"\"))]))\n", "  (count-if (lambda (s)\
    \ (string=? (substring s 0 1) \"I\"))\n            (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (length (filter (lambda (x) (string=? (substring x 0 1) \"I\"))\
    \ (regexp-split #rx\"\\\\.|\\\\?|!\" S))))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond [(empty?\
    \ S) 0]\n        [else (cond [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n                   [else (is_bored (rest S))])]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S \".\")))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (count-if (lambda (x) (string=? (string-trim x) \"I\"))\n  \
    \          (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (count (lambda (x) (equal?\
    \ (first x) \"I\"))\n         (split-string S \"[.!?]\")))\n", "  (count (lambda\
    \ (s) (string=? (string-take s 1) \"I\"))\n         (string-split (string-replace\
    \ S \"!\" \".\")\n                       (string-append \".\" \"?\"))))\n", " \
    \ (length (filter (lambda (x) (string=? (substring x 0 1) \"I\"))\n          \
    \        (regexp-split #rx\"\\.|\\?|!\" S))))\n", "  (cond [(string=? S \"\")\
    \ 0]\n        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n        [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(and (string=? (substring S 0 1) \"I\")\n          (or (string=? (substring\
    \ S 1 1) \" \")\n              (string=? (substring S 1 1) \"!\")\n          \
    \    (string=? (substring S 1 1) \"?\")\n              (string=? (substring S\
    \ 1 1) \".\")))\n     (+ 1 (is_bored (substring S 1 (string-length S))))]\n  \
    \  [else (is_bored (substring S 1 (string-length S)))]))\n", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S \"\\\\.\")))\n", "  (count-if (lambda (x) (string=? (substring\
    \ x 0 1) \"I\"))\n            (regexp-split #rx\"\\.|\\?|!\" S)))\n", "  (count\
    \ (lambda (x) (string=? (string-take x 1) \"I\"))\n         (string-split (string-trim\
    \ S) #rx\"[.?!]\")))\n", "  (count-if (lambda (x) (string=? (string-trim (car\
    \ (string-split x))) \"I\"))\n            (string-split S \"\\\\.|\\\\?|!\")))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (cond [(empty? S) 0]\n      \
    \  [else\n         (cond [(string=? (first (string-split S)) \"I\")\n        \
    \        (+ 1 (is_bored (string-join (rest (string-split S)) \" \")))]\n     \
    \          [else (is_bored (string-join (rest (string-split S)) \" \"))])]))\n",
  "  (length (filter (lambda (x) (string=? (first (string-split x)) \"I\"))\n    \
    \              (string-split S #\\.))))\n", "  (count-if (lambda (x) (string=?\
    \ (car x) \"I\"))\n            (split-string S \"[.?!]\")))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(string=?\
    \ S \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2 (string-length S))))]\n    [else\
    \ (is_bored (substring S 1 (string-length S)))]))\n", "  (count-boredoms (string-split\
    \ S #\\.)\n                  0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S)\
    \ #\\I) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (count\
    \ (lambda (x) (and (string=? (substring x 0 1) \"I\") (not (string=? x \"\"))))\n\
    \         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(null? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond [(empty? S) 0]\n\
    \        [else (cond [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \                   [else (is_bored (rest S))])]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (count-if\
    \ (lambda (s) (string=? (string-trim s) \"I\"))\n            (regexp-split #rx\"\
    \\\\.|\\\\?|!\" S)))\n", "  (cond\n    [(string=? S \"\") 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond [(empty? S) 0]\n        [else (if (string=?\
    \ (first (string-split S)) \"I\")\n                 (+ 1 (is_bored (string-join\
    \ (rest (string-split S)))))\n                 (is_bored (string-join (rest (string-split\
    \ S)))))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (define (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n\
    \      [(equal? (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else\
    \ (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split S #\\.)))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n", "  (cond [(empty? S) 0]\n        [else (if (equal? (first S) \"\
    I\")\n                 (+ 1 (is_bored (rest S)))\n                 (is_bored (rest\
    \ S)))]))\n", "  (define (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n\
    \      [(string=? (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else\
    \ (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split S #\\.)))\n",
  "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n",
  "  (define (count-boredoms S)\n    (cond\n      [(empty? S) 0]\n      [(string=?\
    \ (first S) \"I\") (+ 1 (count-boredoms (rest S)))]\n      [else (count-boredoms\
    \ (rest S))]))\n  (count-boredoms (string-split S #\\.)))\n", "  (if (string=?\
    \ S \"\")\n      0\n      (if (string-prefix? \"I\" (car (string-split S #\\.)))\n\
    \          (+ 1 (is_bored (string-join (cdr (string-split S #\\.)) #\\.)))\n \
    \         (is_bored (string-join (cdr (string-split S #\\.)) #\\.)))\n      )\n\
    \  )\n", "  (count (lambda (x) (equal? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"\\.|\\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (count (lambda (x) (string=? (first x) \"I\"))\n         (split-string\
    \ S \"[.?!]\")))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S\
    \ 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond [(empty?\
    \ S) 0]\n        [else (cond [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n                   [else (is_bored (rest S))])]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0\
    \ 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n   \
    \      (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (count (lambda (x) (equal?\
    \ (string-ref x 0) #\\I))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count-if\
    \ (lambda (x) (string=? (string-trim x) \"I\"))\n            (regexp-split #rx\"\
    \\\\.|\\\\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2 (string-length S))))]\n    [else (is_bored\
    \ (substring S 1 (string-length S)))]))\n", "  (length (filter (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n                  (regexp-split #rx\"\\.|\\?|!\"\
    \ S))))\n", "  (count-if (lambda (x) (string=? (substring x 0 1) \"I\"))\n   \
    \         (split-string S \"[.?!]\")))\n", "  (count-if (lambda (x) (string=?\
    \ (first (string-split x)) \"I\"))\n            (string-split S \"[.?!]\")))\n",
  "  (count (lambda (x) (string=? \"I\" (car x))) (split-string S \"[.?!]\")))\n",
  "  (define (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper\
    \ (rest S))]))\n  (is_bored-helper (string-split S #\\.)))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length\
    \ S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n", "  (count-if\
    \ (lambda (s) (string=? (string-trim s) \"I\"))\n            (regexp-split #rx\"\
    \\\\.|\\\\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S)\
    \ \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (count-if (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n            (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (define (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n \
    \     [(string=? (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else\
    \ (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split S #\\.)))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"\
    I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (define (is_bored_helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored_helper (rest S)))]\n      [else (is_bored_helper (rest S))]))\n  (is_bored_helper\
    \ (string-split S #\\.)))\n", "  (if (string=? S \"\")\n      0\n      (if (string-prefix?\
    \ \"I\" (string-trim S))\n          (+ 1 (is_bored (string-trim (string-drop S\
    \ 1))))\n          (is_bored (string-trim (string-drop S 1))))))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond [(empty? S) 0]\n\
    \        [else\n         (cond [(string=? (first (string-split S #\\.)) \"I\"\
    )\n                (+ 1 (is_bored (string-join (rest (string-split S #\\.)) #\\\
    .)))]\n               [else (is_bored (string-join (rest (string-split S #\\.))\
    \ #\\.))])]))\n", "  (cond [(empty? S) 0]\n        [else (cond [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n                    [else (is_bored (rest\
    \ S))])]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"\
    I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (count (string-split S #rx\"\
    [.?!]\")\n         (lambda (s) (string-prefix? \"I\" (string-trim s)))))\n", " \
    \ (length (filter (lambda (x) (string=? (string-take x 1) \"I\"))\n          \
    \        (regexp-split #rx\"\\\\.|\\\\?|!\" S))))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n  \
    \  [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (and (string=?\
    \ (substring x 0 1) \"I\")\n                           (or (string=? (substring\
    \ x (sub1 (string-length x)) (string-length x)) \".\")\n                     \
    \          (string=? (substring x (sub1 (string-length x)) (string-length x))\
    \ \"?\")\n                               (string=? (substring x (sub1 (string-length\
    \ x)) (string-length x)) \"!\"))\n                           ))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (count-matches (regexp #rx\"^I\") (split-string S #rx\"\
    [.?!]\")))\n", "  (let ([words (string-split S #\\space)])\n    (if (empty? words)\n\
    \        0\n        (if (string=? (first words) \"I\")\n            (+ 1 (is_bored\
    \ (string-join (rest words) #\\space)))\n            (is_bored (string-join (rest\
    \ words) #\\space))))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length S))))]\n    [else\
    \ (is_bored (substring S 1 (string-length S)))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (define (is-bored-helper S)\n\
    \    (cond ((null? S) 0)\n          ((string=? (car S) \"I\") (+ 1 (is-bored-helper\
    \ (cdr S))))\n          (else (is-bored-helper (cdr S)))))\n  (is-bored-helper\
    \ (string-split S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond [(empty?\
    \ S) 0]\n        [else (cond [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n                   [else (is_bored (rest S))])]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (let ([words (string-split\
    \ S)])\n    (cond\n      [(empty? words) 0]\n      [(string=? (first words) \"\
    I\") (+ 1 (is_bored (string-join (rest words))))]\n      [else (is_bored (string-join\
    \ (rest words)))])))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S)\
    \ \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (define (is_bored-helper S)\n    (cond\n\
    \      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split\
    \ S #\\.)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n  \
    \       (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (count-if (lambda (x) (string=? (substring x 0 1) \"I\"\
    ))\n            (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0\
    \ 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (and\
    \ (string=? (first x) \"I\") (not (string=? (second x) \"am\")))) (split-string\
    \ S \"\\\\.|\\\\?|!\")))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (define (is_bored-iter S count)\n    (cond\n      [(empty? S)\
    \ count]\n      [(string=? (first S) \"I\") (is_bored-iter (rest S) (+ count 1))]\n\
    \      [else (is_bored-iter (rest S) count)]))\n  (is_bored-iter (string-split\
    \ S) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (count-matches (regexp #rx\"^I\") (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond [(empty? S) 0]\n\
    \        [else (if (string=? (first (string-split S)) \"I\")\n               \
    \   (+ 1 (is_bored (string-join (rest (string-split S)))))\n                 \
    \ (is_bored (string-join (rest (string-split S)))))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (count (lambda (x) (string=? (first (string-split x)) \"\
    I\"))\n         (string-split S \"[.?!]\")))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (let ([words (string-split S)])\n    (cond\n      [(empty?\
    \ words) 0]\n      [(string=? (first words) \"I\") (+ 1 (is_bored (string-join\
    \ (rest words))))]\n      [else (is_bored (string-join (rest words)))])))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n", "  (count-boredoms (string-split S #\\.)\n                  0))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n \
    \   [else (is_bored (substring S 1))]))\n", "  (define (is_bored-helper S)\n \
    \   (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split\
    \ S #\\.)))\n", "  (count-if (lambda (s) (string=? (string-take s 1) \"I\"))\n\
    \            (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (count-if (lambda (s) (string=?\
    \ (substring s 0 1) \"I\"))\n            (regexp-split #rx\"\\.|\\?|!\" S)))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
