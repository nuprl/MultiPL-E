name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n;; >>> (rolling_max\
  \ (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n \
    \     [(> (first numbers) max-so-far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max_iter\
    \ numbers (first numbers) (list (first numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [result (list\
    \ max-so-far)])\n    (if (null? (cdr numbers))\n        result\n        (loop\
    \ (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n         \
    \         (car numbers)\n                  max-so-far)\n              (cons max-so-far\
    \ result)))))\n", "  (define (rolling_max_iter numbers maxes)\n    (cond\n   \
    \   [(empty? numbers) (reverse maxes)]\n      [else (rolling_max_iter (rest numbers)\
    \ (cons (max (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter (rest\
    \ numbers) (list (first numbers))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond\n      [(empty? numbers) (reverse maxes)]\n      [else\
    \ (rolling_max_iter (rest numbers) (cons (max (first numbers) (first maxes)) maxes))]))\n\
    \  (rolling_max_iter (rest numbers) (list (first numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far acc)\n    (cond\n      [(empty? numbers) (reverse acc)]\n\
    \      [(> (first numbers) max-so-far) (rolling_max_iter (rest numbers) (first\
    \ numbers) (cons (first numbers) acc))]\n      [else (rolling_max_iter (rest numbers)\
    \ max-so-far (cons max-so-far acc))]))\n  (rolling_max_iter numbers (first numbers)\
    \ (list (first numbers))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max-helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max-helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling_max-helper numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_helper numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons (max (car numbers) max-so-far)\n              (rolling_max_helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_helper numbers\
    \ -1))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n     \
    \ [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond ((null? numbers) '())\n          ((> (car numbers) max-so-far)\n  \
    \         (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n\
    \          (else (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond\n      [(empty? numbers) maxes]\n      [(empty? maxes)\
    \ (rolling_max_iter (rest numbers) (list (first numbers)))]\n      [else (rolling_max_iter\
    \ (rest numbers) (append maxes (list (max (first numbers) (first maxes)))))]))\n\
    \  (rolling_max_iter numbers empty))\n", "  (define (helper numbers current-max\
    \ result)\n    (cond\n      [(empty? numbers) (reverse result)]\n      [(> (first\
    \ numbers) current-max) (helper (rest numbers) (first numbers) (cons (first numbers)\
    \ result))]\n      [else (helper (rest numbers) current-max (cons current-max\
    \ result))]))\n  (helper numbers -1000000000 (list)))\n```\n\n## Problem 2\n\n\
    ```racket\n#lang racket\n", "  (define (rolling_max_iter numbers max_so_far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max_so_far)\n\
    \       (cons max_so_far (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max_so_far (rolling_max_iter (rest numbers) max_so_far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (roll-max numbers\
    \ max)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max)\
    \ (cons (first numbers) (roll-max (rest numbers) (first numbers)))]\n      [else\
    \ (cons max (roll-max (rest numbers) max))]))\n  (roll-max numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max\
    \ (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max-iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max-iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty?\
    \ numbers) (reverse max-so-far)]\n      [(> (first numbers) (first max-so-far))\n\
    \       (rolling_max_iter (rest numbers) (cons (first numbers) max-so-far))]\n\
    \      [else (rolling_max_iter (rest numbers) (cons (first max-so-far) max-so-far))]))\n\
    \  (rolling_max_iter numbers (list (first numbers))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (first numbers)]\n             [result (list\
    \ max-so-far)])\n    (if (null? (rest numbers))\n        result\n        (loop\
    \ (rest numbers)\n              (max max-so-far (first (rest numbers)))\n    \
    \          (append result (list (max max-so-far (first (rest numbers)))))))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max\
    \ (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far (first numbers)]\n            \
    \ [result (list max-so-far)])\n    (if (null? (rest numbers))\n        result\n\
    \        (loop (rest numbers)\n              (if (&gt; (first numbers) max-so-far)\n\
    \                  (first numbers)\n                  max-so-far)\n          \
    \    (cons (if (&gt; (first numbers) max-so-far)\n                        (first\
    \ numbers)\n                        max-so-far)\n                    result)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", " \
    \ (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n  \
    \           [result (list max-so-far)])\n    (if (null? (rest numbers))\n    \
    \    result\n        (loop (rest numbers)\n              (if (&gt; (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (&gt; (first numbers) max-so-far)\n                 \
    \       (first numbers)\n                        max-so-far)\n               \
    \     result)))))\n", "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers maxes)\n\
    \    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter (cdr\
    \ numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter\
    \ (cdr numbers) (list (car numbers))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max (car numbers)\
    \ max-so-far)\n              (rolling_max_iter (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(empty? (rest numbers)) numbers]\n    [else\n     (cons\
    \ (max (first numbers) (first (rolling_max (rest numbers))))\n           (rolling_max\
    \ (rest numbers)))]))\n", "  (define (rolling_max_iter numbers max-so-far)\n \
    \   (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (if (empty? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (rest numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (define (rolling_max_iter max-so-far numbers)\n    (cond ((null?\
    \ numbers) '())\n          ((> (car numbers) max-so-far)\n           (cons (car\
    \ numbers) (rolling_max_iter (car numbers) (cdr numbers))))\n          (else (cons\
    \ max-so-far (rolling_max_iter max-so-far (cdr numbers))))))\n  (rolling_max_iter\
    \ (car numbers) (cdr numbers)))\n", "  (define (rolling_max_helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_helper numbers 0))\n", "  (if (null? numbers)\n      '()\n   \
    \   (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max\
    \ (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n   \
    \       ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_helper (rest numbers) max-so-far))]))\n  (rolling_max_helper\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter\
    \ (cdr numbers) (list (car numbers))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter\
    \ max-so-far numbers)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (first\
    \ numbers) (rest numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ max-so-far (rest numbers)))]))\n  (rolling_max_iter (first numbers) (rest numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons\
    \ (max (car numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (cons (max (car\
    \ numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [acc '()])\n    (cond [(empty? numbers)\
    \ (reverse acc)]\n          [else (let ([max (max (first numbers) (if (empty?\
    \ acc) (first numbers) (first acc)))])\n                  (loop (rest numbers)\
    \ (cons max acc)))])))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [acc '()])\n    (cond [(empty? numbers) (reverse acc)]\n       \
    \   [else (let ([max (max (first numbers) (if (empty? acc) (first numbers) (first\
    \ acc)))])\n                  (loop (rest numbers) (cons max acc)))])))\n", " \
    \ (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (rolling_max_iter (cdr numbers)\n                          (cons\
    \ (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter (cdr numbers)\
    \ (list (car numbers))))\n", "  (define (rolling_max_iter numbers max-so-far result)\n\
    \    (cond\n      [(empty? numbers) (reverse result)]\n      [(> (first numbers)\
    \ max-so-far)\n       (rolling_max_iter (rest numbers) (first numbers) (cons (first\
    \ numbers) result))]\n      [else\n       (rolling_max_iter (rest numbers) max-so-far\
    \ (cons max-so-far result))]))\n  (rolling_max_iter numbers -1000000000 '()))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max_iter numbers -1 '()))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max (car numbers)\
    \ max-so-far)\n              (rolling_max_iter (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter\
    \ numbers max_so_far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max_so_far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max_so_far (cons max_so_far result))]))\n  (rolling_max_iter\
    \ numbers -1000000000 '()))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n     \
    \  (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond\n      [(empty? numbers) (reverse maxes)]\n      [else\n\
    \       (rolling_max_iter (rest numbers)\n                         (cons (max\
    \ (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter (rest numbers)\
    \ (list (first numbers))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ([next-max (max (car numbers) max-so-far)])\n         \
    \ (cons next-max (rolling_max_iter (cdr numbers) next-max)))))\n  (rolling_max_iter\
    \ numbers -inf.0))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers 0))\n", "  (define (rolling_max_iter numbers max-so-far result)\n  \
    \  (if (null? numbers)\n        result\n        (let ([next-max (if (&gt; (car\
    \ numbers) max-so-far)\n                            (car numbers)\n          \
    \                  max-so-far)])\n          (rolling_max_iter (cdr numbers) next-max\
    \ (cons next-max result)))))\n  (reverse (rolling_max_iter numbers 0 '())))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons max-so-far (rolling_max_iter (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers) (reverse\
    \ maxes)]\n      [else\n       (rolling_max_iter (rest numbers)\n            \
    \             (cons (max (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter\
    \ (rest numbers) (list (first numbers))))\n", "  (if (null? numbers)\n      '()\n\
    \      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (if (empty? numbers)\n      '()\n      (cons\
    \ (max (first numbers) (first (rolling_max (rest numbers))))\n            (rolling_max\
    \ (rest numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n  \
    \  (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (define (rolling_max_iter numbers max-so-far result)\n    (cond\n\
    \      [(empty? numbers) result]\n      [(> (first numbers) max-so-far)\n    \
    \   (rolling_max_iter (rest numbers) (first numbers) (append result (list (first\
    \ numbers))))]\n      [else\n       (rolling_max_iter (rest numbers) max-so-far\
    \ (append result (list max-so-far)))]))\n  (rolling_max_iter numbers -1 '()))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (if (> (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (> (first numbers) max-so-far)\n                    \
    \    (first numbers)\n                        max-so-far)\n                  \
    \  result)))))\n", "  (define (rolling_max_iter numbers max-so-far result)\n \
    \   (cond\n      [(empty? numbers) result]\n      [(> (first numbers) max-so-far)\n\
    \       (rolling_max_iter (rest numbers) (first numbers) (append result (list\
    \ (first numbers))))]\n      [else\n       (rolling_max_iter (rest numbers) max-so-far\
    \ (append result (list max-so-far)))]))\n  (rolling_max_iter numbers (first numbers)\
    \ (list (first numbers))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (if (&gt;\
    \ (car numbers) max-so-far)\n                  (car numbers)\n               \
    \   max-so-far)\n              (cons max-so-far result)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (let ((next-max\
    \ (if (&gt; (car numbers) max-so-far)\n                            (car numbers)\n\
    \                            max-so-far)))\n          (cons next-max (rolling_max_iter\
    \ (cdr numbers) next-max)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers)\n                                (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (if (null? numbers)\n      '()\n     \
    \ (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max_iter\
    \ numbers (first numbers) (list (first numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (define (rolling_max_iter maxes numbers)\n\
    \    (if (null? numbers)\n        maxes\n        (rolling_max_iter (cons (max\
    \ (car numbers) (car maxes)) maxes) (cdr numbers))))\n  (reverse (rolling_max_iter\
    \ (list (car numbers)) (cdr numbers))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond ((null? numbers) '())\n          ((> (car numbers) max-so-far)\n\
    \           (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n\
    \          (else (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter\
    \ (cdr numbers) (list (car numbers))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers) (first\
    \ numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest numbers)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far result)\n    (cond\n      [(empty? numbers)\
    \ (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max_iter numbers -1 '()))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (let ((current-max\
    \ (max (car numbers) max-so-far)))\n          (cons current-max (rolling_max_iter\
    \ (cdr numbers) current-max)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max-iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max-iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (max max-so-far (first\
    \ (rest numbers)))\n              (append result (list (max max-so-far (first\
    \ (rest numbers)))))))))\n", "  (if (null? numbers)\n      '()\n      (cons (max\
    \ (car numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max (cdr\
    \ numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\
    \ ((null? numbers) '())\n          ((&gt; (car numbers) max-so-far)\n        \
    \   (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n   \
    \       (else (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter\
    \ (cdr numbers) (list (car numbers))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers max_so_far)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max_so_far)\n     \
    \  (cons max_so_far (rolling_max_iter (rest numbers) (first numbers)))]\n    \
    \  [else\n       (cons max_so_far (rolling_max_iter (rest numbers) max_so_far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers) (reverse\
    \ maxes)]\n      [else (rolling_max_iter (rest numbers) (cons (max (first numbers)\
    \ (first maxes)) maxes))]))\n  (rolling_max_iter (rest numbers) (list (first numbers))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (if (&gt; (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (&gt; (first numbers) max-so-far)\n                 \
    \       (first numbers)\n                        max-so-far)\n               \
    \     result)))))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max_iter\
    \ numbers (first numbers) (list (first numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (iter numbers acc)\n    (cond\n      [(empty? numbers) (reverse acc)]\n\
    \      [else (iter (rest numbers) (cons (max (first numbers) (first acc)) acc))]))\n\
    \  (iter numbers (list (first numbers))))\n", "  (let loop ([numbers numbers]\n\
    \             [acc '()])\n    (cond [(empty? numbers) (reverse acc)]\n       \
    \   [else (let ([max (max (first numbers) (if (empty? acc) (first numbers) (first\
    \ acc)))])\n                  (loop (rest numbers) (cons max acc)))])))\n", " \
    \ (define (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n\
    \          ((> (car numbers) max-so-far) (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter max-so-far numbers)\n    (if (null? numbers)\n        '()\n\
    \        (cons max-so-far (rolling_max_iter (max max-so-far (car numbers)) (cdr\
    \ numbers)))))\n  (rolling_max_iter (car numbers) (cdr numbers)))\n", "  (define\
    \ (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max-iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max-iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n\
    \              (if (max? (rest numbers) max-so-far)\n                  (first\
    \ (rest numbers))\n                  max-so-far)\n              (cons (if (max?\
    \ (rest numbers) max-so-far)\n                        (first (rest numbers))\n\
    \                        max-so-far)\n                    result)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n   \
    \       ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (cond [(empty? numbers) empty]\n        [else\n         (cons (apply max numbers)\n\
    \               (rolling_max (rest numbers)))]))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max_iter\
    \ numbers -1 '()))\n", "  (define (rolling_max_acc numbers acc)\n    (cond\n \
    \     [(empty? numbers) (reverse acc)]\n      [(empty? acc) (rolling_max_acc (rest\
    \ numbers) (list (first numbers)))]\n      [else (rolling_max_acc (rest numbers)\
    \ (cons (max (first numbers) (first acc)) acc))]))\n  (rolling_max_acc numbers\
    \ '()))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n\
    \        '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (first numbers)]\n             [result (list max-so-far)])\n   \
    \ (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n \
    \             (if (&gt; (first numbers) max-so-far)\n                  (first\
    \ numbers)\n                  max-so-far)\n              (cons (if (&gt; (first\
    \ numbers) max-so-far)\n                        (first numbers)\n            \
    \            max-so-far)\n                    result)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n   \
    \       ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ([next-max (max (car numbers) max-so-far)])\n         \
    \ (cons next-max (rolling_max_iter (cdr numbers) next-max)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers maxes)\n  \
    \  (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter (cdr\
    \ numbers)\n                          (cons (max (car numbers) (car maxes)) maxes))))\n\
    \  (rolling_max_iter (cdr numbers) (list (car numbers))))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (if (&gt; (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (&gt; (first numbers) max-so-far)\n                 \
    \       (first numbers)\n                        max-so-far)\n               \
    \     result)))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (if (&gt;\
    \ (car numbers) max-so-far)\n                  (car numbers)\n               \
    \   max-so-far)\n              (cons max-so-far result)))))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers) (first\
    \ numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest numbers)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (let ((max (if (null? maxes) (car numbers) (max (car numbers)\
    \ (car maxes)))))\n          (rolling_max_iter (cdr numbers) (cons max maxes)))))\n\
    \  (rolling_max_iter numbers '()))\n", "  (if (null? numbers)\n      '()\n   \
    \   (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far result)\n\
    \    (cond ((null? numbers) result)\n          ((> (car numbers) max-so-far)\n\
    \           (rolling_max_iter (cdr numbers) (car numbers) (append result (list\
    \ (car numbers)))))\n          (else (rolling_max_iter (cdr numbers) max-so-far\
    \ (append result (list max-so-far))))))\n  (rolling_max_iter numbers 0 '()))\n",
  "  (define (rolling_max_iter max-so-far numbers)\n    (if (null? numbers)\n    \
    \    '()\n        (cons max-so-far (rolling_max_iter (max max-so-far (car numbers))\
    \ (cdr numbers)))))\n  (rolling_max_iter (car numbers) (cdr numbers)))\n", " \
    \ (define (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n\
    \          ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max_iter numbers (first numbers) (list (first numbers))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_helper numbers max_so_far)\n    (if (null? numbers)\n  \
    \      '()\n        (cons max_so_far (rolling_max_helper (cdr numbers) (max max_so_far\
    \ (car numbers))))))\n  (rolling_max_helper numbers (car numbers)))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (rolling_max_iter (cdr numbers)\n                          (cons\
    \ (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter (cdr numbers)\
    \ (list (car numbers))))\n", "  (define (roll-max-helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (roll-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (roll-max-helper numbers 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (max max-so-far (first\
    \ (rest numbers)))\n              (append result (list (max max-so-far (first\
    \ (rest numbers)))))))))\n", "  (define (rolling_max_iter numbers max-so-far result)\n\
    \    (cond ((null? numbers) (reverse result))\n          ((> (car numbers) max-so-far)\
    \ (rolling_max_iter (cdr numbers) (car numbers) (cons (car numbers) result)))\n\
    \          (else (rolling_max_iter (cdr numbers) max-so-far (cons max-so-far result)))))\n\
    \  (rolling_max_iter numbers -1 '()))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers) (first\
    \ numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest numbers)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons max-so-far (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter\
    \ (cdr numbers)\n                          (cons (max (car numbers) (car maxes))\
    \ maxes))))\n  (rolling_max_iter (cdr numbers) (list (car numbers))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max\
    \ (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far 0]\n             [result '()])\n\
    \    (cond [(empty? numbers) (reverse result)]\n          [else (let ([next-number\
    \ (first numbers)])\n                  (loop (rest numbers)\n                \
    \        (if (&gt; next-number max-so-far) next-number max-so-far)\n         \
    \               (cons max-so-far result)))])))\n</code>\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n   \
    \       ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max-iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (rolling_max-iter (cdr numbers) (cons (max (car numbers) (car\
    \ maxes)) maxes))))\n  (rolling_max-iter (cdr numbers) (list (car numbers))))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter numbers maxes)\n\
    \    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter (cdr\
    \ numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter\
    \ (cdr numbers) (list (car numbers))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) (list)]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers) (first\
    \ numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest numbers)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (rolling_max_iter numbers maxes)\n    (cond\
    \ [(empty? numbers) (reverse maxes)]\n          [else (rolling_max_iter (rest\
    \ numbers)\n                                  (cons (max (first numbers) (first\
    \ maxes)) maxes))]))\n  (rolling_max_iter (rest numbers) (list (first numbers))))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (rolling_max_iter (cdr numbers)\n                          (cons\
    \ (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter (cdr numbers)\
    \ (list (car numbers))))\n", "  (define (rolling_max_iter numbers acc)\n    (cond\n\
    \      [(empty? numbers) (reverse acc)]\n      [(empty? acc) (rolling_max_iter\
    \ (rest numbers) (cons (first numbers) acc))]\n      [else (rolling_max_iter (rest\
    \ numbers) (cons (max (first numbers) (first acc)) acc))]))\n  (rolling_max_iter\
    \ numbers '()))\n", "  (let loop ([numbers numbers]\n             [accum (list\
    \ (car numbers))])\n    (if (null? (cdr numbers))\n        accum\n        (loop\
    \ (cdr numbers)\n              (cons (max (car numbers) (car accum))\n       \
    \             accum)))))\n", "  (if (null? numbers)\n      '()\n      (cons (max\
    \ (car numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max (cdr\
    \ numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n     \
    \  (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max-iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max-iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max-iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max-iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (let ([n (car numbers)])\n          (rolling_max_iter (cdr numbers)\
    \ (cons (if (null? maxes) n (max n (car maxes))) maxes)))))\n  (rolling_max_iter\
    \ numbers '()))\n", "  (define (roll-max numbers max-so-far)\n    (cond ((null?\
    \ numbers) '())\n          ((> (car numbers) max-so-far)\n           (cons (car\
    \ numbers) (roll-max (cdr numbers) (car numbers))))\n          (else (cons max-so-far\
    \ (roll-max (cdr numbers) max-so-far)))))\n  (roll-max numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max_iter numbers (first numbers) (list (first numbers))))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far (car numbers)]\n         \
    \    [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (max? (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (define (rolling_max_helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_helper numbers 0))\n", "  (define (rolling_max_iter numbers max-so-far\
    \ result)\n    (cond ((null? numbers) (reverse result))\n          ((> (car numbers)\
    \ max-so-far)\n           (rolling_max_iter (cdr numbers) (car numbers) (cons\
    \ (car numbers) result)))\n          (else (rolling_max_iter (cdr numbers) max-so-far\
    \ (cons max-so-far result)))))\n  (rolling_max_iter numbers 0 '()))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n        \
    \     [max-so-far (car numbers)]\n             [result (list max-so-far)])\n \
    \   (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n \
    \             (if (> (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max_iter numbers -1 '()))\n", "  (define (rolling_max_iter numbers\
    \ maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter\
    \ (cdr numbers) (list (car numbers))))\n", "  (if (null? numbers)\n      '()\n\
    \      (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n         \
    \   (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n   \
    \   (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
