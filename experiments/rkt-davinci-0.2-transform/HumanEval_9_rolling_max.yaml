name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n;; >>> (rolling_max\
  \ (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n \
    \     [(> (first numbers) max-so-far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max_iter\
    \ numbers (first numbers) (list (first numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far (car numbers)]\n             [result (list\
    \ max-so-far)])\n    (if (null? (cdr numbers))\n        result\n        (loop\
    \ (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n         \
    \         (car numbers)\n                  max-so-far)\n              (cons max-so-far\
    \ result)))))\n", "  (define (rolling_max_iter numbers maxes)\n    (cond\n   \
    \   [(empty? numbers) (reverse maxes)]\n      [else (rolling_max_iter (rest numbers)\
    \ (cons (max (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter (rest\
    \ numbers) (list (first numbers))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond\n      [(empty? numbers) (reverse maxes)]\n      [else\
    \ (rolling_max_iter (rest numbers) (cons (max (first numbers) (first maxes)) maxes))]))\n\
    \  (rolling_max_iter (rest numbers) (list (first numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far acc)\n    (cond\n      [(empty? numbers) (reverse acc)]\n\
    \      [(> (first numbers) max-so-far) (rolling_max_iter (rest numbers) (first\
    \ numbers) (cons (first numbers) acc))]\n      [else (rolling_max_iter (rest numbers)\
    \ max-so-far (cons max-so-far acc))]))\n  (rolling_max_iter numbers (first numbers)\
    \ (list (first numbers))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max-helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max-helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling_max-helper numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_helper numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons (max (car numbers) max-so-far)\n              (rolling_max_helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_helper numbers\
    \ -1))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n     \
    \ [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond ((null? numbers) '())\n          ((> (car numbers) max-so-far)\n  \
    \         (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n\
    \          (else (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond\n      [(empty? numbers) maxes]\n      [(empty? maxes)\
    \ (rolling_max_iter (rest numbers) (list (first numbers)))]\n      [else (rolling_max_iter\
    \ (rest numbers) (append maxes (list (max (first numbers) (first maxes)))))]))\n\
    \  (rolling_max_iter numbers empty))\n", "  (define (helper numbers current-max\
    \ result)\n    (cond\n      [(empty? numbers) (reverse result)]\n      [(> (first\
    \ numbers) current-max) (helper (rest numbers) (first numbers) (cons (first numbers)\
    \ result))]\n      [else (helper (rest numbers) current-max (cons current-max\
    \ result))]))\n  (helper numbers -1000000000 (list)))\n```\n\n## Problem 2\n\n\
    ```racket\n#lang racket\n", "  (define (rolling_max_iter numbers max_so_far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max_so_far)\n\
    \       (cons max_so_far (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max_so_far (rolling_max_iter (rest numbers) max_so_far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
