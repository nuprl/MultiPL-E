name: HumanEval_20_find_closest_elements
language: rkt
prompt: "#lang racket\n\n;; From a supplied list of numbers (of length at least two)\
  \ select and return two that are the closest to each\n;; other and return them in\
  \ order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0\
  \ 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list\
  \ 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)\n(define (find_closest_elements numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0))\n\
  \    (check-equal? (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0))\n    (check-equal?\
  \ (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1))\n))\n\n(test-humaneval)"
completions: ["  (define (find_closest_elements_helper numbers closest-pair)\n   \
    \ (if (null? (cdr numbers))\n        closest-pair\n        (let ([first (car numbers)]\n\
    \              [second (cadr numbers)])\n          (if (< (abs (- first second))\
    \ (abs (- (car closest-pair) (cadr closest-pair))))\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([closest-pair (list (car numbers)\
    \ (cadr numbers))]\n        [closest-distance (abs (- (car numbers) (cadr numbers)))])\n\
    \    (for ([i (in-range (add1 (length numbers)))]\n          [j (in-range i)])\n\
    \      (let ([distance (abs (- (list-ref numbers i) (list-ref numbers j)))])\n\
    \        (when (< distance closest-distance)\n          (set! closest-pair (list\
    \ (list-ref numbers j) (list-ref numbers i)))\n          (set! closest-distance\
    \ distance))))\n    closest-pair))\n", "  (let ((closest-pair (list (car numbers)\
    \ (cadr numbers))))\n    (for ([i (in-range (length numbers))])\n      (for ([j\
    \ (in-range (add1 i))])\n        (let ((current-pair (list (list-ref numbers i)\
    \ (list-ref numbers j))))\n          (if (< (abs (- (car current-pair) (cadr current-pair)))\n\
    \                 (abs (- (car closest-pair) (cadr closest-pair))))\n        \
    \      (set! closest-pair current-pair)))))\n    closest-pair))\n", "  (let ([closest-pair\
    \ (list (car numbers) (cadr numbers))]\n        [closest-distance (abs (- (car\
    \ numbers) (cadr numbers)))])\n    (for ([n (cddr numbers)])\n      (let ([distance\
    \ (abs (- (car closest-pair) n))])\n        (when (< distance closest-distance)\n\
    \          (set! closest-pair (list (car closest-pair) n))\n          (set! closest-distance\
    \ distance))))\n    closest-pair))\n", "  (let loop ((numbers numbers) (closest-elements\
    \ (list (car numbers) (cadr numbers))))\n    (if (null? (cddr numbers))\n    \
    \    closest-elements\n        (let ((diff (abs (- (car numbers) (cadr numbers)))))\n\
    \          (if (< diff (abs (- (car closest-elements) (cadr closest-elements))))\n\
    \              (loop (cdr numbers) (list (car numbers) (cadr numbers)))\n    \
    \          (loop (cdr numbers) closest-elements))))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([current_pair (list (car numbers)\
    \ (cadr numbers))]\n               [current_diff (abs (- (car current_pair) (cadr\
    \ current_pair)))]\n               [closest_diff (abs (- (car closest_pair) (cadr\
    \ closest_pair)))])\n          (if (< current_diff closest_diff)\n           \
    \   (find_closest_elements_helper (cdr numbers) current_pair)\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (let* ([min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers (rest numbers)))]\n\
    \         [min-diff-index (find-index (lambda (x) (= x min-diff)) (map (lambda\
    \ (x y) (abs (- x y))) numbers (rest numbers)))]\n         [min-diff-index-plus-one\
    \ (+ min-diff-index 1)])\n    (list (list-ref numbers min-diff-index) (list-ref\
    \ numbers min-diff-index-plus-one))))\n", "  (define (find_closest_elements-helper\
    \ numbers closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-so-far-diff\
    \ (abs (- (car closest-so-far) (cadr closest-so-far)))])\n          (if (< diff\
    \ closest-so-far-diff)\n              (find_closest_elements-helper (cdr numbers)\
    \ (list first second))\n              (find_closest_elements-helper (cdr numbers)\
    \ closest-so-far)))))\n  (find_closest_elements-helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) empty]\n    [else\n     (let* ([smallest-difference (abs (- (first\
    \ numbers) (second numbers)))]\n            [smallest-difference-pair (list (first\
    \ numbers) (second numbers))])\n       (for/fold ([smallest-difference smallest-difference]\n\
    \                  [smallest-difference-pair smallest-difference-pair])\n    \
    \             ([n1 (in-list numbers)]\n                  [n2 (in-list (rest numbers))])\n\
    \         (let ([difference (abs (- n1 n2))])\n           (if (< difference smallest-difference)\n\
    \               (values difference (list n1 n2))\n               (values smallest-difference\
    \ smallest-difference-pair)))))]))\n", "  (define (find_closest_elements_iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (let ([closest-pair (list (car numbers) (cadr numbers))]\n        [closest-distance\
    \ (abs (- (car numbers) (cadr numbers)))])\n    (for ([i (in-range (add1 (length\
    \ numbers)))]\n          [j (in-range (add1 i))])\n      (let ([distance (abs\
    \ (- (list-ref numbers i) (list-ref numbers j)))])\n        (when (< distance\
    \ closest-distance)\n          (set! closest-pair (list (list-ref numbers i) (list-ref\
    \ numbers j)))\n          (set! closest-distance distance))))\n    closest-pair))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest-difference (abs (- (car closest-pair) (cadr\
    \ closest-pair)))])\n          (if (< difference closest-difference)\n       \
    \       (find_closest_elements_helper (cdr numbers) (list first second))\n   \
    \           (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest_diff (abs\
    \ (- (car closest_pair) (cadr closest_pair)))])\n          (if (< diff closest_diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest_pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([smallest-diff (abs (- (car\
    \ numbers) (cadr numbers)))]\n               [new-pair (if (or (null? closest-pair)\n\
    \                                 (< smallest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))))\n                             (list (car numbers) (cadr\
    \ numbers))\n                             closest-pair)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new-pair))))\n  (find_closest_elements_helper numbers '()))\n",
  "  (let ([closest-pair (list (car numbers) (cadr numbers))]\n        [closest-distance\
    \ (abs (- (car numbers) (cadr numbers)))])\n    (for ([n (in-list (cddr numbers))])\n\
    \      (let ([distance (abs (- (car closest-pair) n))])\n        (when (< distance\
    \ closest-distance)\n          (set! closest-pair (list (car closest-pair) n))\n\
    \          (set! closest-distance distance))))\n    closest-pair))\n", "  (define\
    \ (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr numbers))\n\
    \        closest_pair\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [diff (abs (- first second))]\n            \
    \   [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n       \
    \   (if (< diff closest_diff)\n              (find_closest_elements_helper (cdr\
    \ numbers) (list first second))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements-helper numbers closest-so-far)\n    (if (null?\
    \ (cdr numbers))\n        closest-so-far\n        (let* ([first (car numbers)]\n\
    \               [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-so-far-diff (abs (- (car closest-so-far) (cadr closest-so-far)))])\n\
    \          (if (< diff closest-so-far-diff)\n              (find_closest_elements-helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements-helper\
    \ (cdr numbers) closest-so-far)))))\n  (find_closest_elements-helper numbers (list\
    \ (car numbers) (cadr numbers))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
