name: HumanEval_76_is_simple_power
language: rkt
prompt: "#lang racket\n\n;; Your task is to write a function that returns true if\
  \ a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple\
  \ power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n\
  ;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;;\
  \ >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n\
  ;; >>> (is_simple_power 5 3)\n;; false\n(define (is_simple_power x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
  \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
  \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
  \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2)\
  \ #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12\
  \ 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1\
  \ 12) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x 1) #t]\n\
    \      [(= x (expt n i)) #t]\n      [(> x (expt n i)) (is_simple_power-iter x\
    \ n (+ i 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n    [(= x\
    \ (* n (* n n))) #t]\n    [(= x (* n (* n (* n n)))) #t]\n    [(= x (* n (* n\
    \ (* n (* n n))))) #t]\n    [(= x (* n (* n (* n (* n (* n n)))))) #t]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n n))))))) #t]\n    [(= x (* n (* n (* n (* n\
    \ (* n (* n (* n n)))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))))) #t]\n    [(= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))))) #t]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (*", "  (let ([n-root (exact-integer-sqrt n)])\n  \
    \  (and (integer? n-root)\n         (= x (expt n-root 2)))))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n\
    \              (is_simple_power (/ x n) n)\n              #f))))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power (/\
    \ x n) n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (cond\n    \
    \  [(= n 1) (= x 1)]\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n", "  (define\
    \ (is-power? x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n   \
    \   [(and (> x n) (is-power? (/ x n) n)) true]\n      [else false]))\n  (is-power?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n      \
    \    (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n      #t\n\
    \      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n      \
    \        (is_simple_power (/ x n) n)\n              #f))))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(= x (*\
    \ n i)) true]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n    \
    \  [else false]))\n  (is_simple_power-iter x n 1))\n", "  (define (is_simple_power-iter\
    \ x n count)\n    (cond\n      [(= x 1) (and (= count 1) #t)]\n      [(= x n)\
    \ (and (= count 1) #t)]\n      [(= x (* n n)) (is_simple_power-iter x n (+ count\
    \ 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (define (is_simple_power-helper\
    \ x n i)\n    (if (= x (expt n i))\n        true\n        (if (&lt; i x)\n   \
    \         (is_simple_power-helper x n (+ i 1))\n            false)))\n  (is_simple_power-helper\
    \ x n 1))\n</code>\n", "  (if (= x 1)\n      true\n      (if (= x n)\n       \
    \   true\n          (if (= (modulo x n) 0)\n              (is_simple_power (/\
    \ x n) n)\n              false))))\n", "  (define (is_simple_power_iter x n i)\n\
    \    (cond ((= (expt n i) x) #t)\n          ((> (expt n i) x) #f)\n          (else\
    \ (is_simple_power_iter x n (+ i 1)))))\n  (is_simple_power_iter x n 1))\n", " \
    \ (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (let ([log (exact-floor (log x n))])\n    (and (integer? log)\n\
    \         (= (expt n log) x))))\n", "  (define (is_simple_power-iter x n i)\n\
    \    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((= x (* n i)) #t)\n\
    \          ((> x (* n i)) (is_simple_power-iter x n (+ i 1)))\n          (else\
    \ #f)))\n  (is_simple_power-iter x n 1))\n", "  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (modulo x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n", "  (if (= x 1)\n      #t\n      (if (=\
    \ (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
