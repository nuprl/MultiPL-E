name: HumanEval_76_is_simple_power
language: rkt
prompt: "#lang racket\n\n;; Your task is to write a function that returns true if\
  \ a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple\
  \ power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n\
  ;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;;\
  \ >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n\
  ;; >>> (is_simple_power 5 3)\n;; false\n(define (is_simple_power x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
  \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
  \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
  \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2)\
  \ #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12\
  \ 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1\
  \ 12) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x 1) #t]\n\
    \      [(= x (expt n i)) #t]\n      [(> x (expt n i)) (is_simple_power-iter x\
    \ n (+ i 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n    [(= x\
    \ (* n (* n n))) #t]\n    [(= x (* n (* n (* n n)))) #t]\n    [(= x (* n (* n\
    \ (* n (* n n))))) #t]\n    [(= x (* n (* n (* n (* n (* n n)))))) #t]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n n))))))) #t]\n    [(= x (* n (* n (* n (* n\
    \ (* n (* n (* n n)))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))))) #t]\n    [(= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))))) #t]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (*", "  (let ([n-root (exact-integer-sqrt n)])\n  \
    \  (and (integer? n-root)\n         (= x (expt n-root 2)))))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n\
    \              (is_simple_power (/ x n) n)\n              #f))))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power (/\
    \ x n) n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (cond\n    \
    \  [(= n 1) (= x 1)]\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n", "  (define\
    \ (is-power? x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n   \
    \   [(and (> x n) (is-power? (/ x n) n)) true]\n      [else false]))\n  (is-power?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n      \
    \    (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n      #t\n\
    \      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n      \
    \        (is_simple_power (/ x n) n)\n              #f))))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(= x (*\
    \ n i)) true]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n    \
    \  [else false]))\n  (is_simple_power-iter x n 1))\n", "  (define (is_simple_power-iter\
    \ x n count)\n    (cond\n      [(= x 1) (and (= count 1) #t)]\n      [(= x n)\
    \ (and (= count 1) #t)]\n      [(= x (* n n)) (is_simple_power-iter x n (+ count\
    \ 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (define (is_simple_power-helper\
    \ x n i)\n    (if (= x (expt n i))\n        true\n        (if (&lt; i x)\n   \
    \         (is_simple_power-helper x n (+ i 1))\n            false)))\n  (is_simple_power-helper\
    \ x n 1))\n</code>\n", "  (if (= x 1)\n      true\n      (if (= x n)\n       \
    \   true\n          (if (= (modulo x n) 0)\n              (is_simple_power (/\
    \ x n) n)\n              false))))\n", "  (define (is_simple_power_iter x n i)\n\
    \    (cond ((= (expt n i) x) #t)\n          ((> (expt n i) x) #f)\n          (else\
    \ (is_simple_power_iter x n (+ i 1)))))\n  (is_simple_power_iter x n 1))\n", " \
    \ (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (let ([log (exact-floor (log x n))])\n    (and (integer? log)\n\
    \         (= (expt n log) x))))\n", "  (define (is_simple_power-iter x n i)\n\
    \    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((= x (* n i)) #t)\n\
    \          ((> x (* n i)) (is_simple_power-iter x n (+ i 1)))\n          (else\
    \ #f)))\n  (is_simple_power-iter x n 1))\n", "  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (modulo x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n", "  (if (= x 1)\n      #t\n      (if (=\
    \ (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n",
  "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n\
    \          #t\n          (if (= x (* n n))\n              #t\n              (if\
    \ (= x (* n (* n n)))\n                  #t\n                  (if (= x (* n (*\
    \ n (* n n))))\n                      #t\n                      (if (= x (* n\
    \ (* n (* n (* n n)))))\n                          #t\n                      \
    \    (if (= x (* n (* n (* n (* n (* n n))))))\n                             \
    \ #t\n                              (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n\
    \                                  #t\n                                  (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n n))))))))\n                           \
    \           #t\n                                      (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n n)))))))))\n                                      \
    \    #t\n                                          (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))\n                                   \
    \           #t\n                                              (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                    \
    \                              #t\n                                          \
    \        (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n\
    \                                                      #t\n                  \
    \                                    (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))\n                                 \
    \                         #t\n                                               \
    \           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n n)))))))))))))\n                                                    \
    \          #t\n                                                              (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                  #t\n      \
    \                                                            (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (let ([x (exact->inexact x)])\n    (and (not (= x 1))\n         (not (= n 1))\n\
    \         (let loop ([i 1])\n           (if (= (expt n i) x)\n               #t\n\
    \               (if (< (expt n i) x)\n                   (loop (+ i 1))\n    \
    \               #f))))))\n", "  (define (is-power-of? n x)\n    (if (= n 1)\n\
    \        true\n        (if (= (remainder x n) 0)\n            (is-power-of? n\
    \ (/ x n))\n            false)))\n  (is-power-of? n x))\n", "  (cond\n    [(=\
    \ x 1) true]\n    [(= x n) true]\n    [(= (expt n (floor (log x n))) x) true]\n\
    \    [else false]))\n", "  (define (is_simple_power-iter x n i)\n    (cond ((=\
    \ n 1) #t)\n          ((= x (expt n i)) #t)\n          ((&gt; x (expt n i)) (is_simple_power-iter\
    \ x n (+ i 1)))\n          (else #f)))\n  (is_simple_power-iter x n 1))\n</code>\n",
  "  (let loop ([i 0])\n    (if (= (expt n i) x)\n        #t\n        (if (&lt; (expt\
    \ n i) x)\n            (loop (+ i 1))\n            #f))))\n</code>\n", "  (define\
    \ (is_simple_power-helper x n i)\n    (if (= x (expt n i))\n        true\n   \
    \     (if (&lt; x (expt n i))\n            false\n            (is_simple_power-helper\
    \ x n (+ i 1)))))\n  (is_simple_power-helper x n 1))\n</code>\n", "  (if (= x\
    \ 1)\n      true\n      (if (= x n)\n          true\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              false))))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond ((= x (* n i)) #t)\n        \
    \  ((> x (* n i)) (is_simple_power-iter x n (+ i 1)))\n          (else #f)))\n\
    \  (is_simple_power-iter x n 1))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (is_simple_power-iter x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n)\
    \ #t]\n      [(= x (* n i)) #t]\n      [(> x (* n i)) (is_simple_power-iter x\
    \ n (+ i 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (if (= (expt n (round (log x n))) x)\n  \
    \    #t\n      #f))\n", "  (define (is_simple_power-helper x n)\n    (cond\n \
    \     [(= x 1) true]\n      [(= x n) true]\n      [(= x (* n n)) true]\n     \
    \ [(= x (* n (* n n))) true]\n      [(= x (* n (* n (* n n)))) true]\n      [(=\
    \ x (* n (* n (* n (* n n))))) true]\n      [(= x (* n (* n (* n (* n (* n n))))))\
    \ true]\n      [(= x (* n (* n (* n (* n (* n (* n n))))))) true]\n      [(= x\
    \ (* n (* n (* n (* n (* n (* n (* n n)))))))) true]\n      [(= x (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))) true]\n      [(= x (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n n)))))))))) true]\n      [(= x (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n n))))))))))) true]\n      [(= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))) true]\n      [(= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))) true]\n\
    \      [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ n)))))))))))))) true]\n      [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))))) true]\n      [(= x (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))))\
    \ true]\n      [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n n))))))))))))))))) true]\n      [(= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (*", "  (define (is-power? x n)\n\
    \    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(> x n) (is-power?\
    \ (/ x n) n)]\n      [else #f]))\n  (is-power? x n))\n", "  (if (= x 1)\n    \
    \  #t\n      (if (= x n)\n          #t\n          (if (= (modulo x n) 0)\n   \
    \           (is_simple_power (/ x n) n)\n              #f))))\n", "  (if (= x\
    \ 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power (/ x\
    \ n) n)\n          #f)))\n", "  (let loop ([x x] [n n])\n    (cond\n      [(=\
    \ x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else (loop (/\
    \ x n) n)])))\n", "  (define (is_simple_power-helper x n i)\n    (if (= x (expt\
    \ n i))\n        true\n        (if (&lt; x (expt n i))\n            false\n  \
    \          (is_simple_power-helper x n (+ i 1)))))\n  (is_simple_power-helper\
    \ x n 0))\n", "  (define (is_simple_power-iter x n i)\n    (if (= x 1)\n     \
    \   #t\n        (if (= (expt n i) x)\n            #t\n            (is_simple_power-iter\
    \ x n (+ i 1)))))\n  (is_simple_power-iter x n 1))\n", "  (if (and (integer? x)\
    \ (integer? n))\n      (if (= x 1)\n          #t\n          (if (= n 1)\n    \
    \          #f\n              (if (= x n)\n                  #t\n             \
    \     (if (= (remainder x n) 0)\n                      (is_simple_power (/ x n)\
    \ n)\n                      #f))))\n      #f))\n", "  (if (= x 1)\n      #t\n\
    \      (if (= x n)\n          #t\n          (if (= (modulo x n) 0)\n         \
    \     (is_simple_power (/ x n) n)\n              #f))))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((= x (* n\
    \ i)) #t)\n          ((&gt; x (* n i)) (is_simple_power-iter x n (+ i 1)))\n \
    \         (else #f)))\n  (is_simple_power-iter x n 1))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n\
    \ i)) #t]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else\
    \ #f]))\n  (is_simple_power-iter x n 1))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n\
    \ i)) #t]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else\
    \ #f]))\n  (is_simple_power-iter x n 1))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(= x (*\
    \ n i)) true]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n    \
    \  [else false]))\n  (is_simple_power-iter x n 2))\n", "  (let loop ([i 1])\n\
    \    (cond\n      [(= x (expt n i)) #t]\n      [(> x (expt n i)) (loop (+ i 1))]\n\
    \      [else #f])))\n", "  (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n\
    \          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is_simple_power_iter\
    \ x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n\
    \ i)) #t]\n      [(> x (* n i)) (is_simple_power_iter x n (+ i 1))]\n      [else\
    \ #f]))\n  (is_simple_power_iter x n 1))\n", "  (define (iter x n i)\n    (if\
    \ (= x (expt n i))\n        #t\n        (if (< x (expt n i))\n            #f\n\
    \            (iter x n (+ i 1)))))\n  (iter x n 1))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x n)\n        #t\n        (if (< x n)\n            #f\n   \
    \         (is-power-of? (/ x n) n))))\n  (is-power-of? x n))\n", "  (if (= x 1)\n\
    \      true\n      (if (= (remainder x n) 0)\n          (is_simple_power (/ x\
    \ n) n)\n          false)))\n", "  (define (is_power? x n)\n    (if (= x 1)\n\
    \        true\n        (if (= (modulo x n) 0)\n            (is_power? (/ x n)\
    \ n)\n            false)))\n  (is_power? x n))\n", "  (if (= x 1)\n      #t\n\
    \      (if (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n    \
    \      #f)))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n \
    \         (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x n)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (if (= x 1)\n      #f\n  \
    \    (is-power-of? x n)))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) true]\n\
    \          [(= x n) true]\n          [(< x n) false]\n          [else (loop (/\
    \ x n) n)])))\n", "  (define (is_simple_power-iter x n i)\n    (cond\n      [(=\
    \ x 1) (equal? i 1)]\n      [(= x n) (equal? i 1)]\n      [(= x (* n n)) (equal?\
    \ i 2)]\n      [(= x (* n n n)) (equal? i 3)]\n      [(= x (* n n n n)) (equal?\
    \ i 4)]\n      [(= x (* n n n n n)) (equal? i 5)]\n      [(= x (* n n n n n n))\
    \ (equal? i 6)]\n      [(= x (* n n n n n n n)) (equal? i 7)]\n      [(= x (*\
    \ n n n n n n n n)) (equal? i 8)]\n      [(= x (* n n n n n n n n n)) (equal?\
    \ i 9)]\n      [(= x (* n n n n n n n n n n)) (equal? i 10)]\n      [(= x (* n\
    \ n n n n n n n n n n)) (equal? i 11)]\n      [(= x (* n n n n n n n n n n n n))\
    \ (equal? i 12)]\n      [(= x (* n n n n n n n n n n n n n)) (equal? i 13)]\n\
    \      [(= x (* n n n n n n n n n n n n n n)) (equal? i 14)]\n      [(= x (* n\
    \ n n n n n n n n n n n n n n)) (equal? i 15)]\n      [(= x (* n n n n n n n n\
    \ n n n n n n n n)) (equal? i 16)]\n      [(= x (* n n n n n n n n n n n n n n\
    \ n n n)) (equal? i 17)]\n      [(= x (* n n n n n n n n n n n n n n n n n n))\
    \ (equal? i 18)]\n      [(= x (* n n n n n n n n n n n n n n n n n n n)) (equal?\
    \ i 19)]\n      [(= x (* n n n n n n n n n n n n n n n n n n n n)) (equal? i 20)]\n\
    \      [(= x (* n n n n", "  (if (= x 1)\n      #t\n      (if (= (modulo x n)\
    \ 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (if (= x (* n i))\n        true\n        (if (&lt; x (* n i))\n\
    \            false\n            (is_simple_power-iter x n (+ i 1)))))\n  (is_simple_power-iter\
    \ x n 1))\n</code>\n", "  (define (is_simple_power-iter x n i)\n    (cond ((=\
    \ i 0) #t)\n          ((= x (expt n i)) #t)\n          ((&gt; x (expt n i)) (is_simple_power-iter\
    \ x n (+ i 1)))\n          (else #f)))\n  (is_simple_power-iter x n 0))\n</code>\n",
  "  (define (is-power-of? x n)\n    (cond ((= x 1) #t)\n          ((= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n))\n          (else #f)))\n  (and (is-power-of? x\
    \ n)\n       (= x (expt n (round (log x n))))))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond ((= x 1) #t)\n          ((= x (expt n i)) #t)\n          ((>\
    \ x (expt n i)) (is_simple_power-iter x n (+ i 1)))\n          (else #f)))\n \
    \ (is_simple_power-iter x n 1))\n", "  (if (= x 1)\n      #t\n      (if (= (modulo\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (is_simple_power_iter x n i)\n    (cond\n      [(= x 1) true]\n      [(= x n)\
    \ true]\n      [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power_iter\
    \ x n (+ i 1))]\n      [else false]))\n  (is_simple_power_iter x n 1))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= x (*\
    \ n n))\n              #t\n              (if (= x (* n (* n n)))\n           \
    \       #t\n                  (if (= x (* n (* n (* n n))))\n                \
    \      #t\n                      (if (= x (* n (* n (* n (* n n)))))\n       \
    \                   #t\n                          (if (= x (* n (* n (* n (* n\
    \ (* n n))))))\n                              #t\n                           \
    \   (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n                        \
    \          #t\n                                  (if (= x (* n (* n (* n (* n\
    \ (* n (* n (* n n))))))))\n                                      #t\n       \
    \                               (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))\n                                          #t\n               \
    \                           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n))))))))))\n                                              #t\n          \
    \                                    (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n))))))))))\n                                             \
    \     #t\n                                                  (if (= x (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n                \
    \                                      #t\n                                  \
    \                    (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))\n                                                \
    \          #t\n                                                          (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                              #t\n          \
    \                                                    (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n       \
    \                                                           #t\n             \
    \                                                     (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (define (is_simple_power_iter x n i)\n    (if (= x (* n i))\n        #t\n  \
    \      (if (&lt; x (* n i))\n            #f\n            (is_simple_power_iter\
    \ x n (+ i 1)))))\n  (is_simple_power_iter x n 1))\n", "  (if (= x 1)\n      #t\n\
    \      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n      \
    \        (is_simple_power (/ x n) n)\n              #f))))\n", "  (define (is-power-of-n?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of-n? (/ x n) n)\n            #f)))\n  (is-power-of-n? x n))\n",
  "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= x (*\
    \ n n))\n              #t\n              (if (= x (* n (* n n)))\n           \
    \       #t\n                  (if (= x (* n (* n (* n n))))\n                \
    \      #t\n                      (if (= x (* n (* n (* n (* n n)))))\n       \
    \                   #t\n                          (if (= x (* n (* n (* n (* n\
    \ (* n n))))))\n                              #t\n                           \
    \   (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n                        \
    \          #t\n                                  (if (= x (* n (* n (* n (* n\
    \ (* n (* n (* n n))))))))\n                                      #t\n       \
    \                               (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))\n                                          #t\n               \
    \                           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n))))))))))\n                                              #t\n          \
    \                                    (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n))))))))))\n                                             \
    \     #t\n                                                  (if (= x (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n                \
    \                                      #t\n                                  \
    \                    (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))\n                                                \
    \          #t\n                                                          (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                              #t\n          \
    \                                                    (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n       \
    \                                                           #t\n             \
    \                                                     (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is_simple_power_iter x n i)\n  \
    \  (if (= x (expt n i))\n        #t\n        (if (&lt; i x)\n            (is_simple_power_iter\
    \ x n (+ i 1))\n            #f)))\n  (is_simple_power_iter x n 0))\n</code>\n",
  "  (if (= x 1)\n      true\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          false)))\n", "  (define (is_simple_power-iter x n i)\n\
    \    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n i)) #t]\n\
    \      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else #f]))\n\
    \  (is_simple_power-iter x n 1))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (is_simple_power-iter x n i)\n    (cond ((= i 0) #f)\n          ((= (expt n\
    \ i) x) #t)\n          (else (is-simple-power-iter x n (- i 1)))))\n  (is-simple-power-iter\
    \ x n x))\n", "  (define (is-power? x n)\n    (cond ((= x 1) #t)\n          ((=\
    \ x n) #t)\n          ((< x n) #f)\n          (else (is-power? (/ x n) n))))\n\
    \  (is-power? x n))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n \
    \         [(= x n) #t]\n          [(> x n) (loop (- x n) n)]\n          [else\
    \ #f])))\n", "  (define (is-power-of? x n)\n    (cond\n      [(= x 1) true]\n\
    \      [(= x n) true]\n      [(> x n) (is-power-of? (/ x n) n)]\n      [else false]))\n\
    \  (is-power-of? x n))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n     \
    \     #t\n          (if (= x (* n n))\n              #t\n              (if (=\
    \ x (* n (* n n)))\n                  #t\n                  (if (= x (* n (* n\
    \ (* n n))))\n                      #t\n                      (if (= x (* n (*\
    \ n (* n (* n n)))))\n                          #t\n                         \
    \ (if (= x (* n (* n (* n (* n (* n n))))))\n                              #t\n\
    \                              (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n\
    \                                  #t\n                                  (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n n))))))))\n                           \
    \           #t\n                                      (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n n)))))))))\n                                      \
    \    #t\n                                          (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))\n                                   \
    \           #t\n                                              (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                    \
    \                              #t\n                                          \
    \        (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n\
    \                                                      #t\n                  \
    \                                    (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))\n                                 \
    \                         #t\n                                               \
    \           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n n)))))))))))))\n                                                    \
    \          #t\n                                                              (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                  #t\n      \
    \                                                            (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (define (is-power? x n)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n\
    \      [(> x n) (is-power? (/ x n) n)]\n      [else #f]))\n  (is-power? x n))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (define (is_simple_power-helper x n)\n    (if (= x 1)\n       \
    \ true\n        (if (= (remainder x n) 0)\n            (is_simple_power-helper\
    \ (/ x n) n)\n            false)))\n  (if (= n 1)\n      false\n      (is_simple_power-helper\
    \ x n)))\n", "  (define (is_simple_power-iter x n i)\n    (if (= x (expt n i))\n\
    \        true\n        (if (&lt; x (expt n i))\n            false\n          \
    \  (is_simple_power-iter x n (+ i 1)))))\n  (is_simple_power-iter x n 1))\n</code>\n",
  "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (modulo\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is_simple_power-iter x n i)\n  \
    \  (cond ((= x (* n i)) true)\n          ((> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1)))\n          (else false)))\n  (is_simple_power-iter x n 1))\n",
  "  (if (zero? x)\n      #t\n      (if (zero? n)\n          #f\n          (if (zero?\
    \ (modulo x n))\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= i 0) false]\n    \
    \  [(= x (expt n i)) true]\n      [else (is_simple_power-iter x n (- i 1))]))\n\
    \  (is_simple_power-iter x n x))\n", "  (define (is_simple_power-iter x n i)\n\
    \    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(= x (* n i)) true]\n\
    \      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else false]))\n\
    \  (is_simple_power-iter x n 1))\n", "  (if (= x 1)\n      #t\n      (if (= (expt\
    \ n (floor (log x n))) x)\n          #t\n          #f)))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power (/ x n)\
    \ n)\n          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x\
    \ n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (cond\n \
    \     [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo x n) 0) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter x n 1))\n", " \
    \ (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n    [(= x\
    \ (* n (* n n))) #t]\n    [(= x (* n (* n (* n n)))) #t]\n    [(= x (* n (* n\
    \ (* n (* n n))))) #t]\n    [(= x (* n (* n (* n (* n (* n n)))))) #t]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n n))))))) #t]\n    [(= x (* n (* n (* n (* n\
    \ (* n (* n (* n n)))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))))) #t]\n    [(= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))))) #t]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (*", "  (define (is-power-of? x n)\n    (if (= x 1)\n\
    \        true\n        (if (= (modulo x n) 0)\n            (is-power-of? (/ x\
    \ n) n)\n            false)))\n  (is-power-of? x n))\n", "  (define (is_simple_power-helper\
    \ x n i)\n    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((= x (* n\
    \ i)) #t)\n          ((&gt; x (* n i)) (is_simple_power-helper x n (+ i 1)))\n\
    \          (else #f)))\n  (is_simple_power-helper x n 2))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond ((= x (* n i)) #t)\n          ((< x (* n i)) #f)\n       \
    \   (else (is_simple_power-iter x n (+ i 1)))))\n  (is_simple_power-iter x n 1))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x 1) (if (= n 1) #t\
    \ #f)]\n      [(= x n) #t]\n      [(= x (* n i)) #t]\n      [else (is_simple_power-iter\
    \ x n (+ i 1))]))\n  (is_simple_power-iter x n 1))\n", "  (if (= x 1)\n      #t\n\
    \      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n      \
    \        (is_simple_power (/ x n) n)\n              #f))))\n", "  (if (= x 1)\n\
    \      true\n      (let ([p (expt n (integer-sqrt x))])\n        (if (= p x)\n\
    \            true\n            false))))\n", "  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond ((= x (* n i)) #t)\n        \
    \  ((> x (* n i)) (is_simple_power-iter x n (+ i 1)))\n          (else #f)))\n\
    \  (is_simple_power-iter x n 1))\n", "  (if (= x 1)\n      #t\n      (if (= (modulo\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n)\
    \ 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power? x n)\n    (cond\n      [(= n 1) (= x 1)]\n \
    \     [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (is-power?\
    \ (/ x n) n)]))\n  (is-power? x n))\n", "  (if (= x 1)\n      #t\n      (if (=\
    \ x n)\n          #t\n          (if (= (expt n (round (/ (log x) (log n)))) x)\n\
    \              #t\n              #f))))\n", "  (define (is_simple_power-helper\
    \ x n)\n    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((< x n) #f)\n\
    \          (else (is_simple_power-helper (/ x n) n))))\n  (is_simple_power-helper\
    \ x n))\n", "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x 1)\
    \ true]\n      [(= x n) true]\n      [(= x (* n i)) true]\n      [(> x (* n i))\
    \ (is_simple_power-iter x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter\
    \ x n 1))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n    \
    \      (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n     \
    \ true\n      (if (= x n)\n          true\n          (if (= (remainder x n) 0)\n\
    \              (is_simple_power (/ x n) n)\n              false))))\n", "  (if\
    \ (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is_simple_power-iter x n i)\n  \
    \  (cond ((= x 1) #t)\n          ((= x (expt n i)) #t)\n          ((&gt; x (expt\
    \ n i)) (is_simple_power-iter x n (+ i 1)))\n          (else #f)))\n  (is_simple_power-iter\
    \ x n 1))\n", "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x\
    \ 1) true]\n      [(= x n) true]\n      [(= x (* n i)) true]\n      [(> x (* n\
    \ i)) (is_simple_power-iter x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter\
    \ x n 1))\n", "  (let loop ([x x] [n n])\n    (cond [(= n 1) (= x 1)]\n      \
    \    [(= x n) #t]\n          [(< x n) #f]\n          [else (loop (/ x n) n)])))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond ((= x (* n i)) #t)\n        \
    \  ((&gt; x (* n i)) (is_simple_power-iter x n (+ i 1)))\n          (else #f)))\n\
    \  (is_simple_power-iter x n 1))\n</code>\n", "  (if (= x 1)\n      true\n   \
    \   (if (= x n)\n          true\n          (if (= (remainder x n) 0)\n       \
    \       (is_simple_power (/ x n) n)\n              false))))\n", "  (define (is_simple_power-helper\
    \ x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n\
    \ i)) #t]\n      [(> x (* n i)) (is_simple_power-helper x n (+ i 1))]\n      [else\
    \ #f]))\n  (is_simple_power-helper x n 1))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (if (= x (* n i))\n        true\n        (if (&lt; x (* n i))\n\
    \            false\n            (is_simple_power-iter x n (+ i 1)))))\n  (is_simple_power-iter\
    \ x n 1))\n</code>\n", "  (define (is_simple_power-iter x n i)\n    (cond ((=\
    \ x 1) #t)\n          ((= x (expt n i)) #t)\n          ((> x (expt n i)) (is_simple_power-iter\
    \ x n (+ i 1)))\n          (else #f)))\n  (is_simple_power-iter x n 1))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= (modulo\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (iter x n i)\n    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((=\
    \ (expt n i) x) #t)\n          ((> (expt n i) x) #f)\n          (else (iter x\
    \ n (+ i 1)))))\n  (iter x n 1))\n", "  (if (or (= x 1) (= n 1))\n      #f\n \
    \     (let ((pow (expt n (floor (log x n)))))\n        (= pow x))))\n", "  (if\
    \ (= x 1)\n      true\n      (if (= x n)\n          true\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              false))))\n",
  "  (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= (modulo\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (=\
    \ x 1)\n      true\n      (if (= x n)\n          true\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              false))))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n      \
    \    (if (= (remainder x n) 0)\n              (is_simple_power (/ x n) n)\n  \
    \            #f))))\n", "  (define (is_simple_power-iter x n acc)\n    (cond ((=\
    \ x acc) #t)\n          ((> x acc) (is_simple_power-iter x n (* acc n)))\n   \
    \       (#f)))\n  (is_simple_power-iter x n n))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n\
    \ i)) #t]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else\
    \ #f]))\n  (is_simple_power-iter x n 2))\n", "  (if (= x 1)\n      true\n    \
    \  (if (= x n)\n          true\n          (if (= (remainder x n) 0)\n        \
    \      (is_simple_power (/ x n) n)\n              false))))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n\
    \          #f)))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (remainder x n) 0)\n            (is-power? (/ x n) n)\n      \
    \      #f)))\n  (is-power? x n))\n", "  (define (power-of-n? x n)\n    (if (=\
    \ x n)\n        #t\n        (if (< x n)\n            #f\n            (power-of-n?\
    \ (/ x n) n))))\n  (if (= x 1)\n      #t\n      (power-of-n? x n)))\n", "  (let\
    \ ([x (sqrt x)])\n    (and (integer? x)\n         (= (expt n (round x)) x))))\n",
  "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (if (= x 1)\n      true\n      (if (= (modulo x n) 0)\n       \
    \   (is_simple_power (/ x n) n)\n          false)))\n", "  (let loop ([i 1])\n\
    \    (if (= (expt n i) x)\n        #t\n        (if (< (expt n i) x)\n        \
    \    (loop (+ i 1))\n            #f))))\n", "  (define (power-of-n? x n)\n   \
    \ (if (= x 1)\n        true\n        (if (= (modulo x n) 0)\n            (power-of-n?\
    \ (/ x n) n)\n            false)))\n  (power-of-n? x n))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n\
    \              (is_simple_power (/ x n) n)\n              #f))))\n", "  (define\
    \ (iter x n i)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(=\
    \ x (* n i)) true]\n      [else (iter x n (+ i 1))]))\n  (iter x n 2))\n", " \
    \ (define (is_simple_power-helper x n)\n    (cond ((= x 1) #t)\n          ((=\
    \ x n) #t)\n          ((< x n) #f)\n          (else (is_simple_power-helper (/\
    \ x n) n))))\n  (is_simple_power-helper x n))\n", "  (define (is_simple_power-helper\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (remainder x n) 0)\n     \
    \       (is_simple_power-helper (/ x n) n)\n            #f)))\n  (if (= x n)\n\
    \      #t\n      (is_simple_power-helper x n)))\n", "  (let loop ([i 1])\n   \
    \ (if (= (expt n i) x)\n        #t\n        (if (> (expt n i) x)\n           \
    \ #f\n            (loop (+ i 1))))))\n", "  (define (is_simple_power-helper x\
    \ n i)\n    (cond ((= x n) true)\n          ((= x (* n i)) true)\n          ((=\
    \ x 1) true)\n          ((= x 0) true)\n          ((= x (* n i)) true)\n     \
    \     (else (is_simple_power-helper x n (+ i 1)))))\n  (is_simple_power-helper\
    \ x n 2))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n    \
    \      (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is_simple_power-helper\
    \ x n)\n    (if (= x 1)\n        true\n        (if (= (modulo x n) 0)\n      \
    \      (is_simple_power-helper (/ x n) n)\n            false)))\n  (if (= x n)\n\
    \      true\n      (is_simple_power-helper x n)))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n\
    \ i)) #t]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else\
    \ #f]))\n  (is_simple_power-iter x n 2))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(= x (*\
    \ n i)) true]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n    \
    \  [else false]))\n  (is_simple_power-iter x n 1))\n", "  (if (and (integer? x)\
    \ (integer? n))\n      (if (= x 1)\n          true\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              false))\n\
    \      false))\n", "  (if (= n 1)\n      (if (= x 1)\n          #t\n         \
    \ #f)\n      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n\
    \              (is_simple_power (/ x n) n)\n              #f))))\n", "  (define\
    \ (is_simple_power-iter x n i)\n    (if (= x (* n i))\n        #t\n        (if\
    \ (&lt; x (* n i))\n            #f\n            (is_simple_power-iter x n (+ i\
    \ 1)))))\n  (is_simple_power-iter x n 1))\n</code>\n", "  (define (is-power-of-n?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of-n? (/ x n) n)\n            #f)))\n  (is-power-of-n? x n))\n",
  "  (define (is_simple_power-helper x n)\n    (if (= x 1)\n        #t\n        (if\
    \ (= (modulo x n) 0)\n            (is_simple_power-helper (/ x n) n)\n       \
    \     #f)))\n  (is_simple_power-helper x n))\n", "  (if (and (integer? x) (integer?\
    \ n))\n      (if (and (not (= x 0)) (not (= n 0)))\n          (if (= x 1)\n  \
    \            #t\n              (if (= n 1)\n                  #f\n           \
    \       (if (= (expt n (round (log x n))) x)\n                      #t\n     \
    \                 #f)))\n          #f)\n      #f))\n", "  (if (= x 1)\n      #t\n\
    \      (if (= x n)\n          #t\n          (if (= (remainder x n) 0)\n      \
    \        (is_simple_power (/ x n) n)\n              #f))))", "  (if (= x 1)\n\
    \      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power (/ x n)\
    \ n)\n          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n      \
    \    #t\n          (if (= (remainder x n) 0)\n              (is_simple_power (/\
    \ x n) n)\n              #f))))\n", "  (define (is_simple_power-iter x n i)\n\
    \    (cond\n      [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter x n 1))\n", " \
    \ (if (and (integer? x) (integer? n))\n      (if (= x 1)\n          true\n   \
    \       (if (= x n)\n              true\n              (if (= (modulo x n) 0)\n\
    \                  (is_simple_power (/ x n) n)\n                  false)))\n \
    \     false))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n       \
    \   [(= x n) #t]\n          [(= (modulo x n) 0) (loop (/ x n) n)]\n          [else\
    \ #f])))\n", "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= i 1)\
    \ (= x n)]\n      [(= x (* n i)) #t]\n      [else (is_simple_power-iter x n (-\
    \ i 1))]))\n  (is_simple_power-iter x n x))\n", "  (define (iter x n i)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(= x (* n i)) true]\n    \
    \  [else (iter x n (+ i 1))]))\n  (iter x n 2))\n", "  (if (zero? (modulo x n))\n\
    \      (if (zero? (modulo x (expt n 2)))\n          #f\n          #t)\n      #f))\n",
  "  (if (= x 1)\n      true\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          false)))\n", "  (define (is_simple_power-iter x n i)\n\
    \    (cond ((= x 1) #t)\n          ((= x (expt n i)) #t)\n          ((&gt; x (expt\
    \ n i)) (is_simple_power-iter x n (+ i 1)))\n          (else #f)))\n  (is_simple_power-iter\
    \ x n 1))\n</code>\n", "  (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n\
    \          (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n \
    \     #t\n      (let loop ([i 1])\n        (if (= (expt n i) x)\n            #t\n\
    \            (if (> (expt n i) x)\n                #f\n                (loop (+\
    \ i 1)))))))\n", "  (if (and (integer? x) (integer? n))\n      (if (= x 1)\n \
    \         #t\n          (if (= n 1)\n              #f\n              (if (= n\
    \ 0)\n                  #f\n                  (if (= x 0)\n                  \
    \    #f\n                      (if (= n 1)\n                          #f\n   \
    \                       (if (= x 1)\n                              #t\n      \
    \                        (if (= n 0)\n                                  #f\n \
    \                                 (if (= x 0)\n                              \
    \        #f\n                                      (if (= n 1)\n             \
    \                             #f\n                                          (if\
    \ (= x 1)\n                                              #t\n                \
    \                              (if (= n 0)\n                                 \
    \                 #f\n                                                  (if (=\
    \ x 0)\n                                                      #f\n           \
    \                                           (if (= n 1)\n                    \
    \                                      #f\n                                  \
    \                        (if (= x 1)\n                                       \
    \                       #t\n                                                 \
    \             (if (= n 0)\n                                                  \
    \                #f\n                                                        \
    \          (if (= x 0)\n                                                     \
    \                 #f\n                                                       \
    \               (if (= n 1)\n                                                \
    \                          #f\n                                              \
    \                            (if (= x 1)\n                                   \
    \                                           #t\n                             \
    \                                                 (if (= n 0)\n              \
    \                                                                    #f\n    \
    \                                                                            \
    \  (if (= x 0)\n                                                             \
    \                         #f\n                                               \
    \                                       (if (= n 1)\n                        \
    \                                                                  #f\n      \
    \                                                                            \
    \        (if (= x 1)\n                                                       \
    \                                       #t\n                                 \
    \                                                             (if (= n 0)\n  \
    \                                                                            \
    \                    #f\n                                                    \
    \                                              (if (= x 0)\n                 \
    \                                                                            \
    \         #f\n                                                               \
    \                                       (if (= n 1)\n                        \
    \                                                                            \
    \      #f\n                                                                  \
    \                                        (if (= x 1)\n                       \
    \                                                                            \
    \           #t\n                                                             \
    \                                                 (if (= n 0)\n              \
    \                                                                            \
    \                        #f\n                                                \
    \                                                                  (if (= x 0)\n\
    \                                                                            \
    \                                         ", "  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x 1) true]\n     \
    \ [(= x n) true]\n      [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter x n 2))\n", " \
    \ (define (is_simple_power_iter x n i)\n    (cond\n      [(= x 1) #t]\n      [(=\
    \ x n) #t]\n      [(= x (* n i)) #t]\n      [(> x (* n i)) (is_simple_power_iter\
    \ x n (+ i 1))]\n      [else #f]))\n  (is_simple_power_iter x n 1))\n", "  (define\
    \ (is_simple_power-iter x n i)\n    (cond\n      [(= x 1) true]\n      [(= x n)\
    \ true]\n      [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter x n 1))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (cond ((=\
    \ x 1) #t)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n        \
    \  (else #f)))\n  (is-power-of? x n))\n", "  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) true]\n          [(= x n) true]\n          [(< x n) false]\n      \
    \    [else (loop (/ x n) n)])))\n", "  (define (is_simple_power-iter x n i)\n\
    \    (cond\n      [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter x n 1))\n", " \
    \ (define (is-power? x n)\n    (cond\n      [(= x 1) #t]\n      [(< x 1) #f]\n\
    \      [(= (modulo x n) 0) (is-power? (/ x n) n)]\n      [else #f]))\n  (is-power?\
    \ x n))\n", "  (define (is_simple_power-helper x n)\n    (cond\n      [(= x 1)\
    \ true]\n      [(= x n) true]\n      [(= (remainder x n) 0) (is_simple_power-helper\
    \ (/ x n) n)]\n      [else false]))\n  (is_simple_power-helper x n))\n", "  (if\
    \ (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= x (* n n))\n\
    \              #t\n              (if (= x (* n (* n n)))\n                  #t\n\
    \                  (if (= x (* n (* n (* n n))))\n                      #t\n \
    \                     (if (= x (* n (* n (* n (* n n)))))\n                  \
    \        #t\n                          (if (= x (* n (* n (* n (* n (* n n))))))\n\
    \                              #t\n                              (if (= x (* n\
    \ (* n (* n (* n (* n (* n n)))))))\n                                  #t\n  \
    \                                (if (= x (* n (* n (* n (* n (* n (* n (* n n))))))))\n\
    \                                      #t\n                                  \
    \    (if (= x (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))\n           \
    \                               #t\n                                         \
    \ (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n        \
    \                                      #t\n                                  \
    \            (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                  #t\n                      \
    \                            (if (= x (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n n)))))))))))\n                                              \
    \        #t\n                                                      (if (= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\n   \
    \                                                       #t\n                 \
    \                                         (if (= x (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                      \
    \                                        #t\n                                \
    \                              (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                           \
    \                                       #t\n                                 \
    \                                 (if (= x (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                   \
    \                                                   #t", "  (let ((pow (expt n\
    \ (floor (log x n)))))\n    (= pow x)))\n", "  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond ((= x 1) #t)\n          ((= x\
    \ n) #t)\n          ((= x (* n i)) #t)\n          ((> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1)))\n          (else #f)))\n  (is_simple_power-iter x n 1))\n", " \
    \ (define (is_simple_power-iter x n i)\n    (cond ((= x (* n i)) #t)\n       \
    \   ((> x (* n i)) (is_simple_power-iter x n (+ i 1)))\n          (else #f)))\n\
    \  (is_simple_power-iter x n 1))\n", "  (define (is_simple_power-iter x n i)\n\
    \    (cond\n      [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter x n 1))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (modulo\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (if (zero? x)\n      #f\n      (if (zero? n)\n          #f\n          (if (zero?\
    \ (modulo x n))\n              (if (zero? (modulo x (expt n 2)))\n           \
    \       #f\n                  #t)\n              #f))))\n", "  (define (is_simple_power-iter\
    \ x n i)\n    (cond ((= x (* n n)) true)\n          ((= x (* n i)) true)\n   \
    \       ((= x (* n (* i i))) true)\n          ((> x (* n i)) (is_simple_power-iter\
    \ x n (+ i 1)))\n          (else false)))\n  (is_simple_power-iter x n 1))\n",
  "  (define (is_simple_power-helper x n i)\n    (if (= x (expt n i))\n        true\n\
    \        (if (&lt; x (expt n i))\n            false\n            (is_simple_power-helper\
    \ x n (+ i 1)))))\n  (is_simple_power-helper x n 1))\n</code>\n", "  (define (is_simple_power-helper\
    \ x n i)\n    (cond\n      [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power-helper\
    \ x n (+ i 1))]\n      [else false]))\n  (is_simple_power-helper x n 1))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
