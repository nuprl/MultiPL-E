name: HumanEval_103_rounded_avg
language: rkt
prompt: "#lang racket\n\n;; You are given two positive integers n and m, and your\
  \ task is to compute the\n;; average of the integers from n through m (including\
  \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
  ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n;;\
  \ \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"0b1111\"\
  \n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
  \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
  \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
  \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851) \"\
  0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n    (check-equal?\
  \ (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate 350 902) \"\
  0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal?\
  \ (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal?\
  \ (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
completions: ["  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n",
  "  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (cond\n    [(> n m) -1]\n    [else (integer->binary (round (/ (+ n m) 2)))]))\n",
  "  (if (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n \
    \           (string->number (number->string (round (/ sum 2.0))) 2)\n        \
    \    (string->number (number->string (/ sum 2)) 2)))))\n", "  (cond\n    [(> n\
    \ m) -1]\n    [else (string->number (number->string (round (/ (+ n m) 2))) 2)]))\n",
  "  (if (> n m) -1\n      (let ([sum (+ n m)])\n        (if (even? sum)\n       \
    \     (string->symbol (string-append \"0b\" (number->string (/ sum 2))))\n   \
    \         (string->symbol (string-append \"0b\" (number->string (/ (+ sum 1) 2))))))))\n",
  "  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (if (> n m)\n      -1\n      (define (sum n m)\n        (if (= n m)\n      \
    \      n\n            (+ n (sum (+ n 1) m))))\n      (define (average n m)\n \
    \       (round (/ (sum n m) (- m n))))\n      (number->string (average n m) 2)))\n",
  "  (cond\n    [(> n m) -1]\n    [else (integer->binary (round (/ (+ n m) 2)))]))\n",
  "  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (if (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n\
    \            (string->number (number->string (round (/ sum 2))) 2)\n         \
    \   (string->number (number->string (/ sum 2)) 2)))))\n", "  (if (> n m)\n   \
    \   -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n            (string->symbol\
    \ (string-append \"0b\" (number->string (round (/ sum 2.0)))))\n            (string->symbol\
    \ (string-append \"0b\" (number->string (round (/ sum 2.0)))))))))\n", "  (if\
    \ (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", "  (if\
    \ (&gt; n m)\n      -1\n      (integer-&gt;binary (round (/ (+ n m) 2)))))\n</code>\n",
  "  (if (> n m)\n      -1\n      (let* ([sum (+ n m)]\n             [avg (quotient\
    \ sum 2)]\n             [rounded (round avg)])\n        (string->symbol (string-append\
    \ \"0b\" (number->string (integer->binary rounded)))))))\n", "  (if (> n m)\n\
    \      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", "  (if (&gt; n\
    \ m)\n      -1\n      (integer-&gt;binary (round (/ (+ n m) 2)))))\n</code>\n",
  "  (if (&gt; n m)\n      -1\n      (let ([sum 0]\n            [count 0])\n     \
    \   (for ([i (in-range n (+ m 1))])\n          (set! sum (+ sum i))\n        \
    \  (set! count (+ count 1)))\n        (let ([avg (/ sum count)])\n          (string-append\
    \ \"0b\" (integer-&gt;binary (round avg)))))))\n</code>\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
