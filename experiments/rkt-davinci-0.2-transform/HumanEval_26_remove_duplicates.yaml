name: HumanEval_26_remove_duplicates
language: rkt
prompt: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
  \ more than once.\n;; Keep order of elements left the same as in the input.\n;;\
  \ >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 1 2 3 2 4 3 5))\
  \ (list 1 4 5))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? numbers) empty]\n        [(member (first numbers)\
    \ (rest numbers)) (remove_duplicates (rest numbers))]\n        [else (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove-duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers '()))\n",
  "  (define (remove-duplicates-helper numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-helper (rest\
    \ numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (cond\n    [(empty? numbers) empty]\n    [(member (first\
    \ numbers) (rest numbers)) (remove_duplicates (rest numbers))]\n    [else (cons\
    \ (first numbers) (remove_duplicates (rest numbers)))]))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove_duplicates_iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(member (first numbers) seen) (remove_duplicates_iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates_iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers '()))\n",
  "  (define (remove_duplicates-iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove_duplicates-iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove_duplicates_iter numbers seen-numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(member (first numbers) seen-numbers)\n\
    \       (remove_duplicates_iter (rest numbers) seen-numbers)]\n      [else\n \
    \      (cons (first numbers)\n             (remove_duplicates_iter (rest numbers)\n\
    \                                     (cons (first numbers) seen-numbers)))]))\n\
    \  (remove_duplicates_iter numbers empty))\n", "  (define (remove_duplicates-iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove_duplicates-iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove_duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates-iter numbers empty))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove-duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers empty))\n",
  "  (cond\n    [(empty? numbers) empty]\n    [(member (first numbers) (rest numbers))\
    \ (remove_duplicates (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates\
    \ (rest numbers)))]))\n", "  (let ([seen (make-hash)])\n    (for/list ([n numbers])\n\
    \      (unless (hash-ref seen n #f)\n        (hash-set! seen n #t)\n        n))))\n",
  "  (remove-duplicates-helper numbers '()))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
