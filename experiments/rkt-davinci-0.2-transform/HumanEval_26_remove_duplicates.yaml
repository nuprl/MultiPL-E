name: HumanEval_26_remove_duplicates
language: rkt
prompt: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
  \ more than once.\n;; Keep order of elements left the same as in the input.\n;;\
  \ >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
  \ numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 1 2 3 2 4 3 5))\
  \ (list 1 4 5))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? numbers) empty]\n        [(member (first numbers)\
    \ (rest numbers)) (remove_duplicates (rest numbers))]\n        [else (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove-duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers '()))\n",
  "  (define (remove-duplicates-helper numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-helper (rest\
    \ numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (cond\n    [(empty? numbers) empty]\n    [(member (first\
    \ numbers) (rest numbers)) (remove_duplicates (rest numbers))]\n    [else (cons\
    \ (first numbers) (remove_duplicates (rest numbers)))]))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove_duplicates_iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(member (first numbers) seen) (remove_duplicates_iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates_iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers '()))\n",
  "  (define (remove_duplicates-iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove_duplicates-iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove_duplicates_iter numbers seen-numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(member (first numbers) seen-numbers)\n\
    \       (remove_duplicates_iter (rest numbers) seen-numbers)]\n      [else\n \
    \      (cons (first numbers)\n             (remove_duplicates_iter (rest numbers)\n\
    \                                     (cons (first numbers) seen-numbers)))]))\n\
    \  (remove_duplicates_iter numbers empty))\n", "  (define (remove_duplicates-iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove_duplicates-iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove_duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates-iter numbers empty))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove-duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers empty))\n",
  "  (cond\n    [(empty? numbers) empty]\n    [(member (first numbers) (rest numbers))\
    \ (remove_duplicates (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates\
    \ (rest numbers)))]))\n", "  (let ([seen (make-hash)])\n    (for/list ([n numbers])\n\
    \      (unless (hash-ref seen n #f)\n        (hash-set! seen n #t)\n        n))))\n",
  "  (remove-duplicates-helper numbers '()))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers '()))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove_duplicates_iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove_duplicates_iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates_iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers empty))\n",
  "  (define (remove_duplicates_iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove_duplicates_iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates_iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers empty))\n",
  "  (define (remove_duplicates_iter numbers seen-so-far)\n    (cond\n      [(empty?\
    \ numbers) seen-so-far]\n      [(member (first numbers) seen-so-far) (remove_duplicates_iter\
    \ (rest numbers) seen-so-far)]\n      [else (remove_duplicates_iter (rest numbers)\
    \ (append seen-so-far (list (first numbers))))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates_helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates_helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_helper\
    \ numbers empty))\n", "  (let loop ([numbers numbers]\n             [result '()])\n\
    \    (cond [(empty? numbers) (reverse result)]\n          [(member (first numbers)\
    \ (rest numbers))\n           (loop (rest numbers) result)]\n          [else (loop\
    \ (rest numbers) (cons (first numbers) result))])))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers '()))\n", "  (filter (lambda (x)\
    \ (count x numbers)) numbers))\n", "  (let ([seen '()])\n    (for ([n numbers])\n\
    \      (unless (member n seen)\n        (set! seen (cons n seen))))\n    (reverse\
    \ seen)))\n", "  (let loop ([numbers numbers]\n             [result '()])\n  \
    \  (cond [(empty? numbers) (reverse result)]\n          [(member (first numbers)\
    \ (rest numbers))\n           (loop (rest numbers) result)]\n          [else (loop\
    \ (rest numbers) (cons (first numbers) result))])))\n", "  (define (remove_duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove_duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove_duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove_duplicates-helper numbers empty))\n", "  (define\
    \ (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n\
    \      [else (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons\
    \ (first numbers) seen)))]))\n  (remove-duplicates-iter numbers '()))\n", "  (define\
    \ (remove_duplicates_iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove_duplicates_iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove_duplicates_iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n", "  (cond [(empty? numbers) empty]\n        [(member (first numbers)\
    \ (rest numbers)) (remove_duplicates (rest numbers))]\n        [else (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]))\n", "  (define (remove_duplicates_iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove_duplicates_iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove_duplicates_iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates_iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers '()))\n", "  (define (remove_duplicates_iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove_duplicates_iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove_duplicates_iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates_iter numbers empty))\n", "  (define (remove_duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove_duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove_duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove_duplicates-helper numbers empty))\n", "  (define\
    \ (remove_duplicates-iter numbers result)\n    (cond\n      [(empty? numbers)\
    \ (reverse result)]\n      [(member (first numbers) result) (remove_duplicates-iter\
    \ (rest numbers) result)]\n      [else (remove_duplicates-iter (rest numbers)\
    \ (cons (first numbers) result))]))\n  (remove_duplicates-iter numbers '()))\n",
  "  (define (remove-duplicates-iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove-duplicates-iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove-duplicates-iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates_iter numbers result)\n    (cond\n\
    \      [(empty? numbers) result]\n      [(member (first numbers) result) (remove_duplicates_iter\
    \ (rest numbers) result)]\n      [else (remove_duplicates_iter (rest numbers)\
    \ (append result (list (first numbers))))]))\n  (remove_duplicates_iter numbers\
    \ '()))\n", "  (define (remove_duplicates-iter numbers seen-so-far)\n    (cond\n\
    \      [(empty? numbers) seen-so-far]\n      [(member (first numbers) seen-so-far)\
    \ (remove_duplicates-iter (rest numbers) seen-so-far)]\n      [else (remove_duplicates-iter\
    \ (rest numbers) (append seen-so-far (list (first numbers))))]))\n  (remove_duplicates-iter\
    \ numbers (list)))\n", "  (define (remove_duplicates-iter numbers seen-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(member (first numbers) seen-so-far)\
    \ (remove_duplicates-iter (rest numbers) seen-so-far)]\n      [else (cons (first\
    \ numbers) (remove_duplicates-iter (rest numbers) (cons (first numbers) seen-so-far)))]))\n\
    \  (remove_duplicates-iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove-duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers empty))\n",
  "  (define (remove_duplicates-iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove_duplicates-iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates-iter numbers result)\n    (cond\n\
    \      [(empty? numbers) result]\n      [(member (first numbers) result) (remove_duplicates-iter\
    \ (rest numbers) result)]\n      [else (remove_duplicates-iter (rest numbers)\
    \ (append result (list (first numbers))))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ '()))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n    \
    \  [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates-helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-helper\
    \ numbers empty))\n", "  (define (remove_duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ '()))\n", "  (define (remove_duplicates_helper numbers seen)\n    (cond\n  \
    \    [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove_duplicates_helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_helper\
    \ numbers '()))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (remove-duplicates-helper numbers '()))\n", "  (define\
    \ (remove_duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(member (first numbers) seen) (remove_duplicates-iter (rest numbers) seen)]\n\
    \      [else (cons (first numbers) (remove_duplicates-iter (rest numbers) (cons\
    \ (first numbers) seen)))]))\n  (remove_duplicates-iter numbers empty))\n", " \
    \ (define (remove-duplicates-helper numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-helper (rest\
    \ numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-helper numbers seen-numbers)\n   \
    \ (cond\n      [(empty? numbers) '()]\n      [(member (first numbers) seen-numbers)\
    \ (remove-duplicates-helper (rest numbers) seen-numbers)]\n      [else (cons (first\
    \ numbers) (remove-duplicates-helper (rest numbers) (cons (first numbers) seen-numbers)))]))\n\
    \  (remove-duplicates-helper numbers '()))\n", "  (define (remove_duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove_duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove_duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates-iter numbers empty))\n", "  (define (remove-duplicates-inner\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-inner (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-inner (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-inner numbers '()))\n", "  (define (remove_duplicates-iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove_duplicates-iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove_duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates-iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers '()))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove_duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers empty))\n",
  "  (define (remove-duplicates-iter numbers seen-so-far)\n    (cond [(empty? numbers)\
    \ empty]\n          [(member (first numbers) seen-so-far)\n           (remove-duplicates-iter\
    \ (rest numbers) seen-so-far)]\n          [else (cons (first numbers)\n      \
    \                (remove-duplicates-iter (rest numbers)\n                    \
    \                          (cons (first numbers) seen-so-far)))]))\n  (remove-duplicates-iter\
    \ numbers empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (let loop ([numbers numbers]\n             [result '()])\n  \
    \  (cond [(empty? numbers) (reverse result)]\n          [(member (first numbers)\
    \ (rest numbers))\n           (loop (rest numbers) result)]\n          [else (loop\
    \ (rest numbers) (cons (first numbers) result))])))\n", "  (define (remove-duplicates-iter\
    \ numbers seen-so-far)\n    (cond\n      [(empty? numbers) seen-so-far]\n    \
    \  [(member (first numbers) seen-so-far) (remove-duplicates-iter (rest numbers)\
    \ seen-so-far)]\n      [else (remove-duplicates-iter (rest numbers) (cons (first\
    \ numbers) seen-so-far))]))\n  (reverse (remove-duplicates-iter numbers '())))\n",
  "  (define (remove-duplicates-iter numbers seen-so-far)\n    (cond\n      [(empty?\
    \ numbers) seen-so-far]\n      [(member (first numbers) seen-so-far) (remove-duplicates-iter\
    \ (rest numbers) seen-so-far)]\n      [else (remove-duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen-so-far))]))\n  (reverse (remove-duplicates-iter numbers\
    \ '())))\n", "  (define (remove_duplicates_iter numbers seen)\n    (cond\n   \
    \   [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove_duplicates_iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ '()))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove-duplicates-helper numbers seen)\n   \
    \ (cond\n      [(empty? numbers) empty]\n      [(member (first numbers) seen)\
    \ (remove-duplicates-helper (rest numbers) seen)]\n      [else (cons (first numbers)\
    \ (remove-duplicates-helper (rest numbers) (cons (first numbers) seen)))]))\n\
    \  (remove-duplicates-helper numbers empty))\n", "  (define (remove-duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove-duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove-duplicates-helper numbers '()))\n", "  (define\
    \ (remove_duplicates_iter numbers result)\n    (cond [(empty? numbers) result]\n\
    \          [(member (first numbers) result) (remove_duplicates_iter (rest numbers)\
    \ result)]\n          [else (remove_duplicates_iter (rest numbers) (append result\
    \ (list (first numbers))))]))\n  (remove_duplicates_iter numbers (list)))\n",
  "  (define (remove_duplicates-iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove_duplicates-iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates_iter numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove_duplicates_iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove_duplicates_iter numbers seen-so-far)\n\
    \    (cond [(empty? numbers) empty]\n          [(member (first numbers) seen-so-far)\n\
    \           (remove_duplicates_iter (rest numbers) seen-so-far)]\n          [else\
    \ (cons (first numbers)\n                      (remove_duplicates_iter (rest numbers)\n\
    \                                              (cons (first numbers) seen-so-far)))]))\n\
    \  (remove_duplicates_iter numbers empty))\n", "  (define (remove_duplicates_iter\
    \ numbers acc)\n    (cond\n      [(empty? numbers) acc]\n      [(member (first\
    \ numbers) acc) (remove_duplicates_iter (rest numbers) acc)]\n      [else (remove_duplicates_iter\
    \ (rest numbers) (append acc (list (first numbers))))]))\n  (remove_duplicates_iter\
    \ numbers '()))\n", "  (define (remove-duplicates-iter numbers seen-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(member (first numbers) seen-so-far)\
    \ (remove-duplicates-iter (rest numbers) seen-so-far)]\n      [else (cons (first\
    \ numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers) seen-so-far)))]))\n\
    \  (remove-duplicates-iter numbers empty))\n", "  (define (remove-duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove-duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove-duplicates-helper numbers empty))\n", "  (cond\n\
    \    [(empty? numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove_duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers empty))\n",
  "  (define (remove_duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers empty))\n",
  "  (define (remove_duplicates_iter numbers result)\n    (cond\n      [(empty? numbers)\
    \ result]\n      [(member (first numbers) result) (remove_duplicates_iter (rest\
    \ numbers) result)]\n      [else (remove_duplicates_iter (rest numbers) (append\
    \ result (list (first numbers))))]))\n  (remove_duplicates_iter numbers (list)))\n",
  "  (define (remove_duplicates-helper numbers seen)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(member (first numbers) seen) (remove_duplicates-helper (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates-helper (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates-helper numbers '()))\n",
  "  (define (remove-duplicates-iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove-duplicates-iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove-duplicates-iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates_iter result numbers)\n    (cond\n\
    \      [(empty? numbers) result]\n      [(member (first numbers) result) (remove_duplicates_iter\
    \ result (rest numbers))]\n      [else (remove_duplicates_iter (append result\
    \ (list (first numbers))) (rest numbers))]))\n  (remove_duplicates_iter empty\
    \ numbers))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (cond\n    [(empty? numbers) empty]\n    [(member (first numbers)\
    \ (rest numbers)) (remove_duplicates (rest numbers))]\n    [else (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]))\n", "  (define (remove_duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove_duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove_duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates-iter numbers empty))\n", "  (define (remove-duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove-duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove-duplicates-helper numbers '()))\n", "  (define\
    \ (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n\
    \      [else (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons\
    \ (first numbers) seen)))]))\n  (remove-duplicates-iter numbers empty))\n", " \
    \ (define (remove-duplicates-helper numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-helper (rest\
    \ numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (cond [(empty? numbers) empty]\n        [(member (first\
    \ numbers) (rest numbers)) (remove_duplicates (rest numbers))]\n        [else\
    \ (cons (first numbers) (remove_duplicates (rest numbers)))]))\n", "  (define\
    \ (remove_duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(member (first numbers) seen) (remove_duplicates-iter (rest numbers) seen)]\n\
    \      [else (cons (first numbers) (remove_duplicates-iter (rest numbers) (cons\
    \ (first numbers) seen)))]))\n  (remove_duplicates-iter numbers empty))\n", " \
    \ (define (remove-duplicates-helper numbers seen)\n    (cond [(empty? numbers)\
    \ empty]\n          [(member (first numbers) seen) (remove-duplicates-helper (rest\
    \ numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (let ([seen '()])\n    (for ([n numbers])\n      (when (not (member\
    \ n seen))\n        (set! seen (cons n seen))))\n    (reverse seen)))\n", "  (define\
    \ (remove-duplicates-helper numbers seen-so-far)\n    (if (null? numbers)\n  \
    \      seen-so-far\n        (let ([current-number (car numbers)])\n          (if\
    \ (member current-number seen-so-far)\n              (remove-duplicates-helper\
    \ (cdr numbers) seen-so-far)\n              (remove-duplicates-helper (cdr numbers)\
    \ (cons current-number seen-so-far))))))\n  (reverse (remove-duplicates-helper\
    \ numbers '())))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ '()))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\
    \ [(empty? numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ '()))\n", "  (define (remove_duplicates-iter numbers seen)\n    (cond\n    \
    \  [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ '()))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove_duplicates_helper numbers seen)\n   \
    \ (cond [(empty? numbers) empty]\n          [(member (first numbers) seen) (remove_duplicates_helper\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove_duplicates_helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_helper\
    \ numbers empty))\n", "  (define (remove_duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates_iter numbers seen-so-far)\n    (cond\n\
    \      [(empty? numbers) seen-so-far]\n      [(member (first numbers) seen-so-far)\
    \ (remove_duplicates_iter (rest numbers) seen-so-far)]\n      [else (remove_duplicates_iter\
    \ (rest numbers) (append seen-so-far (list (first numbers))))]))\n  (remove_duplicates_iter\
    \ numbers '()))\n", "  (let loop ([numbers numbers]\n             [result '()])\n\
    \    (cond [(empty? numbers) result]\n          [(member (first numbers) (rest\
    \ numbers))\n           (loop (rest numbers) result)]\n          [else (loop (rest\
    \ numbers) (cons (first numbers) result))])))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (let ([seen (make-hash)])\n\
    \    (for/list ([n numbers])\n      (if (hash-ref seen n #f)\n          '()\n\
    \          (hash-set! seen n #t)\n          (list n)))))\n", "  (define (remove-duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove-duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove-duplicates-helper numbers empty))\n", "  (cond\n\
    \    [(empty? numbers) empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove_duplicates_iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove_duplicates_iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove_duplicates_iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers empty))\n",
  "  (define (remove-duplicates-helper numbers seen-so-far)\n    (cond\n      [(empty?\
    \ numbers) '()]\n      [(member (first numbers) seen-so-far) (remove-duplicates-helper\
    \ (rest numbers) seen-so-far)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen-so-far)))]))\n  (remove-duplicates-helper\
    \ numbers '()))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers '()))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove-duplicates-helper numbers result)\n \
    \   (cond\n      [(empty? numbers) result]\n      [(member (first numbers) result)\
    \ (remove-duplicates-helper (rest numbers) result)]\n      [else (remove-duplicates-helper\
    \ (rest numbers) (append result (list (first numbers))))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove_duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ '()))\n", "  (define (remove-duplicates-helper numbers seen-so-far)\n    (cond\n\
    \      [(empty? numbers) seen-so-far]\n      [(member (first numbers) seen-so-far)\
    \ (remove-duplicates-helper (rest numbers) seen-so-far)]\n      [else (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen-so-far))]))\n  (reverse (remove-duplicates-helper\
    \ numbers '())))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\
    \ [(empty? numbers) '()]\n          [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ '()))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n    \
    \  [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (cond [(empty? numbers) empty]\n        [(member (first numbers)\
    \ (rest numbers)) (remove_duplicates (rest numbers))]\n        [else (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (define (remove_duplicates_iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove_duplicates_iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove_duplicates_iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates_iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers empty))\n", "  (define (remove-duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove-duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove-duplicates-helper numbers empty))\n", "  (define\
    \ (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n\
    \      [else (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons\
    \ (first numbers) seen)))]))\n  (remove-duplicates-iter numbers '()))\n", "  (define\
    \ (remove_duplicates_iter numbers seen-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen-so-far) (remove_duplicates_iter\
    \ (rest numbers) seen-so-far)]\n      [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen-so-far)))]))\n  (remove_duplicates_iter\
    \ numbers empty))\n", "  (define (remove_duplicates-iter numbers seen)\n    (cond\
    \ [(empty? numbers) empty]\n          [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove_duplicates-iter numbers result)\n   \
    \ (cond [(empty? numbers) result]\n          [(member (first numbers) result)\
    \ (remove_duplicates-iter (rest numbers) result)]\n          [else (remove_duplicates-iter\
    \ (rest numbers) (append result (list (first numbers))))]))\n  (remove_duplicates-iter\
    \ numbers (list)))\n", "  (let ([seen (make-hash)])\n    (for/list ([n numbers])\n\
    \      (unless (hash-ref seen n #f)\n        (hash-set! seen n #t)\n        n))))\n",
  "  (define (remove-duplicates-helper numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-helper (rest\
    \ numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ '()))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n    \
    \  [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates_iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates_iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n", "  (define (remove_duplicates_helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove_duplicates_helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_helper\
    \ numbers '()))\n", "  (define (remove_duplicates_helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates_helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_helper\
    \ numbers empty))\n", "  (cond [(empty? numbers) empty]\n        [(member (first\
    \ numbers) (rest numbers)) (remove_duplicates (rest numbers))]\n        [else\
    \ (cons (first numbers) (remove_duplicates (rest numbers)))]))\n", "  (define\
    \ (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n\
    \      [else (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons\
    \ (first numbers) seen)))]))\n  (remove-duplicates-iter numbers empty))\n", " \
    \ (define (remove_duplicates-iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove_duplicates-iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates-iter numbers seen-numbers)\n    (cond\
    \ [(empty? numbers) empty]\n          [(member (first numbers) seen-numbers)\n\
    \           (remove_duplicates-iter (rest numbers) seen-numbers)]\n          [else\
    \ (cons (first numbers)\n                      (remove_duplicates-iter (rest numbers)\n\
    \                                              (cons (first numbers) seen-numbers)))]))\n\
    \  (remove_duplicates-iter numbers empty))\n", "  (define (remove-duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove-duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove-duplicates-helper numbers empty))\n", "  (define\
    \ (remove-duplicates-helper numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove-duplicates-helper (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove-duplicates-helper (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates_helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates_helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_helper\
    \ numbers empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ '()))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove-duplicates-helper numbers seen)\n   \
    \ (cond\n      [(empty? numbers) empty]\n      [(member (first numbers) seen)\
    \ (remove-duplicates-helper (rest numbers) seen)]\n      [else (cons (first numbers)\
    \ (remove-duplicates-helper (rest numbers) (cons (first numbers) seen)))]))\n\
    \  (remove-duplicates-helper numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(member\
    \ (first numbers) seen-so-far) (remove-duplicates-iter (rest numbers) seen-so-far)]\n\
    \      [else (cons (first numbers) (remove-duplicates-iter (rest numbers) (cons\
    \ (first numbers) seen-so-far)))]))\n  (remove-duplicates-iter numbers empty))\n",
  "  (define (remove-duplicates-iter numbers seen)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(member (first numbers) seen) (remove-duplicates-iter (rest numbers)\
    \ seen)]\n      [else (cons (first numbers) (remove-duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers empty))\n",
  "  (define (remove_duplicates-iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove_duplicates-iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove_duplicates-iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ '()))\n", "  (define (remove_duplicates-iter numbers acc)\n    (cond\n     \
    \ [(empty? numbers) (reverse acc)]\n      [(member (first numbers) acc) (remove_duplicates-iter\
    \ (rest numbers) acc)]\n      [else (remove_duplicates-iter (rest numbers) (cons\
    \ (first numbers) acc))]))\n  (remove_duplicates-iter numbers '()))\n", "  (define\
    \ (remove-duplicates-helper numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove-duplicates-helper (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove-duplicates-helper (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper numbers\
    \ empty))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) seen]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (remove-duplicates-helper (rest numbers)\
    \ (append seen (list (first numbers))))]))\n  (remove-duplicates-helper numbers\
    \ '()))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n    \
    \  [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers result)\n    (cond\n\
    \      [(empty? numbers) result]\n      [(member (first numbers) result) (remove-duplicates-iter\
    \ (rest numbers) result)]\n      [else (remove-duplicates-iter (rest numbers)\
    \ (append result (list (first numbers))))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove_duplicates_iter numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove_duplicates_iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ '()))\n", "  (define (remove_duplicates_helper numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates_helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_helper\
    \ numbers empty))\n", "  (define (remove-duplicates-helper numbers seen)\n   \
    \ (cond\n      [(empty? numbers) empty]\n      [(member (first numbers) seen)\
    \ (remove-duplicates-helper (rest numbers) seen)]\n      [else (cons (first numbers)\
    \ (remove-duplicates-helper (rest numbers) (cons (first numbers) seen)))]))\n\
    \  (remove-duplicates-helper numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen-so-far)\n    (cond\n      [(empty? numbers) seen-so-far]\n    \
    \  [(member (first numbers) seen-so-far) (remove-duplicates-iter (rest numbers)\
    \ seen-so-far)]\n      [else (remove-duplicates-iter (rest numbers) (cons (first\
    \ numbers) seen-so-far))]))\n  (reverse (remove-duplicates-iter numbers '())))\n",
  "  (define (remove_duplicates-iter numbers seen-so-far)\n    (cond\n      [(empty?\
    \ numbers) seen-so-far]\n      [(member (first numbers) seen-so-far) (remove_duplicates-iter\
    \ (rest numbers) seen-so-far)]\n      [else (remove_duplicates-iter (rest numbers)\
    \ (cons (first numbers) seen-so-far))]))\n  (reverse (remove_duplicates-iter numbers\
    \ empty)))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-helper numbers seen-so-far)\n    (cond\
    \ [(empty? numbers) '()]\n          [(member (first numbers) seen-so-far) (remove-duplicates-helper\
    \ (rest numbers) seen-so-far)]\n          [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen-so-far)))]))\n  (remove-duplicates-helper\
    \ numbers '()))\n", "  (define (remove_duplicates_iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove_duplicates_iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ '()))\n", "  (define (remove-duplicates-helper numbers seen)\n    (cond\n  \
    \    [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers '()))\n", "  (cond\n    [(empty? numbers) empty]\n    [(member (first\
    \ numbers) (rest numbers)) (remove_duplicates (rest numbers))]\n    [else (cons\
    \ (first numbers) (remove_duplicates (rest numbers)))]))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers '()))\n", "  (let ([seen (make-hash)])\n\
    \    (for/list ([n numbers])\n      (when (not (hash-ref seen n #f))\n       \
    \ (hash-set! seen n #t)\n        n))))\n", "  (define (remove_duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove_duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove_duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates-iter numbers '()))\n", "  (define (remove-duplicates-helper\
    \ numbers seen)\n    (cond\n      [(empty? numbers) empty]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-helper (rest numbers) seen)]\n      [else\
    \ (cons (first numbers) (remove-duplicates-helper (rest numbers) (cons (first\
    \ numbers) seen)))]))\n  (remove-duplicates-helper numbers empty))\n", "  (define\
    \ (remove-duplicates-iter numbers seen-so-far)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen-so-far)\n           (remove-duplicates-iter\
    \ (rest numbers) seen-so-far)]\n          [else (cons (first numbers)\n      \
    \                (remove-duplicates-iter (rest numbers)\n                    \
    \                          (cons (first numbers) seen-so-far)))]))\n  (remove-duplicates-iter\
    \ numbers empty))\n", "  (define (remove_duplicates-iter numbers seen)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n", "  (cond\n    [(empty? numbers) empty]\n    [(member (first numbers)\
    \ (rest numbers)) (remove_duplicates (rest numbers))]\n    [else (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]))\n", "  (cond\n    [(empty? numbers)\
    \ empty]\n    [(member (first numbers) (rest numbers)) (remove_duplicates (rest\
    \ numbers))]\n    [else (cons (first numbers) (remove_duplicates (rest numbers)))]))\n",
  "  (define (remove_duplicates_iter numbers seen)\n    (cond [(empty? numbers) empty]\n\
    \          [(member (first numbers) seen) (remove_duplicates_iter (rest numbers)\
    \ seen)]\n          [else (cons (first numbers) (remove_duplicates_iter (rest\
    \ numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n", "  (define (remove_duplicates_iter numbers seen)\n    (cond\n  \
    \    [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates_iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n", "  (define (remove-duplicates-iter numbers seen-so-far)\n    (cond\n\
    \      [(empty? numbers) seen-so-far]\n      [(member (first numbers) seen-so-far)\
    \ (remove-duplicates-iter (rest numbers) seen-so-far)]\n      [else (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen-so-far))]))\n  (reverse (remove-duplicates-iter\
    \ numbers '())))\n", "  (define (remove_duplicates_iter numbers seen-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(member (first numbers) seen-so-far)\n\
    \       (remove_duplicates_iter (rest numbers) seen-so-far)]\n      [else\n  \
    \     (cons (first numbers)\n             (remove_duplicates_iter (rest numbers)\n\
    \                                     (cons (first numbers) seen-so-far)))]))\n\
    \  (remove_duplicates_iter numbers empty))\n", "  (define (remove_duplicates_iter\
    \ numbers seen)\n    (cond [(empty? numbers) empty]\n          [(member (first\
    \ numbers) seen) (remove_duplicates_iter (rest numbers) seen)]\n          [else\
    \ (cons (first numbers) (remove_duplicates_iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove_duplicates_iter numbers empty))\n", "  (define (remove-duplicates-iter\
    \ numbers seen)\n    (cond\n      [(empty? numbers) '()]\n      [(member (first\
    \ numbers) seen) (remove-duplicates-iter (rest numbers) seen)]\n      [else (cons\
    \ (first numbers) (remove-duplicates-iter (rest numbers) (cons (first numbers)\
    \ seen)))]))\n  (remove-duplicates-iter numbers '()))\n", "  (cond [(empty? numbers)\
    \ empty]\n        [(member (first numbers) (rest numbers)) (remove_duplicates\
    \ (rest numbers))]\n        [else (cons (first numbers) (remove_duplicates (rest\
    \ numbers)))]))\n", "  (define (remove-duplicates-iter numbers seen)\n    (cond\
    \ [(empty? numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
