name: HumanEval_64_vowels_count
language: rkt
prompt: "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n\
  ;; a word as input and returns the number of vowels in the string.\n;; Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only\
  \ when it is at the end of the given word.\n;; Example:\n;; >>> (vowels_count \"\
  abcde\")\n;; 2\n;; >>> (vowels_count \"ACEDY\")\n;; 3\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is_vowel_y c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n\
    \  (cond\n    [(empty? s) 0]\n    [(is_vowel_y (first s))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(is_vowel (first s))\n     (vowels_count (rest s))]\n    [else\n\
    \     (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=?\
    \ (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (if (null? s)\n        0\n        (if (is-vowel?\
    \ (car s))\n            (+ 1 (count-vowels (cdr s)))\n            (count-vowels\
    \ (cdr s)))))\n  (if (null? s)\n      0\n      (if (is-vowel-at-end? (car (reverse\
    \ s)))\n          (+ 1 (count-vowels (reverse (cdr (reverse s)))))\n         \
    \ (count-vowels (reverse (cdr (reverse s)))))))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (vowels_count_helper s i)\n    (cond\
    \ ((= i (string-length s)) 0)\n          ((or (char=? (string-ref s i) #\\a)\n\
    \               (char=? (string-ref s i) #\\e)\n               (char=? (string-ref\
    \ s i) #\\i)\n               (char=? (string-ref s i) #\\o)\n               (char=?\
    \ (string-ref s i) #\\u)\n               (and (char=? (string-ref s i) #\\y)\n\
    \                    (= i (- (string-length s) 1))))\n           (+ 1 (vowels_count_helper\
    \ s (+ i 1))))\n          (else (vowels_count_helper s (+ i 1)))))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond [(empty? s) 0]\n        [(or (char=? (first s) #\\a)\n  \
    \           (char=? (first s) #\\e)\n             (char=? (first s) #\\i)\n  \
    \           (char=? (first s) #\\o)\n             (char=? (first s) #\\u))\n \
    \        (+ 1 (vowels_count (rest s)))]\n        [(and (char=? (first s) #\\y)\n\
    \              (empty? (rest s)))\n         (+ 1 (vowels_count (rest s)))]\n \
    \       [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n         (equal?\
    \ (first s) #\\i)\n         (equal? (first s) #\\o)\n         (equal? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n\
    \         (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n        \
    \ (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n    \
    \     1\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (or (equal? c #\\\
    a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n\
    \        (equal? c #\\u)))\n  (define (is_last_vowel? c)\n    (or (equal? c #\\\
    y)\n        (is_vowel? c)))\n  (define (count-vowels s)\n    (if (null? s)\n \
    \       0\n        (+ (if (is_vowel? (car s)) 1 0)\n           (count-vowels (cdr\
    \ s)))))\n  (define (count-last-vowel s)\n    (if (null? s)\n        0\n     \
    \   (+ (if (is_last_vowel? (car s)) 1 0)\n           (count-last-vowel (cdr s)))))\n\
    \  (+ (count-vowels s)\n     (count-last-vowel (reverse s))))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond [(empty? s) 0]\n        [(member (first s) '(#\\a\
    \ #\\e #\\i #\\o #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(and\
    \ (equal? (first s) #\\y) (empty? (rest s))) 1]\n        [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (add1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (if (empty? (rest s))\n                     \
    \             (add1 (vowels_count (rest s)))\n                               \
    \   (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n    \
    \       (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n        \
    \   (char=? (first s) #\\u))\n       (+ 1 (count-vowels (rest s)))]\n      [else\
    \ (count-vowels (rest s))]))\n  (if (char=? (last s) #\\y)\n      (+ 1 (count-vowels\
    \ (butlast s)))\n      (count-vowels s)))\n", "  (define (vowels_count-iter s\
    \ i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(or (char=? (string-ref\
    \ s i) #\\a)\n           (char=? (string-ref s i) #\\e)\n           (char=? (string-ref\
    \ s i) #\\i)\n           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref\
    \ s i) #\\u)\n           (and (char=? (string-ref s i) #\\y) (= i (- (string-length\
    \ s) 1))))\n       (+ 1 (vowels_count-iter s (+ i 1)))]\n      [else (vowels_count-iter\
    \ s (+ i 1))]))\n  (vowels_count-iter s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (= (first s) #\\a) (= (first s) #\\e) (= (first s) #\\i) (= (first s)\
    \ #\\o) (= (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (=\
    \ (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n    \
    \    (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_y c)\n    (char=? c #\\y))\n  (define (is_vowel_or_y c)\n    (or (is_vowel\
    \ c)\n        (is_y c)))\n  (define (is_last_char c)\n    (and (is_y c)\n    \
    \     (null? (cdr s))))\n  (define (count_vowels s)\n    (if (null? s)\n     \
    \   0\n        (+ (if (is_vowel_or_y (car s))\n               1\n            \
    \   0)\n           (count_vowels (cdr s)))))\n  (if (null? s)\n      0\n     \
    \ (if (is_last_char (car s))\n          (+ (count_vowels s)\n             1)\n\
    \          (count_vowels s))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty?\
    \ (rest s))\n         1\n         (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n\
    \         (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (equal?\
    \ c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c\
    \ #\\o)\n        (equal? c #\\u)))\n  (define (is_last_y c)\n    (and (equal?\
    \ c #\\y)\n         (equal? (substring s (sub1 (string-length s)) (string-length\
    \ s)) \"y\")))\n  (define (count_vowels s)\n    (cond ((null? s) 0)\n        \
    \  ((is_vowel (car s)) (+ 1 (count_vowels (cdr s))))\n          ((is_last_y (car\
    \ s)) (+ 1 (count_vowels (cdr s))))\n          (else (count_vowels (cdr s)))))\n\
    \  (count_vowels (string->list s)))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (helper s count)\n    (cond\n      [(empty? s) count]\n\
    \      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n    \
    \       (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n        \
    \   (char=? (first s) #\\u))\n       (helper (rest s) (+ count 1))]\n      [(and\
    \ (char=? (first s) #\\y)\n            (empty? (rest s)))\n       (helper (rest\
    \ s) (+ count 1))]\n      [else (helper (rest s) count)]))\n  (helper s 0))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n\
    \         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n        \
    \ (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-vowel-y c)\n    (or (char=? c #\\y)\n        (is-vowel\
    \ c)))\n  (define (is-vowel-y-end c)\n    (or (char=? c #\\y)\n        (is-vowel\
    \ c)))\n  (define (count-vowels s)\n    (cond ((null? s) 0)\n          ((is-vowel\
    \ (car s)) (+ 1 (count-vowels (cdr s))))\n          (else (count-vowels (cdr s)))))\n\
    \  (define (count-vowels-y s)\n    (cond ((null? s) 0)\n          ((is-vowel-y\
    \ (car s)) (+ 1 (count-vowels-y (cdr s))))\n          (else (count-vowels-y (cdr\
    \ s)))))\n  (define (count-vowels-y-end s)\n    (cond ((null? s) 0)\n        \
    \  ((is-vowel-y-end (car s)) (+ 1 (count-vowels-y-end (cdr s))))\n          (else\
    \ (count-vowels-y-end (cdr s)))))\n  (cond ((null? s) 0)\n        ((char=? (car\
    \ s) #\\y) (count-vowels-y-end (cdr s)))\n        (else (count-vowels-y s))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count-iter s n)\n    (cond ((string=? s\
    \ \"\") n)\n          ((or (string=? (substring s 0 1) \"a\")\n              \
    \ (string=? (substring s 0 1) \"e\")\n               (string=? (substring s 0\
    \ 1) \"i\")\n               (string=? (substring s 0 1) \"o\")\n             \
    \  (string=? (substring s 0 1) \"u\"))\n           (vowels_count-iter (substring\
    \ s 1) (+ n 1)))\n          ((and (string=? (substring s 0 1) \"y\")\n       \
    \         (string=? (substring s 1) \"\"))\n           (vowels_count-iter (substring\
    \ s 1) (+ n 1)))\n          (else (vowels_count-iter (substring s 1) n))))\n \
    \ (vowels_count-iter s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is_vowel_y c)\n    (or (char=? c #\\y)\n        (is_vowel\
    \ c)))\n  (define (count-vowels s)\n    (if (string-empty? s)\n        0\n   \
    \     (if (is_vowel (string-ref s 0))\n            (+ 1 (count-vowels (substring\
    \ s 1)))\n            (count-vowels (substring s 1)))))\n  (if (string-empty?\
    \ s)\n      0\n      (if (is_vowel_y (string-ref s (sub1 (string-length s))))\n\
    \          (+ 1 (count-vowels (substring s 0 (sub1 (string-length s)))))\n   \
    \       (count-vowels s))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (vowels_count-iter s count)\n    (cond\n      [(empty? s) count]\n  \
    \    [(char-ci=? (first s) #\\a) (vowels_count-iter (rest s) (+ count 1))]\n \
    \     [(char-ci=? (first s) #\\e) (vowels_count-iter (rest s) (+ count 1))]\n\
    \      [(char-ci=? (first s) #\\i) (vowels_count-iter (rest s) (+ count 1))]\n\
    \      [(char-ci=? (first s) #\\o) (vowels_count-iter (rest s) (+ count 1))]\n\
    \      [(char-ci=? (first s) #\\u) (vowels_count-iter (rest s) (+ count 1))]\n\
    \      [(char-ci=? (first s) #\\y) (vowels_count-iter (rest s) (+ count 1))]\n\
    \      [else (vowels_count-iter (rest s) count)]))\n  (vowels_count-iter s 0))\n",
  "  (define (vowels_count_iter s i n)\n    (cond\n      [(= i (string-length s))\
    \ n]\n      [(or (char=? (string-ref s i) #\\a)\n           (char=? (string-ref\
    \ s i) #\\e)\n           (char=? (string-ref s i) #\\i)\n           (char=? (string-ref\
    \ s i) #\\o)\n           (char=? (string-ref s i) #\\u)\n           (and (char=?\
    \ (string-ref s i) #\\y)\n                (= i (- (string-length s) 1))))\n  \
    \     (vowels_count_iter s (+ i 1) (+ n 1))]\n      [else (vowels_count_iter s\
    \ (+ i 1) n)]))\n  (vowels_count_iter s 0 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) \"y\") (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (vowels_count-iter s acc)\n    (cond\n\
    \      [(empty? s) acc]\n      [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \       (vowels_count-iter (rest s) (+ acc 1))]\n      [(and (equal? (first s)\
    \ #\\y) (empty? (rest s)))\n       (vowels_count-iter (rest s) (+ acc 1))]\n \
    \     [else (vowels_count-iter (rest s) acc)]))\n  (vowels_count-iter s 0))\n",
  "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s)\
    \ #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n\
    \         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (if (null? s)\n        0\n        (if (is-vowel?\
    \ (car s))\n            (+ 1 (count-vowels (cdr s)))\n            (count-vowels\
    \ (cdr s)))))\n  (if (null? s)\n      0\n      (if (is-vowel-at-end? (car (reverse\
    \ s)))\n          (+ 1 (count-vowels (reverse (cdr (reverse s)))))\n         \
    \ (count-vowels (reverse (cdr (reverse s)))))))\n", "  (define (vowels_count-helper\
    \ s i)\n    (if (= i (string-length s))\n        0\n        (if (or (= (string-ref\
    \ s i) #\\a)\n                (= (string-ref s i) #\\e)\n                (= (string-ref\
    \ s i) #\\i)\n                (= (string-ref s i) #\\o)\n                (= (string-ref\
    \ s i) #\\u)\n                (and (= (string-ref s i) #\\y)\n               \
    \      (= i (- (string-length s) 1))))\n            (+ 1 (vowels_count-helper\
    \ s (+ i 1)))\n            (vowels_count-helper s (+ i 1)))))\n  (vowels_count-helper\
    \ s 0))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is_vowel_at_end? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)\n        (char=? c #\\y)))\n  (define (vowels_count_helper s)\n    (if\
    \ (empty? s)\n        0\n        (if (is_vowel? (first s))\n            (+ 1 (vowels_count_helper\
    \ (rest s)))\n            (vowels_count_helper (rest s)))))\n  (if (empty? s)\n\
    \      0\n      (if (is_vowel_at_end? (last s))\n          (+ 1 (vowels_count_helper\
    \ (butlast s)))\n          (vowels_count_helper (butlast s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s)\
    \ 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n      \
    \   (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) 'y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count-iter s i count)\n    (cond ((= i (string-length\
    \ s)) count)\n          ((or (char=? (string-ref s i) #\\a)\n               (char=?\
    \ (string-ref s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n    \
    \           (char=? (string-ref s i) #\\o)\n               (char=? (string-ref\
    \ s i) #\\u))\n           (vowels_count-iter s (+ i 1) (+ count 1)))\n       \
    \   ((and (char=? (string-ref s i) #\\y)\n                (= i (- (string-length\
    \ s) 1)))\n           (vowels_count-iter s (+ i 1) (+ count 1)))\n          (else\
    \ (vowels_count-iter s (+ i 1) count))))\n  (vowels_count-iter s 0 0))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal?\
    \ (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal? (first s)\
    \ #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(or (equal? (first s) #\\A)\n         (equal? (first s) #\\E)\n        \
    \ (equal? (first s) #\\I)\n         (equal? (first s) #\\O)\n         (equal?\
    \ (first s) #\\U))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is_y c)\n    (char=? c #\\y))\n\
    \  (define (is_vowel_or_y c)\n    (or (is_vowel c)\n        (is_y c)))\n  (define\
    \ (is_y_at_end c)\n    (and (is_y c)\n         (null? (cdr s))))\n  (define (is_vowel_or_y_at_end\
    \ c)\n    (or (is_vowel c)\n        (is_y_at_end c)))\n  (cond\n    [(null? s)\
    \ 0]\n    [(is_vowel_or_y_at_end (car s))\n     (+ 1 (vowels_count (cdr s)))]\n\
    \    [(is_vowel_or_y (car s))\n     (vowels_count (cdr s))]\n    [else\n     (vowels_count\
    \ (cdr s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a\
    \ #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(member (first\
    \ s) '(#\\A #\\E #\\I #\\O #\\U))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (equal? (first s) #\\y) (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s) #\\y)\n\
    \     (if (empty? (rest s))\n         1\n         (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (vowels_count-helper s acc)\n    (cond\n      [(empty? s) acc]\n    \
    \  [(char-ci=? (first s) #\\a) (vowels_count-helper (rest s) (+ acc 1))]\n   \
    \   [(char-ci=? (first s) #\\e) (vowels_count-helper (rest s) (+ acc 1))]\n  \
    \    [(char-ci=? (first s) #\\i) (vowels_count-helper (rest s) (+ acc 1))]\n \
    \     [(char-ci=? (first s) #\\o) (vowels_count-helper (rest s) (+ acc 1))]\n\
    \      [(char-ci=? (first s) #\\u) (vowels_count-helper (rest s) (+ acc 1))]\n\
    \      [(char-ci=? (first s) #\\y) (vowels_count-helper (rest s) (+ acc 1))]\n\
    \      [else (vowels_count-helper (rest s) acc)]))\n  (vowels_count-helper s 0))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (vowels_count-iter s i count)\n    (cond ((= i (string-length s)) count)\n\
    \          ((or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u))\n   \
    \        (vowels_count-iter s (+ i 1) (+ count 1)))\n          ((and (char=? (string-ref\
    \ s i) #\\y)\n                (= i (- (string-length s) 1)))\n           (vowels_count-iter\
    \ s (+ i 1) (+ count 1)))\n          (else (vowels_count-iter s (+ i 1) count))))\n\
    \  (vowels_count-iter s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e\
    \ #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels s)\n    (if (string-empty?\
    \ s)\n        0\n        (if (is-vowel? (string-ref s 0))\n            (+ 1 (count-vowels\
    \ (string-drop s 1)))\n            (count-vowels (string-drop s 1)))))\n  (if\
    \ (string-empty? s)\n      0\n      (if (is-vowel-at-end? (string-ref s (- (string-length\
    \ s) 1)))\n          (+ 1 (count-vowels (string-drop s 1)))\n          (count-vowels\
    \ (string-drop s 1)))))\n", "  (let loop ([s s] [count 0])\n    (cond [(empty?\
    \ s) count]\n          [(or (char=? (first s) #\\a)\n               (char=? (first\
    \ s) #\\e)\n               (char=? (first s) #\\i)\n               (char=? (first\
    \ s) #\\o)\n               (char=? (first s) #\\u))\n           (loop (rest s)\
    \ (+ count 1))]\n          [(and (char=? (first s) #\\y)\n                (empty?\
    \ (rest s)))\n           (loop (rest s) (+ count 1))]\n          [else (loop (rest\
    \ s) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-y? c)\n    (char=? c #\\y))\n  (define (is-last-y? s)\n    (and (is-y? (string-ref\
    \ s (- (string-length s) 1)))\n         (not (is-y? (string-ref s (- (string-length\
    \ s) 2))))))\n  (define (count-vowels s)\n    (cond ((string=? s \"\") 0)\n  \
    \        ((is-vowel? (string-ref s 0))\n           (+ 1 (count-vowels (substring\
    \ s 1))))\n          (else (count-vowels (substring s 1)))))\n  (cond ((is-last-y?\
    \ s) (+ 1 (count-vowels (substring s 0 (- (string-length s) 1)))))\n        (else\
    \ (count-vowels s))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first\
    \ s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n\
    \         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n   \
    \ [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (member (first s) '(#\\A #\\E #\\I #\\\
    O #\\U))\n          (or (empty? (rest s))\n              (not (member (second\
    \ s) '(#\\a #\\e #\\i #\\o #\\u)))))\n     (+ 1 (vowels_count (rest s)))]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n    \
    \    (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define\
    \ (is_last_char c)\n    (equal? (string-length s) (add1 (string-index c s))))\n\
    \  (define (is_y_vowel c)\n    (and (equal? c #\\y) (is_last_char c)))\n  (define\
    \ (count_vowels s)\n    (cond ((null? s) 0)\n          ((is_vowel (car s)) (add1\
    \ (count_vowels (cdr s))))\n          ((is_y_vowel (car s)) (add1 (count_vowels\
    \ (cdr s))))\n          (else (count_vowels (cdr s)))))\n  (count_vowels (string->list\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n  \
    \       (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e\
    \ #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n  \
    \      (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n \
    \ (define (is_vowel_at_end? c)\n    (or (char=? c #\\a)\n        (char=? c #\\\
    e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n\
    \        (char=? c #\\y)))\n  (define (count-vowels s)\n    (cond ((null? s) 0)\n\
    \          ((is_vowel? (car s)) (+ 1 (count-vowels (cdr s))))\n          (else\
    \ (count-vowels (cdr s)))))\n  (if (is_vowel_at_end? (string-ref s (- (string-length\
    \ s) 1)))\n      (+ 1 (count-vowels (substring s 0 (- (string-length s) 1))))\n\
    \      (count-vowels s)))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n  \
    \       (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_helper s i)\n\
    \    (if (= i (string-length s))\n        0\n        (if (or (= (string-ref s\
    \ i) #\\a)\n                (= (string-ref s i) #\\e)\n                (= (string-ref\
    \ s i) #\\i)\n                (= (string-ref s i) #\\o)\n                (= (string-ref\
    \ s i) #\\u)\n                (and (= (string-ref s i) #\\y)\n               \
    \      (= i (- (string-length s) 1))))\n            (+ 1 (vowels_count_helper\
    \ s (+ i 1)))\n            (vowels_count_helper s (+ i 1)))))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n \
    \        (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count_iter s i count)\n    (cond\n     \
    \ [(= i (string-length s)) count]\n      [(or (char=? (string-ref s i) #\\a)\n\
    \           (char=? (string-ref s i) #\\e)\n           (char=? (string-ref s i)\
    \ #\\i)\n           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref\
    \ s i) #\\u)\n           (and (= i (- (string-length s) 1))\n                (char=?\
    \ (string-ref s i) #\\y)))\n       (vowels_count_iter s (+ i 1) (+ count 1))]\n\
    \      [else (vowels_count_iter s (+ i 1) count)]))\n  (vowels_count_iter s 0\
    \ 0))\n", "  (define (vowels_count-helper s acc)\n    (cond\n      [(empty? s)\
    \ acc]\n      [(char-ci=? (first s) #\\a) (vowels_count-helper (rest s) (+ acc\
    \ 1))]\n      [(char-ci=? (first s) #\\e) (vowels_count-helper (rest s) (+ acc\
    \ 1))]\n      [(char-ci=? (first s) #\\i) (vowels_count-helper (rest s) (+ acc\
    \ 1))]\n      [(char-ci=? (first s) #\\o) (vowels_count-helper (rest s) (+ acc\
    \ 1))]\n      [(char-ci=? (first s) #\\u) (vowels_count-helper (rest s) (+ acc\
    \ 1))]\n      [(char-ci=? (first s) #\\y) (vowels_count-helper (rest s) (+ acc\
    \ 1))]\n      [else (vowels_count-helper (rest s) acc)]))\n  (vowels_count-helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n \
    \        (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal?\
    \ (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n         1\n      \
    \   (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define\
    \ (vowels_count-iter s i count)\n    (cond ((= i (string-length s)) count)\n \
    \         ((or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u))\n   \
    \        (vowels_count-iter s (+ i 1) (+ count 1)))\n          ((and (char=? (string-ref\
    \ s i) #\\y)\n                (= i (- (string-length s) 1)))\n           (vowels_count-iter\
    \ s (+ i 1) (+ count 1)))\n          (else (vowels_count-iter s (+ i 1) count))))\n\
    \  (vowels_count-iter s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count_helper s acc)\n    (if (empty? s)\n\
    \        acc\n        (let ([c (first s)])\n          (cond\n            [(or\
    \ (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\\
    u))\n             (vowels_count_helper (rest s) (+ acc 1))]\n            [(and\
    \ (char=? c #\\y) (empty? (rest s)))\n             (vowels_count_helper (rest\
    \ s) (+ acc 1))]\n            [else\n             (vowels_count_helper (rest s)\
    \ acc)]))))\n  (vowels_count_helper s 0))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n  \
    \      (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n \
    \ (define (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n        (char=? c #\\\
    e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n\
    \        (char=? c #\\y)))\n  (define (count-vowels s)\n    (if (null? s)\n  \
    \      0\n        (if (is-vowel? (car s))\n            (+ 1 (count-vowels (cdr\
    \ s)))\n            (count-vowels (cdr s)))))\n  (if (null? s)\n      0\n    \
    \  (if (is-vowel-at-end? (car (reverse s)))\n          (+ 1 (count-vowels (reverse\
    \ (cdr (reverse s)))))\n          (count-vowels (reverse (cdr (reverse s)))))))\n",
  "  (define (vowels_count-helper s n)\n    (cond\n      [(empty? s) n]\n      [(char-ci=?\
    \ (first s) #\\a) (vowels_count-helper (rest s) (+ n 1))]\n      [(char-ci=? (first\
    \ s) #\\e) (vowels_count-helper (rest s) (+ n 1))]\n      [(char-ci=? (first s)\
    \ #\\i) (vowels_count-helper (rest s) (+ n 1))]\n      [(char-ci=? (first s) #\\\
    o) (vowels_count-helper (rest s) (+ n 1))]\n      [(char-ci=? (first s) #\\u)\
    \ (vowels_count-helper (rest s) (+ n 1))]\n      [(char-ci=? (first s) #\\y) (vowels_count-helper\
    \ (rest s) (+ n 1))]\n      [else (vowels_count-helper (rest s) n)]))\n  (vowels_count-helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n \
    \        (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n \
    \   (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n  \
    \      (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_y c)\n\
    \    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (vowels_count_helper\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel_y (first s)) (+ 1 (vowels_count_helper\
    \ (rest s)))]\n      [else (vowels_count_helper (rest s))]))\n  (vowels_count_helper\
    \ (string->list s)))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n  \
    \      (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n   \
    \     (char=? c #\\u)))\n  (define (is_vowel_y c)\n    (or (char=? c #\\y)\n \
    \       (is_vowel c)))\n  (define (vowels_count_helper s)\n    (cond ((null? s)\
    \ 0)\n          ((is_vowel_y (car s))\n           (+ 1 (vowels_count_helper (cdr\
    \ s))))\n          (else (vowels_count_helper (cdr s)))))\n  (if (null? s)\n \
    \     0\n      (if (is_vowel (car (reverse s)))\n          (vowels_count_helper\
    \ s)\n          (- (vowels_count_helper s) 1))))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is_vowel_y c)\n    (or (char=? c #\\y)\n        (is_vowel\
    \ c)))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels (rest s))]))\n\
    \  (define (count-vowels-y s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel_y\
    \ (first s)) (+ 1 (count-vowels-y (rest s)))]\n      [else (count-vowels-y (rest\
    \ s))]))\n  (if (char=? (last s) #\\y)\n      (count-vowels-y s)\n      (count-vowels\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n  \
    \       (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_vowel_or_y c)\n   \
    \ (or (is_vowel c)\n        (and (char=? c #\\y)\n             (not (is_vowel\
    \ (string-ref s (- (string-length s) 2)))))))\n  (define (count-vowels s)\n  \
    \  (cond ((null? s) 0)\n          ((is_vowel_or_y (car s)) (+ 1 (count-vowels\
    \ (cdr s))))\n          (else (count-vowels (cdr s)))))\n  (count-vowels (string->list\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n  \
    \       (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (vowels_count_iter s n)\n    (cond\n\
    \      [(empty? s) n]\n      [(or (char=? (first s) #\\a)\n           (char=?\
    \ (first s) #\\e)\n           (char=? (first s) #\\i)\n           (char=? (first\
    \ s) #\\o)\n           (char=? (first s) #\\u))\n       (vowels_count_iter (rest\
    \ s) (+ n 1))]\n      [(and (char=? (first s) #\\y)\n            (empty? (rest\
    \ s)))\n       (vowels_count_iter (rest s) (+ n 1))]\n      [else (vowels_count_iter\
    \ (rest s) n)]))\n  (vowels_count_iter s 0))\n", "  (define (vowels_count_helper\
    \ s acc)\n    (cond\n      [(empty? s) acc]\n      [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\" \"y\"))\n       (vowels_count_helper (rest s) (+ acc\
    \ 1))]\n      [else (vowels_count_helper (rest s) acc)]))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'a) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(equal? (first s) 'e) (+ 1 (vowels_count (rest s)))]\n   \
    \ [(equal? (first s) 'i) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s)\
    \ 'o) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) 'u) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(equal? (first s) 'y) (+ 1 (vowels_count (rest s)))]\n   \
    \ [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u)))\n  (define (is-y? c)\n    (and (equal? c #\\y)\n         (equal? (string-length\
    \ s) (add1 (string-index c s)))))\n  (define (count-vowels s)\n    (cond ((null?\
    \ s) 0)\n          ((or (is-vowel? (car s)) (is-y? (car s)))\n           (add1\
    \ (count-vowels (cdr s))))\n          (else (count-vowels (cdr s)))))\n  (count-vowels\
    \ (string->list s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first\
    \ s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n\
    \         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_y c)\n \
    \   (char=? c #\\y))\n  (define (is_vowel_or_y c)\n    (or (is_vowel c)\n    \
    \    (is_y c)))\n  (define (is_y_at_end c)\n    (and (is_y c)\n         (null?\
    \ (cdr (string-&gt;list s)))))\n  (define (vowels_count_helper s)\n    (cond ((null?\
    \ s) 0)\n          ((is_vowel_or_y (car s))\n           (+ 1 (vowels_count_helper\
    \ (cdr s))))\n          (else (vowels_count_helper (cdr s)))))\n  (if (is_y_at_end\
    \ (string-ref s (- (string-length s) 1)))\n      (+ 1 (vowels_count_helper (string-&gt;list\
    \ s)))\n      (vowels_count_helper (string-&gt;list s))))\n</code>\nI'm not sure\
    \ if this is the most idiomatic way to do this, but it works.\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n    \
    \ (+ 1 (vowels_count (rest s)))]\n    [(and (member (first s) '(#\\A #\\E #\\\
    I #\\O #\\U))\n          (or (empty? (rest s))\n              (not (member (first\
    \ (rest s)) '(#\\a #\\e #\\i #\\o #\\u)))))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (define (vowels_count_helper s i)\n    (if (= i (string-length s))\n        0\n\
    \        (if (or (= (string-ref s i) #\\a)\n                (= (string-ref s i)\
    \ #\\e)\n                (= (string-ref s i) #\\i)\n                (= (string-ref\
    \ s i) #\\o)\n                (= (string-ref s i) #\\u)\n                (and\
    \ (= (string-ref s i) #\\y)\n                     (= i (- (string-length s) 1))))\n\
    \            (+ 1 (vowels_count_helper s (+ i 1)))\n            (vowels_count_helper\
    \ s (+ i 1)))))\n  (vowels_count_helper s 0))\n", "  (define (vowels_count-iter\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(or (char=? (string-ref\
    \ s i) #\\a)\n           (char=? (string-ref s i) #\\e)\n           (char=? (string-ref\
    \ s i) #\\i)\n           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref\
    \ s i) #\\u)\n           (and (= i (- (string-length s) 1))\n                (char=?\
    \ (string-ref s i) #\\y)))\n       (+ 1 (vowels_count-iter s (+ i 1)))]\n    \
    \  [else (vowels_count-iter s (+ i 1))]))\n  (vowels_count-iter s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (member\
    \ (first s) '(\"A\" \"E\" \"I\" \"O\" \"U\"))\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(member (first s) '(\"A\" \"E\" \"I\" \"O\" \"U\"))\n    \
    \ (+ 1 (vowels_count (rest s)))]\n    [(and (member (first s) '(\"y\" \"Y\"))\n\
    \          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_vowel_y c)\n    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (count_vowels\
    \ s)\n    (cond ((null? s) 0)\n          ((is_vowel (car s)) (+ 1 (count_vowels\
    \ (cdr s))))\n          (else (count_vowels (cdr s)))))\n  (define (count_vowels_y\
    \ s)\n    (cond ((null? s) 0)\n          ((is_vowel_y (car s)) (+ 1 (count_vowels_y\
    \ (cdr s))))\n          (else (count_vowels_y (cdr s)))))\n  (cond ((null? s)\
    \ 0)\n        ((is_vowel (car s)) (count_vowels (cdr s)))\n        ((is_vowel_y\
    \ (car s)) (count_vowels_y (cdr s)))\n        (else (vowels_count (cdr s)))))\n",
  "  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n    \
    \    (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_vowel_y c)\n    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (is_vowel_y_end\
    \ c)\n    (and (char=? c #\\y)\n         (null? (cdr s))))\n  (define (count_vowels\
    \ s)\n    (if (null? s)\n        0\n        (+ (if (is_vowel_y (car s)) 1 0)\n\
    \           (count_vowels (cdr s)))))\n  (if (is_vowel_y_end (car (reverse s)))\n\
    \      (count_vowels s)\n      (- (count_vowels s) 1)))\n", "  (define (is_vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s)\
    \ #\\a)\n         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n\
    \         (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_helper\
    \ s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n      [(string-contains\
    \ \"aeiouy\" (string-ref s i))\n       (vowels_count_helper s (+ i 1) (+ acc 1))]\n\
    \      [else (vowels_count_helper s (+ i 1) acc)]))\n  (vowels_count_helper s\
    \ 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\\
    i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s)\
    \ #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (define\
    \ (vowels_count_iter s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n\
    \      [(or (char=? (string-ref s i) #\\a)\n           (char=? (string-ref s i)\
    \ #\\e)\n           (char=? (string-ref s i) #\\i)\n           (char=? (string-ref\
    \ s i) #\\o)\n           (char=? (string-ref s i) #\\u)\n           (and (= i\
    \ (- (string-length s) 1))\n                (char=? (string-ref s i) #\\y)))\n\
    \       (vowels_count_iter s (+ i 1) (+ acc 1))]\n      [else (vowels_count_iter\
    \ s (+ i 1) acc)]))\n  (vowels_count_iter s 0 0))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-iter\
    \ s i count)\n    (cond\n      [(= i (string-length s)) count]\n      [(or (=\
    \ (string-ref s i) #\\a)\n           (= (string-ref s i) #\\e)\n           (=\
    \ (string-ref s i) #\\i)\n           (= (string-ref s i) #\\o)\n           (=\
    \ (string-ref s i) #\\u)\n           (and (= (string-ref s i) #\\y)\n        \
    \        (= i (- (string-length s) 1))))\n       (vowels_count-iter s (+ i 1)\
    \ (+ count 1))]\n      [else (vowels_count-iter s (+ i 1) count)]))\n  (vowels_count-iter\
    \ s 0 0))\n", "  (define (helper s acc)\n    (cond\n      [(empty? s) acc]\n \
    \     [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n     \
    \      (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n         \
    \  (char=? (first s) #\\u))\n       (helper (rest s) (+ acc 1))]\n      [(and\
    \ (char=? (first s) #\\y)\n            (empty? (rest s)))\n       (helper (rest\
    \ s) (+ acc 1))]\n      [else (helper (rest s) acc)]))\n  (helper s 0))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define (is_last_vowel c)\n    (and (is_vowel\
    \ c)\n         (not (is_vowel (string-ref s (- (string-length s) 2))))))\n  (define\
    \ (vowels_count_iter s n)\n    (cond\n      [(empty? s) n]\n      [(is_last_vowel\
    \ (first s)) (vowels_count_iter (rest s) (+ n 1))]\n      [(is_vowel (first s))\
    \ (vowels_count_iter (rest s) (+ n 1))]\n      [else (vowels_count_iter (rest\
    \ s) n)]))\n  (vowels_count_iter s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (member (first s) '(#\\A #\\E #\\I #\\O #\\U))\n    \
    \      (or (empty? (rest s))\n              (and (not (empty? (rest s)))\n   \
    \                (member (second s) '(#\\a #\\e #\\i #\\o #\\u)))))\n     (+ 1\
    \ (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define\
    \ (is-vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-y c)\n\
    \    (member c '(#\\y)))\n  (define (is-vowel-or-y c)\n    (or (is-vowel c) (is-y\
    \ c)))\n  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel-or-y\
    \ (first s)) (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels (rest s))]))\n\
    \  (define (count-y s)\n    (cond\n      [(empty? s) 0]\n      [(is-y (first s))\
    \ (+ 1 (count-y (rest s)))]\n      [else (count-y (rest s))]))\n  (if (is-y (last\
    \ s))\n      (+ (count-vowels s) (count-y s))\n      (count-vowels s)))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (let loop ([s s] [count 0])\n    (cond\
    \ [(empty? s) count]\n          [(or (char=? (first s) #\\a)\n               (char=?\
    \ (first s) #\\e)\n               (char=? (first s) #\\i)\n               (char=?\
    \ (first s) #\\o)\n               (char=? (first s) #\\u))\n           (loop (rest\
    \ s) (+ count 1))]\n          [(and (char=? (first s) #\\y)\n                (empty?\
    \ (rest s)))\n           (loop (rest s) (+ count 1))]\n          [else (loop (rest\
    \ s) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n    \
    \     1\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond [(empty? s) 0]\n        [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \         (+ 1 (vowels_count (rest s)))]\n        [(and (equal? (first s) #\\\
    y) (empty? (rest s))) 1]\n        [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s)\
    \ 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n      \
    \   (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) 'y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"\
    u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) \"y\"\
    ) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n    \
    \ (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest\
    \ s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n\
    \    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n \
    \       (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is_vowel_y c)\n\
    \    (or (is_vowel c)\n        (and (equal? c #\\y)\n             (equal? (string-length\
    \ s) (add1 (string-index c s))))))\n  (define (count_vowels s)\n    (cond ((null?\
    \ s) 0)\n          ((is_vowel_y (string-ref s 0)) (add1 (count_vowels (string-tail\
    \ s))))\n          (else (count_vowels (string-tail s)))))\n  (count_vowels s))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-iter\
    \ s count)\n    (cond ((null? s) count)\n          ((or (equal? (car s) #\\a)\n\
    \               (equal? (car s) #\\e)\n               (equal? (car s) #\\i)\n\
    \               (equal? (car s) #\\o)\n               (equal? (car s) #\\u))\n\
    \           (vowels_count-iter (cdr s) (+ count 1)))\n          ((and (equal?\
    \ (car s) #\\y)\n                (null? (cdr s)))\n           (vowels_count-iter\
    \ (cdr s) (+ count 1)))\n          (else (vowels_count-iter (cdr s) count))))\n\
    \  (vowels_count-iter (string->list s) 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n         (equal?\
    \ (first s) #\\i)\n         (equal? (first s) #\\o)\n         (equal? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal?\
    \ (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal? (first s)\
    \ #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (is-vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-y c)\n    (char=? c #\\y))\n\
    \  (define (is-vowel-or-y c)\n    (or (is-vowel c)\n        (is-y c)))\n  (define\
    \ (is-y-at-end c)\n    (and (is-y c)\n         (null? (cdr s))))\n  (define (is-vowel-or-y-at-end\
    \ c)\n    (or (is-vowel c)\n        (is-y-at-end c)))\n  (cond ((null? s) 0)\n\
    \        ((is-vowel-or-y-at-end (car s))\n         (+ 1 (vowels_count (cdr s))))\n\
    \        (else (vowels_count (cdr s)))))\n", "  (define (vowels_count-iter s i)\n\
    \    (if (= i (string-length s))\n        0\n        (if (or (= (string-ref s\
    \ i) #\\a)\n                (= (string-ref s i) #\\e)\n                (= (string-ref\
    \ s i) #\\i)\n                (= (string-ref s i) #\\o)\n                (= (string-ref\
    \ s i) #\\u)\n                (and (= (string-ref s i) #\\y)\n               \
    \      (= i (- (string-length s) 1))))\n            (+ 1 (vowels_count-iter s\
    \ (+ i 1)))\n            (vowels_count-iter s (+ i 1)))))\n  (vowels_count-iter\
    \ s 0))\n", "  (define (vowels_count_helper s n)\n    (cond\n      [(empty? s)\
    \ n]\n      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n\
    \           (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n    \
    \       (char=? (first s) #\\u))\n       (vowels_count_helper (rest s) (+ n 1))]\n\
    \      [(and (char=? (first s) #\\y) (empty? (rest s)))\n       (vowels_count_helper\
    \ (rest s) (+ n 1))]\n      [else (vowels_count_helper (rest s) n)]))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n   \
    \      (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond [(empty? s) 0]\n        [(or (char=?\
    \ (first s) #\\a)\n             (char=? (first s) #\\e)\n             (char=?\
    \ (first s) #\\i)\n             (char=? (first s) #\\o)\n             (char=?\
    \ (first s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(and (char=?\
    \ (first s) #\\y)\n              (empty? (rest s)))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [else (vowels_count (rest s))]))\n", "  (define (is_vowel\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define (count-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n      [else (count-vowels (rest s))]))\n  (count-vowels (string->list\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n  \
    \       (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-iter\
    \ s i)\n    (if (= i (string-length s))\n        0\n        (if (or (= (string-ref\
    \ s i) #\\a)\n                (= (string-ref s i) #\\e)\n                (= (string-ref\
    \ s i) #\\i)\n                (= (string-ref s i) #\\o)\n                (= (string-ref\
    \ s i) #\\u)\n                (and (= (string-ref s i) #\\y)\n               \
    \      (= i (- (string-length s) 1))))\n            (+ 1 (vowels_count-iter s\
    \ (+ i 1)))\n            (vowels_count-iter s (+ i 1)))))\n  (vowels_count-iter\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n \
    \        (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) \"y\") (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (equal? c #\\\
    a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n\
    \        (equal? c #\\u)))\n  (define (is_y c)\n    (equal? c #\\y))\n  (define\
    \ (count-vowels s)\n    (if (empty? s)\n        0\n        (if (is_vowel (first\
    \ s))\n            (+ 1 (count-vowels (rest s)))\n            (count-vowels (rest\
    \ s)))))\n  (if (empty? s)\n      0\n      (if (is_y (last s))\n          (+ 1\
    \ (count-vowels (butlast s)))\n          (count-vowels s))))\n", "  (cond\n  \
    \  [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest\
    \ s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_y c)\n\
    \    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (count-vowels s)\n\
    \    (if (string-empty? s)\n        0\n        (if (is_vowel (string-ref s 0))\n\
    \            (+ 1 (count-vowels (string-drop s 1)))\n            (count-vowels\
    \ (string-drop s 1)))))\n  (if (string-empty? s)\n      0\n      (if (is_vowel_y\
    \ (string-ref s (- (string-length s) 1)))\n          (+ 1 (count-vowels (string-drop-right\
    \ s 1)))\n          (count-vowels (string-drop-right s 1)))))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e\
    \ #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_last_vowel c)\n\
    \    (and (char=? c #\\y)\n         (not (is_vowel (string-ref s (- (string-length\
    \ s) 2))))))\n  (define (count-vowels s)\n    (if (string-empty? s)\n        0\n\
    \        (if (or (is_vowel (string-ref s 0))\n                (is_last_vowel (string-ref\
    \ s 0)))\n            (+ 1 (count-vowels (substring s 1)))\n            (count-vowels\
    \ (substring s 1)))))\n  (count-vowels s))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond [(empty? s) 0]\n        [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \         (+ 1 (vowels_count (rest s)))]\n        [(and (equal? (first s) #\\\
    y) (empty? (rest s))) 1]\n        [else (vowels_count (rest s))]))\n", "  (define\
    \ (vowels_count_iter s i acc)\n    (cond\n      [(empty? s) acc]\n      [(char=?\
    \ (string-ref s i) #\\a) (vowels_count_iter s (+ i 1) (+ acc 1))]\n      [(char=?\
    \ (string-ref s i) #\\e) (vowels_count_iter s (+ i 1) (+ acc 1))]\n      [(char=?\
    \ (string-ref s i) #\\i) (vowels_count_iter s (+ i 1) (+ acc 1))]\n      [(char=?\
    \ (string-ref s i) #\\o) (vowels_count_iter s (+ i 1) (+ acc 1))]\n      [(char=?\
    \ (string-ref s i) #\\u) (vowels_count_iter s (+ i 1) (+ acc 1))]\n      [(char=?\
    \ (string-ref s i) #\\y) (vowels_count_iter s (+ i 1) (+ acc 1))]\n      [else\
    \ (vowels_count_iter s (+ i 1) acc)]))\n  (vowels_count_iter s 0 0))\n", "  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_y\
    \ c)\n    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (vowels_count_helper\
    \ s)\n    (if (empty? s)\n        0\n        (if (is_vowel_y (first s))\n    \
    \        (+ 1 (vowels_count_helper (rest s)))\n            (vowels_count_helper\
    \ (rest s)))))\n  (vowels_count_helper (string->list s)))\n", "  (define (vowels_count-helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(or (char=? (first s) #\\a)\n\
    \           (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n    \
    \       (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n       (vowels_count-helper\
    \ (rest s) (+ n 1))]\n      [(and (char=? (first s) #\\y)\n            (empty?\
    \ (rest s)))\n       (vowels_count-helper (rest s) (+ n 1))]\n      [else (vowels_count-helper\
    \ (rest s) n)]))\n  (vowels_count-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e\
    \ #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n         1\n      \
    \   (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
