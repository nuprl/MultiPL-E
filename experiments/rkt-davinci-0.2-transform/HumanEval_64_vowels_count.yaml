name: HumanEval_64_vowels_count
language: rkt
prompt: "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n\
  ;; a word as input and returns the number of vowels in the string.\n;; Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only\
  \ when it is at the end of the given word.\n;; Example:\n;; >>> (vowels_count \"\
  abcde\")\n;; 2\n;; >>> (vowels_count \"ACEDY\")\n;; 3\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is_vowel_y c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n\
    \  (cond\n    [(empty? s) 0]\n    [(is_vowel_y (first s))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(is_vowel (first s))\n     (vowels_count (rest s))]\n    [else\n\
    \     (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=?\
    \ (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (if (null? s)\n        0\n        (if (is-vowel?\
    \ (car s))\n            (+ 1 (count-vowels (cdr s)))\n            (count-vowels\
    \ (cdr s)))))\n  (if (null? s)\n      0\n      (if (is-vowel-at-end? (car (reverse\
    \ s)))\n          (+ 1 (count-vowels (reverse (cdr (reverse s)))))\n         \
    \ (count-vowels (reverse (cdr (reverse s)))))))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (vowels_count_helper s i)\n    (cond\
    \ ((= i (string-length s)) 0)\n          ((or (char=? (string-ref s i) #\\a)\n\
    \               (char=? (string-ref s i) #\\e)\n               (char=? (string-ref\
    \ s i) #\\i)\n               (char=? (string-ref s i) #\\o)\n               (char=?\
    \ (string-ref s i) #\\u)\n               (and (char=? (string-ref s i) #\\y)\n\
    \                    (= i (- (string-length s) 1))))\n           (+ 1 (vowels_count_helper\
    \ s (+ i 1))))\n          (else (vowels_count_helper s (+ i 1)))))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond [(empty? s) 0]\n        [(or (char=? (first s) #\\a)\n  \
    \           (char=? (first s) #\\e)\n             (char=? (first s) #\\i)\n  \
    \           (char=? (first s) #\\o)\n             (char=? (first s) #\\u))\n \
    \        (+ 1 (vowels_count (rest s)))]\n        [(and (char=? (first s) #\\y)\n\
    \              (empty? (rest s)))\n         (+ 1 (vowels_count (rest s)))]\n \
    \       [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n         (equal?\
    \ (first s) #\\i)\n         (equal? (first s) #\\o)\n         (equal? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n\
    \         (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n        \
    \ (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n    \
    \     1\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (or (equal? c #\\\
    a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n\
    \        (equal? c #\\u)))\n  (define (is_last_vowel? c)\n    (or (equal? c #\\\
    y)\n        (is_vowel? c)))\n  (define (count-vowels s)\n    (if (null? s)\n \
    \       0\n        (+ (if (is_vowel? (car s)) 1 0)\n           (count-vowels (cdr\
    \ s)))))\n  (define (count-last-vowel s)\n    (if (null? s)\n        0\n     \
    \   (+ (if (is_last_vowel? (car s)) 1 0)\n           (count-last-vowel (cdr s)))))\n\
    \  (+ (count-vowels s)\n     (count-last-vowel (reverse s))))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond [(empty? s) 0]\n        [(member (first s) '(#\\a\
    \ #\\e #\\i #\\o #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(and\
    \ (equal? (first s) #\\y) (empty? (rest s))) 1]\n        [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (add1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (if (empty? (rest s))\n                     \
    \             (add1 (vowels_count (rest s)))\n                               \
    \   (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (count-vowels s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n    \
    \       (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n        \
    \   (char=? (first s) #\\u))\n       (+ 1 (count-vowels (rest s)))]\n      [else\
    \ (count-vowels (rest s))]))\n  (if (char=? (last s) #\\y)\n      (+ 1 (count-vowels\
    \ (butlast s)))\n      (count-vowels s)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
