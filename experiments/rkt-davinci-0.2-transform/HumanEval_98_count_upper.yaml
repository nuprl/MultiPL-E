name: HumanEval_98_count_upper
language: rkt
prompt: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
  \ in even indices.\n;; For example:\n;; >>> (count_upper \"aBCdEf\")\n;; 1\n;; >>>\
  \ (count_upper \"abcdefg\")\n;; 0\n;; >>> (count_upper \"dBBE\")\n;; 0\n(define\
  \ (count_upper s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
  \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\"\
  ) 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"\
  B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\
  \") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
completions: ["  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member\
    \ c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-even-indices s)\n \
    \   (if (null? s)\n        0\n        (if (even? (string-length s))\n        \
    \    (if (is_upper? (string-ref s 0))\n                (+ 1 (count-upper-even-indices\
    \ (substring s 1)))\n                (count-upper-even-indices (substring s 1)))\n\
    \            (count-upper-even-indices (substring s 1)))))\n  (count-upper-even-indices\
    \ s))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s) i]\n\
    \      [(char-upper-case? (first s))\n       (if (even? (add1 i))\n          \
    \ (count_upper-helper (rest s) (add1 i))\n           (count_upper-helper (rest\
    \ s) i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (char-upper-case? (first s))\n                (even? i))\n  \
    \         (loop (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s)\
    \ (+ i 1) count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(=\
    \ i (string-length s)) count]\n      [(and (even? i) (char-upper-case? (string-ref\
    \ s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\\
    A #\\E #\\I #\\O #\\U))))\n  (define (count_upper_helper s i acc)\n    (cond\n\
    \      [(empty? s) acc]\n      [(is_upper? (first s))\n       (if (even? i)\n\
    \           (count_upper_helper (rest s) (+ i 1) (+ acc 1))\n           (count_upper_helper\
    \ (rest s) (+ i 1) acc))]\n      [else (count_upper_helper (rest s) (+ i 1) acc)]))\n\
    \  (count_upper_helper s 0 0))\n", "  (cond [(empty? s) 0]\n        [(and (vowel?\
    \ (first s))\n              (upper? (first s))\n              (even? (remainder\
    \ (string-length s) 2)))\n         (+ 1 (count_upper (rest s)))]\n        [else\
    \ (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n        \
    \    (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (define (count_upper_helper s i)\n    (cond\n\
    \      [(= i (string-length s)) 0]\n      [(and (char-upper-case? (string-ref\
    \ s i))\n            (vowel? (string-ref s i)))\n       (+ 1 (count_upper_helper\
    \ s (+ i 2)))]\n      [else (count_upper_helper s (+ i 2))]))\n  (count_upper_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even?\
    \ (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (char-upper-case? (first s))\n                (even? i))\n  \
    \         (loop (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s)\
    \ (+ i 1) count)])))\n", "  (let ([s (string-upcase s)])\n    (for/sum ([i (in-range\
    \ (string-length s))]\n              #:when (even? i)\n              #:when (member\
    \ (string-ref s i) '#(\"A\" \"E\" \"I\" \"O\" \"U\")))\n      1)))\n", "  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upcase? (first s))\n            (vowel? (first s))\n            (even?\
    \ i))\n       (loop (rest s) (add1 i) (add1 count))]\n      [else (loop (rest\
    \ s) (add1 i) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first\
    \ s)) (even? (index s))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s)\
    \ count]\n          [(and (char-upper-case? (first s))\n                (even?\
    \ i))\n           (loop (rest s) (add1 i) (add1 count))]\n          [else (loop\
    \ (rest s) (add1 i) count)])))\n", "  (define (count-upper-helper s i)\n    (cond\n\
    \      [(empty? s) 0]\n      [(and (even? i) (char-upper-case? (first s)))\n \
    \      (+ 1 (count-upper-helper (rest s) (+ i 1)))]\n      [else (count-upper-helper\
    \ (rest s) (+ i 1))]))\n  (count-upper-helper s 0))\n", "  (define (is_upper?\
    \ c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O\
    \ #\\U))))\n  (define (count-upper-vowels s)\n    (if (null? s)\n        0\n \
    \       (+ (if (is_upper? (car s)) 1 0)\n           (if (even? (car (cdr s)))\n\
    \               (count-upper-vowels (cdr s))\n               0))))\n  (count-upper-vowels\
    \ (string->list s)))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty?\
    \ s) count]\n          [(and (char-upper-case? (first s))\n                (even?\
    \ i))\n           (loop (rest s) (+ i 1) (+ count 1))]\n          [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (define (count_upper-helper s i)\n    (cond\n\
    \      [(= i (string-length s)) 0]\n      [(and (even? i) (char-upper-case? (string-ref\
    \ s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else (count_upper-helper\
    \ s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+\
    \ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (let ([i 0]\n\
    \        [count 0])\n    (for ([c (in-string s)])\n      (when (and (even? i)\n\
    \                 (member c '(\"A\" \"E\" \"I\" \"O\" \"U\")))\n        (set!\
    \ count (+ count 1)))\n      (set! i (+ i 1)))\n    count))\n", "  (cond [(empty?\
    \ s) 0]\n        [(and (char-upper-case? (first s))\n              (vowel? (first\
    \ s)))\n         (+ 1 (count_upper (rest s)))]\n        [else (count_upper (rest\
    \ s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (if (empty? s)\n        0\n        (if (even? (string-length s))\n \
    \           (if (and (is_upper? (string-ref s 0)) (is_vowel? (string-ref s 0)))\n\
    \                (+ 1 (count-upper-vowels-in-even-indices (substring s 1)))\n\
    \                (count-upper-vowels-in-even-indices (substring s 1)))\n     \
    \       (count-upper-vowels-in-even-indices (substring s 1)))))\n  (count-upper-vowels-in-even-indices\
    \ s))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (length s)) (vowel? (first\
    \ s)) (upper? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define (count_upper-helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(and (is_even? n) (is_upper? (first\
    \ s)) (is_vowel? (first s)))\n       (count_upper-helper (rest s) (+ n 1))]\n\
    \      [else (count_upper-helper (rest s) n)]))\n  (count_upper-helper s 0))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (+ 1 (count_upper-helper\
    \ (rest s) (+ i 1)))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n\
    \  (count_upper-helper s 0))\n", "  (if (empty? s)\n      0\n      (if (and (char-upper-case?\
    \ (first s))\n               (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \          (+ 1 (count_upper (rest s)))\n          (count_upper (rest s)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (or (char=? (first s) #\\A)\n              (char=? (first s) #\\E)\n       \
    \       (char=? (first s) #\\I)\n              (char=? (first s) #\\O)\n     \
    \         (char=? (first s) #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n        \
    \    (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n        \
    \    (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (even? (string-length s)) (vowel? (string-ref s 0)))\n     (+ 1 (count_upper\
    \ (substring s 1)))]\n    [else (count_upper (substring s 1))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(even? (string-length s))\n     (cond\n       [(char-upper-case?\
    \ (string-ref s 0)) (+ 1 (count_upper (substring s 1)))]\n       [else (count_upper\
    \ (substring s 1))])]\n    [else (count_upper (substring s 1))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (define (count_upper_helper s i)\n    (cond ((= i (string-length\
    \ s)) 0)\n          ((= (modulo i 2) 0)\n           (cond ((char-upper-case? (string-ref\
    \ s i))\n                  (+ 1 (count_upper_helper s (+ i 1))))\n           \
    \      (else (count_upper_helper s (+ i 1)))))\n          (else (count_upper_helper\
    \ s (+ i 1)))))\n  (count_upper_helper s 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i) (vowel?\
    \ (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (define (count_upper-helper s i acc)\n    (cond\n   \
    \   [(empty? s) acc]\n      [(and (even? i) (vowel? (first s))) (count_upper-helper\
    \ (rest s) (+ i 1) (+ acc 1))]\n      [else (count_upper-helper (rest s) (+ i\
    \ 1) acc)]))\n  (count_upper-helper s 0 0))\n", "  (let loop ([s s] [i 0] [count\
    \ 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case? (first\
    \ s))\n                (even? i))\n           (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (count_upper-helper s i)\n    (cond\n      [(= i (string-length s))\
    \ 0]\n      [(and (even? i) (char-upper-case? (string-ref s i)))\n       (+ 1\
    \ (count_upper-helper s (+ i 1)))]\n      [else (count_upper-helper s (+ i 1))]))\n\
    \  (count_upper-helper s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n        \
    \    (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (define (is_upper? c)\n    (and (char-upper-case?\
    \ c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels\
    \ s)\n    (cond ((null? s) 0)\n          ((is_upper? (car s))\n           (+ 1\
    \ (count-upper-vowels (cdr s))))\n          (else (count-upper-vowels (cdr s)))))\n\
    \  (count-upper-vowels (cddr s)))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\
    \ (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define\
    \ (count-upper-vowels-in-even-indices s)\n    (if (null? s)\n        0\n     \
    \   (if (and (is_upper? (car s)) (is_vowel? (car s)))\n            (+ 1 (count-upper-vowels-in-even-indices\
    \ (cdr s)))\n            (count-upper-vowels-in-even-indices (cdr s)))))\n  (count-upper-vowels-in-even-indices\
    \ (string-&gt;list s)))\n</code>\n", "  (let loop ([i 0] [count 0])\n    (cond\
    \ [(= i (string-length s)) count]\n          [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n           (loop (+ i 1) (+ count 1))]\n          [else\
    \ (loop (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel?\
    \ (first s)) (even? (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (define (count_upper-helper s i)\n    (cond\n\
    \      [(empty? s) i]\n      [(and (char-upper-case? (first s))\n            (even?\
    \ (add1 (length s))))\n       (count_upper-helper (rest s) (add1 i))]\n      [else\
    \ (count_upper-helper (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (even? i) (char-upper-case? (first s)))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n",
  "  (define (count_upper_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n\
    \      [(and (char-upper-case? (string-ref s i))\n            (vowel? (string-ref\
    \ s i)))\n       (+ 1 (count_upper_helper s (+ i 2)))]\n      [else (count_upper_helper\
    \ s (+ i 2))]))\n  (count_upper_helper s 0))\n", "  (define (is_upper? c)\n  \
    \  (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n\
    \  (define (count_upper_even s i)\n    (if (and (not (equal? i (string-length\
    \ s)))\n             (is_upper? (string-ref s i)))\n        (+ 1 (count_upper_even\
    \ s (+ i 2)))\n        (count_upper_even s (+ i 2))))\n  (count_upper_even s 0))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (even? i) (char-upper-case? (first s)))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (remainder (length\
    \ s) 2))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (char-upper-case? (first s))\n            (even? i))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\\
    A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-even-index s)\n    (cond\n \
    \     [(empty? s) 0]\n      [(even? (length s))\n       (+ (if (is_upper? (first\
    \ s)) 1 0)\n          (count-upper-even-index (rest s)))]\n      [else (count-upper-even-index\
    \ (rest s))]))\n  (count-upper-even-index s))\n", "  (define (is_upper? c)\n \
    \   (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)))\n  (define (count-upper-vowels-in-even-indices s)\n    (cond\n   \
    \   [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel? (first s)))\n\
    \       (+ 1 (count-upper-vowels-in-even-indices (rest s)))]\n      [else (count-upper-vowels-in-even-indices\
    \ (rest s))]))\n  (count-upper-vowels-in-even-indices (rest s)))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (length s)) (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (let loop ([s s] [count 0])\n    (cond\
    \ [(empty? s) count]\n          [(and (char-upper-case? (first s))\n         \
    \       (even? (string-length s)))\n           (loop (rest s) (+ count 1))]\n\
    \          [else (loop (rest s) count)])))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (string-ref\
    \ s 0)) (even? (string-length s))) (+ 1 (count_upper (substring s 1)))]\n    [else\
    \ (count_upper (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(= (remainder\
    \ (string-length s) 2) 0)\n     (cond\n       [(char-upper-case? (string-ref s\
    \ 0)) (+ 1 (count_upper (substring s 1)))]\n       [else (count_upper (substring\
    \ s 1))])]\n    [else (count_upper (substring s 1))]))\n", "  (let loop ([s s]\
    \ [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and (even? i) (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n           (loop (rest s) (+ i 1) (+\
    \ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n", "  (let loop\
    \ ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and\
    \ (even? i) (vowel? (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n \
    \     [else (loop (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (even? i) (member (first s)\
    \ '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n\
    \      [else (loop (rest s) (+ i 1) count)])))\n```\n\n## Problem 2\n\n```racket\n\
    #lang racket\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (char-upper-case?\
    \ (first s)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel?\
    \ (first s)) (even? (index s))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (define (count_upper-helper s i)\n  \
    \  (cond\n      [(empty? s) 0]\n      [(and (char-upper-case? (first s))\n   \
    \         (even? i))\n       (+ 1 (count_upper-helper (rest s) (+ i 1)))]\n  \
    \    [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n",
  "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels lst)\n   \
    \ (cond\n      [(empty? lst) 0]\n      [(and (is_upper? (first lst)) (is_vowel?\
    \ (first lst)))\n       (+ 1 (count-upper-vowels (rest lst)))]\n      [else (count-upper-vowels\
    \ (rest lst))]))\n  (count-upper-vowels (string->list s)))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (or (equal? (first\
    \ s) #\\A)\n              (equal? (first s) #\\E)\n              (equal? (first\
    \ s) #\\I)\n              (equal? (first s) #\\O)\n              (equal? (first\
    \ s) #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s)\
    \ i]\n      [(and (char-upper-case? (first s))\n            (even? (add1 (remainder\
    \ i 2))))\n       (count_upper-helper (rest s) (add1 i))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else\
    \ (count_upper-helper s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (let loop\
    \ ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even?\
    \ i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest s) (+\
    \ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(and (even? (string-length s))\n          (char-upper-case?\
    \ (string-ref s 0)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper\
    \ (substring s 1))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n  \
    \    [(empty? s) count]\n      [(and (char-upper-case? (first s))\n          \
    \  (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (string-length\
    \ s))\n     (cond\n       [(char-upper-case? (string-ref s 0)) (+ 1 (count_upper\
    \ (substring s 1)))]\n       [else (count_upper (substring s 1))])]\n    [else\
    \ (count_upper (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s))\
    \ (even? (length s))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(and (char-upper-case? (first s))\n            (even? i))\n \
    \      (loop (rest s) (add1 i) (add1 count))]\n      [else (loop (rest s) (add1\
    \ i) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n   \
    \  (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-upper-case?\
    \ c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_upper? (first s)) (+ 1 (count-upper-even-indices\
    \ (rest s)))]\n      [else (count-upper-even-indices (rest s))]))\n  (count-upper-even-indices\
    \ (rest s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (or (char=? (first\
    \ s) #\\A)\n              (char=? (first s) #\\E)\n              (char=? (first\
    \ s) #\\I)\n              (char=? (first s) #\\O)\n              (char=? (first\
    \ s) #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count_upper-helper\
    \ s i acc)\n    (cond\n      [(empty? s) acc]\n      [(and (even? i) (char-upper-case?\
    \ (first s)))\n       (count_upper-helper (rest s) (+ i 1) (+ acc 1))]\n     \
    \ [else (count_upper-helper (rest s) (+ i 1) acc)]))\n  (count_upper-helper s\
    \ 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (string-length s))\n   \
    \  (if (or (char=? (string-ref s 0) #\\A)\n             (char=? (string-ref s\
    \ 0) #\\E)\n             (char=? (string-ref s 0) #\\I)\n             (char=?\
    \ (string-ref s 0) #\\O)\n             (char=? (string-ref s 0) #\\U))\n     \
    \    (+ 1 (count_upper (substring s 1)))\n         (count_upper (substring s 1)))]\n\
    \    [else (count_upper (substring s 1))]))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (char-vowel? (string-ref\
    \ s i))\n            (char-upper-case? (string-ref s i)))\n       (loop (+ i 2)\
    \ (+ count 1))]\n      [else (loop (+ i 2) count)])))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? (add1 (remainder i 2))))\n       (count_upper-helper\
    \ (rest s) (add1 i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n \
    \          (loop (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s)\
    \ (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n   \
    \   [(empty? s) count]\n      [(and (even? i) (vowel? (first s))) (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (even? (string-length s)) (vowel? (string-ref\
    \ s 0)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (even? i) (char-upper-case? (first s)))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s))\
    \ (even? (index s))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty? s)\
    \ i]\n      [(and (char-upper-case? (first s))\n            (even? (add1 (length\
    \ s))))\n       (count_upper_helper (rest s) (add1 i))]\n      [else (count_upper_helper\
    \ (rest s) i)]))\n  (count_upper_helper s 0))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else\
    \ (count_upper-helper s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (let loop\
    \ ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (char-vowel? (first s)))\n           (loop (rest\
    \ s) (+ count 1))]\n          [else (loop (rest s) count)])))\n", "  (let loop\
    \ ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and (even?\
    \ i) (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (define (is_upper? c)\n  \
    \  (char-upper-case? c))\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper?\
    \ (first s)) (is_vowel? (first s)))\n       (+ 1 (count-upper-vowels (rest s)))]\n\
    \      [else (count-upper-vowels (rest s))]))\n  (define (even-indices s)\n  \
    \  (cond\n      [(empty? s) empty]\n      [(is_even? (length s)) (cons (first\
    \ s) (even-indices (rest s)))]\n      [else (even-indices (rest s))]))\n  (count-upper-vowels\
    \ (even-indices s)))\n", "  (cond\n    [(empty? s) 0]\n    [(= (modulo (string-length\
    \ s) 2) 0)\n     (cond\n       [(char-upper-case? (string-ref s 0)) (+ 1 (count_upper\
    \ (substring s 1)))]\n       [else (count_upper (substring s 1))])]\n    [else\
    \ (count_upper (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (member (first s) '#\\A #\\E #\\I #\\\
    O #\\U))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (even? (string-length s)) (vowel? (string-ref\
    \ s 0)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(even? (length s))\n     (cond\n\
    \       [(string-upper-case? (first s)) (+ 1 (count_upper (rest s)))]\n      \
    \ [else (count_upper (rest s))])]\n    [else (count_upper (rest s))]))\n", " \
    \ (cond [(empty? s) 0]\n        [(and (vowel? (string-ref s 0))\n            \
    \  (upper? (string-ref s 0)))\n         (+ 1 (count_upper (substring s 2)))]\n\
    \        [else (count_upper (substring s 2))]))\n", "  (let loop ([s s] [i 0]\
    \ [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (odd? i) (vowel?\
    \ (first s)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond\n\
    \      [(= i (string-length s)) count]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (char-vowel? (first s)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (count-if (lambda (c) (and (vowel? c) (upper? c))) (even-indices s)))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s))) (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (count_upper_iter s i)\n    (cond\n      [(empty? s) 0]\n      [(or (char=?\
    \ (string-ref s i) #\\A)\n           (char=? (string-ref s i) #\\E)\n        \
    \   (char=? (string-ref s i) #\\I)\n           (char=? (string-ref s i) #\\O)\n\
    \           (char=? (string-ref s i) #\\U))\n       (+ 1 (count_upper_iter (substring\
    \ s 1) (+ i 1)))]\n      [else (count_upper_iter (substring s 1) (+ i 1))]))\n\
    \  (count_upper_iter s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond [(empty? s) 0]\n        [(and\
    \ (char-upper-case? (first s))\n              (vowel? (first s)))\n         (+\
    \ 1 (count_upper (rest s)))]\n        [else (count_upper (rest s))]))\n", "  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels s)\n    (cond\n   \
    \   [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel? (first s)))\n\
    \       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (rest (evens s))))\n", "  (define (count_upper_helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(and (= (modulo i\
    \ 2) 0) (char-upper-case? (string-ref s i)))\n       (+ 1 (count_upper_helper\
    \ s (+ i 1)))]\n      [else (count_upper_helper s (+ i 1))]))\n  (count_upper_helper\
    \ s 0))\n", "  (define (is_upper? c)\n    (and (char-upper-case? c)\n        \
    \ (member c '#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_upper_helper s i)\n\
    \    (if (or (null? s)\n            (odd? i))\n        0\n        (+ (if (is_upper?\
    \ (car s)) 1 0)\n           (count_upper_helper (cdr s) (+ i 1)))))\n  (count_upper_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (member (first s) '#\\A #\\E #\\I #\\O #\\U))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+\
    \ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (or (char=? (first\
    \ s) #\\A)\n              (char=? (first s) #\\E)\n              (char=? (first\
    \ s) #\\I)\n              (char=? (first s) #\\O)\n              (char=? (first\
    \ s) #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(empty?\
    \ s) i]\n      [(and (char-upper-case? (first s))\n            (even? (add1 (length\
    \ s))))\n       (count_upper-helper (rest s) (add1 i))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n   \
    \   [(and (even? i) (char-upper-case? (string-ref s i)))\n       (+ 1 (count_upper-helper\
    \ s (+ i 1)))]\n      [else (count_upper-helper s (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (count_upper_vowels s)\n    (cond\n      [(empty? s) 0]\n      [(and\
    \ (is_upper? (first s)) (is_vowel? (first s)))\n       (+ 1 (count_upper_vowels\
    \ (rest s)))]\n      [else (count_upper_vowels (rest s))]))\n  (define (even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count_upper_vowels_even_indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(even? (length s))\n       (+ (count_upper_vowels\
    \ (first s))\n          (count_upper_vowels_even_indices (rest s)))]\n      [else\
    \ (count_upper_vowels_even_indices (rest s))]))\n  (count_upper_vowels_even_indices\
    \ (string->list s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (length\
    \ s)) (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s)\
    \ count]\n          [(and (char-upper-case? (first s))\n                (even?\
    \ i))\n           (loop (rest s) (+ i 1) (+ count 1))]\n          [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (define (count_upper_helper s i)\n    (cond\n\
    \      [(empty? s) 0]\n      [(and (char-upper-case? (first s)) (even? i)) (+\
    \ 1 (count_upper_helper (rest s) (+ i 1)))]\n      [else (count_upper_helper (rest\
    \ s) (+ i 1))]))\n  (count_upper_helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-upper-case? c)\n \
    \        (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-even-indices\
    \ s)\n    (cond ((null? s) 0)\n          ((is_upper? (car s))\n           (+ 1\
    \ (count-upper-even-indices (cddr s))))\n          (else (count-upper-even-indices\
    \ (cdr s)))))\n  (count-upper-even-indices s))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (vowel? (first s)) (even? (index s)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count\
    \ 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n \
    \     [else (loop (rest s) (+ i 1) count)])))\n", "  (define (count_upper-helper\
    \ s i)\n    (if (or (= i (string-length s))\n            (odd? i))\n        0\n\
    \        (if (member (string-ref s i) \"AEIOU\")\n            (+ 1 (count_upper-helper\
    \ s (+ i 1)))\n            (count_upper-helper s (+ i 1)))))\n  (count_upper-helper\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1)\
    \ (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (string-length s)) (vowel? (string-ref s\
    \ 0)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (even? i) (char-upper-case? (first s)))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (even? (string-length s)) (vowel? (string-ref s 0))) (+ 1 (count_upper (substring\
    \ s 1)))]\n    [else (count_upper (substring s 1))]))\n", "  (let loop ([s s]\
    \ [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n\
    \      [else (loop (rest s) (+ i 1) count)])))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else\
    \ (count_upper-helper s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (let loop\
    \ ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even?\
    \ i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n\
    \      [else (loop (rest s) (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count\
    \ 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (member (first\
    \ s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n\
    \      [else (loop (rest s) (+ i 1) count)])))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? (add1 (length s))))\n       (count_upper-helper (rest\
    \ s) (add1 i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(= (remainder (string-length s)\
    \ 2) 0)\n     (cond\n       [(char-upper-case? (string-ref s 0)) (+ 1 (count_upper\
    \ (substring s 1)))]\n       [else (count_upper (substring s 1))])]\n    [else\
    \ (count_upper (substring s 1))]))\n", "  (define (count_upper-helper s i)\n \
    \   (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first s))\n  \
    \          (even? (add1 (remainder i 2))))\n       (count_upper-helper (rest s)\
    \ (add1 i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (char-upper-case? (first s))\n                (even? i))\n  \
    \         (loop (rest s) (add1 i) (add1 count))]\n          [else (loop (rest\
    \ s) (add1 i) count)])))\n", "  (define (is_upper? c)\n    (and (char-alphabetic?\
    \ c) (char-upper-case? c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\
    \ (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define\
    \ (count-upper-vowels-even-indices s)\n    (if (null? s)\n        0\n        (if\
    \ (and (is_upper? (car s)) (is_vowel? (car s)))\n            (+ 1 (count-upper-vowels-even-indices\
    \ (cddr s)))\n            (count-upper-vowels-even-indices (cddr s)))))\n  (count-upper-vowels-even-indices\
    \ s))\n", "  (let loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n\
    \          [(and (even? i) (vowel? (string-ref s i)))\n           (loop (+ i 1)\
    \ (+ count 1))]\n          [else (loop (+ i 1) count)])))\n", "  (define (count_upper_helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (char-upper-case? (first\
    \ s)) (even? i)) (+ 1 (count_upper_helper (rest s) (+ i 1)))]\n      [else (count_upper_helper\
    \ (rest s) (+ i 1))]))\n  (count_upper_helper s 0))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n           (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (add1 i) (add1 count))]\n          [else (loop (rest s) (add1 i) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (string-upper-case? (string-ref s i))\n                (member (string-ref s\
    \ i) \"AEIOU\"))\n           (loop (substring s 1) (+ i 1) (+ count 1))]\n   \
    \       [else (loop (substring s 1) (+ i 1) count)])))\n", "  (define (is_upper?\
    \ c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n  \
    \  (= (remainder n 2) 0))\n  (define (count_upper_helper s n)\n    (cond\n   \
    \   [(empty? s) n]\n      [(and (is_even? n) (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n       (count_upper_helper (rest s) (+ n 1))]\n      [else (count_upper_helper\
    \ (rest s) n)]))\n  (count_upper_helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (char-upper-case? (first s))\n            (even? i))\n\
    \       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i\
    \ 1) count)])))\n", "  (let loop ([s s] [i 0] [acc 0])\n    (cond\n      [(empty?\
    \ s) acc]\n      [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \       (loop (rest s) (+ i 1) (+ acc 1))]\n      [else (loop (rest s) (+ i 1)\
    \ acc)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (char-upper-case? (first s))\n                (even? i))\n  \
    \         (loop (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s)\
    \ (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n   \
    \   [(empty? s) count]\n      [(and (char-upper-case? (first s))\n           \
    \ (even? i))\n       (loop (rest s) (add1 i) (add1 count))]\n      [else (loop\
    \ (rest s) (add1 i) count)])))\n", "  (letrec ([even? (lambda (n) (eq? (remainder\
    \ n 2) 0))]\n           [is-upper-vowel? (lambda (c) (and (char-upper-case? c)\
    \ (member c '(#\\A #\\E #\\I #\\O #\\U))))])\n    (count is-upper-vowel? (filter\
    \ even? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel?\
    \ (first s)) (even? (index s)))\n     (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\
    \ [(empty? s) count]\n          [(and (char-upper-case? (first s))\n         \
    \       (even? i))\n           (loop (rest s) (+ i 1) (+ count 1))]\n        \
    \  [else (loop (rest s) (+ i 1) count)])))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (even? i) (char-upper-case?\
    \ (first s)))\n       (+ 1 (count_upper-helper (rest s) (+ i 1)))]\n      [else\
    \ (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n", " \
    \ (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (char-upper-case? (first s)))\n           (loop (rest s) (+ i 1) (+\
    \ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n", "  (let loop\
    \ ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (even? i))\n           (loop (rest s) (+ i 1) (+\
    \ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+\
    \ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (let ([s (string-upcase\
    \ s)])\n    (for/sum ([i (in-range (string-length s))]\n              #:when (even?\
    \ i)\n              #:when (member (string-ref s i) \"AEIOU\"))\n      1)))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (or (equal? (first s) #\\A)\n              (equal? (first s) #\\E)\n       \
    \       (equal? (first s) #\\I)\n              (equal? (first s) #\\O)\n     \
    \         (equal? (first s) #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (let ((count 0))\n    (for ([i (in-range (string-length\
    \ s))])\n      (when (and (even? i)\n                 (member (string-ref s i)\
    \ '#(#\\A #\\E #\\I #\\O #\\U)))\n        (set! count (+ count 1))))\n    count))\n",
  "  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\\
    A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond\n     \
    \ [(empty? s) 0]\n      [(is_upper? (first s))\n       (+ 1 (count-upper-vowels\
    \ (rest s)))]\n      [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels\
    \ (even-indexes s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n   \
    \  (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_upper? (first s)) (+ 1 (count-upper-vowels (rest s)))]\n \
    \     [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels (even-index-chars\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0)) (even?\
    \ (string-length s)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper\
    \ (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (member (first s) '#(#\\A #\\E #\\I\
    \ #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s)\
    \ count]\n      [(and (char-upper-case? (first s))\n            (even? i))\n \
    \      (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1)\
    \ count)])))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \       (+ 1 (count_upper_helper (rest s) (+ i 1)))]\n      [else (count_upper_helper\
    \ (rest s) (+ i 1))]))\n  (count_upper_helper s 0))\n", "  (define (count_upper-iter\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? (add1 (remainder i 2))))\n       (count_upper-iter (rest\
    \ s) (add1 i))]\n      [else (count_upper-iter (rest s) i)]))\n  (count_upper-iter\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (length s)) (member\
    \ (first s) '(\"A\" \"E\" \"I\" \"O\" \"U\")))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-upper-vowels-in-even-indices s)\n    (cond\n      [(empty? s) 0]\n  \
    \    [(and (is_upper? (first s)) (is_vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices (rest s)))\n", "  (define (is_upper c)\n\
    \    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n\
    \  (define (count_upper_helper s i acc)\n    (cond\n      [(empty? s) acc]\n \
    \     [(is_upper (first s))\n       (count_upper_helper (rest s) (+ i 1) (+ acc\
    \ 1))]\n      [else (count_upper_helper (rest s) (+ i 1) acc)]))\n  (count_upper_helper\
    \ s 0 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
