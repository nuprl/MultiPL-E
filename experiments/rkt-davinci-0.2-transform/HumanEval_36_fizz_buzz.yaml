name: HumanEval_36_fizz_buzz
language: rkt
prompt: "#lang racket\n\n;; Return the number of times the digit 7 appears in integers\
  \ less than n which are divisible by 11 or 13.\n;; >>> (fizz_buzz 50)\n;; 0\n;;\
  \ >>> (fizz_buzz 78)\n;; 2\n;; >>> (fizz_buzz 79)\n;; 3\n(define (fizz_buzz n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n\
  \    (check-equal? (candidate 50) 0)\n    (check-equal? (candidate 78) 2)\n    (check-equal?\
  \ (candidate 79) 3)\n    (check-equal? (candidate 100) 3)\n    (check-equal? (candidate\
  \ 200) 6)\n    (check-equal? (candidate 4000) 192)\n    (check-equal? (candidate\
  \ 10000) 639)\n    (check-equal? (candidate 100000) 8026)\n))\n\n(test-humaneval)"
completions: ["  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0)) (= (modulo n 10) 7))\
    \ (fizz_buzz_helper (- n 1) (+ acc 1))]\n      [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond ((= n 0) count)\n          ((and (or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n                (string-contains? (number->string n) \"7\"))\n  \
    \         (fizz_buzz_helper (- n 1) (+ count 1)))\n          (else (fizz_buzz_helper\
    \ (- n 1) count))))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n count)\n    (cond ((= n 0) count)\n          ((and (or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n                (member (modulo n 10)\
    \ '(7 0)))\n           (fizz_buzz_helper (- n 1) (+ count 1)))\n          (else\
    \ (fizz_buzz_helper (- n 1) count))))\n  (fizz_buzz_helper n 0))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(or (divisible? n 11) (divisible? n 13)) (+ (contains-7?\
    \ n) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_iter\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0)\
    \ (= (modulo n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_iter (- n 1) (+ acc 1))]\n\
    \      [else (fizz_buzz_iter (- n 1) acc)]))\n  (fizz_buzz_iter n 0))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(=\
    \ (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0)\
    \ count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\
    \ [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-digits n 7)))]\n          [else (fizz_buzz_helper (- n\
    \ 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (count-7s (quotient\
    \ n 10)) (count-7s (modulo n 10)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(=\
    \ (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (cond\n    [(< n 0) (error \"n must be positive\")]\n    [(= n 0) 0]\n    [else\n\
    \     (cond\n       [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n        (+\
    \ (count-7s (quotient n 10)) (count-7s (modulo n 10)))]\n       [else (fizz_buzz\
    \ (- n 1))])]))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(=\
    \ n 0) count]\n      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n     \
    \  (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0)\
    \ (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(or (divisible-by? n 11) (divisible-by? n 13))\n     (+\
    \ (contains-seven? n) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (for/sum ([i (in-range 1 n)])\n    (if (or (zero? (modulo i\
    \ 11)) (zero? (modulo i 13)))\n        (count-matches #\\7 (number->string i))\n\
    \        0)))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
