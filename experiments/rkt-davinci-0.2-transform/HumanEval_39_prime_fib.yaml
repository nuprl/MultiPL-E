name: HumanEval_39_prime_fib
language: rkt
prompt: "#lang racket\n\n;; prime_fib returns n-th number that is a Fibonacci number\
  \ and it's also prime.\n;; >>> (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n\
  ;; >>> (prime_fib 3)\n;; 5\n;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n\
  ;; 89\n(define (prime_fib n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n\
  \    (check-equal? (candidate 1) 2)\n    (check-equal? (candidate 2) 3)\n    (check-equal?\
  \ (candidate 3) 5)\n    (check-equal? (candidate 4) 13)\n    (check-equal? (candidate\
  \ 5) 89)\n    (check-equal? (candidate 6) 233)\n    (check-equal? (candidate 7)\
  \ 1597)\n    (check-equal? (candidate 8) 28657)\n    (check-equal? (candidate 9)\
  \ 514229)\n    (check-equal? (candidate 10) 433494437)\n))\n\n(test-humaneval)"
completions: ["  (define (fib-iter a b count)\n    (if (= count n)\n        b\n  \
    \      (if (prime? (+ a b))\n            (fib-iter b (+ a b) (+ count 1))\n  \
    \          (fib-iter b (+ a b) count))))\n  (fib-iter 1 1 1))\n", "  (define (fib\
    \ n)\n    (if (< n 2)\n        n\n        (+ (fib (- n 1)) (fib (- n 2)))))\n\
    \  (define (prime? n)\n    (define (prime? n i)\n      (if (= i 1)\n         \
    \ #t\n          (if (= (remainder n i) 0)\n              #f\n              (prime?\
    \ n (- i 1)))))\n    (prime? n (floor (sqrt n))))\n  (define (prime_fib n i)\n\
    \    (if (= n 1)\n        (fib i)\n        (if (prime? (fib i))\n            (prime_fib\
    \ (- n 1) (+ i 1))\n            (prime_fib n (+ i 1)))))\n  (prime_fib n 1))\n",
  "  (define (fib n)\n    (if (< n 2)\n        n\n        (+ (fib (- n 1)) (fib (-\
    \ n 2)))))\n  (define (prime? n)\n    (define (prime? n i)\n      (if (= i 1)\n\
    \          #t\n          (if (= (remainder n i) 0)\n              #f\n       \
    \       (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n  (define (prime_fib n\
    \ i)\n    (if (= n 0)\n        i\n        (if (prime? i)\n            (prime_fib\
    \ (- n 1) (+ i 1))\n            (prime_fib n (+ i 1)))))\n  (prime_fib n (fib\
    \ n)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((> i (sqrt\
    \ n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (fib n)\n    (define (iter i a b)\n      (cond ((= i\
    \ n) b)\n            (else (iter (+ i 1) b (+ a b)))))\n    (iter 1 0 1))\n  (define\
    \ (iter i)\n    (cond ((= i n) (fib i))\n          ((and (prime? (fib i)) (prime?\
    \ (fib (+ i 1)))) (fib (+ i 1)))\n          (else (iter (+ i 1)))))\n  (iter 1))\n",
  "  (define (fib n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else\
    \ (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond\
    \ ((= i n) (fib i))\n          ((prime? (fib i)) (iter (+ i 1)))\n          (else\
    \ (iter (+ i 1)))))\n  (iter 1))\n", "  (define (fib n)\n    (cond ((= n 1) 1)\n\
    \          ((= n 2) 1)\n          (else (+ (fib (- n 1)) (fib (- n 2))))))\n \
    \ (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n       \
    \   ((even? n) #f)\n          (else (prime?-iter 3 n))))\n  (define (prime?-iter\
    \ i n)\n    (cond ((> (* i i) n) #t)\n          ((= (remainder n i) 0) #f)\n \
    \         (else (prime?-iter (+ i 2) n))))\n  (define (prime_fib-iter i n)\n \
    \   (cond ((= i n) (fib i))\n          ((prime? (fib i)) (prime_fib-iter (+ i\
    \ 1) n))\n          (else (prime_fib-iter (+ i 1) n))))\n  (prime_fib-iter 1 n))\n",
  "  (define (fib n)\n    (if (< n 2)\n        n\n        (+ (fib (- n 1)) (fib (-\
    \ n 2)))))\n  (define (is_prime n)\n    (define (is_prime-iter n i)\n      (if\
    \ (= i 1)\n          #t\n          (if (= (modulo n i) 0)\n              #f\n\
    \              (is_prime-iter n (- i 1)))))\n    (is_prime-iter n (floor (/ n\
    \ 2))))\n  (define (prime_fib-iter n i)\n    (if (= i n)\n        (fib i)\n  \
    \      (if (and (is_prime (fib i))\n                 (is_prime (fib (+ i 1))))\n\
    \            (prime_fib-iter n (+ i 1))\n            (prime_fib-iter n (+ i 1)))))\n\
    \  (prime_fib-iter n 1))\n", "  (define (prime_fib_iter n fib1 fib2 count)\n \
    \   (cond ((= n count) fib2)\n          ((and (prime? fib2) (= n (+ count 1)))\
    \ fib2)\n          (else (prime_fib_iter n fib2 (+ fib1 fib2) (+ count 1)))))\n\
    \  (prime_fib_iter n 0 1 0))\n", "  (define (prime_fib_iter i f1 f2 count)\n \
    \   (if (= count n)\n        f2\n        (if (and (prime? f2) (= (modulo f2 2)\
    \ 1))\n            (prime_fib_iter (+ i 1) f2 (+ f1 f2) (+ count 1))\n       \
    \     (prime_fib_iter (+ i 1) f2 (+ f1 f2) count))))\n  (prime_fib_iter 1 1 1\
    \ 0))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (let loop ([n\
    \ (- n 2)] [a 1] [b 2] [c 3])\n             (if (= n 0)\n                 c\n\
    \                 (loop (- n 1) b c (+ b c))))]))\n", "  (define (fib n)\n   \
    \ (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else (+ (fib (- n 1)) (fib\
    \ (- n 2))))))\n  (define (prime? n)\n    (define (prime? n d)\n      (cond ((=\
    \ d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else (prime? n (-\
    \ d 1)))))\n    (prime? n (- n 1)))\n  (define (prime_fib n i)\n    (cond ((=\
    \ n 1) i)\n          ((prime? i) (prime_fib (- n 1) (+ i 1)))\n          (else\
    \ (prime_fib n (+ i 1)))))\n  (prime_fib n 1))\n", "  (define (fib n)\n    (cond\
    \ ((= n 1) 1)\n          ((= n 2) 1)\n          (else (+ (fib (- n 1)) (fib (-\
    \ n 2))))))\n  (define (prime? n)\n    (define (prime? n i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (prime? n (-\
    \ i 1)))))\n    (prime? n (floor (sqrt n))))\n  (define (prime_fib n i)\n    (cond\
    \ ((= n 1) 2)\n          ((= n 2) 3)\n          ((and (prime? i) (= (fib n) i))\
    \ i)\n          (else (prime_fib n (+ i 1)))))\n  (prime_fib n 2))\n", "  (define\
    \ (fib n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else (+ (fib\
    \ (- n 1)) (fib (- n 2))))))\n  (define (prime? n)\n    (define (prime? n i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (prime? n (- i 1)))))\n    (prime? n (floor (sqrt n))))\n  (define (prime_fib\
    \ n i)\n    (cond ((= n 1) i)\n          ((prime? i) (prime_fib (- n 1) (+ i 1)))\n\
    \          (else (prime_fib n (+ i 1)))))\n  (prime_fib n (fib n)))\n", "  (define\
    \ (fib n)\n    (if (< n 2)\n        n\n        (+ (fib (- n 1)) (fib (- n 2)))))\n\
    \  (define (is_prime n)\n    (define (is_prime? n i)\n      (if (= i 1)\n    \
    \      #t\n          (if (= (modulo n i) 0)\n              #f\n              (is_prime?\
    \ n (- i 1)))))\n    (is_prime? n (- n 1)))\n  (define (prime_fib? n i)\n    (if\
    \ (= i n)\n        (fib i)\n        (if (and (is_prime (fib i)) (= (modulo i 2)\
    \ 1))\n            (prime_fib? n (+ i 1))\n            (prime_fib? n (+ i 1)))))\n\
    \  (prime_fib? n 1))\n", "  (define (fib n)\n    (cond ((= n 1) 1)\n         \
    \ ((= n 2) 1)\n          (else (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (prime?\
    \ n)\n    (define (prime? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n\
    \  (define (prime_fib n i)\n    (cond ((= n 1) i)\n          ((prime? i) (prime_fib\
    \ (- n 1) (+ i 1)))\n          (else (prime_fib n (+ i 1)))))\n  (prime_fib n\
    \ (fib n)))\n", "  (define (prime? n)\n    (define (prime?-iter n d)\n      (cond\
    \ ((= d 1) #t)\n            ((= (remainder n d) 0) #f)\n            (else (prime?-iter\
    \ n (- d 1)))))\n    (prime?-iter n (- n 1)))\n  (define (fib-iter n a b)\n  \
    \  (cond ((= n 1) a)\n          ((= n 2) b)\n          (else (fib-iter (- n 1)\
    \ b (+ a b)))))\n  (define (fib-prime-iter n a b i)\n    (cond ((= i n) a)\n \
    \         ((and (prime? b) (= i (- n 1))) (fib-prime-iter n b (+ a b) (+ i 1)))\n\
    \          (else (fib-prime-iter n b (+ a b) (+ i 1)))))\n  (fib-prime-iter n\
    \ (fib-iter n 1 1) (fib-iter n 2 1) 1))\n", "  (let loop ((i 1) (fib1 1) (fib2\
    \ 1) (count 0))\n    (if (= i n)\n        fib2\n        (if (and (prime? fib2)\
    \ (= count 1))\n            (loop (+ i 1) fib2 (+ fib1 fib2) 0)\n            (loop\
    \ i fib2 (+ fib1 fib2) (+ count 1))))))\n", "  (define (fib n)\n    (cond\n  \
    \    [(= n 1) 1]\n      [(= n 2) 1]\n      [else (+ (fib (- n 1)) (fib (- n 2)))]))\n\
    \  (define (is_prime n)\n    (define (divides? a b)\n      (= (remainder b a)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond\n        [(> (square\
    \ test-divisor) n) n]\n        [(divides? test-divisor n) test-divisor]\n    \
    \    [else (find-divisor n (+ test-divisor 1))]))\n    (= n (find-divisor n 2)))\n\
    \  (define (prime_fib_iter n i)\n    (cond\n      [(= n 1) 2]\n      [(= n 2)\
    \ 3]\n      [(and (is_prime (fib i)) (= n (- i 1))) (fib i)]\n      [else (prime_fib_iter\
    \ n (+ i 1))]))\n  (prime_fib_iter n 3))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (fib n)\n    (define\
    \ (iter i a b)\n      (cond ((= i n) b)\n            (else (iter (+ i 1) b (+\
    \ a b)))))\n    (iter 1 0 1))\n  (define (iter i)\n    (cond ((= i n) (fib i))\n\
    \          ((and (prime? (fib i)) (prime? (fib (+ i 1)))) (fib (+ i 1)))\n   \
    \       (else (iter (+ i 1)))))\n  (iter 1))\n", "  (define (fib n)\n    (cond\
    \ ((= n 1) 1)\n          ((= n 2) 1)\n          (else (+ (fib (- n 1)) (fib (-\
    \ n 2))))))\n  (define (prime? n)\n    (define (prime? n i)\n      (cond ((= i\
    \ n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (prime? n (+\
    \ i 1)))))\n    (prime? n 2))\n  (define (prime_fib n i)\n    (cond ((= n 1) 2)\n\
    \          ((prime? i) (if (= n 2) i (prime_fib (- n 1) (+ i 1))))\n         \
    \ (else (prime_fib n (+ i 1)))))\n  (prime_fib n (fib n)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
