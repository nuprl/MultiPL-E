name: HumanEval_25_factorize
language: rkt
prompt: "#lang racket\n\n;; Return list of prime factors of given integer in the order\
  \ from smallest to largest.\n;; Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n;; Input number\
  \ should be equal to the product of all factors\n;; >>> (factorize 8)\n;; (list\
  \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
  \ 2 5 7)\n(define (factorize n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n\
  \    (check-equal? (candidate 2) (list 2))\n    (check-equal? (candidate 4) (list\
  \ 2 2))\n    (check-equal? (candidate 8) (list 2 2 2))\n    (check-equal? (candidate\
  \ 57) (list 3 19))\n    (check-equal? (candidate 3249) (list 3 3 19 19))\n    (check-equal?\
  \ (candidate 185193) (list 3 3 3 19 19 19))\n    (check-equal? (candidate 20577)\
  \ (list 3 19 19 19))\n    (check-equal? (candidate 18) (list 2 3 3))\n))\n\n(test-humaneval)"
completions: ["  (define (prime? n)\n    (define (prime-helper n divisor)\n      (cond\
    \ ((= n 1) #f)\n            ((= n divisor) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (prime-helper n (+ divisor 1)))))\n    (prime-helper\
    \ n 2))\n  (define (factorize-helper n divisor factors)\n    (cond ((= n 1) factors)\n\
    \            ((= (modulo n divisor) 0) (factorize-helper (/ n divisor) divisor\
    \ (cons divisor factors)))\n            (else (factorize-helper n (+ divisor 1)\
    \ factors))))\n  (factorize-helper n 2 '()))\n", "  (define (factorize-iter n\
    \ div)\n    (if (= n 1)\n        '()\n        (if (= (remainder n div) 0)\n  \
    \          (cons div (factorize-iter (/ n div) div))\n            (factorize-iter\
    \ n (+ div 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n\
    \    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor\
    \ factors)\n    (cond\n      [(= n 1) factors]\n      [(= (remainder n divisor)\
    \ 0) (factorize-iter (/ n divisor) divisor (cons divisor factors))]\n      [else\
    \ (factorize-iter n (+ divisor 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo\
    \ n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n\
    \ (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n \
    \   (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n acc)\n\
    \    (cond\n      [(= n 1) acc]\n      [(= (remainder n 2) 0) (factorize-iter\
    \ (/ n 2) (cons 2 acc))]\n      [(= (remainder n 3) 0) (factorize-iter (/ n 3)\
    \ (cons 3 acc))]\n      [(= (remainder n 5) 0) (factorize-iter (/ n 5) (cons 5\
    \ acc))]\n      [(= (remainder n 7) 0) (factorize-iter (/ n 7) (cons 7 acc))]\n\
    \      [else (factorize-iter (/ n 7) (cons 7 acc))]))\n  (factorize-iter n '()))\n",
  "  (define (factorize-iter n divisor factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor) divisor (cons\
    \ divisor factors))]\n      [else (factorize-iter n (+ divisor 1) factors)]))\n\
    \  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n i)\n    (cond\n\
    \      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (factorize-iter n acc)\n    (cond\n      [(= n 1) acc]\n      [(= (remainder\
    \ n 2) 0) (factorize-iter (/ n 2) (cons 2 acc))]\n      [else (factorize-iter\
    \ (/ (- n 1) 2) (cons 1 acc))]))\n  (factorize-iter n '()))\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (factorize-iter\
    \ n i)\n    (cond ((= i n) (list n))\n          ((and (prime? i) (= (remainder\
    \ n i) 0)) (cons i (factorize-iter (/ n i) i)))\n          (else (factorize-iter\
    \ n (+ i 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n\
    \    (cond [(= n 1) '()]\n          [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n          [else (factorize-iter n (+ i 1))]))\n  (factorize-iter\
    \ n 2))\n", "  (cond\n    [(= n 1) (list)]\n    [(= (remainder n 2) 0) (cons 2\
    \ (factorize (/ n 2)))]\n    [(= (remainder n 3) 0) (cons 3 (factorize (/ n 3)))]\n\
    \    [(= (remainder n 5) 0) (cons 5 (factorize (/ n 5)))]\n    [(= (remainder\
    \ n 7) 0) (cons 7 (factorize (/ n 7)))]\n    [else (cons n (list))]))\n", "  (define\
    \ (factors n i)\n    (cond ((= n 1) '())\n          ((= (modulo n i) 0) (cons\
    \ i (factors (/ n i) i)))\n          (else (factors n (+ i 1)))))\n  (factors\
    \ n 2))\n", "  (define (factorize-iter n divisor factors)\n    (cond ((= n 1)\
    \ factors)\n          ((= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors)))\n          (else (factorize-iter n (+ divisor\
    \ 1) factors))))\n  (factorize-iter n 2 '()))\n", "  (define (factorize-iter n\
    \ i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n divisor)\n\
    \    (if (= n 1)\n        '()\n        (if (= (remainder n divisor) 0)\n     \
    \       (cons divisor (factorize-iter (/ n divisor) divisor))\n            (factorize-iter\
    \ n (+ divisor 1)))))\n  (factorize-iter n 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
