name: HumanEval_48_is_palindrome
language: rkt
prompt: "#lang racket\n\n;; Checks if given string is a palindrome\n;; >>> (is_palindrome\
  \ \"\")\n;; #t\n;; >>> (is_palindrome \"aba\")\n;; #t\n;; >>> (is_palindrome \"\
  aaaaa\")\n;; #t\n;; >>> (is_palindrome \"zbcd\")\n;; #f\n(define (is_palindrome\
  \ text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_palindrome))\n\
  \    (check-equal? (candidate \"\") #t)\n    (check-equal? (candidate \"aba\") #t)\n\
  \    (check-equal? (candidate \"aaaaa\") #t)\n    (check-equal? (candidate \"zbcd\"\
  ) #f)\n    (check-equal? (candidate \"xywyx\") #t)\n    (check-equal? (candidate\
  \ \"xywyz\") #f)\n    (check-equal? (candidate \"xywzx\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (is_palindrome-helper text left right)\n    (cond\n     \
    \ [(= left right) #t]\n      [(= left (+ right 1)) #t]\n      [(char=? (string-ref\
    \ text left) (string-ref text right))\n       (is_palindrome-helper text (+ left\
    \ 1) (- right 1))]\n      [else #f]))\n  (is_palindrome-helper text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome_iter text i j)\n    (cond ((= i j)\
    \ #t)\n          ((= i (+ j 1)) #t)\n          ((char=? (string-ref text i) (string-ref\
    \ text j))\n           (is_palindrome_iter text (+ i 1) (- j 1)))\n          (else\
    \ #f)))\n  (is_palindrome_iter text 0 (- (string-length text) 1)))\n", "  (define\
    \ (is_palindrome_iter text i j)\n    (cond\n      [(> i j) #t]\n      [(not (equal?\
    \ (string-ref text i) (string-ref text j))) #f]\n      [else (is_palindrome_iter\
    \ text (+ i 1) (- j 1))]))\n  (is_palindrome_iter text 0 (- (string-length text)\
    \ 1)))\n", "  (define (is_palindrome_iter text)\n    (define (is_palindrome_iter_helper\
    \ text)\n      (if (empty? text)\n          #t\n          (if (equal? (first text)\
    \ (last text))\n              (is_palindrome_iter (rest (butlast text)))\n   \
    \           #f)))\n    (if (empty? text)\n        #t\n        (is_palindrome_iter_helper\
    \ text)))\n  (is_palindrome_iter text))\n", "  (define (is_palindrome_iter text\
    \ left right)\n    (if (> left right)\n        #t\n        (if (string-ci=? (string-ref\
    \ text left) (string-ref text right))\n            (is_palindrome_iter text (+\
    \ left 1) (- right 1))\n            #f)))\n  (is_palindrome_iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome_iter text i j)\n    (cond\n      [(>\
    \ i j) #t]\n      [(not (char=? (string-ref text i) (string-ref text j))) #f]\n\
    \      [else (is_palindrome_iter text (+ i 1) (- j 1))]))\n  (is_palindrome_iter\
    \ text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter text\
    \ i j)\n    (if (> i j)\n        #t\n        (if (char=? (string-ref text i) (string-ref\
    \ text j))\n            (is_palindrome_iter text (+ i 1) (- j 1))\n          \
    \  #f)))\n  (is_palindrome_iter text 0 (- (string-length text) 1)))\n", "  (define\
    \ (is_palindrome_iter text i j)\n    (cond ((> i j) #t)\n          ((char=? (string-ref\
    \ text i) (string-ref text j))\n           (is_palindrome_iter text (+ i 1) (-\
    \ j 1)))\n          (else #f)))\n  (is_palindrome_iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome_helper text i j)\n    (cond\n     \
    \ [(= i j) #t]\n      [(= (+ i 1) j) #t]\n      [(char=? (string-ref text i) (string-ref\
    \ text j))\n       (is_palindrome_helper text (+ i 1) (- j 1))]\n      [else #f]))\n\
    \  (is_palindrome_helper text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter\
    \ text i j)\n    (cond\n      [(= i j) #t]\n      [(= (+ i 1) j) #t]\n      [(char=?\
    \ (string-ref text i) (string-ref text j))\n       (is_palindrome_iter text (+\
    \ i 1) (- j 1))]\n      [else #f]))\n  (is_palindrome_iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome_iter text i j)\n    (cond\n      [(=\
    \ i j) #t]\n      [(= (+ i 1) j) #t]\n      [(char=? (string-ref text i) (string-ref\
    \ text j))\n       (is_palindrome_iter text (+ i 1) (- j 1))]\n      [else #f]))\n\
    \  (is_palindrome_iter text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter\
    \ text i j)\n    (cond ((= i j) #t)\n          ((= (+ i 1) j) #t)\n          ((char=?\
    \ (string-ref text i) (string-ref text j))\n           (is_palindrome_iter text\
    \ (+ i 1) (- j 1)))\n          (else #f)))\n  (is_palindrome_iter text 0 (- (string-length\
    \ text) 1)))\n", "  (cond\n    [(empty? text) #t]\n    [(equal? (first text) (last\
    \ text)) (is_palindrome (rest (butlast text)))]\n    [else #f]))\n", "  (define\
    \ (is_palindrome_iter text i j)\n    (if (>= i j)\n        #t\n        (if (string-ref\
    \ text i)\n            (if (string-ref text j)\n                (if (char=? (string-ref\
    \ text i) (string-ref text j))\n                    (is_palindrome_iter text (+\
    \ i 1) (- j 1))\n                    #f)\n                #f)\n            #f)))\n\
    \  (is_palindrome_iter text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter\
    \ text i j)\n    (cond\n      [(= i j) #t]\n      [(= (+ i 1) j) #t]\n      [(char=?\
    \ (string-ref text i) (string-ref text j))\n       (is_palindrome_iter text (+\
    \ i 1) (- j 1))]\n      [else #f]))\n  (is_palindrome_iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome_helper text i j)\n    (cond\n     \
    \ [(= i j) #t]\n      [(= (+ i 1) j) #t]\n      [(char=? (string-ref text i) (string-ref\
    \ text j))\n       (is_palindrome_helper text (+ i 1) (- j 1))]\n      [else #f]))\n\
    \  (is_palindrome_helper text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_helper\
    \ text i j)\n    (cond\n      [(> j i) #t]\n      [(char=? (string-ref text i)\
    \ (string-ref text j))\n       (is_palindrome_helper text (+ i 1) (- j 1))]\n\
    \      [else #f]))\n  (is_palindrome_helper text 0 (- (string-length text) 1)))\n",
  "  (cond\n    [(empty? text) #t]\n    [(empty? (rest text)) #t]\n    [(char=? (first\
    \ text) (last text))\n     (is_palindrome (substring text 1 (- (string-length\
    \ text) 1)))]\n    [else #f]))\n", "  (define (is_palindrome-iter text left right)\n\
    \    (cond\n      [(= left right) #t]\n      [(= (+ left 1) right) #t]\n     \
    \ [(char=? (string-ref text left) (string-ref text right))\n       (is_palindrome-iter\
    \ text (+ left 1) (- right 1))]\n      [else #f]))\n  (is_palindrome-iter text\
    \ 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter text left\
    \ right)\n    (if (or (= left right) (= left (- right 1)))\n        #t\n     \
    \   (if (char=? (string-ref text left) (string-ref text right))\n            (is_palindrome_iter\
    \ text (+ left 1) (- right 1))\n            #f)))\n  (is_palindrome_iter text\
    \ 0 (- (string-length text) 1)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
