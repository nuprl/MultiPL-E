name: HumanEval_35_max_element
language: rkt
prompt: "#lang racket\n\n;; Return maximum element in the list.\n;; >>> (max_element\
  \ (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n\
  ;; 123\n(define (max_element l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_element))\n\
  \    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list\
  \ 5 3 -5 2 -3 3 9 0 124 1 -10)) 124)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) (error \"max_element: empty list\")]\n   \
    \ [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element (rest l)))]))\n",
  "  (cond\n    [(empty? l) 0]\n    [(= (length l) 1) (first l)]\n    [else\n    \
    \ (let ([max (max_element (rest l))])\n       (if (> (first l) max)\n        \
    \   (first l)\n           max))]))\n", "  (cond\n    [(empty? l) (error \"empty\
    \ list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) (error \"Empty list\")]\n    [(empty?\
    \ (rest l)) (first l)]\n    [else (max (first l) (max_element (rest l)))]))\n",
  "  (cond\n    [(empty? l) (error \"Empty list\")]\n    [(empty? (rest l)) (first\
    \ l)]\n    [else (max (first l) (max_element (rest l)))]))\n", "  (cond\n    [(empty?\
    \ l) (error \"Empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max\
    \ (first l) (max_element (rest l)))]))\n", "  (cond\n    [(empty? l) (error \"\
    Empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) 0]\n    [(empty? (rest l)) (first\
    \ l)]\n    [else (max (first l) (max_element (rest l)))]))\n", "  (cond\n    [(empty?\
    \ l) 0]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) (error \"Empty list\")]\n    [(empty?\
    \ (rest l)) (first l)]\n    [else (max (first l) (max_element (rest l)))]))\n",
  "  (cond\n    [(empty? l) (error \"Empty list\")]\n    [(empty? (rest l)) (first\
    \ l)]\n    [else (max (first l) (max_element (rest l)))]))\n", "  (cond\n    [(empty?\
    \ l) (error \"Empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max\
    \ (first l) (max_element (rest l)))]))\n", "  (cond\n    [(empty? l) (error \"\
    Empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) 0]\n    [(= (length l) 1) (first\
    \ l)]\n    [else\n     (let ([max (max_element (rest l))])\n       (if (> (first\
    \ l) max)\n           (first l)\n           max))]))\n", "  (cond\n    [(empty?\
    \ l) (error \"Empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max\
    \ (first l) (max_element (rest l)))]))\n", "  (cond\n    [(empty? l) (error \"\
    Empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max (first l) (max_element\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) (error \"empty list\")]\n    [(empty?\
    \ (rest l)) (first l)]\n    [else (max (first l) (max_element (rest l)))]))\n",
  "  (cond\n    [(empty? l) (error \"Empty list\")]\n    [(empty? (rest l)) (first\
    \ l)]\n    [else (max (first l) (max_element (rest l)))]))\n", "  (cond\n    [(empty?\
    \ l) (error \"Empty list\")]\n    [(null? (rest l)) (first l)]\n    [else (max\
    \ (first l) (max_element (rest l)))]))\n", "  (cond\n    [(empty? l) (error \"\
    max_element: empty list\")]\n    [(empty? (rest l)) (first l)]\n    [else (max\
    \ (first l) (max_element (rest l)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
