name: HumanEval_94_skjkasdkd
language: rkt
prompt: "#lang racket\n\n;; You are given a list of integers.\n;; You need to find\
  \ the largest prime value and return the sum of its digits.\n;; Examples:\n;; >>>\
  \ (skjkasdkd (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))\n;; 10\n\
  ;; >>> (skjkasdkd (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1))\n;; 25\n;; >>>\
  \ (skjkasdkd (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3))\n;; 13\n\
  ;; >>> (skjkasdkd (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6))\n;; 11\n;; >>> (skjkasdkd\
  \ (list 0 81 12 3 1 21))\n;; 3\n;; >>> (skjkasdkd (list 0 8 1 2 1 7))\n;; 7\n(define\
  \ (skjkasdkd lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n\
  \    (check-equal? (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324\
  \ 4 3)) 10)\n    (check-equal? (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2\
  \ 4 2 5 1)) 25)\n    (check-equal? (candidate (list 1 3 1 32 5107 34 83278 109 163\
  \ 23 2323 32 30 1 9 3)) 13)\n    (check-equal? (candidate (list 0 724 32 71 99 32\
  \ 6 0 5 91 83 0 5 6)) 11)\n    (check-equal? (candidate (list 0 81 12 3 1 21)) 3)\n\
  \    (check-equal? (candidate (list 0 8 1 2 1 7)) 7)\n    (check-equal? (candidate\
  \ (list 8191)) 19)\n    (check-equal? (candidate (list 8191 123456 127 7)) 19)\n\
  \    (check-equal? (candidate (list 127 97 8192)) 10)\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime n)\n    (define (iter i)\n      (cond ((&gt; i\
    \ (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (digits n)\n    (cond ((= n 0) '())\n\
    \          (else (cons (modulo n 10) (digits (quotient n 10))))))\n  (define (sum-digits\
    \ lst)\n    (cond ((null? lst) 0)\n          (else (+ (car lst) (sum-digits (cdr\
    \ lst))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n      \
    \    ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (digits (largest-prime lst))))\n</code>\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (let ([primes (filter\
    \ prime? lst)])\n    (sum-digits (apply max primes))))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (floor (/ n 2))))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime?\
    \ (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n  \
    \  (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (iter lst largest)\n    (cond ((null? lst) (sum-digits\
    \ largest))\n          ((and (prime? (car lst)) (> (car lst) largest))\n     \
    \      (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (is-prime-helper? n\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (is-prime-helper? n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (find-largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (find-largest-prime (cdr lst)))))\n \
    \ (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (sum-digits (find-largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter s)\n      (cond ((= n 0) s)\n\
    \            (else (iter (+ s (remainder n 10))))))\n    (iter 0))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\
    \ ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n   \
    \       (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper? n div)\n      (cond\n  \
    \      [(= div 1) #t]\n        [(= (modulo n div) 0) #f]\n        [else (is-prime-helper?\
    \ n (- div 1))]))\n    (is-prime-helper? n (- n 1)))\n  (define (prime-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (prime-digits\
    \ (/ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n\
    \      [else (largest-prime (cdr lst))]))\n  (prime-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (if (= n 0)\n        0\n        (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (sum-digits n)\n    (define (iter i)\n      (cond ((= i 0) 0)\n            (else\
    \ (+ (modulo n (expt 10 i)) (iter (- i 1))))))\n    (iter (expt 10 (expt 2 32))))\n\
    \  (define (largest-prime lst)\n    (define (iter lst max)\n      (cond ((null?\
    \ lst) max)\n            ((and (is-prime? (car lst)) (> (car lst) max)) (iter\
    \ (cdr lst) (car lst)))\n            (else (iter (cdr lst) max))))\n    (iter\
    \ lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (let ([primes (filter prime?\
    \ lst)])\n    (sum-digits (apply max primes))))\n", "  (define (sum-digits n)\n\
    \    (if (= n 0)\n        0\n        (+ (modulo n 10) (sum-digits (quotient n\
    \ 10)))))\n  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i 3))\n\
    \             (cond ((= i n) #t)\n                   ((= (modulo n i) 0) #f)\n\
    \                   (else (loop (+ i 2))))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n   \
    \   (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (max-prime lst)\n    (define (iter lst\
    \ acc)\n      (cond ((null? lst) acc)\n            ((and (is-prime (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr\
    \ lst) acc))))\n    (iter lst 0))\n  (sum-digits (max-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (-\
    \ i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (get-largest-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst)\
    \ (get-largest-prime (cdr lst)))]\n      [else (get-largest-prime (cdr lst))]))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (/ n 10)))]))\n  (sum-digits (get-largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond ((=\
    \ divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n            (else\
    \ (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n (floor (/ n 2))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (sum-digits\
    \ n)\n    (if (= n 0)\n        0\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (is-prime? n)\n    (if (= n 1)\n        #f\n        (if\
    \ (= n 2)\n            #t\n            (if (even? n)\n                #f\n   \
    \             (let loop ((i 3))\n                  (if (> (* i i) n)\n       \
    \               #t\n                      (if (zero? (modulo n i))\n         \
    \                 #f\n                          (loop (+ i 2)))))))))\n  (define\
    \ (largest-prime lst)\n    (if (null? lst)\n        0\n        (let ((x (car lst)))\n\
    \          (if (is-prime? x)\n              (max x (largest-prime (cdr lst)))\n\
    \              (largest-prime (cdr lst))))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n     \
    \     (else (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(prime? (first lst))\n     (if (> (first lst) (skjkasdkd (rest\
    \ lst)))\n         (sum-digits (first lst))\n         (skjkasdkd (rest lst)))]\n\
    \    [else (skjkasdkd (rest lst))]))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
