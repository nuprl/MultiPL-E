name: HumanEval_94_skjkasdkd
language: rkt
prompt: "#lang racket\n\n;; You are given a list of integers.\n;; You need to find\
  \ the largest prime value and return the sum of its digits.\n;; Examples:\n;; >>>\
  \ (skjkasdkd (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))\n;; 10\n\
  ;; >>> (skjkasdkd (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1))\n;; 25\n;; >>>\
  \ (skjkasdkd (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3))\n;; 13\n\
  ;; >>> (skjkasdkd (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6))\n;; 11\n;; >>> (skjkasdkd\
  \ (list 0 81 12 3 1 21))\n;; 3\n;; >>> (skjkasdkd (list 0 8 1 2 1 7))\n;; 7\n(define\
  \ (skjkasdkd lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n\
  \    (check-equal? (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324\
  \ 4 3)) 10)\n    (check-equal? (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2\
  \ 4 2 5 1)) 25)\n    (check-equal? (candidate (list 1 3 1 32 5107 34 83278 109 163\
  \ 23 2323 32 30 1 9 3)) 13)\n    (check-equal? (candidate (list 0 724 32 71 99 32\
  \ 6 0 5 91 83 0 5 6)) 11)\n    (check-equal? (candidate (list 0 81 12 3 1 21)) 3)\n\
  \    (check-equal? (candidate (list 0 8 1 2 1 7)) 7)\n    (check-equal? (candidate\
  \ (list 8191)) 19)\n    (check-equal? (candidate (list 8191 123456 127 7)) 19)\n\
  \    (check-equal? (candidate (list 127 97 8192)) 10)\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime n)\n    (define (iter i)\n      (cond ((&gt; i\
    \ (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (digits n)\n    (cond ((= n 0) '())\n\
    \          (else (cons (modulo n 10) (digits (quotient n 10))))))\n  (define (sum-digits\
    \ lst)\n    (cond ((null? lst) 0)\n          (else (+ (car lst) (sum-digits (cdr\
    \ lst))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n      \
    \    ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (digits (largest-prime lst))))\n</code>\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (let ([primes (filter\
    \ prime? lst)])\n    (sum-digits (apply max primes))))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (floor (/ n 2))))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime?\
    \ (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n  \
    \  (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (iter lst largest)\n    (cond ((null? lst) (sum-digits\
    \ largest))\n          ((and (prime? (car lst)) (> (car lst) largest))\n     \
    \      (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (is-prime-helper? n\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (is-prime-helper? n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (find-largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (find-largest-prime (cdr lst)))))\n \
    \ (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (sum-digits (find-largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter s)\n      (cond ((= n 0) s)\n\
    \            (else (iter (+ s (remainder n 10))))))\n    (iter 0))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\
    \ ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n   \
    \       (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper? n div)\n      (cond\n  \
    \      [(= div 1) #t]\n        [(= (modulo n div) 0) #f]\n        [else (is-prime-helper?\
    \ n (- div 1))]))\n    (is-prime-helper? n (- n 1)))\n  (define (prime-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (prime-digits\
    \ (/ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n\
    \      [else (largest-prime (cdr lst))]))\n  (prime-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (if (= n 0)\n        0\n        (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (sum-digits n)\n    (define (iter i)\n      (cond ((= i 0) 0)\n            (else\
    \ (+ (modulo n (expt 10 i)) (iter (- i 1))))))\n    (iter (expt 10 (expt 2 32))))\n\
    \  (define (largest-prime lst)\n    (define (iter lst max)\n      (cond ((null?\
    \ lst) max)\n            ((and (is-prime? (car lst)) (> (car lst) max)) (iter\
    \ (cdr lst) (car lst)))\n            (else (iter (cdr lst) max))))\n    (iter\
    \ lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (let ([primes (filter prime?\
    \ lst)])\n    (sum-digits (apply max primes))))\n", "  (define (sum-digits n)\n\
    \    (if (= n 0)\n        0\n        (+ (modulo n 10) (sum-digits (quotient n\
    \ 10)))))\n  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i 3))\n\
    \             (cond ((= i n) #t)\n                   ((= (modulo n i) 0) #f)\n\
    \                   (else (loop (+ i 2))))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n   \
    \   (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (max-prime lst)\n    (define (iter lst\
    \ acc)\n      (cond ((null? lst) acc)\n            ((and (is-prime (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr\
    \ lst) acc))))\n    (iter lst 0))\n  (sum-digits (max-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (-\
    \ i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (get-largest-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst)\
    \ (get-largest-prime (cdr lst)))]\n      [else (get-largest-prime (cdr lst))]))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (/ n 10)))]))\n  (sum-digits (get-largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond ((=\
    \ divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n            (else\
    \ (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n (floor (/ n 2))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (sum-digits\
    \ n)\n    (if (= n 0)\n        0\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (is-prime? n)\n    (if (= n 1)\n        #f\n        (if\
    \ (= n 2)\n            #t\n            (if (even? n)\n                #f\n   \
    \             (let loop ((i 3))\n                  (if (> (* i i) n)\n       \
    \               #t\n                      (if (zero? (modulo n i))\n         \
    \                 #f\n                          (loop (+ i 2)))))))))\n  (define\
    \ (largest-prime lst)\n    (if (null? lst)\n        0\n        (let ((x (car lst)))\n\
    \          (if (is-prime? x)\n              (max x (largest-prime (cdr lst)))\n\
    \              (largest-prime (cdr lst))))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n     \
    \     (else (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(prime? (first lst))\n     (if (> (first lst) (skjkasdkd (rest\
    \ lst)))\n         (sum-digits (first lst))\n         (skjkasdkd (rest lst)))]\n\
    \    [else (skjkasdkd (rest lst))]))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n div)\n      (cond\n        [(= div 1) #t]\n        [(= (modulo\
    \ n div) 0) #f]\n        [else (is-prime-helper n (- div 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else\
    \ (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (largest-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst)\
    \ (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (quotient n 2)))\n  (define (sum-digits n)\n  \
    \  (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond\n      [(null? lst) acc]\n      [(and (is-prime? (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst)\
    \ acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-digits n)\n\
    \    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (prime-digits (quotient\
    \ n 10))))))\n  (define (iter lst max)\n    (cond ((null? lst) max)\n        \
    \  ((and (is-prime? (car lst))\n                (> (prime-digits (car lst)) max))\n\
    \           (iter (cdr lst) (prime-digits (car lst))))\n          (else (iter\
    \ (cdr lst) max))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n sum)\n      (cond ((= n 0) sum)\n            (else (iter\
    \ (quotient n 10) (+ sum (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst max)\n    (cond ((null? lst) (sum-digits max))\n          ((and (is-prime?\
    \ (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n          (else (iter\
    \ (cdr lst) max))))\n  (iter lst 0))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n   \
    \ (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient\
    \ n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr\
    \ lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper? n i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper?\
    \ n (- i 1))]))\n    (is-prime-helper? n (- n 1)))\n  (define (sum-digits n)\n\
    \    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null?\
    \ lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (is-prime-iter n i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-iter n (- i 1)))))\n    (is-prime-iter\
    \ n (floor (/ n 2))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n     \
    \     (else (+ (modulo n 10) (sum-digits (floor (/ n 10)))))))\n  (define (find-largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n\
    \          (else (find-largest-prime (cdr lst)))))\n  (sum-digits (find-largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (quotient n 2)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n\
    \          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst))\
    \ (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-lst\
    \ lst)\n    (cond\n      [(null? lst) '()]\n      [(is-prime? (car lst)) (cons\
    \ (car lst) (prime-lst (cdr lst)))]\n      [else (prime-lst (cdr lst))]))\n  (define\
    \ (max-prime lst)\n    (cond\n      [(null? (cdr lst)) (car lst)]\n      [(> (car\
    \ lst) (car (cdr lst))) (max-prime (cons (car lst) (cdr (cdr lst))))]\n      [else\
    \ (max-prime (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n      [(= n 0)\
    \ 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (sum-digits\
    \ (max-prime (prime-lst lst))))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n div)\n      (cond ((= div 1) #t)\n            ((= (modulo n div) 0) #f)\n\
    \            (else (is-prime-helper n (- div 1)))))\n    (is-prime-helper n (-\
    \ n 1)))\n  (define (is-prime-in-list? lst)\n    (cond ((null? lst) #f)\n    \
    \      ((is-prime? (car lst)) (car lst))\n          (else (is-prime-in-list? (cdr\
    \ lst)))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+\
    \ (modulo n 10) (sum-digits (/ n 10))))))\n  (sum-digits (is-prime-in-list? lst)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n        \
    \    ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((prime? (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n        \
    \  (else (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (largest-prime (cdr lst)))\n          (else (max (car lst) (largest-prime\
    \ (cdr lst))))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else\n           (define (iter i)\n             (cond ((> (* i i)\
    \ n) #t)\n                   ((= (modulo n i) 0) #f)\n                   (else\
    \ (iter (+ i 2)))))\n           (iter 3))))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n    \
    \      (else (largest-prime (cdr lst)))))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n    (define (iter\
    \ i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n         \
    \     (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define\
    \ (iter s n)\n      (if (= n 0) s\n          (iter (+ s (remainder n 10)) (quotient\
    \ n 10))))\n    (iter 0 n))\n  (define (largest-prime lst)\n    (define (iter\
    \ lst largest)\n      (if (null? lst) largest\n          (if (and (prime? (car\
    \ lst)) (> (car lst) largest))\n              (iter (cdr lst) (car lst))\n   \
    \           (iter (cdr lst) largest))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\
    \ ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (floor (/ n 2))))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (/ n 10)))]))\n  (sum-digits (largest-prime lst)))\n", " \
    \ (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime (car lst)) (max (car lst) (largest-prime (cdr lst))))\n \
    \         (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (floor\
    \ (/ n 2))))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\
    \ ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((prime? (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n        \
    \  (else (iter (cdr lst) acc))))\n  (iter lst 0))\n</code>\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (/ n 2)))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond\n        [(null? lst) acc]\n \
    \       [(is-prime? (car lst)) (iter (cdr lst) (car lst))]\n        [else (iter\
    \ (cdr lst) acc)]))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter n s)\n      (cond ((=\
    \ n 0) s)\n            (else (iter (quotient n 10) (+ s (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst max)\n    (cond ((null? lst) (sum-digits\
    \ max))\n          ((and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst)\
    \ (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", " \
    \ (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (max-prime lst)\n    (define (iter lst acc)\n    \
    \  (cond ((null? lst) acc)\n            ((and (is-prime (car lst))\n         \
    \         (&gt; (car lst) acc))\n             (iter (cdr lst) (car lst)))\n  \
    \          (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (max-prime\
    \ lst)))\n</code>\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter\
    \ lst acc)\n      (cond ((null? lst) acc)\n            ((prime? (car lst)) (iter\
    \ (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter\
    \ lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n \
    \   (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (let ([max (apply max lst)])\n   \
    \ (if (prime? max)\n        (sum-digits max)\n        (skjkasdkd (remove max lst)))))\n",
  "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n      [(= n 11) #t]\n\
    \      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19) #t]\n      [(= n 23)\
    \ #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(= n 37) #t]\n      [(=\
    \ n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n      [(= n 53) #t]\n \
    \     [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67) #t]\n      [(= n 71)\
    \ #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(= n 83) #t]\n      [(=\
    \ n 89) #t]\n      [(= n 97) #t]\n      [(= n 101) #t]\n      [(= n 103) #t]\n\
    \      [(= n 107) #t]\n      [(= n 109) #t]\n      [(= n 113) #t]\n      [(= n\
    \ 127) #t]\n      [(= n 131) #t]\n      [(= n 137) #t]\n      [(= n 139) #t]\n\
    \      [(= n 149) #t]\n      [(= n 151) #t]\n      [(= n 157) #t]\n      [(= n\
    \ 163) #t]\n      [(= n 167) #t]\n      [(= n 173) #t]\n      [(= n 179) #t]\n\
    \      [(= n 181) #t]\n      [(= n 191) #t]\n      [(= n 193) #t]\n      [(= n\
    \ 197) #t]\n      [(= n 199) #t]\n      [(= n 211) #t]\n      [(= n 223) #t]\n\
    \      [(= n 227)", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits n)\n    (cond ((=\
    \ n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1)\
    \ #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(= i n) #t]\n           [(= (modulo n i) 0)\
    \ #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n   \
    \   [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((and (is-prime (car lst))\n                (> (car lst) acc))\n      \
    \     (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n \
    \ (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (iter lst largest)\n    (cond ((null? lst) (sum-digits largest))\n\
    \          ((and (is-prime? (car lst)) (> (car lst) largest))\n           (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n  (iter\
    \ lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits n)\n    (cond ((=\
    \ n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n        \
    \  ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr\
    \ lst) max))))\n  (iter lst 0))\n", "  (define (is-prime n)\n    (define (is-prime-iter\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-iter n (- i 1)))))\n    (is-prime-iter n (floor (/ n 2))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (floor (/ n 10)))))))\n  (define (find-largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n     \
    \     (else (find-largest-prime (cdr lst)))))\n  (sum-digits (find-largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (largest-prime lst)\n    (cond\n      [(null?\
    \ lst) 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n\
    \      [else (largest-prime (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime? (car lst)) (iter\
    \ (cdr lst) (max acc (sum-digits (car lst)))))\n          (else (iter (cdr lst)\
    \ acc))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define\
    \ (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient n\
    \ 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter\
    \ (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (is-prime? n)\n    (cond\n\
    \      [(zero? n) #f]\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (modulo\
    \ n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n        \
    \   [(> i (quotient n 2)) #t]\n           [(= (modulo n i) 0) #f]\n          \
    \ [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (largest-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n \
    \     [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n     \
    \   [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n\
    \      [(and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n\
    \      [else (iter (cdr lst) acc)]))\n  (sum-digits (iter lst 0)))\n", "  (let\
    \ ([primes (filter prime? lst)])\n    (apply + (map digit-value (number->string\
    \ (apply max primes))))))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n           \
    \ (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc\
    \ (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\n\
    \      [(null? lst) acc]\n      [(and (is-prime? (car lst)) (> (car lst) acc))\
    \ (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) acc)]))\n  (sum-digits\
    \ (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (define (largest-prime lst)\n    (cond\n     \
    \ [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (sum-digits\
    \ n)\n    (if (&lt; n 10)\n        n\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else\
    \ (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n sum)\n      (cond ((= n 0) sum)\n\
    \            (else (iter (quotient n 10) (+ sum (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (quotient n 2)))\n \
    \ (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (largest-prime lst)\n    (cond\n\
    \      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n   \
    \   (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n      \
    \    (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n     \
    \   [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond\n        [(empty? lst) acc]\n        [(is-prime? (first lst)) (iter\
    \ (rest lst) (first lst))]\n        [else (iter (rest lst) acc)]))\n    (iter\
    \ lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0)\
    \ #f]\n      [else\n       (define (iter i)\n         (cond\n           [(> (*\
    \ i i) n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+\
    \ i 1))]))\n       (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n   \
    \   [(null? lst) 0]\n      [(prime? (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst)))]\n      [else (largest-prime (cdr lst))]))\n  (define (sum-digits n)\n\
    \    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n\
    \ i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter\
    \ (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n      (cond ((= d 1)\
    \ #t)\n            ((= (modulo n d) 0) #f)\n            (else (is-prime-helper\
    \ n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n\
    \ 10))))))\n  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n  \
    \  (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n    \
    \      (else\n           (define (loop i)\n             (cond ((> i (sqrt n))\
    \ #t)\n                   ((= (modulo n i) 0) #f)\n                   (else (loop\
    \ (+ i 1)))))\n           (loop 3))))\n  (define (sum-digits n)\n    (cond ((=\
    \ n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(> (* i i) n) #t]\n           [(= (remainder\
    \ n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (iter lst max)\n    (cond\n    \
    \  [(null? lst) (sum-digits max)]\n      [(and (is-prime (car lst)) (> (car lst)\
    \ max)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) max)]))\n  (iter\
    \ lst 0))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n  \
    \    (cond\n        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else\
    \ (is-prime-helper n (- d 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (/ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime (cdr\
    \ lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (prime? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n\
    \ i) 0) #f)\n            (else (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (digits n)\n    (define (iter n)\n      (cond\
    \ ((= n 0) '())\n            (else (cons (remainder n 10) (iter (quotient n 10))))))\n\
    \    (iter n))\n  (define (sum-digits lst)\n    (cond ((null? lst) 0)\n      \
    \    (else (+ (car lst) (sum-digits (cdr lst))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n     \
    \     (else (largest-prime (cdr lst)))))\n  (sum-digits (digits (largest-prime\
    \ lst))))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst)\
    \ acc)\n          ((and (is-prime (car lst))\n                (> (car lst) acc))\n\
    \           (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (helper\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (helper (- i 1)))))\n    (helper (- n 1)))\n  (define (sum-digits n)\n\
    \    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (helper lst)\n    (cond ((null? lst) 0)\n          ((and\
    \ (is-prime? (car lst))\n                (> (car lst) (helper (cdr lst))))\n \
    \          (car lst))\n          (else (helper (cdr lst)))))\n  (sum-digits (helper\
    \ lst)))\n", "  (define (prime? n)\n    (define (prime-helper n d)\n      (cond\n\
    \        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else (prime-helper\
    \ n (- d 1))]))\n    (prime-helper n (- n 1)))\n  (define (sum-digits n)\n   \
    \ (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n\
    \      [else\n       (define (iter i)\n         (cond\n           [(> i (sqrt\
    \ n)) #t]\n           [(= (modulo n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n\
    \      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper? n d)\n      (cond ((= d 1) #t)\n            ((= (modulo n\
    \ d) 0) #f)\n            (else (is-prime-helper? n (- d 1)))))\n    (is-prime-helper?\
    \ n (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n    \
    \      (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (prime? n)\n    (define (prime-helper n i)\n      (cond\n        [(=\
    \ i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (prime-helper n (+\
    \ i 1))]))\n    (prime-helper n 2))\n  (define (sum-digits n)\n    (cond\n   \
    \   [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define\
    \ (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(prime? (car lst))\
    \ (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr\
    \ lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst max)\n    (cond ((null? lst) (sum-digits max))\n          ((and (is-prime?\
    \ (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n          (else (iter\
    \ (cdr lst) max))))\n  (iter lst 0))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (prime-helper n (- i 1)))))\n    (prime-helper n (- n 1)))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime? (car lst))\
    \ (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+\
    \ (modulo n 10) (sum-digits (/ n 10))))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (helper i)\n      (cond ((= i 1) #t)\n   \
    \         ((= (modulo n i) 0) #f)\n            (else (helper (- i 1)))))\n   \
    \ (helper (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n       \
    \   (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (helper\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (helper (cdr lst))))\n          (else (helper (cdr lst)))))\n  (sum-digits\
    \ (helper lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n\
    \ acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+\
    \ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n     \
    \     (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (is-prime? n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (modulo n 2) 0) #f]\n     \
    \ [else\n       (define (iter i)\n         (cond\n           [(> i (quotient n\
    \ 2)) #t]\n           [(= (modulo n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime (cdr\
    \ lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n\
    \ i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n    (define\
    \ (is-prime-iter n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (is-prime-iter n (- i 1)))))\n    (is-prime-iter n\
    \ (quotient n 2)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n        \
    \  (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (let ([max-prime (apply max (filter prime? lst))])\n    (apply + (map digit-value\
    \ (string->list (number->string max-prime))))))\n", "  (define (prime? n)\n  \
    \  (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n    \
    \      (else\n           (define (iter i)\n             (cond ((> i (sqrt n))\
    \ #t)\n                   ((= (modulo n i) 0) #f)\n                   (else (iter\
    \ (+ i 1)))))\n           (iter 3))))\n  (define (sum-digits n)\n    (cond ((=\
    \ n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n\
    \ i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr\
    \ lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", " \
    \ (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder b a)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (define\
    \ (sum-digits n)\n    (if (= n 0)\n        0\n        (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))))\n  (define (find-largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (find-largest-prime\
    \ (cdr lst)))))\n  (sum-digits (find-largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (if (= i 1)\n          #t\n          (if (= (modulo n i) 0)\n\
    \              #f\n              (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (if (= n 0)\n          acc\n\
    \          (iter (quotient n 10) (+ acc (remainder n 10)))))\n    (iter n 0))\n\
    \  (define (iter lst acc)\n    (if (null? lst)\n        acc\n        (if (is-prime?\
    \ (car lst))\n            (iter (cdr lst) (max acc (sum-digits (car lst))))\n\
    \            (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else\n           (let loop ((i 3))\n             (cond ((&gt; i (sqrt\
    \ n)) #t)\n                   ((= (modulo n i) 0) #f)\n                   (else\
    \ (loop (+ i 2))))))))\n  (define (sum-digits n)\n    (cond ((&lt; n 10) n)\n\
    \          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n</code>\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter s n)\n\
    \      (cond ((= n 0) s)\n            (else (iter (+ s (remainder n 10)) (/ n\
    \ 10)))))\n    (iter 0 n))\n  (define (largest-prime lst)\n    (define (iter lst\
    \ largest)\n      (cond ((null? lst) largest)\n            ((and (is-prime (car\
    \ lst)) (> (car lst) largest))\n             (iter (cdr lst) (car lst)))\n   \
    \         (else (iter (cdr lst) largest))))\n    (iter lst 0))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime n)\n    (define (is-prime-iter\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-iter n (- i 1)))))\n    (is-prime-iter n (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (/ n 10))))))\n  (define (max-prime lst)\n    (cond ((null? lst) 0)\n      \
    \    ((is-prime (car lst)) (max-prime (cdr lst)))\n          (else (max (car lst)\
    \ (max-prime (cdr lst))))))\n  (sum-digits (max-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (quotient n 10))))))\n  (define (max-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime (car lst)) (max-prime (cdr lst)))\n          (else\
    \ (max (car lst) (max-prime (cdr lst))))))\n  (sum-digits (max-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (digits n)\n    (cond ((= n 0) '())\n          (else (cons (remainder\
    \ n 10) (digits (quotient n 10))))))\n  (define (sum-digits lst)\n    (cond ((null?\
    \ lst) 0)\n          (else (+ (car lst) (sum-digits (cdr lst))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (digits\
    \ (largest-prime lst))))\n", "  (define (sum-digits n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (is-prime? n)\n    (cond\n      [(zero? n) #f]\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= (modulo n 2) 0) #f]\n      [else\n       (define (iter i)\n\
    \         (cond\n           [(> i (quotient n 2)) #t]\n           [(= (modulo\
    \ n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car\
    \ lst)) (car lst)]\n      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\n      [(= n 0)\
    \ 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (iter lst largest)\n    (cond\n      [(null? lst) (sum-digits largest)]\n  \
    \    [(and (is-prime? (car lst)) (> (car lst) largest)) (iter (cdr lst) (car lst))]\n\
    \      [else (iter (cdr lst) largest)]))\n  (iter lst 0))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder\
    \ n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (if (= n 0) acc\n          (iter (quotient\
    \ n 10) (+ acc (remainder n 10)))))\n    (iter n 0))\n  (define (iter lst acc)\n\
    \    (if (null? lst) acc\n        (if (is-prime? (car lst))\n            (iter\
    \ (cdr lst) (car lst))\n            (iter (cdr lst) acc))))\n  (sum-digits (iter\
    \ lst 0)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n\
    \      (cond ((= n 0) sum)\n            (else (iter (quotient n 10) (+ sum (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst max)\n    (cond ((null? lst)\
    \ (sum-digits max))\n          ((and (is-prime (car lst)) (> (car lst) max)) (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst\
    \ 0))\n", "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (is-prime? n)\n\
    \    (cond\n      [(zero? n) #f]\n      [(zero? (modulo n 2)) #f]\n      [else\n\
    \       (define (iter i)\n         (cond\n           [(> i (sqrt n)) #t]\n   \
    \        [(zero? (modulo n i)) #f]\n           [else (iter (+ i 1))]))\n     \
    \  (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime (cdr lst))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter i)\n      (cond ((= i 0) 0)\n            (else (+ (remainder\
    \ i 10) (iter (quotient i 10))))))\n    (iter n))\n  (define (largest-prime lst)\n\
    \    (define (iter lst)\n      (cond ((null? lst) 0)\n            ((is-prime (car\
    \ lst)) (car lst))\n            (else (iter (cdr lst)))))\n    (iter lst))\n \
    \ (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (iter lst largest)\n    (cond ((null? lst) (sum-digits\
    \ largest))\n          ((and (is-prime? (car lst)) (> (car lst) largest))\n  \
    \         (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n\
    \  (iter lst 0))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter\
    \ n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+\
    \ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n\
    \    (define (iter lst acc)\n      (cond ((null? lst) acc)\n            ((prime?\
    \ (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n\
    \    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else\n       (let loop ([i 3])\n         (cond\n       \
    \    [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (loop\
    \ (+ i 2))]))]))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n   \
    \   [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime (car lst))\n\
    \                (> (car lst) acc))\n           (iter (cdr lst) (car lst)))\n\
    \          (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", " \
    \ (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n       \
    \   ((= (remainder n 2) 0) #f)\n          (else\n           (let loop ((i 3))\n\
    \             (cond ((&gt; (* i i) n) #t)\n                   ((= (remainder n\
    \ i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (sum-digits\
    \ n)\n    (cond ((&lt; n 10) n)\n          (else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (sum-digits (apply max (filter prime? lst))))\n</code>\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n      \
    \  [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter?\
    \ n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (sum-digits n)\n \
    \   (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (/ n 2)))\n  (define\
    \ (iter lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (car\
    \ lst)]\n      [else (iter (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n \
    \ (sum-digits (iter lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\n    \
    \  [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (iter lst largest)\n    (cond\n      [(null? lst) (sum-digits largest)]\n\
    \      [(and (is-prime (car lst)) (> (car lst) largest)) (iter (cdr lst) (car\
    \ lst))]\n      [else (iter (cdr lst) largest)]))\n  (iter lst 0))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(=\
    \ (remainder n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n\
    \           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (iter lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car\
    \ lst)) (max (sum-digits (car lst)) (iter (cdr lst)))]\n      [else (iter (cdr\
    \ lst))]))\n  (iter lst))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n     \
    \   [else (iter (+ i 1))]))\n    (iter 2))\n  (define (largest-prime lst)\n  \
    \  (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime? (car lst)) (iter\
    \ (cdr lst) (sum-digits (car lst))))\n          (else (iter (cdr lst) acc))))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0)\
    \ 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst))\
    \ (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (/ n 2)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime?\
    \ (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n          (else (iter (cdr\
    \ lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n  \
    \  (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ (remainder n 10) acc))]))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond\n      [(null? lst) acc]\n      [(and (is-prime? (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst)\
    \ acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (sum-digits n)\n    (if (zero? n)\n        0\n       \
    \ (+ (modulo n 10) (sum-digits (quotient n 10)))))\n  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (quotient n 2)))\n  (define (sum-digits n)\n    (define (iter i)\n\
    \      (cond ((= i 0) 0)\n            (else (+ (modulo n 10) (iter (quotient n\
    \ 10))))))\n    (iter n))\n  (define (largest-prime lst)\n    (define (iter lst\
    \ max)\n      (cond ((null? lst) max)\n            ((is-prime? (car lst)) (iter\
    \ (cdr lst) (car lst)))\n            (else (iter (cdr lst) max))))\n    (iter\
    \ lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder\
    \ n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (if (= n 0)\n     \
    \     acc\n          (iter (quotient n 10) (+ acc (remainder n 10)))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (if (null? lst)\n        acc\n        (if\
    \ (is-prime? (car lst))\n            (iter (cdr lst) (car lst))\n            (iter\
    \ (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (iter lst largest)\n    (cond ((null? lst) (sum-digits\
    \ largest))\n          ((and (is-prime? (car lst)) (> (car lst) largest))\n  \
    \         (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n\
    \  (iter lst 0))\n", "  (define (isPrime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0)\
    \ 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((isPrime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (floor (/ n 2))))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/\
    \ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n   \
    \   [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (cond ((= n 2) #t)\n          ((= n 1) #f)\n     \
    \     ((= n 0) #f)\n          ((= n 3) #t)\n          ((= n 4) #f)\n         \
    \ ((= n 5) #t)\n          ((= n 6) #f)\n          ((= n 7) #t)\n          ((=\
    \ n 8) #f)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11)\
    \ #t)\n          ((= n 12) #f)\n          ((= n 13) #t)\n          ((= n 14) #f)\n\
    \          ((= n 15) #f)\n          ((= n 16) #f)\n          ((= n 17) #t)\n \
    \         ((= n 18) #f)\n          ((= n 19) #t)\n          ((= n 20) #f)\n  \
    \        ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #t)\n   \
    \       ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n    \
    \      ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #t)\n     \
    \     ((= n 30) #f)\n          ((= n 31) #t)\n          ((= n 32) #f)\n      \
    \    ((= n 33) #f)\n          ((= n 34) #f)\n          ((= n 35) #f)\n       \
    \   ((= n 36) #f)\n          ((= n 37) #t)\n          ((= n 38) #f)\n        \
    \  ((= n 39) #f)\n          ((= n 40) #f)\n          ((= n 41) #t)\n         \
    \ ((= n 42) #f)\n          ((= n 43) #t)\n          ((= n 44) #f)\n          ((=\
    \ n 45) #f)\n          ((= n 46) #f)\n          ((= n 47) #t)\n          ((= n\
    \ 48) #f)\n          ((= n 49) #f", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n   \
    \ (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient\
    \ n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((is-prime (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter\
    \ (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n     \
    \     ((even? n) #f)\n          (else\n           (let loop ((i 3))\n        \
    \     (cond ((= i n) #t)\n                   ((= (remainder n i) 0) #f)\n    \
    \               (else (loop (+ i 2))))))))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (helper i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n     \
    \   [else (helper (+ i 1))]))\n    (helper 2))\n  (define (sum-digits n)\n   \
    \ (define (helper n acc)\n      (cond\n        [(= n 0) acc]\n        [else (helper\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (helper n 0))\n  (define (helper\
    \ lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(is-prime? (first lst))\
    \ (helper (rest lst) (max acc (first lst)))]\n      [else (helper (rest lst) acc)]))\n\
    \  (sum-digits (helper lst 0)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n  \
    \  (define (iter n acc)\n      (cond\n        [(zero? n) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond\n        [(null? lst) acc]\n \
    \       [(is-prime? (car lst)) (iter (cdr lst) (car lst))]\n        [else (iter\
    \ (cdr lst) acc)]))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (prime-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+\
    \ (remainder n 10) (prime-digits (quotient n 10)))]))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n\
    \  (prime-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n   \
    \           (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (if\
    \ (= n 0) 0\n        (+ (remainder n 10) (sum-digits (quotient n 10)))))\n  (define\
    \ (iter lst)\n    (if (null? lst) 0\n        (if (is-prime? (car lst))\n     \
    \       (max (sum-digits (car lst)) (iter (cdr lst)))\n            (iter (cdr\
    \ lst)))))\n  (iter lst))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (iter lst largest)\n    (cond ((null? lst) (sum-digits largest))\n\
    \          ((is-prime (car lst)) (iter (cdr lst) (car lst)))\n          (else\
    \ (iter (cdr lst) largest))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (quotient n 2)))\n \
    \ (define (sum-digits n)\n    (define (iter n sum)\n      (cond\n        [(= n\
    \ 0) sum]\n        [else (iter (quotient n 10) (+ sum (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst largest)\n\
    \      (cond\n        [(null? lst) largest]\n        [(and (is-prime? (car lst))\
    \ (> (car lst) largest)) (iter (cdr lst) (car lst))]\n        [else (iter (cdr\
    \ lst) largest)]))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n   \
    \   (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (/ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n  \
    \        ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n\
    \ i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime (car lst)) (iter\
    \ (cdr lst) (sum-digits (car lst))))\n          (else (iter (cdr lst) acc))))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst))))\n          (else (largest-prime (cdr lst)))))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (sum-digits (largest-prime lst)))\n", "  (define (sum-digits n)\n\
    \    (if (= n 0)\n        0\n        (+ (modulo n 10) (sum-digits (quotient n\
    \ 10)))))\n  (define (is-prime? n)\n    (if (= n 1)\n        #f\n        (if (=\
    \ n 2)\n            #t\n            (if (even? n)\n                #f\n      \
    \          (let loop ((i 3))\n                  (if (= i n)\n                \
    \      #t\n                      (if (zero? (modulo n i))\n                  \
    \        #f\n                          (loop (+ i 2)))))))))\n  (define (largest-prime\
    \ lst)\n    (if (null? lst)\n        0\n        (if (is-prime? (car lst))\n  \
    \          (max (car lst) (largest-prime (cdr lst)))\n            (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (/ n 2)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n      (cond\n\
    \        [(null? lst) acc]\n        [(is-prime? (car lst)) (iter (cdr lst) (car\
    \ lst))]\n        [else (iter (cdr lst) acc)]))\n    (iter lst 0))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (define (sum-digits n)\n    (if (= n 0)\n  \
    \      0\n        (+ (remainder n 10) (sum-digits (quotient n 10)))))\n  (define\
    \ (max-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst))\
    \ (max (car lst) (max-prime (cdr lst))))\n          (else (max-prime (cdr lst)))))\n\
    \  (sum-digits (max-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (largest-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst)\
    \ (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n  (define\
    \ (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (sum-digits (largest-prime lst)))\n", " \
    \ (define (is-prime n)\n    (define (is-prime-iter n i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter n\
    \ (+ i 1)))))\n    (is-prime-iter n 2))\n  (define (sum-digits n)\n    (define\
    \ (sum-digits-iter n acc)\n      (cond ((= n 0) acc)\n            (else (sum-digits-iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (sum-digits-iter n 0))\n \
    \ (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) true]\n        [(= (modulo n i) 0) false]\n\
    \        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (floor (/\
    \ n 2))))\n  (define (prime-list lst)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(is-prime? (first lst)) (cons (first lst) (prime-list (rest lst)))]\n\
    \      [else (prime-list (rest lst))]))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n \
    \ (sum-digits (apply max (prime-list lst))))\n", "  (define (is-prime? n)\n  \
    \  (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n            ((and (is-prime? (car lst))\n\
    \                  (> (car lst) acc))\n             (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper? n i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper?\
    \ n (- i 1))]))\n    (is-prime-helper? n (floor (/ n 2))))\n  (define (sum-digits\
    \ n)\n    (define (sum-digits-helper n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (sum-digits-helper (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (sum-digits-helper n 0))\n  (define (largest-prime-value lst)\n    (cond\n\
    \      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime-value\
    \ (cdr lst)))]\n      [else (largest-prime-value (cdr lst))]))\n  (sum-digits\
    \ (largest-prime-value lst)))\n", "  (define (is-prime? n)\n    (define (helper\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (helper (- i 1)))))\n    (helper (- n 1)))\n  (define (prime-list lst)\n\
    \    (cond ((null? lst) '())\n          ((is-prime? (car lst)) (cons (car lst)\
    \ (prime-list (cdr lst))))\n          (else (prime-list (cdr lst)))))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (sum-digits (apply max (prime-list lst))))\n", "  (define\
    \ (is-prime? n)\n    (define (helper i)\n      (cond ((= i n) #t)\n          \
    \  ((= (remainder n i) 0) #f)\n            (else (helper (+ i 1)))))\n    (helper\
    \ 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (helper lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (helper\
    \ (cdr lst)))))\n  (sum-digits (helper lst)))\n", "  (define (is-prime? n)\n \
    \   (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n\
    \          ((and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst) (car\
    \ lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(=\
    \ n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n\
    \      [(is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst)))]\n     \
    \ [else (iter (cdr lst) acc)]))\n  (iter lst 0))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n    \
    \      (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n      (cond ((= n 0)\
    \ sum)\n            (else (iter (quotient n 10) (+ sum (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst max)\n    (cond ((null? lst) (sum-digits\
    \ max))\n          ((and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst)\
    \ (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n   \
    \ (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((=\
    \ n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond ((null? lst) acc)\n            ((is-prime? (car lst)) (iter (cdr\
    \ lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n div)\n      (cond ((= div 1) #t)\n            ((= (modulo n div) 0) #f)\n\
    \            (else (prime-helper n (- div 1)))))\n    (prime-helper n (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (floor (/ n 2))))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/\
    \ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n   \
    \   [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (max-prime lst)\n    (define (iter lst acc)\n    \
    \  (cond ((null? lst) acc)\n            ((is-prime (car lst)) (iter (cdr lst)\
    \ (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n\
    \  (sum-digits (max-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n\
    \    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n    \
    \      (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((and (is-prime? (car lst))\n                (> (car lst) acc))\n     \
    \      (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n\
    \          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((prime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((=\
    \ n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond ((null? lst) acc)\n            ((and (is-prime (car lst)) (> (car\
    \ lst) acc)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n\
    \    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n        \
    \  ((and (is-prime (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n\
    \          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", "  (define (prime?\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= (remainder\
    \ n 2) 0) #f)\n          (else\n           (define (iter i)\n             (cond\
    \ ((> i (sqrt n)) #t)\n                   ((= (remainder n i) 0) #f)\n       \
    \            (else (iter (+ i 1)))))\n           (iter 3))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((prime? (car lst)) (max (car lst)\
    \ (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a\
    \ b) 0))\n    (define (loop i)\n      (cond ((= i n) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (loop lst largest)\n    (cond ((null? lst) (sum-digits\
    \ largest))\n          ((and (is-prime? (car lst)) (> (car lst) largest))\n  \
    \         (loop (cdr lst) (car lst)))\n          (else (loop (cdr lst) largest))))\n\
    \  (loop lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (if\
    \ (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter i)\n    \
    \  (if (= i 0) 0\n          (+ (remainder i 10) (iter (quotient i 10)))))\n  \
    \  (iter n))\n  (define (iter lst largest)\n    (if (null? lst) (sum-digits largest)\n\
    \        (if (and (is-prime? (car lst))\n                 (> (car lst) largest))\n\
    \            (iter (cdr lst) (car lst))\n            (iter (cdr lst) largest))))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (is-prime-helper? n\
    \ d)\n      (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n        \
    \    (else (is-prime-helper? n (- d 1)))))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (define (find-largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else\
    \ (find-largest-prime (cdr lst)))))\n  (sum-digits (find-largest-prime lst)))\n\
    ```\n\n### Problem 2\n\n```racket\n#lang racket\n", "  (define (prime? n)\n  \
    \  (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else\
    \ (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define\
    \ (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(and (prime? (car\
    \ lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr\
    \ lst) acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n  \
    \  (define (is-prime-helper n div)\n      (cond\n        [(= div 1) #t]\n    \
    \    [(= (modulo n div) 0) #f]\n        [else (is-prime-helper n (- div 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (sum-digits n)\n    (cond\n     \
    \ [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define\
    \ (find-largest-prime lst)\n    (cond\n      [(empty? lst) 0]\n      [(is-prime?\
    \ (first lst)) (max (first lst) (find-largest-prime (rest lst)))]\n      [else\
    \ (find-largest-prime (rest lst))]))\n  (sum-digits (find-largest-prime lst)))\n",
  "  (define (prime? n)\n    (define (divisible? a b)\n      (= (modulo a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (find-largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((prime? (car lst)) (car lst))\n          (else (find-largest-prime\
    \ (cdr lst)))))\n  (sum-digits (find-largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (largest-prime lst)\n    (define (iter lst acc)\n      (cond ((null?\
    \ lst) acc)\n            ((is-prime (car lst)) (iter (cdr lst) (car lst)))\n \
    \           (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n</code>\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n\
    \          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter\
    \ (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper\
    \ n (- i 1)))))\n    (is-prime-helper n (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n    \
    \      (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (quotient n 2)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n        \
    \  (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n</code>\n", "  (define (is-prime? n)\n \
    \   (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (find-largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter\
    \ (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (find-largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(= i n) #t]\n           [(= (modulo n i) 0) #f]\n    \
    \       [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (sum-digits n)\n\
    \    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (iter lst max)\n    (cond\n      [(null? lst) (sum-digits\
    \ max)]\n      [(and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst)\
    \ (car lst))]\n      [else (iter (cdr lst) max)]))\n  (iter lst 0))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n      (cond\
    \ ((null? lst) acc)\n            ((and (is-prime (car lst)) (> (car lst) acc))\
    \ (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n   \
    \ (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (iter lst max)\n    (cond ((null? lst) (sum-digits\
    \ max))\n          ((and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst)\
    \ (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", " \
    \ (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (iter lst max)\n    (cond ((null? lst) (sum-digits\
    \ max))\n          ((and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst)\
    \ (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", " \
    \ (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((and (is-prime (car lst))\n                (> (car\
    \ lst) (largest-prime (cdr lst))))\n           (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((is-prime (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter\
    \ (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) true]\n\
    \        [(= (modulo n i) 0) false]\n        [else (iter (- i 1))]))\n    (iter\
    \ (- n 1)))\n  (define (prime-list lst)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(is-prime? (first lst)) (cons (first lst) (prime-list (rest lst)))]\n\
    \      [else (prime-list (rest lst))]))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n \
    \ (sum-digits (apply max (prime-list lst))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
