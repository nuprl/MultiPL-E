name: HumanEval_144_simplify
language: rkt
prompt: "#lang racket\n\n;; Your task is to implement a function that will simplify\
  \ the expression\n;; x * n. The function returns True if x * n evaluates to a whole\
  \ number and False\n;; otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n;; <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n;; You can assume that x, and n are\
  \ valid fractions, and do not have zero as denominator.\n;; >>> (simplify \"1/5\"\
  \ \"5/1\")\n;; #t\n;; >>> (simplify \"1/6\" \"2/1\")\n;; #f\n;; >>> (simplify \"\
  7/10\" \"10/2\")\n;; #f\n(define (simplify x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate simplify))\n\
  \    (check-equal? (candidate \"1/5\" \"5/1\") #t)\n    (check-equal? (candidate\
  \ \"1/6\" \"2/1\") #f)\n    (check-equal? (candidate \"5/1\" \"3/1\") #t)\n    (check-equal?\
  \ (candidate \"7/10\" \"10/2\") #f)\n    (check-equal? (candidate \"2/10\" \"50/10\"\
  ) #t)\n    (check-equal? (candidate \"7/2\" \"4/2\") #t)\n    (check-equal? (candidate\
  \ \"11/6\" \"6/1\") #t)\n    (check-equal? (candidate \"2/3\" \"5/2\") #f)\n   \
  \ (check-equal? (candidate \"5/2\" \"3/5\") #f)\n    (check-equal? (candidate \"\
  2/4\" \"8/4\") #t)\n    (check-equal? (candidate \"2/4\" \"4/2\") #t)\n    (check-equal?\
  \ (candidate \"1/5\" \"5/1\") #t)\n    (check-equal? (candidate \"1/5\" \"1/5\"\
  ) #f)\n))\n\n(test-humaneval)"
completions: ["  (let* ([x-numerator (string->number (regexp-match #rx\"^[0-9]+\"\
    \ x))]\n         [x-denominator (string->number (regexp-match #rx\"/[0-9]+$\"\
    \ x))]\n         [n-numerator (string->number (regexp-match #rx\"^[0-9]+\" n))]\n\
    \         [n-denominator (string->number (regexp-match #rx\"/[0-9]+$\" n))]\n\
    \         [result-numerator (* x-numerator n-numerator)]\n         [result-denominator\
    \ (* x-denominator n-denominator)])\n    (if (zero? (modulo result-numerator result-denominator))\n\
    \        #t\n        #f)))\n", "  (let ([x-numerator (string->number (car (string-split\
    \ (string-trim x) \"/\")))])\n    (let ([x-denominator (string->number (cadr (string-split\
    \ (string-trim x) \"/\")))])\n      (let ([n-numerator (string->number (car (string-split\
    \ (string-trim n) \"/\")))])\n        (let ([n-denominator (string->number (cadr\
    \ (string-split (string-trim n) \"/\")))])\n          (let ([x-numerator-n-denominator\
    \ (* x-numerator n-denominator)])\n            (let ([x-denominator-n-numerator\
    \ (* x-denominator n-numerator)])\n              (if (= x-numerator-n-denominator\
    \ x-denominator-n-numerator)\n                  #t\n                  #f)))))))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (simplify-fraction-helper x gcd)\n      (if (= gcd 1)\n    \
    \      x\n          (simplify-fraction-helper (list (/ (car x) gcd) (/ (cadr x)\
    \ gcd)) (gcd (car x) (cadr x)))))\n    (simplify-fraction-helper x (gcd (car x)\
    \ (cadr x))))\n  (define (is-whole-number? x)\n    (= (remainder (car x) (cadr\
    \ x)) 0))\n  (is-whole-number? (simplify-fraction (list (* (car (string->number/list\
    \ x)) (cadr (string->number/list n))) (lcm (cadr (string->number/list x)) (car\
    \ (string->number/list n)))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n  \
    \      a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a\
    \ b) (gcd a b)))\n  (define (simplify-fraction str)\n    (define (split str)\n\
    \      (string-split str \"/\"))\n    (define (numerator str)\n      (string->number\
    \ (car (split str))))\n    (define (denominator str)\n      (string->number (cadr\
    \ (split str))))\n    (define (gcd-fraction str)\n      (gcd (numerator str) (denominator\
    \ str)))\n    (define (lcm-fraction str)\n      (lcm (numerator str) (denominator\
    \ str)))\n    (define (simplify-fraction-helper str)\n      (define (numerator\
    \ str)\n        (/ (numerator str) (gcd-fraction str)))\n      (define (denominator\
    \ str)\n        (/ (denominator str) (gcd-fraction str)))\n      (string-append\
    \ (number->string (numerator str)) \"/\" (number->string (denominator str))))\n\
    \    (simplify-fraction-helper str))\n  (define (multiply-fraction x n)\n    (define\
    \ (numerator x)\n      (string->number (car (split x))))\n    (define (denominator\
    \ x)\n      (string->number (cadr (split x))))\n    (define (numerator n)\n  \
    \    (string->number (car (split n))))\n    (define (denominator n)\n      (string->number\
    \ (cadr (split n))))\n    (define (multiply-fraction-helper x n)\n      (string-append\
    \ (number->string (* (numerator x) (numerator n))) \"/\" (number->string (* (denominator\
    \ x) (denominator n)))))\n    (multiply-fraction-helper x n))\n  (define (is-whole-number?\
    \ str)\n    (= (numerator str) (denominator str)))\n ", "  (let* ([x-numerator\
    \ (string->number (car (string-split (string-trim x) \"/\")))])\n    (let* ([x-denominator\
    \ (string->number (cadr (string-split (string-trim x) \"/\")))])\n      (let*\
    \ ([n-numerator (string->number (car (string-split (string-trim n) \"/\")))])\n\
    \        (let* ([n-denominator (string->number (cadr (string-split (string-trim\
    \ n) \"/\")))])\n          (let* ([x-numerator (* x-numerator n-numerator)])\n\
    \            (let* ([x-denominator (* x-denominator n-denominator)])\n       \
    \       (let* ([gcd (gcd x-numerator x-denominator)])\n                (let* ([x-numerator\
    \ (/ x-numerator gcd)])\n                  (let* ([x-denominator (/ x-denominator\
    \ gcd)])\n                    (if (= x-denominator 1)\n                      \
    \  #t\n                        #f)))))))))))\n", "  (let* ([x-num (string->number\
    \ (car (string-split (string-trim x) \"/\")))])\n    (let* ([x-den (string->number\
    \ (cadr (string-split (string-trim x) \"/\")))])\n      (let* ([n-num (string->number\
    \ (car (string-split (string-trim n) \"/\")))])\n        (let* ([n-den (string->number\
    \ (cadr (string-split (string-trim n) \"/\")))])\n          (let* ([x-num-n (*\
    \ x-num n-num)])\n            (let* ([x-den-n (* x-den n-den)])\n            \
    \  (let* ([x-n-num (quotient x-num-n (gcd x-num-n x-den-n))])\n              \
    \  (let* ([x-n-den (quotient x-den-n (gcd x-num-n x-den-n))])\n              \
    \    (let* ([x-n-num-str (number->string x-n-num)])\n                    (let*\
    \ ([x-n-den-str (number->string x-n-den)])\n                      (let* ([x-n\
    \ (string-append x-n-num-str \"/\" x-n-den-str)])\n                        (let*\
    \ ([x-n-num-n (string->number (car (string-split (string-trim x-n) \"/\")))])\n\
    \                          (let* ([x-n-den-n (string->number (cadr (string-split\
    \ (string-trim x-n) \"/\")))])\n                            (if (= x-n-num-n x-n-den-n)\n\
    \                                #t\n                                #f))))))))))))))))\n",
  "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\
    \  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction\
    \ x)\n    (define (get-numerator x)\n      (string->number (car (string-split\
    \ x \"/\"))))\n    (define (get-denominator x)\n      (string->number (cadr (string-split\
    \ x \"/\"))))\n    (define (simplify-fraction-helper x)\n      (define (gcd a\
    \ b)\n        (if (= b 0)\n            a\n            (gcd b (remainder a b))))\n\
    \      (define (lcm a b)\n        (/ (* a b) (gcd a b)))\n      (define (simplify-fraction-helper\
    \ x)\n        (define (get-numerator x)\n          (string->number (car (string-split\
    \ x \"/\"))))\n        (define (get-denominator x)\n          (string->number\
    \ (cadr (string-split x \"/\"))))\n        (define (simplify-fraction-helper x)\n\
    \          (define (gcd a b)\n            (if (= b 0)\n                a\n   \
    \             (gcd b (remainder a b))))\n          (define (lcm a b)\n       \
    \     (/ (* a b) (gcd a b)))\n          (define (simplify-fraction-helper x)\n\
    \            (define (get-numerator x)\n              (string->number (car (string-split\
    \ x \"/\"))))\n            (define (get-denominator x)\n              (string->number\
    \ (cadr (string-split x \"/\"))))\n            (define (simplify-fraction-helper\
    \ x)\n              (define (gcd a b)\n                (if (= b 0)\n         \
    \           a\n                    (gcd b (remainder a b))))\n              (define\
    \ (lcm a b)\n                (/ (* a b) (gcd a b)))\n              (define (simplify-fraction-helper\
    \ x)\n                (define", "  (define (gcd a b)\n    (if (= b 0)\n      \
    \  a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n\
    \        0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction x)\n\
    \    (define (simplify-fraction-helper x)\n      (define (get-numerator x)\n \
    \       (string->number (substring x 0 (string-index x #\\/))))\n      (define\
    \ (get-denominator x)\n        (string->number (substring x (+ 1 (string-index\
    \ x #\\/)))))\n      (define (get-gcd x)\n        (gcd (get-numerator x) (get-denominator\
    \ x)))\n      (define (get-lcm x)\n        (lcm (get-numerator x) (get-denominator\
    \ x)))\n      (define (get-simplified-numerator x)\n        (/ (get-numerator\
    \ x) (get-gcd x)))\n      (define (get-simplified-denominator x)\n        (/ (get-denominator\
    \ x) (get-gcd x)))\n      (define (get-simplified-fraction x)\n        (string-append\
    \ (number->string (get-simplified-numerator x))\n                       #\\/\n\
    \                       (number->string (get-simplified-denominator x))))\n  \
    \    (get-simplified-fraction x))\n    (simplify-fraction-helper x))\n  (define\
    \ (get-numerator x)\n    (string->number (substring x 0 (string-index x #\\/))))\n\
    \  (define (get-denominator x)\n    (string->number (substring x (+ 1 (string-index\
    \ x #\\/)))))\n  (define (get-gcd x)\n    (gcd (get-numerator x) (get-denominator\
    \ x)))\n  (define (get-lcm x)\n    (lcm (get-numerator x) (get-denominator x)))\n\
    \  (define (", "  (let ([x-numerator (string->number (car (string-split (string-trim\
    \ x) \"/\")))])\n    (let ([x-denominator (string->number (car (string-split (cadr\
    \ (string-split (string-trim x) \"/\")) \"/\")))])\n      (let ([n-numerator (string->number\
    \ (car (string-split (string-trim n) \"/\")))])\n        (let ([n-denominator\
    \ (string->number (car (string-split (cadr (string-split (string-trim n) \"/\"\
    )) \"/\")))])\n          (let ([x-numerator-n (round (* x-numerator n-numerator))])\n\
    \            (let ([x-denominator-n (round (* x-denominator n-denominator))])\n\
    \              (let ([gcd (gcd x-numerator-n x-denominator-n)])\n            \
    \    (if (= (round (/ x-numerator-n gcd)) (/ x-numerator-n gcd))\n           \
    \         #t\n                    #f))))))))))\n", "  (let ([x-numerator (string->number\
    \ (car (string-split (string-trim x) \"/\")))])\n    (let ([x-denominator (string->number\
    \ (cadr (string-split (string-trim x) \"/\")))])\n      (let ([n-numerator (string->number\
    \ (car (string-split (string-trim n) \"/\")))])\n        (let ([n-denominator\
    \ (string->number (cadr (string-split (string-trim n) \"/\")))])\n          (let\
    \ ([x-numerator-n (modulo x-numerator n-denominator)])\n            (let ([x-denominator-n\
    \ (modulo x-denominator n-numerator)])\n              (and (zero? x-numerator-n)\
    \ (zero? x-denominator-n)))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n\
    \        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (*\
    \ a b) (gcd a b)))\n  (define (simplify-fraction x)\n    (define (simplify-fraction-helper\
    \ x)\n      (define (simplify-fraction-helper-helper x)\n        (define (simplify-fraction-helper-helper-helper\
    \ x)\n          (define (simplify-fraction-helper-helper-helper-helper x)\n  \
    \          (define (simplify-fraction-helper-helper-helper-helper-helper x)\n\
    \              (define (simplify-fraction-helper-helper-helper-helper-helper-helper\
    \ x)\n                (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                  (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                    (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                      (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                        (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                          (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ x)\n                            (define (simplify-fraction-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper",
  "  (let* ([x-numerator (string->number (car (string-split (string-trim x) \"/\"\
    )))])\n    (let* ([x-denominator (string->number (cadr (string-split (string-trim\
    \ x) \"/\")))])\n      (let* ([n-numerator (string->number (car (string-split\
    \ (string-trim n) \"/\")))])\n        (let* ([n-denominator (string->number (cadr\
    \ (string-split (string-trim n) \"/\")))])\n          (let* ([result-numerator\
    \ (* x-numerator n-numerator)])\n            (let* ([result-denominator (* x-denominator\
    \ n-denominator)])\n              (let* ([result (/ result-numerator result-denominator)])\n\
    \                (if (integer? result)\n                    #t\n             \
    \       #f))))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n  \
    \      (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n\
    \  (define (simplify-fraction str)\n    (define (simplify-fraction-helper str)\n\
    \      (define (gcd a b)\n        (if (= b 0)\n            a\n            (gcd\
    \ b (remainder a b))))\n      (define (lcm a b)\n        (/ (* a b) (gcd a b)))\n\
    \      (define (split-fraction str)\n        (define (split-fraction-helper str)\n\
    \          (if (empty? str)\n              (list 0 0)\n              (if (char=?\
    \ (first str) #\\/)\n                  (list (string->number (substring str 0\
    \ (sub1 (string-length str))))\n                        (string->number (substring\
    \ str (add1 (string-length str)) (string-length str))))\n                  (split-fraction-helper\
    \ (rest str)))))\n        (split-fraction-helper str))\n      (define (simplify-fraction-helper2\
    \ str)\n        (define (gcd a b)\n          (if (= b 0)\n              a\n  \
    \            (gcd b (remainder a b))))\n        (define (lcm a b)\n          (/\
    \ (* a b) (gcd a b)))\n        (define (split-fraction str)\n          (define\
    \ (split-fraction-helper str)\n            (if (empty? str)\n                (list\
    \ 0 0)\n                (if (char=? (first str) #\\/)\n                    (list\
    \ (string->number (substring str 0 (sub1 (string-length str))))\n            \
    \              (string->number (substring str (add1 (string-length str)) (string-length\
    \ str))))\n                    (split-fraction-helper (rest str)))))\n       \
    \   (split-fraction-helper str))\n        (define (simplify-fraction-helper2 str)\n\
    \          (define (gcd a b)\n            (if (= b 0", "  (let ([x-numerator (string->number\
    \ (car (string-split (string-trim x) \"/\")))])\n    (let ([x-denominator (string->number\
    \ (cadr (string-split (string-trim x) \"/\")))])\n      (let ([n-numerator (string->number\
    \ (car (string-split (string-trim n) \"/\")))])\n        (let ([n-denominator\
    \ (string->number (cadr (string-split (string-trim n) \"/\")))])\n          (let\
    \ ([x-numerator-n (modulo x-numerator n-denominator)])\n            (let ([x-denominator-n\
    \ (modulo x-denominator n-numerator)])\n              (if (and (zero? x-numerator-n)\
    \ (zero? x-denominator-n))\n                  #t\n                  #f)))))))))\n",
  "  (let* ([x-numerator (string->number (car (string-split (string-trim x) \"/\"\
    )))])\n    (let* ([x-denominator (string->number (cadr (string-split (string-trim\
    \ x) \"/\")))])\n      (let* ([n-numerator (string->number (car (string-split\
    \ (string-trim n) \"/\")))])\n        (let* ([n-denominator (string->number (cadr\
    \ (string-split (string-trim n) \"/\")))])\n          (let* ([result-numerator\
    \ (* x-numerator n-numerator)])\n            (let* ([result-denominator (* x-denominator\
    \ n-denominator)])\n              (let* ([result (/ result-numerator result-denominator)])\n\
    \                (if (integer? result)\n                    #t\n             \
    \       #f)))))))))\n", "  (define (gcd a b)\n    (if (= b 0)\n        a\n   \
    \     (gcd b (remainder a b))))\n  (define (lcm a b)\n    (if (= a 0)\n      \
    \  0\n        (/ (* a b) (gcd a b))))\n  (define (simplify-fraction x)\n    (define\
    \ (split-fraction x)\n      (define (split-fraction-helper x acc)\n        (if\
    \ (string-contains x #\\/)\n            (split-fraction-helper (substring x (+\
    \ 1 (string-index x #\\/))) (cons (substring x 0 (string-index x #\\/)) acc))\n\
    \            (cons (string->number (string-reverse (car acc))) (string->number\
    \ (string-reverse (cdr acc))))))\n      (split-fraction-helper x '()))\n    (define\
    \ (simplify-fraction-helper x)\n      (define (gcd a b)\n        (if (= b 0)\n\
    \            a\n            (gcd b (remainder a b))))\n      (define (lcm a b)\n\
    \        (if (= a 0)\n            0\n            (/ (* a b) (gcd a b))))\n   \
    \   (define (simplify-fraction-helper-helper x)\n        (if (= (remainder (car\
    \ x) (cdr x)) 0)\n            (cons (/ (car x) (cdr x)) 1)\n            (cons\
    \ (car x) (cdr x))))\n      (simplify-fraction-helper-helper (simplify-fraction-helper-helper\
    \ x)))\n    (simplify-fraction-helper (split-fraction x)))\n  (define (multiply-fractions\
    \ x n)\n    (define (multiply-fractions-helper x n)\n      (cons (* (car x) (car\
    \ n)) (* (cdr x) (cdr n))))\n    (multiply-fractions-helper (simplify-fraction\
    \ x) (simplify-fraction n)))\n  (define (simplify-fraction-helper x)\n    (define\
    \ (", "  (let* ([x-numerator (string->number (car (string-split (string-trim x)\
    \ \"/\")))])\n    (let* ([x-denominator (string->number (cadr (string-split (string-trim\
    \ x) \"/\")))])\n      (let* ([n-numerator (string->number (car (string-split\
    \ (string-trim n) \"/\")))])\n        (let* ([n-denominator (string->number (cadr\
    \ (string-split (string-trim n) \"/\")))])\n          (let* ([x-numerator-n (number->string\
    \ (* x-numerator n-numerator)))])\n            (let* ([x-denominator-n (number->string\
    \ (* x-denominator n-denominator)))])\n              (let* ([x-numerator-n-f (string->number\
    \ (car (string-split (string-trim x-numerator-n) \"/\")))])\n                (let*\
    \ ([x-denominator-n-f (string->number (cadr (string-split (string-trim x-denominator-n)\
    \ \"/\")))])\n                  (if (and (integer? x-numerator-n-f) (integer?\
    \ x-denominator-n-f))\n                      #t\n                      #f))))))))))\n",
  "  (let* ([x-numerator (string->number (car (string-split (string-trim x) \"/\"\
    )))])\n    (let* ([x-denominator (string->number (cadr (string-split (string-trim\
    \ x) \"/\")))])\n      (let* ([n-numerator (string->number (car (string-split\
    \ (string-trim n) \"/\")))])\n        (let* ([n-denominator (string->number (cadr\
    \ (string-split (string-trim n) \"/\")))])\n          (let* ([x-numerator (* x-numerator\
    \ n-numerator)])\n            (let* ([x-denominator (* x-denominator n-denominator)])\n\
    \              (let* ([x-numerator (gcd x-numerator x-denominator)])\n       \
    \         (let* ([x-denominator (gcd x-numerator x-denominator)])\n          \
    \        (if (= x-numerator x-denominator)\n                      #t\n       \
    \               #f))))))))))\n", "  (let* ([x-num (string->number (car (string-split\
    \ (string-trim x) \"/\")))])\n    (let* ([x-den (string->number (cadr (string-split\
    \ (string-trim x) \"/\")))])\n      (let* ([n-num (string->number (car (string-split\
    \ (string-trim n) \"/\")))])\n        (let* ([n-den (string->number (cadr (string-split\
    \ (string-trim n) \"/\")))])\n          (let* ([x-num-n (* x-num n-num)])\n  \
    \          (let* ([x-den-n (* x-den n-den)])\n              (let* ([x-num-n-den-n\
    \ (/ x-num-n x-den-n)])\n                (let* ([x-num-n-den-n-int (inexact->exact\
    \ x-num-n-den-n)])\n                  (if (= x-num-n-den-n-int x-num-n-den-n)\n\
    \                      #t\n                      #f))))))))))\n", "  (define (gcd\
    \ a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define\
    \ (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (simplify-fraction str)\n \
    \   (define (split-fraction str)\n      (define (split-fraction-helper str acc)\n\
    \        (if (empty? str)\n            (reverse acc)\n            (split-fraction-helper\
    \ (rest str) (cons (first str) acc))))\n      (split-fraction-helper str '()))\n\
    \    (define (numerator str)\n      (string->number (list-ref (split-fraction\
    \ str) 0)))\n    (define (denominator str)\n      (string->number (list-ref (split-fraction\
    \ str) 1)))\n    (define (simplify-fraction-helper str)\n      (define (simplify-fraction-helper-helper\
    \ str acc)\n        (if (= (gcd (numerator str) (denominator str)) 1)\n      \
    \      (reverse acc)\n            (simplify-fraction-helper-helper (string-append\
    \ (number->string (/ (numerator str) (gcd (numerator str) (denominator str))))\
    \ \"/\" (number->string (/ (denominator str) (gcd (numerator str) (denominator\
    \ str))))) (cons (string-append (number->string (/ (numerator str) (gcd (numerator\
    \ str) (denominator str)))) \"/\" (number->string (/ (denominator str) (gcd (numerator\
    \ str) (denominator str))))) acc))))\n      (simplify-fraction-helper-helper str\
    \ '()))\n    (list-ref (simplify-fraction-helper str) 0))\n  (if (= (numerator\
    \ (simplify-fraction x)) (* (numerator (simplify-fraction x)) (numerator (simplify-fraction\
    \ n))))\n      #t\n      #f))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
