name: HumanEval_24_largest_divisor
language: rkt
prompt: "#lang racket\n\n;; For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (largest_divisor-iter current-divisor n)\n    (if (= (remainder\
    \ n current-divisor) 0)\n        (largest_divisor-iter (add1 current-divisor)\
    \ n)\n        (sub1 current-divisor)))\n  (largest_divisor-iter 2 n))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor_helper\
    \ n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n         \
    \   (largest_divisor_helper n (+ i 1))\n            (largest_divisor_helper n\
    \ (+ i 1)))))\n  (largest_divisor_helper n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        (largest_divisor_iter\
    \ (- test-divisor 1))\n        test-divisor))\n  (largest_divisor_iter (- n 1)))\n",
  "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n",
  "  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n   \
    \     (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n",
  "  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (/ n 2)))\n",
  "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor\
    \ n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define (largest_divisor-iter i)\n\
    \    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter (- i\
    \ 1))))\n  (largest_divisor-iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define (divisor-iter test-divisor)\n\
    \    (if (= (remainder n test-divisor) 0)\n        test-divisor\n        (divisor-iter\
    \ (- test-divisor 1))))\n  (divisor-iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-helper\
    \ n i)\n    (if (= i n)\n        (- n 1)\n        (if (= (modulo n i) 0)\n   \
    \         i\n            (largest_divisor-helper n (+ i 1)))))\n  (largest_divisor-helper\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter i)\n    (if (= (remainder n\
    \ i) 0)\n        i\n        (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter\
    \ (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i)\
    \ 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n     \
    \   (iter (- i 1))))\n  (iter (/ n 2)))\n", "  (define (largest_divisor-iter n\
    \ i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n \
    \       (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define (find-divisor\
    \ n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n          ((divides?\
    \ test-divisor n) (find-divisor n (+ test-divisor 1)))\n          (else (find-divisor\
    \ n (+ test-divisor 1)))))\n  (find-divisor n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest_divisor-iter\
    \ n (- divisor 1))\n        divisor))\n  (largest_divisor-iter n (- n 1)))\n",
  "  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define\
    \ (largest_divisor-iter i)\n    (if (= (remainder n i) 0)\n        i\n       \
    \ (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define\
    \ (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter\
    \ n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (zero? (modulo n i))\n        i\n        (largest_divisor-iter\
    \ n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (/ n 2)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (/ n 2)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_helper\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest_divisor_helper\
    \ n (- divisor 1))\n        divisor))\n  (largest_divisor_helper n (- n 1)))\n",
  "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define\
    \ (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter\
    \ n (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n\
    \ (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n\
    \ (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (quotient n 2)))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n\
    \ (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ i n)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter (-\
    \ i 1) n)))\n  (largest_divisor-iter (- n 1) n))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter (+ i 1))\n   \
    \     (- i 1)))\n  (largest_divisor_iter 2))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n\
    \ (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (divisor-iter\
    \ test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        test-divisor\n\
    \        (divisor-iter (- test-divisor 1))))\n  (divisor-iter (/ n 2)))\n", " \
    \ (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n  \
    \      (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (/ n 2)))\n",
  "  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n   \
    \     (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n",
  "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define\
    \ (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define\
    \ (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter\
    \ n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest_divisor-iter\
    \ n (+ divisor 1))\n        (- divisor 1)))\n  (largest_divisor-iter n 2))\n",
  "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n",
  "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor\
    \ n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define (largest_divisor_iter n\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n (-\
    \ i 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ d n)\n    (if (= (remainder n d) 0)\n        d\n        (largest_divisor-iter\
    \ (- d 1) n)))\n  (largest_divisor-iter (- n 1) n))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter (+ i 1))\n   \
    \     (- i 1)))\n  (largest_divisor_iter 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define (divisor n i)\n\
    \    (if (= 0 (modulo n i))\n        i\n        (divisor n (+ i 1))))\n  (divisor\
    \ n 2))\n", "  (define (largest_divisor-iter i)\n    (if (= (remainder n i) 0)\n\
    \        i\n        (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter\
    \ (- n 1)))\n", "  (define (largest_divisor_iter m)\n    (if (= (remainder n m)\
    \ 0)\n        m\n        (largest_divisor_iter (- m 1))))\n  (largest_divisor_iter\
    \ (- n 1)))\n", "  (define (largest_divisor_iter n i)\n    (if (= (modulo n i)\
    \ 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ n 2))\n", "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n\
    \        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (ld n i)\n    (if\
    \ (= n i)\n        1\n        (if (= (remainder n i) 0)\n            i\n     \
    \       (ld n (+ i 1)))))\n  (ld n 2))\n", "  (define (largest_divisor-iter n\
    \ i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n \
    \       (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (largest_divisor-iter n (+ i 1)))))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (divisor i)\n    (if (= (remainder n i) 0)\n        i\n\
    \        (divisor (+ i 1))))\n  (divisor 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (iter i)\n  \
    \  (if (= (modulo n i) 0)\n        (if (= i 1)\n            1\n            (iter\
    \ (- i 1)))\n        (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n\
    \ (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (define (divisor n d)\n\
    \    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter n d)\n    (if (= (remainder\
    \ n d) 0)\n        d\n        (largest_divisor-iter n (- d 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter i)\n    (if (= (modulo n i)\
    \ 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter\
    \ (- n 1)))\n", "  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter\
    \ (- n 1)))\n", "  (define (largest_divisor_iter current_divisor)\n    (if (=\
    \ (remainder n current_divisor) 0)\n        (largest_divisor_iter (+ current_divisor\
    \ 1))\n        (- current_divisor 1)))\n  (largest_divisor_iter 2))\n", "  (define\
    \ (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define\
    \ (largest_divisor-iter i)\n    (if (= (remainder n i) 0)\n        i\n       \
    \ (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define\
    \ (largest_divisor-iter test-divisor)\n    (if (= (remainder n test-divisor) 0)\n\
    \        (largest_divisor-iter (- test-divisor 1))\n        test-divisor))\n \
    \ (largest_divisor-iter (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n      \
    \  (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ n d)\n    (if (= (remainder n d) 0)\n        d\n        (largest_divisor_iter\
    \ n (- d 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (largest_divisor_iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (or (= i n) (= (modulo\
    \ n i) 0))\n        i\n        (largest_divisor-iter n (+ i 1))))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter i)\n    (if (= (modulo n i)\
    \ 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter\
    \ (- n 1)))\n", "  (define (divisor-iter test-divisor)\n    (if (= (remainder\
    \ n test-divisor) 0)\n        test-divisor\n        (divisor-iter (- test-divisor\
    \ 1))))\n  (divisor-iter (/ n 2)))\n", "  (define (find-divisor n test-divisor)\n\
    \    (cond ((> (square test-divisor) n) n)\n          ((divides? test-divisor\
    \ n) (find-divisor n (+ test-divisor 1)))\n          (else (find-divisor n (+\
    \ test-divisor 1)))))\n  (find-divisor n 2))\n", "  (define (largest_divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest_divisor-iter\
    \ n (+ divisor 1))\n        (- divisor 1)))\n  (largest_divisor-iter n 2))\n",
  "  (define (largest_divisor_iter n i)\n    (if (= n i)\n        n\n        (if (=\
    \ (modulo n i) 0)\n            (largest_divisor_iter n (+ i 1))\n            (largest_divisor_iter\
    \ n (+ i 1)))))\n  (largest_divisor_iter n 1))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (find-divisor n test-divisor)\n\
    \    (cond ((> (square test-divisor) n) n)\n          ((divides? test-divisor\
    \ n) (find-divisor n (+ test-divisor 1)))\n          (else (find-divisor n (+\
    \ test-divisor 1)))))\n  (find-divisor n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (/ n 2)))\n", "  (define (divisor n d)\n  \
    \  (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter guess)\n    (if (zero? (modulo\
    \ n guess))\n        guess\n        (largest_divisor_iter (- guess 1))))\n  (largest_divisor_iter\
    \ (/ n 2)))\n", "  (define (find-divisor n test-divisor)\n    (cond ((> (square\
    \ test-divisor) n) n)\n          ((divides? test-divisor n)\n           (find-divisor\
    \ n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n\
    \  (find-divisor n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (for/fold ([largest 0]) ([i (in-range 1 n)])\n    (if (and (zero?\
    \ (modulo n i))\n             (&gt; i largest))\n        i\n        largest)))\n",
  "  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n   \
    \     (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n",
  "  (define (largest_divisor_helper n divisor)\n    (if (= (modulo n divisor) 0)\n\
    \        (largest_divisor_helper n (+ divisor 1))\n        (- divisor 1)))\n \
    \ (largest_divisor_helper n 2))\n", "  (define (largest_divisor_iter i)\n    (if\
    \ (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter\
    \ (- n 1)))\n", "  (largest_divisor_iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (&lt; i n)\n        (if (zero? (modulo n i))\n            (largest_divisor_iter\
    \ (+ i 1))\n            (largest_divisor_iter (+ i 1)))\n        (- n 1)))\n \
    \ (largest_divisor_iter 2))\n", "  (define (largest_divisor_iter i)\n    (if (=\
    \ (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter\
    \ (- n 1)))\n", "  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor_iter (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor_iter current_divisor n)\n    (if (= (modulo\
    \ n current_divisor) 0)\n        current_divisor\n        (largest_divisor_iter\
    \ (+ current_divisor 1) n)))\n  (largest_divisor_iter 2 n))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter n\
    \ (- i 1))))\n  (largest_divisor_iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (helper n i)\n\
    \    (if (= i n)\n        (helper n (- i 1))\n        (if (= (modulo n i) 0)\n\
    \            i\n            (helper n (- i 1)))))\n  (helper n (- n 1)))\n", " \
    \ (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define\
    \ (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter\
    \ (- i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define (divisor n test-divisor)\n\
    \    (if (= (remainder n test-divisor) 0)\n        test-divisor\n        (divisor\
    \ n (- test-divisor 1))))\n  (divisor n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (&lt; i n)\n        (if (zero? (modulo n i))\n            (largest_divisor_iter\
    \ (+ i 1))\n            (largest_divisor_iter (- i 1)))\n        i))\n  (largest_divisor_iter\
    \ 1))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter n i)\n    (if (= n i)\n   \
    \     1\n        (if (= (modulo n i) 0)\n            i\n            (largest_divisor_iter\
    \ n (+ i 1)))))\n  (largest_divisor_iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (divisor n i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (divisor n (+ i 1))))\n  (divisor\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ n 2))\n", "  (define (find-divisor n test-divisor)\n    (cond ((> (square test-divisor)\
    \ n) n)\n          ((divides? test-divisor n)\n           (find-divisor n (+ test-divisor\
    \ 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n  (find-divisor\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter i)\n    (if (= (modulo n i)\
    \ 0)\n        (largest_divisor_iter (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ 2))\n", "  (define (helper n divisor)\n    (if (= (modulo n divisor) 0)\n  \
    \      (helper n (+ divisor 1))\n        (- divisor 1)))\n  (helper n 2))\n",
  "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (divisor n d)\n  \
    \  (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor\
    \ n (- n 1)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
