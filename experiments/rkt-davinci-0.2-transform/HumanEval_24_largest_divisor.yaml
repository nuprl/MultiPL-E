name: HumanEval_24_largest_divisor
language: rkt
prompt: "#lang racket\n\n;; For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (largest_divisor-iter current-divisor n)\n    (if (= (remainder\
    \ n current-divisor) 0)\n        (largest_divisor-iter (add1 current-divisor)\
    \ n)\n        (sub1 current-divisor)))\n  (largest_divisor-iter 2 n))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor_helper\
    \ n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n         \
    \   (largest_divisor_helper n (+ i 1))\n            (largest_divisor_helper n\
    \ (+ i 1)))))\n  (largest_divisor_helper n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (-\
    \ i 1))))\n  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        (largest_divisor_iter\
    \ (- test-divisor 1))\n        test-divisor))\n  (largest_divisor_iter (- n 1)))\n",
  "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n",
  "  (define (largest_divisor_iter i)\n    (if (= (modulo n i) 0)\n        i\n   \
    \     (largest_divisor_iter (- i 1))))\n  (largest_divisor_iter (- n 1)))\n",
  "  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        i\n \
    \       (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter n (/ n 2)))\n",
  "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor\
    \ n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define (largest_divisor-iter i)\n\
    \    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter (- i\
    \ 1))))\n  (largest_divisor-iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ i)\n    (if (= (remainder n i) 0)\n        i\n        (largest_divisor-iter\
    \ (- i 1))))\n  (largest_divisor-iter (/ n 2)))\n", "  (define (divisor-iter test-divisor)\n\
    \    (if (= (remainder n test-divisor) 0)\n        test-divisor\n        (divisor-iter\
    \ (- test-divisor 1))))\n  (divisor-iter (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-helper\
    \ n i)\n    (if (= i n)\n        (- n 1)\n        (if (= (modulo n i) 0)\n   \
    \         i\n            (largest_divisor-helper n (+ i 1)))))\n  (largest_divisor-helper\
    \ n 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
