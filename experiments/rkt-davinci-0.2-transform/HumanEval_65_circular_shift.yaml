name: HumanEval_65_circular_shift
language: rkt
prompt: "#lang racket\n\n;; Circular shift the digits of the integer x, shift the\
  \ digits right by shift\n;; and return the result as a string.\n;; If shift > number\
  \ of digits, return digits reversed.\n;; >>> (circular_shift 12 1)\n;; \"21\"\n\
  ;; >>> (circular_shift 12 2)\n;; \"12\"\n(define (circular_shift x shift)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n\
  \    (check-equal? (candidate 100 2) \"001\")\n    (check-equal? (candidate 12 2)\
  \ \"12\")\n    (check-equal? (candidate 97 8) \"79\")\n    (check-equal? (candidate\
  \ 12 1) \"21\")\n    (check-equal? (candidate 11 101) \"11\")\n))\n\n(test-humaneval)"
completions: ["  (define (shift-digits digits shift)\n    (if (= shift 0)\n      \
    \  digits\n        (shift-digits (append (rest digits) (list (first digits)))\
    \ (- shift 1))))\n  (number->string (string->number (string-join (shift-digits\
    \ (string->list (number->string x)) shift)))))\n", "  (string-join (reverse (list->string\
    \ (reverse (string->list (number->string x)))))))\n", "  (define (circular-shift-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular-shift-helper (modulo\
    \ (quotient x 10) (expt 10 shift)) (- shift 1))))\n  (number->string (circular-shift-helper\
    \ x shift)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ x)\n        result\n        (circular_shift_helper (quotient x 10)\n       \
    \                        (modulo (+ shift 1) (length result))\n              \
    \                 (string-append (substring result shift)\n                  \
    \                            (substring result 0 shift)\n                    \
    \                          (number->string (remainder x 10))))))\n  (circular_shift_helper\
    \ x shift (number->string x)))\n", "  (define (shift-digit x shift)\n    (if (=\
    \ shift 0)\n        x\n        (shift-digit (modulo x 10) (- shift 1))))\n  (define\
    \ (shift-digits x shift)\n    (if (= x 0)\n        \"\"\n        (string-append\
    \ (shift-digits (quotient x 10) shift)\n                       (number->string\
    \ (shift-digit x shift)))))\n  (shift-digits x shift))\n", "  (define (shift-digits\
    \ x shift)\n    (cond ((= x 0) '())\n          (else (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift)))))\n  (define (shift-digits-right x shift)\n    (cond\
    \ ((= shift 0) x)\n          (else (shift-digits-right (append (cdr x) (list (car\
    \ x))) (- shift 1)))))\n  (define (digits-to-string x)\n    (cond ((= x 0) \"\"\
    )\n          (else (string-append (digits-to-string (quotient x 10)) (list (integer->char\
    \ (modulo x 10)))))))\n  (digits-to-string (shift-digits-right (shift-digits x\
    \ shift) shift)))\n", "  (define (shift-right x shift)\n    (if (= shift 0)\n\
    \        x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-left (* x 10) (- shift\
    \ 1))))\n  (define (shift-digits x shift)\n    (if (= shift 0)\n        x\n  \
    \      (shift-digits (+ (shift-left (modulo x 10) shift)\n                   \
    \     (shift-right x 1))\n                     (- shift 1))))\n  (define (num-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (define (reverse-digits x)\n    (if (= x 0)\n        0\n        (+ (* (modulo\
    \ x 10) (expt 10 (- (num-digits x) 1)))\n           (reverse-digits (quotient\
    \ x 10)))))\n  (number->string (if (> shift (num-digits x))\n                \
    \      (reverse-digits x)\n                      (shift-digits x shift))))\n",
  "  (define (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-digits (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper x shift)\n\
    \    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper (quotient\
    \ x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper x shift)\n\
    \    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-hel",
  "  (define (circular_shift_helper x shift result)\n    (cond\n      [(zero? shift)\
    \ (number->string x)]\n      [(zero? x) result]\n      [else (circular_shift_helper\
    \ (quotient x 10) (sub1 shift) (string-append (number->string (remainder x 10))\
    \ result))]))\n  (circular_shift_helper x shift \"\"))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (remainder x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-iter x acc)\n      (if (= x 0)\n          acc\n          (reverse-digits-iter\
    \ (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (num-digits x)\n    (define (num-digits-iter x acc)\n     \
    \ (if (= x 0)\n          acc\n          (num-digits-iter (quotient x 10) (+ acc\
    \ 1))))\n    (num-digits-iter x 0))\n  (define (shift-digits x shift)\n    (define\
    \ (shift-digits-iter x shift acc)\n      (if (= x 0)\n          acc\n        \
    \  (shift-digits-iter (quotient x 10) (quotient shift 10) (+ (* acc 10) (remainder\
    \ shift 10)))))\n    (shift-digits-iter x shift 0))\n  (if (> shift (num-digits\
    \ x))\n      (number->string (reverse-digits x))\n      (number->string (shift-digits\
    \ x shift))))\n", "  (define (aux x shift)\n    (if (= shift 0)\n        x\n \
    \       (aux (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n\
    \  (if (> shift (string-length x))\n      (string-reverse x)\n      (aux x shift)))\n",
  "  (define (reverse-string s)\n    (define (reverse-string-helper s i j)\n     \
    \ (cond ((= i j) s)\n            ((= i (- j 1)) s)\n            (else (reverse-string-helper\
    \ (string-set s i (string-ref s j)) (+ i 1) (- j 1)))))\n    (reverse-string-helper\
    \ s 0 (string-length s)))\n  (define (shift-string s shift)\n    (define (shift-string-helper\
    \ s shift)\n      (cond ((= shift 0) s)\n            (else (shift-string-helper\
    \ (string-append (substring s 1 (string-length s)) (string (string-ref s 0)))\
    \ (- shift 1)))))\n    (shift-string-helper s shift))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-helper x)\n      (cond ((= x 0) \"\")\n  \
    \          (else (string-append (digits-to-string-helper (quotient x 10)) (string\
    \ (+ (remainder x 10) 48))))))\n    (digits-to-string-helper x))\n  (define (string-to-digits\
    \ s)\n    (define (string-to-digits-helper s i)\n      (cond ((= i (string-length\
    \ s)) 0)\n            (else (+ (* (string-to-digits-helper s (+ i 1)) 10) (- (string-ref\
    \ s i) 48)))))\n    (string-to-digits-helper s 0))\n  (define (string-length s)\n\
    \    (define (string-length-helper s i)\n      (cond ((= i (string-length s))\
    \ i)\n            (else (string-length-helper s (+ i 1)))))\n    (string-length-helper\
    \ s 0))\n  (define (string-append s1 s2)\n    (define (string-append-helper s1\
    \ s2 i)\n      (cond ((= i (string-length s1)) s2)\n            (else (string-append-helper\
    \ s1 (string-set s2 (+ i (string-length s", "  (define (helper x shift)\n    (if\
    \ (= shift 0)\n        x\n        (helper (string-append (substring x 1) (substring\
    \ x 0 1)) (- shift 1))))\n  (helper (number->string x) shift))\n", "  (define\
    \ (shift-digit x shift)\n    (if (= shift 0)\n        x\n        (shift-digit\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-digits x shift)\n    (if (= x\
    \ 0)\n        \"\"\n        (string-append (shift-digits (quotient x 10) shift)\n\
    \                       (number->string (shift-digit x shift)))))\n  (shift-digits\
    \ x shift))\n", "  (define (shift-digits x shift)\n    (cond ((zero? x) '())\n\
    \          (else (cons (modulo x 10) (shift-digits (quotient x 10) shift)))))\n\
    \  (define (reverse-digits x)\n    (cond ((zero? x) '())\n          (else (cons\
    \ (modulo x 10) (reverse-digits (quotient x 10))))))\n  (define (digits-to-string\
    \ x)\n    (cond ((zero? x) \"\")\n          (else (string-append (number->string\
    \ (modulo x 10))\n                               (digits-to-string (quotient x\
    \ 10))))))\n  (digits-to-string (reverse-digits (append (shift-digits x shift)\n\
    \                                            (shift-digits x (- shift))))))\n",
  "  (define (helper x shift)\n    (if (zero? shift)\n        x\n        (helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (helper (number->string\
    \ x) shift))\n", "  (define (shift-digits x shift)\n    (cond ((= x 0) '())\n\
    \          (else (cons (modulo x 10) (shift-digits (quotient x 10) shift)))))\n\
    \  (define (shift-digits-right digits shift)\n    (cond ((= shift 0) digits)\n\
    \          (else (shift-digits-right (append (cdr digits) (list (car digits)))\
    \ (- shift 1)))))\n  (define (digits->string digits)\n    (cond ((null? digits)\
    \ \"\")\n          (else (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits))))))\n  (digits->string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (shift-helper x shift)\n    (if (= shift 0)\n      \
    \  x\n        (shift-helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define (shift-digit\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-digit (modulo (+ x\
    \ (* 10 (modulo x 10))) 100) (- shift 1))))\n  (number->string (shift-digit x\
    \ shift)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
