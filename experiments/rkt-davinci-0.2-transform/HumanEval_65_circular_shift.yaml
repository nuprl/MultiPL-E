name: HumanEval_65_circular_shift
language: rkt
prompt: "#lang racket\n\n;; Circular shift the digits of the integer x, shift the\
  \ digits right by shift\n;; and return the result as a string.\n;; If shift > number\
  \ of digits, return digits reversed.\n;; >>> (circular_shift 12 1)\n;; \"21\"\n\
  ;; >>> (circular_shift 12 2)\n;; \"12\"\n(define (circular_shift x shift)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n\
  \    (check-equal? (candidate 100 2) \"001\")\n    (check-equal? (candidate 12 2)\
  \ \"12\")\n    (check-equal? (candidate 97 8) \"79\")\n    (check-equal? (candidate\
  \ 12 1) \"21\")\n    (check-equal? (candidate 11 101) \"11\")\n))\n\n(test-humaneval)"
completions: ["  (define (shift-digits digits shift)\n    (if (= shift 0)\n      \
    \  digits\n        (shift-digits (append (rest digits) (list (first digits)))\
    \ (- shift 1))))\n  (number->string (string->number (string-join (shift-digits\
    \ (string->list (number->string x)) shift)))))\n", "  (string-join (reverse (list->string\
    \ (reverse (string->list (number->string x)))))))\n", "  (define (circular-shift-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular-shift-helper (modulo\
    \ (quotient x 10) (expt 10 shift)) (- shift 1))))\n  (number->string (circular-shift-helper\
    \ x shift)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ x)\n        result\n        (circular_shift_helper (quotient x 10)\n       \
    \                        (modulo (+ shift 1) (length result))\n              \
    \                 (string-append (substring result shift)\n                  \
    \                            (substring result 0 shift)\n                    \
    \                          (number->string (remainder x 10))))))\n  (circular_shift_helper\
    \ x shift (number->string x)))\n", "  (define (shift-digit x shift)\n    (if (=\
    \ shift 0)\n        x\n        (shift-digit (modulo x 10) (- shift 1))))\n  (define\
    \ (shift-digits x shift)\n    (if (= x 0)\n        \"\"\n        (string-append\
    \ (shift-digits (quotient x 10) shift)\n                       (number->string\
    \ (shift-digit x shift)))))\n  (shift-digits x shift))\n", "  (define (shift-digits\
    \ x shift)\n    (cond ((= x 0) '())\n          (else (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift)))))\n  (define (shift-digits-right x shift)\n    (cond\
    \ ((= shift 0) x)\n          (else (shift-digits-right (append (cdr x) (list (car\
    \ x))) (- shift 1)))))\n  (define (digits-to-string x)\n    (cond ((= x 0) \"\"\
    )\n          (else (string-append (digits-to-string (quotient x 10)) (list (integer->char\
    \ (modulo x 10)))))))\n  (digits-to-string (shift-digits-right (shift-digits x\
    \ shift) shift)))\n", "  (define (shift-right x shift)\n    (if (= shift 0)\n\
    \        x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-left (* x 10) (- shift\
    \ 1))))\n  (define (shift-digits x shift)\n    (if (= shift 0)\n        x\n  \
    \      (shift-digits (+ (shift-left (modulo x 10) shift)\n                   \
    \     (shift-right x 1))\n                     (- shift 1))))\n  (define (num-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (define (reverse-digits x)\n    (if (= x 0)\n        0\n        (+ (* (modulo\
    \ x 10) (expt 10 (- (num-digits x) 1)))\n           (reverse-digits (quotient\
    \ x 10)))))\n  (number->string (if (> shift (num-digits x))\n                \
    \      (reverse-digits x)\n                      (shift-digits x shift))))\n",
  "  (define (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-digits (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper x shift)\n\
    \    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper (quotient\
    \ x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper x shift)\n\
    \    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-hel",
  "  (define (circular_shift_helper x shift result)\n    (cond\n      [(zero? shift)\
    \ (number->string x)]\n      [(zero? x) result]\n      [else (circular_shift_helper\
    \ (quotient x 10) (sub1 shift) (string-append (number->string (remainder x 10))\
    \ result))]))\n  (circular_shift_helper x shift \"\"))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (remainder x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-iter x acc)\n      (if (= x 0)\n          acc\n          (reverse-digits-iter\
    \ (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (num-digits x)\n    (define (num-digits-iter x acc)\n     \
    \ (if (= x 0)\n          acc\n          (num-digits-iter (quotient x 10) (+ acc\
    \ 1))))\n    (num-digits-iter x 0))\n  (define (shift-digits x shift)\n    (define\
    \ (shift-digits-iter x shift acc)\n      (if (= x 0)\n          acc\n        \
    \  (shift-digits-iter (quotient x 10) (quotient shift 10) (+ (* acc 10) (remainder\
    \ shift 10)))))\n    (shift-digits-iter x shift 0))\n  (if (> shift (num-digits\
    \ x))\n      (number->string (reverse-digits x))\n      (number->string (shift-digits\
    \ x shift))))\n", "  (define (aux x shift)\n    (if (= shift 0)\n        x\n \
    \       (aux (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n\
    \  (if (> shift (string-length x))\n      (string-reverse x)\n      (aux x shift)))\n",
  "  (define (reverse-string s)\n    (define (reverse-string-helper s i j)\n     \
    \ (cond ((= i j) s)\n            ((= i (- j 1)) s)\n            (else (reverse-string-helper\
    \ (string-set s i (string-ref s j)) (+ i 1) (- j 1)))))\n    (reverse-string-helper\
    \ s 0 (string-length s)))\n  (define (shift-string s shift)\n    (define (shift-string-helper\
    \ s shift)\n      (cond ((= shift 0) s)\n            (else (shift-string-helper\
    \ (string-append (substring s 1 (string-length s)) (string (string-ref s 0)))\
    \ (- shift 1)))))\n    (shift-string-helper s shift))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-helper x)\n      (cond ((= x 0) \"\")\n  \
    \          (else (string-append (digits-to-string-helper (quotient x 10)) (string\
    \ (+ (remainder x 10) 48))))))\n    (digits-to-string-helper x))\n  (define (string-to-digits\
    \ s)\n    (define (string-to-digits-helper s i)\n      (cond ((= i (string-length\
    \ s)) 0)\n            (else (+ (* (string-to-digits-helper s (+ i 1)) 10) (- (string-ref\
    \ s i) 48)))))\n    (string-to-digits-helper s 0))\n  (define (string-length s)\n\
    \    (define (string-length-helper s i)\n      (cond ((= i (string-length s))\
    \ i)\n            (else (string-length-helper s (+ i 1)))))\n    (string-length-helper\
    \ s 0))\n  (define (string-append s1 s2)\n    (define (string-append-helper s1\
    \ s2 i)\n      (cond ((= i (string-length s1)) s2)\n            (else (string-append-helper\
    \ s1 (string-set s2 (+ i (string-length s", "  (define (helper x shift)\n    (if\
    \ (= shift 0)\n        x\n        (helper (string-append (substring x 1) (substring\
    \ x 0 1)) (- shift 1))))\n  (helper (number->string x) shift))\n", "  (define\
    \ (shift-digit x shift)\n    (if (= shift 0)\n        x\n        (shift-digit\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-digits x shift)\n    (if (= x\
    \ 0)\n        \"\"\n        (string-append (shift-digits (quotient x 10) shift)\n\
    \                       (number->string (shift-digit x shift)))))\n  (shift-digits\
    \ x shift))\n", "  (define (shift-digits x shift)\n    (cond ((zero? x) '())\n\
    \          (else (cons (modulo x 10) (shift-digits (quotient x 10) shift)))))\n\
    \  (define (reverse-digits x)\n    (cond ((zero? x) '())\n          (else (cons\
    \ (modulo x 10) (reverse-digits (quotient x 10))))))\n  (define (digits-to-string\
    \ x)\n    (cond ((zero? x) \"\")\n          (else (string-append (number->string\
    \ (modulo x 10))\n                               (digits-to-string (quotient x\
    \ 10))))))\n  (digits-to-string (reverse-digits (append (shift-digits x shift)\n\
    \                                            (shift-digits x (- shift))))))\n",
  "  (define (helper x shift)\n    (if (zero? shift)\n        x\n        (helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (helper (number->string\
    \ x) shift))\n", "  (define (shift-digits x shift)\n    (cond ((= x 0) '())\n\
    \          (else (cons (modulo x 10) (shift-digits (quotient x 10) shift)))))\n\
    \  (define (shift-digits-right digits shift)\n    (cond ((= shift 0) digits)\n\
    \          (else (shift-digits-right (append (cdr digits) (list (car digits)))\
    \ (- shift 1)))))\n  (define (digits->string digits)\n    (cond ((null? digits)\
    \ \"\")\n          (else (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits))))))\n  (digits->string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (shift-helper x shift)\n    (if (= shift 0)\n      \
    \  x\n        (shift-helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define (shift-digit\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-digit (modulo (+ x\
    \ (* 10 (modulo x 10))) 100) (- shift 1))))\n  (number->string (shift-digit x\
    \ shift)))\n", "  (define (circular_shift-helper x shift)\n    (if (zero? shift)\n\
    \        x\n        (circular_shift-helper (string-append (substring x 1) (substring\
    \ x 0 1)) (- shift 1))))\n  (if (> shift (string-length x))\n      (string-reverse\
    \ x)\n      (circular_shift-helper x shift)))\n", "  (define (shift-digits x shift)\n\
    \    (cond\n      [(zero? shift) x]\n      [else (shift-digits (modulo x 10) (-\
    \ shift 1))]))\n  (define (shift-string x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-string (string-append (substring x 1) (substring x 0\
    \ 1)) (- shift 1))]))\n  (define (shift-string-rev x shift)\n    (cond\n     \
    \ [(zero? shift) x]\n      [else (shift-string-rev (string-append (substring x\
    \ -1) (substring x 0 -1)) (- shift 1))]))\n  (cond\n    [(zero? shift) (number->string\
    \ x)]\n    [(> shift (number->string x)) (shift-string-rev (number->string x)\
    \ shift)]\n    [else (shift-string (number->string x) shift)]))\n", "  (define\
    \ (circular_shift_helper x shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper\
    \ (modulo (quotient x 10) (expt 10 shift))\n                               (-\
    \ shift 1))))\n  (number->string (circular_shift_helper x shift)))\n", "  (define\
    \ (shift-digit x shift)\n    (if (= shift 0)\n        x\n        (shift-digit\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-digits x shift)\n    (if (= x\
    \ 0)\n        \"\"\n        (string-append (shift-digits (quotient x 10) shift)\n\
    \                       (number->string (shift-digit x shift)))))\n  (shift-digits\
    \ x shift))\n", "  (define (circular_shift_helper x shift)\n    (if (zero? shift)\n\
    \        x\n        (circular_shift_helper (modulo (+ (* 10 (modulo x 10)) (quotient\
    \ x 10)) 100) (- shift 1))))\n  (if (< shift (length (number->string x)))\n  \
    \    (number->string (circular_shift_helper x shift))\n      (string-reverse (number->string\
    \ x))))\n", "  (let ([digits (string->list (number->string x))])\n    (if (> shift\
    \ (length digits))\n        (list->string (reverse digits))\n        (list->string\
    \ (append (reverse (drop shift (reverse digits)))\n                          \
    \    (take shift (reverse digits)))))))\n", "  (define (shift-right x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-right (quotient x 10) (- shift\
    \ 1))))\n  (define (shift-left x shift)\n    (if (zero? shift)\n        x\n  \
    \      (shift-left (* x 10) (- shift 1))))\n  (define (shift-digits x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-digits (+ (shift-left (modulo\
    \ x 10) shift)\n                         (shift-right x 1))\n                \
    \     (- shift 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-iter (quotient\
    \ x 10) (+ (* acc 10) (modulo x 10)))))\n    (reverse-digits-iter x 0))\n  (define\
    \ (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (zero? x)\n \
    \         acc\n          (num-digits-iter (quotient x 10) (+ acc 1))))\n    (num-digits-iter\
    \ x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter x\
    \ acc)\n      (if (zero? x)\n          acc\n          (digits-to-string-iter (quotient\
    \ x 10) (string-append (number->string (modulo x 10)) acc))))\n    (digits-to-string-iter\
    \ x \"\"))\n  (digits-to-string (if (> shift (num-digits x))\n               \
    \         (reverse-digits x)\n                        (shift-digits x shift))))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (reverse-digits x)\n    (if (zero? x)\n        '()\n\
    \        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n  (define (digits-to-string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (digits-to-string\
    \ (shift-digits-right (shift-digits x shift) shift)))\n", "  (define (shift-digit\
    \ x shift)\n    (cond\n      [(= shift 0) x]\n      [(= shift 1) (+ (* 10 x) (/\
    \ x 10))]\n      [else (shift-digit (+ (* 10 x) (/ x 10)) (- shift 1))]))\n  (number->string\
    \ (shift-digit x shift)))\n", "  (define (reverse-string str)\n    (string-append\
    \ (string-reverse (substring str 0 (- (string-length str) 1)))\n             \
    \      (string (string-ref str (- (string-length str) 1)))))\n  (define (shift-string\
    \ str shift)\n    (string-append (reverse-string (substring str 0 shift))\n  \
    \                 (reverse-string (substring str shift))))\n  (define (shift-string-right\
    \ str shift)\n    (string-append (reverse-string (substring str 0 (- (string-length\
    \ str) shift)))\n                   (reverse-string (substring str (- (string-length\
    \ str) shift)))))\n  (define (shift-string-left str shift)\n    (string-append\
    \ (reverse-string (substring str shift))\n                   (reverse-string (substring\
    \ str 0 shift))))\n  (define (shift-string-right-by-one str)\n    (shift-string-right\
    \ str 1))\n  (define (shift-string-left-by-one str)\n    (shift-string-left str\
    \ 1))\n  (define (shift-string-right-by-two str)\n    (shift-string-right str\
    \ 2))\n  (define (shift-string-left-by-two str)\n    (shift-string-left str 2))\n\
    \  (define (shift-string-right-by-three str)\n    (shift-string-right str 3))\n\
    \  (define (shift-string-left-by-three str)\n    (shift-string-left str 3))\n\
    \  (define (shift-string-right-by-four str)\n    (shift-string-right str 4))\n\
    \  (define (shift-string-left-by-four str)\n    (shift-string-left str 4))\n \
    \ (define (shift-string-right-by-five str)\n    (shift-string-right str 5))\n\
    \  (define (shift-string-left-by-five str)\n    (shift-string-left str 5))\n \
    \ (define (shift-string-right-by-six str)\n    (shift-string-right str 6))\n \
    \ (define (shift-string-left-by-six str)\n    (shift-string-", "  (define (circular_shift-helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift-helper\
    \ (quotient x 10)\n                               (modulo shift 1)\n         \
    \                      (string-append (number->string (modulo x 10))\n       \
    \                                       result))))\n  (circular_shift-helper x\
    \ shift \"\"))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n    \
    \    '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (cs x shift)\n    (if (zero? shift)\n        (number->string x)\n   \
    \     (let ([x-str (number->string x)])\n          (string-append (substring x-str\
    \ shift)\n                         (substring x-str 0 shift)))))\n  (let ([x-str\
    \ (number->string x)])\n    (if (> shift (string-length x-str))\n        (string-reverse\
    \ x-str)\n        (cs x shift))))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (helper x shift)\n    (if (zero? shift)\n        x\n        (helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (if (zero? shift)\n   \
    \   (number->string x)\n      (helper (number->string x) shift)))\n", "  (define\
    \ (shift-helper x shift)\n    (if (= shift 0)\n        x\n        (shift-helper\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n  (if (< shift\
    \ (string-length (number->string x)))\n      (shift-helper (number->string x)\
    \ shift)\n      (string-reverse (number->string x))))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (if (zero? shift)\n      (number->string\
    \ x)\n      (let* ([digits (string->list (number->string x))]\n             [len\
    \ (length digits)])\n        (if (> shift len)\n            (list->string (reverse\
    \ digits))\n            (list->string (append (reverse (drop shift digits))\n\
    \                                  (reverse (take shift digits))))))))\n", " \
    \ (define (shift-helper x shift)\n    (if (zero? shift)\n        x\n        (shift-helper\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n  (define\
    \ (reverse-helper x)\n    (if (zero? (string-length x))\n        \"\"\n      \
    \  (string-append (reverse-helper (substring x 1)) (substring x 0 1))))\n  (if\
    \ (> shift (string-length (number->string x)))\n      (reverse-helper (number->string\
    \ x))\n      (shift-helper (number->string x) shift)))\n", "  (define (reverse-digits\
    \ x)\n    (define (reverse-digits-iter x acc)\n      (if (zero? x)\n         \
    \ acc\n          (reverse-digits-iter (quotient x 10) (+ (* 10 acc) (remainder\
    \ x 10)))))\n    (reverse-digits-iter x 0))\n  (define (digits x)\n    (define\
    \ (digits-iter x acc)\n      (if (zero? x)\n          acc\n          (digits-iter\
    \ (quotient x 10) (cons (remainder x 10) acc))))\n    (digits-iter x '()))\n \
    \ (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (reverse-digits x) (- shift 1))))\n  (define (digits-to-string x)\n    (define\
    \ (digits-to-string-iter x acc)\n      (if (null? x)\n          acc\n        \
    \  (digits-to-string-iter (cdr x) (string-append (number->string (car x)) acc))))\n\
    \    (digits-to-string-iter x \"\"))\n  (digits-to-string (digits (shift-digits\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (if (= x 0)\n       \
    \ '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n \
    \ (define (shift-digits-right digits shift)\n    (if (= shift 0)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (helper x shift acc)\n    (if (= x 0)\n        (number->string (reverse\
    \ acc))\n        (helper (quotient x 10)\n                shift\n            \
    \    (cons (remainder x 10) acc))))\n  (if (< shift (number-of-digits x))\n  \
    \    (helper x shift '())\n      (number->string (reverse (integer->list x)))))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits (modulo x 10) (- shift 1))))\n\
    \  (define (shift-string x shift)\n    (if (zero? shift)\n        x\n        (shift-string\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n  (shift-string\
    \ (number->string x) (shift-digits x shift)))\n", "  (define (iter x shift digits)\n\
    \    (if (zero? x)\n        (apply string digits)\n        (iter (quotient x 10)\n\
    \              shift\n              (cons (remainder x 10) digits))))\n  (if (>\
    \ shift (length (number->string x)))\n      (reverse (number->string x))\n   \
    \   (iter x shift '())))\n", "  (define (circular_shift_helper x shift digits)\n\
    \    (cond\n      [(zero? shift) (reverse digits)]\n      [(zero? x) (reverse\
    \ digits)]\n      [else (circular_shift_helper (quotient x 10) (sub1 shift) (cons\
    \ (remainder x 10) digits))]))\n  (number->string (apply * (circular_shift_helper\
    \ x shift '()))))\n", "  (define digits (number->string x))\n  (define len (string-length\
    \ digits))\n  (if (> shift len)\n      (string-reverse digits)\n      (string-append\
    \ (substring digits shift len)\n                     (substring digits 0 shift))))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits (quotient x 10) (sub1 shift))))\n\
    \  (define (digits x)\n    (if (zero? x)\n        0\n        (add1 (digits (quotient\
    \ x 10)))))\n  (define (reverse-digits x)\n    (if (zero? x)\n        0\n    \
    \    (add (remainder x 10) (mult 10 (reverse-digits (quotient x 10))))))\n  (define\
    \ (shift-digits-right x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-right\
    \ (quotient x 10) (sub1 shift))))\n  (define (shift-digits-left x shift)\n   \
    \ (if (zero? shift)\n        x\n        (add (mult (remainder x 10) (expt 10 shift))\n\
    \             (shift-digits-left (quotient x 10) (sub1 shift)))))\n  (define (shift-digits-left-and-right\
    \ x shift)\n    (if (zero? shift)\n        x\n        (add (mult (remainder x\
    \ 10) (expt 10 shift))\n             (shift-digits-left-and-right (quotient x\
    \ 10) (sub1 shift)))))\n  (define (shift-digits-right-and-left x shift)\n    (if\
    \ (zero? shift)\n        x\n        (add (mult (remainder x 10) (expt 10 shift))\n\
    \             (shift-digits-right-and-left (quotient x 10) (sub1 shift)))))\n\
    \  (define (shift-digits-right-and-left-and-right x shift)\n    (if (zero? shift)\n\
    \        x\n        (add (mult (remainder x 10) (expt 10 shift))\n           \
    \  (shift-digits-right-and-left-and-right (quotient x 10) (sub1 shift)))))\n \
    \ (define (shift-digits-right-and-left-and-right-and-left x shift)\n    (if (zero?\
    \ shift)", "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n\
    \        (cons (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define\
    \ (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n \
    \       (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (reverse-digits\
    \ (quotient x 10)))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        \"\"\n        (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits)))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (shift-digits-left digits shift)\n\
    \    (if (zero? shift)\n        digits\n        (shift-digits-left (append (list\
    \ (car (reverse digits))) (reverse (cdr (reverse digits)))) (- shift 1))))\n \
    \ (define (shift-digits-right-or-reverse digits shift)\n    (if (< shift (length\
    \ digits))\n        (shift-digits-right digits shift)\n        (reverse-digits\
    \ digits)))\n  (define (shift-digits-left-or-reverse digits shift)\n    (if (<\
    \ shift (length digits))\n        (shift-digits-left digits shift)\n        (reverse-digits\
    \ digits)))\n  (digits->string (shift-digits-right-or-reverse (shift-digits x\
    \ shift) shift)))\n", "  (define (shift-helper x shift)\n    (if (= shift 0)\n\
    \        x\n        (shift-helper (string-append (substring x 1) (substring x\
    \ 0 1)) (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (digits x)\n    (if (= x 0)\n\
    \        '()\n        (cons (remainder x 10) (digits (quotient x 10)))))\n  (define\
    \ (shift-digits x shift)\n    (if (= shift 0)\n        x\n        (shift-digits\
    \ (append (rest x) (list (first x))) (- shift 1))))\n  (define (reverse-digits\
    \ x)\n    (if (null? x)\n        '()\n        (append (reverse-digits (rest x))\
    \ (list (first x)))))\n  (define (digits-to-string x)\n    (if (null? x)\n   \
    \     \"\"\n        (string-append (number->string (first x)) (digits-to-string\
    \ (rest x)))))\n  (if (> shift (length (digits x)))\n      (digits-to-string (reverse-digits\
    \ (digits x)))\n      (digits-to-string (shift-digits (digits x) shift))))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-helper x shift)\n    (if\
    \ (= shift 0)\n        x\n        (shift-helper (string-append (substring x 1)\
    \ (substring x 0 1)) (- shift 1))))\n  (shift-helper (number->string x) shift))\n",
  "  (define (shift-right x shift)\n    (if (zero? shift)\n        x\n        (shift-right\
    \ (quotient x 10) (- shift 1))))\n  (define (shift-left x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-left (* x 10) (- shift 1))))\n  (define (digits\
    \ x)\n    (if (zero? x)\n        0\n        (+ 1 (digits (quotient x 10)))))\n\
    \  (define (reverse x)\n    (if (zero? x)\n        0\n        (+ (* (remainder\
    \ x 10) (shift-left 1 (digits x)))\n           (reverse (quotient x 10)))))\n\
    \  (define (shift-digits x shift)\n    (if (> shift (digits x))\n        (reverse\
    \ x)\n        (+ (shift-left (shift-right x shift) shift)\n           (shift-right\
    \ x (- (digits x) shift)))))\n  (number->string (shift-digits x shift)))\n", " \
    \ (define (shift-right x shift)\n    (if (= shift 0)\n        x\n        (shift-right\
    \ (quotient x 10) (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-left (* x 10) (- shift 1))))\n  (define (reverse-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ (* (reverse-digits (quotient x 10))\
    \ 10) (remainder x 10))))\n  (define (num-digits x)\n    (if (= x 0)\n       \
    \ 0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define (digits-to-string\
    \ x)\n    (if (= x 0)\n        \"\"\n        (string-append (digits-to-string\
    \ (quotient x 10)) (number->string (remainder x 10)))))\n  (define (shift-digits\
    \ x shift)\n    (if (> shift (num-digits x))\n        (digits-to-string (reverse-digits\
    \ x))\n        (digits-to-string (+ (shift-left (shift-right x shift) shift) (shift-right\
    \ x (- (num-digits x) shift))))))\n  (shift-digits x shift))\n", "  (define (shift-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-helper (number->string\
    \ (string->number x)) (- shift 1))]))\n  (shift-helper x shift))\n", "  (define\
    \ (circular_shift_helper x shift result)\n    (if (zero? x)\n        result\n\
    \        (circular_shift_helper (quotient x 10)\n                            \
    \   (modulo shift 1)\n                               (string-append (number->string\
    \ (modulo x 10))\n                                              result))))\n \
    \ (circular_shift_helper x shift \"\"))\n", "  (define (shift-right x shift)\n\
    \    (if (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift\
    \ 1))))\n  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n    \
    \    (shift-left (* x 10) (- shift 1))))\n  (define (shift-digits x shift)\n \
    \   (define (shift-digits-helper x shift)\n      (if (= shift 0)\n          x\n\
    \          (shift-digits-helper (shift-left x 1) (- shift 1))))\n  (define (shift-digits-helper\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-digits-helper (shift-left\
    \ x 1) (- shift 1))))\n  (define (shift-digits-helper x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-digits-helper (shift-left x 1) (- shift 1))))\n\
    \  (define (shift-digits-helper x shift)\n    (if (= shift 0)\n        x\n   \
    \     (shift-digits-helper (shift-left x 1) (- shift 1))))\n  (define (shift-digits-helper\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-digits-helper (shift-left\
    \ x 1) (- shift 1))))\n  (define (shift-digits-helper x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-digits-helper (shift-left x 1) (- shift 1))))\n\
    \  (define (shift-digits-helper x shift)\n    (if (= shift 0)\n        x\n   \
    \     (shift-digits-helper (shift-left x 1) (- shift 1))))\n  (define (shift-digits-helper\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-digits-helper (shift-left\
    \ x 1) (- shift 1))))\n  (define (shift-digits-helper x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-digits-helper (shift-left x 1) (- shift 1))))\n\
    \ ", "  (define (digits x)\n    (if (zero? x)\n        '()\n        (cons (remainder\
    \ x 10) (digits (quotient x 10)))))\n  (define (reverse-digits x)\n    (if (null?\
    \ x)\n        '()\n        (append (reverse-digits (cdr x)) (list (car x)))))\n\
    \  (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (append\
    \ (cdr x) (list (car x)))))\n  (define (digits-to-string x)\n    (if (null? x)\n\
    \        \"\"\n        (string-append (number->string (car x)) (digits-to-string\
    \ (cdr x)))))\n  (digits-to-string (shift-digits (reverse-digits (digits x)) shift)))\n",
  "  (define (shift-helper x shift)\n    (if (zero? shift)\n        x\n        (let\
    \ ([last-digit (modulo x 10)]\n              [rest (quotient x 10)])\n       \
    \   (shift-helper (+ (* rest 10) last-digit) (- shift 1)))))\n  (define (num-digits\
    \ x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (define (reverse-digits x)\n    (if (zero? x)\n        0\n        (+ (* (modulo\
    \ x 10) (expt 10 (- (num-digits x) 1)))\n           (reverse-digits (quotient\
    \ x 10)))))\n  (number->string (if (> shift (num-digits x))\n                \
    \      (reverse-digits x)\n                      (shift-helper x shift))))\n",
  "  (define (shift-right x shift)\n    (if (= shift 0)\n        x\n        (shift-right\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-left (* x 10) (- shift 1))))\n  (define (shift-digits\
    \ x shift)\n    (define (shift-digits-iter x shift)\n      (if (= shift 0)\n \
    \         x\n          (shift-digits-iter (+ (shift-right x shift) (shift-left\
    \ x (- shift))) (- shift 1))))\n    (shift-digits-iter x shift))\n  (define (reverse-digits\
    \ x)\n    (define (reverse-digits-iter x rev)\n      (if (= x 0)\n          rev\n\
    \          (reverse-digits-iter (/ x 10) (+ (* rev 10) (modulo x 10)))))\n   \
    \ (reverse-digits-iter x 0))\n  (define (num-digits x)\n    (define (num-digits-iter\
    \ x count)\n      (if (= x 0)\n          count\n          (num-digits-iter (/\
    \ x 10) (+ count 1))))\n    (num-digits-iter x 0))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-iter x str)\n      (if (= x 0)\n         \
    \ str\n          (digits-to-string-iter (/ x 10) (string-append (number->string\
    \ (modulo x 10)) str))))\n    (digits-to-string-iter x \"\"))\n  (digits-to-string\
    \ (if (> shift (num-digits x))\n                        (reverse-digits x)\n \
    \                       (shift-digits x shift))))\n", "  (define (reverse-string\
    \ str)\n    (string-append (reverse (string->list str))))\n  (define (shift-string\
    \ str shift)\n    (string-append (substring str shift) (substring str 0 shift)))\n\
    \  (define (shift-string-right str shift)\n    (string-append (substring str (-\
    \ (string-length str) shift))\n                   (substring str 0 (- (string-length\
    \ str) shift))))\n  (define (shift-string-left str shift)\n    (string-append\
    \ (substring str shift) (substring str 0 shift)))\n  (define (shift-string-left-reverse\
    \ str shift)\n    (string-append (reverse-string (substring str shift))\n    \
    \               (reverse-string (substring str 0 shift))))\n  (define (shift-string-right-reverse\
    \ str shift)\n    (string-append (reverse-string (substring str (- (string-length\
    \ str) shift)))\n                   (reverse-string (substring str 0 (- (string-length\
    \ str) shift)))))\n  (define (shift-string-reverse str shift)\n    (string-append\
    \ (reverse-string (substring str shift))\n                   (reverse-string (substring\
    \ str 0 shift))))\n  (define (shift-string-reverse-reverse str shift)\n    (string-append\
    \ (reverse-string (substring str (- (string-length str) shift)))\n           \
    \        (reverse-string (substring str 0 (- (string-length str) shift)))))\n\
    \  (define (shift-string-reverse-left str shift)\n    (string-append (substring\
    \ str shift) (substring str 0 shift)))\n  (define (shift-string-reverse-right\
    \ str shift)\n    (string-append (substring str (- (string-length str) shift))\n\
    \                   (substring str 0 (- (string-length str) shift))))\n  (define\
    \ (shift-string-left-reverse-reverse str shift)\n    (string-append (reverse-string\
    \ (substring str (- (string-length str) shift)))\n                   (reverse-string\
    \ (substring str 0 (- (string-length str) shift)))))\n  (define (shift-string-right-reverse-reverse\
    \ str shift)\n    (string-append (reverse-string (sub", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        x\n        (let* ([d (modulo x 10)]\n \
    \              [x (quotient x 10)])\n          (if (zero? x)\n              (cons\
    \ d '())\n              (cons d (shift-digits x (- shift 1)))))))\n  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        x\n        (let* ([d (modulo x 10)]\n       \
    \        [x (quotient x 10)])\n          (cons d (reverse-digits x)))))\n  (define\
    \ (digits->string digits)\n    (if (null? digits)\n        \"\"\n        (string-append\
    \ (number->string (car digits))\n                       (digits->string (cdr digits)))))\n\
    \  (let* ([digits (shift-digits x shift)]\n         [digits (if (> shift (length\
    \ digits))\n                     (reverse-digits x)\n                     digits)])\n\
    \    (digits->string digits)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (= x 0)\n        '()\n        (cons (remainder x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-helper x shift)\n    (if (= shift 0)\n   \
    \     x\n        (shift-helper (append (cdr x) (list (car x))) (- shift 1))))\n\
    \  (define (digits->string x)\n    (if (null? x)\n        \"\"\n        (string-append\
    \ (number->string (car x)) (digits->string (cdr x)))))\n  (define (reverse-digits\
    \ x)\n    (if (null? x)\n        '()\n        (append (reverse-digits (cdr x))\
    \ (list (car x)))))\n  (if (< shift (length (shift-digits x shift)))\n      (digits->string\
    \ (shift-helper (shift-digits x shift) shift))\n      (digits->string (reverse-digits\
    \ (shift-digits x shift)))))\n", "  (define (cs x shift)\n    (if (zero? shift)\n\
    \        (number->string x)\n        (let* ([s (number->string x)]\n         \
    \      [l (string-length s)]\n               [r (modulo shift l)])\n         \
    \ (string-append (substring s r l) (substring s 0 r)))))\n  (cs x shift))\n",
  "  (define (shift-digits x shift)\n    (if (= x 0)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (= shift 0)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (helper x shift)\n    (if (=\
    \ x 0)\n        \"\"\n        (string-append (helper (quotient x 10) (- shift\
    \ 1))\n                       (if (= shift 0)\n                           (number->string\
    \ (modulo x 10))\n                           (number->string (quotient x 10))))))\n\
    \  (if (> shift (string-length (number->string x)))\n      (string-reverse (number->string\
    \ x))\n      (helper x shift)))\n", "  (define (circular_shift_helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (circular_shift_helper (modulo (* 10\
    \ (modulo x 10)) x) (sub1 shift))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n      \
    \  '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (reverse-string s)\n    (string-append (string-reverse (substring s 0\
    \ (string-length s)))))\n  (define (shift-string s)\n    (string-append (substring\
    \ s 1 (string-length s)) (substring s 0 1)))\n  (define (digits-string x)\n  \
    \  (number->string x))\n  (define (digits-number x)\n    (string->number (digits-string\
    \ x)))\n  (define (shift-digits x shift)\n    (if (> shift (string-length (digits-string\
    \ x)))\n        (reverse-string (digits-string x))\n        (begin\n         \
    \ (define s (digits-string x))\n          (define i 0)\n          (while (< i\
    \ shift)\n            (set! s (shift-string s))\n            (set! i (+ i 1)))\n\
    \          s)))\n  (shift-digits x shift))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (reverse-digits x)\n    (if (zero? x)\n        '()\n\
    \        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (if (> shift\
    \ (length (shift-digits x shift)))\n                      (reverse-digits x)\n\
    \                      (append (cdr (shift-digits x shift)) (list (car (shift-digits\
    \ x shift)))))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n  \
    \      '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (sub1 shift))))\n\
    \  (define (digits->string digits)\n    (if (null? digits)\n        \"\"\n   \
    \     (string-append (number->string (car digits)) (digits->string (cdr digits)))))\n\
    \  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n", " \
    \ (define (shift-right x shift)\n    (if (= shift 0)\n        x\n        (shift-right\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-left (* x 10) (- shift 1))))\n  (define (digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ 1 (digits (/ x 10)))))\n  (define\
    \ (reverse x)\n    (if (= x 0)\n        0\n        (+ (* (modulo x 10) (digits\
    \ x)) (reverse (/ x 10)))))\n  (define (shift-digits x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-digits (shift-left (shift-right x shift) shift)\
    \ (- shift 1))))\n  (if (= shift 0)\n      (number->string x)\n      (number->string\
    \ (shift-digits x (digits x)))))\n", "  (define (shift-helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-helper (string-append (substring x\
    \ 1) (substring x 0 1)) (- shift 1))))\n  (shift-helper (number->string x) shift))\n",
  "  (define (shift-digit-right x)\n    (string->number (string-append (substring\
    \ (number->string x) 1)\n                                   (substring (number->string\
    \ x) 0 1))))\n  (define (shift-digit-left x)\n    (string->number (string-append\
    \ (substring (number->string x) -1)\n                                   (substring\
    \ (number->string x) 0 -1))))\n  (define (shift-digit x shift)\n    (if (> shift\
    \ 0)\n        (shift-digit (shift-digit-right x) (- shift 1))\n        (if (<\
    \ shift 0)\n            (shift-digit (shift-digit-left x) (+ shift 1))\n     \
    \       x)))\n  (number->string (shift-digit x shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (remainder x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (rotate lst n)\n    (if (zero? n)\n   \
    \     lst\n        (rotate (append (cdr lst) (list (car lst))) (- n 1))))\n  (define\
    \ (digits-to-string lst)\n    (if (null? lst)\n        \"\"\n        (string-append\
    \ (number->string (car lst)) (digits-to-string (cdr lst)))))\n  (digits-to-string\
    \ (rotate (shift-digits x shift) shift)))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (cond\n      [(zero? shift) (number->string result)]\n\
    \      [(zero? x) (number->string result)]\n      [else (circular_shift_helper\
    \ (quotient x 10) (sub1 shift) (+ (* (remainder x 10) (expt 10 shift)) result))]))\n\
    \  (circular_shift_helper x shift 0))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (circular_shift-helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (circular_shift-helper (modulo x 10) (- shift 1))))\n\
    \  (string-append (number->string (circular_shift-helper x shift))\n         \
    \        (number->string (quotient x 10))))\n", "  (define (shift-right x shift)\n\
    \    (if (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift\
    \ 1))))\n  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n    \
    \    (shift-left (* x 10) (- shift 1))))\n  (define (num-digits x)\n    (if (=\
    \ x 0)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ (* (remainder x 10) (shift-left 1\
    \ (num-digits x)))\n           (reverse-digits (quotient x 10)))))\n  (define\
    \ (digits-to-string x)\n    (if (= x 0)\n        \"\"\n        (string-append\
    \ (number->string (remainder x 10))\n                       (digits-to-string\
    \ (quotient x 10)))))\n  (define (shift-digits x shift)\n    (digits-to-string\
    \ (+ (shift-left (shift-right x shift) (- (num-digits x) shift))\n           \
    \              (shift-right (reverse-digits x) shift))))\n  (shift-digits x shift))\n",
  "  (define (circular_shift_helper x shift result)\n    (if (zero? x)\n        result\n\
    \        (circular_shift_helper (quotient x 10)\n                            \
    \   (modulo shift 1)\n                               (string-append (number->string\
    \ (modulo x 10))\n                                              result))))\n \
    \ (circular_shift_helper x shift \"\"))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-right digits shift)\n    (if (zero? shift)\n\
    \        digits\n        (shift-right (append (cdr digits) (list (car digits)))\
    \ (sub1 shift))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        \"\"\n        (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits)))))\n  (digits->string (shift-right (shift-digits x shift) shift)))\n",
  "  (define (shift-helper x shift)\n    (if (zero? shift)\n        (number->string\
    \ x)\n        (shift-helper (quotient x 10) (- shift 1))))\n  (define (reverse-helper\
    \ x)\n    (if (zero? x)\n        \"\"\n        (string-append (reverse-helper\
    \ (quotient x 10)) (number->string (remainder x 10)))))\n  (define (num-digits\
    \ x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (if (> shift (num-digits x))\n      (reverse-helper x)\n      (shift-helper\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n      \
    \  '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (circular_shift_helper x shift)\n    (if (zero? shift)\n        x\n \
    \       (circular_shift_helper (modulo (+ (* 10 (modulo x 10)) (quotient x 10))\n\
    \                                       (expt 10 (number->string x)))\n      \
    \                         (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (circular_shift_helper x shift)\n    (if (zero? shift)\n\
    \        x\n        (circular_shift_helper (modulo (+ (* x 10) (quotient x 10))\
    \ (expt 10 (number->string x))) (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (shift-helper x shift)\n    (if (= shift 0)\n    \
    \    x\n        (shift-helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define (shift-digit\
    \ digit shift)\n    (if (= digit 0)\n        0\n        (if (= shift 0)\n    \
    \        digit\n            (shift-digit (- digit 1) (- shift 1)))))\n  (define\
    \ (shift-digits digits shift)\n    (if (empty? digits)\n        empty\n      \
    \  (cons (shift-digit (first digits) shift)\n              (shift-digits (rest\
    \ digits) shift))))\n  (define (reverse-digits digits)\n    (if (empty? digits)\n\
    \        empty\n        (append (reverse-digits (rest digits))\n             \
    \   (list (first digits)))))\n  (define (digits-to-string digits)\n    (if (empty?\
    \ digits)\n        \"\"\n        (string-append (number->string (first digits))\n\
    \                       (digits-to-string (rest digits)))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (> shift (length digits))\n        (reverse-digits digits)\n\
    \        (shift-digits digits shift)))\n  (digits-to-string (shift-digits-right\
    \ (integer->digits x) shift)))\n", "  (define (shift-digits x shift)\n    (cond\n\
    \      [(zero? shift) x]\n      [else (shift-digits (quotient x 10) (- shift 1))]))\n\
    \  (define (reverse-digits x)\n    (cond\n      [(zero? x) 0]\n      [else (+\
    \ (* 10 (reverse-digits (quotient x 10))) (remainder x 10))]))\n  (define (num-digits\
    \ x)\n    (cond\n      [(zero? x) 0]\n      [else (+ 1 (num-digits (quotient x\
    \ 10)))]))\n  (define (shift-right x shift)\n    (cond\n      [(zero? shift) x]\n\
    \      [else (shift-right (quotient x 10) (- shift 1))]))\n  (define (shift-left\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-left (* 10\
    \ x) (- shift 1))]))\n  (define (digits-to-string x)\n    (cond\n      [(zero?\
    \ x) \"\"]\n      [else (string-append (digits-to-string (quotient x 10)) (number->string\
    \ (remainder x 10)))]))\n  (define (shift-digits-right x shift)\n    (digits-to-string\
    \ (+ (shift-left (shift-digits x shift) shift) (shift-right x shift))))\n  (cond\n\
    \    [(> shift (num-digits x)) (digits-to-string (reverse-digits x))]\n    [else\
    \ (shift-digits-right x shift)]))\n", "  (define (reverse-digits x)\n    (define\
    \ (helper x acc)\n      (if (zero? x)\n          acc\n          (helper (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (helper x 0))\n  (define (num-digits\
    \ x)\n    (define (helper x acc)\n      (if (zero? x)\n          acc\n       \
    \   (helper (quotient x 10) (+ acc 1))))\n    (helper x 0))\n  (define (shift-digits\
    \ x shift)\n    (define (helper x shift acc)\n      (if (zero? x)\n          acc\n\
    \          (helper (quotient x 10) (- shift 1) (+ (* acc 10) (remainder x 10)))))\n\
    \    (helper x shift 0))\n  (define (digits-to-string x)\n    (define (helper\
    \ x acc)\n      (if (zero? x)\n          acc\n          (helper (quotient x 10)\
    \ (string-append (number->string (remainder x 10)) acc))))\n    (helper x \"\"\
    ))\n  (if (> shift (num-digits x))\n      (digits-to-string (reverse-digits x))\n\
    \      (digits-to-string (shift-digits x shift))))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (circular_shift_iter x shift\
    \ result)\n    (if (zero? shift)\n        result\n        (let ([digit (modulo\
    \ x 10)])\n          (circular_shift_iter (quotient x 10) (sub1 shift) (string-append\
    \ (number->string digit) result)))))\n  (circular_shift_iter x shift \"\"))\n",
  "  (define (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-digits (modulo x 10) (- shift 1))]))\n  (define (digits-to-string x)\n\
    \    (cond\n      [(zero? x) \"\"]\n      [else (string-append (digits-to-string\
    \ (quotient x 10))\n                           (number->string (modulo x 10)))]))\n\
    \  (define (reverse-digits x)\n    (cond\n      [(zero? x) \"\"]\n      [else\
    \ (string-append (number->string (modulo x 10))\n                           (reverse-digits\
    \ (quotient x 10)))]))\n  (define (shift-digits-right x shift)\n    (cond\n  \
    \    [(zero? shift) x]\n      [else (shift-digits-right (quotient x 10) (- shift\
    \ 1))]))\n  (define (digits-to-string-right x)\n    (cond\n      [(zero? x) \"\
    \"]\n      [else (string-append (number->string (quotient x 10))\n           \
    \                (digits-to-string-right (quotient x 10)))]))\n  (cond\n    [(zero?\
    \ shift) (digits-to-string x)]\n    [(> shift (string-length (number->string x)))\
    \ (reverse-digits x)]\n    [else (string-append (digits-to-string-right (shift-digits\
    \ x shift))\n                         (digits-to-string (shift-digits-right x\
    \ shift)))]))\n", "  (define (shift-digits x shift)\n    (if (= x 0)\n       \
    \ '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n \
    \ (define (reverse-digits x)\n    (if (= x 0)\n        '()\n        (cons (modulo\
    \ x 10) (reverse-digits (quotient x 10)))))\n  (define (shift-right lst shift)\n\
    \    (if (= shift 0)\n        lst\n        (shift-right (append (cdr lst) (list\
    \ (car lst))) (- shift 1))))\n  (define (digits-to-string lst)\n    (if (null?\
    \ lst)\n        \"\"\n        (string-append (number->string (car lst)) (digits-to-string\
    \ (cdr lst)))))\n  (define (num-digits x)\n    (if (= x 0)\n        0\n      \
    \  (+ 1 (num-digits (quotient x 10)))))\n  (if (> shift (num-digits x))\n    \
    \  (digits-to-string (reverse-digits x))\n      (digits-to-string (shift-right\
    \ (shift-digits x shift) shift))))\n", "  (define (shift-helper x shift)\n   \
    \ (if (= shift 0)\n        x\n        (shift-helper (string-append (substring\
    \ x 1) (substring x 0 1)) (- shift 1))))\n  (shift-helper (number->string x) shift))\n",
  "  (define (shift-digits x shift)\n    (if (= x 0)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (= shift 0)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        x\n        (let* ([d (remainder x 10)]\n               [s (shift-digits\
    \ (quotient x 10) shift)])\n          (if (zero? s)\n              d\n       \
    \       (+ (* s 10) d)))))\n  (define (reverse-digits x)\n    (if (zero? x)\n\
    \        x\n        (+ (* (reverse-digits (quotient x 10)) 10) (remainder x 10))))\n\
    \  (define (shift-digits-right x shift)\n    (if (zero? shift)\n        x\n  \
    \      (shift-digits-right (reverse-digits (shift-digits (reverse-digits x) shift))\
    \ (- shift 1))))\n  (number->string (shift-digits-right x shift)))\n", "  (define\
    \ (circular_shift-helper x shift)\n    (if (zero? shift)\n        (number->string\
    \ x)\n        (circular_shift-helper (modulo x 10) (- shift 1))))\n  (define (number-of-digits\
    \ x)\n    (if (zero? x)\n        0\n        (+ 1 (number-of-digits (quotient x\
    \ 10)))))\n  (if (> shift (number-of-digits x))\n      (circular_shift-helper\
    \ (reverse-digits x) shift)\n      (circular_shift-helper x shift)))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (quotient x 10) (- shift 1))))\n  (define (shift-string x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-string (string-append (string (modulo x 10))\
    \ (substring x 0 (- (string-length x) 1))) (- shift 1))))\n  (shift-string (shift-digits\
    \ x shift) shift))\n", "  (define (shift-digits x shift)\n    (cond\n      [(zero?\
    \ shift) x]\n      [else (shift-digits (modulo x 10) (- shift 1))]))\n  (define\
    \ (shift-string x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-string\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))]))\n  (define\
    \ (reverse-string x)\n    (cond\n      [(zero? (string-length x)) \"\"]\n    \
    \  [else (string-append (reverse-string (substring x 1)) (substring x 0 1))]))\n\
    \  (define (shift-digits-string x shift)\n    (cond\n      [(zero? shift) x]\n\
    \      [else (shift-digits-string (string-append (substring x 1) (substring x\
    \ 0 1)) (- shift 1))]))\n  (define (shift-digits-string-reverse x shift)\n   \
    \ (cond\n      [(zero? shift) x]\n      [else (shift-digits-string-reverse (string-append\
    \ (substring x -1) (substring x 0 -1)) (- shift 1))]))\n  (define (shift-digits-string-reverse-reverse\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-string-reverse-reverse\
    \ (string-append (substring x -1) (substring x 0 -1)) (- shift 1))]))\n  (define\
    \ (shift-digits-string-reverse-reverse-reverse x shift)\n    (cond\n      [(zero?\
    \ shift) x]\n      [else (shift-digits-string-reverse-reverse-reverse (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))]))\n  (define (shift-digits-string-reverse-reverse-reverse-reverse\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-string-reverse-reverse-reverse-reverse\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))]))\n  (define\
    \ (shift-dig", "  (define (shift-helper x shift)\n    (if (zero? shift)\n    \
    \    x\n        (shift-helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define (shift-digits\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits (modulo\
    \ x 10) (- shift 1))]))\n  (define (shift-digits-helper x shift)\n    (cond\n\
    \      [(zero? shift) x]\n      [else (shift-digits-helper (quotient x 10) (-\
    \ shift 1))]))\n  (define (shift-digits-helper-helper x shift)\n    (cond\n  \
    \    [(zero? shift) x]\n      [else (shift-digits-helper-helper (quotient x 10)\
    \ (- shift 1))]))\n  (define (shift-digits-helper-helper-helper x shift)\n   \
    \ (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-helper (string-append (substring x\
    \ 1) (substring x 0 1)) (- shift 1))))\n  (shift-helper (number->string x) (modulo\
    \ shift (string-length (number->string x)))))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        \"\"\n        (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits)))))\n  (define (reverse-digits digits)\n    (if (null? digits)\n\
    \        '()\n        (append (reverse-digits (cdr digits)) (list (car digits)))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-helper x shift)\n    (if (= shift 0)\n        x\n        (shift-helper\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n  (shift-helper\
    \ (number->string x) shift))\n", "  (define (shift-digits x shift)\n    (if (zero?\
    \ x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-right x shift)\n    (if (zero? shift)\n        x\n        (shift-right\
    \ (quotient x 10) (- shift 1))))\n  (define (shift-left x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-left (* x 10) (- shift 1))))\n  (define (reverse-digits\
    \ x)\n    (define (reverse-digits-helper x acc)\n      (if (zero? x)\n       \
    \   acc\n          (reverse-digits-helper (quotient x 10) (+ (* acc 10) (remainder\
    \ x 10)))))\n    (reverse-digits-helper x 0))\n  (define (num-digits x)\n    (define\
    \ (num-digits-helper x acc)\n      (if (zero? x)\n          acc\n          (num-digits-helper\
    \ (quotient x 10) (+ acc 1))))\n    (num-digits-helper x 0))\n  (number->string\
    \ (+ (shift-left (shift-right x shift) (- (num-digits x) shift))\n           \
    \          (shift-left (reverse-digits (shift-right x shift)) shift))))\n", " \
    \ (define (shift-right x shift)\n    (if (= shift 0)\n        x\n        (shift-right\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-left (* x 10) (- shift 1))))\n  (define (shift-digits\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-digits (+ (shift-left\
    \ (shift-right x shift) shift)\n                        (shift-right x (- shift)))\n\
    \                     (- shift 1))))\n  (define (num-digits x)\n    (if (= x 0)\n\
    \        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ (* (modulo x 10) (expt 10 (- (num-digits\
    \ x) 1)))\n           (reverse-digits (quotient x 10)))))\n  (number->string (shift-digits\
    \ x (modulo shift (num-digits x)))))\n", "  (define (shift-digit-right n)\n  \
    \  (string-append (substring n 1) (substring n 0 1)))\n  (define (shift-digits-right\
    \ n)\n    (if (zero? (string-length n))\n        \"\"\n        (string-append\
    \ (shift-digits-right (shift-digit-right n))\n                       (shift-digit-right\
    \ n))))\n  (define (shift-digits-left n)\n    (if (zero? (string-length n))\n\
    \        \"\"\n        (string-append (shift-digit-right n)\n                \
    \       (shift-digits-left (shift-digit-right n)))))\n  (define (shift-digits\
    \ n)\n    (if (< shift 0)\n        (shift-digits-left n)\n        (shift-digits-right\
    \ n)))\n  (shift-digits (number->string x)))\n", "  (define (circular_shift_helper\
    \ x shift)\n    (if (zero? shift)\n        (number->string x)\n        (let* ([x-str\
    \ (number->string x)]\n               [x-str-len (string-length x-str)]\n    \
    \           [shift-mod (modulo shift x-str-len)])\n          (string-append (substring\
    \ x-str shift-mod x-str-len)\n                         (substring x-str 0 shift-mod)))))\n\
    \  (if (zero? x)\n      \"0\"\n      (circular_shift_helper x shift)))\n", " \
    \ (define (shift-right lst)\n    (if (null? lst)\n        '()\n        (append\
    \ (cdr lst) (list (car lst)))))\n  (define (shift-left lst)\n    (if (null? lst)\n\
    \        '()\n        (append (list (last lst)) (butlast lst))))\n  (define (shift-n\
    \ lst n)\n    (if (zero? n)\n        lst\n        (shift-n (shift-right lst) (-\
    \ n 1))))\n  (define (int->list x)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (int->list (quotient x 10)))))\n  (define (list->int lst)\n  \
    \  (if (null? lst)\n        0\n        (+ (* (car lst) (expt 10 (length lst)))\
    \ (list->int (cdr lst)))))\n  (number->string (list->int (shift-n (int->list x)\
    \ shift))))\n", "  (define (shift-digits x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-digits (quotient x 10) (- shift 1))]))\n  (define (shift-digits-right\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-right\
    \ (modulo x 10) (- shift 1))]))\n  (define (shift-digits-left x shift)\n    (cond\n\
    \      [(zero? shift) x]\n      [else (shift-digits-left (quotient x 10) (- shift\
    \ 1))]))\n  (define (shift-digits-left-right x shift)\n    (cond\n      [(zero?\
    \ shift) x]\n      [else (shift-digits-left-right (modulo x 10) (- shift 1))]))\n\
    \  (define (shift-digits-right-left x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-digits-right-left (quotient x 10) (- shift 1))]))\n \
    \ (define (shift-digits-right-left-right x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-digits-right-left-right (modulo x 10) (- shift 1))]))\n\
    \  (define (shift-digits-left-right-left x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-digits-left-right-left (quotient x 10) (- shift 1))]))\n\
    \  (define (shift-digits-left-right-left-right x shift)\n    (cond\n      [(zero?\
    \ shift) x]\n      [else (shift-digits-left-right-left-right (modulo x 10) (-\
    \ shift 1))]))\n  (define (shift-digits-right-left-right-left x shift)\n    (cond\n\
    \      [(zero? shift) x]\n      [else (shift-digits-right-left-right-left (quotient\
    \ x 10) (- shift 1))]))\n  (define (shift-digits-right-left", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (circular-shift-helper x shift)\n\
    \    (cond\n      [(zero? shift) (number->string x)]\n      [(zero? (modulo x\
    \ 10)) (circular-shift-helper (/ x 10) shift)]\n      [else (append (circular-shift-helper\
    \ (/ x 10) (- shift 1))\n                    (list (modulo x 10)))]))\n  (string-append\
    \ (circular-shift-helper x shift)\n                 (circular-shift-helper x shift)))\n",
  "  (define (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-digits (modulo x 10) (- shift 1))]))\n  (define (shift-digits-right x\
    \ shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-right\
    \ (/ x 10) (- shift 1))]))\n  (define (shift-digits-left x shift)\n    (cond\n\
    \      [(zero? shift) x]\n      [else (shift-digits-left (* x 10) (- shift 1))]))\n\
    \  (define (shift-digits-left-right x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-digits-left-right (shift-digits-left (shift-digits-right\
    \ x shift) shift) (- shift 1))]))\n  (define (digits x)\n    (cond\n      [(zero?\
    \ x) 0]\n      [else (+ 1 (digits (/ x 10)))]))\n  (define (reverse-digits x)\n\
    \    (cond\n      [(zero? x) 0]\n      [else (+ (* (modulo x 10) (shift-digits-left-right\
    \ 1 (digits x))) (reverse-digits (/ x 10)))]))\n  (cond\n    [(zero? shift) (number->string\
    \ x)]\n    [(> shift (digits x)) (number->string (reverse-digits x))]\n    [else\
    \ (number->string (shift-digits-left-right (shift-digits x shift) shift))]))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-right x shift)\n    (if\
    \ (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift 1))))\n\
    \  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n        (shift-left\
    \ (* x 10) (- shift 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x result)\n      (if (= x 0)\n          result\n          (reverse-digits-iter\
    \ (quotient x 10) (+ (* result 10) (remainder x 10)))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (num-digits x)\n    (define (num-digits-iter x result)\n  \
    \    (if (= x 0)\n          result\n          (num-digits-iter (quotient x 10)\
    \ (+ result 1))))\n    (num-digits-iter x 0))\n  (define (digits-to-string x)\n\
    \    (define (digits-to-string-iter x result)\n      (if (= x 0)\n          result\n\
    \          (digits-to-string-iter (quotient x 10) (string-append (number->string\
    \ (remainder x 10)) result))))\n    (digits-to-string-iter x \"\"))\n  (digits-to-string\
    \ (if (> shift (num-digits x))\n                        (reverse-digits x)\n \
    \                       (+ (shift-left (remainder x (shift-right x shift)) shift)\n\
    \                           (shift-right x shift)))))\n", "  (define (helper x\
    \ shift)\n    (if (zero? shift)\n        x\n        (helper (string-append (substring\
    \ x 1) (substring x 0 1)) (- shift 1))))\n  (if (< shift (string-length (number->string\
    \ x)))\n      (helper (number->string x) shift)\n      (string-reverse (number->string\
    \ x))))\n", "  (define (shift-digits x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-digits (quotient x 10) (- shift 1))]))\n  (define (shift-digits-rev\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-rev\
    \ (modulo x 10) (- shift 1))]))\n  (define (shift-digits-rev-str x shift)\n  \
    \  (cond\n      [(zero? shift) (number->string x)]\n      [else (string-append\
    \ (shift-digits-rev-str (modulo x 10) (- shift 1))\n                         \
    \  (number->string (quotient x 10)))]))\n  (define (shift-digits-str x shift)\n\
    \    (cond\n      [(zero? shift) (number->string x)]\n      [else (string-append\
    \ (number->string (quotient x 10))\n                           (shift-digits-str\
    \ (modulo x 10) (- shift 1)))]))\n  (define (num-digits x)\n    (cond\n      [(zero?\
    \ x) 0]\n      [else (+ 1 (num-digits (quotient x 10)))]))\n  (cond\n    [(zero?\
    \ x) \"0\"]\n    [(zero? shift) (number->string x)]\n    [(> shift (num-digits\
    \ x)) (shift-digits-rev-str x shift)]\n    [else (shift-digits-str x shift)]))\n",
  "  (define (circular_shift-helper x shift)\n    (if (zero? shift)\n        x\n \
    \       (circular_shift-helper (modulo (quotient x 10) (expt 10 shift)) (- shift\
    \ 1))))\n  (number->string (circular_shift-helper x shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-helper x shift result)\n\
    \    (if (zero? x)\n        result\n        (let* ([digit (modulo x 10)]\n   \
    \            [new-x (quotient x 10)]\n               [new-result (string-append\
    \ (number->string digit) result)])\n          (shift-helper new-x (- shift 1)\
    \ new-result))))\n  (let* ([digits (number->string x)]\n         [num-digits (string-length\
    \ digits)])\n    (if (> shift num-digits)\n        (string-reverse digits)\n \
    \       (shift-helper x shift \"\"))))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (circular_shift_helper x shift)\n    (if (=\
    \ shift 0)\n        x\n        (circular_shift_helper (string-append (substring\
    \ x 1) (substring x 0 1)) (- shift 1))))\n  (define (reverse_digits x)\n    (if\
    \ (= (string-length x) 1)\n        x\n        (string-append (reverse_digits (substring\
    \ x 1)) (substring x 0 1))))\n  (define (num_digits x)\n    (if (= x 0)\n    \
    \    0\n        (+ 1 (num_digits (/ x 10)))))\n  (if (> shift (num_digits x))\n\
    \      (reverse_digits (number->string x))\n      (circular_shift_helper (number->string\
    \ x) shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? shift)\n \
    \       x\n        (shift-digits (modulo x 10) (- shift 1))))\n  (define (shift-string\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-string (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (define (num-digits x)\n\
    \    (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (define (reverse-digits x)\n    (define (reverse-digits-iter x acc)\n     \
    \ (if (zero? x)\n          acc\n          (reverse-digits-iter (quotient x 10)\
    \ (+ (* acc 10) (modulo x 10)))))\n    (reverse-digits-iter x 0))\n  (define (reverse-string\
    \ x)\n    (define (reverse-string-iter x acc)\n      (if (zero? (string-length\
    \ x))\n          acc\n          (reverse-string-iter (substring x 1) (string-append\
    \ (substring x 0 1) acc))))\n    (reverse-string-iter x \"\"))\n  (if (< shift\
    \ (num-digits x))\n      (shift-string (number->string (shift-digits x shift))\
    \ shift)\n      (reverse-string (number->string (reverse-digits x)))))\n", " \
    \ (define (helper x shift acc)\n    (if (zero? x)\n        (number->string (reverse\
    \ acc))\n        (helper (quotient x 10)\n                (if (> shift 0)\n  \
    \                  (sub1 shift)\n                    shift)\n                (cons\
    \ (remainder x 10) acc))))\n  (helper x shift '()))\n", "  (define (shift-right\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-right (quotient x 10)\
    \ (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift 0)\n      \
    \  x\n        (shift-left (* x 10) (- shift 1))))\n  (define (reverse-digits x)\n\
    \    (define (reverse-digits-iter x acc)\n      (if (= x 0)\n          acc\n \
    \         (reverse-digits-iter (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n\
    \    (reverse-digits-iter x 0))\n  (define (num-digits x)\n    (define (num-digits-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (num-digits-iter (quotient\
    \ x 10) (+ acc 1))))\n    (num-digits-iter x 0))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-iter x acc)\n      (if (= x 0)\n         \
    \ acc\n          (digits-to-string-iter (quotient x 10) (string-append (number->string\
    \ (remainder x 10)) acc))))\n    (digits-to-string-iter x \"\"))\n  (digits-to-string\
    \ (+ (shift-left (shift-right x shift) (- (num-digits x) shift))\n           \
    \            (shift-right (reverse-digits x) shift))))\n", "  (define (reverse-string\
    \ s)\n    (define (reverse-string-iter s r)\n      (if (string-empty? s)\n   \
    \       r\n          (reverse-string-iter (substring s 1) (string-append (substring\
    \ s 0 1) r))))\n    (reverse-string-iter s \"\"))\n  (define (reverse-string-iter\
    \ s r)\n    (if (string-empty? s)\n        r\n        (reverse-string-iter (substring\
    \ s 1) (string-append (substring s 0 1) r))))\n  (define (reverse-string s)\n\
    \    (reverse-string-iter s \"\"))\n  (define (circular-shift-iter x shift r)\n\
    \    (if (= shift 0)\n        r\n        (circular-shift-iter (reverse-string\
    \ (string-append (substring x 1) (substring x 0 1))) (- shift 1) (string-append\
    \ (substring x 1) (substring x 0 1)))))\n  (circular-shift-iter (number->string\
    \ x) shift \"\"))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n \
    \       '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (reverse-digits x)\n    (if (zero? x)\n        '()\n        (cons (modulo\
    \ x 10) (reverse-digits (quotient x 10)))))\n  (define (digits-to-string x)\n\
    \    (if (zero? x)\n        \"\"\n        (string-append (number->string (modulo\
    \ x 10)) (digits-to-string (quotient x 10)))))\n  (if (> shift (length (shift-digits\
    \ x shift)))\n      (digits-to-string (reverse-digits x))\n      (digits-to-string\
    \ (append (reverse (drop shift (reverse (shift-digits x shift))))\n          \
    \                      (take shift (reverse (shift-digits x shift)))))))\n", " \
    \ (define (shift-right x shift)\n    (define (shift-right-iter x shift result)\n\
    \      (if (zero? shift)\n          result\n          (shift-right-iter (quotient\
    \ x 10) (sub1 shift) (string-append (number->string (remainder x 10)) result))))\n\
    \    (shift-right-iter x shift \"\"))\n  (define (shift-left x shift)\n    (define\
    \ (shift-left-iter x shift result)\n      (if (zero? shift)\n          result\n\
    \          (shift-left-iter (quotient x 10) (sub1 shift) (string-append result\
    \ (number->string (remainder x 10))))))\n    (shift-left-iter x shift \"\"))\n\
    \  (define (num-digits x)\n    (define (num-digits-iter x count)\n      (if (zero?\
    \ x)\n          count\n          (num-digits-iter (quotient x 10) (add1 count))))\n\
    \    (num-digits-iter x 0))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x result)\n      (if (zero? x)\n          result\n          (reverse-digits-iter\
    \ (quotient x 10) (string-append (number->string (remainder x 10)) result))))\n\
    \    (reverse-digits-iter x \"\"))\n  (define (digits x)\n    (define (digits-iter\
    \ x result)\n      (if (zero? x)\n          result\n          (digits-iter (quotient\
    \ x 10) (cons (remainder x 10) result))))\n    (digits-iter x '()))\n  (define\
    \ (digits-to-num x)\n    (define (digits-to-num-iter x result)\n      (if (null?\
    \ x)\n          result\n          (digits-to-num-iter (cdr x) (+ (* result 10)\
    \ (car x)))))\n    (digits-to-num-iter x 0))\n  (define (digits-to-string x)\n\
    \    (define (digits-to-string-iter x result)\n      (if (null? x)", "  (define\
    \ (shift-digits x shift)\n    (cond ((= x 0) '())\n          (else (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift)))))\n  (define (shift-digits-right\
    \ digits shift)\n    (cond ((= shift 0) digits)\n          (else (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1)))))\n  (define (digits->string\
    \ digits)\n    (cond ((null? digits) \"\")\n          (else (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits))))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (reverse-string str)\n    (string-join\
    \ (reverse (string-split str))))\n  (define (shift-string str shift)\n    (string-join\
    \ (append (substring str shift) (substring str 0 shift))))\n  (define (digits\
    \ x)\n    (string-length (number->string x)))\n  (define (shift x shift)\n   \
    \ (if (> shift (digits x))\n        (reverse-string (number->string x))\n    \
    \    (shift-string (number->string x) shift)))\n  (shift x shift))\n", "  (define\
    \ (shift-digits x shift)\n    (if (= x 0)\n        '()\n        (cons (remainder\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (= shift 0)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (circular_shift-helper x shift\
    \ result)\n    (if (zero? x)\n        result\n        (circular_shift-helper (quotient\
    \ x 10)\n                               (modulo shift 1)\n                   \
    \            (string-append (number->string (modulo x 10))\n                 \
    \                             result))))\n  (circular_shift-helper x shift \"\"\
    ))\n", "  (define (shift-digit x shift)\n    (cond\n      [(= shift 0) x]\n  \
    \    [(= shift 1) (modulo (+ x 1) 10)]\n      [(= shift 2) (modulo (+ x 2) 10)]\n\
    \      [(= shift 3) (modulo (+ x 3) 10)]\n      [(= shift 4) (modulo (+ x 4) 10)]\n\
    \      [(= shift 5) (modulo (+ x 5) 10)]\n      [(= shift 6) (modulo (+ x 6) 10)]\n\
    \      [(= shift 7) (modulo (+ x 7) 10)]\n      [(= shift 8) (modulo (+ x 8) 10)]\n\
    \      [(= shift 9) (modulo (+ x 9) 10)]))\n  (define (shift-digits x shift)\n\
    \    (cond\n      [(= x 0) \"\"]\n      [else (string-append (shift-digits (quotient\
    \ x 10) shift)\n                           (number->string (shift-digit (remainder\
    \ x 10) shift)))]))\n  (shift-digits x shift))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift_helper\
    \ (quotient x 10)\n                               (modulo shift 1)\n         \
    \                      (string-append (number->string (modulo x 10))\n       \
    \                                       result))))\n  (if (< shift 0)\n      (circular_shift_helper\
    \ x (- shift) \"\")\n      (circular_shift_helper x shift \"\")))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-helper (string-append (substring x\
    \ 1) (substring x 0 1)) (- shift 1))))\n  (shift-helper (number->string x) (modulo\
    \ shift (string-length (number->string x)))))\n", "  (define (shift-helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-helper (modulo x 10) (- shift\
    \ 1))))\n  (define (shift-helper-2 x shift)\n    (if (zero? shift)\n        x\n\
    \        (shift-helper-2 (/ x 10) (- shift 1))))\n  (define (shift-helper-3 x\
    \ shift)\n    (if (zero? shift)\n        x\n        (shift-helper-3 (/ x 10) (-\
    \ shift 1))))\n  (define (shift-helper-4 x shift)\n    (if (zero? shift)\n   \
    \     x\n        (shift-helper-4 (/ x 10) (- shift 1))))\n  (define (shift-helper-5\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper-5 (/ x 10)\
    \ (- shift 1))))\n  (define (shift-helper-6 x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-helper-6 (/ x 10) (- shift 1))))\n  (define (shift-helper-7\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper-7 (/ x 10)\
    \ (- shift 1))))\n  (define (shift-helper-8 x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-helper-8 (/ x 10) (- shift 1))))\n  (define (shift-helper-9\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper-9 (/ x 10)\
    \ (- shift 1))))\n  (define (shift-helper-10 x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-helper-10 (/ x 10) (- shift 1))))\n  (define (shift-helper-11\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper-11 (/ x 10)\
    \ (- shift 1))))\n  (define (shift-helper-12 x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-helper-12 (/ x 10) (- shift", "  (string-append (substring\
    \ (number->string x) shift)\n                 (substring (number->string x) 0\
    \ shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n\
    \        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define\
    \ (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n \
    \       (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digit x shift)\n    (if\
    \ (= shift 0)\n        x\n        (let* ([x-str (number->string x)]\n        \
    \       [x-str-len (string-length x-str)]\n               [shift-mod (modulo shift\
    \ x-str-len)])\n          (string->number\n           (string-append\n       \
    \     (substring x-str shift-mod x-str-len)\n            (substring x-str 0 shift-mod))))))\n\
    \  (number->string (shift-digit x shift)))\n", "  (define (shift-helper x shift\
    \ result)\n    (if (zero? x)\n        result\n        (shift-helper (quotient\
    \ x 10)\n                      (if (zero? shift)\n                          (length\
    \ (number->string x))\n                          (- shift 1))\n              \
    \        (string-append (number->string (remainder x 10))\n                  \
    \                   result))))\n  (shift-helper x shift \"\"))\n", "  (define\
    \ (shift-digit x)\n    (if (zero? x)\n        0\n        (remainder (quotient\
    \ x 10) 10)))\n  (define (shift-digits x)\n    (if (zero? x)\n        0\n    \
    \    (+ (* 10 (shift-digits (quotient x 10)))\n           (shift-digit x))))\n\
    \  (define (shift-digits-right x shift)\n    (if (zero? shift)\n        x\n  \
    \      (shift-digits-right (shift-digits x) (- shift 1))))\n  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        0\n        (+ (* 10 (reverse-digits (quotient\
    \ x 10)))\n           (remainder x 10))))\n  (define (num-digits x)\n    (if (zero?\
    \ x)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define (shift-digits-right-or-reverse\
    \ x shift)\n    (if (> shift (num-digits x))\n        (reverse-digits x)\n   \
    \     (shift-digits-right x shift)))\n  (number->string (shift-digits-right-or-reverse\
    \ x shift)))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n  \
    \      x\n        (shift-helper (string-append (substring x 1) (substring x 0\
    \ 1)) (- shift 1))))\n  (shift-helper (number->string x) (modulo shift (string-length\
    \ (number->string x)))))\n", "  (define (shift-right lst shift)\n    (if (= shift\
    \ 0)\n        lst\n        (shift-right (append (cdr lst) (list (car lst))) (-\
    \ shift 1))))\n  (define (reverse-list lst)\n    (if (null? lst)\n        '()\n\
    \        (append (reverse-list (cdr lst)) (list (car lst)))))\n  (define (digits\
    \ x)\n    (if (= x 0)\n        '()\n        (append (digits (quotient x 10)) (list\
    \ (remainder x 10)))))\n  (define (stringify lst)\n    (if (null? lst)\n     \
    \   \"\"\n        (string-append (number->string (car lst)) (stringify (cdr lst)))))\n\
    \  (if (< shift (length (digits x)))\n      (stringify (shift-right (digits x)\
    \ shift))\n      (stringify (reverse-list (digits x)))))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (cond\n      [(zero? shift) (string-join result)]\n   \
    \   [(zero? x) (string-join result)]\n      [else (circular_shift_helper (quotient\
    \ x 10) (sub1 shift) (cons (number->string (remainder x 10)) result))]))\n  (circular_shift_helper\
    \ x shift '()))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-helper (string-append (substring x 1) (substring x\
    \ 0 1)) (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (digits-to-string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (reverse-digits\
    \ digits)\n    (if (null? digits)\n        '()\n        (append (reverse-digits\
    \ (cdr digits)) (list (car digits)))))\n  (define digits (shift-digits x shift))\n\
    \  (if (> shift (length digits))\n      (digits-to-string (reverse-digits digits))\n\
    \      (digits-to-string (shift-digits-right digits shift))))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (= x 0)\n        '()\n        (cons (remainder x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        \"\"\n        (string-append (number->string (car digits)) (digits->string\
    \ (cdr digits)))))\n  (define (shift-digits-right digits shift)\n    (if (= shift\
    \ 0)\n        digits\n        (shift-digits-right (append (cdr digits) (list (car\
    \ digits))) (- shift 1))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (circular_shift_helper x shift result)\n  \
    \  (if (zero? x)\n        result\n        (circular_shift_helper (quotient x 10)\n\
    \                               (modulo shift 1)\n                           \
    \    (string-append (number->string (modulo x 10))\n                         \
    \                     result))))\n  (circular_shift_helper x shift \"\"))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (= x 0)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient x\
    \ 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (= shift\
    \ 0)\n        digits\n        (shift-digits-right (append (cdr digits) (list (car\
    \ digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        '()\n        (cons (remainder x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-right xs shift)\n    (if (zero? shift)\n        xs\n       \
    \ (shift-right (append (cdr xs) (list (car xs))) (- shift 1))))\n  (define (digits-to-string\
    \ xs)\n    (if (null? xs)\n        \"\"\n        (string-append (number->string\
    \ (car xs)) (digits-to-string (cdr xs)))))\n  (digits-to-string (shift-right (shift-digits\
    \ x shift) shift)))\n", "  (define (circular_shift_helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (circular_shift_helper (modulo x 10) (- shift 1))))\n\
    \  (define (reverse_digits x)\n    (define (reverse_digits_helper x acc)\n   \
    \   (if (zero? x)\n          acc\n          (reverse_digits_helper (quotient x\
    \ 10) (+ (* acc 10) (modulo x 10)))))\n    (reverse_digits_helper x 0))\n  (define\
    \ (number_of_digits x)\n    (define (number_of_digits_helper x acc)\n      (if\
    \ (zero? x)\n          acc\n          (number_of_digits_helper (quotient x 10)\
    \ (+ acc 1))))\n    (number_of_digits_helper x 0))\n  (define (shift_digits x\
    \ shift)\n    (define (shift_digits_helper x shift acc)\n      (if (zero? x)\n\
    \          acc\n          (shift_digits_helper (quotient x 10) (- shift 1) (+\
    \ (* acc 10) (modulo x 10)))))\n    (shift_digits_helper x shift 0))\n  (define\
    \ (shift_digits_reverse x shift)\n    (define (shift_digits_reverse_helper x shift\
    \ acc)\n      (if (zero? x)\n          acc\n          (shift_digits_reverse_helper\
    \ (quotient x 10) (- shift 1) (+ (* acc 10) (modulo x 10)))))\n    (shift_digits_reverse_helper\
    \ x shift 0))\n  (if (> shift (number_of_digits x))\n      (number->string (reverse_digits\
    \ x))\n      (number->string (shift_digits x shift))))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (reverse-digits x)\n    (if (zero? x)\n\
    \        '()\n        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n\
    \  (define (digits-to-string digits)\n    (if (null? digits)\n        \"\"\n \
    \       (string-append (number->string (car digits)) (digits-to-string (cdr digits)))))\n\
    \  (if (> shift (length (shift-digits x shift)))\n      (digits-to-string (reverse-digits\
    \ x))\n      (digits-to-string (append (cdr (shift-digits x shift)) (list (car\
    \ (shift-digits x shift)))))))\n", "  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-iter x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-iter\
    \ (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (shift-digits x shift)\n    (define (shift-digits-iter x shift\
    \ acc)\n      (if (zero? x)\n          acc\n          (shift-digits-iter (quotient\
    \ x 10) shift (+ (* acc 10) (remainder x 10)))))\n    (shift-digits-iter x shift\
    \ 0))\n  (define (num-digits x)\n    (define (num-digits-iter x acc)\n      (if\
    \ (zero? x)\n          acc\n          (num-digits-iter (quotient x 10) (+ acc\
    \ 1))))\n    (num-digits-iter x 0))\n  (if (> shift (num-digits x))\n      (number->string\
    \ (reverse-digits x))\n      (number->string (shift-digits x shift))))\n", " \
    \ (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (remainder x 10) (shift-digits (quotient x 10) shift))))\n  (define (digits-to-string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits\
    \ x shift)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ shift)\n        result\n        (let ([digit (modulo x 10)])\n          (circular_shift_helper\
    \ (quotient x 10) (- shift 1) (string-append (number->string digit) result)))))\n\
    \  (circular_shift_helper x shift \"\"))\n", "  (define (helper x shift acc)\n\
    \    (if (zero? x)\n        (number->string (reverse acc))\n        (helper (quotient\
    \ x 10)\n                shift\n                (cons (remainder x 10) acc))))\n\
    \  (if (> shift (length (number->string x)))\n      (reverse (number->string x))\n\
    \      (helper x shift '())))\n", "  (define (shift-digits x shift)\n    (if (zero?\
    \ x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digit digit shift)\n    (if (zero? shift)\n        digit\n   \
    \     (shift-digit (remainder (+ digit shift) 10) (- shift 1))))\n  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        \"\"\n        (string-append (shift-digits\
    \ (quotient x 10) shift)\n                       (number->string (shift-digit\
    \ (remainder x 10) shift)))))\n  (shift-digits x shift))\n", "  (define (shift-digits\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits (quotient\
    \ x 10) (- shift 1))]))\n  (define (shift-digits-right x shift)\n    (cond\n \
    \     [(zero? shift) x]\n      [else (shift-digits-right (quotient x 10) (- shift\
    \ 1))]))\n  (define (shift-digits-left x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-digits-left (quotient x 10) (- shift 1))]))\n  (define\
    \ (shift-digits-left-helper x shift)\n    (cond\n      [(zero? shift) x]\n   \
    \   [else (shift-digits-left-helper (quotient x 10) (- shift 1))]))\n  (define\
    \ (shift-digits-right-helper x shift)\n    (cond\n      [(zero? shift) x]\n  \
    \    [else (shift-digits-right-helper (quotient x 10) (- shift 1))]))\n  (define\
    \ (shift-digits-helper x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-digits-helper (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-helper-helper-helper-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-helper-helper-helper-helper\
    \ (quotient x 10) (- shift 1))]))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (reverse-digits x)\n    (if (zero? x)\n        '()\n\
    \        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (digits->string\
    \ (shift-digits-right (shift-digits x shift) shift)))\n", "  (define (circular_shift_helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper (modulo\
    \ (quotient x 10) (expt 10 shift)) (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (shift-right x shift)\n    (if (= shift 0)\n     \
    \   x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-left (* x 10) (- shift\
    \ 1))))\n  (define (reverse x)\n    (define (reverse-iter x acc)\n      (if (=\
    \ x 0)\n          acc\n          (reverse-iter (quotient x 10) (+ (* acc 10) (remainder\
    \ x 10)))))\n    (reverse-iter x 0))\n  (define (num-digits x)\n    (define (num-digits-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (num-digits-iter (quotient\
    \ x 10) (+ acc 1))))\n    (num-digits-iter x 0))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-iter x acc)\n      (if (= x 0)\n         \
    \ acc\n          (digits-to-string-iter (quotient x 10) (string-append (number->string\
    \ (remainder x 10)) acc))))\n    (digits-to-string-iter x \"\"))\n  (define (shift-digits\
    \ x shift)\n    (if (> shift (num-digits x))\n        (digits-to-string (reverse\
    \ x))\n        (digits-to-string (shift-left (shift-right x shift) (- (num-digits\
    \ x) shift)))))\n  (shift-digits x shift))\n", "  (define (helper x shift)\n \
    \   (if (zero? x)\n        '()\n        (cons (remainder x 10) (helper (quotient\
    \ x 10) (- shift 1)))))\n  (define (reverse lst)\n    (if (null? lst)\n      \
    \  '()\n        (append (reverse (cdr lst)) (list (car lst)))))\n  (define (shift-right\
    \ lst shift)\n    (if (zero? shift)\n        lst\n        (shift-right (append\
    \ (cdr lst) (list (car lst))) (- shift 1))))\n  (define (to-string lst)\n    (if\
    \ (null? lst)\n        \"\"\n        (string-append (number->string (car lst))\
    \ (to-string (cdr lst)))))\n  (to-string (shift-right (reverse (helper x shift))\
    \ shift)))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n    \
    \    x\n        (shift-helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (rotate xs)\n    (if (null? xs)\n\
    \        '()\n        (append (cdr xs) (list (car xs)))))\n  (define (shift xs)\n\
    \    (if (= shift 0)\n        xs\n        (shift (rotate xs))))\n  (define (digits\
    \ x)\n    (if (= x 0)\n        '()\n        (cons (modulo x 10) (digits (quotient\
    \ x 10)))))\n  (define (stringify xs)\n    (if (null? xs)\n        \"\"\n    \
    \    (string-append (number->string (car xs)) (stringify (cdr xs)))))\n  (stringify\
    \ (shift (digits x))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (cs-helper x shift)\n    (cond\n      [(= shift 0) x]\n      [else (cs-helper\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))]))\n  (cs-helper\
    \ (number->string x) shift))\n", "  (define (helper x shift)\n    (if (= shift\
    \ 0)\n        x\n        (helper (string-append (substring x 1) (substring x 0\
    \ 1)) (- shift 1))))\n  (helper (number->string x) shift))\n", "  (define (shift-helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (shift-helper (quotient\
    \ x 10)\n                      (modulo shift 1)\n                      (string-append\
    \ (number->string (modulo x 10)) result))))\n  (shift-helper x shift \"\"))\n",
  "  (define (shift-helper x shift)\n    (if (= shift 0)\n        x\n        (shift-helper\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n  (shift-helper\
    \ (number->string x) shift))\n", "  (define (helper x shift)\n    (if (= shift\
    \ 0)\n        x\n        (helper (string-append (substring x 1) (substring x 0\
    \ 1)) (- shift 1))))\n  (if (> shift (string-length x))\n      (string-reverse\
    \ x)\n      (helper x shift)))\n", "  (define (shift-right x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define\
    \ (shift-left x shift)\n    (if (zero? shift)\n        x\n        (shift-left\
    \ (* x 10) (- shift 1))))\n  (define (reverse x)\n    (if (zero? x)\n        x\n\
    \        (+ (* (remainder x 10) (reverse (quotient x 10))) (remainder x 10))))\n\
    \  (define (digits x)\n    (if (zero? x)\n        0\n        (+ 1 (digits (quotient\
    \ x 10)))))\n  (define (digits-to-string x)\n    (if (zero? x)\n        \"\"\n\
    \        (string-append (number->string (remainder x 10)) (digits-to-string (quotient\
    \ x 10)))))\n  (if (> shift (digits x))\n      (digits-to-string (reverse x))\n\
    \      (digits-to-string (shift-left (shift-right x shift) shift))))\n", "  (define\
    \ (circular_shift_helper x shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper\
    \ (modulo (quotient x 10) (expt 10 shift)) (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (shift-right x shift)\n    (if (zero? shift)\n   \
    \     x\n        (shift-right (modulo x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-left (* x 10) (-\
    \ shift 1))))\n  (define (shift-digits x shift)\n    (if (zero? shift)\n     \
    \   x\n        (shift-digits (+ (shift-left x shift) (shift-right x (- shift)))\
    \ (- shift 1))))\n  (number->string (shift-digits x shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (= x 0)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (reverse-digits x)\n    (if (= x 0)\n \
    \       '()\n        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n\
    \  (define (digits->string digits)\n    (if (null? digits)\n        \"\"\n   \
    \     (string-append (number->string (car digits)) (digits->string (cdr digits)))))\n\
    \  (if (< shift (length (shift-digits x shift)))\n      (digits->string (reverse-digits\
    \ x))\n      (digits->string (append (reverse-digits (quotient x (expt 10 shift)))\n\
    \                              (reverse-digits (modulo x (expt 10 shift)))))))\n",
  "  (number->string (circular-shift-number x shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-right x shift)\n    (define\
    \ (shift-right-helper x shift)\n      (if (= shift 0)\n          x\n         \
    \ (shift-right-helper (quotient x 10) (- shift 1))))\n    (define (shift-left\
    \ x shift)\n      (define (shift-left-helper x shift)\n        (if (= shift 0)\n\
    \            x\n            (shift-left-helper (* x 10) (- shift 1))))\n     \
    \ (shift-left-helper x shift))\n    (define (shift-right-left x shift)\n     \
    \ (define (shift-right-left-helper x shift)\n        (if (= shift 0)\n       \
    \     x\n            (shift-right-left-helper (shift-right x 1) (- shift 1))))\n\
    \      (shift-right-left-helper x shift))\n    (define (shift-left-right x shift)\n\
    \      (define (shift-left-right-helper x shift)\n        (if (= shift 0)\n  \
    \          x\n            (shift-left-right-helper (shift-left x 1) (- shift 1))))\n\
    \      (shift-left-right-helper x shift))\n    (if (< shift 0)\n        (shift-left-right\
    \ x (- shift))\n        (shift-right-left x shift)))\n  (define (digits x)\n \
    \   (define (digits-helper x)\n      (if (= x 0)\n          0\n          (+ 1\
    \ (digits-helper (quotient x 10)))))\n    (digits-helper x))\n  (define (shift-digits\
    \ x shift)\n    (define (shift-digits-helper x shift)\n      (if (= shift 0)\n\
    \          x\n          (shift-digits-helper (shift-right x 1) (- shift 1))))\n\
    \    (shift-digits-helper x shift))\n  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-helper x)\n      (if (= x 0)\n          0\n          (+ (* (remainder\
    \ x 10) (shift-digits 10 (- (digits x) 1)))\n             (reverse-digits-helper\
    \ (quotient x", "  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter x 0))\n \
    \ (define (shift-digits x shift)\n    (define (shift-digits-iter x shift acc)\n\
    \      (if (zero? x)\n          acc\n          (shift-digits-iter (quotient x\
    \ 10)\n                             (if (zero? shift)\n                      \
    \           shift\n                                 (sub1 shift))\n          \
    \                   (+ (* acc 10) (remainder x 10)))))\n    (shift-digits-iter\
    \ x shift 0))\n  (number->string (if (> shift (number->string x |> string-length))\n\
    \                      (reverse-digits x)\n                      (shift-digits\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n     \
    \   x\n        (let* ([x-str (number->string x)]\n               [x-len (string-length\
    \ x-str)]\n               [shift (modulo shift x-len)])\n          (string-append\
    \ (substring x-str shift x-len)\n                         (substring x-str 0 shift)))))\n\
    \  (shift-digits x shift))\n", "  (define (helper x shift)\n    (if (= x 0)\n\
    \        \"\"\n        (string-append (helper (quotient x 10) (- shift 1))\n \
    \                      (number->string (remainder x 10)))))\n  (if (< shift 0)\n\
    \      (string-reverse (helper x (- shift)))\n      (helper x shift)))\n", " \
    \ (define (shift-helper x shift)\n    (cond\n      [(= shift 0) x]\n      [else\
    \ (shift-helper (string-append (substring x 1) (substring x 0 1)) (- shift 1))]))\n\
    \  (shift-helper (number->string x) shift))\n", "  (define (shift-helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-helper (string-append (substring\
    \ x 1) (substring x 0 1)) (- shift 1))))\n  (shift-helper (number->string x) shift))\n",
  "  (define (helper x shift)\n    (if (zero? shift)\n        (number->string x)\n\
    \        (let ([x-str (number->string x)])\n          (string-append (substring\
    \ x-str shift)\n                         (substring x-str 0 shift)))))\n  (let\
    \ ([x-str (number->string x)])\n    (if (> shift (string-length x-str))\n    \
    \    (string-reverse x-str)\n        (helper x shift))))\n", "  (define (shift-right\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-right (quotient x 10)\
    \ (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift 0)\n      \
    \  x\n        (shift-left (* x 10) (- shift 1))))\n  (define (shift-digits x shift)\n\
    \    (if (= shift 0)\n        x\n        (shift-digits (+ (shift-left (remainder\
    \ x 10) shift)\n                        (shift-right x 1))\n                 \
    \    (- shift 1))))\n  (define (num-digits x)\n    (if (= x 0)\n        0\n  \
    \      (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits x)\n  \
    \  (if (= x 0)\n        0\n        (+ (* (remainder x 10) (expt 10 (- (num-digits\
    \ x) 1)))\n           (reverse-digits (quotient x 10)))))\n  (if (> shift (num-digits\
    \ x))\n      (number->string (reverse-digits x))\n      (number->string (shift-digits\
    \ x shift))))\n", "  (define (circular_shift_helper x shift)\n    (cond\n    \
    \  [(= shift 0) x]\n      [else (circular_shift_helper (string-append (substring\
    \ x 1) (substring x 0 1)) (- shift 1))]))\n  (cond\n    [(> shift (string-length\
    \ x)) (reverse x)]\n    [else (circular_shift_helper x shift)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
