name: HumanEval_18_how_many_times
language: rkt
prompt: "#lang racket\n\n;; Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n;; >>> (how_many_times \"\" \"a\"\
  )\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times \"\
  aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (define (how_many_times_iter string substring count)\n    (cond [(empty?\
    \ string) count]\n          [(empty? substring) count]\n          [(and (equal?\
    \ (first string) (first substring))\n                (equal? (rest string) (rest\
    \ substring)))\n           (how_many_times_iter (rest string) substring (+ count\
    \ 1))]\n          [else (how_many_times_iter (rest string) substring count)]))\n\
    \  (how_many_times_iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop-right string 1) substring (+ count 1))\n\
    \        count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (count-substring string\
    \ substring)\n    (define (count-substring-helper string substring count)\n  \
    \    (if (string-contains string substring)\n          (count-substring-helper\
    \ (substring string (+ 1 (string-index string substring))) substring (+ 1 count))\n\
    \          count))\n    (count-substring-helper string substring 0))\n  (count-substring\
    \ string substring))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string=? (substring string\
    \ 0 (string-length substring)) substring)\n       (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))]\n      [else (how_many_times-iter (substring\
    \ string 1) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring) (how_many_times-iter (substring string 1) substring (+ count 1))]\n\
    \      [else (how_many_times-iter (substring string 1) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (string-drop string 1) substring))\n\
    \      0))\n", "  (define (how_many_times-iter string substring index count)\n\
    \    (if (string-index string substring index)\n        (how_many_times-iter string\
    \ substring (+ 1 (string-index string substring index)) (+ 1 count))\n       \
    \ count))\n  (how_many_times-iter string substring 0 0))\n", "  (define (how_many_times-helper\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-helper (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-helper string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string=? (substring string 0 (string-length\
    \ substring)) substring) (how_many_times-iter (substring string 1) substring (+\
    \ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(empty? substring) 0]\n    [(equal? (first string) (first substring))\
    \ (+ 1 (how_many_times (rest string) (rest substring)))]\n    [else (how_many_times\
    \ (rest string) substring)]))\n", "  (if (string-contains string substring)\n\
    \      (+ 1 (how_many_times (substring string (+ 1 (string-index string substring)))\
    \ substring))\n      0))\n", "  (define (how_many_times-iter string substring\
    \ count)\n    (if (string-contains string substring)\n        (how_many_times-iter\
    \ (string-drop string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(=\
    \ i (string-length string)) count]\n      [(string=? (substring string i (+ i\
    \ (string-length substring))) substring)\n       (loop (+ i 1) (+ count 1))]\n\
    \      [else (loop (+ i 1) count)])))\n", "  (define (how_many_times-iter string\
    \ substring count)\n    (if (string-contains string substring)\n        (how_many_times-iter\
    \ (string-drop string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index string substring))) substring))\n\
    \      0))\n", "  (define (how_many_times-iter string substring count)\n    (if\
    \ (string-contains string substring)\n        (how_many_times-iter (string-drop\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (cond\n    [(empty? string) 0]\n    [(empty? substring)\
    \ 0]\n    [(string=? (substring string 0 (string-length substring)) substring)\n\
    \     (+ 1 (how_many_times (substring string 1) substring))]\n    [else (how_many_times\
    \ (substring string 1) substring)]))\n", "  (if (string-contains string substring)\n\
    \      (+ 1 (how_many_times (substring string (+ 1 (string-index string substring)))\
    \ substring))\n      0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
