name: HumanEval_140_fix_spaces
language: rkt
prompt: "#lang racket\n\n;; Given a string text, replace all spaces in it with underscores,\
  \ \n;; and if a string has more than 2 consecutive spaces, \n;; then replace all\
  \ consecutive spaces with - \n;; >>> (fix_spaces \" Example\")\n;; \"Example\"\n\
  ;; >>> (fix_spaces \" Example 1\")\n;; \"Example_1\"\n;; >>> (fix_spaces \" Example\
  \ 2\")\n;; \"_Example_2\"\n;; >>> (fix_spaces \" Example 3\")\n;; \"_Example-3\"\
  \n(define (fix_spaces text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n\
  \    (check-equal? (candidate \"Example\") \"Example\")\n    (check-equal? (candidate\
  \ \"Mudasir Hanif \") \"Mudasir_Hanif_\")\n    (check-equal? (candidate \"Yellow\
  \ Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\")\n    (check-equal?\
  \ (candidate \"Exa   mple\") \"Exa-mple\")\n    (check-equal? (candidate \"   Exa\
  \ 1 2 2 mple\") \"-Exa_1_2_2_mple\")\n))\n\n(test-humaneval)"
completions: ["  (define (fix_spaces_helper text count)\n    (cond\n      [(empty?\
    \ text) (if (= count 2) \"-\" \"\" )]\n      [(char=? (first text) #\\space) (string-append\
    \ (if (= count 2) \"-\" \"\") \"_\" (fix_spaces_helper (rest text) (+ count 1)))]\n\
    \      [else (string-append (if (= count 2) \"-\" \"\") (string (first text))\
    \ (fix_spaces_helper (rest text) 0))]))\n  (fix_spaces_helper text 0))\n", " \
    \ (define (fix_spaces_helper text count)\n    (cond\n      [(empty? text) \"\"\
    ]\n      [(char=? (first text) #\\space)\n       (if (> count 2)\n           (string-append\
    \ \"_\" (fix_spaces_helper (rest text) 0))\n           (string-append \"-\" (fix_spaces_helper\
    \ (rest text) (+ count 1))))]\n      [else (string-append (string (first text))\
    \ (fix_spaces_helper (rest text) 0))]))\n  (fix_spaces_helper text 0))\n", " \
    \ (define (replace-spaces text)\n    (if (empty? text)\n        text\n       \
    \ (if (char=? (first text) #\\space)\n            (cons #\\_ (replace-spaces (rest\
    \ text)))\n            (cons (first text) (replace-spaces (rest text))))))\n \
    \ (define (replace-consecutive-spaces text)\n    (if (empty? text)\n        text\n\
    \        (if (char=? (first text) #\\_)\n            (cons #\\- (replace-consecutive-spaces\
    \ (rest text)))\n            (cons (first text) (replace-consecutive-spaces (rest\
    \ text))))))\n  (replace-consecutive-spaces (replace-spaces text)))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(empty? (rest text)) (first text)]\n    [(char=?\
    \ (first text) #\\space)\n     (if (char=? (first (rest text)) #\\space)\n   \
    \      (cons #\\- (fix_spaces (rest (rest text))))\n         (cons #\\_ (fix_spaces\
    \ (rest text))))]\n    [else (cons (first text) (fix_spaces (rest text)))]))\n",
  "  (cond\n    [(empty? text) empty]\n    [(equal? (first text) #\\space)\n     (append\
    \ (list #\\-))\n     (fix_spaces (rest text))]\n    [else\n     (append (list\
    \ (first text)))\n     (fix_spaces (rest text))]))\n", "  (define (fix_spaces-helper\
    \ text i)\n    (if (= i (string-length text))\n        text\n        (let ((c\
    \ (string-ref text i)))\n          (if (= c #\\space)\n              (let ((next-c\
    \ (string-ref text (+ i 1))))\n                (if (= next-c #\\space)\n     \
    \               (let ((next-next-c (string-ref text (+ i 2))))\n             \
    \         (if (= next-next-c #\\space)\n                          (fix_spaces-helper\
    \ (string-append (substring text 0 i) \"-\") (+ i 1))\n                      \
    \    (fix_spaces-helper (string-append (substring text 0 i) \"_\") (+ i 1))))\n\
    \                    (fix_spaces-helper (string-append (substring text 0 i) \"\
    _\") (+ i 1))))\n              (fix_spaces-helper text (+ i 1)))))\n    )\n  (fix_spaces-helper\
    \ text 0))\n", "  (define (replace-spaces text)\n    (cond\n      [(empty? text)\
    \ empty]\n      [(equal? (first text) #\\space) (cons #\\_ (replace-spaces (rest\
    \ text)))]\n      [else (cons (first text) (replace-spaces (rest text)))]))\n\
    \  (define (replace-consecutive-spaces text)\n    (cond\n      [(empty? text)\
    \ empty]\n      [(and (equal? (first text) #\\_) (equal? (second text) #\\_))\n\
    \       (cons #\\- (replace-consecutive-spaces (rest (rest text))))]\n      [else\
    \ (cons (first text) (replace-consecutive-spaces (rest text)))]))\n  (replace-consecutive-spaces\
    \ (replace-spaces text)))\n", "  (define (helper text count)\n    (cond ((null?\
    \ text) \"\")\n          ((char=? (car text) #\\space)\n           (if (> count\
    \ 2)\n               (string-append \"_\" (helper (cdr text) 0))\n           \
    \    (string-append \"_\" (helper (cdr text) (+ count 1)))))\n          (else\
    \ (string-append (string (car text)) (helper (cdr text) 0)))))\n  (helper text\
    \ 0))\n", "  (define (fix_spaces_helper text count)\n    (cond\n      [(empty?\
    \ text) empty]\n      [(char=? (first text) #\\space)\n       (if (> count 2)\n\
    \           (string-append \"_\" (fix_spaces_helper (rest text) (+ count 1)))\n\
    \           (string-append \"-\" (fix_spaces_helper (rest text) (+ count 1))))]\n\
    \      [else (string-append (string (first text)) (fix_spaces_helper (rest text)\
    \ 0))]))\n  (fix_spaces_helper text 0))\n", "  (define (fix_spaces_helper text\
    \ count)\n    (cond\n      [(empty? text) (if (= count 2) \"_\" \"\")]\n     \
    \ [(char=? (first text) #\\space)\n       (if (= count 2)\n           (string-append\
    \ \"_\" (fix_spaces_helper (rest text) 0))\n           (string-append \"-\" (fix_spaces_helper\
    \ (rest text) (+ count 1))))]\n      [else (string-append (string (first text))\
    \ (fix_spaces_helper (rest text) 0))]))\n  (fix_spaces_helper text 0))\n", " \
    \ (cond\n    [(empty? text) empty]\n    [(char=? (first text) #\\space)\n    \
    \ (string-append\n      (if (char=? (first (rest text)) #\\space)\n          \"\
    -\"\n          \"_\")\n      (fix_spaces (rest text)))]\n    [else\n     (string-append\n\
    \      (string (first text))\n      (fix_spaces (rest text)))]))\n", "  (define\
    \ (replace-spaces text)\n    (if (string-contains text #\\space)\n        (string-replace\
    \ text #\\space #\\_)\n        text))\n  (define (replace-consecutive-spaces text)\n\
    \    (if (string-contains text \"__\")\n        (string-replace text \"__\" \"\
    -\")\n        text))\n  (replace-consecutive-spaces (replace-spaces text)))\n",
  "  (define (fix_spaces_helper text count)\n    (cond\n      [(empty? text) empty]\n\
    \      [(char=? (first text) #\\space)\n       (if (> count 2)\n           (string-append\
    \ \"_\" (fix_spaces_helper (rest text) 0))\n           (fix_spaces_helper (rest\
    \ text) (+ count 1)))]\n      [else\n       (string-append (string (first text))\n\
    \                      (fix_spaces_helper (rest text) 0))]))\n  (fix_spaces_helper\
    \ text 0))\n", "  (define (fix_spaces-iter text count)\n    (cond ((string=? text\
    \ \"\") \"\")\n          ((string=? (substring text 0 1) \" \")\n           (string-append\
    \ (if (> count 2) \"-\" \"_\")\n                          (fix_spaces-iter (substring\
    \ text 1) (+ count 1))))\n          (else (string-append (substring text 0 1)\n\
    \                               (fix_spaces-iter (substring text 1) 0)))))\n \
    \ (fix_spaces-iter text 0))\n", "  (define (fix_spaces_iter text count)\n    (cond\n\
    \      [(empty? text) \"\"]\n      [(equal? (first text) #\\space)\n       (cond\n\
    \         [(> count 2) (string-append \"_\" (fix_spaces_iter (rest text) 0))]\n\
    \         [else (string-append \"-\" (fix_spaces_iter (rest text) (+ count 1)))])]\n\
    \      [else (string-append (string (first text)) (fix_spaces_iter (rest text)\
    \ 0))]))\n  (fix_spaces_iter text 0))\n", "  (define (fix_spaces_iter text acc)\n\
    \    (cond\n      [(empty? text) (reverse acc)]\n      [(char=? (first text) #\\\
    space)\n       (define (count_spaces text)\n         (cond\n           [(empty?\
    \ text) 0]\n           [(char=? (first text) #\\space)\n            (+ 1 (count_spaces\
    \ (rest text)))]\n           [else 0]))\n       (define (replace_spaces text n)\n\
    \         (cond\n           [(empty? text) '()]\n           [(char=? (first text)\
    \ #\\space)\n            (if (> n 2)\n                (cons #\\- (replace_spaces\
    \ (rest text) (- n 1)))\n                (cons #\\_ (replace_spaces (rest text)\
    \ (- n 1))))]\n           [else (cons (first text) (replace_spaces (rest text)\
    \ n))]))\n       (fix_spaces_iter (replace_spaces text (count_spaces text)) acc)]\n\
    \      [else (fix_spaces_iter (rest text) (cons (first text) acc))]))\n  (fix_spaces_iter\
    \ text '()))\n", "  (define (fix_spaces-helper text acc)\n    (cond\n      [(empty?\
    \ text) (reverse acc)]\n      [(char=? (first text) #\\space)\n       (if (char=?\
    \ (first acc) #\\space)\n           (fix_spaces-helper (rest text) (cons #\\-\
    \ acc))\n           (fix_spaces-helper (rest text) (cons #\\_ acc)))]\n      [else\
    \ (fix_spaces-helper (rest text) (cons (first text) acc))]))\n  (fix_spaces-helper\
    \ text empty))\n", "  (regexp-replace* #rx\" +\" text \"_\" 'pre \"-\"))\n", " \
    \ (cond\n    [(empty? text) empty]\n    [(char=? (first text) #\\space)\n    \
    \ (string-append \"_\" (fix_spaces (rest text)))]\n    [(char=? (first text) #\\\
    _)\n     (string-append \"-\" (fix_spaces (rest text)))]\n    [else\n     (string-append\
    \ (string (first text)) (fix_spaces (rest text)))]))\n</code>\n", "  (define (fix_spaces_helper\
    \ text acc)\n    (cond\n      [(empty? text) (reverse acc)]\n      [(char=? (first\
    \ text) #\\ )\n       (cond\n         [(char=? (first acc) #\\ )\n          (cond\n\
    \            [(char=? (second acc) #\\ )\n             (fix_spaces_helper (rest\
    \ text) (cons #\\- acc))]\n            [else (fix_spaces_helper (rest text) (cons\
    \ #\\_ acc))])]\n         [else (fix_spaces_helper (rest text) (cons #\\_ acc))])]\n\
    \      [else (fix_spaces_helper (rest text) (cons (first text) acc))]))\n  (fix_spaces_helper\
    \ text '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
