name: HumanEval_124_valid_date
language: rkt
prompt: "#lang racket\n\n;; You have to write a function which validates a given date\
  \ string and\n;; returns True if the date is valid otherwise False.\n;; The date\
  \ is valid if all of the following rules are satisfied:\n;; 1. The date string is\
  \ not empty.\n;; 2. The number of days is not less than 1 or higher than 31 days\
  \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
  \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or\
  \ higher than 29 for the month 2.\n;; 3. The months should not be less than 1 or\
  \ higher than 12.\n;; 4. The date should be in the format: mm-dd-yyyy\n;; >>> (valid_date\
  \ \"03-11-2000\")\n;; #t\n;; >>> (valid_date \"15-01-2012\")\n;; #f\n;; >>> (valid_date\
  \ \"04-0-2040\")\n;; #f\n;; >>> (valid_date \"06-04-2020\")\n;; #t\n;; >>> (valid_date\
  \ \"06/04/2020\")\n;; #f\n(define (valid_date date)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n\
  \    (check-equal? (candidate \"03-11-2000\") #t)\n    (check-equal? (candidate\
  \ \"15-01-2012\") #f)\n    (check-equal? (candidate \"04-0-2040\") #f)\n    (check-equal?\
  \ (candidate \"06-04-2020\") #t)\n    (check-equal? (candidate \"01-01-2007\") #t)\n\
  \    (check-equal? (candidate \"03-32-2011\") #f)\n    (check-equal? (candidate\
  \ \"\") #f)\n    (check-equal? (candidate \"04-31-3000\") #f)\n    (check-equal?\
  \ (candidate \"06-06-2005\") #t)\n    (check-equal? (candidate \"21-31-2000\") #f)\n\
  \    (check-equal? (candidate \"04-12-2003\") #t)\n    (check-equal? (candidate\
  \ \"04122003\") #f)\n    (check-equal? (candidate \"20030412\") #f)\n    (check-equal?\
  \ (candidate \"2003-04\") #f)\n    (check-equal? (candidate \"2003-04-12\") #f)\n\
  \    (check-equal? (candidate \"04-2003\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (valid-month month)\n    (and (not (string=? month \"\"))\n\
    \         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (string=? day \"\"))\n\
    \         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (string=? year \"\"\
    ))\n         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-format-2 date)\n    (string-match \"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))\n  (define (valid-date-format-3 date)\n    (string-match \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-4 date)\n    (string-match \"^[0-9]{4}/[0-9]{2}/[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-5 date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-6 date)\n    (string-match \"^[0-9]{2}/[0-9]{2}/[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-7 date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{1}$\"\
    \ date))\n  (define (valid-date-format-8 date", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (and\
    \ (<= 1 day) (<= day (cond ((or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) 31)\n                               \
    \   ((or (= month 4) (= month 6) (= month 9) (= month 11)) 30)\n             \
    \                     (else 29)))))\n  (define (valid-year year)\n    (and (<=\
    \ 1 year) (<= year 9999)))\n  (define (valid-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let ([parts (string-split\
    \ date #\\-)]\n               [month (string->number (list-ref parts 0))]\n  \
    \             [day (string->number (list-ref parts 1))]\n               [year\
    \ (string->number (list-ref parts 2))])\n           (and (valid-month month)\n\
    \                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (and (>= day 1)\n         (<= day\n             (cond\n    \
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) 31]\n               [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11)) 30]\n               [(= month 2) 29]))))\n  (define (valid-year\
    \ year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let\
    \ ([date-split (string-split date #\\-)]\n               [month (string->number\
    \ (list-ref date-split 0))]\n               [day (string->number (list-ref date-split\
    \ 1))]\n               [year (string->number (list-ref date-split 2))])\n    \
    \       (and (valid-month month)\n                (valid-day month day)\n    \
    \            (valid-year year)))))\n  (and (not (string=? date \"\"))\n      \
    \ (valid-date-format date)))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n                     (<= day 31))\n                    ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                     (<= day\
    \ 30))\n                    ((= month 2)\n                     (<= day 29))))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n\
    \  (define (valid-date-format date)\n    (and (string? date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (parse-date date)\n \
    \   (define (parse-month date)\n      (string->number (substring date 0 2)))\n\
    \  (define (parse-day date)\n    (string->number (substring date 3 5)))\n  (define\
    \ (parse-year date)\n    (string->number (substring date 6 10)))\n  (values (parse-month\
    \ date) (parse-day date) (parse-year date)))\n  (define (valid-date? date)\n \
    \   (define (valid-date-format? date)\n      (and (string? date)\n           (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n    (define (parse-date date)\n\
    \      (define (parse-month date)\n        (string->number (substring date 0 2)))\n\
    \      (define (parse-day date)\n        (string->number (substring date 3 5)))\n\
    \      (define (parse-year date)\n        (string->number (substring date 6 10)))\n\
    \      (values (parse-month date) (parse-day date) (parse-year date)))\n    (",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (<= 1 day)\n         (cond ((or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                (<= day 31))\n               ((or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                (<= day 30))\n               ((= month\
    \ 2)\n                (<= day 29)))))\n  (define (valid-year year)\n    (and (<=\
    \ 1900 year) (<= year 2100)))\n  (define (valid-date-format date)\n    (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (let* ([date-list (string-split date\
    \ \"-\")]\n              [month (string->number (list-ref date-list 0))]\n   \
    \           [day (string->number (list-ref date-list 1))]\n              [year\
    \ (string->number (list-ref date-list 2))])\n         (and (valid-month month)\n\
    \              (valid-day month day)\n              (valid-year year)))))", " \
    \ (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(= month 1) (and (>= day 1) (<= day\
    \ 31))]\n      [(= month 3) (and (>= day 1) (<= day 31))]\n      [(= month 5)\
    \ (and (>= day 1) (<= day 31))]\n      [(= month 7) (and (>= day 1) (<= day 31))]\n\
    \      [(= month 8) (and (>= day 1) (<= day 31))]\n      [(= month 10) (and (>=\
    \ day 1) (<= day 31))]\n      [(= month 12) (and (>= day 1) (<= day 31))]\n  \
    \    [(= month 4) (and (>= day 1) (<= day 30))]\n      [(= month 6) (and (>= day\
    \ 1) (<= day 30))]\n      [(= month 9) (and (>= day 1) (<= day 30))]\n      [(=\
    \ month 11) (and (>= day 1) (<= day 30))]\n      [(= month 2) (and (>= day 1)\
    \ (<= day 29))]\n      [else #f]))\n  (define (valid-year year)\n    (and (>=\
    \ year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (string-contains\
    \ date #\\-)(string-contains date #\\-)\n         (string-length date 11)))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-month\
    \ (string->number (substring date 0 2)))\n       (valid-day (string->number (substring\
    \ date 0 2))\n                  (string->number (substring date 3 5)))\n     \
    \  (valid-year (string->number (substring date 6 10)))))\n", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)])\n\
    \      (and (valid-month (string->number (vector-ref date-parts 0)))\n       \
    \    (valid-day (string->number (vector-ref date-parts 0))\n                 \
    \     (string->number (vector-ref date-parts 1)))\n           (valid-year (string->number\
    \ (vector-ref date-parts 2))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (<= 1 day) (<= day 31)]\n      [(and (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n       (<= 1 day) (<= day 30)]\n      [(=\
    \ month 2)\n       (<= 1 day) (<= day 29)]))\n  (define (valid-year year)\n  \
    \  (<= year 2020))\n  (define (valid-date-format date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-month (string->number (substring date 0 2)))\n       (valid-day\
    \ (string->number (substring date 0 2)) (string->number (substring date 3 5)))\n\
    \       (valid-year (string->number (substring date 6 10)))))\n", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([parts (string-split date \"-\")]\n    \
    \       [month (string->number (list-ref parts 0))]\n           [day (string->number\
    \ (list-ref parts 1))]\n           [year (string->number (list-ref parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-format\
    \ date)\n       (valid-date-parts date)))\n", "  (and (not (empty? date))\n  \
    \     (valid-date-format? date)\n       (valid-date-numbers? date)))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<=\
    \ 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (string-split date \"-\"))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (split-date date)]\n       \
    \    [month (string->number (list-ref date-parts 0))]\n           [day (string->number\
    \ (list-ref date-parts 1))]\n           [year (string->number (list-ref date-parts\
    \ 2))])\n      (and (valid-month month)\n           (valid-day month day)\n  \
    \         (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (not (empty? (string-&gt;number\
    \ month)))\n              (and (&lt;= 1 (string-&gt;number month))\n         \
    \          (&lt;= (string-&gt;number month) 12)))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (not (empty? (string-&gt;number day)))\n\
    \              (and (&lt;= 1 (string-&gt;number day))\n                   (&lt;=\
    \ (string-&gt;number day) 31)))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (not (empty? (string-&gt;number year)))\n    \
    \          (and (&lt;= 1 (string-&gt;number year))\n                   (&lt;=\
    \ (string-&gt;number year) 9999)))))\n  (define (valid-date-format date)\n   \
    \ (and (not (empty? date))\n         (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              #t)))\n  (and (valid-date-format date)\n       (and (valid-month\
    \ (substring date 0 2))\n            (and (valid-day (substring date 3 5))\n \
    \                (valid-year (substring date 6 10))))))\n</code>\n", "  (define\
    \ (valid-month month)\n    (and (not (string=? month \"\"))\n         (and (not\
    \ (string=? month \"0\"))\n              (and (not (string=? month \"00\"))\n\
    \                   (and (not (string=? month \"000\"))\n                    \
    \    (and (not (string=? month \"0000\"))\n                             (and (not\
    \ (string=? month \"00000\"))\n                                  (and (not (string=?\
    \ month \"000000\"))\n                                       (and (not (string=?\
    \ month \"0000000\"))\n                                            (and (not (string=?\
    \ month \"00000000\"))\n                                                 (and\
    \ (not (string=? month \"000000000\"))\n                                     \
    \                 (and (not (string=? month \"0000000000\"))\n               \
    \                                            (and (not (string=? month \"00000000000\"\
    ))\n                                                                (and (not\
    \ (string=? month \"000000000000\"))\n                                       \
    \                              (and (not (string=? month \"0000000000000\"))\n\
    \                                                                          (and\
    \ (not (string=? month \"00000000000000\"))\n                                \
    \                                               (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\n       \
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) 31]\n                  [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11)) 30]\n                  [(= month 2) 29]))))\n  (define\
    \ (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-date-format date)\n       (let* ([date-list\
    \ (string-split date \"-\")]\n              [month (string->number (list-ref date-list\
    \ 0))]\n              [day (string->number (list-ref date-list 1))]\n        \
    \      [year (string->number (list-ref date-list 2))])\n         (and (valid-month\
    \ month)\n              (valid-day month day)\n              (valid-year year)))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (<= 1 day)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                 (<= day 31)]\n                [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                 (<= day 30)]\n                [(= month\
    \ 2)\n                 (<= day 29)]))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (<= 1 year)))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date\
    \ date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n\
    \  (define (valid-date-parts date)\n    (let* ([parts (split-date date)]\n   \
    \        [month (string->number (cadr parts))]\n           [day (string->number\
    \ (caddr parts))]\n           [year (string->number (cadddr parts))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (integer?\
    \ (string->number month))\n         (and (<= 1 (string->number month))\n     \
    \         (<= (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (integer? (string->number day))\n         (and\
    \ (<= 1 (string->number day))\n              (<= (string->number day) 31))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (integer?\
    \ (string->number year))\n         (and (<= 1 (string->number year))\n       \
    \       (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match\
    \ #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date \"-\")]\n           [month (list-ref\
    \ date-parts 0)]\n           [day (list-ref date-parts 1)]\n           [year (list-ref\
    \ date-parts 2)])\n      (and (valid-month month)\n           (valid-day day)\n\
    \           (valid-year year))))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (cond\n    [(empty? date) #f]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (let* ([date-parts (string-split date #\\-)]\n            [month\
    \ (string->number (list-ref date-parts 0))]\n            [day (string->number\
    \ (list-ref date-parts 1))]\n            [year (string->number (list-ref date-parts\
    \ 2))])\n       (and (and (>= month 1) (<= month 12))\n            (and (>= day\
    \ 1) (<= day (days-in-month month year)))\n            (and (>= year 0) (<= year\
    \ 9999))))]\n    [else #f]))\n", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (not (empty? (string-&gt;number month)))\n       \
    \  (not (&lt; (string-&gt;number month) 1))\n         (not (&gt; (string-&gt;number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (empty? (string-&gt;number day)))\n         (not (&lt; (string-&gt;number\
    \ day) 1))\n         (not (&gt; (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (empty? (string-&gt;number\
    \ year)))\n         (not (&lt; (string-&gt;number year) 1))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n  \
    \       (not (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day-pair month day)\n    \
    \  (cond\n        [(or (equal? month \"01\")\n             (equal? month \"03\"\
    )\n             (equal? month \"05\")\n             (equal? month \"07\")\n  \
    \           (equal? month \"08\")\n             (equal? month \"10\")\n      \
    \       (equal? month \"12\"))\n         (not (&gt; (string-&gt;number day) 31))]\n\
    \        [(or (equal? month \"04\")\n             (equal? month \"06\")\n    \
    \         (equal? month \"09\")\n             (equal? month \"11\"))\n       \
    \  (not (&gt; (string-&gt;number day) 30))]\n        [(equal? month \"02\")\n\
    \         (not (&gt; (string-&gt;number day) 29))]))\n    (define (valid-leap-year\
    \ year", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer?\
    \ day)\n         (and (>= day 1)\n              (cond\n                [(or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                 (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n                 (<= day 30)]\n              \
    \  [(= month 2)\n                 (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (vector-ref date-parts 0))]\n\
    \           [day (string->number (vector-ref date-parts 1))]\n           [year\
    \ (string->number (vector-ref date-parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (and\
    \ (<= 1 day)\n         (cond\n           [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n            (<= day 31)]\n\
    \           [(or (= month 4) (= month 6) (= month 9) (= month 11))\n         \
    \   (<= day 30)]\n           [(= month 2)\n            (<= day 29)])))\n  (define\
    \ (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-month\
    \ (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number\
    \ (regexp-match #rx\"^[0-9]{2}-\" date))\n                  (string->number (regexp-match\
    \ #rx\"-[0-9]{2}-\" date)))\n       (valid-year (string->number (regexp-match\
    \ #rx\"-[0-9]{4}$\" date)))))\n", "  (define (valid-month month)\n    (and (>=\
    \ month 1) (<= month 12)))\n  (define (valid-day day month)\n    (cond\n     \
    \ [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-format date)\n       (valid-month (string->number\
    \ (regexp-replace #rx\"^[0-9]{2}-\" date \"\")))\n       (valid-day (string->number\
    \ (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-\" date \"\"))\n                  (string->number\
    \ (regexp-replace #rx\"^[0-9]{2}-\" date \"\")))\n       (valid-year (string->number\
    \ (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-\" date \"\")))))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (integer? (string->number month))\n\
    \         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (integer? (string->number day))\n         (and (<= 1 (string->number day))\n\
    \              (<= (string->number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (integer? (string->number year))\n   \
    \      (and (<= 1 (string->number year))\n              (<= (string->number year)\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))))\n  (define (valid-month-day-format date)\n    (let ((month (substring\
    \ date 0 2))\n          (day (substring date 3 5))\n          (year (substring\
    \ date 6 10)))\n      (and (valid-month month)\n           (valid-day day)\n \
    \          (valid-year year))))\n  (and (valid-date-format date)\n       (valid-month-day-format\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (>= day 1)\n              (cond ((or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                     (<= day 31))\n                    ((or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n                     (<= day 30))\n \
    \                   ((= month 2)\n                     (<= day 29))))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (>= year 1) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)]\n                [month (string->number (list-ref date-parts 0))]\n\
    \                [day (string->number (list-ref date-parts 1))]\n            \
    \    [year (string->number (list-ref date-parts 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (>= day 1)\n              (cond\n                [(or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<=\
    \ day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (>= year 1) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date \"-\")]\n                [month (string->number (list-ref date-parts 0))]\n\
    \                [day (string->number (list-ref date-parts 1))]\n            \
    \    [year (string->number (list-ref date-parts 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (and (>= day 1)\n         (<= day\n             (cond\n    \
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) 31]\n               [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11)) 30]\n               [(= month 2) 29]))))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not\
    \ (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date-parts\
    \ date)\n    (define (get-date-parts date)\n      (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n    (define (get-month date)\n      (string->number (vector-ref (get-date-parts\
    \ date) 1)))\n    (define (get-day date)\n      (string->number (vector-ref (get-date-parts\
    \ date) 2)))\n    (define (get-year date)\n      (string->number (vector-ref (get-date-parts\
    \ date) 3)))\n    (and (valid-month (get-month date))\n         (valid-day (get-month\
    \ date) (get-day date))\n         (valid-year (get-year date))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (&lt;= 1 month)\n              (&lt;= month 12))))\n  (define (valid-day\
    \ day)\n    (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;=\
    \ day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n        \
    \ (&gt;= year 0)))\n  (define (valid-date-string date-string)\n    (and (string?\
    \ date-string)\n         (not (string=? date-string \"\"))))\n  (define (valid-date-format\
    \ date-format)\n    (and (string? date-format)\n         (string=? date-format\
    \ \"mm-dd-yyyy\")))\n  (define (valid-date-parts date-parts)\n    (and (list?\
    \ date-parts)\n         (and (valid-month (car date-parts))\n              (and\
    \ (valid-day (cadr date-parts))\n                   (valid-year (caddr date-parts))))))\n\
    \  (define (valid-date-parts-format date-parts-format)\n    (and (list? date-parts-format)\n\
    \         (and (valid-date-format (car date-parts-format))\n              (valid-date-format\
    \ (cadr date-parts-format))\n              (valid-date-format (caddr date-parts-format)))))\n\
    \  (define (valid-date-parts-length date-parts-length)\n    (and (list? date-parts-length)\n\
    \         (and (= (length (car date-parts-length)) 2)\n              (= (length\
    \ (cadr date-parts-length)) 2)\n              (= (length (caddr date-parts-length))\
    \ 4))))\n  (define (valid-date-parts-length-format date-parts-length-format)\n\
    \    (and (list? date-parts-length-format)\n         (and (valid-date-parts-length\
    \ (car date-parts-length-format))\n              (valid-date-parts-length (cadr\
    \ date-parts-length-format))\n              (valid-date-parts-length (caddr",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day)\
    \ (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day)\
    \ (<= day 29))]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (regexp-match? #rx\"^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$\" date)))\n\
    \  (let* ([date-parts (string-split date \"-\")]\n         [month (string->number\
    \ (list-ref date-parts 0))]\n         [day (string->number (list-ref date-parts\
    \ 1))]\n         [year (string->number (list-ref date-parts 2))])\n    (and (valid-date-format\
    \ date)\n         (valid-month month)\n         (valid-day month day)\n      \
    \   (valid-year year))))\n", "  (define (valid-month month)\n    (and (not (string=?\
    \ month \"\"))\n         (and (<= 1 (string->number month))\n              (<=\
    \ (string->number month) 12))))\n  (define (valid-day day)\n    (and (not (string=?\
    \ day \"\"))\n         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (string=? year \"\"\
    ))\n         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (string-split date \"\
    -\"))\n  (define (valid-date-format-length date)\n    (and (= (length date) 3)\n\
    \         (and (= (length (list-ref date 0)) 2)\n              (= (length (list-ref\
    \ date 1)) 2)\n              (= (length (list-ref date 2)) 4)))))", "  (match\
    \ date\n    [(regexp #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    )\n     (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\" date))]\n\
    \           [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))]\n           [year (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})\"\
    \ date))])\n       (cond\n         [(or (< month 1) (> month 12)) #f]\n      \
    \   [(or (< day 1) (> day 31)) #f]\n         [(and (= month 2) (or (< day 1) (>\
    \ day 29))) #f]\n         [(and (member month '(4 6 9 11)) (or (< day 1) (> day\
    \ 30))) #f]\n         [else #t]))]\n    [else #f]))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (string-length date)\n         (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (define (valid-month-day-pair month day)\n      (cond ((or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \           (and (valid-month month)\n                  (and (>= day 1) (<= day\
    \ 31))))\n            ((or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \             (and (valid-month month)\n                  (and (>= day 1) (<=\
    \ day 30))))\n            ((= month 2)\n             (and (valid-month month)\n\
    \                  (and (>= day 1) (<= day 29))))\n            (else #f)))\n \
    \   (define (valid-month-year-pair month year)\n      (cond ((= month 2)\n   \
    \          (and (valid-month month)\n                  (and (>= year 0) (<= year\
    \ 9999))))\n            (else #t)))\n    (define (valid-day-year-pair day year)\n\
    \      (cond ((= day 29)\n             (and (valid-day day)\n                \
    \  (and (>= year 0) (<= year 9999))))\n            (else #t)))\n    (define (valid-month-day-year-pair\
    \ month day year)\n      (cond ((= month 2)\n             (and (valid-month month)\n\
    \                  (and (>= day 1) (<= day 29))\n                  (and (>= year\
    \ 0) (<= year 9", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (>= year 0)))\n  (define (valid-date-string date)\n    (and (string? date)\n\
    \         (not (empty? date))))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-string date)\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n \
    \     [(= month 1) (<= 1 day) (<= day 31)]\n      [(= month 3) (<= 1 day) (<=\
    \ day 31)]\n      [(= month 5) (<= 1 day) (<= day 31)]\n      [(= month 7) (<=\
    \ 1 day) (<= day 31)]\n      [(= month 8) (<= 1 day) (<= day 31)]\n      [(= month\
    \ 10) (<= 1 day) (<= day 31)]\n      [(= month 12) (<= 1 day) (<= day 31)]\n \
    \     [(= month 4) (<= 1 day) (<= day 30)]\n      [(= month 6) (<= 1 day) (<=\
    \ day 30)]\n      [(= month 9) (<= 1 day) (<= day 30)]\n      [(= month 11) (<=\
    \ 1 day) (<= day 30)]\n      [(= month 2) (<= 1 day) (<= day 29)]))\n  (define\
    \ (valid-year year)\n    (<= 1 year))\n  (define (valid-format date)\n    (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date) #t))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month) (valid-day month day) (valid-year year))))\n  (and (valid-format\
    \ date) (valid-date-parts date)))", "  (define (valid-month month)\n    (and (not\
    \ (string=? month \"\"))\n         (and (&lt;= 1 month)\n              (&lt;=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (not (string=? day \"\
    \"))\n         (and (&lt;= 1 day)\n              (cond ((or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n        \
    \             (&lt;= day 31))\n                    ((or (= month 4) (= month 6)\
    \ (= month 9) (= month 11))\n                     (&lt;= day 30))\n          \
    \          ((= month 2)\n                     (&lt;= day 29))))))\n  (define (valid-year\
    \ year)\n    (and (not (string=? year \"\"))\n         (and (&lt;= 1 year)\n \
    \             (&lt;= year 9999))))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n  \
    \  (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define (valid-date-parts\
    \ date)\n    (let* ([parts (split-date date)]\n           [month (string-&gt;number\
    \ (cadr parts))]\n           [day (string-&gt;number (caddr parts))]\n       \
    \    [year (string-&gt;number (cadddr parts))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (<= 1\
    \ day)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n                 (<=\
    \ day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n                 (<= day 30)]\n                [(= month 2)\n        \
    \         (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (<= year 9999)))\n  (define (valid-date-string date-string)\n    (and\
    \ (string? date-string)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date-string)))\n  (define (valid-date-list date-list)\n    (and (list? date-list)\n\
    \         (and (= (length date-list) 3)\n              (and (valid-month (car\
    \ date-list))\n                   (and (valid-day (car date-list) (cadr date-list))\n\
    \                        (valid-year (caddr date-list)))))))\n  (and (valid-date-string\
    \ date)\n       (valid-date-list (string-&gt;list date))))\n</code>\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)\n       (valid-month\
    \ (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number\
    \ (regexp-match #rx\"^[0-9]{2}-\" date))\n                  (string->number (regexp-match\
    \ #rx\"-[0-9]{2}-\" date)))\n       (valid-year (string->number (regexp-match\
    \ #rx\"-[0-9]{4}$\" date)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-month-day month day)\n    (cond\n      [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and\
    \ (valid-day day) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n       (and (valid-day day) (<= day 30))]\n      [(= month 2)\n\
    \       (and (valid-day day) (<= day 29))]\n      [else #f]))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (string-split date #\\-)])\n      (and (valid-month\
    \ (string->number (list-ref date-parts 0)))\n           (valid-month-day (string->number\
    \ (list-ref date-parts 0)) (string->number (list-ref date-parts 1)))\n       \
    \    (valid-year (string->number (list-ref date-parts 2))))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (<= 1 day)\n \
    \             (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                     (<= day 31))\n         \
    \           ((or (= month 4) (= month 6) (= month 9) (= month 11))\n         \
    \            (<= day 30))\n                    ((= month 2)\n                \
    \     (<= day 29))))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (<= 1 year)))\n  (define (valid-date-format date)\n    (string-match\
    \ \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n    (string-split\
    \ date \"-\"))\n  (define (valid-date-parts date)\n    (and (valid-month (string->number\
    \ (list-ref (split-date date) 0)))\n         (valid-day (string->number (list-ref\
    \ (split-date date) 0))\n                    (string->number (list-ref (split-date\
    \ date) 1)))\n         (valid-year (string->number (list-ref (split-date date)\
    \ 2)))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (<= 1 month 12)))\n  (define (valid-day day)\n  \
    \  (and (integer? day)\n         (<= 1 day 31)))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (<= 1 year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (define\
    \ (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (negative?\
    \ (string->number month)))\n         (not (> (string->number month) 12))))\n \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (not (negative?\
    \ (string->number day)))\n         (not (> (string->number day) 31))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-day-for-month month day)\n    (cond\n      [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (not\
    \ (> (string->number day) 31))]\n      [(or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n       (not (> (string->number day) 30))]\n      [(= month 2)\n\
    \       (not (> (string->number day) 29))]))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)])\n      (and (valid-month (list-ref\
    \ date-parts 0))\n           (valid-day (list-ref date-parts 1))\n           (valid-year\
    \ (list-ref date-parts 2))\n           (valid-day-for-month (string->number (list-ref\
    \ date-parts 0)) (list-ref date-parts 1)))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (and (>=\
    \ day 1)\n         (<= day (if (or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n                     31\n       \
    \              (if (or (= month 4) (= month 6) (= month 9) (= month 11))\n   \
    \                      30\n                         (if (= month 2)\n        \
    \                     29\n                             0))))))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (and (>=\
    \ day 1)\n         (<= day\n             (cond\n               [(or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) 31]\n\
    \               [(or (= month 4) (= month 6) (= month 9) (= month 11)) 30]\n \
    \              [(= month 2) 29]))))\n  (define (valid-year year)\n    (and (>=\
    \ year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref parts 0))]\n      \
    \     [day (string->number (list-ref parts 1))]\n           [year (string->number\
    \ (list-ref parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (integer? (string->number\
    \ month))\n         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (integer? (string->number day))\n         (and (<= 1 (string->number day))\n\
    \              (<= (string->number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (integer? (string->number year))\n   \
    \      (and (<= 1 (string->number year))\n              (<= (string->number year)\
    \ 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (valid-date-format date)\n       (valid-month (substring date\
    \ 0 2))\n       (valid-day (substring date 3 5))\n       (valid-year (substring\
    \ date 6 10))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref parts 0))]\n      \
    \     [day (string->number (list-ref parts 1))]\n           [year (string->number\
    \ (list-ref parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n \
    \     [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-format\
    \ date)\n       (valid-month (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n\
    \       (valid-day (string->number (regexp-match #rx\"^[0-9]{2}-\" date))\n  \
    \                (string->number (regexp-match #rx\"-[0-9]{2}-\" date)))\n   \
    \    (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\" date)))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (<= 1 day)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (string? date)\n    \
    \     (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (date-to-list\
    \ date)\n    (string-split date #\\-))\n  (define (date-to-numbers date)\n   \
    \ (map string->number (date-to-list date)))\n  (define (valid-date-numbers date)\n\
    \    (let* ([numbers (date-to-numbers date)]\n           [month (list-ref numbers\
    \ 0)]\n           [day (list-ref numbers 1)]\n           [year (list-ref numbers\
    \ 2)])\n      (and (valid-month month)\n           (valid-day month day)\n   \
    \        (valid-year year))))\n  (and (valid-date-format date)\n       (valid-date-numbers\
    \ date)))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(= month 1) (and (<=\
    \ 1 day) (<= day 31))]\n      [(= month 3) (and (<= 1 day) (<= day 31))]\n   \
    \   [(= month 5) (and (<= 1 day) (<= day 31))]\n      [(= month 7) (and (<= 1\
    \ day) (<= day 31))]\n      [(= month 8) (and (<= 1 day) (<= day 31))]\n     \
    \ [(= month 10) (and (<= 1 day) (<= day 31))]\n      [(= month 12) (and (<= 1\
    \ day) (<= day 31))]\n      [(= month 4) (and (<= 1 day) (<= day 30))]\n     \
    \ [(= month 6) (and (<= 1 day) (<= day 30))]\n      [(= month 9) (and (<= 1 day)\
    \ (<= day 30))]\n      [(= month 11) (and (<= 1 day) (<= day 30))]\n      [(=\
    \ month 2) (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-format date)\n    (string-match\
    \ \"^[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]$\" date))\n  (define (get-month\
    \ date)\n    (string->number (substring date 0 2)))\n  (define (get-day date)\n\
    \    (string->number (substring date 3 5)))\n  (define (get-year date)\n    (string->number\
    \ (substring date 6 10)))\n  (and (valid-format date)\n       (valid-month (get-month\
    \ date))\n       (valid-day (get-month date) (get-day date))\n       (valid-year\
    \ (get-year date))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (<= 0 year)))\n  (define (valid-date-format date)\n    (and (string? date)\n\
    \         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (split-date date)\n    (map string->number (regexp-split #rx\"-\" date)))\n\
    \  (define (valid-date-parts date)\n    (let* ([date-parts (split-date date)]\n\
    \           [month (list-ref date-parts 0)]\n           [day (list-ref date-parts\
    \ 1)]\n           [year (list-ref date-parts 2)])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-day? day month)\n\
    \    (cond [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12))\n           (and (>= day 1) (<= day 31))]\n        \
    \  [(or (= month 4) (= month 6) (= month 9) (= month 11))\n           (and (>=\
    \ day 1) (<= day 30))]\n          [(= month 2)\n           (and (>= day 1) (<=\
    \ day 29))]\n          [else #f]))\n  (define (valid-month? month)\n    (and (>=\
    \ month 1) (<= month 12)))\n  (define (valid-year? year)\n    (and (>= year 1)\
    \ (<= year 9999)))\n  (define (valid-date-format? date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts? date)\n    (let* ([parts (string-split\
    \ date #\\-)]\n           [month (string->number (vector-ref parts 0))]\n    \
    \       [day (string->number (vector-ref parts 1))]\n           [year (string->number\
    \ (vector-ref parts 2))])\n      (and (valid-day? day month)\n           (valid-month?\
    \ month)\n           (valid-year? year))))\n  (and (valid-date-format? date)\n\
    \       (valid-date-parts? date)))\n", "  (define (valid-month month)\n    (and\
    \ (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond ((or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n           (<= 1 day) (<= day 31))\n          ((or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n           (<= 1 day) (<= day 30))\n   \
    \       ((= month 2)\n           (<= 1 day) (<= day 29))))\n  (define (valid-year\
    \ year)\n    (<= 1 year))\n  (define (valid-date-format date)\n    (string-match\
    \ \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n    (string-split\
    \ date \"-\"))\n  (define (valid-date-parts date)\n    (define (valid-month-day-year\
    \ month day year)\n      (and (valid-month month) (valid-day month day) (valid-year\
    \ year)))\n    (define (valid-date-parts-helper date)\n      (valid-month-day-year\
    \ (string->number (list-ref date 0))\n                            (string->number\
    \ (list-ref date 1))\n                            (string->number (list-ref date\
    \ 2))))\n    (valid-date-parts-helper (split-date date)))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (<= 1 month\
    \ 12)))\n  (define (valid-day month day)\n    (and (integer? day)\n         (cond\n\
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12))\n            (<= 1 day 31)]\n           [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n            (<= 1 day 30)]\n     \
    \      [(= month 2)\n            (<= 1 day 29)])))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (<= 1 year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n \
    \          [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (and (<= 1 day)\n            \
    \  (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (=\
    \ month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n              \
    \  [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (and (<= 1000 year) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (let* ([date-parts (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)]\n                [month (string->number (vector-ref date-parts 1))]\n\
    \                [day (string->number (vector-ref date-parts 2))]\n          \
    \      [year (string->number (vector-ref date-parts 3))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(= month 1)  (<= 1 day) (<= day 31)]\n      [(=\
    \ month 3)  (<= 1 day) (<= day 31)]\n      [(= month 5)  (<= 1 day) (<= day 31)]\n\
    \      [(= month 7)  (<= 1 day) (<= day 31)]\n      [(= month 8)  (<= 1 day) (<=\
    \ day 31)]\n      [(= month 10) (<= 1 day) (<= day 31)]\n      [(= month 12) (<=\
    \ 1 day) (<= day 31)]\n      [(= month 4)  (<= 1 day) (<= day 30)]\n      [(=\
    \ month 6)  (<= 1 day) (<= day 30)]\n      [(= month 9)  (<= 1 day) (<= day 30)]\n\
    \      [(= month 11) (<= 1 day) (<= day 30)]\n      [(= month 2)  (<= 1 day) (<=\
    \ day 29)]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n\
    \  (define (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (equal? (string-length date) 10)))\n  (define (parse-date date)\n\
    \    (let ([month (string->number (substring date 0 2))]\n          [day   (string->number\
    \ (substring date 3 5))]\n          [year  (string->number (substring date 6 10))])\n\
    \      (list month day year)))\n  (define (valid-date? date)\n    (let ([month\
    \ (car date)]\n          [day   (cadr date)]\n          [year  (caddr date)])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (valid-format date)\n       (valid-date? (parse-date\
    \ date))))\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (>= day 1) (<= day 31))]\n      [(and (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n\
    \       (and (>= day 1) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (string-match\
    \ \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"))\n\
    \       (valid-date-format date)\n       (valid-month (string->number (substring\
    \ date 0 2)))\n       (valid-day (string->number (substring date 0 2))\n     \
    \             (string->number (substring date 3 5)))\n       (valid-year (string->number\
    \ (substring date 6 10)))))\n", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (and (<= 1 (string->number month))\n             \
    \ (<= (string->number month) 12))))\n  (define (valid-day day)\n    (and (not\
    \ (empty? day))\n         (and (<= 1 (string->number day))\n              (<=\
    \ (string->number day) 31))))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-date-format date)\n     \
    \  (and (valid-month (substring date 0 2))\n            (valid-day (substring\
    \ date 3 5))\n            (valid-year (substring date 6 10)))))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (not (empty?\
    \ (cdr month)))\n              (not (empty? (cddr month))))\n         (and (char-numeric?\
    \ (car month))\n              (char-numeric? (cadr month)))\n         (and (<=\
    \ (string->number month) 12)\n              (>= (string->number month) 1))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty?\
    \ (cdr day)))\n              (not (empty? (cddr day))))\n         (and (char-numeric?\
    \ (car day))\n              (char-numeric? (cadr day)))\n         (and (<= (string->number\
    \ day) 31)\n              (>= (string->number day) 1))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (not (empty? (cdr year)))\n\
    \              (not (empty? (cddr year)))\n              (not (empty? (cdddr year))))\n\
    \         (and (char-numeric? (car year))\n              (char-numeric? (cadr\
    \ year))\n              (char-numeric? (caddr year))\n              (char-numeric?\
    \ (cadddr year)))\n         (and (<= (string->number year) 9999)\n           \
    \   (>= (string->number year) 1000))))\n  (define (valid-format date)\n    (and\
    \ (not (empty? date))\n         (and (not (empty? (cdr date)))\n             \
    \ (not (empty? (cddr date)))\n              (not (empty? (cdddr date)))\n    \
    \          (not (empty? (cddddr date))))\n         (and (char-numeric? (car date))\n\
    \              (char-numeric? (cadr date))\n              (char-numeric? (caddr\
    \ date))\n              (char-numeric? (cadddr date))\n              (char-numeric?\
    \ (caddddr date))\n              (char-numeric? (cadddddr date))\n           \
    \   (char-n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (integer? (string->number month))\n         (and (>= (string->number\
    \ month) 1)\n              (<= (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (integer? (string->number day))\n\
    \         (and (>= (string->number day) 1)\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (integer? (string->number year))\n         (and (>= (string->number year)\
    \ 1)\n              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (valid-month (substring date\
    \ 0 2))\n       (valid-day (substring date 3 5))\n       (valid-year (substring\
    \ date 6 10))))\n", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\n\
    \                  [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) 31]\n                  [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) 30]\n                  [(= month 2) 29]))))\n \
    \ (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-list (string-split date \"-\")])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0)) (string->number (list-ref date-list\
    \ 1)))\n                (valid-year (string->number (list-ref date-list 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day day)\n    (and (&gt;= day 1) (&lt;= day 31)))\n  (define (valid-year\
    \ year)\n    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n  \
    \       (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (string-split date \"-\")]\n           [month\
    \ (string-&gt;number (list-ref date-parts 0))]\n           [day (string-&gt;number\
    \ (list-ref date-parts 1))]\n           [year (string-&gt;number (list-ref date-parts\
    \ 2))])\n      (and (valid-month month)\n           (valid-day day)\n        \
    \   (valid-year year))))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n</code>\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (>= year 0)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)]\n                [month (string->number (list-ref date-parts 0))]\n\
    \                [day (string->number (list-ref date-parts 1))]\n            \
    \    [year (string->number (list-ref date-parts 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (and (>= day 1)\n         (<= day\n             (cond\n    \
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) 31]\n               [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11)) 30]\n               [(= month 2) 29]))))\n  (define (valid-year\
    \ year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-date-format\
    \ date)\n       (valid-month (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n\
    \       (valid-day (string->number (regexp-match #rx\"^[0-9]{2}-\" date))\n  \
    \                (string->number (regexp-match #rx\"-[0-9]{2}-\" date)))\n   \
    \    (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\" date)))))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (empty?\
    \ (string-trim-both month \"0\")))\n         (not (empty? (string-trim-both month\
    \ \"1\")))\n         (not (empty? (string-trim-both month \"2\")))\n         (not\
    \ (empty? (string-trim-both month \"3\")))\n         (not (empty? (string-trim-both\
    \ month \"4\")))\n         (not (empty? (string-trim-both month \"5\")))\n   \
    \      (not (empty? (string-trim-both month \"6\")))\n         (not (empty? (string-trim-both\
    \ month \"7\")))\n         (not (empty? (string-trim-both month \"8\")))\n   \
    \      (not (empty? (string-trim-both month \"9\")))\n         (not (empty? (string-trim-both\
    \ month \"10\")))\n         (not (empty? (string-trim-both month \"11\")))\n \
    \        (not (empty? (string-trim-both month \"12\")))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (not (empty? (string-trim-both day\
    \ \"0\")))\n         (not (empty? (string-trim-both day \"1\")))\n         (not\
    \ (empty? (string-trim-both day \"2\")))\n         (not (empty? (string-trim-both\
    \ day \"3\")))\n         (not (empty? (string-trim-both day \"4\")))\n       \
    \  (not (empty? (string-trim-both day \"5\")))\n         (not (empty? (string-trim-both\
    \ day \"6\")))\n         (not (empty? (string-trim-both day \"7\")))\n       \
    \  (not (empty? (string-trim-both day \"8\")))\n         (not (empty? (string-trim-both\
    \ day \"9\")))\n         (not (empty? (string-trim-both day \"10\")))\n      \
    \   (not (empty? (string-trim-both", "  (define (is-valid-date? date)\n    (define\
    \ (is-valid-month? month)\n      (and (integer? month)\n           (and (>= month\
    \ 1) (<= month 12))))\n    (define (is-valid-day? day)\n      (and (integer? day)\n\
    \           (and (>= day 1) (<= day 31))))\n    (define (is-valid-year? year)\n\
    \      (and (integer? year)\n           (and (>= year 1) (<= year 9999))))\n \
    \   (define (is-valid-date-format? date)\n      (and (string? date)\n        \
    \   (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n    (define (is-valid-month-day?\
    \ month day)\n      (cond ((and (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12))\n             (and (>= day 1) (<= day\
    \ 31)))\n            ((and (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \             (and (>= day 1) (<= day 30)))\n            ((= month 2)\n      \
    \       (and (>= day 1) (<= day 29)))))\n    (define (get-month date)\n      (string->number\
    \ (regexp-match #rx\"^[0-9]{2}-\" date)))\n    (define (get-day date)\n      (string->number\
    \ (regexp-match #rx\"-[0-9]{2}-\" date)))\n    (define (get-year date)\n     \
    \ (string->number (regexp-match #rx\"-[0-9]{4}$\" date)))\n    (and (is-valid-date-format?\
    \ date)\n         (and (is-valid-month? (get-month date))\n              (and\
    \ (is-valid-day? (get-day date))\n                   (and (is-valid-year? (get-year\
    \ date))\n                        (is-valid-month-day? (get-month date) (get-day\
    \ date)))))))\n  (is-valid", "  (define (valid-month month)\n    (and (>= month\
    \ 1) (<= month 12)))\n  (define (valid-day month day)\n    (and (>= day 1)\n \
    \        (<= day\n             (cond\n               [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) 31]\n    \
    \           [(or (= month 4) (= month 6) (= month 9) (= month 11)) 30]\n     \
    \          [(= month 2) 29]))))\n  (define (valid-year year)\n    (and (>= year\
    \ 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let ([date-parts (string-split\
    \ date #\\-)]\n               [month (string->number (vector-ref date-parts 0))]\n\
    \               [day (string->number (vector-ref date-parts 1))]\n           \
    \    [year (string->number (vector-ref date-parts 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (and (>= day 1)\n         (<= day\n             (cond\n    \
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) 31]\n               [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11)) 30]\n               [(= month 2) 29]))))\n  (define (valid-year\
    \ year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not\
    \ (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (and (valid-date-format date)\n             (valid-month (string->number\
    \ (substring date 0 2)))\n             (valid-day (string->number (substring date\
    \ 0 2)) (string->number (substring date 3 5)))\n             (valid-year (string->number\
    \ (substring date 6 10)))))\n      (if (valid-date-parts-helper-helper date)\n\
    \          #t\n          (valid-date-parts-helper-helper (string-append (substring\
    \ date 3 5) \"-\" (substring date 0 2) \"-\" (substring date 6 10)))))\n    (if\
    \ (valid-date-parts-helper date)\n        #t\n        (valid-date-parts-helper\
    \ (string-append (substring date 6 10) \"-\" (substring date 0 2) \"-\" (substring\
    \ date 3 5)))))\n  (valid-date-parts date))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 0) (<= year 9999))))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n\
    \      (define (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-parts", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (<= 1\
    \ day)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n\
    \      (let* ([date-parts (string-split date \"-\")]\n             [month (string->number\
    \ (list-ref date-parts 0))]\n             [day (string->number (list-ref date-parts\
    \ 1))]\n             [year (string->number (list-ref date-parts 2))])\n      \
    \  (and (valid-month month)\n             (valid-day month day)\n            \
    \ (valid-year year))))\n    (cond\n      [(empty? date) #f]\n      [(valid-date-format\
    \ date) (valid-date-parts-helper date)]\n      [else #f]))\n  (valid-date-parts\
    \ date))\n", "  (define (valid-month? month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day? day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year?\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format? date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts? date)\n    (let* ([parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref parts 0))]\n      \
    \     [day (string->number (list-ref parts 1))]\n           [year (string->number\
    \ (list-ref parts 2))])\n      (and (valid-month? month)\n           (valid-day?\
    \ day)\n           (valid-year? year))))\n  (and (valid-date-format? date)\n \
    \      (valid-date-parts? date)))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (not (empty? (string-trim-both month \"0\")))\n\
    \         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (empty? (string-trim-both day \"0\")))\n         (and (<= 1 (string->number\
    \ day))\n              (<= (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (empty? (string-trim-both\
    \ year \"0\")))\n         (and (<= 1 (string->number year))\n              (<=\
    \ (string->number year) 9999))))\n  (define (valid-date-format date)\n    (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-day-for-month\
    \ day month)\n    (cond ((or (equal? month \"01\")\n               (equal? month\
    \ \"03\")\n               (equal? month \"05\")\n               (equal? month\
    \ \"07\")\n               (equal? month \"08\")\n               (equal? month\
    \ \"10\")\n               (equal? month \"12\"))\n           (and (<= 1 (string->number\
    \ day))\n                (<= (string->number day) 31)))\n          ((or (equal?\
    \ month \"04\")\n               (equal? month \"06\")\n               (equal?\
    \ month \"09\")\n               (equal? month \"11\"))\n           (and (<= 1\
    \ (string->number day))\n                (<= (string->number day) 30)))\n    \
    \      ((equal? month \"02\")\n           (and (<= 1 (string->number day))\n \
    \               (<= (string->number day) 29)))))\n  (define (valid-leap-year year)\n\
    \   ", "  (cond\n    [(empty? date) #f]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)\n     (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n           [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (< month 1) (> month 12)) #f]\n      \
    \   [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n          (and (>= day 1) (<= day 31))]\n         [(and (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n          (and (>= day 1) (<=\
    \ day 30))]\n         [(= month 2)\n          (and (>= day 1) (<= day 29))]))]\n\
    \    [else #f]))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<=\
    \ month 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= 1 month)\
    \ (= day 31)) #t]\n      [(and (= 3 month) (= day 31)) #t]\n      [(and (= 5 month)\
    \ (= day 31)) #t]\n      [(and (= 7 month) (= day 31)) #t]\n      [(and (= 8 month)\
    \ (= day 31)) #t]\n      [(and (= 10 month) (= day 31)) #t]\n      [(and (= 12\
    \ month) (= day 31)) #t]\n      [(and (= 4 month) (= day 30)) #t]\n      [(and\
    \ (= 6 month) (= day 30)) #t]\n      [(and (= 9 month) (= day 30)) #t]\n     \
    \ [(and (= 11 month) (= day 30)) #t]\n      [(and (= 2 month) (= day 29)) #t]\n\
    \      [else #f]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year\
    \ 9999)))\n  (define (valid-format date)\n    (and (string-length date) (= (string-length\
    \ date) 10)))\n  (define (valid-sep date)\n    (and (= (string-ref date 2) #\\\
    - ) (= (string-ref date 5) #\\- )))\n  (define (valid-num date)\n    (and (number?\
    \ (string->number (substring date 0 2)))\n         (number? (string->number (substring\
    \ date 3 5)))\n         (number? (string->number (substring date 6 10)))))\n \
    \ (define (valid-date-helper date)\n    (and (valid-format date)\n         (valid-sep\
    \ date)\n         (valid-num date)\n         (valid-month (string->number (substring\
    \ date 0 2)))\n         (valid-day (string->number (substring date 0 2))\n   \
    \                 (string->number (substring date 3 5)))\n         (valid-year\
    \ (string->number (substring date 6 10)))))\n  (valid-date-helper date))\n", " \
    \ (define (valid-month month)\n    (and (not (string=? month \"\"))\n        \
    \ (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and (not\
    \ (string=? day \"\"))\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (not (string=? year \"\"))\n         (and (>= year 1) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-part date)\n\
    \      (and (not (string=? date \"\"))\n           (and (>= date 1) (<= date 31))))\n\
    \    (define (valid-month-part month)\n      (and (not (string=? month \"\"))\n\
    \           (and (>= month 1) (<= month 12))))\n    (define (valid-year-part year)\n\
    \      (and (not (string=? year \"\"))\n           (and (>= year 1) (<= year 9999))))\n\
    \    (define (valid-date-parts-format date)\n      (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n    (define (valid-date-parts-format-2 date)\n      (string-match \"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))\n    (define (valid-date-parts-format-3\
    \ date)\n      (string-match \"^[0-9]{2} [0-9]{2} [0-9]{4}$\" date))\n    (define\
    \ (valid-date-parts-format-4 date)\n      (string-match \"^[0-9]{2} [0-9]{2}/[0-9]{4}$\"\
    \ date))\n    (define (valid-date-parts-format-", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (not (empty? (rest month)))\n  \
    \            (and (not (empty? (rest (rest month))))\n                   (and\
    \ (not (empty? (rest (rest (rest month)))))\n                        (and (not\
    \ (empty? (rest (rest (rest (rest month)))))))\n                        (and (not\
    \ (empty? (rest (rest (rest (rest (rest month)))))))\n                       \
    \      (not (empty? (rest (rest (rest (rest (rest (rest month))))))))))))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty?\
    \ (rest day)))\n              (and (not (empty? (rest (rest day))))\n        \
    \           (and (not (empty? (rest (rest (rest day)))))\n                   \
    \     (and (not (empty? (rest (rest (rest (rest day)))))))\n                 \
    \       (and (not (empty? (rest (rest (rest (rest (rest day)))))))\n         \
    \                    (not (empty? (rest (rest (rest (rest (rest (rest day))))))))))))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (and (not\
    \ (empty? (rest year)))\n              (and (not (empty? (rest (rest year))))\n\
    \                   (and (not (empty? (rest (rest (rest year)))))\n          \
    \              (and (not (empty? (rest (rest (rest (rest year)))))))\n       \
    \                 (and (not (empty? (rest (rest (rest (rest (rest year)))))))\n\
    \                             (not (empty? (rest (rest (rest (rest (rest (rest\
    \ year))))))))))))))\n  (define (valid-format date)\n    (and (equal? (list-ref\
    \ date 2) #\\- )\n         (equal? (list-ref date 5) #\\- )))\n  (define (valid-month-day\
    \ month day)\n    (cond ((and (equal? month \"01\") (equal? day \"31\")) #t)\n\
    \          ((and (equal? month \"03\") (equal? day \"31\")) #t)\n          ((and\
    \ (equal? month \"05\")", "  (define (valid-month? month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day? day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year?\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format? date)\n    (and (string? date)\n         (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts? date)\n\
    \    (let* ([parts (string-split date #\\-)])\n      (and (= (length parts) 3)\n\
    \           (and (valid-month? (string->number (list-ref parts 0)))\n        \
    \        (and (valid-day? (string->number (list-ref parts 1)))\n             \
    \        (valid-year? (string->number (list-ref parts 2))))))))\n  (and (valid-date-format?\
    \ date)\n       (valid-date-parts? date)))\n", "  (define (is-valid-month month)\n\
    \    (and (not (empty? month))\n         (integer? (string->number month))\n \
    \        (not (< (string->number month) 1))\n         (not (> (string->number\
    \ month) 12))))\n  (define (is-valid-day day)\n    (and (not (empty? day))\n \
    \        (integer? (string->number day))\n         (not (< (string->number day)\
    \ 1))\n         (not (> (string->number day) 31))))\n  (define (is-valid-year\
    \ year)\n    (and (not (empty? year))\n         (integer? (string->number year))\n\
    \         (not (< (string->number year) 1))))\n  (define (is-valid-date date)\n\
    \    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (is-valid-month-day month day)\n    (cond\n      [(and (equal?\
    \ month \"01\") (equal? day \"31\")) #t]\n      [(and (equal? month \"03\") (equal?\
    \ day \"31\")) #t]\n      [(and (equal? month \"05\") (equal? day \"31\")) #t]\n\
    \      [(and (equal? month \"07\") (equal? day \"31\")) #t]\n      [(and (equal?\
    \ month \"08\") (equal? day \"31\")) #t]\n      [(and (equal? month \"10\") (equal?\
    \ day \"31\")) #t]\n      [(and (equal? month \"12\") (equal? day \"31\")) #t]\n\
    \      [(and (equal? month \"04\") (equal? day \"30\")) #t]\n      [(and (equal?\
    \ month \"06\") (equal? day \"30\")) #t]\n      [(and (equal? month \"09\") (equal?\
    \ day \"30\")) #t]\n      [(and (equal? month \"11\") (equal? day \"30\")) #t]\n\
    \      [(and (equal? month \"02\") (equal? day \"29\")) #t]\n      [else #f]))\n\
    \ ", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer?\
    \ day)\n         (and (<= 1 day)\n              (cond ((or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n        \
    \             (<= day 31))\n                    ((or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                     (<= day 30))\n                \
    \    ((= month 2)\n                     (<= day 29))))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (<= 1 year)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (and (string-contains date #\\-))))\n\
    \  (define (valid-date-format-2 date)\n    (and (string? date)\n         (and\
    \ (string-contains date #\\/))))\n  (define (valid-date-format-3 date)\n    (and\
    \ (string? date)\n         (and (string-contains date #\\.))))\n  (define (valid-date-format-4\
    \ date)\n    (and (string? date)\n         (and (string-contains date #\\:))))\n\
    \  (define (valid-date-format-5 date)\n    (and (string? date)\n         (and\
    \ (string-contains date #\\,))))\n  (define (valid-date-format-6 date)\n    (and\
    \ (string? date)\n         (and (string-contains date #\\;))))\n  (define (valid-date-format-7\
    \ date)\n    (and (string? date)\n         (and (string-contains date #\\_))))\n\
    \  (define (valid-date-format-8 date)\n    (and (string? date)\n         (and\
    \ (string-contains date #\\ ))))\n  (define (valid-date-format-9 date)\n    (and\
    \ (string? date)\n         (and (string-contains date #\\t))))\n  (define (valid-date-format-10",
  "  (and (not (empty? date))\n       (valid-date-format? date)\n       (valid-date-numbers?\
    \ date)))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (<= 1 day) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n\
    \       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n    (string-match\
    \ \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? \"\" date))\n\
    \       (valid-date-format date)\n       (valid-month (string->number (substring\
    \ date 0 2)))\n       (valid-day (string->number (substring date 0 2))\n     \
    \             (string->number (substring date 3 5)))\n       (valid-year (string->number\
    \ (substring date 6 10)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4)\
    \ (= month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month\
    \ 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 0)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (regexp-match\
    \ #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date)]\n                [month (string->number\
    \ (vector-ref date-parts 1))]\n                [day (string->number (vector-ref\
    \ date-parts 2))]\n                [year (string->number (vector-ref date-parts\
    \ 3))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                     (<= day 31))\n         \
    \           ((or (= month 4) (= month 6) (= month 9) (= month 11))\n         \
    \            (<= day 30))\n                    ((= month 2)\n                \
    \     (<= day 29))))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 0)))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (let* ([date-parts (string-split date\
    \ #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n      \
    \     [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (not (negative? (string->number month)))\n  \
    \       (not (> (string->number month) 12))))\n  (define (valid-day day)\n   \
    \ (and (not (empty? day))\n         (not (negative? (string->number day)))\n \
    \        (not (> (string->number day) 31))))\n  (define (valid-year year)\n  \
    \  (and (not (empty? year))\n         (not (negative? (string->number year)))\n\
    \         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (valid-month (substring date 0 2))\n         (valid-day (substring date\
    \ 3 5))\n         (valid-year (substring date 6 10))))\n  (valid-date-format date))\n",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (<= 1 day)\n         (cond\n           [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n            (<= day 31)]\n           [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11))\n            (<= day 30)]\n           [(= month 2)\n\
    \            (<= day 29)])))\n  (define (valid-year year)\n    (and (<= 1 year)\
    \ (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"))\n   \
    \    (valid-date-format date)\n       (let* ([date-list (string-split date \"\
    -\")]\n              [month (string->number (list-ref date-list 0))]\n       \
    \       [day (string->number (list-ref date-list 1))]\n              [year (string->number\
    \ (list-ref date-list 2))])\n         (and (valid-month month)\n             \
    \ (valid-day month day)\n              (valid-year year)))))\n", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day day month)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-month\
    \ (string->number (substring date 0 2)))\n       (valid-day (string->number (substring\
    \ date 3 5))\n                  (string->number (substring date 0 2)))\n     \
    \  (valid-year (string->number (substring date 6 10)))))\n", "  (define (valid-month\
    \ month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n      [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-format date)\n       (valid-month\
    \ (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number\
    \ (regexp-match #rx\"^[0-9]{2}-\" date))\n                  (string->number (regexp-match\
    \ #rx\"-[0-9]{2}-\" date)))\n       (valid-year (string->number (regexp-match\
    \ #rx\"-[0-9]{4}$\" date)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4)\
    \ (= month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month\
    \ 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 0)))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (define (split-date date)\n      (string-split\
    \ date #\\-)\n      (map string->number (string-split date #\\-)))\n    (define\
    \ (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (and (valid-month (list-ref date 0))\n             (valid-day\
    \ (list-ref date 0) (list-ref date 1))\n             (valid-year (list-ref date\
    \ 2))))\n      (and (list? date)\n           (and (= (length date) 3)\n      \
    \          (valid-date-parts-helper-helper date))))\n    (valid-date-parts-helper\
    \ (split-date date)))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (<= 1 month) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (<= 1 day) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (<= 1900 year) (<= year 2100))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-date-parts date)\n    (let* ([parts (string-split date #\\-)]\n\
    \           [month (string->number (list-ref parts 0))]\n           [day (string->number\
    \ (list-ref parts 1))]\n           [year (string->number (list-ref parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day day)\n           (valid-year\
    \ year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-day day)\n    (and (not\
    \ (empty? day))\n         (not (char-numeric? (string-ref day 0)))\n         (not\
    \ (char-numeric? (string-ref day 1)))\n         (not (char-numeric? (string-ref\
    \ day 2)))\n         (not (char-numeric? (string-ref day 3)))\n         (not (char-numeric?\
    \ (string-ref day 4)))\n         (not (char-numeric? (string-ref day 5)))\n  \
    \       (not (char-numeric? (string-ref day 6)))\n         (not (char-numeric?\
    \ (string-ref day 7)))\n         (not (char-numeric? (string-ref day 8)))\n  \
    \       (not (char-numeric? (string-ref day 9)))\n         (not (char-numeric?\
    \ (string-ref day 10)))\n         (not (char-numeric? (string-ref day 11)))\n\
    \         (not (char-numeric? (string-ref day 12)))\n         (not (char-numeric?\
    \ (string-ref day 13)))\n         (not (char-numeric? (string-ref day 14)))\n\
    \         (not (char-numeric? (string-ref day 15)))\n         (not (char-numeric?\
    \ (string-ref day 16)))\n         (not (char-numeric? (string-ref day 17)))\n\
    \         (not (char-numeric? (string-ref day 18)))\n         (not (char-numeric?\
    \ (string-ref day 19)))\n         (not (char-numeric? (string-ref day 20)))\n\
    \         (not (char-numeric? (string-ref day 21)))\n         (not (char-numeric?\
    \ (string-ref day 22)))\n         (not (char-numeric? (string-ref day 23)))\n\
    \         (not (char-numeric? (string-ref day 24)))\n         (not (char-numeric?\
    \ (string-ref day 25)))\n         (not (char-numeric? (string-ref day 26)))\n\
    \         (not (char-numeric? (string-ref day 27)))\n         (not (char-numeric?\
    \ (string-ref day", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not\
    \ (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (string-split date \"-\")]\n           [month\
    \ (string->number (list-ref date-parts 0))]\n           [day (string->number (list-ref\
    \ date-parts 1))]\n           [year (string->number (list-ref date-parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12))\n                 (<= day\
    \ 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \                 (<= day 30)]\n                [(= month 2)\n               \
    \  (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n \
    \        (>= year 0)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n  \
    \  (map string->number (regexp-split #rx\"-\" date)))\n  (define (valid-date-parts\
    \ date)\n    (let* ([date-parts (split-date date)]\n           [month (list-ref\
    \ date-parts 0)]\n           [day (list-ref date-parts 1)]\n           [year (list-ref\
    \ date-parts 2)])\n      (and (valid-month month)\n           (valid-day month\
    \ day)\n           (valid-year year))))\n  (and (not (string=? date \"\"))\n \
    \      (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (>= day 1)\n              (cond\n                [(or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<=\
    \ day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (>= year 0) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (string? date)\n    \
    \     (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts\
    \ date)\n    (let* ([parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref parts 0))]\n           [day (string->number (list-ref parts 1))]\n\
    \           [year (string->number (list-ref parts 2))])\n      (and (valid-month\
    \ month)\n           (valid-day month day)\n           (valid-year year))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (>= day 1)\n              (cond\n                [(or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<=\
    \ day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (>= year 0) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)])\n           (and (valid-month (string->number (list-ref date-parts\
    \ 0)))\n                (valid-day (string->number (list-ref date-parts 0)) (string->number\
    \ (list-ref date-parts 1)))\n                (valid-year (string->number (list-ref\
    \ date-parts 2)))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n    (and\
    \ (integer? day)\n         (and (<= 1 day)\n              (cond ((or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                     (<= day 31))\n                    ((or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n                     (<= day 30))\n          \
    \          ((= month 2)\n                     (<= day 29))))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (<= 0 year)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (string-contains date #\\-)))\n  (define\
    \ (valid-date-parts date)\n    (let ((date-parts (string-split date #\\-)))\n\
    \      (and (= (length date-parts) 3)\n           (valid-month (string->number\
    \ (list-ref date-parts 0)))\n           (valid-day (string->number (list-ref date-parts\
    \ 0))\n                      (string->number (list-ref date-parts 1)))\n     \
    \      (valid-year (string->number (list-ref date-parts 2))))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (cond\n    [(empty? date) #f]\n\
    \    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)\n     (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n           [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(and (= month 1) (= day 31)) #t]\n       \
    \  [(and (= month 3) (= day 31)) #t]\n         [(and (= month 5) (= day 31)) #t]\n\
    \         [(and (= month 7) (= day 31)) #t]\n         [(and (= month 8) (= day\
    \ 31)) #t]\n         [(and (= month 10) (= day 31)) #t]\n         [(and (= month\
    \ 12) (= day 31)) #t]\n         [(and (= month 4) (= day 30)) #t]\n         [(and\
    \ (= month 6) (= day 30)) #t]\n         [(and (= month 9) (= day 30)) #t]\n  \
    \       [(and (= month 11) (= day 30)) #t]\n         [(and (= month 2) (= day\
    \ 29)) #t]\n         [else #f]))]\n    [else #f]))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (< (string->number month)\
    \ 1))\n         (not (> (string->number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (not (< (string->number day) 1))\n    \
    \     (not (> (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (not (< (string->number year) 1))))\n  (define\
    \ (valid-date-format date)\n    (and (not (empty? date))\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-month-day-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-month-day-year-format date)\n    (and (not (empty?\
    \ date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-day-month-year-format date)\n    (and (not (empty? date))\n\
    \         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-day-year-month-format date)\n    (and (not (empty? date))\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-year-month-day-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (<= 1 day)\n         (cond\n           [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n            (<= day 31)]\n           [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11))\n            (<= day 30)]\n           [(= month 2)\n\
    \            (<= day 29)])))\n  (define (valid-year year)\n    (and (<= 1 year)\
    \ (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-split (string-split\
    \ date \"-\")]\n                [month (string->number (list-ref date-split 0))]\n\
    \                [day (string->number (list-ref date-split 1))]\n            \
    \    [year (string->number (list-ref date-split 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (string=? month \"\"))\n         (and (<=\
    \ 1 (string->number month))\n              (<= (string->number month) 12))))\n\
    \  (define (valid-day day)\n    (and (not (string=? day \"\"))\n         (and\
    \ (<= 1 (string->number day))\n              (<= (string->number day) 31))))\n\
    \  (define (valid-year year)\n    (and (not (string=? year \"\"))\n         (and\
    \ (<= 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (and (string-contains date #\\-)))\n\
    \  (define (valid-month-day-year month day year)\n    (and (valid-month month)\n\
    \         (valid-day day)\n         (valid-year year)))\n  (define (valid-month-day-year-format\
    \ month day year)\n    (and (valid-month-day-year month day year)\n         (valid-date-format\
    \ date)))\n  (define (valid-month-day-year-format-split date)\n    (valid-month-day-year-format\
    \ (substring date 0 2)\n                                 (substring date 3 5)\n\
    \                                 (substring date 6 10)))\n  (valid-month-day-year-format-split\
    \ date))\n", "  (define (valid-month month)\n    (and (integer? month)\n     \
    \    (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n   \
    \ (and (integer? day)\n         (and (>= day 1)\n              (cond\n       \
    \         [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2) (<=\
    \ day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n      \
    \   (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n \
    \   (and (string? date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (string-split date #rx\"-\"))\n    (define (date-parts date)\n      (map\
    \ string->number (split-date date)))\n    (define (month date)\n      (list-ref\
    \ (date-parts date) 0))\n    (define (day date)\n      (list-ref (date-parts date)\
    \ 1))\n    (define (year date)\n      (list-ref (date-parts date) 2))\n    (and\
    \ (valid-month (month date))\n         (valid-day (month date) (day date))\n \
    \        (valid-year (year date))))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (<= 1 day)\n              (cond\n      \
    \          [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12))\n                 (<= day 31)]\n                [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n                 (<= day\
    \ 30)]\n                [(= month 2)\n                 (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (string? date)\n    \
    \     (string-contains date #\\-)))\n  (define (valid-date-parts date)\n    (define\
    \ parts (string-split date #\\-))\n    (and (equal? (length parts) 3)\n      \
    \   (valid-month (string->number (list-ref parts 0)))\n         (valid-day (string->number\
    \ (list-ref parts 0)) (string->number (list-ref parts 1)))\n         (valid-year\
    \ (string->number (list-ref parts 2)))))\n  (and (valid-date-format date)\n  \
    \     (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and (>=\
    \ month 1) (<= month 12)))\n  (define (valid-day month day)\n    (and (>= day\
    \ 1)\n         (<= day\n             (cond\n               [(or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) 31]\n\
    \               [(or (= month 4) (= month 6) (= month 9) (= month 11)) 30]\n \
    \              [(= month 2) 29]))))\n  (define (valid-year year)\n    (and (>=\
    \ year 1) (<= year 9999)))\n  (define (valid-format date)\n    (and (string-length\
    \ date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (and (valid-format date)\n       (let* ([parts (string-split date #\"-\")]\n\
    \              [month (string->number (vector-ref parts 0))]\n              [day\
    \ (string->number (vector-ref parts 1))]\n              [year (string->number\
    \ (vector-ref parts 2))])\n         (and (valid-month month)\n              (valid-day\
    \ month day)\n              (valid-year year)))))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n                 (<=\
    \ day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n                 (<= day 30)]\n                [(= month 2)\n        \
    \         (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 0)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (<= 1 (string->number month))\n        \
    \      (<= (string->number month) 12))))\n  (define (valid-day month day)\n  \
    \  (and (not (empty? day))\n         (and (<= 1 (string->number day))\n      \
    \        (<= (string->number day)\n                  (cond\n                 \
    \   [(equal? month \"01\") 31]\n                    [(equal? month \"03\") 31]\n\
    \                    [(equal? month \"05\") 31]\n                    [(equal?\
    \ month \"07\") 31]\n                    [(equal? month \"08\") 31]\n        \
    \            [(equal? month \"10\") 31]\n                    [(equal? month \"\
    12\") 31]\n                    [(equal? month \"04\") 30]\n                  \
    \  [(equal? month \"06\") 30]\n                    [(equal? month \"09\") 30]\n\
    \                    [(equal? month \"11\") 30]\n                    [(equal?\
    \ month \"02\") 29]\n                    [else 0])))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-format date)\n\
    \    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-format date)\n       (let* ([date-parts (string-split\
    \ date \"-\")]\n              [month (list-ref date-parts 0)]\n              [day\
    \ (list-ref date-parts 1)]\n              [year (list-ref date-parts 2)])\n  \
    \       (and (valid-month month)\n              (valid-day month day)\n      \
    \        (valid-year year)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (not (< month 1))\n         (not (> month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (not (< day 1))\n       \
    \  (not (> day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (not (< year 1))))\n  (define (valid-date-format date)\n    (string-match\
    \ \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define date-parts (string-split date \"-\"))\n    (define month (string->number\
    \ (list-ref date-parts 0)))\n    (define day (string->number (list-ref date-parts\
    \ 1)))\n    (define year (string->number (list-ref date-parts 2)))\n    (and (valid-month\
    \ month)\n         (valid-day day)\n         (valid-year year)))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (<= 1 day) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (<= 1 year)\
    \ (<= year 9999))))\n  (define (valid-date-format date)\n    (and (string? date)\n\
    \         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-month-day-pair month day)\n    (cond ((or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n           (and\
    \ (valid-month month)\n                (valid-day day)\n                (<= day\
    \ 31)))\n          ((or (= month 4) (= month 6) (= month 9) (= month 11))\n  \
    \         (and (valid-month month)\n                (valid-day day)\n        \
    \        (<= day 30)))\n          ((= month 2)\n           (and (valid-month month)\n\
    \                (valid-day day)\n                (<= day 29)))\n          (else\
    \ #f)))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n \
    \          [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month-day-pair month day)\n  \
    \         (valid-year year))))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (<= 1 day)\n              (cond\n      \
    \          [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12))\n                 (<= day 31)]\n                [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n                 (<= day\
    \ 30)]\n                [(= month 2)\n                 (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (<= 0 year) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)]\n                [month (string->number (list-ref date-parts 0))]\n\
    \                [day (string->number (list-ref date-parts 1))]\n            \
    \    [year (string->number (list-ref date-parts 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<=\
    \ 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (map string->number (string-split date #rx\"-\")))\n    (define (date-parts\
    \ date)\n      (split-date date))\n    (define (month date)\n      (list-ref (date-parts\
    \ date) 0))\n    (define (day date)\n      (list-ref (date-parts date) 1))\n \
    \   (define (year date)\n      (list-ref (date-parts date) 2))\n    (and (valid-month\
    \ (month date))\n         (valid-day (month date) (day date))\n         (valid-year\
    \ (year date))))\n  (and (valid-format date)\n       (valid-date-parts date)))\n",
  "  (let* ([date-list (string-split date \"-\")]\n         [month (string->number\
    \ (list-ref date-list 0))]\n         [day (string->number (list-ref date-list\
    \ 1))]\n         [year (string->number (list-ref date-list 2))])\n    (and (not\
    \ (empty? date))\n         (or (and (= month 1) (= day 31))\n             (and\
    \ (= month 3) (= day 31))\n             (and (= month 5) (= day 31))\n       \
    \      (and (= month 7) (= day 31))\n             (and (= month 8) (= day 31))\n\
    \             (and (= month 10) (= day 31))\n             (and (= month 12) (=\
    \ day 31))\n             (and (= month 4) (= day 30))\n             (and (= month\
    \ 6) (= day 30))\n             (and (= month 9) (= day 30))\n             (and\
    \ (= month 11) (= day 30))\n             (and (= month 2) (= day 29)))\n     \
    \    (and (>= month 1) (<= month 12))\n         (and (>= day 1) (<= day 31))\n\
    \         (and (>= year 1) (<= year 9999)))))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (if (or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                  (<= day 31)\n             \
    \     (if (or (= month 4) (= month 6) (= month 9) (= month 11))\n            \
    \          (<= day 30)\n                      (if (= month 2)\n              \
    \            (<= day 29)\n                          #f))))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (>= year 1)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        #t))\n  (define (split-date date)\n    (string-split date #\\-))\n  (define\
    \ (valid-date-parts date)\n    (let ((date-parts (split-date date)))\n      (and\
    \ (valid-month (string->number (list-ref date-parts 0)))\n           (valid-day\
    \ (string->number (list-ref date-parts 0)) (string->number (list-ref date-parts\
    \ 1)))\n           (valid-year (string->number (list-ref date-parts 2))))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (not (char-numeric?\
    \ (string-ref month 0)))\n         (not (char-numeric? (string-ref month 1)))\n\
    \         (integer? (string->number month))\n         (and (<= (string->number\
    \ month) 12)\n              (>= (string->number month) 1))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (not (char-numeric? (string-ref\
    \ day 0)))\n         (not (char-numeric? (string-ref day 1)))\n         (integer?\
    \ (string->number day))\n         (and (<= (string->number day) 31)\n        \
    \      (>= (string->number day) 1))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (not (char-numeric? (string-ref year 0)))\n       \
    \  (not (char-numeric? (string-ref year 1)))\n         (not (char-numeric? (string-ref\
    \ year 2)))\n         (not (char-numeric? (string-ref year 3)))\n         (integer?\
    \ (string->number year))\n         (and (<= (string->number year) 9999)\n    \
    \          (>= (string->number year) 1000))))\n  (define (valid-date-format date)\n\
    \    (and (not (empty? date))\n         (not (char-numeric? (string-ref date 0)))\n\
    \         (not (char-numeric? (string-ref date 1)))\n         (not (char-numeric?\
    \ (string-ref date 3)))\n         (not (char-numeric? (string-ref date 4)))\n\
    \         (not (char-numeric? (string-ref date 6)))\n         (not (char-numeric?\
    \ (string-ref date 7)))\n         (not (char-numeric? (string-ref date 8)))\n\
    \         (not (char-numeric? (string-ref date 9)))\n         (string=? (substring\
    \ date 2 3) \"-\")\n         (string=? (substring date 5 6) \"-\")\n         (string=?\
    \ (substring date 0 2", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (>= year 0)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\"-\")]\n                [month (string->number (list-ref date-parts 0))]\n\
    \                [day (string->number (list-ref date-parts 1))]\n            \
    \    [year (string->number (list-ref date-parts 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and\
    \ (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-parts date-parts)\n\
    \    (and (valid-month (car date-parts))\n         (valid-day (cadr date-parts))\n\
    \         (valid-year (caddr date-parts))))\n  (define (valid-date-format date-format)\n\
    \    (equal? date-format \"mm-dd-yyyy\"))\n  (define (valid-date-parts-format\
    \ date-parts date-format)\n    (and (valid-date-parts date-parts)\n         (valid-date-format\
    \ date-format)))\n  (define (valid-date-string date-string)\n    (and (not (empty?\
    \ date-string))\n         (valid-date-parts-format (string->list date-string)\
    \ \"mm-dd-yyyy\")))\n  (valid-date-string date))\n", "  (define (is-leap-year\
    \ year)\n    (and (zero? (modulo year 4))\n         (or (not (zero? (modulo year\
    \ 100)))\n             (zero? (modulo year 400)))))\n  (define (valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n           (and (>= day 1) (<= day 31)))\n          ((or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n           (and (>= day 1) (<= day\
    \ 30)))\n          ((= month 2)\n           (and (>= day 1) (<= day (if (is-leap-year\
    \ (date-year date)) 29 28))))))\n  (define (valid-year year)\n    (and (>= year\
    \ 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (date-month date)\n    (string->number\
    \ (regexp-replace* #rx\"^([0-9]{2})-[0-9]{2}-[0-9]{4}$\" date #:replace \"$1\"\
    )))\n  (define (date-day date)\n    (string->number (regexp-replace* #rx\"^[0-9]{2}-([0-9]{2})-[0-9]{4}$\"\
    \ date #:replace \"$1\")))\n  (define (date-year date)\n    (string->number (regexp-replace*\
    \ #rx\"^[0-9]{2}-[0-9]{2}-([0-9]{4})$\"", "  (define (valid-month month)\n   \
    \ (and (not (empty? month))\n         (and (<= 1 (string->number month))\n   \
    \           (<= (string->number month) 12))))\n  (define (valid-day day)\n   \
    \ (and (not (empty? day))\n         (and (<= 1 (string->number day))\n       \
    \       (<= (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (and (<= 1 (string->number year))\n          \
    \    (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (and (valid-month (substring\
    \ date 0 2))\n            (valid-day (substring date 3 5))\n            (valid-year\
    \ (substring date 6 10)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-parts (string-split date \"-\")])\n           (and\
    \ (valid-month (string->number (list-ref date-parts 0)))\n                (valid-day\
    \ (string->number (list-ref date-parts 1)))\n                (valid-year (string->number\
    \ (list-ref date-parts 2)))))))\n  (valid-date-format date))\n", "  (define (valid-month\
    \ month)\n    (and (not (string=? month \"\"))\n         (and (not (string=? month\
    \ \"0\"))\n              (and (not (string=? month \"00\"))\n                \
    \   (and (not (string=? month \"000\"))\n                        (and (not (string=?\
    \ month \"0000\"))\n                             (and (not (string=? month \"\
    00000\"))\n                                  (and (not (string=? month \"000000\"\
    ))\n                                       (and (not (string=? month \"0000000\"\
    ))\n                                            (and (not (string=? month \"00000000\"\
    ))\n                                                 (and (not (string=? month\
    \ \"000000000\"))\n                                                      (and\
    \ (not (string=? month \"0000000000\"))\n                                    \
    \                       (and (not (string=? month \"00000000000\"))\n        \
    \                                                        (and (not (string=? month\
    \ \"000000000000\"))\n                                                       \
    \              (and (not (string=? month \"0000000000000\"))\n               \
    \                                                           (and (not (string=?\
    \ month \"00000000000000\"))\n                                               \
    \                                (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (if (or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n                  (<=\
    \ day 31)\n                  (if (or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n                      (<= day 30)\n                      (if (= month\
    \ 2)\n                          (<= day 29)\n                          #f))))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 0) (<= year 9999))))\n  (define (valid-date-string date)\n    (and (string?\
    \ date)\n         (and (not (empty? date))\n              (string-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))))\n  (define (split-date date)\n    (define\
    \ (split-date-helper date)\n      (if (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n          (list (string->number (substring date 0 2))\n             \
    \   (string->number (substring date 3 5))\n                (string->number (substring\
    \ date 6 10)))\n          #f))\n    (if (valid-date-string date)\n        (split-date-helper\
    \ date)\n        #f))\n  (define (validate-date date)\n    (if (split-date date)\n\
    \        (and (valid-month (car (split-date date)))\n             (valid-day (car\
    \ (split-date date)) (cadr (split-date date)))\n             (valid-year (caddr\
    \ (split-date date))))\n        #f))\n  (validate-date date))\n", "  (define (valid-day\
    \ day month)\n    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n\
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n\
    \  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (define (split-date date)\n      (string-split\
    \ date #\\-))\n    (define (date-parts date)\n      (map string->number (split-date\
    \ date)))\n    (define (valid-date-parts? date)\n      (let* ([date-parts (date-parts\
    \ date)]\n             [month (list-ref date-parts 0)]\n             [day (list-ref\
    \ date-parts 1)]\n             [year (list-ref date-parts 2)])\n        (and (valid-month\
    \ month)\n             (valid-day day month)\n             (valid-year year))))\n\
    \    (valid-date-parts? date))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (is-valid-month month)\n\
    \    (and (not (empty? month))\n         (and (not (empty? (string-&gt;number\
    \ month)))\n              (and (&lt;= 1 (string-&gt;number month))\n         \
    \          (&lt;= (string-&gt;number month) 12)))))\n  (define (is-valid-day day)\n\
    \    (and (not (empty? day))\n         (and (not (empty? (string-&gt;number day)))\n\
    \              (and (&lt;= 1 (string-&gt;number day))\n                   (&lt;=\
    \ (string-&gt;number day) 31)))))\n  (define (is-valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (not (empty? (string-&gt;number year)))\n    \
    \          (and (&lt;= 1 (string-&gt;number year))\n                   (&lt;=\
    \ (string-&gt;number year) 9999)))))\n  (define (is-valid-date date)\n    (and\
    \ (not (empty? date))\n         (and (is-valid-month (substring date 0 2))\n \
    \             (and (is-valid-day (substring date 3 5))\n                   (is-valid-year\
    \ (substring date 6 10))))))\n  (is-valid-date date))\n</code>\nI am not sure\
    \ if I am doing it right. I am trying to learn Racket.\n\n\nA:\n\nI think you're\
    \ overcomplicating things.\nFirst, you can use <code>string-split</code> to split\
    \ the string into a list of strings, then use <code>map</code> to convert each\
    \ string to a number.\nSecond, you can use <code>cond</code> to check the month\
    \ and the day.\nThird, you can use <code>andmap</code> to check that all the conditions\
    \ are true.\n<code>(define (valid-date date)\n  (define (valid-month month)\n\
    \    (cond\n      [(= month 1) (valid-day 31)]\n      [(= month 2) (valid-day\
    \ 29)]\n      [(= month 3) (valid-day 31)]\n      [(= month 4) (", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number\
    \ month))\n              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (valid-month (substring date\
    \ 0 2))\n       (valid-day (substring date 3 5))\n       (valid-year (substring\
    \ date 6 10))))\n</code>\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (<= day 31)]\n             \
    \   [(or (= month 4) (= month 6) (= month 9) (= month 11))\n                 (<=\
    \ day 30)]\n                [(= month 2)\n                 (<= day 29)]))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (<= 0 year)\
    \ (<= year 9999))))\n  (define (valid-date-format date)\n    (and (string? date)\n\
    \         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (let* ([month (string->number (list-ref (split-date date) 1))]\n\
    \             [day (string->number (list-ref (split-date date) 2))]\n        \
    \     [year (string->number (list-ref (split-date date) 3))])\n        (and (valid-month\
    \ month)\n             (valid-day month day)\n             (valid-year year))))\n\
    \    (and (valid-date-format date)\n         (valid-date-parts-helper date)))\n\
    \  (valid-date-parts date))\n", "  (define (valid_date-helper date)\n    (define\
    \ (valid-month month)\n      (and (integer? month)\n           (and (&lt;= 1 month)\n\
    \                (&lt;= month 12))))\n    (define (valid-day month day)\n    \
    \  (and (integer? day)\n           (and (&lt;= 1 day)\n                (cond\n\
    \                  [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                   (&lt;= day 31)]\n        \
    \          [(or (= month 4) (= month 6) (= month 9) (= month 11))\n          \
    \         (&lt;= day 30)]\n                  [(= month 2)\n                  \
    \ (&lt;= day 29)]))))\n    (define (valid-year year)\n      (and (integer? year)\n\
    \           (&gt;= year 0)))\n    (define (valid-date-format date)\n      (and\
    \ (string? date)\n           (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n    (define (valid-date-parts date)\n      (define (date-parts date)\n\
    \        (let ([date-parts (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)])\n          (list (string-&gt;number (cadr date-parts))\n           \
    \     (string-&gt;number (caddr date-parts))\n                (string-&gt;number\
    \ (cadddr date-parts)))))\n      (define (valid-date-parts-helper date-parts)\n\
    \        (and (valid-month (car date-parts))\n             (valid-day (car date-parts)\
    \ (cadr date-parts))\n             (valid-year (caddr date-parts))))\n      (valid-date-parts-helper\
    \ (date-parts date)))\n    (and (valid-date-format date)\n         (valid-date-parts\
    \ date)))\n  (valid-date-helper date))\n</code>\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (<= 1 day) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (<= 0 year)\
    \ (<= year 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         #t))\n  (define (valid-day-for-month\
    \ day month)\n    (cond\n      [(and (= 1 month) (= day 31)) #t]\n      [(and\
    \ (= 3 month) (= day 31)) #t]\n      [(and (= 5 month) (= day 31)) #t]\n     \
    \ [(and (= 7 month) (= day 31)) #t]\n      [(and (= 8 month) (= day 31)) #t]\n\
    \      [(and (= 10 month) (= day 31)) #t]\n      [(and (= 12 month) (= day 31))\
    \ #t]\n      [(and (= 4 month) (= day 30)) #t]\n      [(and (= 6 month) (= day\
    \ 30)) #t]\n      [(and (= 9 month) (= day 30)) #t]\n      [(and (= 11 month)\
    \ (= day 30)) #t]\n      [(and (= 2 month) (= day 29)) #t]\n      [else #f]))\n\
    \  (define (valid-date-for-month day month year)\n    (cond\n      [(and (= 2\
    \ month) (= day 29))\n       (and (valid-year year)\n            (and (zero? (modulo\
    \ year 4))\n                 (or (zero? (modulo year 100))\n                 \
    \    (zero? (modulo year 400)))))]\n      [else #t]))\n  (define (valid-date-for-month-day\
    \ day month year)\n    (and (valid-day-for-month day month)\n         (valid-date-for-month\
    \ day month year)))\n  (define (valid-date-for-", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (<= 1 month 12)))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (<= 1 day 31)))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (<= 1 year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (define\
    \ (valid-month-day month day)\n        (cond ((and (= month 1) (= day 31)) #t)\n\
    \              ((and (= month 3) (= day 31)) #t)\n              ((and (= month\
    \ 5) (= day 31)) #t)\n              ((and (= month 7) (= day 31)) #t)\n      \
    \        ((and (= month 8) (= day 31)) #t)\n              ((and (= month 10) (=\
    \ day 31)) #t)\n              ((and (= month 12) (= day 31)) #t)\n           \
    \   ((and (= month 4) (= day 30)) #t)\n              ((and (= month 6) (= day\
    \ 30)) #t)\n              ((and (= month 9) (= day 30)) #t)\n              ((and\
    \ (= month 11) (= day 30)) #t)\n              ((and (= month 2) (= day 29)) #t)\n\
    \              (else #f)))\n      (define (valid-month-day-year month day year)\n\
    \        (cond ((and (= month 2) (= day 29) (not (leap-year? year))) #f)\n   \
    \           (else #t)))\n      (define (leap-year? year)\n        (or (and (zero?\
    \ (modulo year 4))\n                 (not (zero? (modulo year 100))))\n      \
    \      (zero? (modulo year 400))))\n      (valid-month-day-year (string->number\
    \ (list-ref date 1))\n                            (string->number (list-ref date\
    \ 3))\n                            (string->number (list-ref date", "  (define\
    \ (valid-month month)\n    (and (not (string=? month \"\"))\n         (and (not\
    \ (string=? month \"0\"))\n              (and (not (string=? month \"00\"))\n\
    \                   (and (not (string=? month \"000\"))\n                    \
    \    (and (not (string=? month \"0000\"))\n                             (and (not\
    \ (string=? month \"00000\"))\n                                  (and (not (string=?\
    \ month \"000000\"))\n                                       (and (not (string=?\
    \ month \"0000000\"))\n                                            (and (not (string=?\
    \ month \"00000000\"))\n                                                 (and\
    \ (not (string=? month \"000000000\"))\n                                     \
    \                 (and (not (string=? month \"0000000000\"))\n               \
    \                                            (and (not (string=? month \"00000000000\"\
    ))\n                                                                (and (not\
    \ (string=? month \"000000000000\"))\n                                       \
    \                              (and (not (string=? month \"0000000000000\"))\n\
    \                                                                          (and\
    \ (not (string=? month \"00000000000000\"))\n                                \
    \                                               (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n     \
    \    (and (<= 1 day) (<= day 31))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (valid-month-day-pair\
    \ month day)\n      (cond\n        [(and (= month 1) (= day 31)) #t]\n       \
    \ [(and (= month 3) (= day 31)) #t]\n        [(and (= month 5) (= day 31)) #t]\n\
    \        [(and (= month 7) (= day 31)) #t]\n        [(and (= month 8) (= day 31))\
    \ #t]\n        [(and (= month 10) (= day 31)) #t]\n        [(and (= month 12)\
    \ (= day 31)) #t]\n        [(and (= month 4) (= day 30)) #t]\n        [(and (=\
    \ month 6) (= day 30)) #t]\n        [(and (= month 9) (= day 30)) #t]\n      \
    \  [(and (= month 11) (= day 30)) #t]\n        [(and (= month 2) (= day 29)) #t]\n\
    \        [else #f]))\n    (define (valid-leap-year year)\n      (and (integer?\
    \ year)\n           (or (= (modulo year 4) 0)\n               (and (= (modulo\
    \ year 100) 0)\n                    (= (modulo year 400) 0)))))\n    (define (valid-month-day-year-pair\
    \ month day year)\n      (cond\n        [(and (= month 2) (= day 29) (valid-leap-year\
    \ year)) #t]\n        [else (valid-month-day-pair month day)]))\n    (define (valid-month-",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-date-string date)\n    (and (string? date)\n         (string-contains\
    \ date #\\-)))\n  (define (split-date date)\n    (string-split date #\\-))\n \
    \ (define (valid-date-format date)\n    (and (equal? (length (split-date date))\
    \ 3)\n         (and (valid-month (string->number (list-ref (split-date date) 0)))\n\
    \              (valid-day (string->number (list-ref (split-date date) 0)) (string->number\
    \ (list-ref (split-date date) 1)))\n              (valid-year (string->number\
    \ (list-ref (split-date date) 2))))))\n  (and (valid-date-string date)\n     \
    \  (valid-date-format date)))\n", "  (define (valid-month month)\n    (and (not\
    \ (string=? month \"\"))\n         (and (<= 1 (string->number month))\n      \
    \        (<= (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (string=? day \"\"))\n         (and (<= 1 (string->number day))\n     \
    \         (<= (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (string=? year \"\"))\n         (and (<= 1 (string->number year))\n   \
    \           (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (not (string=? date \"\"))\n         (string-contains date #\\-)))\n\
    \  (and (valid-date-format date)\n       (and (valid-month (substring date 0 2))\n\
    \            (and (valid-day (substring date 3 5))\n                 (valid-year\
    \ (substring date 6 10))))))\n", "  (if (not (string? date))\n      #f\n     \
    \ (let* ([date-list (string-split date \"-\")]\n             [month (string->number\
    \ (list-ref date-list 0))]\n             [day (string->number (list-ref date-list\
    \ 1))]\n             [year (string->number (list-ref date-list 2))])\n       \
    \ (and (not (empty? date))\n             (and (and (<= 1 month) (<= month 12))\n\
    \                  (and (and (<= 1 day) (<= day 31))\n                       (and\
    \ (and (<= 1 year) (<= year 9999))\n                            (and (and (or\
    \ (and (= month 1) (= day 31))\n                                          (and\
    \ (= month 3) (= day 31))\n                                          (and (= month\
    \ 5) (= day 31))\n                                          (and (= month 7) (=\
    \ day 31))\n                                          (and (= month 8) (= day\
    \ 31))\n                                          (and (= month 10) (= day 31))\n\
    \                                          (and (= month 12) (= day 31)))\n  \
    \                                     (not (and (= month 2) (= day 29))))\n  \
    \                               (and (or (and (= month 4) (= day 30))\n      \
    \                                    (and (= month 6) (= day 30))\n          \
    \                                (and (= month 9) (= day 30))\n              \
    \                            (and (= month 11) (= day 30)))\n                \
    \                      (not (and (= month 2) (= day 29))))\n                 \
    \                (and (and (= month 2) (= day 29))\n                         \
    \             (or (= year 400)\n                                          (and\
    \ (not (= year 100))\n                                               (not (= year\
    \ 200))\n                                               (not (= year 300))))))))))))))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (empty?\
    \ (string-&gt;number month)))\n         (not (negative? (string-&gt;number month)))\n\
    \         (not (&gt; (string-&gt;number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (not (empty? (string-&gt;number day)))\n\
    \         (not (negative? (string-&gt;number day)))\n         (not (&gt; (string-&gt;number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (not (empty? (string-&gt;number year)))\n         (not (negative? (string-&gt;number\
    \ year)))\n         (not (&gt; (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (valid-date-format date)\n       (valid-month (substring date 0 2))\n      \
    \ (valid-day (substring date 3 5))\n       (valid-year (substring date 6 10))))\n\
    </code>\n", "  (define (valid-month month)\n    (and (integer? month)\n      \
    \   (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n    (and\
    \ (integer? day)\n         (and (>= day 1)\n              (cond\n            \
    \    [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2) (<= day\
    \ 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n         (>=\
    \ year 0)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (get-month date)\n    (string->number (cadr (split-date date))))\n\
    \  (define (get-day date)\n    (string->number (caddr (split-date date))))\n \
    \ (define (get-year date)\n    (string->number (cadddr (split-date date))))\n\
    \  (and (valid-date-format date)\n       (and (valid-month (get-month date))\n\
    \            (and (valid-day (get-month date) (get-day date))\n              \
    \   (valid-year (get-year date))))))\n", "  (cond\n    [(empty? date) #f]\n  \
    \  [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n     (let ([month\
    \ (string->number (regexp-match #rx\"^[0-9]{2}\" date))]\n           [day (string->number\
    \ (regexp-match #rx\"-[0-9]{2}-\" date))]\n           [year (string->number (regexp-match\
    \ #rx\"[0-9]{4}$\" date))])\n       (and (<= 1 month 12)\n            (<= 1 day\
    \ (cond\n                       [(member month '(1 3 5 7 8 10 12)) 31]\n     \
    \                  [(member month '(4 6 9 11)) 30]\n                       [(=\
    \ month 2) 29]))\n            (<= year 2020)))]\n    [else #f]))\n", "  (define\
    \ (valid-month month)\n    (and (not (negative? month))\n         (not (> month\
    \ 12))))\n  (define (valid-day month day)\n    (and (not (negative? day))\n  \
    \       (cond\n           [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12))\n            (not (> day 31))]\n    \
    \       [(or (= month 4) (= month 6) (= month 9) (= month 11))\n            (not\
    \ (> day 30))]\n           [(= month 2)\n            (not (> day 29))])))\n  (define\
    \ (valid-year year)\n    (and (not (negative? year))\n         (not (> year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (string? date)\n         (string-contains\
    \ date #\\-)))\n  (define (valid-date-parts date)\n    (define (valid-date-part\
    \ date-part)\n      (and (string? date-part)\n           (not (empty? date-part))\n\
    \           (not (string-contains date-part #\\.))\n           (not (string-contains\
    \ date-part #\\/))\n           (not (string-contains date-part #\\:))\n      \
    \     (not (string-contains date-part #\\space))\n           (not (string-contains\
    \ date-part #\\tab))\n           (not (string-contains date-part #\\newline))\n\
    \           (not (string-contains date-part #\\return))\n           (not (string-contains\
    \ date-part #\\backspace))\n           (not (string-contains date-part #\\rubout))\n\
    \           (not (string-contains date-part #\\page))\n           (not (string-contains\
    \ date-part #\\escape))\n           (not (string-contains date-part #\\delete))\n\
    \           (not (string-contains date-part #\\nul))\n           (not (string-contains\
    \ date-part #\\alarm))\n           (not (string-contains date-part #\\backspace))\n\
    \           (not (string-contains date-part #\\delete", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n  \
    \  (define (split-date date)\n      (map string->number (string-split date #\\\
    -)))\n    (define (valid-date-parts-helper date)\n      (let* ([date-parts (split-date\
    \ date)]\n             [month (list-ref date-parts 0)]\n             [day (list-ref\
    \ date-parts 1)]\n             [year (list-ref date-parts 2)])\n        (and (valid-month\
    \ month)\n             (valid-day month day)\n             (valid-year year))))\n\
    \    (and (valid-date-format date)\n         (valid-date-parts-helper date)))\n\
    \  (valid-date-parts date))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (string? date)\n         (string-length\
    \ date)\n         (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date \"-\")]\n\
    \           [month (string->number (list-ref date-parts 0))]\n           [day\
    \ (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and (>=\
    \ month 1) (<= month 12)))\n  (define (valid-day month day)\n    (and (>= day\
    \ 1)\n         (<= day (cond\n                  [(member month '(1 3 5 7 8 10\
    \ 12)) 31]\n                  [(member month '(4 6 9 11)) 30]\n              \
    \    [(= month 2) 29]\n                  [else 0]))))\n  (define (valid-year year)\n\
    \    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format date)\n \
    \   (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let\
    \ ([date-parts (string-split date \"-\")])\n           (and (valid-month (string->number\
    \ (list-ref date-parts 0)))\n                (valid-day (string->number (list-ref\
    \ date-parts 0))\n                           (string->number (list-ref date-parts\
    \ 1)))\n                (valid-year (string->number (list-ref date-parts 2)))))))\n\
    \  (valid-date-format date))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4)\
    \ (= month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month\
    \ 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define (split-date date)\n      (string-split date #\\-))\n    (define (date-parts\
    \ date)\n      (map string->number (split-date date)))\n    (define (date-month\
    \ date)\n      (list-ref (date-parts date) 0))\n    (define (date-day date)\n\
    \      (list-ref (date-parts date) 1))\n    (define (date-year date)\n      (list-ref\
    \ (date-parts date) 2))\n    (and (valid-month (date-month date))\n         (valid-day\
    \ (date-month date) (date-day date))\n         (valid-year (date-year date))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day\n\
    \             (cond\n               [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12)) 31]\n               [(or (=\
    \ month 4) (= month 6) (= month 9) (= month 11)) 30]\n               [(= month\
    \ 2) 29]))))\n  (define (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-month (string->number (regexp-replace #rx\"^[0-9]{2}-\" date \"\
    \")))\n       (valid-day (string->number (regexp-replace #rx\"^[0-9]{2}-\" date\
    \ \"\"))\n                  (string->number (regexp-replace #rx\"-[0-9]{4}$\"\
    \ date \"\")))\n       (valid-year (string->number (regexp-replace #rx\"-[0-9]{4}$\"\
    \ date \"\")))))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<=\
    \ month 12)))\n  (define (valid-day month day)\n    (cond ((or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \         (and (<= 1 day) (<= day 31)))\n          ((or (= month 4) (= month 6)\
    \ (= month 9) (= month 11))\n           (and (<= 1 day) (<= day 30)))\n      \
    \    ((= month 2)\n           (and (<= 1 day) (<= day 29)))))\n  (define (valid-year\
    \ year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-date-format\
    \ date)\n       (let* ((date-list (string-split date #\\-))\n              (month\
    \ (string->number (list-ref date-list 0)))\n              (day (string->number\
    \ (list-ref date-list 1)))\n              (year (string->number (list-ref date-list\
    \ 2))))\n         (and (valid-month month)\n              (valid-day month day)\n\
    \              (valid-year year)))))\n", "  (define (valid-month month)\n    (and\
    \ (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day day)\n    (and (&gt;=\
    \ day 1) (&lt;= day 31)))\n  (define (valid-year year)\n    (and (&gt;= year 1)\
    \ (&lt;= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define (valid-date-parts-helper date)\n      (match date\n        [(list\
    \ month day year)\n         (and (valid-month month)\n              (valid-day\
    \ day)\n              (valid-year year))]))\n    (valid-date-parts-helper (string-&gt;list\
    \ date)))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (cond\n      [(and (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (<=\
    \ 1 day) (<= day 31)]\n      [(and (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n       (<= 1 day) (<= day 30)]\n      [(= month 2)\n       (<= 1 day)\
    \ (<= day 29)]))\n  (define (valid-year year)\n    (<= 1 year))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-month\
    \ (string->number (regexp-replace #rx\"^[0-9]{2}-\" date \"\")))\n       (valid-day\
    \ (string->number (regexp-replace #rx\"^[0-9]{2}-\" date \"\"))\n            \
    \      (string->number (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-\" date \"\")))\n\
    \       (valid-year (string->number (regexp-replace #rx\"^[0-9]{2}-[0-9]{2}-\"\
    \ date \"\")))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-parts-helper-helper", " \
    \ (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (string->number (list-ref date-parts 0))]\n           [day\
    \ (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and (not\
    \ (string=? month \"\"))\n         (and (<= 1 (string->number month))\n      \
    \        (<= (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (string=? day \"\"))\n         (and (<= 1 (string->number day))\n     \
    \         (<= (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (string=? year \"\"))\n         (and (<= 1 (string->number year))\n   \
    \           (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (not (string=? date \"\"))\n         (string-contains date #\\-)))\n\
    \  (and (valid-date-format date)\n       (and (valid-month (substring date 0 2))\n\
    \            (and (valid-day (substring date 3 5))\n                 (valid-year\
    \ (substring date 6 10))))))\n", "  (define (valid-month month)\n    (and (not\
    \ (string=? month \"\"))\n         (and (<= 1 (string->number month))\n      \
    \        (<= (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (string=? day \"\"))\n         (and (<= 1 (string->number day))\n     \
    \         (<= (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (string=? year \"\"))\n         (and (<= 1 (string->number year))\n   \
    \           (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-part date)\n      (and (valid-month (substring\
    \ date 0 2))\n           (valid-day (substring date 3 5))\n           (valid-year\
    \ (substring date 6 10))))\n    (valid-date-part date))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (and\
    \ (>= day 1)\n         (<= day\n             (cond\n               [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ 31]\n               [(or (= month 4) (= month 6) (= month 9) (= month 11)) 30]\n\
    \               [(= month 2) 29]))))\n  (define (valid-year year)\n    (and (>=\
    \ year 0) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date-parts date)\n \
    \   (let* ([date-parts (string-split date \"-\")]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (and (not (empty? date))\n       (valid-date-format?\
    \ date)\n       (valid-date-numbers? date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (parse-date date)\n    (let\
    \ ([date-parts (string-split date #\\-)]\n          [month (string->number (list-ref\
    \ date-parts 0))]\n          [day (string->number (list-ref date-parts 1))]\n\
    \          [year (string->number (list-ref date-parts 2))])\n      (list month\
    \ day year)))\n  (define (valid-date-parts date-parts)\n    (and (valid-month\
    \ (list-ref date-parts 0))\n         (valid-day (list-ref date-parts 0) (list-ref\
    \ date-parts 1))\n         (valid-year (list-ref date-parts 2))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts (parse-date date))))\n", "  (define (valid-date-helper\
    \ date)\n    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (<= 1 month) (<= month 12))))\n  (define (valid-day day)\n    (and (integer?\
    \ day)\n         (and (<= 1 day) (<= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (string? date)\n         (string-match #rx\
    \ \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)]\n           [month (string->number\
    \ (list-ref date-parts 0))]\n           [day (string->number (list-ref date-parts\
    \ 1))]\n           [year (string->number (list-ref date-parts 2))])\n      (and\
    \ (valid-month month)\n           (valid-day day)\n           (valid-year year))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(= month 1)  (and (>= day 1) (<= day 31))]\n \
    \     [(= month 3)  (and (>= day 1) (<= day 31))]\n      [(= month 5)  (and (>=\
    \ day 1) (<= day 31))]\n      [(= month 7)  (and (>= day 1) (<= day 31))]\n  \
    \    [(= month 8)  (and (>= day 1) (<= day 31))]\n      [(= month 10) (and (>=\
    \ day 1) (<= day 31))]\n      [(= month 12) (and (>= day 1) (<= day 31))]\n  \
    \    [(= month 4)  (and (>= day 1) (<= day 30))]\n      [(= month 6)  (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 9)  (and (>= day 1) (<= day 30))]\n  \
    \    [(= month 11) (and (>= day 1) (<= day 30))]\n      [(= month 2)  (and (>=\
    \ day 1) (<= day 29))]))\n  (define (valid-year year)\n    (and (>= year 1) (<=\
    \ year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-string date)\n    (and (not (string=? date \"\
    \"))\n         (valid-date-format date)))\n  (define (valid-date-numbers date)\n\
    \    (let* ([date-numbers (string-split date \"-\")]\n           [month (string->number\
    \ (vector-ref date-numbers 0))]\n           [day (string->number (vector-ref date-numbers\
    \ 1", "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (cond\n      [(and (= 1 month) (= 3 month)\
    \ (= 5 month) (= 7 month) (= 8 month) (= 10 month) (= 12 month))\n       (and\
    \ (<= 1 day) (<= day 31))]\n      [(and (= 4 month) (= 6 month) (= 9 month) (=\
    \ 11 month))\n       (and (<= 1 day) (<= day 30))]\n      [(= 2 month)\n     \
    \  (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and (<=\
    \ 1 year) (<= year 9999)))\n  (define (valid-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (let* ([date-list (string-split\
    \ date #\\-)]\n         [month (string->number (list-ref date-list 0))]\n    \
    \     [day (string->number (list-ref date-list 1))]\n         [year (string->number\
    \ (list-ref date-list 2))])\n    (and (valid-format date)\n         (valid-month\
    \ month)\n         (valid-day month day)\n         (valid-year year))))\n", " \
    \ (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1)\
    \ (<= day 31))]\n      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day\
    \ 1) (<= day 29))]))\n  (define (valid-year year)\n    (and (>= year 0) (<= year\
    \ 9999)))\n  (define (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (valid-format date)\n       (valid-month (string->number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))\n                  (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date)))\n       (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\"\
    \ date)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n  \
    \       (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (<= 1 day)\n              (cond ((or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                     (<= day 31))\n                    ((or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n                     (<= day 30))\n \
    \                   ((= month 2)\n                     (<= day 29))))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (<= 1 year)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-list (string-split date \"-\")]\n             \
    \   [month (string->number (list-ref date-list 0))]\n                [day (string->number\
    \ (list-ref date-list 1))]\n                [year (string->number (list-ref date-list\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (string-split date #\\-))\n    (define (parse-date-parts date)\n      (define\
    \ (parse-date-part date-part)\n        (string->number date-part))\n      (map\
    \ parse-date-part date))\n    (define (valid-date-part date-part)\n      (and\
    \ (integer? date-part)\n           (>= date-part 0)))\n    (andmap valid-date-part\
    \ (parse-date-parts (split-date date))))\n  (and (valid-date-format date)\n  \
    \     (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day)\n              (cond\n\
    \                [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (<= day 31)]\n             \
    \   [(or (= month 4) (= month 6) (= month 9) (= month 11))\n                 (<=\
    \ day 30)]\n                [(= month 2)\n                 (<= day 29)]))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (<= year 9999)))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let ([parts (string-split date\
    \ #\\-)]\n          [month (string->number (list-ref parts 0))]\n          [day\
    \ (string->number (list-ref parts 1))]\n          [year (string->number (list-ref\
    \ parts 2))])\n      (and (valid-month month)\n           (valid-day month day)\n\
    \           (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (and\
    \ (<= 1 day) (<= day (cond ((or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) 31)\n                               \
    \   ((or (= month 4) (= month 6) (= month 9) (= month 11)) 30)\n             \
    \                     (else 29)))))\n  (define (valid-year year)\n    (and (<=\
    \ 1 year) (<= year 9999)))\n  (define (valid-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-list (string-split\
    \ date \"-\")]\n                [month (string->number (list-ref date-list 0))]\n\
    \                [day (string->number (list-ref date-list 1))]\n             \
    \   [year (string->number (list-ref date-list 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month) (<=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (<= 1 day)\n              (cond ((or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n                    \
    \ (<= day 31))\n                    ((or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n                     (<= day 30))\n                    ((= month\
    \ 2)\n                     (<= day 29))))))\n  (define (valid-year year)\n   \
    \ (and (integer? year)\n         (<= 1 year)))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (define\
    \ (split-date date)\n           (regexp-match #rx\"([0-9]{2})-([0-9]{2})-([0-9]{4})\"\
    \ date))\n         (define (get-month date)\n           (string->number (list-ref\
    \ (split-date date) 1)))\n         (define (get-day date)\n           (string->number\
    \ (list-ref (split-date date) 2)))\n         (define (get-year date)\n       \
    \    (string->number (list-ref (split-date date) 3)))\n         (and (valid-month\
    \ (get-month date))\n              (valid-day (get-month date) (get-day date))\n\
    \              (valid-year (get-year date)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (not (empty? month))\n         (and (<= 1 (string->number month))\n   \
    \           (<= (string->number month) 12))))\n  (define (valid-day day)\n   \
    \ (and (not (empty? day))\n         (and (<= 1 (string->number day))\n       \
    \       (<= (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (and (<= 1 (string->number year))\n          \
    \    (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]$\"\
    \ date)))\n  (define (valid-day-for-month day month)\n    (cond ((or (string=?\
    \ month \"01\")\n               (string=? month \"03\")\n               (string=?\
    \ month \"05\")\n               (string=? month \"07\")\n               (string=?\
    \ month \"08\")\n               (string=? month \"10\")\n               (string=?\
    \ month \"12\"))\n           (<= (string->number day) 31))\n          ((or (string=?\
    \ month \"04\")\n               (string=? month \"06\")\n               (string=?\
    \ month \"09\")\n               (string=? month \"11\"))\n           (<= (string->number\
    \ day) 30))\n          ((string=? month \"02\")\n           (<= (string->number\
    \ day) 29))\n          (else #f)))\n  (define (valid-leap-year year)\n    (and\
    \ (not (empty? year))\n         (and (zero? (modulo (string->number year) 4))\n\
    \              (or (not (zero? (modulo (string->number year) 100)))\n        \
    \          (zero? (modulo (string->number year) 400))))))\n  (define (valid-day-for-month-and-year\
    \ day month year)\n    (cond ((and (string=? month \"02\")\n", "  (define (valid-date-helper\
    \ date)\n    (define (valid-month month)\n      (and (not (empty? month))\n  \
    \         (and (<= 1 (string->number month))\n                (<= (string->number\
    \ month) 12))))\n    (define (valid-day day)\n      (and (not (empty? day))\n\
    \           (and (<= 1 (string->number day))\n                (<= (string->number\
    \ day) 31))))\n    (define (valid-year year)\n      (and (not (empty? year))\n\
    \           (and (<= 1 (string->number year))\n                (<= (string->number\
    \ year) 9999))))\n    (define (valid-date-format date)\n      (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n           (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n    (define (valid-month-day-format date)\n      (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n           (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n    (define (valid-month-day-year-format date)\n      (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n           (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n    (define (valid-month-day-year-format date)\n      (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n           (regexp-", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and\
    \ (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([parts (string-split\
    \ date #\"-\")]\n           [month (string->number (list-ref parts 0))]\n    \
    \       [day (string->number (list-ref parts 1))]\n           [year (string->number\
    \ (list-ref parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and (>=\
    \ month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n     \
    \ [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-date-format\
    \ date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (string->number (list-ref date-parts 0))]\n           [day\
    \ (string->number (list-ref date-parts 1))])\n      (and (valid-month month) (valid-day\
    \ month day))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (not (< (string->number month) 1))\n\
    \         (not (> (string->number month) 12))))\n  (define (valid-day month day)\n\
    \    (and (not (empty? day))\n         (not (< (string->number day) 1))\n    \
    \     (not (> (string->number day)\n                 (cond ((or (= (string->number\
    \ month) 1)\n                            (= (string->number month) 3)\n      \
    \                      (= (string->number month) 5)\n                        \
    \    (= (string->number month) 7)\n                            (= (string->number\
    \ month) 8)\n                            (= (string->number month) 10)\n     \
    \                       (= (string->number month) 12))\n                     \
    \   31)\n                       ((or (= (string->number month) 4)\n          \
    \                  (= (string->number month) 6)\n                            (=\
    \ (string->number month) 9)\n                            (= (string->number month)\
    \ 11))\n                        30)\n                       ((= (string->number\
    \ month) 2)\n                        29)\n                       (else\n     \
    \                   0))))))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (not (< (string->number year) 1))))\n  (define (valid-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-format date)\n       (valid-month (substring date 0 2))\n\
    \       (valid-day (substring date 0 2) (substring date 3 5))\n       (valid-year\
    \ (substring date 6 10))))\n", "  (define (valid-month month)\n    (and (not (string=?\
    \ month \"\"))\n         (and (not (string=? month \"0\"))\n              (and\
    \ (not (string=? month \"00\"))\n                   (and (not (string=? month\
    \ \"000\"))\n                        (and (not (string=? month \"0000\"))\n  \
    \                           (and (not (string=? month \"00000\"))\n          \
    \                        (and (not (string=? month \"000000\"))\n            \
    \                           (and (not (string=? month \"0000000\"))\n        \
    \                                    (and (not (string=? month \"00000000\"))\n\
    \                                                 (and (not (string=? month \"\
    000000000\"))\n                                                      (and (not\
    \ (string=? month \"0000000000\"))\n                                         \
    \                  (and (not (string=? month \"00000000000\"))\n             \
    \                                                   (and (not (string=? month\
    \ \"000000000000\"))\n                                                       \
    \              (and (not (string=? month \"0000000000000\"))\n               \
    \                                                           (and (not (string=?\
    \ month \"00000000000000\"))\n                                               \
    \                                (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                 (<= day 31)]\n                [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                 (<= day 30)]\n                [(= month\
    \ 2)\n                 (<= day 29)]))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (>= year 1)))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (split-date date)\n    (string-split date \"-\"))\n  (define\
    \ (get-month date)\n    (string->number (list-ref (split-date date) 0)))\n  (define\
    \ (get-day date)\n    (string->number (list-ref (split-date date) 1)))\n  (define\
    \ (get-year date)\n    (string->number (list-ref (split-date date) 2)))\n  (and\
    \ (valid-date-format date)\n       (and (valid-month (get-month date))\n     \
    \       (and (valid-day (get-month date) (get-day date))\n                 (valid-year\
    \ (get-year date))))))\n", "  (let ([date-list (string-split date \"-\")])\n \
    \   (and (not (empty? date-list))\n         (and (not (empty? (cdr date-list)))\n\
    \              (and (not (empty? (cddr date-list)))\n                   (and (not\
    \ (empty? (cdddr date-list)))\n                        (and (not (empty? (cddddr\
    \ date-list)))\n                             (and (= (length date-list) 3)\n \
    \                                 (and (string-&gt;number (car date-list))\n \
    \                                      (and (string-&gt;number (cadr date-list))\n\
    \                                            (and (string-&gt;number (caddr date-list))\n\
    \                                                 (and (and (and (and (&lt;= 1\
    \ (string-&gt;number (car date-list))) (&lt;= (string-&gt;number (car date-list))\
    \ 12))\n                                                               (and (or\
    \ (and (= (string-&gt;number (car date-list)) 1) (&lt;= 1 (string-&gt;number (cadr\
    \ date-list)) &lt;= 31))\n                                                   \
    \                     (and (= (string-&gt;number (car date-list)) 3) (&lt;= 1\
    \ (string-&gt;number (cadr date-list)) &lt;= 31))\n                          \
    \                                              (and (= (string-&gt;number (car\
    \ date-list)) 5) (&lt;= 1 (string-&gt;number (cadr date-list)) &lt;= 31))\n  \
    \                                                                      (and (=\
    \ (string-&gt;number (car date-list)) 7) (&lt;= 1 (string-&gt;number (cadr date-list))\
    \ &lt;= 31))\n                                                               \
    \         (and (= (string-&gt;number (car date-list)) 8) (&lt;= 1 (string-&gt;number\
    \ (cadr date-list)) &lt;= 31))\n                                             \
    \                           (and (= (string-&gt;number (car date-list)) 10) (&lt;=\
    \ 1 (string-&gt;number (cadr date-list)) &lt;= 31))\n                        \
    \        ", "  (define (is-valid-date? date)\n    (define (is-valid-month? month)\n\
    \      (and (not (or (< month 1) (> month 12)))\n           (not (or (< month\
    \ 1) (> month 12)))))\n  (define (is-valid-day? day month)\n    (and (not (or\
    \ (< day 1) (> day 31)))\n         (not (or (< day 1) (> day 30)))\n         (not\
    \ (or (< day 1) (> day 29)))))\n  (define (is-valid-year? year)\n    (and (not\
    \ (or (< year 1) (> year 9999)))\n         (not (or (< year 1) (> year 9999)))))\n\
    \  (define (is-valid-format? date)\n    (and (not (or (< date 1) (> date 9999)))\n\
    \         (not (or (< date 1) (> date 9999)))))\n  (and (is-valid-date? date)\n\
    \       (is-valid-month? date)\n       (is-valid-day? date)\n       (is-valid-year?\
    \ date)\n       (is-valid-format? date)))\n", "  (define (valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (and\
    \ (>= day 1)\n         (<= day (cond\n                  [(or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)) 31]\n    \
    \              [(or (= month 4) (= month 6) (= month 9) (= month 11)) 30]\n  \
    \                [(= month 2) 29]))))\n  (define (valid-year year)\n    (and (>=\
    \ year 0) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let ([date-list (string-split\
    \ date #\\-)]\n               [month (string->number (list-ref date-list 0))]\n\
    \               [day (string->number (list-ref date-list 1))]\n              \
    \ [year (string->number (list-ref date-list 2))])\n           (and (valid-month\
    \ month)\n                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (or (and (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \             (and (= month 4) (= month 6) (= month 9) (= month 11))\n       \
    \      (= month 2))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (or (and (= day 1) (= day 3) (= day 5) (= day 7) (= day 8) (= day 10)\
    \ (= day 12) (= day 31))\n             (and (= day 4) (= day 6) (= day 9) (= day\
    \ 11) (= day 30))\n             (and (= day 2) (= day 29)))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (> year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (string-split date \"-\")))\n  (define (valid-date-parts date-parts)\n\
    \    (and (valid-month (string->number (list-ref date-parts 0)))\n         (valid-day\
    \ (string->number (list-ref date-parts 1)))\n         (valid-year (string->number\
    \ (list-ref date-parts 2)))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts (valid-date-format date))))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 1)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (split-date date)\n    (string-split date #\\-))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-parts-helper date)\n      (and (valid-month (string->number\
    \ (list-ref date 0)))\n           (valid-day (string->number (list-ref date 0))\
    \ (string->number (list-ref date 1)))\n           (valid-year (string->number\
    \ (list-ref date 2)))))\n  (and (valid-date-format date)\n       (valid-date-parts-helper\
    \ (split-date date))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n\
    \    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-parts (string-split date #\\-)]\n             \
    \   [month (string->number (list-ref date-parts 0))]\n                [day (string->number\
    \ (list-ref date-parts 1))]\n                [year (string->number (list-ref date-parts\
    \ 2))])\n           (and (valid-month month)\n                (valid-day day)\n\
    \                (valid-year year)))))\n  (valid-date-format date))\n", "  (and\
    \ (not (empty? date))\n       (valid-date-format? date)\n       (valid-date-numbers?\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (not (char-numeric? (string-ref month 0)))\n         (not (char-numeric?\
    \ (string-ref month 1)))\n         (not (< (string->number month) 1))\n      \
    \   (not (> (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (not (char-numeric? (string-ref day 0)))\n    \
    \     (not (char-numeric? (string-ref day 1)))\n         (not (< (string->number\
    \ day) 1))\n         (not (> (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (char-numeric? (string-ref\
    \ year 0)))\n         (not (char-numeric? (string-ref year 1)))\n         (not\
    \ (char-numeric? (string-ref year 2)))\n         (not (char-numeric? (string-ref\
    \ year 3)))))\n  (define (valid-date-format date)\n    (and (not (empty? date))\n\
    \         (not (char-numeric? (string-ref date 0)))\n         (not (char-numeric?\
    \ (string-ref date 1)))\n         (not (char-numeric? (string-ref date 2)))\n\
    \         (not (char-numeric? (string-ref date 3)))\n         (not (char-numeric?\
    \ (string-ref date 4)))\n         (not (char-numeric? (string-ref date 5)))\n\
    \         (not (char-numeric? (string-ref date 6)))\n         (not (char-numeric?\
    \ (string-ref date 7)))\n         (not (char-numeric? (string-ref date 8)))\n\
    \         (not (char-numeric? (string-ref date 9)))\n         (not (char-numeric?\
    \ (string-ref date 10)))\n         (not (char-numeric? (string-ref date 11)))\n\
    \         (not (char-numeric? (string-ref date 12)))\n         (not (char-numeric?\
    \ (string-ref date 13", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (not (empty? (string-&gt;number month)))\n         (and (&lt;=\
    \ 1 (string-&gt;number month))\n              (&lt;= (string-&gt;number month)\
    \ 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (not\
    \ (empty? (string-&gt;number day)))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (empty? (string-&gt;number\
    \ year)))\n         (and (&lt;= 1 (string-&gt;number year))\n              (&lt;=\
    \ (string-&gt;number year) 9999))))\n  (define (valid-format date)\n    (and (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (empty? date))))\n\
    \  (and (valid-format date)\n       (valid-month (substring date 0 2))\n     \
    \  (valid-day (substring date 3 5))\n       (valid-year (substring date 6 10))))\n\
    </code>\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\n\
    \                  [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) 31]\n                  [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) 30]\n                  [(= month 2) 29]))))\n \
    \ (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-parts (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)])\n           (and (valid-month (string->number (vector-ref date-parts\
    \ 1)))\n                (valid-day (string->number (vector-ref date-parts 1))\
    \ (string->number (vector-ref date-parts 2)))\n                (valid-year (string->number\
    \ (vector-ref date-parts 3)))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))\n", "  (let* ([date-list (string-split date \"-\")]\n         [month\
    \ (string->number (list-ref date-list 0))]\n         [day (string->number (list-ref\
    \ date-list 1))]\n         [year (string->number (list-ref date-list 2))])\n \
    \   (and (not (empty? date))\n         (or (and (= month 1) (= day 31))\n    \
    \         (and (= month 3) (= day 31))\n             (and (= month 5) (= day 31))\n\
    \             (and (= month 7) (= day 31))\n             (and (= month 8) (= day\
    \ 31))\n             (and (= month 10) (= day 31))\n             (and (= month\
    \ 12) (= day 31))\n             (and (= month 4) (= day 30))\n             (and\
    \ (= month 6) (= day 30))\n             (and (= month 9) (= day 30))\n       \
    \      (and (= month 11) (= day 30))\n             (and (= month 2) (= day 29)))\n\
    \         (and (>= month 1) (<= month 12))\n         (and (>= day 1) (<= day 31))\n\
    \         (and (>= year 1) (<= year 9999)))))\n", "  (define (valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date\
    \ date)\n    (string-split date #rx\"-\"))\n  (define (date-to-numbers date)\n\
    \    (map string->number (split-date date)))\n  (define (valid-date-numbers date)\n\
    \    (define (valid-date-numbers-helper date)\n      (let ([month (car date)]\n\
    \            [day (cadr date)]\n            [year (caddr date)])\n        (and\
    \ (valid-month month)\n             (valid-day month day)\n             (valid-year\
    \ year))))\n  (valid-date-numbers-helper (date-to-numbers date)))\n  (and (valid-date-format\
    \ date)\n       (valid-date-numbers date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (&lt;= 1 month)\n              (&lt;=\
    \ month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and\
    \ (&lt;= 1 day)\n              (&lt;= day 31))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (&gt;= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                ", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (integer? (string->number month))\n         (<= 1 (string->number\
    \ month) 12)))\n  (define (valid-day day)\n    (and (not (empty? day))\n     \
    \    (integer? (string->number day))\n         (<= 1 (string->number day) 31)))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (integer?\
    \ (string->number year))\n         (<= 1 (string->number year) 9999)))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (valid-date-format date)\n       (valid-month (substring date\
    \ 0 2))\n       (valid-day (substring date 3 5))\n       (valid-year (substring\
    \ date 6 10))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (string-split date \"-\")))\n  (define (valid-date-parts date-parts)\n\
    \    (and (valid-month (string->number (list-ref date-parts 0)))\n         (valid-day\
    \ (string->number (list-ref date-parts 1)))\n         (valid-year (string->number\
    \ (list-ref date-parts 2)))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts (valid-date-format date))))\n", "  (define (valid-month\
    \ month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n      [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (let ([month (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))]\n          [day (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date))]\n          [year (string->number (regexp-match #rx\"-[0-9]{4}$\" date))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (let ([date-split (string-split date \"-\")])\n           (and (valid-month\
    \ (string->number (list-ref date-split 0)))\n                (valid-day (string->number\
    \ (list-ref date-split 0)) (string->number (list-ref date-split 1)))\n       \
    \         (valid-year (string->number (list-ref date-split 2)))))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-parts", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (and (>= day 1) (<= day (cond [(member month '(1 3 5 7 8 10 12)) 31]\n  \
    \                                [(member month '(4 6 9 11)) 30]\n           \
    \                       [(= month 2) 29]\n                                  [else\
    \ 0]))))\n  (define (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (empty? date))\n       (valid-date-format date)\n      \
    \ (let* ([parts (string-split date #\\-)])\n         (and (valid-month (string->number\
    \ (vector-ref parts 0)))\n              (valid-day (string->number (vector-ref\
    \ parts 0))\n                        (string->number (vector-ref parts 1)))\n\
    \              (valid-year (string->number (vector-ref parts 2)))))))\n", "  (define\
    \ (valid-month month)\n    (cond ((< month 1) #f)\n          ((> month 12) #f)\n\
    \          (else #t)))\n  (define (valid-day day month)\n    (cond ((< day 1)\
    \ #f)\n          ((and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (> day 31))\n          ((and (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (> day 30))\n          ((= month 2) (> day 29))\n\
    \          (else #t)))\n  (define (valid-year year)\n    (cond ((< year 0) #f)\n\
    \          (else #t)))\n  (define (valid-format date)\n    (and (string-contains\
    \ date #\\-)(string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string-contains date #\\-)\n\
    \         (string-contains date #\\-)\n         (string", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (and (>= day 1)\n         (<= day\n             (cond\n               [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12)) 31]\n               [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) 30]\n               [(= month 2) 29]))))\n  (define (valid-year year)\n\
    \    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format date)\n \
    \   (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let\
    \ ([month (string->number (regexp-match #rx\"^[0-9]{2}\" date))]\n           \
    \    [day (string->number (regexp-match #rx\"-[0-9]{2}-\" date))]\n          \
    \     [year (string->number (regexp-match #rx\"-[0-9]{4}$\" date))])\n       \
    \    (and (valid-month month)\n                (valid-day month day)\n       \
    \         (valid-year year)))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond ((or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n        \
    \   (and (<= 1 day) (<= day 31)))\n          ((or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n           (and (<= 1 day) (<= day 30)))\n          ((= month\
    \ 2)\n           (and (<= 1 day) (<= day 29)))))\n  (define (valid-year year)\n\
    \    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n \
    \   (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)\n       (valid-month (string->number\
    \ (regexp-match #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date))\n                  (string->number (regexp-match #rx\"\
    -[0-9]{2}-\" date)))\n       (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\"\
    \ date)))))\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (>= day 1) (<= day 31))]\n      [(and (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n\
    \       (and (>= day 1) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-month (string->number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))\n                  (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date)))\n       (valid-year (string->number (regexp-match #rx\"-[0-9]{4}$\"\
    \ date)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n  \
    \       (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (let* ([date-parts (string-split date \"-\")]\n         [month (string->number\
    \ (vector-ref date-parts 0))]\n         [day (string->number (vector-ref date-parts\
    \ 1))]\n         [year (string->number (vector-ref date-parts 2))])\n    (and\
    \ (valid-date-format date)\n         (valid-month month)\n         (valid-day\
    \ month day)\n         (valid-year year))))\n", "  (and (not (empty? date))\n\
    \       (valid-date-format? date)\n       (valid-date-numbers? date)))\n", " \
    \ (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1\
    \ month) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n\
    \         (and (<= 1 day) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define parts (string-split date \"-\"))\n    (and\
    \ (valid-month (string->number (list-ref parts 0)))\n         (valid-day (string->number\
    \ (list-ref parts 1)))\n         (valid-year (string->number (list-ref parts 2)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond ((or (= month 1) (= month\
    \ 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n        \
    \   (<= 1 day) (<= day 31))\n          ((or (= month 4) (= month 6) (= month 9)\
    \ (= month 11))\n           (<= 1 day) (<= day 30))\n          ((= month 2)\n\
    \           (<= 1 day) (<= day 29))))\n  (define (valid-year year)\n    (<= 1\
    \ year))\n  (define (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (let* ((date-parts (string-split date\
    \ #\\-))\n           (month (string->number (list-ref date-parts 0)))\n      \
    \     (day (string->number (list-ref date-parts 1)))\n           (year (string->number\
    \ (list-ref date-parts 2))))\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (valid-format date)\n  \
    \     (valid-date-parts date)))\n", "  (define (is-valid-date? date)\n    (define\
    \ (is-valid-month? month)\n      (and (not (string=? month \"\"))\n          \
    \ (and (not (string=? month \"0\"))\n                (and (not (string=? month\
    \ \"00\"))\n                     (and (not (string=? month \"000\"))\n       \
    \                   (and (not (string=? month \"0000\"))\n                   \
    \            (and (not (string=? month \"00000\"))\n                         \
    \           (and (not (string=? month \"000000\"))\n                         \
    \                (and (not (string=? month \"0000000\"))\n                   \
    \                           (and (not (string=? month \"00000000\"))\n       \
    \                                            (and (not (string=? month \"000000000\"\
    ))\n                                                        (and (not (string=?\
    \ month \"0000000000\"))\n                                                   \
    \          (and (not (string=? month \"00000000000\"))\n                     \
    \                                             (and (not (string=? month \"000000000000\"\
    ))\n                                                                       (and\
    \ (not (string=? month \"0000000000000\"))\n                                 \
    \                                           (and (not (string=? month \"00000000000000\"\
    ))\n                                                                         \
    \        (and (not (string=? month \"000000000000000\"))\n                   \
    \                                                                   (and (not\
    \ (string=? month \"0000000000000000\"))\n                                   \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000\"))\n                                                  \
    \                                              (and (not (string=? month \"000000000000000000\"\
    ))\n                                                                         \
    \                            (and (not (string=? month \"0000000000000000000\"\
    ))\n                                                                         \
    \                                 (and (not (string=? month \"00000000000000000000\"\
    ))\n                                                                         \
    \                                      (and (not (string=? month \"000000000000000000000\"\
    ))\n                                                                         \
    \                                           (and (not (string=? month \"0000000000000000000000\"\
    ))\n                                                                         \
    \                                                (and (not (string=? month \"\
    00000000000000000000000\"))\n                                                \
    \                                                                            \
    \  (and (not (string=? month \"000000000000000000000000\"))\n                \
    \                                                                            \
    \                                       (and (not (string=? month \"0000000000000000000000000\"\
    ))\n                                                                         \
    \                                                               (and (not (string=?\
    \ month \"000000000000000000000000", "  (define (valid-month month)\n    (and\
    \ (integer? month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day\
    \ month day)\n    (and (integer? day)\n         (and (<= 1 day)\n            \
    \  (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12))\n                 (<= day 31)]\n    \
    \            [(or (= month 4) (= month 6) (= month 9) (= month 11))\n        \
    \         (<= day 30)]\n                [(= month 2)\n                 (<= day\
    \ 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n         (and\
    \ (<= 0 year) (<= year 9999))))\n  (define (valid-date-format date)\n    (and\
    \ (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (let* ([date-list (string-split\
    \ date \"-\")]\n              [month (string->number (list-ref date-list 0))]\n\
    \              [day (string->number (list-ref date-list 1))]\n              [year\
    \ (string->number (list-ref date-list 2))])\n         (and (valid-month month)\n\
    \              (valid-day month day)\n              (valid-year year)))))\n",
  "  (define (valid-date-helper date)\n    (define (valid-month? month)\n      (and\
    \ (not (empty? month))\n           (not (empty? (string-&gt;number month)))\n\
    \           (and (&lt;= 1 (string-&gt;number month))\n                (&lt;= (string-&gt;number\
    \ month) 12))))\n    (define (valid-day? day)\n      (and (not (empty? day))\n\
    \           (not (empty? (string-&gt;number day)))\n           (and (&lt;= 1 (string-&gt;number\
    \ day))\n                (&lt;= (string-&gt;number day) 31))))\n    (define (valid-year?\
    \ year)\n      (and (not (empty? year))\n           (not (empty? (string-&gt;number\
    \ year)))\n           (and (&lt;= 1 (string-&gt;number year))\n              \
    \  (&lt;= (string-&gt;number year) 9999))))\n    (define (valid-date-format? date)\n\
    \      (and (not (empty? date))\n           (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n    (define (valid-month-day-year? date)\n      (and (valid-month?\
    \ (substring date 0 2))\n           (valid-day? (substring date 3 5))\n      \
    \     (valid-year? (substring date 6 10))))\n    (and (valid-date-format? date)\n\
    \         (valid-month-day-year? date)))\n  (valid-date-helper date))\n</code>\n",
  "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1)\
    \ (<= day 31))]\n      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day\
    \ 1) (<= day 29))]))\n  (define (valid-year year)\n    (and (>= year 1) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-year (string->number (substring date 6)))\n       (valid-month\
    \ (string->number (substring date 0 2)))\n       (valid-day (string->number (substring\
    \ date 0 2))\n                  (string->number (substring date 3 5)))))\n", " \
    \ (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(= month 1)  (<= 1 day) (<= day 31)]\n\
    \      [(= month 3)  (<= 1 day) (<= day 31)]\n      [(= month 5)  (<= 1 day) (<=\
    \ day 31)]\n      [(= month 7)  (<= 1 day) (<= day 31)]\n      [(= month 8)  (<=\
    \ 1 day) (<= day 31)]\n      [(= month 10) (<= 1 day) (<= day 31)]\n      [(=\
    \ month 12) (<= 1 day) (<= day 31)]\n      [(= month 4)  (<= 1 day) (<= day 30)]\n\
    \      [(= month 6)  (<= 1 day) (<= day 30)]\n      [(= month 9)  (<= 1 day) (<=\
    \ day 30)]\n      [(= month 11) (<= 1 day) (<= day 30)]\n      [(= month 2)  (<=\
    \ 1 day) (<= day 29)]))\n  (define (valid-year year)\n    (and (<= 1 year) (<=\
    \ year 9999)))\n  (define (valid-format date)\n    (and (string-contains date\
    \ #\\-)))\n  (define (valid-date-string date)\n    (and (not (string=? date \"\
    \"))\n         (valid-format date)))\n  (define (valid-date-parts date)\n    (let*\
    \ ([parts (string-split date #\\-)]\n           [month (string->number (list-ref\
    \ parts 0))]\n           [day   (string->number (list-ref parts 1))]\n       \
    \    [year  (string->number (list-ref parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (valid-date-string\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-list (string-split date \"-\")]\n             \
    \   [month (string->number (list-ref date-list 0))]\n                [day (string->number\
    \ (list-ref date-list 1))]\n                [year (string->number (list-ref date-list\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 1) (<= year 9999))))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (let* ([date-parts (string-split date\
    \ #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n      \
    \     [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n                     (<= day 31))\n                    ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                     (<= day\
    \ 30))\n                    ((= month 2)\n                     (<= day 29))))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (let* ([date-parts (string-split date #\\-)]\n              [month (string->number\
    \ (list-ref date-parts 0))]\n              [day (string->number (list-ref date-parts\
    \ 1))]\n              [year (string->number (list-ref date-parts 2))])\n     \
    \    (and (valid-month month)\n              (valid-day month day)\n         \
    \     (valid-year year)))))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day)\n              (if (or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n                  (<= day 31)\n                  (if (or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n                      (<= day 30)\n\
    \                      (if (= month 2)\n                          (<= day 29)\n\
    \                          #f))))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (<= year 9999)))\n  (define (valid-date-format date)\n    (and\
    \ (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (date-to-list date)\n    (string-split date #rx\"-\"))\n\
    \  (define (date-to-int-list date)\n    (map string->number (date-to-list date)))\n\
    \  (define (valid-date-list date)\n    (and (valid-date-format date)\n       \
    \  (let ((date-list (date-to-int-list date)))\n           (and (valid-month (list-ref\
    \ date-list 0))\n                (valid-day (list-ref date-list 0) (list-ref date-list\
    \ 1))\n                (valid-year (list-ref date-list 2))))))\n  (valid-date-list\
    \ date))\n", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
