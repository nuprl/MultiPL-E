name: HumanEval_124_valid_date
language: rkt
prompt: "#lang racket\n\n;; You have to write a function which validates a given date\
  \ string and\n;; returns True if the date is valid otherwise False.\n;; The date\
  \ is valid if all of the following rules are satisfied:\n;; 1. The date string is\
  \ not empty.\n;; 2. The number of days is not less than 1 or higher than 31 days\
  \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
  \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or\
  \ higher than 29 for the month 2.\n;; 3. The months should not be less than 1 or\
  \ higher than 12.\n;; 4. The date should be in the format: mm-dd-yyyy\n;; >>> (valid_date\
  \ \"03-11-2000\")\n;; #t\n;; >>> (valid_date \"15-01-2012\")\n;; #f\n;; >>> (valid_date\
  \ \"04-0-2040\")\n;; #f\n;; >>> (valid_date \"06-04-2020\")\n;; #t\n;; >>> (valid_date\
  \ \"06/04/2020\")\n;; #f\n(define (valid_date date)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n\
  \    (check-equal? (candidate \"03-11-2000\") #t)\n    (check-equal? (candidate\
  \ \"15-01-2012\") #f)\n    (check-equal? (candidate \"04-0-2040\") #f)\n    (check-equal?\
  \ (candidate \"06-04-2020\") #t)\n    (check-equal? (candidate \"01-01-2007\") #t)\n\
  \    (check-equal? (candidate \"03-32-2011\") #f)\n    (check-equal? (candidate\
  \ \"\") #f)\n    (check-equal? (candidate \"04-31-3000\") #f)\n    (check-equal?\
  \ (candidate \"06-06-2005\") #t)\n    (check-equal? (candidate \"21-31-2000\") #f)\n\
  \    (check-equal? (candidate \"04-12-2003\") #t)\n    (check-equal? (candidate\
  \ \"04122003\") #f)\n    (check-equal? (candidate \"20030412\") #f)\n    (check-equal?\
  \ (candidate \"2003-04\") #f)\n    (check-equal? (candidate \"2003-04-12\") #f)\n\
  \    (check-equal? (candidate \"04-2003\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (valid-month month)\n    (and (not (string=? month \"\"))\n\
    \         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (string=? day \"\"))\n\
    \         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (string=? year \"\"\
    ))\n         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-format-2 date)\n    (string-match \"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))\n  (define (valid-date-format-3 date)\n    (string-match \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-4 date)\n    (string-match \"^[0-9]{4}/[0-9]{2}/[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-5 date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-6 date)\n    (string-match \"^[0-9]{2}/[0-9]{2}/[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-7 date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{1}$\"\
    \ date))\n  (define (valid-date-format-8 date", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (and\
    \ (<= 1 day) (<= day (cond ((or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) 31)\n                               \
    \   ((or (= month 4) (= month 6) (= month 9) (= month 11)) 30)\n             \
    \                     (else 29)))))\n  (define (valid-year year)\n    (and (<=\
    \ 1 year) (<= year 9999)))\n  (define (valid-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let ([parts (string-split\
    \ date #\\-)]\n               [month (string->number (list-ref parts 0))]\n  \
    \             [day (string->number (list-ref parts 1))]\n               [year\
    \ (string->number (list-ref parts 2))])\n           (and (valid-month month)\n\
    \                (valid-day month day)\n                (valid-year year)))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (and (>= day 1)\n         (<= day\n             (cond\n    \
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) 31]\n               [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11)) 30]\n               [(= month 2) 29]))))\n  (define (valid-year\
    \ year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let\
    \ ([date-split (string-split date #\\-)]\n               [month (string->number\
    \ (list-ref date-split 0))]\n               [day (string->number (list-ref date-split\
    \ 1))]\n               [year (string->number (list-ref date-split 2))])\n    \
    \       (and (valid-month month)\n                (valid-day month day)\n    \
    \            (valid-year year)))))\n  (and (not (string=? date \"\"))\n      \
    \ (valid-date-format date)))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (>= month 1) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (>= day 1)\n              (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n                     (<= day 31))\n                    ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                     (<= day\
    \ 30))\n                    ((= month 2)\n                     (<= day 29))))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n\
    \  (define (valid-date-format date)\n    (and (string? date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (parse-date date)\n \
    \   (define (parse-month date)\n      (string->number (substring date 0 2)))\n\
    \  (define (parse-day date)\n    (string->number (substring date 3 5)))\n  (define\
    \ (parse-year date)\n    (string->number (substring date 6 10)))\n  (values (parse-month\
    \ date) (parse-day date) (parse-year date)))\n  (define (valid-date? date)\n \
    \   (define (valid-date-format? date)\n      (and (string? date)\n           (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n    (define (parse-date date)\n\
    \      (define (parse-month date)\n        (string->number (substring date 0 2)))\n\
    \      (define (parse-day date)\n        (string->number (substring date 3 5)))\n\
    \      (define (parse-year date)\n        (string->number (substring date 6 10)))\n\
    \      (values (parse-month date) (parse-day date) (parse-year date)))\n    (",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (<= 1 day)\n         (cond ((or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                (<= day 31))\n               ((or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                (<= day 30))\n               ((= month\
    \ 2)\n                (<= day 29)))))\n  (define (valid-year year)\n    (and (<=\
    \ 1900 year) (<= year 2100)))\n  (define (valid-date-format date)\n    (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (let* ([date-list (string-split date\
    \ \"-\")]\n              [month (string->number (list-ref date-list 0))]\n   \
    \           [day (string->number (list-ref date-list 1))]\n              [year\
    \ (string->number (list-ref date-list 2))])\n         (and (valid-month month)\n\
    \              (valid-day month day)\n              (valid-year year)))))", " \
    \ (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(= month 1) (and (>= day 1) (<= day\
    \ 31))]\n      [(= month 3) (and (>= day 1) (<= day 31))]\n      [(= month 5)\
    \ (and (>= day 1) (<= day 31))]\n      [(= month 7) (and (>= day 1) (<= day 31))]\n\
    \      [(= month 8) (and (>= day 1) (<= day 31))]\n      [(= month 10) (and (>=\
    \ day 1) (<= day 31))]\n      [(= month 12) (and (>= day 1) (<= day 31))]\n  \
    \    [(= month 4) (and (>= day 1) (<= day 30))]\n      [(= month 6) (and (>= day\
    \ 1) (<= day 30))]\n      [(= month 9) (and (>= day 1) (<= day 30))]\n      [(=\
    \ month 11) (and (>= day 1) (<= day 30))]\n      [(= month 2) (and (>= day 1)\
    \ (<= day 29))]\n      [else #f]))\n  (define (valid-year year)\n    (and (>=\
    \ year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (string-contains\
    \ date #\\-)(string-contains date #\\-)\n         (string-length date 11)))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-month\
    \ (string->number (substring date 0 2)))\n       (valid-day (string->number (substring\
    \ date 0 2))\n                  (string->number (substring date 3 5)))\n     \
    \  (valid-year (string->number (substring date 6 10)))))\n", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)])\n\
    \      (and (valid-month (string->number (vector-ref date-parts 0)))\n       \
    \    (valid-day (string->number (vector-ref date-parts 0))\n                 \
    \     (string->number (vector-ref date-parts 1)))\n           (valid-year (string->number\
    \ (vector-ref date-parts 2))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (<= 1 day) (<= day 31)]\n      [(and (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n       (<= 1 day) (<= day 30)]\n      [(=\
    \ month 2)\n       (<= 1 day) (<= day 29)]))\n  (define (valid-year year)\n  \
    \  (<= year 2020))\n  (define (valid-date-format date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-month (string->number (substring date 0 2)))\n       (valid-day\
    \ (string->number (substring date 0 2)) (string->number (substring date 3 5)))\n\
    \       (valid-year (string->number (substring date 6 10)))))\n", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([parts (string-split date \"-\")]\n    \
    \       [month (string->number (list-ref parts 0))]\n           [day (string->number\
    \ (list-ref parts 1))]\n           [year (string->number (list-ref parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-format\
    \ date)\n       (valid-date-parts date)))\n", "  (and (not (empty? date))\n  \
    \     (valid-date-format? date)\n       (valid-date-numbers? date)))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<=\
    \ 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (string-split date \"-\"))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (split-date date)]\n       \
    \    [month (string->number (list-ref date-parts 0))]\n           [day (string->number\
    \ (list-ref date-parts 1))]\n           [year (string->number (list-ref date-parts\
    \ 2))])\n      (and (valid-month month)\n           (valid-day month day)\n  \
    \         (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (not (empty? (string-&gt;number\
    \ month)))\n              (and (&lt;= 1 (string-&gt;number month))\n         \
    \          (&lt;= (string-&gt;number month) 12)))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (not (empty? (string-&gt;number day)))\n\
    \              (and (&lt;= 1 (string-&gt;number day))\n                   (&lt;=\
    \ (string-&gt;number day) 31)))))\n  (define (valid-year year)\n    (and (not\
    \ (empty? year))\n         (and (not (empty? (string-&gt;number year)))\n    \
    \          (and (&lt;= 1 (string-&gt;number year))\n                   (&lt;=\
    \ (string-&gt;number year) 9999)))))\n  (define (valid-date-format date)\n   \
    \ (and (not (empty? date))\n         (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              #t)))\n  (and (valid-date-format date)\n       (and (valid-month\
    \ (substring date 0 2))\n            (and (valid-day (substring date 3 5))\n \
    \                (valid-year (substring date 6 10))))))\n</code>\n", "  (define\
    \ (valid-month month)\n    (and (not (string=? month \"\"))\n         (and (not\
    \ (string=? month \"0\"))\n              (and (not (string=? month \"00\"))\n\
    \                   (and (not (string=? month \"000\"))\n                    \
    \    (and (not (string=? month \"0000\"))\n                             (and (not\
    \ (string=? month \"00000\"))\n                                  (and (not (string=?\
    \ month \"000000\"))\n                                       (and (not (string=?\
    \ month \"0000000\"))\n                                            (and (not (string=?\
    \ month \"00000000\"))\n                                                 (and\
    \ (not (string=? month \"000000000\"))\n                                     \
    \                 (and (not (string=? month \"0000000000\"))\n               \
    \                                            (and (not (string=? month \"00000000000\"\
    ))\n                                                                (and (not\
    \ (string=? month \"000000000000\"))\n                                       \
    \                              (and (not (string=? month \"0000000000000\"))\n\
    \                                                                          (and\
    \ (not (string=? month \"00000000000000\"))\n                                \
    \                                               (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\n       \
    \           [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) 31]\n                  [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11)) 30]\n                  [(= month 2) 29]))))\n  (define\
    \ (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-date-format date)\n       (let* ([date-list\
    \ (string-split date \"-\")]\n              [month (string->number (list-ref date-list\
    \ 0))]\n              [day (string->number (list-ref date-list 1))]\n        \
    \      [year (string->number (list-ref date-list 2))])\n         (and (valid-month\
    \ month)\n              (valid-day month day)\n              (valid-year year)))))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (<= 1 day)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                 (<= day 31)]\n                [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                 (<= day 30)]\n                [(= month\
    \ 2)\n                 (<= day 29)]))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (<= 1 year)))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date\
    \ date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n\
    \  (define (valid-date-parts date)\n    (let* ([parts (split-date date)]\n   \
    \        [month (string->number (cadr parts))]\n           [day (string->number\
    \ (caddr parts))]\n           [year (string->number (cadddr parts))])\n      (and\
    \ (valid-month month)\n           (valid-day month day)\n           (valid-year\
    \ year))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (integer?\
    \ (string->number month))\n         (and (<= 1 (string->number month))\n     \
    \         (<= (string->number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (integer? (string->number day))\n         (and\
    \ (<= 1 (string->number day))\n              (<= (string->number day) 31))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (integer?\
    \ (string->number year))\n         (and (<= 1 (string->number year))\n       \
    \       (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match\
    \ #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date \"-\")]\n           [month (list-ref\
    \ date-parts 0)]\n           [day (list-ref date-parts 1)]\n           [year (list-ref\
    \ date-parts 2)])\n      (and (valid-month month)\n           (valid-day day)\n\
    \           (valid-year year))))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (cond\n    [(empty? date) #f]\n    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n     (let* ([date-parts (string-split date #\\-)]\n            [month\
    \ (string->number (list-ref date-parts 0))]\n            [day (string->number\
    \ (list-ref date-parts 1))]\n            [year (string->number (list-ref date-parts\
    \ 2))])\n       (and (and (>= month 1) (<= month 12))\n            (and (>= day\
    \ 1) (<= day (days-in-month month year)))\n            (and (>= year 0) (<= year\
    \ 9999))))]\n    [else #f]))\n", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (not (empty? (string-&gt;number month)))\n       \
    \  (not (&lt; (string-&gt;number month) 1))\n         (not (&gt; (string-&gt;number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (empty? (string-&gt;number day)))\n         (not (&lt; (string-&gt;number\
    \ day) 1))\n         (not (&gt; (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (empty? (string-&gt;number\
    \ year)))\n         (not (&lt; (string-&gt;number year) 1))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n  \
    \       (not (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day-pair month day)\n    \
    \  (cond\n        [(or (equal? month \"01\")\n             (equal? month \"03\"\
    )\n             (equal? month \"05\")\n             (equal? month \"07\")\n  \
    \           (equal? month \"08\")\n             (equal? month \"10\")\n      \
    \       (equal? month \"12\"))\n         (not (&gt; (string-&gt;number day) 31))]\n\
    \        [(or (equal? month \"04\")\n             (equal? month \"06\")\n    \
    \         (equal? month \"09\")\n             (equal? month \"11\"))\n       \
    \  (not (&gt; (string-&gt;number day) 30))]\n        [(equal? month \"02\")\n\
    \         (not (&gt; (string-&gt;number day) 29))]))\n    (define (valid-leap-year\
    \ year", "  (define (valid-month month)\n    (and (integer? month)\n         (and\
    \ (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer?\
    \ day)\n         (and (>= day 1)\n              (cond\n                [(or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                 (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n                 (<= day 30)]\n              \
    \  [(= month 2)\n                 (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (vector-ref date-parts 0))]\n\
    \           [day (string->number (vector-ref date-parts 1))]\n           [year\
    \ (string->number (vector-ref date-parts 2))])\n      (and (valid-month month)\n\
    \           (valid-day month day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (and\
    \ (<= 1 day)\n         (cond\n           [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n            (<= day 31)]\n\
    \           [(or (= month 4) (= month 6) (= month 9) (= month 11))\n         \
    \   (<= day 30)]\n           [(= month 2)\n            (<= day 29)])))\n  (define\
    \ (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-date-format date)\n       (valid-month\
    \ (string->number (regexp-match #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string->number\
    \ (regexp-match #rx\"^[0-9]{2}-\" date))\n                  (string->number (regexp-match\
    \ #rx\"-[0-9]{2}-\" date)))\n       (valid-year (string->number (regexp-match\
    \ #rx\"-[0-9]{4}$\" date)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
