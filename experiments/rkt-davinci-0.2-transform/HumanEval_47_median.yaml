name: HumanEval_47_median
language: rkt
prompt: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
  \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
  (define (median l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/\
    \ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(= (length l) 1) (first l)]\n      [(= (length l)\
    \ 2) (/ (+ (first l) (second l)) 2)]\n      [else (median (rest (rest l)))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (sort l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [else (insert (first l) (sort (rest l)))]))\n  (define (insert\
    \ x l)\n    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x\
    \ l)]\n      [else (cons (first l) (insert x (rest l)))]))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort l)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort l <))) 2))\n", "  (define (median-helper l n)\n    (cond\n      [(= n\
    \ 0) (/ (car l) 2)]\n      [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr\
    \ l)) 2)]\n      [else (median-helper (cdr l) (- n 1))]))\n  (median-helper (sort\
    \ l <) (length l)))\n", "  (define (median-helper l n)\n    (cond\n      [(= n\
    \ 0) (car l)]\n      [(= n 1) (/ (+ (car l) (cadr l)) 2)]\n      [(even? n) (/\
    \ (+ (median-helper l (- n 2)) (median-helper l (- n 1))) 2)]\n      [else (median-helper\
    \ l (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (sort-list l)\n\
    \    (cond\n      [(empty? l) empty]\n      [else\n       (define pivot (first\
    \ l))\n       (define left (filter (lambda (x) (< x pivot)) (rest l)))\n     \
    \  (define right (filter (lambda (x) (>= x pivot)) (rest l)))\n       (append\
    \ (sort-list left) (list pivot) (sort-list right))]))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n     \
    \ [else (median-helper (rest l))]))\n  (median-helper (sort-list l)))\n", "  (define\
    \ (sort l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first l)\
    \ (sort (rest l)))]))\n  (define (insert n l)\n    (cond\n      [(empty? l) (list\
    \ n)]\n      [(< n (first l)) (cons n l)]\n      [else (cons (first l) (insert\
    \ n (rest l)))]))\n  (define (length l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [else (+ 1 (length (rest l)))]))\n  (define (nth n l)\n    (cond\n      [(=\
    \ n 0) (first l)]\n      [else (nth (- n 1) (rest l))]))\n  (define (half l)\n\
    \    (quotient (length l) 2))\n  (define (even? n)\n    (= (remainder n 2) 0))\n\
    \  (define (average a b)\n    (/ (+ a b) 2))\n  (cond\n    [(empty? l) 0]\n  \
    \  [(even? (length l)) (average (nth (half l) (sort l)) (nth (- (half l) 1) (sort\
    \ l)))]\n    [else (nth (half l) (sort l))]))\n", "  (define (sort l)\n    (cond\n\
    \      [(empty? l) empty]\n      [else (insert (first l) (sort (rest l)))]))\n\
    \  (define (insert x l)\n    (cond\n      [(empty? l) (list x)]\n      [(< x (first\
    \ l)) (cons x l)]\n      [else (cons (first l) (insert x (rest l)))]))\n  (define\
    \ (length l)\n    (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest\
    \ l)))]))\n  (define (nth l n)\n    (cond\n      [(empty? l) (error \"nth: index\
    \ out of range\")]\n      [(= n 0) (first l)]\n      [else (nth (rest l) (- n\
    \ 1))]))\n  (define (nth-from-end l n)\n    (cond\n      [(empty? l) (error \"\
    nth-from-end: index out of range\")]\n      [(= n 0) (first l)]\n      [else (nth-from-end\
    \ (rest l) (- n 1))]))\n  (define (nth-from-end-helper l n)\n    (cond\n     \
    \ [(empty? l) (error \"nth-from-end-helper: index out of range\")]\n      [(=\
    \ n 0) (first l)]\n      [else (nth-from-end-helper (rest l) (- n 1))]))\n  (define\
    \ (nth-from-end-helper l n)\n    (cond\n      [(empty? l) (error \"nth-from-end-helper:\
    \ index out of range\")]\n      [(= n 0) (first l)]\n      [else (nth-from-end-helper\
    \ (rest l) (- n 1))]))\n  (define (nth-from-end-helper l n)\n    (cond\n     \
    \ [(empty? l) (error \"nth-from-end-helper: index out of range\")]\n      [(=\
    \ n 0) (first l)]\n      [else (nth-from-end-helper (rest l) (- n 1))]))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (first (rest l))) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort l <))) 2))\n", "  (define (median-helper l)\n    (cond [(empty? l) empty]\n\
    \          [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (first (rest l))) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\n\
    \       (define (median-helper-helper l)\n         (cond\n           [(empty?\
    \ l) 0]\n           [(empty? (rest l)) (first l)]\n           [else\n        \
    \    (define (median-helper-helper-helper l)\n              (cond\n          \
    \      [(empty? l) 0]\n                [(empty? (rest l)) (first l)]\n       \
    \         [else\n                 (define (median-helper-helper-helper-helper\
    \ l)\n                   (cond\n                     [(empty? l) 0]\n        \
    \             [(empty? (rest l)) (first l)]\n                     [else\n    \
    \                  (define (median-helper-helper-helper-helper-helper l)\n   \
    \                     (cond\n                          [(empty? l) 0]\n      \
    \                    [(empty? (rest l)) (first l)]\n                         \
    \ [else\n                           (define (median-helper-helper-helper-helper-helper-helper\
    \ l)\n                             (cond\n                               [(empty?\
    \ l) 0]\n                               [(empty? (rest l)) (first l)]\n      \
    \                         [else\n                                (define (median-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                  (cond\n                              \
    \      [(empty? l) 0]\n                                    [(empty? (rest l))\
    \ (first l)]\n                                    [else\n                    \
    \                 (define (median-helper-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                       (cond\n                         \
    \                [(empty? l) 0]\n                                         [(empty?\
    \ (rest l)) (first l)]\n                                         [else\n     \
    \                                     (define (median-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                            (cond\n                    \
    \                          [(empty? l) 0]\n                                  \
    \            [(empty? (rest l)) (first l)]\n                                 \
    \            ", "  (define (sort l)\n    (if (null? l)\n        '()\n        (append\
    \ (sort (filter (lambda (x) (< x (car l))) (cdr l)))\n                (list (car\
    \ l))\n                (sort (filter (lambda (x) (>= x (car l))) (cdr l))))))\n\
    \  (define (middle l)\n    (if (null? l)\n        0\n        (/ (+ (car l) (middle\
    \ (cdr l))) 2)))\n  (if (null? l)\n      0\n      (if (even? (length l))\n   \
    \       (middle (sort l))\n          (car (sort l)))))\n", "  (define (sort-list\
    \ l)\n    (if (null? l)\n        '()\n        (insert (car l) (sort-list (cdr\
    \ l)))))\n  (define (insert n l)\n    (if (null? l)\n        (list n)\n      \
    \  (if (<= n (car l))\n            (cons n l)\n            (cons (car l) (insert\
    \ n (cdr l))))))\n  (define (median-helper l)\n    (if (null? l)\n        0\n\
    \        (if (= (length l) 1)\n            (car l)\n            (/ (+ (car l)\
    \ (car (cdr l))) 2.0))))\n  (median-helper (sort-list l)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
