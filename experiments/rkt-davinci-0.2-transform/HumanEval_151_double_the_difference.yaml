name: HumanEval_151_double_the_difference
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return the sum of squares of\
  \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
  \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>>\
  \ (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
  \ 0.\n(define (double_the_difference lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0\
  \ 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
  \ (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0\
  \ -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal?\
  \ (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd?\
    \ (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else\n    \
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst)) (odd? (first lst)) (> (first lst) 0))\n     (*\
    \ 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (> (first lst)\
    \ 0))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (let ((first (car lst))\n  \
    \          (rest (cdr lst)))\n        (if (and (integer? first)\n            \
    \     (not (negative? first))\n                 (odd? first))\n            (*\
    \ 2 (square first))\n            0))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst)) (integer? (car lst))\
    \ (> (car lst) 0))\n     (+ (* (car lst) (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond [(empty? lst) 0]\n        [else (let ([x (first lst)])\n\
    \                (cond [(and (integer? x) (odd? x))\n                       (*\
    \ x x)]\n                      [else 0]))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (let ([x (first lst)])\n        (if (and (integer? x) (positive?\
    \ x))\n            (+ (* x x) (double_the_difference (rest lst)))\n          \
    \  (double_the_difference (rest lst))))))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (+ (* (first lst) (first lst)) (double_the_difference (rest lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
