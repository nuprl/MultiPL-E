name: HumanEval_157_right_angle_triangle
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ True if the three\n;; sides form a right-angled triangle, False otherwise.\n;;\
  \ A right-angled triangle is a triangle in which one angle is right angle or \n\
  ;; 90 degree.\n;; Example:\n;; >>> (right_angle_triangle 3 4 5)\n;; #t\n;; >>> (right_angle_triangle\
  \ 1 2 3)\n;; #f\n(define (right_angle_triangle a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n\
  \    (check-equal? (candidate 3 4 5) #t)\n    (check-equal? (candidate 1 2 3) #f)\n\
  \    (check-equal? (candidate 10 6 8) #t)\n    (check-equal? (candidate 2 2 2) #f)\n\
  \    (check-equal? (candidate 7 24 25) #t)\n    (check-equal? (candidate 10 5 7)\
  \ #f)\n    (check-equal? (candidate 5 12 13) #t)\n    (check-equal? (candidate 15\
  \ 8 17) #t)\n    (check-equal? (candidate 48 55 73) #t)\n    (check-equal? (candidate\
  \ 1 1 1) #f)\n    (check-equal? (candidate 2 2 10) #f)\n))\n\n(test-humaneval)"
completions: ["  (and (and (< a b) (< a c))\n       (and (< b c) (< b a))\n      \
    \ (and (< c a) (< c b))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n \
    \          (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))))\n", " \
    \ (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a)\
    \ (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b)\
    \ (= a c) (= b c))))\n", "  (and (not (zero? a))\n       (not (zero? b))\n   \
    \    (not (zero? c))\n       (or (and (= a (sqrt (+ (* b b) (* c c))))\n     \
    \           (= b (sqrt (+ (* a a) (* c c))))\n                (= c (sqrt (+ (*\
    \ a a) (* b b)))))\n           (and (= a (sqrt (+ (* b b) (* c c))))\n       \
    \         (= b (sqrt (+ (* a a) (* c c))))\n                (= c (sqrt (+ (* a\
    \ a) (* b b)))))\n           (and (= a (sqrt (+ (* b b) (* c c))))\n         \
    \       (= b (sqrt (+ (* a a) (* c c))))\n                (= c (sqrt (+ (* a a)\
    \ (* b b))))))))\n", "  (and\n   (and (<= a b) (<= b c))\n   (or\n    (and (=\
    \ a (sqrt (+ (* b b) (* c c))))\n         (= b (sqrt (+ (* a a) (* c c))))\n \
    \        (= c (sqrt (+ (* a a) (* b b)))))\n    (and (= a (sqrt (+ (* b b) (*\
    \ c c))))\n         (= b (sqrt (+ (* a a) (* c c))))\n         (= c (sqrt (+ (*\
    \ a a) (* b b)))))\n    (and (= a (sqrt (+ (* b b) (* c c))))\n         (= b (sqrt\
    \ (+ (* a a) (* c c))))\n         (= c (sqrt (+ (* a a) (* b b))))))))\n", " \
    \ (cond\n    [(and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n          (= (expt\
    \ b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt c 2) (+ (expt a 2) (expt\
    \ b 2)))) #t]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))))\n", " \
    \ (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a)\
    \ (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (<= a\
    \ b) (<= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n          \
    \ (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       #t))\n", "  (let ([max (max a b c)])\n    (and\n     (= (expt a 2) (+\
    \ (expt b 2) (expt c 2)))\n     (= max a)\n     (= max b)\n     (= max c))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))))\n", "  (and\n   (and (<= a b) (<= b c))\n\
    \   (= (expt a 2) (+ (expt b 2) (expt c 2)))))\n", "  (and (or (= a (sqrt (+ (*\
    \ b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (=\
    \ c (sqrt (+ (* a a) (* b b)))))\n       #t))\n", "  (or (and (= a (sqrt (+ (*\
    \ b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (=\
    \ c (sqrt (+ (* a a) (* b b)))))\n      (and (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n      (and (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      (and\
    \ (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n\
    \           (= c (sqrt (+ (* a a) (* b b)))))))\n", "  (define (square x) (* x\
    \ x))\n  (define (hypotenuse a b)\n    (sqrt (+ (square a) (square b))))\n  (define\
    \ (is_right_angle a b c)\n    (and (= (square c) (+ (square a) (square b)))\n\
    \         (or (= a 90) (= b 90) (= c 90))))\n  (is_right_angle a b (hypotenuse\
    \ a b))\n  )\n", "  (and (positive? a)\n       (positive? b)\n       (positive?\
    \ c)\n       (or (= (square a) (+ (square b) (square c)))\n           (= (square\
    \ b) (+ (square a) (square c)))\n           (= (square c) (+ (square a) (square\
    \ b))))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (and (> a 0) (> b 0) (> c 0))))\n", "  (cond\n    [(and (= (square a) (+ (square\
    \ b) (square c)))\n          (= (square b) (+ (square a) (square c)))\n      \
    \    (= (square c) (+ (square a) (square b))))\n     #t]\n    [else #f]))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (<= a b)\
    \ (<= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (=\
    \ b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
