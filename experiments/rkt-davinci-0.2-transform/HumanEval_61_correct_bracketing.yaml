name: HumanEval_61_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"(\" and \")\".\n;; return True\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing\
  \ \"(\")\n;; #f\n;; >>> (correct_bracketing \"()\")\n;; #t\n;; >>> (correct_bracketing\
  \ \"(()())\")\n;; #t\n;; >>> (correct_bracketing \")(()\")\n;; #f\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"()\") #t)\n    (check-equal? (candidate \"(()())\"\
  ) #t)\n    (check-equal? (candidate \"()()(()())()\") #t)\n    (check-equal? (candidate\
  \ \"()()((()()())())(()()(()))\") #t)\n    (check-equal? (candidate \"((()())))\"\
  ) #f)\n    (check-equal? (candidate \")(()\") #f)\n    (check-equal? (candidate\
  \ \"(\") #f)\n    (check-equal? (candidate \"((((\") #f)\n    (check-equal? (candidate\
  \ \")\") #f)\n    (check-equal? (candidate \"(()\") #f)\n    (check-equal? (candidate\
  \ \"()()(()())())(()\") #f)\n    (check-equal? (candidate \"()()(()())()))()\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets\
    \ count)\n    (cond ((string=? brackets \"\") (= count 0))\n          ((string=?\
    \ (substring brackets 0 1) \"(\") (helper (substring brackets 1) (+ count 1)))\n\
    \          ((string=? (substring brackets 0 1) \")\") (and (> count 0) (helper\
    \ (substring brackets 1) (- count 1))))))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets brackets]\
    \ [open 0])\n    (cond [(empty? brackets) (= open 0)]\n          [(char=? (first\
    \ brackets) #\\()\n           (loop (rest brackets) (+ open 1))]\n          [(char=?\
    \ (first brackets) #\\))\n           (and (positive? open)\n                (loop\
    \ (rest brackets) (- open 1)))]\n          [else (error \"invalid character in\
    \ brackets\")])))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first\
    \ brackets) #\\()\n       (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\))\n       (and (positive? count)\n            (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"(\")\n     (if (string=? (last\
    \ brackets) \")\")\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first\
    \ brackets) \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal?\
    \ (first brackets) \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond ((null? brackets) (= count 0))\n          ((char=? (car brackets)\
    \ #\\() (helper (cdr brackets) (+ count 1)))\n          ((char=? (car brackets)\
    \ #\\)) (and (not (= count 0)) (helper (cdr brackets) (- count 1))))\n       \
    \   (else (helper (cdr brackets) count))))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else\
    \ (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (zero? count)]\n      [(char=? (first brackets) #\\()\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (helper (rest brackets) count)]))\n  (helper brackets 0))\n", "  (cond\n   \
    \ [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else\
    \ (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (> count\
    \ 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond ((string=? brackets \"\") (= count 0))\n          ((string=? (substring\
    \ brackets 0 1) \"(\") (helper (substring brackets 1) (+ count 1)))\n        \
    \  ((string=? (substring brackets 0 1) \")\") (helper (substring brackets 1) (-\
    \ count 1)))\n          (else (error \"invalid input\"))))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else\
    \ (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first\
    \ brackets) \"(\")\n     (correct_bracketing (rest brackets))]\n    [(string=?\
    \ (first brackets) \")\")\n     (and (not (empty? (rest brackets)))\n        \
    \  (correct_bracketing (rest brackets)))]))\n", "  (let loop ([brackets brackets]\
    \ [stack '()])\n    (cond [(empty? brackets) (empty? stack)]\n          [(char=?\
    \ (first brackets) #\\()\n           (loop (rest brackets) (cons (first brackets)\
    \ stack))]\n          [(char=? (first brackets) #\\))\n           (and (not (empty?\
    \ stack))\n                (loop (rest brackets) (rest stack)))]\n          [else\
    \ (error \"invalid character in brackets\")])))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal?\
    \ (first brackets) \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [else\n     (cond\n  \
    \     [(equal? (first brackets) \"(\")\n        (cond\n          [(equal? (first\
    \ (rest brackets)) \")\")\n           (correct_bracketing (rest (rest brackets)))]\n\
    \          [else\n           (correct_bracketing (rest brackets))])]\n       [else\n\
    \        (correct_bracketing (rest brackets))])]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(not (equal? (first brackets) \"(\"))\
    \ #f]\n    [else\n     (let ([rest (rest brackets)])\n       (cond\n         [(empty?\
    \ rest) #f]\n         [(equal? (first rest) \")\") (correct_bracketing (rest rest))]\n\
    \         [else (correct_bracketing (rest rest))]))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(char=? (first brackets) ?\\()\n     (if (char=? (last brackets)\
    \ ?\\))\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(eq? (first brackets) \")\") #f]\n    [else (correct_bracketing (rest\
    \ brackets))]))\n", "  (define (helper brackets count)\n    (cond ((null? brackets)\
    \ (= count 0))\n          ((equal? (car brackets) \"(\") (helper (cdr brackets)\
    \ (+ count 1)))\n          ((equal? (car brackets) \")\") (helper (cdr brackets)\
    \ (- count 1)))\n          (else (error \"invalid input\"))))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (> count\
    \ 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (first brackets) \"(\")\n     (correct_bracketing\
    \ (rest brackets))]\n    [(string=? (first brackets) \")\")\n     (and (not (empty?\
    \ (rest brackets)))\n          (correct_bracketing (rest brackets)))]))\n", " \
    \ (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets\
    \ brackets] [open 0])\n    (cond [(empty? brackets) (= open 0)]\n          [(char=?\
    \ (first brackets) #\\()\n           (loop (rest brackets) (+ open 1))]\n    \
    \      [(char=? (first brackets) #\\))\n           (and (> open 0) (loop (rest\
    \ brackets) (- open 1)))]\n          [else (loop (rest brackets) open)])))\n",
  "  (cond [(empty? brackets) #t]\n        [(equal? (first brackets) \")\") #f]\n\
    \        [else (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (positive? count) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (error \"invalid character\")]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(eq? (first brackets) \")\") #f]\n    [else (correct_bracketing (rest\
    \ brackets))]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond ((null?\
    \ brackets) (= count 0))\n          ((char=? (car brackets) #\\() (helper (cdr\
    \ brackets) (+ count 1)))\n          ((char=? (car brackets) #\\)) (and (not (=\
    \ count 0)) (helper (cdr brackets) (- count 1))))\n          (else (helper (cdr\
    \ brackets) count))))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(empty? (rest brackets)) #f]\n    [else\n     (and\n      (char=?\
    \ (first brackets) #\\()\n      (char=? (last brackets) #\\))\n      (correct_bracketing\
    \ (substring brackets 1 (- (string-length brackets) 1))))]))\n", "  (cond\n  \
    \  [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else\
    \ (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (>\
    \ count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty? brackets) (= count\
    \ 0)]\n          [(char=? (first brackets) #\\()\n           (loop (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\))\n           (and (not\
    \ (= count 0))\n                (loop (rest brackets) (- count 1)))]\n       \
    \   [else (error \"invalid character\")])))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(empty? (rest brackets)) #f]\n    [else\n     (cond\n       [(equal?\
    \ (first brackets) \"(\")\n        (correct_bracketing (rest brackets))]\n   \
    \    [(equal? (first brackets) \")\")\n        (correct_bracketing (rest brackets))]\n\
    \       [else #f])]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond ((null?\
    \ brackets) (= count 0))\n          ((char=? (car brackets) #\\() (helper (cdr\
    \ brackets) (+ count 1)))\n          ((char=? (car brackets) #\\)) (and (not (=\
    \ count 0)) (helper (cdr brackets) (- count 1))))\n          (else (helper (cdr\
    \ brackets) count))))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond ((empty? brackets) (= count 0))\n          ((char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1)))\n          ((char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1))))\n\
    \          (else (helper (rest brackets) count))))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [else\n     (and\n   \
    \   (char=? (first brackets) #\\()\n      (char=? (last brackets) #\\))\n    \
    \  (correct_bracketing (substring brackets 1 (- (string-length brackets) 1))))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"(\")\n     (if (string=? (last\
    \ brackets) \")\")\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond ((string=? brackets \"\") (= count 0))\n          ((string=?\
    \ (substring brackets 0 1) \"(\") (helper (substring brackets 1) (+ count 1)))\n\
    \          ((string=? (substring brackets 0 1) \")\") (and (not (= count 0)) (helper\
    \ (substring brackets 1) (- count 1))))))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else\
    \ (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(char=?\
    \ (first brackets) #\\()\n     (correct_bracketing (rest brackets))]\n    [(char=?\
    \ (first brackets) #\\))\n     (correct_bracketing (rest brackets))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets)\
    \ \"(\")\n     (if (string=? (last brackets) \")\")\n         (correct_bracketing\
    \ (substring brackets 1 (- (string-length brackets) 1)))\n         #f)]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [else\n     (cond\n       [(equal? (first brackets) \"(\")\n      \
    \  (and (correct_bracketing (rest brackets))\n             (equal? (first (rest\
    \ brackets)) \")\"))]\n       [else #f])]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      ((empty? brackets) (= count 0))\n      ((char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1)))\n      ((char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1))))\n      (else\
    \ (helper (rest brackets) count))))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond ((empty? brackets) (= count 0))\n\
    \          ((char=? (first brackets) #\\()\n           (helper (rest brackets)\
    \ (+ count 1)))\n          ((char=? (first brackets) #\\))\n           (and (not\
    \ (= count 0))\n                (helper (rest brackets) (- count 1))))))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(eq? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(eq? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets) (=\
    \ count 0)]\n          [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\)) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1)))]\n          [else (error \"Invalid\
    \ character in brackets\")]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (correct_bracketing_helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (correct_bracketing_helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (correct_bracketing_helper (rest brackets)\
    \ (- count 1))]))\n  (correct_bracketing_helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond ((empty? brackets) #t)\n        ((char=?\
    \ (first brackets) #\\()\n         (correct_bracketing (rest brackets)))\n   \
    \     ((char=? (first brackets) #\\))\n         (correct_bracketing (rest brackets)))\n\
    \        (else #f)))\n", "  (define (helper brackets count)\n    (cond\n     \
    \ [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n \
    \   [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing (rest\
    \ brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(char=? (first\
    \ brackets) #\\() (correct_bracketing (rest brackets))]\n    [(char=? (first brackets)\
    \ #\\)) #f]\n    [else (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"(\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \")\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond ((empty? brackets)\
    \ (= count 0))\n          ((char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1)))\n          ((char=? (first brackets) #\\)) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1))))\n          (else (helper (rest brackets)\
    \ count))))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n\
    \    [(char=? (first brackets) #\\()\n     (cond\n       [(empty? (rest brackets))\
    \ #f]\n       [(char=? (first (rest brackets)) #\\))\n        (correct_bracketing\
    \ (rest (rest brackets)))]\n       [else #f])]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else\
    \ (correct_bracketing (rest brackets))]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \"(\")\n   \
    \  (if (correct_bracketing (rest brackets))\n         (if (equal? (first (rest\
    \ brackets)) \")\")\n             (correct_bracketing (rest (rest brackets)))\n\
    \             #f)\n         #f)]\n    [else #f]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(char=?\
    \ (first brackets) #\\()\n     (cond\n       [(empty? (rest brackets)) #f]\n \
    \      [(char=? (first (rest brackets)) #\\))\n        (correct_bracketing (rest\
    \ (rest brackets)))]\n       [else #f])]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"(\")\n     (if (string=? (last\
    \ brackets) \")\")\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) \"(\")\n     (if (correct_bracketing (rest\
    \ brackets))\n         (if (equal? (first (rest brackets)) \")\")\n          \
    \   (correct_bracketing (rest (rest brackets)))\n             #f)\n         #f)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(eq? (first brackets)\
    \ \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond ((empty? brackets) (= count 0))\n       \
    \   ((char=? (first brackets) #\\() (helper (rest brackets) (+ count 1)))\n  \
    \        ((char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1))))\n          (else (helper (rest brackets) count))))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"(\")\n     (if (string=? (last brackets) \")\")\n       \
    \  (correct_bracketing (substring brackets 1 (- (string-length brackets) 1)))\n\
    \         #f)]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\()\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\))\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first\
    \ brackets) \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (let loop ([brackets brackets] [count 0])\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\()\n       (loop (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\))\n       (loop (rest brackets)\
    \ (- count 1))]\n      [else (loop (rest brackets) count)])))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n \
    \   [(string=? (first brackets) \")\") #f]\n    [else (correct_bracketing (rest\
    \ brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first\
    \ brackets) \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\()\n        \
    \   (loop (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\\
    ))\n           (loop (rest brackets) (- count 1))]\n          [else (loop (rest\
    \ brackets) count)])))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond ((string=?\
    \ brackets \"\") (= count 0))\n          ((string=? (substring brackets 0 1) \"\
    (\") (helper (substring brackets 1) (+ count 1)))\n          ((string=? (substring\
    \ brackets 0 1) \")\") (and (> count 0) (helper (substring brackets 1) (- count\
    \ 1))))))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\)) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest\
    \ brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (=\
    \ count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n\
    \    [else (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [else\n     (if (equal?\
    \ (first brackets) \"(\")\n         (if (equal? (first (rest brackets)) \")\"\
    )\n             (correct_bracketing (rest (rest brackets)))\n             (correct_bracketing\
    \ (rest brackets)))\n         (correct_bracketing (rest brackets)))]))\n", " \
    \ (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n\
    \    [else (correct_bracketing (string-tail brackets))]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"(\")\n     (if (string=? (last brackets) \")\")\n       \
    \  (correct_bracketing (substring brackets 1 -1))\n         #f)]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [else\n     (cond\n  \
    \     [(equal? (first brackets) \"(\")\n        (correct_bracketing (rest brackets))]\n\
    \       [(equal? (first brackets) \")\")\n        (and (correct_bracketing (rest\
    \ brackets))\n             (equal? (first (rest brackets)) \"(\"))])]))\n", " \
    \ (let loop ([brackets brackets] [open 0])\n    (cond [(empty? brackets) (= open\
    \ 0)]\n          [(char=? (first brackets) #\\()\n           (loop (rest brackets)\
    \ (+ open 1))]\n          [(char=? (first brackets) #\\))\n           (and (>\
    \ open 0) (loop (rest brackets) (- open 1)))]\n          [else (loop (rest brackets)\
    \ open)])))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \"(\")\n     (cond\n       [(empty? (rest brackets)) #f]\n       [(equal? (first\
    \ (rest brackets)) \")\")\n        (correct_bracketing (rest (rest brackets)))]\n\
    \       [else (correct_bracketing (rest brackets))])]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond\n    \
    \  [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not\
    \ (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (first brackets) \")\") #f]\n    [else\
    \ (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(and (equal? (first brackets) \"(\")\n          (equal? (last brackets)\
    \ \")\"))\n     (correct_bracketing (substring brackets 1 (- (string-length brackets)\
    \ 1)))]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond ((=\
    \ count 0)\n           (null? brackets))\n          ((empty? brackets)\n     \
    \      #f)\n          ((char=? (first brackets) #\\()\n           (helper (rest\
    \ brackets) (+ count 1)))\n          ((char=? (first brackets) #\\))\n       \
    \    (helper (rest brackets) (- count 1)))))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(equal? (first brackets) \")\") #f]\n    [else\
    \ (correct_bracketing (rest brackets))]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (define (helper brackets count)\n    (cond ((empty?\
    \ brackets) (zero? count))\n          ((char=? (first brackets) #\\() (helper\
    \ (rest brackets) (+ count 1)))\n          ((char=? (first brackets) #\\)) (and\
    \ (not (zero? count)) (helper (rest brackets) (- count 1))))\n          (else\
    \ (helper (rest brackets) count))))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\)) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (let loop ([brackets brackets] [count\
    \ 0])\n    (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first\
    \ brackets) #\\()\n       (loop (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\))\n       (and (positive? count)\n            (loop (rest\
    \ brackets) (- count 1)))]\n      [else (loop (rest brackets) count)])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
