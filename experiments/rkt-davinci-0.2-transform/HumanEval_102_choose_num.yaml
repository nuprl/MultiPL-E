name: HumanEval_102_choose_num
language: rkt
prompt: "#lang racket\n\n;; This function takes two positive numbers x and y and returns\
  \ the\n;; biggest even integer number that is in the range [x, y] inclusive. If\
  \ \n;; there's no such number, then the function should return -1.\n;; For example:\n\
  ;; >>> (choose_num 12 15)\n;; 14\n;; >>> (choose_num 13 12)\n;; -1\n(define (choose_num\
  \ x y)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n\
  \    (check-equal? (candidate 12 15) 14)\n    (check-equal? (candidate 13 12) -1)\n\
  \    (check-equal? (candidate 33 12354) 12354)\n    (check-equal? (candidate 5234\
  \ 5233) -1)\n    (check-equal? (candidate 6 29) 28)\n    (check-equal? (candidate\
  \ 27 10) -1)\n    (check-equal? (candidate 7 7) -1)\n    (check-equal? (candidate\
  \ 546 546) 546)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num\
    \ (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(> x y)\
    \ -1]\n    [(even? x) x]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n \
    \   [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n\
    \    [else (choose_num (+ x 1) y)]))\n", "  (cond ((and (even? x) (even? y)) (if\
    \ (> x y) x y))\n        ((even? x) x)\n        ((even? y) y)\n        (else -1)))\n",
  "  (cond\n    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n          y)\n \
    \     (if (even? x)\n          x\n          (if (even? y)\n              y\n \
    \             -1))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even?\
    \ x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+\
    \ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if\
    \ (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else\
    \ (choose_num (+ x 1) y)]))\n", "  (cond\n    [(> x y) -1]\n    [(even? x) x]\n\
    \    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n  \
    \    (if (> x y)\n          -1\n          (if (= x y)\n              x\n     \
    \         (choose_num (+ x 2) y)))\n      (if (even? x)\n          (choose_num\
    \ x (+ y 1))\n          (choose_num (+ x 1) y))))\n", "  (cond\n    [(= x y) (if\
    \ (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else\
    \ (choose_num (+ x 1) y)]))\n", "  (if (= x y)\n      (if (even? x)\n        \
    \  x\n          -1)\n      (if (even? x)\n          (max x (choose_num (+ x 1)\
    \ y))\n          (choose_num (+ x 1) y))))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x)\
    \ (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", " \
    \ (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num\
    \ (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y)\
    \ x]\n    [(even? x) (choose_num (+ x 2) y)]\n    [(even? y) (choose_num x (-\
    \ y 2))]\n    [else -1]))\n", "  (cond\n    [(> x y) -1]\n    [(even? x) x]\n\
    \    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n  \
    \    (if (> x y)\n          -1\n          (if (= x y)\n              x\n     \
    \         (choose_num (+ x 2) y)))\n      (if (even? x)\n          (choose_num\
    \ x (- y 1))\n          (choose_num (+ x 1) y))))\n", "  (cond\n    [(= x y) (if\
    \ (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else\
    \ (choose_num (+ x 1) y)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
