name: HumanEval_145_order_by_points
language: rkt
prompt: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
  ;; in ascending order according to the sum of their digits.\n;; Note: if there are\
  \ several items with similar sum of their digits,\n;; order them based on their\
  \ index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1\
  \ -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list\
  \ )\n(define (order_by_points nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
  \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
  \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56\
  \ 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
  \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
  \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
  \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
completions: ["  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits\
    \ a))\n                     (b-sum (sum-digits b)))\n                 (if (= a-sum\
    \ b-sum)\n                     (< (index nums a) (index nums b))\n           \
    \          (< a-sum b-sum))))))\n", "  (sort nums (\u03BB (x y) (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums (\u03BB (a b)\n               (let ([a-sum\
    \ (sum-digits a)]\n                     [b-sum (sum-digits b)])\n            \
    \     (if (= a-sum b-sum)\n                     (< (index nums a) (index nums\
    \ b))\n                     (< a-sum b-sum))))))\n", "  (sort nums\n        (lambda\
    \ (x y)\n          (let ((x-sum (sum-digits x))\n                (y-sum (sum-digits\
    \ y)))\n            (cond\n              [(< x-sum y-sum) #t]\n              [(>\
    \ x-sum y-sum) #f]\n              [else (if (member x nums)\n                \
    \        (if (member y nums)\n                            (< (index x nums) (index\
    \ y nums))\n                            #t)\n                        #f)])))))\n",
  "  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n     \
    \                (b-sum (sum-digits b)))\n                 (cond\n           \
    \        [(> a-sum b-sum) #t]\n                   [(< a-sum b-sum) #f]\n     \
    \              [else (< a b)])))))\n", "  (sort nums (\u03BB (x y)\n         \
    \      (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n\
    \                 (cond ((> x-sum y-sum) #t)\n                       ((< x-sum\
    \ y-sum) #f)\n                       (else (< (index-of nums x) (index-of nums\
    \ y))))))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits\
    \ x)]\n                     [y-sum (sum-digits y)])\n                 (cond [(<\
    \ x-sum y-sum) #t]\n                       [(> x-sum y-sum) #f]\n            \
    \           [(= x-sum y-sum) (< x y)])))))\n", "  (sort nums (lambda (x y)\n \
    \              (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((< x-sum y-sum) #t)\n    \
    \               ((> x-sum y-sum) #f)\n                   (else (< (index-of nums\
    \ x) (index-of nums y))))))))\n", "  (sort nums (\u03BB (x y)\n              \
    \ (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n\
    \                 (cond\n                   [(> x-sum y-sum) #t]\n           \
    \        [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort\
    \ nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n          \
    \           (b-sum (sum-digits b)))\n                 (if (= a-sum b-sum)\n  \
    \                   (< (index-of a nums) (index-of b nums))\n                \
    \     (< a-sum b-sum))))))\n", "  (sort nums (lambda (a b)\n               (let\
    \ ([a-digits (digits a)]\n                     [b-digits (digits b)])\n      \
    \           (cond [(< (sum a-digits) (sum b-digits)) #t]\n                   \
    \    [(> (sum a-digits) (sum b-digits)) #f]\n                       [else (< (index\
    \ nums a) (index nums b))])))))\n", "  (sort nums (lambda (x y)\n            \
    \   (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n\
    \                 (if (= x-sum y-sum)\n                     (< (index-of nums\
    \ x) (index-of nums y))\n                     (< x-sum y-sum))))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n  \
    \                   (< (index nums x) (index nums y))\n                     (<\
    \ x-sum y-sum))))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum\
    \ (sum-digits x)]\n                     [y-sum (sum-digits y)])\n            \
    \     (cond [(< x-sum y-sum) #t]\n                       [(> x-sum y-sum) #f]\n\
    \                       [(< (index-of nums x) (index-of nums y)) #t]\n       \
    \                [else #f])))))\n", "  (sort nums\n        (lambda (a b)\n   \
    \       (< (sum-digits a) (sum-digits b)))))\n", "  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ nums x) (index-of nums y))\n                     (< x-sum y-sum))))))\n", " \
    \ (sort nums (lambda (a b)\n               (or (< (sum-digits a) (sum-digits b))\n\
    \                   (and (= (sum-digits a) (sum-digits b))\n                 \
    \       (< (index-of a nums) (index-of b nums)))))))\n", "  (sort nums (\u03BB\
    \ (x y)\n               (let ([x-sum (sum-digits x)]\n                     [y-sum\
    \ (sum-digits y)])\n                 (cond\n                   [(< x-sum y-sum)\
    \ #t]\n                   [(> x-sum y-sum) #f]\n                   [(< x y) #t]\n\
    \                   [(> x y) #f]\n                   [else #f])))))\n", "  (sort\
    \ nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n  \
    \                   (< (index-of nums x) (index-of nums y))\n                \
    \     (< x-sum y-sum))))))\n", "  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n    \
    \           (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ nums x) (index-of nums y))\n                     (< x-sum y-sum))))))\n", " \
    \ (sort nums\n        (lambda (x y)\n          (let ((x-sum (sum-digits x))\n\
    \                (y-sum (sum-digits y)))\n            (if (= x-sum y-sum)\n  \
    \              (< (index nums x) (index nums y))\n                (< x-sum y-sum))))))\n",
  "  (sort nums (\u03BB (a b) (and (or (< (sum-digits a) (sum-digits b))\n       \
    \                      (and (= (sum-digits a) (sum-digits b))\n              \
    \                    (< (index-of a nums) (index-of b nums))))\n             \
    \             #t))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum\
    \ (sum-digits x)]\n                     [y-sum (sum-digits y)])\n            \
    \     (if (= x-sum y-sum)\n                     (< (index nums x) (index nums\
    \ y))\n                     (< x-sum y-sum))))))\n", "  (sort (map (lambda (x)\
    \ (list x (sum-digits x))) nums)\n        (lambda (x y) (or (< (cadr x) (cadr\
    \ y))\n                          (and (= (cadr x) (cadr y))\n                \
    \               (< (car x) (car y)))))))\n", "  (sort nums (lambda (x y)\n   \
    \            (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((= x-sum y-sum)\n        \
    \            (< (index-of nums x) (index-of nums y)))\n                   ((<\
    \ x-sum y-sum) #t)\n                   (else #f))))))\n", "  (sort nums (lambda\
    \ (a b)\n               (if (= (sum-digits a) (sum-digits b))\n              \
    \     (< (index-of a nums) (index-of b nums))\n                   (< (sum-digits\
    \ a) (sum-digits b))))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums\n        (lambda (x y)\n          (<\
    \ (sum-digits x) (sum-digits y)))))\n", "  (sort nums (\u03BB (a b)\n        \
    \       (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (cond\n                   [(> a-sum b-sum) #t]\n    \
    \               [(< a-sum b-sum) #f]\n                   [else (< (index-of nums\
    \ a) (index-of nums b))])))))\n", "  (sort nums (lambda (a b)\n              \
    \ (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits b)))\n\
    \                 (cond\n                   [(> a-sum b-sum) #t]\n           \
    \        [(< a-sum b-sum) #f]\n                   [else (< (index-of nums a) (index-of\
    \ nums b))])))))\n", "  (sort nums\n        (lambda (x y)\n          (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum\
    \ (sum-digits x)]\n                     [y-sum (sum-digits y)])\n            \
    \     (cond\n                   [(< x-sum y-sum) #t]\n                   [(> x-sum\
    \ y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort nums\n     \
    \   (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums\n        (lambda (n1 n2)\n          (< (sum-digits n1) (sum-digits\
    \ n2)))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits\
    \ y)))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits\
    \ y)))))\n", "  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits\
    \ x))\n                     (y-sum (sum-digits y)))\n                 (if (= x-sum\
    \ y-sum)\n                     (< (index-of nums x) (index-of nums y))\n     \
    \                (< x-sum y-sum))))))\n", "  (sort nums\n        (lambda (a b)\n\
    \          (cond\n            [(= (sum-digits a) (sum-digits b))\n           \
    \  (< (index-of a nums) (index-of b nums))]\n            [(< (sum-digits a) (sum-digits\
    \ b))\n             #t]\n            [else\n             #f]))))\n", "  (sort\
    \ nums (lambda (a b)\n               (cond\n                 [(= (sum-digits a)\
    \ (sum-digits b))\n                  (< (index-of nums a) (index-of nums b))]\n\
    \                 [else\n                  (< (sum-digits a) (sum-digits b))]))))\n",
  "  (sort nums #:key (lambda (x) (sum-digits x))))\n", "  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n", "  (sort (map (lambda\
    \ (x) (cons x (sum-digits x))) nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
  "  (sort nums (lambda (a b)\n               (< (sum-digits a) (sum-digits b)))))\n",
  "  (sort nums (lambda (a b)\n               (cond\n                 [(= (sum-digits\
    \ a) (sum-digits b))\n                  (< (index-of a nums) (index-of b nums))]\n\
    \                 [else\n                  (< (sum-digits a) (sum-digits b))]))))\n",
  "  (sort nums\n        (lambda (a b)\n          (< (sum-digits a) (sum-digits b)))))\n",
  "  (sort nums (lambda (a b)\n               (< (sum-digits a) (sum-digits b)))))\n",
  "  (sort nums (\u03BB (a b)\n               (< (sum-digits a) (sum-digits b)))))\n",
  "  (sort nums (lambda (a b)\n               (< (sum-digits a) (sum-digits b)))))\n",
  "  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n     \
    \                (y-sum (sum-digits y)))\n                 (cond\n           \
    \        ((< x-sum y-sum) #t)\n                   ((> x-sum y-sum) #f)\n     \
    \              (else (< (index-of nums x) (index-of nums y))))))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (cond\n                \
    \   [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n          \
    \         [else (< x y)])))))\n", "  (sort nums (lambda (a b)\n              \
    \ (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits b)))\n\
    \                 (cond\n                   [(> a-sum b-sum) #t]\n           \
    \        [(< a-sum b-sum) #f]\n                   [else (< a b)])))))\n", "  (sort\
    \ nums (lambda (a b)\n               (let ([a-sum (sum-digits a)]\n          \
    \           [b-sum (sum-digits b)])\n                 (cond\n                \
    \   [(< a-sum b-sum) #t]\n                   [(> a-sum b-sum) #f]\n          \
    \         [else (< a b)])))))\n", "  (sort nums\n        (lambda (x y)\n     \
    \     (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums (\u03BB (a b)\n \
    \              (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond [(> a-sum b-sum) #t]\n                       [(<\
    \ a-sum b-sum) #f]\n                       [else (< a b)])))))\n", "  (sort nums\
    \ (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n               \
    \      [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n       \
    \              (< (index nums x) (index nums y))\n                     (< x-sum\
    \ y-sum))))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits x)\
    \ (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n               (let ((x-sum\
    \ (sum-digits x))\n                     (y-sum (sum-digits y)))\n            \
    \     (cond\n                   [(> x-sum y-sum) #t]\n                   [(< x-sum\
    \ y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort nums (\u03BB\
    \ (x y)\n               (or (< (sum-digits x) (sum-digits y))\n              \
    \     (and (= (sum-digits x) (sum-digits y))\n                        (< (index-of\
    \ x nums) (index-of y nums)))))))\n", "  (sort nums (\u03BB (x y)\n          \
    \     (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n \
    \              (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index nums\
    \ x) (index nums y))\n                     (< x-sum y-sum))))))\n", "  (sort (map\
    \ (lambda (num) (cons num (sum-digits num))) nums)\n        (lambda (x y) (< (cdr\
    \ x) (cdr y)))))\n", "  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n\
    \        (lambda (x y)\n          (cond\n            [(< (cadr x) (cadr y)) #t]\n\
    \            [(> (cadr x) (cadr y)) #f]\n            [else (< (car x) (car y))]))))\n",
  "  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n     \
    \                [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of nums x) (index-of nums y))\n              \
    \       (< x-sum y-sum))))))\n", "  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n", "  (sort nums\n        (lambda (x y)\n\
    \          (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits y)])\n\
    \            (cond\n              [(< x-sum y-sum) #t]\n              [(> x-sum\
    \ y-sum) #f]\n              [else (< (index-of nums x) (index-of nums y))])))))\n",
  "  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n     \
    \                [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n\
    \                     (< (index nums x) (index nums y))\n                    \
    \ (< x-sum y-sum))))))\n", "  (sort nums (lambda (a b)\n               (< (sum-digits\
    \ a) (sum-digits b)))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum\
    \ (sum-digits x)]\n                     [y-sum (sum-digits y)])\n            \
    \     (cond\n                   [(< x-sum y-sum) #t]\n                   [(> x-sum\
    \ y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort nums (\u03BB\
    \ (x y)\n               (let ([x-sum (sum-digits x)]\n                     [y-sum\
    \ (sum-digits y)])\n                 (cond\n                   [(> x-sum y-sum)\
    \ #t]\n                   [(< x-sum y-sum) #f]\n                   [else (< x\
    \ y)])))))\n", "  (sort nums (lambda (x y)\n               (if (= (sum-digits\
    \ x) (sum-digits y))\n                   (< (index nums x) (index nums y))\n \
    \                  (< (sum-digits x) (sum-digits y))))))\n", "  (sort nums\n \
    \       (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n", "  (sort\
    \ nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n          \
    \           (y-sum (sum-digits y)))\n                 (cond\n                \
    \   [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n          \
    \         [else (< (index-of nums x) (index-of nums y))])))))\n", "  (sort nums\
    \ (\u03BB (x y)\n               (< (sum-digits x) (sum-digits y)))))\n", "  (sort\
    \ nums\n        (lambda (x y)\n          (or (< (sum-digits x) (sum-digits y))\n\
    \              (and (= (sum-digits x) (sum-digits y))\n                   (< (index-of\
    \ x nums) (index-of y nums)))))))\n", "  (sort nums (lambda (a b)\n          \
    \     (cond\n                 [(< (sum-digits a) (sum-digits b)) #t]\n       \
    \          [(> (sum-digits a) (sum-digits b)) #f]\n                 [else (< (index-of\
    \ a nums) (index-of b nums))]))))\n", "  (sort nums (lambda (a b)\n          \
    \     (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits b)))\n\
    \                 (cond\n                   ((> a-sum b-sum) #t)\n           \
    \        ((< a-sum b-sum) #f)\n                   (else (< a b)))))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n  \
    \                   (< (index nums x) (index nums y))\n                     (<\
    \ x-sum y-sum))))))\n", "  (sort nums\n        (lambda (a b)\n          (< (sum-digits\
    \ a) (sum-digits b)))))\n", "  (sort nums (\u03BB (x y)\n               (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums (lambda (a b)\n               (let ((a-sum\
    \ (sum-digits a))\n                     (b-sum (sum-digits b)))\n            \
    \     (cond\n                   [(< a-sum b-sum) #t]\n                   [(> a-sum\
    \ b-sum) #f]\n                   [else (< (index-of nums a) (index-of nums b))])))))\n",
  "  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (lambda (a b)\n               (let ([a-sum (sum-digits a)]\n     \
    \                [b-sum (sum-digits b)])\n                 (if (= a-sum b-sum)\n\
    \                     (< (index-of a nums) (index-of b nums))\n              \
    \       (< a-sum b-sum))))))\n", "  (sort nums (lambda (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (cond\n                   ((> x-sum y-sum) #t)\n               \
    \    ((< x-sum y-sum) #f)\n                   ((= x-sum y-sum)\n             \
    \       (let ((x-index (index-of nums x))\n                          (y-index\
    \ (index-of nums y)))\n                      (< x-index y-index))))))))\n", " \
    \ (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n    \
    \                 [y-sum (sum-digits y)])\n                 (cond\n          \
    \         [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n    \
    \               [else (< x y)])))))\n", "  (sort nums\n        (lambda (x y)\n\
    \          (let ((x-sum (sum-digits x))\n                (y-sum (sum-digits y)))\n\
    \            (cond\n              [(> x-sum y-sum) #t]\n              [(< x-sum\
    \ y-sum) #f]\n              [else (< x y)])))))\n", "  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums (lambda\
    \ (a b)\n               (cond\n                 [(= (sum-digits a) (sum-digits\
    \ b))\n                  (< (index-of nums a) (index-of nums b))]\n          \
    \       [else\n                  (< (sum-digits a) (sum-digits b))]))))\n", " \
    \ (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n    \
    \                 (y-sum (sum-digits y)))\n                 (cond\n          \
    \         ((> x-sum y-sum) #t)\n                   ((< x-sum y-sum) #f)\n    \
    \               (else (< (index-of x nums) (index-of y nums))))))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (or (< x-sum y-sum)\n  \
    \                   (and (= x-sum y-sum)\n                          (< (index-of\
    \ x nums)\n                             (index-of y nums))))))))\n", "  (sort\
    \ nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n          \
    \           (b-sum (sum-digits b)))\n                 (cond ((> a-sum b-sum) #t)\n\
    \                       ((< a-sum b-sum) #f)\n                       (else (<\
    \ (index-of nums a) (index-of nums b))))))))\n", "  (sort nums (\u03BB (x y) (or\
    \ (< (sum-digits x) (sum-digits y))\n                           (and (= (sum-digits\
    \ x) (sum-digits y))\n                                (< (index-of x nums) (index-of\
    \ y nums)))))))\n", "  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits\
    \ x))\n                     (y-sum (sum-digits y)))\n                 (cond ((>\
    \ x-sum y-sum) #t)\n                       ((< x-sum y-sum) #f)\n            \
    \           (else (< (index nums x) (index nums y))))))))\n", "  (sort nums (lambda\
    \ (x y)\n               (cond\n                 [(< (sum-digits x) (sum-digits\
    \ y)) #t]\n                 [(> (sum-digits x) (sum-digits y)) #f]\n         \
    \        [else (< (index-of x nums) (index-of y nums))]))))\n", "  (sort nums\
    \ (lambda (x y)\n               (< (sum-digits x) (sum-digits y)))))\n", "  (sort\
    \ nums\n        (lambda (x y)\n          (or (< (sum-digits x) (sum-digits y))\n\
    \              (and (= (sum-digits x) (sum-digits y))\n                   (< (index-of\
    \ x nums) (index-of y nums)))))))\n", "  (sort nums\n        (lambda (x y)\n \
    \         (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (list-ref nums x) (list-ref\
    \ nums y))))))))\n", "  (sort nums (lambda (a b)\n               (if (= (sum-digits\
    \ a) (sum-digits b))\n                   (< (index-of a nums) (index-of b nums))\n\
    \                   (< (sum-digits a) (sum-digits b))))))\n", "  (sort nums (lambda\
    \ (x y)\n               (let ((x-sum (sum-digits x))\n                     (y-sum\
    \ (sum-digits y)))\n                 (cond ((< x-sum y-sum) #t)\n            \
    \           ((> x-sum y-sum) #f)\n                       (else (< (index nums\
    \ x) (index nums y))))))))\n", "  (sort nums (lambda (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (cond\n                   [(> x-sum y-sum) #t]\n               \
    \    [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (or (< (sum-digits x) (sum-digits y))\n \
    \                  (and (= (sum-digits x) (sum-digits y))\n                  \
    \      (< (index-of x nums) (index-of y nums)))))))\n", "  (sort nums (\u03BB\
    \ (x y)\n               (if (= (sum-digits x) (sum-digits y))\n              \
    \     (< (index nums x) (index nums y))\n                   (< (sum-digits x)\
    \ (sum-digits y))))))\n", "  (sort nums\n        (lambda (x y)\n          (or\
    \ (< (sum-digits x) (sum-digits y))\n              (and (= (sum-digits x) (sum-digits\
    \ y))\n                   (< (index-of x nums) (index-of y nums)))))))\n", " \
    \ (sort nums (\u03BB (a b)\n               (let ([a-sum (sum-digits a)]\n    \
    \                 [b-sum (sum-digits b)])\n                 (cond\n          \
    \         [(> a-sum b-sum) #t]\n                   [(< a-sum b-sum) #f]\n    \
    \               [else (< (index-of nums a) (index-of nums b))])))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (let* ([x-sum (sum-digits x)]\n         \
    \             [y-sum (sum-digits y)])\n                 (or (< x-sum y-sum)\n\
    \                     (and (= x-sum y-sum)\n                          (< (index-of\
    \ x nums)\n                             (index-of y nums))))))))\n", "  (sort\
    \ nums (lambda (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (lambda (a b)\n               (if (= (sum-digits a) (sum-digits b))\n\
    \                   (< (index nums a) (index nums b))\n                   (< (sum-digits\
    \ a) (sum-digits b))))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums (\u03BB (a b)\n               (let ((a-sum\
    \ (sum-digits a))\n                     (b-sum (sum-digits b)))\n            \
    \     (cond\n                   [(< a-sum b-sum) #t]\n                   [(> a-sum\
    \ b-sum) #f]\n                   [else (< (index-of nums a) (index-of nums b))])))))\n",
  "  (sort nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n     \
    \                [y-sum (sum-digits y)])\n                 (cond\n           \
    \        [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n     \
    \              [else (< x y)])))))\n", "  (sort (map (lambda (x) (cons (sum-digits\
    \ x) x)) nums)\n        (lambda (x y)\n          (cond ((< (car x) (car y)) #t)\n\
    \                ((> (car x) (car y)) #f)\n                (else (< (cdr x) (cdr\
    \ y)))))))\n", "  (sort nums\n        (lambda (x y)\n          (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums\n        (lambda (x y)\n          (let\
    \ ([x-sum (sum-digits x)]\n                [y-sum (sum-digits y)])\n         \
    \   (if (= x-sum y-sum)\n                (< (index nums x) (index nums y))\n \
    \               (< x-sum y-sum))))))\n", "  (sort nums (\u03BB (x y)\n       \
    \        (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums\n        (lambda\
    \ (x y)\n          (let ((x-sum (sum-digits x))\n                (y-sum (sum-digits\
    \ y)))\n            (cond\n              [(< x-sum y-sum) #t]\n              [(>\
    \ x-sum y-sum) #f]\n              [else (< (index nums x) (index nums y))])))))\n",
  "  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda (x y)\n\
    \          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x)\
    \ (cdr y)) #f]\n            [else (< (car x) (car y))]))))\n", "  (sort nums (lambda\
    \ (a b)\n               (let ([a-sum (sum-digits a)]\n                     [b-sum\
    \ (sum-digits b)])\n                 (cond\n                   [(> a-sum b-sum)\
    \ #t]\n                   [(< a-sum b-sum) #f]\n                   [else (< (index\
    \ nums a) (index nums b))])))))\n", "  (sort nums (lambda (x y)\n            \
    \   (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n\
    \                 (cond\n                   [(> x-sum y-sum) #t]\n           \
    \        [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort\
    \ nums (\u03BB (x y) (< (sum-digits x) (sum-digits y)))))\n", "  (sort (map (lambda\
    \ (x) (list x (sum-digits x))) nums)\n        (lambda (x y) (< (cadr x) (cadr\
    \ y)))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits\
    \ y)))))\n", "  (sort nums (lambda (x y)\n               (or (< (sum-digits x)\
    \ (sum-digits y))\n                   (and (= (sum-digits x) (sum-digits y))\n\
    \                        (< (index-of x nums) (index-of y nums)))))))\n", "  (sort\
    \ nums (\u03BB (x y) (or (and (zero? (modulo x 10)) (positive? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (positive? (modulo x 10)))\n\
    \                           (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n\
    \                           (and (positive? (modulo x 10)) (negative? (modulo\
    \ y 10)))\n                           (and (positive? (modulo y 10)) (negative?\
    \ (modulo x 10)))\n                           (and (positive? (modulo x 10)) (positive?\
    \ (modulo y 10)))\n                           (and (positive? (modulo y 10)) (positive?\
    \ (modulo x 10)))\n                           (and (negative? (modulo x 10)) (positive?\
    \ (modulo y 10)))\n                           (and (negative? (modulo y 10)) (positive?\
    \ (modulo x 10)))\n                           (and (negative? (modulo x 10)) (negative?\
    \ (modulo y 10)))\n                           (and (negative? (modulo y 10)) (negative?\
    \ (modulo x 10)))\n                           (and (positive? (modulo x 10)) (zero?\
    \ (modulo y 10)))\n                           (and (positive? (modulo y 10)) (zero?\
    \ (modulo x 10)))\n                           (and (negative? (modulo x 10)) (zero?\
    \ (modulo y 10)))\n                           (and (negative? (modulo y 10)) (zero?\
    \ (modulo x 10)))\n                           (and (zero? (modulo x 10)) (zero?\
    \ (modulo y 10)))\n                           (and (zero? (modulo y 10)) (zero?\
    \ (modulo x 10)))\n                           (and (positive? (modulo x 10)) (positive?\
    \ (modulo y 10)))\n                           (and (positive? (modulo y 10)) (positive?\
    \ (modulo x 10)))\n                           (and (negative? (modulo x 10)) (negative?\
    \ (modulo y 10)))\n                           (and (negative? (modulo y 10)) (negative?\
    \ (", "  (sort nums (\u03BB (x y) (or (and (positive? x) (negative? y))\n    \
    \                       (and (negative? x) (positive? y))\n                  \
    \         (and (positive? x) (positive? y) (< (sum-digits x) (sum-digits y)))\n\
    \                           (and (negative? x) (negative? y) (> (sum-digits x)\
    \ (sum-digits y)))))))\n", "  (sort nums (lambda (a b)\n               (let ([a-sum\
    \ (sum-digits a)]\n                     [b-sum (sum-digits b)])\n            \
    \     (cond\n                   [(> a-sum b-sum) #t]\n                   [(< a-sum\
    \ b-sum) #f]\n                   [else (< a b)])))))\n", "  (sort nums\n     \
    \   (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n", "  (sort\
    \ nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n          \
    \           (y-sum (sum-digits y)))\n                 (cond\n                \
    \   ((> x-sum y-sum) #t)\n                   ((< x-sum y-sum) #f)\n          \
    \         (else (< (index-of nums x) (index-of nums y))))))))\n", "  (sort nums\
    \ (lambda (x y)\n               (< (sum-digits x) (sum-digits y)))))\n", "  (sort\
    \ nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (cond\n                \
    \   [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n          \
    \         [else (< x y)])))))\n", "  (sort nums\n        (lambda (x y)\n     \
    \     (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n \
    \              (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (index-of nums x) (index-of\
    \ nums y))))))))\n", "  (sort nums\n        (lambda (x y)\n          (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums (lambda (a b)\n               (< (sum-digits\
    \ a) (sum-digits b)))))\n", "  (sort (map (lambda (x) (cons x (sum-digits x)))\
    \ nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n", "  (sort nums (lambda\
    \ (x y)\n               (let ([x-sum (sum-digits x)]\n                     [y-sum\
    \ (sum-digits y)])\n                 (cond [(< x-sum y-sum) #t]\n            \
    \           [(> x-sum y-sum) #f]\n                       [(< x y) #t]\n      \
    \                 [(> x y) #f]\n                       [else #f])))))\n", "  (sort\
    \ nums (lambda (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n     \
    \                [y-sum (sum-digits y)])\n                 (cond\n           \
    \        [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n     \
    \              [else (< x y)])))))\n", "  (sort nums\n        (lambda (x y)\n\
    \          (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond [(< a-sum b-sum) #t]\n                       [(>\
    \ a-sum b-sum) #f]\n                       [(< a b) #t]\n                    \
    \   [(> a b) #f])))))\n", "  (sort (map (lambda (x) (list x (sum-digits x))) nums)\n\
    \        (lambda (x y) (or (< (cadr x) (cadr y))\n                          (and\
    \ (= (cadr x) (cadr y))\n                               (< (car x) (car y)))))))\n",
  "  (sort (map (lambda (x) (cons x (sum-digits x))) nums)\n        (lambda (x y)\
    \ (or (< (cdr x) (cdr y))\n                          (and (= (cdr x) (cdr y))\n\
    \                               (< (car x) (car y)))))))\n", "  (sort nums (lambda\
    \ (a b)\n               (< (sum-digits a) (sum-digits b)))))\n", "  (sort nums\
    \ (lambda (a b)\n               (cond\n                 [(< (sum-digits a) (sum-digits\
    \ b)) #t]\n                 [(> (sum-digits a) (sum-digits b)) #f]\n         \
    \        [else (< (index-of a nums) (index-of b nums))]))))\n", "  (sort nums\n\
    \        (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n", " \
    \ (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n     \
    \                [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of x nums) (index-of y nums))\n              \
    \       (< x-sum y-sum))))))\n", "  (sort nums\n        (lambda (x y)\n      \
    \    (or (< (sum-digits x) (sum-digits y))\n              (and (= (sum-digits\
    \ x) (sum-digits y))\n                   (< (index-of nums x) (index-of nums y)))))))\n",
  "  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n     \
    \                [y-sum (sum-digits y)])\n                 (cond\n           \
    \        [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n     \
    \              [else (< x y)])))))\n", "  (sort nums (lambda (x y)\n         \
    \      (if (= (sum-digits x) (sum-digits y))\n                   (< (index-of\
    \ x nums) (index-of y nums))\n                   (< (sum-digits x) (sum-digits\
    \ y))))))\n", "  (sort nums\n        (lambda (x y)\n          (< (sum-digits x)\
    \ (sum-digits y)))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum\
    \ (sum-digits x)]\n                     [y-sum (sum-digits y)])\n            \
    \     (cond\n                   [(< x-sum y-sum) #t]\n                   [(> x-sum\
    \ y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort nums\n     \
    \   (lambda (x y)\n          (let ((x-sum (sum-digits x))\n                (y-sum\
    \ (sum-digits y)))\n            (cond\n              [(< x-sum y-sum) #t]\n  \
    \            [(> x-sum y-sum) #f]\n              [else (< (index-of nums x) (index-of\
    \ nums y))])))))\n", "  (sort nums (lambda (a b)\n               (< (sum-digits\
    \ a) (sum-digits b)))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum\
    \ (sum-digits x)]\n                     [y-sum (sum-digits y)])\n            \
    \     (cond\n                   [(> x-sum y-sum) #t]\n                   [(< x-sum\
    \ y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort nums\n     \
    \   (lambda (a b)\n          (if (= (sum-digits a) (sum-digits b))\n         \
    \     (< (index-of a nums) (index-of b nums))\n              (< (sum-digits a)\
    \ (sum-digits b))))))\n", "  (sort nums\n        (lambda (a b)\n          (let\
    \ ((a-sum (sum-digits a))\n                (b-sum (sum-digits b)))\n         \
    \   (cond\n              [(> a-sum b-sum) #t]\n              [(< a-sum b-sum)\
    \ #f]\n              [else (< (index-of nums a) (index-of nums b))])))))\n", " \
    \ (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n    \
    \                 [y-sum (sum-digits y)])\n                 (cond\n          \
    \         [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n    \
    \               [else (< x y)])))))\n", "  (sort nums\n        (lambda (a b)\n\
    \          (< (sum-digits a) (sum-digits b)))))\n", "  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums\n     \
    \   (lambda (a b)\n          (let ([a-sum (sum-digits a)]\n                [b-sum\
    \ (sum-digits b)])\n            (cond\n              [(> a-sum b-sum) #t]\n  \
    \            [(< a-sum b-sum) #f]\n              [else (< (list-ref nums a) (list-ref\
    \ nums b))])))))\n", "  (sort nums (lambda (x y)\n               (let ((x-sum\
    \ (sum-digits x))\n                     (y-sum (sum-digits y)))\n            \
    \     (cond\n                   [(> x-sum y-sum) #t]\n                   [(< x-sum\
    \ y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort nums (lambda\
    \ (a b)\n               (< (sum-digits a) (sum-digits b)))))\n", "  (sort nums\n\
    \        (lambda (x y)\n          (let ([x-sum (sum-digits x)]\n             \
    \   [y-sum (sum-digits y)])\n            (if (= x-sum y-sum)\n               \
    \ (< (index-of x nums) (index-of y nums))\n                (< x-sum y-sum))))))\n",
  "  (sort nums (\u03BB (x y) (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums\
    \ (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n               \
    \      [y-sum (sum-digits y)])\n                 (cond\n                   [(<\
    \ x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n                \
    \   [else (< x y)])))))\n", "  (define (sum-digits n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (sort\
    \ nums (lambda (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (lambda (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums\n        (lambda (x y)\n          (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (\u03BB (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n     \
    \                [y-sum (sum-digits y)])\n                 (cond\n           \
    \        [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n     \
    \              [(< (index-of nums x) (index-of nums y)) #t]\n                \
    \   [else #f])))))\n", "  (sort nums\n        (lambda (x y)\n          (let ([x-sum\
    \ (sum-digits x)]\n                [y-sum (sum-digits y)])\n            (cond\n\
    \              [(< x-sum y-sum) #t]\n              [(> x-sum y-sum) #f]\n    \
    \          [else (< (index-of nums x) (index-of nums y))])))))\n", "  (sort nums\
    \ (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n               \
    \      [y-sum (sum-digits y)])\n                 (cond\n                   [(<\
    \ x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n                \
    \   [else (< x y)])))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum\
    \ (sum-digits x)]\n                     [y-sum (sum-digits y)])\n            \
    \     (cond\n                   [(< x-sum y-sum) #t]\n                   [(> x-sum\
    \ y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort nums (lambda\
    \ (x y)\n               (let ([x-sum (sum-digits x)]\n                     [y-sum\
    \ (sum-digits y)])\n                 (cond\n                   [(< x-sum y-sum)\
    \ #t]\n                   [(> x-sum y-sum) #f]\n                   [else (< x\
    \ y)])))))\n", "  (sort nums (\u03BB (x y)\n               (let ([x-sum (sum-digits\
    \ x)]\n                     [y-sum (sum-digits y)])\n                 (if (= x-sum\
    \ y-sum)\n                     (< (index nums x) (index nums y))\n           \
    \          (< x-sum y-sum))))))\n", "  (sort nums (\u03BB (x y)\n            \
    \   (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n\
    \                 (cond\n                   [(> x-sum y-sum) #t]\n           \
    \        [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (< (sum-digits x) (sum-digits y)))))\n",
  "  (sort nums (\u03BB (x y)\n               (let ((x-sum (sum-digits x))\n     \
    \                (y-sum (sum-digits y)))\n                 (if (= x-sum y-sum)\n\
    \                     (< (index-of nums x) (index-of nums y))\n              \
    \       (< x-sum y-sum))))))\n", "  (sort nums (lambda (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (if (= x-sum y-sum)\n                     (< (index-of nums x) (index-of\
    \ nums y))\n                     (< x-sum y-sum))))))\n", "  (sort (map (lambda\
    \ (x) (cons x (sum-digits x))) nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
  "  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n     \
    \                [y-sum (sum-digits y)])\n                 (cond\n           \
    \        [(< x-sum y-sum) #t]\n                   [(> x-sum y-sum) #f]\n     \
    \              [else (< x y)])))))\n", "  (sort nums (lambda (x y)\n         \
    \      (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n\
    \                 (if (= x-sum y-sum)\n                     (< (index-of nums\
    \ x) (index-of nums y))\n                     (< x-sum y-sum))))))\n", "  (sort\
    \ nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (cond\n                \
    \   [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum) #f]\n          \
    \         [else (< x y)])))))\n", "  (sort nums\n        (lambda (x y)\n     \
    \     (< (sum-digits x) (sum-digits y)))))\n", "  (sort nums (\u03BB (a b)\n \
    \              (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(< a-sum b-sum) #t]\n    \
    \               [(> a-sum b-sum) #f]\n                   [(< a b) #t]\n      \
    \             [(> a b) #f]\n                   [else #f])))))\n", "  (sort nums\
    \ (lambda (x y)\n               (if (= (sum-digits x) (sum-digits y))\n      \
    \             (< (index-of x nums) (index-of y nums))\n                   (< (sum-digits\
    \ x) (sum-digits y))))))\n", "  (sort nums (lambda (x y)\n               (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums\n        (lambda (x y)\n          (<\
    \ (sum-digits x) (sum-digits y)))))\n", "  (sort nums (lambda (a b)\n        \
    \       (or (< (sum-digits a) (sum-digits b))\n                   (and (= (sum-digits\
    \ a) (sum-digits b))\n                        (< (index-of a nums) (index-of b\
    \ nums)))))))\n", "  (sort nums (\u03BB (x y)\n               (let ([x-sum (sum-digits\
    \ x)]\n                     [y-sum (sum-digits y)])\n                 (cond\n\
    \                   [(> x-sum y-sum) #t]\n                   [(< x-sum y-sum)\
    \ #f]\n                   [else (< x y)])))))\n", "  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(< a-sum b-sum) #t]\n    \
    \               [(> a-sum b-sum) #f]\n                   [else (< a b)])))))\n",
  "  (sort nums (lambda (x y)\n               (let ((x-sum (sum-digits x))\n     \
    \                (y-sum (sum-digits y)))\n                 (cond\n           \
    \        ((> x-sum y-sum) #t)\n                   ((< x-sum y-sum) #f)\n     \
    \              (else (< (index-of nums x) (index-of nums y))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
