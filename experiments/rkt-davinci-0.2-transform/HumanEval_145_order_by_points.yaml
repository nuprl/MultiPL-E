name: HumanEval_145_order_by_points
language: rkt
prompt: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
  ;; in ascending order according to the sum of their digits.\n;; Note: if there are\
  \ several items with similar sum of their digits,\n;; order them based on their\
  \ index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1\
  \ -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list\
  \ )\n(define (order_by_points nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
  \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
  \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56\
  \ 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
  \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
  \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
  \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
completions: ["  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits\
    \ a))\n                     (b-sum (sum-digits b)))\n                 (if (= a-sum\
    \ b-sum)\n                     (< (index nums a) (index nums b))\n           \
    \          (< a-sum b-sum))))))\n", "  (sort nums (\u03BB (x y) (< (sum-digits\
    \ x) (sum-digits y)))))\n", "  (sort nums (\u03BB (a b)\n               (let ([a-sum\
    \ (sum-digits a)]\n                     [b-sum (sum-digits b)])\n            \
    \     (if (= a-sum b-sum)\n                     (< (index nums a) (index nums\
    \ b))\n                     (< a-sum b-sum))))))\n", "  (sort nums\n        (lambda\
    \ (x y)\n          (let ((x-sum (sum-digits x))\n                (y-sum (sum-digits\
    \ y)))\n            (cond\n              [(< x-sum y-sum) #t]\n              [(>\
    \ x-sum y-sum) #f]\n              [else (if (member x nums)\n                \
    \        (if (member y nums)\n                            (< (index x nums) (index\
    \ y nums))\n                            #t)\n                        #f)])))))\n",
  "  (sort nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n     \
    \                (b-sum (sum-digits b)))\n                 (cond\n           \
    \        [(> a-sum b-sum) #t]\n                   [(< a-sum b-sum) #f]\n     \
    \              [else (< a b)])))))\n", "  (sort nums (\u03BB (x y)\n         \
    \      (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n\
    \                 (cond ((> x-sum y-sum) #t)\n                       ((< x-sum\
    \ y-sum) #f)\n                       (else (< (index-of nums x) (index-of nums\
    \ y))))))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum (sum-digits\
    \ x)]\n                     [y-sum (sum-digits y)])\n                 (cond [(<\
    \ x-sum y-sum) #t]\n                       [(> x-sum y-sum) #f]\n            \
    \           [(= x-sum y-sum) (< x y)])))))\n", "  (sort nums (lambda (x y)\n \
    \              (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((< x-sum y-sum) #t)\n    \
    \               ((> x-sum y-sum) #f)\n                   (else (< (index-of nums\
    \ x) (index-of nums y))))))))\n", "  (sort nums (\u03BB (x y)\n              \
    \ (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n\
    \                 (cond\n                   [(> x-sum y-sum) #t]\n           \
    \        [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n", "  (sort\
    \ nums (lambda (a b)\n               (let ((a-sum (sum-digits a))\n          \
    \           (b-sum (sum-digits b)))\n                 (if (= a-sum b-sum)\n  \
    \                   (< (index-of a nums) (index-of b nums))\n                \
    \     (< a-sum b-sum))))))\n", "  (sort nums (lambda (a b)\n               (let\
    \ ([a-digits (digits a)]\n                     [b-digits (digits b)])\n      \
    \           (cond [(< (sum a-digits) (sum b-digits)) #t]\n                   \
    \    [(> (sum a-digits) (sum b-digits)) #f]\n                       [else (< (index\
    \ nums a) (index nums b))])))))\n", "  (sort nums (lambda (x y)\n            \
    \   (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n\
    \                 (if (= x-sum y-sum)\n                     (< (index-of nums\
    \ x) (index-of nums y))\n                     (< x-sum y-sum))))))\n", "  (sort\
    \ nums (\u03BB (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n  \
    \                   (< (index nums x) (index nums y))\n                     (<\
    \ x-sum y-sum))))))\n", "  (sort nums (lambda (x y)\n               (let ([x-sum\
    \ (sum-digits x)]\n                     [y-sum (sum-digits y)])\n            \
    \     (cond [(< x-sum y-sum) #t]\n                       [(> x-sum y-sum) #f]\n\
    \                       [(< (index-of nums x) (index-of nums y)) #t]\n       \
    \                [else #f])))))\n", "  (sort nums\n        (lambda (a b)\n   \
    \       (< (sum-digits a) (sum-digits b)))))\n", "  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ nums x) (index-of nums y))\n                     (< x-sum y-sum))))))\n", " \
    \ (sort nums (lambda (a b)\n               (or (< (sum-digits a) (sum-digits b))\n\
    \                   (and (= (sum-digits a) (sum-digits b))\n                 \
    \       (< (index-of a nums) (index-of b nums)))))))\n", "  (sort nums (\u03BB\
    \ (x y)\n               (let ([x-sum (sum-digits x)]\n                     [y-sum\
    \ (sum-digits y)])\n                 (cond\n                   [(< x-sum y-sum)\
    \ #t]\n                   [(> x-sum y-sum) #f]\n                   [(< x y) #t]\n\
    \                   [(> x y) #f]\n                   [else #f])))))\n", "  (sort\
    \ nums (lambda (x y)\n               (let ([x-sum (sum-digits x)]\n          \
    \           [y-sum (sum-digits y)])\n                 (if (= x-sum y-sum)\n  \
    \                   (< (index-of nums x) (index-of nums y))\n                \
    \     (< x-sum y-sum))))))\n", "  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
