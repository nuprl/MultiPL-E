name: HumanEval_14_all_prefixes
language: rkt
prompt: "#lang racket\n\n;; Return list of all prefixes from shortest to longest of\
  \ the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"abc\"\
  )\n(define (all_prefixes string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\"\
  ) (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
  \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
completions: ["  (define (all_prefixes_iter string prefixes)\n    (if (string=? string\
    \ \"\")\n        prefixes\n        (all_prefixes_iter (substring string 1) (cons\
    \ (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", " \
    \ (if (string=? string \"\")\n      (list \"\")\n      (append (all_prefixes (substring\
    \ string 0 -1))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (cond\n      [(empty? string)\
    \ prefixes]\n      [else (all_prefixes_iter (rest string) (append prefixes (list\
    \ (string-append prefixes (string (first string))))))]))\n  (all_prefixes_iter\
    \ string (list)))\n", "  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (helper string prefixes)\n    (if (empty? string)\n        prefixes\n\
    \        (helper (rest string) (append prefixes (list (string-append prefixes\
    \ (string (first string))))))))\n  (helper string (list)))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes_iter (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes_iter string (list)))\n", "  (define (all_prefixes_helper string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes_iter (rest string) (append\
    \ prefixes (list (string-append prefixes (string (first string))))))))\n  (all_prefixes_iter\
    \ string (list \"\")))\n", "  (define (all_prefixes_iter string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes-iter string prefixes)\n    (cond\n      [(empty? string)\
    \ prefixes]\n      [else (all_prefixes-iter (rest string) (append prefixes (list\
    \ (string-append prefixes (string (first string))))))]))\n  (all_prefixes-iter\
    \ string (list \"\")))\n", "  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_helper string '()))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes_iter\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))]))\n  (all_prefixes_iter string (list)))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
