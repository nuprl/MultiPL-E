language: rkt
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (define (gcd a b)\n \
    \   (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (gcd (abs a)\
    \ (abs b)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal?\
    \ (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal?\
    \ (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747681
- exit_code: 0
  program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
    \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n\
    \      (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
