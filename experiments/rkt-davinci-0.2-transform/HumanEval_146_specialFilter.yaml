name: HumanEval_146_specialFilter
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes an array of numbers as input\
  \ and returns \n;; the number of elements in the array that are greater than 10\
  \ and both \n;; first and last digits of a number are odd (1, 3, 5, 7, 9).\n;; For\
  \ example:\n;; >>> (specialFilter (list 15 -73 14 -15))\n;; 1\n;; >>> (specialFilter\
  \ (list 33 -2 -3 45 21 109))\n;; 2\n(define (specialFilter nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate specialFilter))\n\
  \    (check-equal? (candidate (list 5 -2 1 -5)) 0)\n    (check-equal? (candidate\
  \ (list 15 -73 14 -15)) 1)\n    (check-equal? (candidate (list 33 -2 -3 45 21 109))\
  \ 2)\n    (check-equal? (candidate (list 43 -12 93 125 121 109)) 4)\n    (check-equal?\
  \ (candidate (list 71 -2 -33 75 21 19)) 3)\n    (check-equal? (candidate (list 1))\
  \ 0)\n    (check-equal? (candidate (list )) 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd?\
    \ (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (define (firstDigit n)\n    (if (negative?\
    \ n)\n        (- (firstDigit (- n)))\n        (if (< n 10)\n            n\n  \
    \          (firstDigit (/ n 10)))))\n  (define (lastDigit n)\n    (if (negative?\
    \ n)\n        (- (lastDigit (- n)))\n        (modulo n 10)))\n  (define (isOdd\
    \ n)\n    (if (zero? (modulo n 2))\n        #f\n        #t))\n  (define (isSpecial\
    \ n)\n    (and (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (countSpecial nums)\n    (if (null? nums)\n        0\n        (if (and (> (car\
    \ nums) 10)\n                 (isSpecial (car nums)))\n            (+ 1 (countSpecial\
    \ (cdr nums)))\n            (countSpecial (cdr nums)))))\n  (countSpecial nums))\n",
  "  (define (firstDigit n)\n    (if (negative? n)\n        (- (firstDigit (- n)))\n\
    \        (if (zero? n)\n            0\n            (firstDigit (quotient n 10)))))\n\
    \  (define (lastDigit n)\n    (remainder n 10))\n  (define (isOdd n)\n    (if\
    \ (zero? (remainder n 2))\n        #f\n        #t))\n  (define (isSpecial n)\n\
    \    (and (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (countSpecial nums)\n    (if (null? nums)\n        0\n        (if (and (> (car\
    \ nums) 10)\n                 (isSpecial (car nums)))\n            (+ 1 (countSpecial\
    \ (cdr nums)))\n            (countSpecial (cdr nums)))))\n  (countSpecial nums))\n",
  "  (define (firstDigit n)\n    (if (zero? n)\n        0\n        (firstDigit (quotient\
    \ n 10))))\n  (define (lastDigit n)\n    (modulo n 10))\n  (define (isOdd n)\n\
    \    (if (zero? (modulo n 2))\n        #f\n        #t))\n  (define (isGreaterThanTen\
    \ n)\n    (if (&gt; n 10)\n        #t\n        #f))\n  (define (isSpecial n)\n\
    \    (and (isGreaterThanTen n)\n         (isOdd (firstDigit n))\n         (isOdd\
    \ (lastDigit n))))\n  (define (countSpecial nums)\n    (if (null? nums)\n    \
    \    0\n        (+ (if (isSpecial (car nums))\n               1\n            \
    \   0)\n           (countSpecial (cdr nums)))))\n  (countSpecial nums))\n</code>\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (first-digit x))\n\
    \                         (odd? (last-digit x))\n                         (> x\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n      \
    \              (and (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))\n                         (> x 10)))\n                  nums)))\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit\
    \ (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (> (first nums) 10)\n          (odd? (first (number->digits\
    \ (first nums))))\n          (odd? (last (number->digits (first nums)))))\n  \
    \   (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n      \
    \              (and (> n 10)\n                         (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))))\n                  nums)))\n",
  "  (define (first-digit n)\n    (quotient n (expt 10 (floor (log n 10)))))\n  (define\
    \ (last-digit n)\n    (modulo n 10))\n  (define (odd? n)\n    (and (odd? (first-digit\
    \ n)) (odd? (last-digit n))))\n  (length (filter (lambda (n) (and (> n 10) (odd?\
    \ n))) nums)))\n", "  (length (filter (lambda (x)\n                    (and (odd?\
    \ (remainder x 10))\n                         (odd? (quotient x 10))\n       \
    \                  (> x 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (> x 10)\n                         (odd?\
    \ (first-digit x))\n                         (odd? (last-digit x))))\n       \
    \           nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (length (filter (lambda (x)\n                    (and (odd?\
    \ (first-digit x))\n                         (odd? (last-digit x))\n         \
    \                (> x 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (first-digit n))\n             \
    \            (odd? (last-digit n))\n                         (> n 10)))\n    \
    \              nums)))\n", "  (define (firstDigit n)\n    (if (zero? n)\n    \
    \    0\n        (firstDigit (quotient n 10))))\n  (define (lastDigit n)\n    (modulo\
    \ n 10))\n  (define (isOdd n)\n    (if (zero? (modulo n 2))\n        #f\n    \
    \    #t))\n  (define (greaterThanTen n)\n    (if (> n 10)\n        #t\n      \
    \  #f))\n  (define (isSpecial n)\n    (and (isOdd (firstDigit n))\n         (isOdd\
    \ (lastDigit n))\n         (greaterThanTen n)))\n  (define (countSpecial nums)\n\
    \    (if (null? nums)\n        0\n        (if (isSpecial (car nums))\n       \
    \     (+ 1 (countSpecial (cdr nums)))\n            (countSpecial (cdr nums)))))\n\
    \  (countSpecial nums))\n", "  (length (filter (lambda (x)\n                 \
    \   (and (odd? (first-digit x))\n                         (odd? (last-digit x))\n\
    \                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x)) (> x 10)))\
    \ nums)))\n", "  (length (filter (lambda (n)\n                    (and (odd? (first-digit\
    \ n))\n                         (odd? (last-digit n))\n                      \
    \   (> n 10)))\n                  nums)))\n", "  (define (isSpecial? n)\n    (and\
    \ (odd? (first-digit n))\n         (odd? (last-digit n))\n         (> n 10)))\n\
    \  (length (filter isSpecial? nums)))\n", "  (cond\n    [(empty? nums) 0]\n  \
    \  [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (define (isSpecial n)\n    (and (odd?\
    \ (first-digit n))\n         (odd? (last-digit n))\n         (> n 10)))\n  (length\
    \ (filter isSpecial nums)))\n", "  (length (filter (lambda (n)\n             \
    \       (and (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))\n                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (odd? (first-digit n))\n     \
    \                    (odd? (last-digit n))\n                         (> n 10)))\n\
    \                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (odd? (first-digit x))\n             \
    \            (odd? (last-digit x))\n                         (> x 10)))\n    \
    \              nums)))\n", "  (length (filter (lambda (n)\n                  \
    \  (and (odd? (first-digit n))\n                         (odd? (last-digit n))\n\
    \                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (first-digit x))\n     \
    \                    (odd? (last-digit x))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums))\n          (odd? (last-digit (first nums)))\n          (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (first-digit n))\n                         (odd? (last-digit n))\n   \
    \                      (> n 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (> n 10)\n                         (odd?\
    \ (first-digit n))\n                         (odd? (last-digit n))))\n       \
    \           nums)))\n", "  (length (filter (lambda (x) (and (odd? (first-digit\
    \ x))\n                                   (odd? (last-digit x))\n            \
    \                       (> x 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (> n 10)\n                         (odd?\
    \ (first-digit n))\n                         (odd? (last-digit n))))\n       \
    \           nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (length (filter (lambda (x)\n                    (and (odd?\
    \ (first-digit x))\n                         (odd? (last-digit x))\n         \
    \                (> x 10)))\n                  nums)))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (define (firstDigit n)\n    (if (zero? n)\n        0\n        (firstDigit (quotient\
    \ n 10))))\n  (define (lastDigit n)\n    (remainder n 10))\n  (define (isOdd n)\n\
    \    (if (zero? (remainder n 2))\n        #f\n        #t))\n  (define (isSpecial\
    \ n)\n    (and (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (isGreaterThanTen n)\n    (if (&gt; n 10)\n        #t\n        #f))\n  (define\
    \ (filter nums)\n    (cond ((null? nums) '())\n          ((and (isGreaterThanTen\
    \ (car nums))\n                (isSpecial (car nums)))\n           (cons (car\
    \ nums) (filter (cdr nums))))\n          (else (filter (cdr nums)))))\n  (length\
    \ (filter nums)))\n</code>\n", "  (cond [(empty? nums) 0]\n        [else (cond\
    \ [(and (> (first nums) 10)\n                       (odd? (first (number->digits\
    \ (first nums))))\n                       (odd? (last (number->digits (first nums)))))\n\
    \                     (+ 1 (specialFilter (rest nums)))]\n                   \
    \ [else (specialFilter (rest nums))])]))\n", "  (length (filter (lambda (x)\n\
    \                    (and (odd? (first-digit x))\n                         (odd?\
    \ (last-digit x))\n                         (> x 10)))\n                  nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last nums))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (odd? (first-digit n))\n                     \
    \    (odd? (last-digit n))\n                         (> n 10)))\n            \
    \      nums)))\n", "  (length (filter (lambda (n) (and (odd? (first-digit n))\
    \ (odd? (last-digit n)) (> n 10))) nums)))\n", "  (length (filter (lambda (n)\
    \ (and (odd? (first-digit n)) (odd? (last-digit n)) (> n 10))) nums)))\n", " \
    \ (define (firstDigit n)\n    (if (zero? n)\n        0\n        (firstDigit (quotient\
    \ n 10))))\n  (define (lastDigit n)\n    (remainder n 10))\n  (define (isOdd n)\n\
    \    (if (zero? (remainder n 2))\n        #f\n        #t))\n  (define (isGreaterThan10\
    \ n)\n    (if (> n 10)\n        #t\n        #f))\n  (define (isSpecial n)\n  \
    \  (if (and (isOdd (firstDigit n))\n             (isOdd (lastDigit n))\n     \
    \        (isGreaterThan10 n))\n        #t\n        #f))\n  (length (filter isSpecial\
    \ nums)))\n", "  (define (first-digit n)\n    (if (< n 10)\n        n\n      \
    \  (first-digit (quotient n 10))))\n  (define (last-digit n)\n    (remainder n\
    \ 10))\n  (define (is-odd n)\n    (if (= (remainder n 2) 0)\n        #f\n    \
    \    #t))\n  (define (is-special n)\n    (and (is-odd (first-digit n))\n     \
    \    (is-odd (last-digit n))\n         (> n 10)))\n  (define (count-special nums)\n\
    \    (if (null? nums)\n        0\n        (+ (if (is-special (car nums))\n   \
    \            1\n               0)\n           (count-special (cdr nums)))))\n\
    \  (count-special nums))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums))\n          (odd? (last-digit (first nums)))\n          (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (> n 10)\n                         (odd? (first-digit n))\n                \
    \         (odd? (last-digit n))))\n                  nums)))\n", "  (cond\n  \
    \  [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last (number->string\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (define (firstDigit\
    \ n)\n    (if (negative? n)\n        (- (firstDigit (- n)))\n        (if (< n\
    \ 10)\n            n\n            (firstDigit (/ n 10)))))\n  (define (lastDigit\
    \ n)\n    (if (negative? n)\n        (- (lastDigit (- n)))\n        (modulo n\
    \ 10)))\n  (define (isOdd n)\n    (if (zero? (modulo n 2))\n        #f\n     \
    \   #t))\n  (define (isSpecial n)\n    (and (isOdd (firstDigit n))\n         (isOdd\
    \ (lastDigit n))\n         (> n 10)))\n  (define (countSpecial nums)\n    (if\
    \ (null? nums)\n        0\n        (if (isSpecial (car nums))\n            (+\
    \ 1 (countSpecial (cdr nums)))\n            (countSpecial (cdr nums)))))\n  (countSpecial\
    \ nums))\n", "  (define (first-digit n)\n    (if (< n 10)\n        n\n       \
    \ (first-digit (quotient n 10))))\n  (define (last-digit n)\n    (remainder n\
    \ 10))\n  (define (is-odd? n)\n    (if (= (remainder n 2) 0)\n        #f\n   \
    \     #t))\n  (define (is-special? n)\n    (and (is-odd? (first-digit n))\n  \
    \       (is-odd? (last-digit n))\n         (> n 10)))\n  (length (filter is-special?\
    \ nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n          (odd?\
    \ (first (number->digits (first nums))))\n          (odd? (last (number->digits\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x)\n                    (and\
    \ (odd? (first-digit x))\n                         (odd? (last-digit x))\n   \
    \                      (> x 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (> n 10)\n                         (odd?\
    \ (remainder n 10))\n                         (odd? (quotient n 10))))\n     \
    \             nums)))\n", "  (define (isOdd? n)\n    (and (odd? (remainder n 10))\n\
    \         (odd? (quotient n 10))))\n  (length (filter (lambda (n) (and (> n 10)\
    \ (isOdd? n))) nums)))\n", "  (length (filter (lambda (n)\n                  \
    \  (and (odd? (first-digit n))\n                         (odd? (last-digit n))\n\
    \                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (odd? (first-digit n))\n     \
    \                    (odd? (last-digit n))\n                         (> n 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (n)\n              \
    \      (and (> n 10)\n                         (odd? (remainder n 10))\n     \
    \                    (odd? (quotient n 10))))\n                  nums)))\n", " \
    \ (length (filter (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x))\
    \ (> x 10))) nums)))\n", "  (length (filter (lambda (x)\n                    (and\
    \ (odd? (first-digit x))\n                         (odd? (last-digit x))\n   \
    \                      (> x 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (x) (and (odd? (first-digit x))\n                                  \
    \ (odd? (last-digit x))\n                                   (> x 10)))\n     \
    \             nums)))\n", "  (length (filter (lambda (num)\n                 \
    \   (and (> num 10)\n                         (odd? (first-digit num))\n     \
    \                    (odd? (last-digit num))))\n                  nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (define (first-digit\
    \ n)\n    (if (< n 10)\n        n\n        (first-digit (quotient n 10))))\n \
    \ (define (last-digit n)\n    (remainder n 10))\n  (define (is-odd n)\n    (if\
    \ (= (remainder n 2) 0)\n        #f\n        #t))\n  (define (is-special n)\n\
    \    (and (is-odd (first-digit n))\n         (is-odd (last-digit n))\n       \
    \  (> n 10)))\n  (define (count-special nums)\n    (if (null? nums)\n        0\n\
    \        (+ (if (is-special (car nums))\n               1\n               0)\n\
    \           (count-special (cdr nums)))))\n  (count-special nums))\n", "  (cond\
    \ [(empty? nums) 0]\n        [else\n         (if (and (> (first nums) 10)\n  \
    \                (odd? (first (number->digits (first nums)))\n               \
    \        (odd? (last (number->digits (first nums))))))\n             (+ 1 (specialFilter\
    \ (rest nums)))\n             (specialFilter (rest nums)))]))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (> x 10)\n                         (odd?\
    \ (first-digit x))\n                         (odd? (last-digit x))))\n       \
    \           nums)))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (first-digit n))\n                         (odd? (last-digit n))\n   \
    \                      (> n 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (first-digit n))\n             \
    \            (odd? (last-digit n))\n                         (> n 10)))\n    \
    \              nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last nums))\n          (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (first-digit x))\n\
    \                         (odd? (last-digit x))\n                         (> x\
    \ 10)))\n                  nums)))\n", "  (define (is-special? n)\n    (and (odd?\
    \ (remainder n 10))\n         (odd? (quotient n 10))))\n  (length (filter is-special?\
    \ nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd?\
    \ (last-digit (first nums))) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (define (firstDigit\
    \ n)\n    (if (< n 10)\n        n\n        (firstDigit (quotient n 10))))\n  (define\
    \ (lastDigit n)\n    (remainder n 10))\n  (define (isOdd n)\n    (if (= (remainder\
    \ n 2) 0)\n        #f\n        #t))\n  (define (isGreaterThanTen n)\n    (if (>\
    \ n 10)\n        #t\n        #f))\n  (define (isSpecial n)\n    (and (isGreaterThanTen\
    \ n)\n         (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (countSpecial nums)\n    (if (null? nums)\n        0\n        (if (isSpecial\
    \ (car nums))\n            (+ 1 (countSpecial (cdr nums)))\n            (countSpecial\
    \ (cdr nums)))))\n  (countSpecial nums))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last (number->string (first nums)))))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x))\
    \ (> x 10))) nums)))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (first-digit n))\n                         (odd? (last-digit n))\n   \
    \                      (> n 10)))\n                  nums)))\n", "  (length (filter\n\
    \           (lambda (n)\n             (and (odd? (first-digit n))\n          \
    \        (odd? (last-digit n))\n                  (> n 10)))\n           nums)))\n",
  "  (cond [(empty? nums) 0]\n        [else (+ (if (and (> (first nums) 10)\n    \
    \                     (odd? (first (digits (first nums))))\n                 \
    \        (odd? (last (digits (first nums)))))\n                    1\n       \
    \             0)\n                 (specialFilter (rest nums)))]))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (first-digit x))\n                          \
    \         (odd? (last-digit x))\n                                   (> x 10)))\n\
    \                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums))\n          (odd? (last-digit (first nums)))\n          (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (define (firstDigit n)\n    (if (negative? n)\n     \
    \   (- (firstDigit (- n)))\n        (if (< n 10)\n            n\n            (firstDigit\
    \ (/ n 10)))))\n  (define (lastDigit n)\n    (if (negative? n)\n        (- (lastDigit\
    \ (- n)))\n        (modulo n 10)))\n  (define (isOdd n)\n    (if (zero? (modulo\
    \ n 2))\n        #f\n        #t))\n  (define (isSpecial n)\n    (if (and (isOdd\
    \ (firstDigit n))\n             (isOdd (lastDigit n)))\n        #t\n        #f))\n\
    \  (define (filter nums)\n    (if (null? nums)\n        0\n        (if (and (>\
    \ (car nums) 10)\n                 (isSpecial (car nums)))\n            (+ 1 (filter\
    \ (cdr nums)))\n            (filter (cdr nums)))))\n  (filter nums))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (first-digit x))\n     \
    \                    (odd? (last-digit x))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (length (filter (\u03BB (n)\n              \
    \      (and (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))\n                         (> n 10)))\n                  nums)))\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit\
    \ (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda\
    \ (x)\n                    (and (odd? (first-digit x))\n                     \
    \    (odd? (last-digit x))\n                         (> x 10)))\n            \
    \      nums)))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (first-digit n))\n                         (odd? (last-digit n))\n         \
    \                (> n 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (first-digit n))\n             \
    \            (odd? (last-digit n))\n                         (> n 10)))\n    \
    \              nums)))\n", "  (length (filter (lambda (x)\n                  \
    \  (and (odd? (remainder x 10))\n                         (odd? (quotient x 10))\n\
    \                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n    \
    \                     (odd? (quotient x 10))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums))\n          (odd? (last-digit (first nums)))\n          (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums)\
    \ 10)\n          (odd? (first (number->digits (first nums))))\n          (odd?\
    \ (last (number->digits (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (define (firstDigit num)\n    (if (negative? num)\n        (- (firstDigit (-\
    \ num)))\n        (if (< num 10)\n            num\n            (firstDigit (/\
    \ num 10)))))\n  (define (lastDigit num)\n    (if (negative? num)\n        (-\
    \ (lastDigit (- num)))\n        (modulo num 10)))\n  (define (isOdd num)\n   \
    \ (if (odd? num)\n        #t\n        #f))\n  (define (isGreaterThanTen num)\n\
    \    (if (> num 10)\n        #t\n        #f))\n  (define (isSpecial num)\n   \
    \ (if (and (isGreaterThanTen num)\n             (isOdd (firstDigit num))\n   \
    \          (isOdd (lastDigit num)))\n        #t\n        #f))\n  (define (count\
    \ nums)\n    (if (null? nums)\n        0\n        (if (isSpecial (car nums))\n\
    \            (+ 1 (count (cdr nums)))\n            (count (cdr nums)))))\n  (count\
    \ nums))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last (number->string (first nums)))))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (define (firstDigit n)\n    (if\
    \ (zero? n)\n        0\n        (firstDigit (quotient n 10))))\n  (define (lastDigit\
    \ n)\n    (modulo n 10))\n  (define (isOdd n)\n    (if (zero? (modulo n 2))\n\
    \        #f\n        #t))\n  (define (isGreaterThanTen n)\n    (if (> n 10)\n\
    \        #t\n        #f))\n  (define (isSpecial n)\n    (and (isGreaterThanTen\
    \ n)\n         (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (count n)\n    (if (null? n)\n        0\n        (if (isSpecial (car n))\n \
    \           (+ 1 (count (cdr n)))\n            (count (cdr n)))))\n  (count nums))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last (number->string (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (length (filter (lambda (x) (and (odd?\
    \ (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (> x 10)\n                         (odd?\
    \ (first-digit x))\n                         (odd? (last-digit x))))\n       \
    \           nums)))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (first-digit n))\n                         (odd? (last-digit n))\n   \
    \                      (> n 10)))\n                  nums)))\n", "  (define (first-digit\
    \ n)\n    (if (< n 10)\n        n\n        (first-digit (quotient n 10))))\n \
    \ (define (last-digit n)\n    (remainder n 10))\n  (define (is-odd? n)\n    (if\
    \ (= (remainder n 2) 0)\n        #f\n        #t))\n  (define (is-special? n)\n\
    \    (and (is-odd? (first-digit n))\n         (is-odd? (last-digit n))\n     \
    \    (> n 10)))\n  (length (filter is-special? nums)))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last (number->string\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (define (firstDigit n)\n    (if (negative? n) (- n) n)\n\
    \    (if (zero? (remainder n 10))\n        (firstDigit (quotient n 10))\n    \
    \    (remainder n 10)))\n  (define (lastDigit n)\n    (remainder n 10))\n  (define\
    \ (isOdd n)\n    (if (zero? (remainder n 2))\n        #f\n        #t))\n  (define\
    \ (isSpecial n)\n    (and (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n\
    \  (define (isGreaterThan10 n)\n    (if (> n 10)\n        #t\n        #f))\n \
    \ (define (count n)\n    (if (null? n)\n        0\n        (+ (if (and (isGreaterThan10\
    \ (car n))\n                   (isSpecial (car n)))\n               1\n      \
    \         0)\n           (count (cdr n)))))\n  (count nums))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (first-digit n))\n             \
    \            (odd? (last-digit n))\n                         (> n 10)))\n    \
    \              nums)))\n", "  (length (filter (lambda (n)\n                  \
    \  (and (odd? (first-digit n))\n                         (odd? (last-digit n))\n\
    \                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (first-digit x))\n                          \
    \         (odd? (last-digit x))\n                                   (> x 10)))\n\
    \                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last nums))\n    \
    \      (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (length (filter (lambda (x) (and (odd?\
    \ (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n", "  (cond [(empty?\
    \ nums) 0]\n        [else (if (and (> (first nums) 10)\n                     \
    \  (odd? (first (number->digits (first nums))))\n                       (odd?\
    \ (last (number->digits (first nums)))))\n                 (+ 1 (specialFilter\
    \ (rest nums)))\n                 (specialFilter (rest nums)))]))\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit\
    \ (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (odd? (first-digit n))\n                     \
    \    (odd? (last-digit n))\n                         (> n 10)))\n            \
    \      nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\
    \ (odd? (last-digit (first nums))) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (first-digit n))\n             \
    \            (odd? (last-digit n))\n                         (> n 10)))\n    \
    \              nums)))\n", "  (length (filter (lambda (n)\n                  \
    \  (and (odd? (first-digit n))\n                         (odd? (last-digit n))\n\
    \                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (> n 10)\n                   \
    \      (odd? (first-digit n))\n                         (odd? (last-digit n))))\n\
    \                  nums)))\n", "  (length (filter (lambda (x)\n              \
    \      (and (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))\n                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (first-digit x))\n     \
    \                    (odd? (last-digit x))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums))\n          (odd? (last-digit (first nums)))\n          (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda\
    \ (x)\n                    (and (odd? (first-digit x))\n                     \
    \    (odd? (last-digit x))\n                         (> x 10)))\n            \
    \      nums)))\n", "  (length (filter (lambda (n)\n                    (and (>\
    \ n 10)\n                         (odd? (first-digit n))\n                   \
    \      (odd? (last-digit n))))\n                  nums)))\n", "  (length (filter\
    \ (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (define (firstDigit n)\n    (if (zero?\
    \ n)\n        0\n        (firstDigit (quotient n 10))))\n  (define (lastDigit\
    \ n)\n    (modulo n 10))\n  (define (isOdd n)\n    (if (zero? (modulo n 2))\n\
    \        #f\n        #t))\n  (define (isGreaterThanTen n)\n    (if (> n 10)\n\
    \        #t\n        #f))\n  (define (isSpecial n)\n    (and (isGreaterThanTen\
    \ n)\n         (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (countSpecial nums)\n    (if (null? nums)\n        0\n        (if (isSpecial\
    \ (car nums))\n            (+ 1 (countSpecial (cdr nums)))\n            (countSpecial\
    \ (cdr nums)))))\n  (countSpecial nums))\n", "  (length (filter (lambda (n)\n\
    \                    (and (> n 10)\n                         (odd? (first-digit\
    \ n))\n                         (odd? (last-digit n))))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (cond [(empty? nums) 0]\n        [else\
    \ (add1 (specialFilter (rest nums)))\n              (cond [(and (> (first nums)\
    \ 10)\n                         (odd? (first (first nums)))\n                \
    \         (odd? (last (first nums))))\n                      1]\n            \
    \        [else 0])]))\n", "  (length (filter (lambda (x)\n                   \
    \ (and (odd? (first-digit x))\n                         (odd? (last-digit x))\n\
    \                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (num)\n                    (and (odd? (first-digit num))\n \
    \                        (odd? (last-digit num))\n                         (>\
    \ num 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n  \
    \                  (and (odd? (first-digit n))\n                         (odd?\
    \ (last-digit n))\n                         (> n 10)))\n                  nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n          (odd?\
    \ (first (digits (first nums))))\n          (odd? (last (digits (first nums)))))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (n)\n                    (and (> n 10)\n            \
    \             (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))))\n                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n  \
    \  [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n   \
    \       (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (length (filter (lambda (x)\n        \
    \            (and (odd? (remainder x 10))\n                         (odd? (quotient\
    \ x 10))\n                         (> x 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (x)\n                    (and (odd? (first-digit x))\n\
    \                         (odd? (last-digit x))\n                         (> x\
    \ 10)))\n                  nums)))\n", "  (cond\n    [(null? nums) 0]\n    [(and\
    \ (> (car nums) 10)\n          (odd? (car nums))\n          (odd? (last-digit\
    \ (car nums))))\n     (+ 1 (specialFilter (cdr nums)))]\n    [else (specialFilter\
    \ (cdr nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (define (firstDigit n)\n    (if (negative? n)\n        (firstDigit (- n))\n \
    \       (if (< n 10)\n            n\n            (firstDigit (/ n 10)))))\n  (define\
    \ (lastDigit n)\n    (if (negative? n)\n        (lastDigit (- n))\n        (modulo\
    \ n 10)))\n  (define (isOdd n)\n    (if (zero? (modulo n 2))\n        #f\n   \
    \     #t))\n  (define (greaterThan10 n)\n    (if (< n 10)\n        #f\n      \
    \  #t))\n  (define (isSpecial n)\n    (if (and (isOdd (firstDigit n))\n      \
    \       (isOdd (lastDigit n))\n             (greaterThan10 n))\n        #t\n \
    \       #f))\n  (define (countSpecial nums)\n    (if (null? nums)\n        0\n\
    \        (if (isSpecial (car nums))\n            (+ 1 (countSpecial (cdr nums)))\n\
    \            (countSpecial (cdr nums)))))\n  (countSpecial nums))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (first-digit x))\n     \
    \                    (odd? (last-digit x))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (define (firstDigit n)\n    (if (< n 10)\n \
    \       n\n        (firstDigit (quotient n 10))))\n  (define (lastDigit n)\n \
    \   (remainder n 10))\n  (define (isOdd n)\n    (if (= (remainder n 2) 0)\n  \
    \      #f\n        #t))\n  (define (isGreaterThanTen n)\n    (if (> n 10)\n  \
    \      #t\n        #f))\n  (define (isSpecial n)\n    (and (isGreaterThanTen n)\n\
    \         (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (countSpecial nums)\n    (if (null? nums)\n        0\n        (if (isSpecial\
    \ (car nums))\n            (+ 1 (countSpecial (cdr nums)))\n            (countSpecial\
    \ (cdr nums)))))\n  (countSpecial nums))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums))\n          (odd? (last-digit (first nums)))\n          (>\
    \ (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x) (and (odd? (first-digit x))\
    \ (odd? (last-digit x)) (> x 10))) nums)))\n", "  (length (filter (lambda (x)\n\
    \                    (and (odd? (first-digit x))\n                         (odd?\
    \ (last-digit x))\n                         (> x 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (first-digit x))\n\
    \                         (odd? (last-digit x))\n                         (> x\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (x) (and (odd?\
    \ (first-digit x))\n                                   (odd? (last-digit x))\n\
    \                                   (> x 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (> x 10)\n            \
    \             (odd? (remainder x 10))\n                         (odd? (quotient\
    \ x 10))))\n                  nums)))\n", "  (define (first-digit n)\n    (if\
    \ (< n 10)\n        n\n        (first-digit (quotient n 10))))\n  (define (last-digit\
    \ n)\n    (remainder n 10))\n  (define (is-odd n)\n    (if (= (remainder n 2)\
    \ 0)\n        #f\n        #t))\n  (define (is-special n)\n    (and (> n 10)\n\
    \         (is-odd (first-digit n))\n         (is-odd (last-digit n))))\n  (define\
    \ (count n)\n    (if (null? n)\n        0\n        (if (is-special (car n))\n\
    \            (+ 1 (count (cdr n)))\n            (count (cdr n)))))\n  (count nums))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums))\
    \ (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x)\n                    (and\
    \ (odd? (first-digit x))\n                         (odd? (last-digit x))\n   \
    \                      (> x 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (first-digit n))\n             \
    \            (odd? (last-digit n))\n                         (> n 10)))\n    \
    \              nums)))\n", "  (length (filter (lambda (n)\n                  \
    \  (and (odd? (remainder n 10))\n                         (odd? (quotient n 10))\n\
    \                         (> n 10)))\n                  nums)))\n", "  (define\
    \ (firstDigit n)\n    (if (negative? n) (- n) n)\n    (if (zero? (remainder n\
    \ 10))\n        (firstDigit (quotient n 10))\n        n))\n  (define (lastDigit\
    \ n)\n    (remainder n 10))\n  (define (isOdd n)\n    (not (zero? (remainder n\
    \ 2))))\n  (define (greaterThanTen n)\n    (> n 10))\n  (define (isSpecial n)\n\
    \    (and (isOdd (firstDigit n)) (isOdd (lastDigit n))))\n  (length (filter (lambda\
    \ (n) (and (greaterThanTen n) (isSpecial n))) nums)))\n", "  (cond [(empty? nums)\
    \ 0]\n        [else (+ (if (and (> (first nums) 10)\n                        \
    \  (odd? (first (digits (first nums))))\n                          (odd? (last\
    \ (digits (first nums)))))\n                    1\n                    0)\n  \
    \               (specialFilter (rest nums)))]))\n", "  (cond\n    [(empty? nums)\
    \ 0]\n    [(and (odd? (first nums))\n          (odd? (last (number->string (first\
    \ nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (first-digit n))\n                         (odd? (last-digit n))\n   \
    \                      (> n 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (odd? (first-digit x))\n             \
    \            (odd? (last-digit x))\n                         (> x 10)))\n    \
    \              nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (odd? (first-digit n))\n                     \
    \    (odd? (last-digit n))\n                         (> n 10)))\n            \
    \      nums)))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (first-digit n))\n                         (odd? (last-digit n))\n         \
    \                (> n 10)))\n                  nums)))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (define (firstDigit n)\n    (if (= (modulo\
    \ n 10) n)\n        n\n        (firstDigit (quotient n 10))))\n  (define (lastDigit\
    \ n)\n    (modulo n 10))\n  (define (isOdd n)\n    (if (= (modulo n 2) 1)\n  \
    \      #t\n        #f))\n  (define (isSpecial n)\n    (if (and (> n 10) (isOdd\
    \ (firstDigit n)) (isOdd (lastDigit n)))\n        #t\n        #f))\n  (define\
    \ (countSpecial nums)\n    (if (null? nums)\n        0\n        (if (isSpecial\
    \ (car nums))\n            (+ 1 (countSpecial (cdr nums)))\n            (countSpecial\
    \ (cdr nums)))))\n  (countSpecial nums))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last-digit (first nums))) (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (length (filter (lambda (x) (and (odd? (first-digit x)) (odd?\
    \ (last-digit x)) (> x 10))) nums)))\n", "  (length (filter (lambda (x)\n    \
    \                (and (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))\n                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n    \
    \                     (odd? (quotient x 10))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (cond [(empty? nums) 0]\n        [else (+ (if\
    \ (and (> (first nums) 10)\n                          (odd? (first (first nums)))\n\
    \                          (odd? (last (first nums))))\n                     1\n\
    \                     0)\n                 (specialFilter (rest nums)))]))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (define (firstDigit n)\n    (if (< n\
    \ 10)\n        n\n        (firstDigit (quotient n 10))))\n  (define (lastDigit\
    \ n)\n    (modulo n 10))\n  (define (isOdd n)\n    (if (= (modulo n 2) 1)\n  \
    \      #t\n        #f))\n  (define (isGreaterThanTen n)\n    (if (> n 10)\n  \
    \      #t\n        #f))\n  (define (isSpecial n)\n    (and (isGreaterThanTen n)\n\
    \         (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (specialFilterHelper nums count)\n    (if (null? nums)\n        count\n    \
    \    (if (isSpecial (car nums))\n            (specialFilterHelper (cdr nums) (+\
    \ count 1))\n            (specialFilterHelper (cdr nums) count))))\n  (specialFilterHelper\
    \ nums 0))\n", "  (length (filter (lambda (x) (and (odd? (modulo x 10))\n    \
    \                               (odd? (quotient x 10))))\n                  nums)))\n",
  "  (cond [(empty? nums) 0]\n        [else (if (and (odd? (first nums))\n       \
    \                (odd? (last-digit (first nums)))\n                       (> (first\
    \ nums) 10))\n                 (+ 1 (specialFilter (rest nums)))\n           \
    \      (specialFilter (rest nums)))]))\n", "  (length (filter (lambda (x) (and\
    \ (odd? (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n    \
    \                     (odd? (quotient n 10))\n                         (> n 10)))\n\
    \                  nums)))\n", "  (define (firstDigit n)\n    (if (zero? n)\n\
    \        0\n        (firstDigit (quotient n 10))))\n  (define (lastDigit n)\n\
    \    (modulo n 10))\n  (define (isOdd n)\n    (if (zero? (modulo n 2))\n     \
    \   #f\n        #t))\n  (define (isGreaterThanTen n)\n    (if (> n 10)\n     \
    \   #t\n        #f))\n  (define (isSpecial n)\n    (and (isGreaterThanTen n)\n\
    \         (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define\
    \ (countSpecial nums)\n    (if (null? nums)\n        0\n        (if (isSpecial\
    \ (car nums))\n            (+ 1 (countSpecial (cdr nums)))\n            (countSpecial\
    \ (cdr nums)))))\n  (countSpecial nums))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last-digit\
    \ (first nums))) (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda (x) (and\
    \ (odd? (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n", "  (define\
    \ (is-special? n)\n    (and (odd? (first-digit n))\n         (odd? (last-digit\
    \ n))\n         (> n 10)))\n  (length (filter is-special? nums)))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x)) (> x 10)))\
    \ nums)))\n", "  (length (filter (lambda (x) (and (odd? (first-digit x))\n   \
    \                                (odd? (last-digit x))\n                     \
    \              (> x 10)))\n                  nums)))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (define (first-digit n)\n    (if (< n 10) n\n        (first-digit (quotient n\
    \ 10))))\n  (define (last-digit n)\n    (modulo n 10))\n  (define (is-odd? n)\n\
    \    (if (= (modulo n 2) 1) #t #f))\n  (define (is-special? n)\n    (and (is-odd?\
    \ (first-digit n))\n         (is-odd? (last-digit n))\n         (> n 10)))\n \
    \ (length (filter is-special? nums)))\n", "  (cond\n    [(empty? nums) 0]\n  \
    \  [(and\n      (> (first nums) 10)\n      (odd? (first (number->digits (first\
    \ nums))))\n      (odd? (last (number->digits (first nums)))))\n      (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter\
    \ (lambda (n) (and (odd? (first-digit n))\n                                  \
    \ (odd? (last-digit n))\n                                   (> n 10)))\n     \
    \             nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (> (first\
    \ nums) 10)\n          (odd? (first (number->digits (first nums))))\n        \
    \  (odd? (last (number->digits (first nums)))))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last (number->string\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (define (first-digit\
    \ n)\n    (if (< n 10)\n        n\n        (first-digit (quotient n 10))))\n \
    \ (define (last-digit n)\n    (remainder n 10))\n  (define (is-odd? n)\n    (if\
    \ (= (remainder n 2) 0)\n        #f\n        #t))\n  (define (is-special? n)\n\
    \    (and (is-odd? (first-digit n))\n         (is-odd? (last-digit n))\n     \
    \    (> n 10)))\n  (length (filter is-special? nums)))\n", "  (length (filter\
    \ (lambda (x) (and (odd? (first-digit x))\n                                  \
    \ (odd? (last-digit x))\n                                   (> x 10)))\n     \
    \             nums)))\n", "  (cond [(empty? nums) 0]\n        [else (+ (if (and\
    \ (> (first nums) 10)\n                         (odd? (first (number->digits (first\
    \ nums))))\n                         (odd? (last (number->digits (first nums)))))\n\
    \                    1 0)\n                 (specialFilter (rest nums)))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n          (odd?\
    \ (first (number->digits (first nums))))\n          (odd? (last (number->digits\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x) (and (odd? (car (digits x)))\
    \ (odd? (car (reverse (digits x)))) (> x 10))) nums)))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (odd? (first-digit x))\n             \
    \            (odd? (last-digit x))\n                         (> x 10)))\n    \
    \              nums)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
