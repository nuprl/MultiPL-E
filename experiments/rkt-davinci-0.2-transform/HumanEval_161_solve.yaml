name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\
  \n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define\
  \ (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n  \
    \                  (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string-append\n       (string-append\n\
    \        (string-append\n         (string-append\n          (string-append\n \
    \          (string-append\n            (string-append\n             (string-append\n\
    \              (string-append\n               (string-append\n               \
    \ (string-append\n                 (string-append\n                  (string-append\n\
    \                   (string-append\n                    (string-append\n     \
    \                (string-append\n                      (string-append\n      \
    \                 (string-append\n                        (string-append\n   \
    \                      (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                             (string-append\n                              (string-append\n\
    \                               (string-append\n                             \
    \   (string-append\n                                 (string-append\n        \
    \                          (string-append\n                                  \
    \ (string-append\n                                    (string-append\n       \
    \                              (string-append\n                              \
    \        (string-append\n                                       (string-append\n\
    \                                        (string-append\n                    \
    \                     (string-append\n                                       \
    \   (string-append\n                                           (string-append\n\
    \                                            (string-append\n                \
    \                             (string-append\n                               \
    \               (string-append\n                                             \
    \  (string-append\n                                                (string-append\n\
    \                                                 (string-append\n           \
    \                                       (string-append\n                     \
    \                              (string-append\n                              \
    \                      (string-append\n                                      \
    \               (string-append\n                                             \
    \         (string-append\n                                                   \
    \    (string-append\n                                                        (string-append\n\
    \                                                         (string-append\n   \
    \                                                       (string-append\n     \
    \                                                      (string-append\n      \
    \                                                      (string-append\n      \
    \                                                       (string-append\n     \
    \                                                         (string-append\n   \
    \                                                            (string-append\n\
    \                                                                (string-append\n\
    \                                                                 (string-append\n\
    \                                                                  (string-append\n\
    \                                                                   (string-append\n\
    \                                                                    (string-append\n\
    \                                                                     (string-append\n\
    \                                                                      (string-append\n",
  "  (if (string-contains-char? s #\\a)\n      (string-map (lambda (c)\n         \
    \           (if (char-alphabetic? c)\n                        (char-upcase c)\n\
    \                        (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-upcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains-ci? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains-ci? s #\\a)\n      (string-map\n       (lambda (c)\n      \
    \   (if (char-alphabetic? c)\n             (char-upcase c)\n           (char-downcase\
    \ c)))\n       s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n \
    \     \"\"\n      (string-append (solve (substring s 1))\n                   \
    \  (if (char-alphabetic? (string-ref s 0))\n                         (if (char-lower-case?\
    \ (string-ref s 0))\n                             (string-upcase (string-ref s\
    \ 0))\n                             (string-downcase (string-ref s 0)))\n    \
    \                     (string-ref s 0)))))\n", "  (if (string-contains-letter?\
    \ s)\n      (reverse-case s)\n      (reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref s 0)])\n      \
    \  (if (char-alphabetic? c)\n            (string-append (string (char-downcase\
    \ c)) (solve (substring s 1)))\n            (string-append (string c) (solve (substring\
    \ s 1)))))))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append (solve\
    \ (substring s 1))\n                     (if (char-alphabetic? (string-ref s 0))\n\
    \                         (if (char-lower-case? (string-ref s 0))\n          \
    \                   (string-upcase (string-ref s 0))\n                       \
    \      (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0)))))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n      (string\
    \ (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-downcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n  \
    \    (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n           (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n      (string-reverse\
    \ s)\n      (string-reverse (map (lambda (c)\n                             (if\
    \ (char-alphabetic? c)\n                                 (if (char-lower-case?\
    \ c)\n                                     (char-upcase c)\n                 \
    \                    (char-downcase c))\n                                 c))\n\
    \                           s))))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-upcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains? s (regexp\
    \ \"[a-zA-Z]\"))\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-downcase\
    \ c) (char-upcase c))) s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (if (char-alphabetic? (string-ref s 0))\n\
    \                        (string-upcase (string-ref s 0))\n                  \
    \      (string-downcase (string-ref s 0)))\n                    (solve (substring\
    \ s 1)))))\n", "  (if (string-empty? s)\n      s\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n", "  (if (string-contains-char? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (let ([c (string-ref s 0)])\n        (cond\n         [(char-alphabetic?\
    \ c)\n          (string-append (string (char-upcase c)) (solve (substring s 1)))]\n\
    \         [(char-numeric? c)\n          (string-append (string (char-downcase\
    \ c)) (solve (substring s 1)))]\n         [else\n          (string-append (string\
    \ c) (solve (substring s 1)))]))))\n", "  (if (string-contains-letter? s)\n  \
    \    (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (string-empty?\
    \ s)\n      s\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append\n      (string (sub1\
    \ (string-ref s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (if\
    \ (string-empty? s)\n      \"\"\n      (let ([c (string-ref s 0)])\n        (if\
    \ (char-alphabetic? c)\n            (string-append (string (char-upcase c)) (solve\
    \ (substring s 1)))\n            (string-append (string c) (solve (substring s\
    \ 1)))))))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [(char-alphabetic? (first s))\n     (string-append (char-upcase (first s))\
    \ (solve (rest s)))]\n    [(char-numeric? (first s))\n     (string-append (first\
    \ s) (solve (rest s)))]\n    [else\n     (string-append (char-downcase (first\
    \ s)) (solve (rest s)))]))\n", "  (if (string-empty? s)\n      s\n      (if (string-contains-ci?\
    \ s #\\a)\n          (string-reverse s)\n          (string-map (lambda (c) (if\
    \ (char-alphabetic? c)\n                                      (char-upcase c)\n\
    \                                      (char-downcase c)))\n                 \
    \     s))))\n", "  (if (string-empty? s)\n      s\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n", "  (if (string-contains-ci? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (let ([c (string-ref s 0)])\n        (if (char-alphabetic?\
    \ c)\n            (string-append (string (char-downcase c)) (solve (substring\
    \ s 1)))\n            (string-append (string (char-upcase c)) (solve (substring\
    \ s 1)))))))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (if\
    \ (char-lower-case? c)\n                            (char-upcase c)\n        \
    \                    (char-downcase c))\n                        c))\n       \
    \           s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n    \
    \  \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0))\n                         (solve (substring\
    \ s 1)))\n          (string-append (string-downcase (string-ref s 0))\n      \
    \                   (solve (substring s 1))))))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append\n       (if (char-alphabetic? (string-ref\
    \ s 0))\n           (string-upcase (string-ref s 0))\n           (string-downcase\
    \ (string-ref s 0)))\n       (solve (substring s 1)))))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append\n      (string (char-downcase\
    \ (string-ref s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n", "  (if (string-contains-any? s \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase\
    \ c))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n  \
    \  [(char-alphabetic? (string-ref s 0))\n     (string-append (string (char-upcase\
    \ (string-ref s 0))) (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append (string (char-downcase (string-ref s 0))) (solve\
    \ (substring s 1)))]\n    [else (string-append (string (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-append (string-downcase (string-ref s 0)) (string-upcase (string-ref\
    \ s 0))) (solve (substring s 1)))\n          (string-append (string-ref s 0) (solve\
    \ (substring s 1))))))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s)\
    \ \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n     \
    \ (string (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n \
    \   [(char-numeric? (string-ref s 0))\n     (string-append\n      (string (char-downcase\
    \ (string-ref s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (if\
    \ (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n", "  (if (string-contains-ci? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c)\n                  \
    \  (if (char-alphabetic? c)\n                        (char-upcase c)\n       \
    \                 (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains s #\\a)\n      (string-map (lambda (c)\n  \
    \                  (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c)\n                  \
    \  (if (char-alphabetic? c)\n                        (char-upcase c)\n       \
    \                 (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) empty]\n    [(char-alphabetic? (first s))\n\
    \     (string-append (string (char-upcase (first s)))\n                    (solve\
    \ (rest s)))]\n    [(char-numeric? (first s))\n     (string-append (string (first\
    \ s))\n                    (solve (rest s)))]\n    [else\n     (string-append\
    \ (string (char-downcase (first s)))\n                    (solve (rest s)))]))\n",
  "  (string-reverse\n   (string-map\n    (lambda (c)\n      (if (char-alphabetic?\
    \ c)\n          (if (char-lower-case? c)\n              (char-upcase c)\n    \
    \          (char-downcase c))\n          c))\n    s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-append (string-upcase (string-ref s 0)) (string-downcase (string-ref\
    \ s 0))) (solve (substring s 1)))\n          (string-append (string-ref s 0) (solve\
    \ (substring s 1))))))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n           (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n", "  (if (string-empty? s)\n      \"\"\n      (let\
    \ ([c (string-ref s 0)])\n        (if (char-alphabetic? c)\n            (string-append\
    \ (string (char-upcase c))\n                           (solve (substring s 1)))\n\
    \            (string-append (string c)\n                           (solve (substring\
    \ s 1)))))))\n", "  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-downcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-upcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      s\n      (string-append (string (if (char-alphabetic? (string-ref\
    \ s 0))\n                                 (char-upcase (string-ref s 0))\n   \
    \                              (char-downcase (string-ref s 0))))\n          \
    \           (solve (substring s 1)))))\n", "  (if (string-contains-letter? s)\n\
    \      (string-reverse-case s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0)\n                  \
    \  (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]))\n", "  (if\
    \ (string-contains-letter? s)\n      (string-reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-letter? s)\n      (reverse-case s)\n      (reverse\
    \ s)))\n", "  (if (string-contains-letter? s)\n      (string-reverse-case s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string-append\n       (string-append\n        (string-append\n         (string-append\n\
    \          (string-append\n           (string-append\n            (string-append\n\
    \             (string-append\n              (string-append\n               (string-append\n\
    \                (string-append\n                 (string-append\n           \
    \       (string-append\n                   (string-append\n                  \
    \  (string-append\n                     (string-append\n                     \
    \ (string-append\n                       (string-append\n                    \
    \    (string-append\n                         (string-append\n               \
    \           (string-append\n                           (string-append\n      \
    \                      (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains-any? s \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase\
    \ c))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n  \
    \  [(char-alphabetic? (string-ref s 0))\n     (string-append (string (char-upcase\
    \ (string-ref s 0)))\n                    (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string (char-downcase (string-ref s\
    \ 0)))\n                    (solve (substring s 1)))]\n    [else (string-append\
    \ (string (string-ref s 0))\n                         (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) '()]\n    [(char-alphabetic? (car s))\n     (cons (char-upcase\
    \ (car s)) (solve (cdr s)))]\n    [(char-numeric? (car s))\n     (cons (car s)\
    \ (solve (cdr s)))]\n    [else\n     (cons (char-downcase (car s)) (solve (cdr\
    \ s)))]))\n", "  (if (string-contains-pred s char-alphabetic?)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase c))) s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n", "  (if (string-contains-letter? s)\n    \
    \  (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string (char-downcase (string-ref s 0)))\n      (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append\n      (string (char-upcase\
    \ (string-ref s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(string-ci=? (substring s 0 1) (substring s 0 1))\n\
    \     (string-append (substring s 0 1) (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-upcase (substring s 0 1)) (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) '()]\n    [(char-alphabetic? (car s))\n     (cons (char-upcase\
    \ (car s)) (solve (cdr s)))]\n    [(char-numeric? (car s))\n     (cons (car s)\
    \ (solve (cdr s)))]\n    [else\n     (cons (char-downcase (car s)) (solve (cdr\
    \ s)))]))\n", "  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (string-upcase (string-ref s 0))\n         \
    \                (string-downcase (string-ref s 0))))))\n", "  (cond\n    [(empty?\
    \ s) '()]\n    [(char-alphabetic? (car s))\n     (cons (char-upcase (car s)) (solve\
    \ (cdr s)))]\n    [(char-numeric? (car s))\n     (cons (car s) (solve (cdr s)))]\n\
    \    [else (cons (char-downcase (car s)) (solve (cdr s)))]))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n  \
    \  [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase (string-ref\
    \ s 0)) (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n   \
    \  (string-append (string-ref s 0) (solve (substring s 1)))]\n    [else\n    \
    \ (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-only-letters? s)\n      (string-reverse s)\n\
    \      (string-reverse-case s)))\n", "  (if (string-contains-char? s #\\a)\n \
    \     (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0)\n                  \
    \  (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]))\n", "  (if\
    \ (string-contains-letter? s)\n      (reverse-case s)\n      (reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string (char-upcase (string-ref s 0)))\n       \
    \             (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append (string (char-downcase (string-ref s 0)))\n             \
    \       (solve (substring s 1)))]\n    [else (string-append (string (string-ref\
    \ s 0))\n                         (solve (substring s 1)))]))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-letter?\
    \ s)\n      (reverse-case s)\n      (reverse s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (let ([c (string-ref s 0)])\n        (cond\n         [(char-alphabetic?\
    \ c)\n          (string-append\n           (string (char-upcase c))\n        \
    \   (solve (substring s 1)))]\n         [(char-numeric? c)\n          (string-append\n\
    \           (string (char-downcase c))\n           (solve (substring s 1)))]\n\
    \         [else\n          (string-append\n           (string c)\n           (solve\
    \ (substring s 1)))]))))\n", "  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n", "  (if (string-contains-any? s (string->list\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n      (string-join\
    \ (map (lambda (c)\n                          (if (char-alphabetic? c)\n     \
    \                         (char-upcase c)\n                              (char-downcase\
    \ c)))\n                        (string->list s)))\n      (string-reverse s)))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (char-upcase c)\n\
    \                        (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-char? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-empty? s)\n      s\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n", "  (if (string-contains? s #\\a)\n   \
    \   (string-map (lambda (x) (if (char-alphabetic? x)\n                       \
    \           (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n  \
    \  [(char-alphabetic? (first s))\n     (string-append\n      (string-downcase\
    \ (first s))\n      (solve (rest s)))]\n    [(char-numeric? (first s))\n     (string-append\n\
    \      (string (char->integer (first s)))\n      (solve (rest s)))]\n    [else\n\
    \     (string-append\n      (string-upcase (first s))\n      (solve (rest s)))]))\n",
  "  (if (string-contains-letter? s)\n      (reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append (string-reverse\
    \ (string-map (lambda (c)\n                                                  \
    \ (if (char-alphabetic? c)\n                                                 \
    \      (if (char-lower-case? c)\n                                            \
    \               (char-upcase c)\n                                            \
    \               (char-downcase c))\n                                         \
    \              c))\n                                                 s))\n   \
    \                  (solve (string-tail s 1)))))\n", "  (string-reverse (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)))\n",
  "  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref s 0)])\n      \
    \  (string-append\n         (if (char-alphabetic? c)\n             (string-downcase\
    \ (string-upcase (string c)))\n             (string c))\n         (solve (substring\
    \ s 1))))))\n", "  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-letter? s)\n      (string-reverse-case s)\n\
    \      (string-reverse s)))\n", "  (cond\n    [(empty? s) empty]\n    [(char-alphabetic?\
    \ (first s))\n     (string-append (string (char-upcase (first s))) (solve (rest\
    \ s)))]\n    [(char-numeric? (first s))\n     (string-append (string (first s))\
    \ (solve (rest s)))]\n    [else\n     (string-append (string (char-downcase (first\
    \ s))) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-upcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string (char-upcase\
    \ (string-ref s 0)))\n                    (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string (string-ref s 0))\n         \
    \           (solve (substring s 1)))]\n    [else (string-append (string (char-downcase\
    \ (string-ref s 0)))\n                         (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append\n      (string-append\n       (string (char-upcase (string-ref\
    \ s 0)))\n       (solve (substring s 1)))\n      (string (char-downcase (string-ref\
    \ s 0))))]\n    [else\n     (string-append\n      (string (string-ref s 0))\n\
    \      (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-upcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-empty? s)\n    \
    \  s\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string (char-upcase (string-ref s 0)))\n                    (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string\
    \ (char-downcase (string-ref s 0)))\n                    (solve (substring s 1)))]\n\
    \    [else (string-append (string (string-ref s 0))\n                        \
    \ (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n   \
    \   \"\"\n      (let ([c (string-ref s 0)])\n        (string-append (if (char-alphabetic?\
    \ c)\n                           (string-upcase (string c))\n                \
    \           (string-downcase (string c)))\n                       (solve (substring\
    \ s 1))))))\n", "  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string (char-upcase\
    \ (string-ref s 0)))\n                    (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string (char-downcase (string-ref s\
    \ 0)))\n                    (solve (substring s 1)))]\n    [else (string-append\
    \ (string (string-ref s 0))\n                         (solve (substring s 1)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref s\
    \ 0)])\n        (if (char-alphabetic? c)\n            (string-append (string (char-upcase\
    \ c)) (solve (substring s 1)))\n            (string-append (string c) (solve (substring\
    \ s 1)))))))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (cond\n    [(empty? s) empty]\n    [(char-numeric?\
    \ (first s)) (string-append (solve (rest s)) (string (first s)))]\n    [(char-alphabetic?\
    \ (first s)) (string-append (solve (rest s)) (string (char-upcase (first s))))]\n\
    \    [else (string-append (solve (rest s)) (string (char-downcase (first s))))]))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (char-upcase c)\n\
    \                        (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\n      \
    \ (if (char-alphabetic? (string-ref s 0))\n           (if (char-lower-case? (string-ref\
    \ s 0))\n               (string-upcase (string (string-ref s 0)))\n          \
    \     (string-downcase (string (string-ref s 0))))\n           (string (string-ref\
    \ s 0)))\n       (solve (substring s 1)))))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string\
    \ (char-upcase (string-ref s 0)))\n                    (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string (char-downcase\
    \ (string-ref s 0)))\n                    (solve (substring s 1)))]\n    [else\
    \ (string-append (string (string-ref s 0))\n                         (solve (substring\
    \ s 1)))]))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\n \
    \      (if (char-alphabetic? (string-ref s 0))\n           (string-upcase (string-ref\
    \ s 0))\n           (string-downcase (string-ref s 0)))\n       (solve (substring\
    \ s 1)))))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\n       (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (char-upcase c)\n     \
    \      (char-downcase c)))\n       s)\n      (string-reverse s)))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else\n     (string-append\
    \ (string-downcase (first s)) (solve (rest s)))]))\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c)\n                  \
    \  (if (char-alphabetic? c)\n                        (char-upcase c)\n       \
    \                 (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (if (char-alphabetic? (string-ref s 0))\n                        (string-downcase\
    \ (string-upcase (string-ref s 0)))\n                        (string-ref s 0))\n\
    \                      (solve (substring s 1)))))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append (solve (substring s 1))\n                  \
    \   (if (char-alphabetic? (string-ref s 0))\n                         (string-downcase\
    \ (string-upcase (string-ref s 0)))\n                         (string-ref s 0)))))\n",
  "  (if (string-contains-letter? s)\n      (string-reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n\
    \     (string-append\n      (string (char-upcase (first s)))\n      (solve (rest\
    \ s)))]\n    [(char-numeric? (first s))\n     (string-append\n      (string (first\
    \ s))\n      (solve (rest s)))]\n    [else\n     (string-append\n      (string\
    \ (char-downcase (first s)))\n      (solve (rest s)))]))\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      s\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (char-downcase c)\n                                 \
    \ (char-upcase c))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append\n      (string (char-downcase\
    \ (string-ref s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (if\
    \ (string-contains-char? s #\\a)\n      (string-map (lambda (c)\n            \
    \        (if (char-alphabetic? c)\n                        (char-upcase c)\n \
    \                       (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append (solve (substring\
    \ s 1))\n                     (if (char-alphabetic? (string-ref s 0))\n      \
    \                   (if (char-lower-case? (string-ref s 0))\n                \
    \             (string-upcase (string-ref s 0))\n                             (string-downcase\
    \ (string-ref s 0)))\n                         (string-ref s 0)))))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append\n      (string (char-downcase\
    \ (string-ref s 0)))\n      (solve (substring s 1)))]\n    [else (string-append\n\
    \           (string (string-ref s 0))\n           (solve (substring s 1)))]))\n",
  "  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic? (string-ref s\
    \ 0))\n          (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))\n          (string-append (string-downcase (string-ref s 0)) (solve (substring\
    \ s 1))))))\n", "  (if (string-empty? s)\n      s\n      (string-append\n    \
    \   (if (char-alphabetic? (string-ref s 0))\n           (string-upcase (string\
    \ (string-ref s 0)))\n           (string (string-ref s 0)))\n       (solve (substring\
    \ s 1)))))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0)\n                  \
    \  (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0))\n                    (solve (substring s 1)))]))\n", "  (if\
    \ (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-join (map (lambda\
    \ (x)\n                          (if (char-alphabetic? x)\n                  \
    \            (if (char-lower-case? x)\n                                  (char-upcase\
    \ x)\n                                  (char-downcase x))\n                 \
    \             x))\n                        (string->list s)))\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n", "  (if (string-contains-char? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref s\
    \ 0)])\n        (string-append\n         (if (char-alphabetic? c)\n          \
    \   (string-downcase (string-upcase (string c)))\n             (string c))\n \
    \        (solve (substring s 1))))))\n", "  (cond\n    [(empty? s) '()]\n    [(char-alphabetic?\
    \ (car s))\n     (cons (char-upcase (car s)) (solve (cdr s)))]\n    [(char-numeric?\
    \ (car s))\n     (cons (car s) (solve (cdr s)))]\n    [else (cons (char-downcase\
    \ (car s)) (solve (cdr s)))]))\n", "  (if (string-empty? s)\n      s\n      (if\
    \ (char-alphabetic? (string-ref s 0))\n          (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))\n          (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (string-contains-only-digits?\
    \ s)\n      (reverse s)\n      (reverse-case s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (let* ([c (string-ref s 0)]\n             [r (if (char-alphabetic?\
    \ c)\n                    (if (char-lower-case? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c))\n                    c)])\n \
    \       (string-append (string r) (solve (substring s 1))))))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (char-downcase c)\n\
    \                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (x)\n                    (if (char-alphabetic? x)\n                \
    \        (char-upcase x)\n                      (char-downcase x)))\n        \
    \          s)\n      (string-reverse s)))\n", "  (if (string-contains-letter?\
    \ s)\n      (reverse-case s)\n      (reverse s)))\n", "  (if (string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n      (string-join (map (lambda (c)\n            \
    \              (if (char-alphabetic? c)\n                              (if (char-lower-case?\
    \ c)\n                                  (char-upcase c)\n                    \
    \              (char-downcase c))\n                              c))\n       \
    \                 (string->list s)))\n      (string-reverse s)))\n", "  (if (string-contains-char?\
    \ s #\\a)\n      (string-map (\u03BB (c) (if (char-alphabetic? c) (char-downcase\
    \ c) (char-upcase c))) s)\n      (string-reverse s)))\n", "  (if (string-contains-letter?\
    \ s)\n      (reverse-case s)\n      (reverse s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (let ([c (string-ref s 0)])\n        (cond\n         [(char-alphabetic?\
    \ c) (string-append (string (char-upcase c)) (solve (substring s 1)))]\n     \
    \    [(char-numeric? c) (string-append (string c) (solve (substring s 1)))]\n\
    \         [else (string-append (string (char-downcase c)) (solve (substring s\
    \ 1)))]))))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append\n      (string (char-upcase (first s)))\n      (solve\
    \ (rest s)))]\n    [(char-numeric? (first s))\n     (string-append\n      (string\
    \ (first s))\n      (solve (rest s)))]\n    [else\n     (string-append\n     \
    \ (string (char-downcase (first s)))\n      (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else\n     (string-append\
    \ (string-downcase (first s)) (solve (rest s)))]))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n      (string-upcase\
    \ (first s))\n      (solve (rest s)))]\n    [(char-numeric? (first s))\n     (string-append\n\
    \      (first s)\n      (solve (rest s)))]\n    [else\n     (string-append\n \
    \     (string-downcase (first s))\n      (solve (rest s)))]))\n", "  (cond\n \
    \   [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (string (char-upcase (first s)))\n      (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append\n      (string (first s))\n      (solve (rest\
    \ s)))]\n    [else\n     (string-append\n      (string (char-downcase (first s)))\n\
    \      (solve (rest s)))]))\n", "  (if (string-empty? s)\n      \"\"\n      (let\
    \ ([c (string-ref s 0)])\n        (if (char-alphabetic? c)\n            (string-append\
    \ (string (char-downcase c)) (solve (substring s 1)))\n            (string-append\
    \ (string c) (solve (substring s 1)))))))\n", "  (cond\n    [(empty? s) \"\"]\n\
    \    [(char-alphabetic? (string-ref s 0))\n     (string-append (string (char-upcase\
    \ (string-ref s 0)))\n                    (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string (char-downcase (string-ref s\
    \ 0)))\n                    (solve (substring s 1)))]\n    [else (string-append\
    \ (string (string-ref s 0))\n                         (solve (substring s 1)))]))\n",
  "  (if (string-contains-alphabetic? s)\n      (string-reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic? (string-ref\
    \ s 0))\n          (string-append (string-upcase (string-ref s 0))\n         \
    \                (solve (substring s 1)))\n          (string-append (string-downcase\
    \ (string-ref s 0))\n                         (solve (substring s 1))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
