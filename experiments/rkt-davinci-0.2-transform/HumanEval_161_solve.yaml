name: HumanEval_161_solve
language: rkt
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\
  \n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define\
  \ (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n  \
    \                  (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string-append\n       (string-append\n\
    \        (string-append\n         (string-append\n          (string-append\n \
    \          (string-append\n            (string-append\n             (string-append\n\
    \              (string-append\n               (string-append\n               \
    \ (string-append\n                 (string-append\n                  (string-append\n\
    \                   (string-append\n                    (string-append\n     \
    \                (string-append\n                      (string-append\n      \
    \                 (string-append\n                        (string-append\n   \
    \                      (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                             (string-append\n                              (string-append\n\
    \                               (string-append\n                             \
    \   (string-append\n                                 (string-append\n        \
    \                          (string-append\n                                  \
    \ (string-append\n                                    (string-append\n       \
    \                              (string-append\n                              \
    \        (string-append\n                                       (string-append\n\
    \                                        (string-append\n                    \
    \                     (string-append\n                                       \
    \   (string-append\n                                           (string-append\n\
    \                                            (string-append\n                \
    \                             (string-append\n                               \
    \               (string-append\n                                             \
    \  (string-append\n                                                (string-append\n\
    \                                                 (string-append\n           \
    \                                       (string-append\n                     \
    \                              (string-append\n                              \
    \                      (string-append\n                                      \
    \               (string-append\n                                             \
    \         (string-append\n                                                   \
    \    (string-append\n                                                        (string-append\n\
    \                                                         (string-append\n   \
    \                                                       (string-append\n     \
    \                                                      (string-append\n      \
    \                                                      (string-append\n      \
    \                                                       (string-append\n     \
    \                                                         (string-append\n   \
    \                                                            (string-append\n\
    \                                                                (string-append\n\
    \                                                                 (string-append\n\
    \                                                                  (string-append\n\
    \                                                                   (string-append\n\
    \                                                                    (string-append\n\
    \                                                                     (string-append\n\
    \                                                                      (string-append\n",
  "  (if (string-contains-char? s #\\a)\n      (string-map (lambda (c)\n         \
    \           (if (char-alphabetic? c)\n                        (char-upcase c)\n\
    \                        (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-upcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains-ci? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains-ci? s #\\a)\n      (string-map\n       (lambda (c)\n      \
    \   (if (char-alphabetic? c)\n             (char-upcase c)\n           (char-downcase\
    \ c)))\n       s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n \
    \     \"\"\n      (string-append (solve (substring s 1))\n                   \
    \  (if (char-alphabetic? (string-ref s 0))\n                         (if (char-lower-case?\
    \ (string-ref s 0))\n                             (string-upcase (string-ref s\
    \ 0))\n                             (string-downcase (string-ref s 0)))\n    \
    \                     (string-ref s 0)))))\n", "  (if (string-contains-letter?\
    \ s)\n      (reverse-case s)\n      (reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref s 0)])\n      \
    \  (if (char-alphabetic? c)\n            (string-append (string (char-downcase\
    \ c)) (solve (substring s 1)))\n            (string-append (string c) (solve (substring\
    \ s 1)))))))\n", "  (if (string-empty? s)\n      \"\"\n      (string-append (solve\
    \ (substring s 1))\n                     (if (char-alphabetic? (string-ref s 0))\n\
    \                         (if (char-lower-case? (string-ref s 0))\n          \
    \                   (string-upcase (string-ref s 0))\n                       \
    \      (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0)))))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n      (string\
    \ (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-downcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n  \
    \    (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n           (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n      (string-reverse\
    \ s)\n      (string-reverse (map (lambda (c)\n                             (if\
    \ (char-alphabetic? c)\n                                 (if (char-lower-case?\
    \ c)\n                                     (char-upcase c)\n                 \
    \                    (char-downcase c))\n                                 c))\n\
    \                           s))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
