name: HumanEval_137_compare_one
language: pl
prompt: "# Create a function that takes integers, floats, or strings representing\n\
  # real numbers, and returns the larger variable in its given variable type.\n# Return\
  \ None if the values are equal.\n# Note: If a real number is represented as a string,\
  \ the floating point might be . or ,\n# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1,\
  \ \"2,3\")\n# \"2,3\"\n# >>> compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one(\"\
  1\", 1)\n# undef\nsub compare_one {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare_one;\n\
  \        if(eq_deeply($candidate->(1, 2),2)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2.5),2.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
  \ 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
  \ 6),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ \"2,3\"),\"2,3\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5,1\", \"6\"),\"6\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\", \"\
  2\"),\"2\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"1\", 1),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $a if $a eq $b;\n    return $b if ($b eq $a) || ($b eq \"\
    undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n  \
    \  return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a\
    \ if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq\
    \ \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"\
    undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n\
    \    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n  \
    \  return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return\
    \ $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b\
    \ if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if\
    \ ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"\
    undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\"\
    );\n    return $a if (", "    return $a if $a eq $b;\n    return $b if ($b eq\
    \ $a) || ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $a\
    \ if ($b eq \"undef\");\n    return $a if ($a eq $b);\n    return $a if ($b eq\
    \ $a);\n    return $a if ($a eq \"undef\" && $b eq \"undef\");\n    return $a\
    \ if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" && $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" && $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ && $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" && $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" && $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" && $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" && $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a ", "    my $type\
    \ = ref($a);\n    if ($type eq 'HASH') {\n        my $a_keys = keys %$a;\n   \
    \     my $b_keys = keys %$b;\n        if ($a_keys ne $b_keys) {\n            return\
    \ $b_keys;\n        }\n        foreach my $key (@$a_keys) {\n            my $a_val\
    \ = $a->{$key};\n            my $b_val = $b->{$key};\n            if ($a_val ne\
    \ $b_val) {\n                return $b_val;\n            }\n        }\n    }\n\
    \    elsif ($type eq 'ARRAY') {\n        my $a_len = @$a;\n        my $b_len =\
    \ @$b;\n        if ($a_len ne $b_len) {\n            return $b_len;\n        }\n\
    \        for (my $i = 0; $i < $a_len; $i++) {\n            my $a_val = $a->[$i];\n\
    \            my $b_val = $b->[$i];\n            if ($a_val ne $b_val) {\n    \
    \            return $b_val;\n            }\n        }\n    }\n    elsif ($type\
    \ eq 'SCALAR') {\n        my $a_val = $a;\n        my $b_val = $b;\n        if\
    \ ($a_val ne $b_val) {\n            return $b_val;\n        }\n    }\n    elsif\
    \ ($type eq 'CODE') {\n        my $a_val = $a->();\n        my $b_val = $b->();\n\
    \        if ($a_val ne $b_val) {\n            return $b_val;\n        }\n    }\n\
    \    elsif ($type eq 'GLOB') {\n        my $a_val = $a->();\n        my $b_val\
    \ = $b->();\n        if ($a_val ne $b_val) {\n            return $b_val;\n   \
    \     }\n    }\n    elsif ($type eq 'IO::Handle') {\n        my $a_val = $a->();\n\
    \        my $b_val = $b->();\n        if ($a_val ne $b_val) {\n            return\
    \ $b_val;\n        }\n    }\n    elsif ($type eq 'IO::Scalar') {\n        my $a_val\
    \ = $a->();\n        my $b_val = $b->();\n        if ($a_val ne $b_val) {\n  \
    \          return $b_val;\n        }\n    }\n    elsif ($type eq 'IO::File') {\n\
    \        my $a_val = $a->();\n        my $b_val = $b->();\n        if ($a_val\
    \ ne $b_val) {\n            return $b_val;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::Dir') {\n        my $a_val = $a->();\n        ", "    return undef unless\
    \ defined $a && defined $b;\n    return $a if $a eq $b;\n    return $a if $b eq\
    \ $a;\n    return $a if $a =~ /^\\d+$/ && $b =~ /^\\d+$/;\n    return $a if $b\
    \ =~ /^\\d+$/ && $a =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b\
    \ =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/ && $a =~ /^\\d+\\\
    .\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/ && $a =~ /^\\d+$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/\
    \ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~\
    \ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\\
    d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;", "    return $a if $a eq $b;\n  \
    \  return $b if ($b eq $a);\n    return $a if ($a eq \"undef\");\n    return $b\
    \ if ($b eq \"undef\");\n    return $a if ($a eq \"\");\n    return $b if ($b\
    \ eq \"\");\n    return $a if ($a eq \"0\");\n    return $b if ($b eq \"0\");\n\
    \    return $a if ($a eq \"0.0\");\n    return $b if ($b eq \"0.0\");\n    return\
    \ $a if ($a eq \"0.0e0\");\n    return $b if ($b eq \"0.0e0\");\n    return $a\
    \ if ($a eq \"0.0e+00\");\n    return $b if ($b eq \"0.0e+00\");\n    return $a\
    \ if ($a eq \"0e0\");\n    return $b if ($b eq \"0e0\");\n    return $a if ($a\
    \ eq \"0e+00\");\n    return $b if ($b eq \"0e+00\");\n    return $a if ($a eq\
    \ \"0x3ff0000000000000\");\n    return $b if ($b eq \"0x3ff0000000000000\");\n\
    \    return $a if ($a eq \"0x3ff0000000000001\");\n    return $b if ($b eq \"\
    0x3ff0000000000001\");\n    return $a if ($a eq \"0x3ff0000000000002\");\n   \
    \ return $b if ($b eq \"0x3ff0000000000002\");\n    return $a if ($a eq \"0x3ff0000000000003\"\
    );\n    return $b if ($b eq \"0x3ff0000000000003\");\n    return $a if ($a eq\
    \ \"0x3ff0000000000004\");\n    return $b if ($b eq \"0x3ff0000000000004\");\n\
    \    return $a if ($a eq \"0x3ff0000000000005\");\n    return $b if ($b eq \"\
    0x3ff0000000000005\");\n    return $a if ($a eq \"0x3ff0000000000006\");\n   \
    \ return $b if ($b eq \"0x3ff0000000000006\");\n    return $a if ($a eq \"0x3ff0000000000007\"\
    );\n    return $b if ($b eq \"0x3ff0000000000007\");\n    return $a if ($a eq\
    \ \"0x3ff0000000000008\");\n    return $b if ($b eq \"0x3ff0000000000008\");\n\
    \    return $a if ($a eq \"0x3ff0000000000009\");\n    return $", "    return\
    \ undef if ($a eq $b);\n    return $a if ($a =~ /^\\d+$/);\n    return $b if ($b\
    \ =~ /^\\d+$/);\n    return $a if ($a =~ /^\\d+\\.\\d*$/);\n    return $b if ($b\
    \ =~ /^\\d+\\.\\d*$/);\n    return $a if ($a =~ /^\\d+\\.\\d*/);\n    return $b\
    \ if ($b =~ /^\\d+\\.\\d*/);\n    return $a if ($a =~ /^\\d+\\.\\d*/);\n    return\
    \ $b if ($b =~ /^\\d+\\.\\d*/);\n    return $a if ($a =~ /^\\d+\\.\\d*/);\n  \
    \  return $b if ($b =~ /^\\d+\\.\\d*/);\n    return $a if ($a =~ /^\\d+\\.\\d*/);\n\
    \    return $b if ($b =~ /^\\d+\\.\\d*/);\n    return $a if ($a =~ /^\\d+\\.\\\
    d*/);\n    return $b if ($b =~ /^\\d+\\.\\d*/);\n    return $a if ($a =~ /^\\\
    d+\\.\\d*/);\n    return $b if ($b =~ /^\\d+\\.\\d*/);\n    return $a if ($a =~\
    \ /^\\d+\\.\\d*/);\n    return $b if ($b =~ /^\\d+\\.\\d*/);\n    return $a if\
    \ ($a =~ /^\\d+\\.\\d*/);\n    return $b if ($b =~ /^\\d+\\.\\d*/);\n    return\
    \ $a if ($a =~ /^\\d+\\.\\d*/);\n    return $b if ($b =~ /^\\d+\\.\\d*/);\n  \
    \  return $a if ($a =~ /^\\d+\\.\\d*/);\n    return $b if ($b =~ /^\\d+\\.\\d*/);\n\
    \    return $a if ($a =~ /^\\d+\\.\\d*/);\n    return $b if ($b =~ /^\\d+\\.\\\
    d*/);\n    return $a if ($a =~ /^\\d+\\.\\d*/);\n    return $b if ($b =~ /^\\\
    d+\\.\\d*/);\n    return $a if ($a =~ /^\\d+\\.\\d*/);\n    return $b if ($b =~\
    \ /^\\d+\\.\\d*/);\n    return $a if ($a =~ /^\\d+\\.\\d*/);\n    return $b if\
    \ ($b =~ /^\\d+\\.\\d*/);\n    return $a if ($a =~ /^\\d+\\.\\d*/);\n    return\
    \ $b if ($b =~ /^\\d+\\.\\d", "    my $type = ref($a) ? ref($a) : \"\";\n    my\
    \ $type2 = ref($b) ? ref($b) : \"\";\n    if ($type eq $type2) {\n        if ($type\
    \ eq \"SCALAR\") {\n            return $a > $b ? $a : $b;\n        } elsif ($type\
    \ eq \"ARRAY\") {\n            return @$a > @$b ? @$a : @$b;\n        } elsif\
    \ ($type eq \"HASH\") {\n            return %$a > %$b ? %$a : %$b;\n        }\
    \ elsif ($type eq \"CODE\") {\n            return $a->() > $b->() ? $a->() : $b->();\n\
    \        } elsif ($type eq \"GLOB\") {\n            return $a->() > $b->() ? $a->()\
    \ : $b->();\n        } elsif ($type eq \"IO\") {\n            return $a->() >\
    \ $b->() ? $a->() : $b->();\n        } elsif ($type eq \"VSTRING\") {\n      \
    \      return $a->() > $b->() ? $a->() : $b->();\n        } elsif ($type eq \"\
    REGEXP\") {\n            return $a->() > $b->() ? $a->() : $b->();\n        }\
    \ elsif ($type eq \"GLOB\") {\n            return $a->() > $b->() ? $a->() : $b->();\n\
    \        } elsif ($type eq \"IO\") {\n            return $a->() > $b->() ? $a->()\
    \ : $b->();\n        } elsif ($type eq \"VSTRING\") {\n            return $a->()\
    \ > $b->() ? $a->() : $b->();\n        } elsif ($type eq \"REGEXP\") {\n     \
    \       return $a->() > $b->() ? $a->() : $b->();\n        } elsif ($type eq \"\
    GLOB\") {\n            return $a->() > $b->() ? $a->() : $b->();\n        } elsif\
    \ ($type eq \"IO\") {\n            return $a->() > $b->() ? $a->() : $b->();\n\
    \        } elsif ($type eq \"VSTRING\") {\n            return $a->() > $b->()\
    \ ? $a->() : $b->();\n        } elsif ($type eq \"REGEXP\") {\n            return\
    \ $a->() > $b->() ? $a->() : $b->();\n        } elsif ($type eq \"GLOB\") {\n\
    \            return $a->() > $b->", "    if ($a eq $b) {\n        return $a;\n\
    \    }\n    elsif ($a =~ /^\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif ($a =~ /^\\\
    d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+$/) {\n        return\
    \ $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d+$/) {\n        return $b;\n    }\n\
    \    elsif ($b =~ /^\\d+\\.\\d+$/) {\n        return $a;\n    }\n    elsif ($a\
    \ =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif ($b\
    \ =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif ($a\
    \ =~ /^\\d+\\.?\\d*,\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\\
    d+\\.?\\d*,\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\\
    d*,\\d+\\.\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\\
    d*,\\d+\\.\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\\
    d*,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\\
    d*,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\\
    d*,\\d+\\.\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\\
    d*,\\d+\\.\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d+,\\\
    d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d+,\\d+$/) {\n\
    \        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d+,\\d+\\.\\d+$/) {\n\
    \        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+$/) {\n\
    \        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d+,\\d+\\.?\\d*$/) {\n\
    \        return $b;\n    }\n    elsif ($b ", "    my $type = ref($a);\n    if\
    \ ($type eq 'HASH') {\n        if ($a->{type} ne $b->{type}) {\n            return\
    \ $a->{type} eq 'HASH' ? undef : undef;\n        }\n        foreach my $key (keys\
    \ %{$a}) {\n            my $val = $a->{$key};\n            if ($val ne $b->{$key})\
    \ {\n                return $a->{type} eq 'HASH' ? undef : undef;\n          \
    \  }\n        }\n        return undef;\n    }\n    if ($type eq 'ARRAY') {\n \
    \       if (@$a != @$b) {\n            return $a->{type} eq 'ARRAY' ? undef :\
    \ undef;\n        }\n        foreach my $i (0 .. @$a - 1) {\n            my $val\
    \ = $a->[$i];\n            my $val_b = $b->[$i];\n            if ($val ne $b->[$i])\
    \ {\n                return $a->{type} eq 'ARRAY' ? undef : undef;\n         \
    \   }\n        }\n        return undef;\n    }\n    if ($type eq 'SCALAR') {\n\
    \        if ($a ne $b) {\n            return $a->{type} eq 'SCALAR' ? undef :\
    \ undef;\n        }\n        return undef;\n    }\n    if ($type eq 'CODE') {\n\
    \        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'GLOB') {\n\
    \        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'IO::Handle')\
    \ {\n        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'IO::File')\
    \ {\n        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'IO::Seekable')\
    \ {\n        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'IO::Dir')\
    \ {\n        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'IO::Socket::INET')\
    \ {\n        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'IO::Socket::UNIX')\
    \ {\n        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'IO::Socket::SSL')\
    \ {\n        return $a->($b) ? undef : undef;\n    }\n    if ($type eq 'IO::Socket::IP')\
    \ {\n        return $a->($b) ? undef : un", "    return $a if $a eq $b;\n    return\
    \ $b if ($b eq $a) || ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n\
    \    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\") || ($b eq \"undef\") || ($a eq $b);\n    return $a if ($a eq \"\
    undef\") || ($b eq \"undef\") || ($a eq $b);\n    return $a if ($a eq \"undef\"\
    ) || ($b eq \"undef\") || ($a eq $b);\n    return $a if ($a eq \"undef\") || ($b\
    \ eq \"undef\") || ($a eq $b);\n    return $a if ($a eq \"undef\") || ($b eq \"\
    undef\") || ($a eq $b);\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    ) || ($a eq $b);\n    return $a if ($a eq \"undef\") || ($b eq \"undef\") || ($a\
    \ eq $b);\n    return $a if ($a eq \"undef\") || ($b eq \"undef\") || ($a eq $b);\n\
    \    return $a if ($a eq \"undef\") || ($b eq \"undef\") || ($a eq $b);\n    return\
    \ $a if ($a eq \"undef\") || ($b eq \"undef\") || ($a eq $b);\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\") || ($a eq $b);\n    return $a if ($a\
    \ eq \"undef\") || ($b eq \"undef\") || ($a eq $b);\n    return $a if ($a eq \"\
    undef\") || ($b eq \"undef\") || ($a eq $b);\n    return $a if ($a eq \"undef\"\
    ) || ($b eq \"undef\") || ($a eq $b);\n    return $a if ($a eq \"undef\") || ($b\
    \ eq \"undef\") || ($a eq $b);\n    return $a if ($a eq \"undef\") || ($b eq \"\
    undef\") || ($a eq $b);\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    ) || ($a eq $b);\n    return $a if ($a eq \"undef", "    if ($a eq $b) {\n   \
    \     return $a;\n    }\n    elsif ($a =~ /^\\d+$/) {\n        return $b;\n  \
    \  }\n    elsif ($b =~ /^\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~\
    \ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\\
    d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*,\\d+$/) {\n\
    \        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*,\\d+$/) {\n       \
    \ return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*,\\d+\\.\\d*$/) {\n       \
    \ return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*,\\d+\\.\\d*$/) {\n       \
    \ return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/) {\n  \
    \      return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/) {\n\
    \        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*,\\d+\\.\\\
    d*,\\d+\\.\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*,\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/) {\n        return $a;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/) {\n        return\
    \ $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\\
    d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/) {\n        return $a;\n\
    \    }\n    elsif ($a =~ /^\\d+\\.\\d*,", "    my $type = ref($a);\n    if ($type\
    \ eq 'HASH') {\n        foreach my $key (keys %{$a}) {\n            if ($a->{$key}\
    \ ne $b->{$key}) {\n                return $a->{$key};\n            }\n      \
    \  }\n    } elsif ($type eq 'ARRAY') {\n        foreach my $i (0 .. @{$a} - 1)\
    \ {\n            if ($a->[$i] ne $b->[$i]) {\n                return $a->[$i];\n\
    \            }\n        }\n    } elsif ($type eq 'SCALAR') {\n        if ($a ne\
    \ $b) {\n            return $a;\n        }\n    } elsif ($type eq 'CODE') {\n\
    \        if (&$a ne &$b) {\n            return $a;\n        }\n    } else {\n\
    \        return $a > $b ? $a : $b;\n    }\n    return;\n}", "    my $type = ref($a);\n\
    \    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return $a > $b\
    \ ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Socket\") {\n        return\
    \ compare_one($a->fileno(), $b->fileno());\n    }\n    elsif ($type eq \"IO::Poll\"\
    ) {\n        return compare_one($a->fileno(), $b->fileno());\n    }\n    elsif\
    \ ($type eq \"IO::Select\") {\n        return compare_one($a->fileno(), $b->fileno());\n\
    \    }\n    elsif ($type eq \"IO::Seekable\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Dir\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Socket::INET\") {\n       \
    \ return compare_one($a->{peer}, $b->{peer});\n    }\n    elsif ($type eq \"IO::Socket::UNIX\"\
    ) {\n        return compare_one($a->{peer}, $b->{peer});\n    }\n    elsif ($type\
    \ eq \"IO::Socket::SSL\") {\n        return compare_one($a->{peer}, $b->{peer});\n\
    \    }\n    elsif ($type eq \"IO::Socket::SSL::Client\") {\n        return compare_one($a->{peer},\
    \ $b->{peer});\n    }\n    elsif ($type eq \"IO::Socket::SSL::Peer\") {\n    \
    \    return compare_one($a->{peer}, $b->{peer});\n    }\n    elsif ($type eq \"\
    IO::Socket::IP\") {\n        return compare_one($a->{peer}, $b->{peer});\n   \
    \ }\n    elsif ($", "    my $type = ref($a);\n    my $type2 = ref($b);\n    if\
    \ ($type eq $type2) {\n        if ($type eq \"HASH\") {\n            foreach my\
    \ $key (keys %{$a}) {\n                if ($a->{$key} ne $b->{$key}) {\n     \
    \               return $a->{$key};\n                }\n            }\n       \
    \ } elsif ($type eq \"ARRAY\") {\n            foreach my $i (0 .. @{$a} - 1) {\n\
    \                if ($a->[$i] ne $b->[$i]) {\n                    return $a->[$i];\n\
    \                }\n            }\n        } elsif ($type eq \"SCALAR\") {\n \
    \           return $a > $b ? $a : $b;\n        } elsif ($type eq \"CODE\") {\n\
    \            return $a->($b) if ($a->($b));\n        } else {\n            return\
    \ $a > $b ? $a : $b;\n        }\n    } else {\n        return $a > $b ? $a : $b;\n\
    \    }\n}", "    return undef unless defined $a && defined $b;\n    return $a\
    \ if $a eq $b;\n    return $a if $a < $b;\n    return $b;\n}", "    if ($a eq\
    \ $b) {\n        return $a;\n    }\n    if ($a =~ /^\\d+$/) {\n        return\
    \ $b;\n    }\n    if ($b =~ /^\\d+$/) {\n        return $a;\n    }\n    if ($a\
    \ =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n    if ($b =~ /^\\d+\\.\\\
    d*$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.\\d*\\,\\d*$/) {\n\
    \        return $b;\n    }\n    if ($b =~ /^\\d+\\.\\d*\\,\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($a =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*$/) {\n        return $b;\n\
    \    }\n    if ($b =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*$/) {\n        return $a;\n \
    \   }\n    if ($a =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $b;\n\
    \    }\n    if ($b =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($a =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n \
    \       return $b;\n    }\n    if ($b =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\\
    ,\\d*$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.\\d*\\,\\d*\\,\\\
    d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $b;\n    }\n    if ($b =~ /^\\d+\\\
    .\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $a;\n    }\n   \
    \ if ($a =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n   \
    \     return $b;\n    }\n    if ($b =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\\
    d*\\,\\d*\\,\\d*$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.\\d*\\\
    ,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $b;\n   \
    \ }\n    if ($b =~ /^\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\\
    d*\\,\\d*$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.", "    return\
    \ $a if $a eq $b;\n    return $b if ($b eq $a) || ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a\
    \ if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq\
    \ \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"\
    undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n\
    \    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n  \
    \  return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return\
    \ $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b\
    \ if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if\
    \ ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"\
    undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n  \
    \  return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a\
    \ if (", "    if ($a eq $b) {\n        return $a;\n    }\n    elsif ($a =~ /^\\\
    d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*$/)\
    \ {\n        return $b;\n    }\n    elsif ($a =~ /^\\d+$/) {\n        return $b;\n\
    \    }\n    elsif ($b =~ /^\\d+$/) {\n        return $a;\n    }\n    elsif ($a\
    \ =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif ($b\
    \ =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif ($a\
    \ =~ /^\\d+\\.?\\d*,\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\\
    d+\\.?\\d*,\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\\
    d*,?\\d*$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,?\\\
    d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,?\\d*\\.?\\\
    d*$/) {\n        return $a;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,?\\d*\\.?\\\
    d*$/) {\n        return $b;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,?\\d*\\.?\\\
    d*,?\\d*$/) {\n        return $a;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,?\\\
    d*\\.?\\d*,?\\d*$/) {\n        return $b;\n    }\n    elsif ($a =~ /^\\d+\\.?\\\
    d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/) {\n        return $a;\n    }\n    elsif ($b\
    \ =~ /^\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/) {\n        return $b;\n   \
    \ }\n    elsif ($a =~ /^\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*\\.?\\d*$/) {\n\
    \        return $a;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\\
    d*\\.?\\d*\\.?\\d*$/) {\n        return $b;\n    }\n    elsif ($", "    my $type\
    \ = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Handle\") {\n        return\
    \ compare_one($a->fileno(), $b->fileno());\n    }\n    elsif ($type eq \"IO::File\"\
    ) {\n        return compare_one($a->fileno(), $b->fileno());\n    }\n    elsif\
    \ ($type eq \"IO::Seekable\") {\n        return compare_one($a->seekable(), $b->seekable());\n\
    \    }\n    elsif ($type eq \"IO::Scalar\") {\n        return compare_one($a->seekable(),\
    \ $b->seekable());\n    }\n    elsif ($type eq \"IO::Handle\") {\n        return\
    \ compare_one($a->seekable(), $b->seekable());\n    }\n    elsif ($type eq \"\
    IO::File\") {\n        return compare_one($a->seekable(), $b->seekable());\n \
    \   }\n    elsif ($type eq \"IO::Pipe\") {\n        return compare_one($a->pipe,\
    \ $b->pipe);\n    }\n    elsif ($type eq \"IO::Socket\") {\n        return compare_one($a->socket,\
    \ $b->socket);\n    }\n    elsif ($type eq \"IO::Poll\") {\n        return compare_one($a->poll_handle,\
    \ $b->poll_handle);\n    }\n    elsif ($type eq \"IO::Select\") {\n        return\
    \ compare_one($a->select_handle, $b->select_handle);\n    }\n    elsif ($type\
    \ eq \"IO::Poll\") {\n        return compare_one($a->poll_handle, $b->poll_handle);\n\
    \    }\n    elsif ($type eq \"IO::Select\") {\n        return compare_one($a->select_handle,\
    \ $b->select_handle);\n    }\n    elsif ($type eq \"IO::Handle\") {\n        return\
    \ compare_one($a", "    my $type = ref($a);\n    my $type2 = ref($b);\n    if\
    \ ($type eq $type2) {\n        if ($type eq \"HASH\") {\n            foreach my\
    \ $key (keys %$a) {\n                if ($a->{$key} ne $b->{$key}) {\n       \
    \             return $a->{$key};\n                }\n            }\n        }\n\
    \        elsif ($type eq \"ARRAY\") {\n            foreach my $i (0 .. @$a-1){\n\
    \                if ($a[$i] ne $b[$i]) {\n                    return $a[$i];\n\
    \                }\n            }\n        }\n        elsif ($type eq \"SCALAR\"\
    ) {\n            if ($a ne $b) {\n                return $a;\n            }\n\
    \        }\n        elsif ($type eq \"CODE\") {\n            my $code = $a;\n\
    \            my $code2 = $b;\n            while (1) {\n                last if\
    \ $code->() eq $code2->();\n                $code = $code->();\n             \
    \   $code2 = $code2->();\n            }\n        }\n    }\n    return;\n}", " \
    \   return $a if $a eq $b;\n    return $b if ($b eq $a);\n    return $a if ($a\
    \ eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq\
    \ \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"\
    undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" ||\
    \ $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef", "    if ($a eq $b)\
    \ {\n        return $a;\n    }\n    if ($a =~ /^-?\\d+$/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^-?\\d+$/) {\n        return $b;\n    }\n    if ($a =~\
    \ /^-?\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\\
    d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*,?\\d*$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*,?\\d*$/) {\n      \
    \  return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*,?\\d*,?\\d*$/) {\n      \
    \  return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*,?\\d*,?\\d*$/) {\n      \
    \  return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*,?\\d*,?\\d*,?\\d*$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*,?\\d*,?\\d*,?\\d*$/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*,?\\d*,?\\d*,?\\\
    d*,?\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*,?\\d*,?\\\
    d*,?\\d*,?\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*,?\\\
    d*,?\\d*,?\\d*,?\\d*,?\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\\
    d+\\.?\\d*,?\\d*,?\\d*,?\\d*,?\\d*,?\\d*$/) {\n        return $b;\n    }\n   \
    \ if ($a =~ /^-?\\d+\\.?\\d*,?\\d*,?\\d*,?\\d*,?\\d*,?\\d*,?\\d*$/) {\n      \
    \  return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*,?\\d*,?\\d*,?\\d*,?\\d*,?\\\
    d*,?\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*,?\\d*,?\\\
    d*,?\\d*,?\\d*,?\\d*,?\\d*,?\\d*$/) {\n        return $a;\n    }\n    if (", " \
    \   my $type = ref($a);\n    if ($type eq 'SCALAR') {\n        if ($a eq $b) {\n\
    \            return $a;\n        }\n    }\n    elsif ($type eq 'ARRAY') {\n  \
    \      if (@$a eq @$b) {\n            return $a->[0];\n        }\n    }\n    elsif\
    \ ($type eq 'HASH') {\n        if (keys %$a eq keys %$b) {\n            return\
    \ $a->[0];\n        }\n    }\n    elsif ($type eq 'CODE') {\n        if (&$a eq\
    \ &$b) {\n            return $a->[0];\n        }\n    }\n    elsif ($type eq 'GLOB')\
    \ {\n        if ($a eq $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Handle') {\n        if ($a eq $b) {\n            return $a;\n\
    \        }\n    }\n    elsif ($type eq 'overload::') {\n        if ($a->isa('overload::object'))\
    \ {\n            return $a->isa('overload::object') ? $a->name : $a->isa('overload::')\
    \ ? $a->name : undef;\n        }\n    }\n    elsif ($type eq 'IO::File') {\n \
    \       if ($a eq $b) {\n            return $a;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::Dir') {\n        if ($a eq $b) {\n            return $a;\n        }\n\
    \    }\n    elsif ($type eq 'IO::Socket') {\n        if ($a eq $b) {\n       \
    \     return $a;\n        }\n    }\n    elsif ($type eq 'IO::Socket::INET') {\n\
    \        if ($a eq $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Socket::UNIX') {\n        if ($a eq $b) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'IO::Handle') {\n        if ($a eq\
    \ $b) {\n            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Seekable')\
    \ {\n        if ($a eq $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Select') {\n        if ($a eq $b) {\n            return $a;\n\
    \        }\n    }\n    elsif ($type eq 'IO::Socket::SSL') {\n        if ($a eq\
    \ $b) {\n            return $a;\n        }\n    }\n    elsif ", "    my $type\
    \ = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n        foreach\
    \ my $key (keys %{$a}) {\n            my $val = $a->{$key};\n            my $val2\
    \ = $b->{$key};\n            my $retval = compare_one($val, $val2);\n        \
    \    if ($retval eq undef) {\n                return undef;\n            }\n \
    \       }\n        return undef;\n    }\n    elsif ($type eq \"ARRAY\") {\n  \
    \      foreach my $val (@{$a}) {\n            my $retval = compare_one($val, $b);\n\
    \            if ($retval eq undef) {\n                return undef;\n        \
    \    }\n        }\n        return undef;\n    }\n    elsif ($type eq \"SCALAR\"\
    ) {\n        my $val = $a;\n        my $val2 = $b;\n        my $retval = compare_one($val,\
    \ $val2);\n        if ($retval eq undef) {\n            return undef;\n      \
    \  }\n        return $retval;\n    }\n    elsif ($type eq \"IO::Handle\") {\n\
    \        my $val = $a;\n        my $val2 = $b;\n        my $retval = compare_one($val,\
    \ $val2);\n        if ($retval eq undef) {\n            return undef;\n      \
    \  }\n        return $retval;\n    }\n    elsif ($type eq \"overload\") {\n  \
    \      my $val = $a;\n        my $val2 = $b;\n        my $retval = compare_one($val,\
    \ $val2);\n        if ($retval eq undef) {\n            return undef;\n      \
    \  }\n        return $retval;\n    }\n    elsif ($type eq \"CODE\") {\n      \
    \  my $val = $a;\n        my $val2 = $b;\n        my $retval = compare_one($val,\
    \ $val2);\n        if ($retval eq undef) {\n            return undef;\n      \
    \  }\n        return $retval;\n    }\n    elsif ($type eq \"GLOB\") {\n      \
    \  my $val = $a;\n        my $val2 = $b;\n        my $retval = compare_one($val,\
    \ $val2);\n        if ($retval eq undef) {\n            return undef;\n      \
    \  }\n        return $retval;\n    }\n    elsif ($type eq \"UNIVERSAL\") {\n \
    \       my $val = $a;\n        my $val2 = $b;\n        my $ret", "    my $type\
    \ = ref($a);\n    if ($type eq 'HASH') {\n        foreach my $key (keys %{$a})\
    \ {\n            if ($b eq $a->{$key}) {\n                return $key;\n     \
    \       }\n        }\n    } elsif ($type eq 'ARRAY') {\n        foreach my $key\
    \ (@{$a}) {\n            if ($b eq $key) {\n                return $key;\n   \
    \         }\n        }\n    } elsif ($type eq 'SCALAR') {\n        if ($b eq $a)\
    \ {\n            return $a;\n        }\n    } elsif ($type eq 'CODE') {\n    \
    \    if (&$b eq &$a) {\n            return $a;\n        }\n    } elsif ($type\
    \ eq 'GLOB') {\n        if (&$b eq &$a) {\n            return $a;\n        }\n\
    \    } elsif ($type eq 'IO::Handle') {\n        if ($b eq $a) {\n            return\
    \ $a;\n        }\n    } elsif ($type eq 'overload::') {\n        my $method =\
    \ &$b;\n        if ($method eq '&') {\n            my $method = &$a;\n       \
    \     if ($method eq '&') {\n                return $a;\n            }\n     \
    \   }\n    } elsif ($type eq 'UNIVERSAL') {\n        if ($b eq $a) {\n       \
    \     return $a;\n        }\n    }\n    return;\n}", "    my $type = ref($a);\n\
    \    if ($type eq 'SCALAR') {\n        if ($a eq $b) {\n            return $a;\n\
    \        }\n    }\n    elsif ($type eq 'ARRAY') {\n        if (@$a eq @$b) {\n\
    \            return $a;\n        }\n    }\n    elsif ($type eq 'HASH') {\n   \
    \     if (keys %$a eq keys %$b) {\n            return $a;\n        }\n    }\n\
    \    elsif ($type eq 'CODE') {\n        if (&$a eq &$b) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'IO::Handle') {\n        if ($a->handle\
    \ eq $b->handle) {\n            return $a;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::File') {\n        if ($a->handle eq $b->handle) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'IO::Scalar') {\n        if ($a->value\
    \ eq $b->value) {\n            return $a;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::Scalar::INLINE') {\n        if ($a->value eq $b->value) {\n        \
    \    return $a;\n        }\n    }\n    elsif ($type eq 'IO::Scalar::Util') {\n\
    \        if ($a->value eq $b->value) {\n            return $a;\n        }\n  \
    \  }\n    elsif ($type eq 'IO::Scalar::INLINE_INHERIT') {\n        if ($a->value\
    \ eq $b->value) {\n            return $a;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::Scalar::Util::INLINE') {\n        if ($a->value eq $b->value) {\n  \
    \          return $a;\n        }\n    }\n    elsif ($type eq 'IO::Scalar::INLINE_INHERIT_INHERIT')\
    \ {\n        if ($a->value eq $b->value) {\n            return $a;\n        }\n\
    \    }\n    elsif ($type eq 'IO::Scalar::Util::INLINE_INHERIT') {\n        if\
    \ ($a->value eq $b->value) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Scalar::INLINE_INHERIT_INHERIT_INHERIT') {\n        if ($a->value\
    \ eq $b->value) {\n            return $a;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::Scalar::Util::INLINE_INHERIT_INHERIT_INHERIT", "    my $type = ref($a)\
    \ ? ref($a) : \"\";\n    if ($type eq ref($b)) {\n        if ($type eq \"ARRAY\"\
    ) {\n            return $a > $b ? $a : $b;\n        }\n        if ($type eq \"\
    HASH\") {\n            return $a > $b ? $a : $b;\n        }\n        if ($type\
    \ eq \"CODE\") {\n            return $a > $b ? $a : $b;\n        }\n        if\
    \ ($type eq \"SCALAR\") {\n            return $a > $b ? $a : $b;\n        }\n\
    \        if ($type eq \"IO::Handle\") {\n            return $a > $b ? $a : $b;\n\
    \        }\n        if ($type eq \"overload\") {\n            return $a > $b ?\
    \ $a : $b;\n        }\n    }\n    return $a > $b ? $a : $b;\n}", "    my $type\
    \ = ref($a) ? ref($a) : \"\";\n    my $type2 = ref($b) ? ref($b) : \"\";\n   \
    \ if ($type eq $type2) {\n        if ($type eq \"ARRAY\") {\n            return\
    \ $a > $b ? $a : $b;\n        } elsif ($type eq \"HASH\") {\n            return\
    \ $a > $b ? $b : $a;\n        } elsif ($type eq \"SCALAR\") {\n            return\
    \ $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Scalar\") {\n          \
    \  return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Handle\") {\n  \
    \          return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::File\")\
    \ {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Socket\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Select\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Poll\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Dir\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Seekable\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Seekable::Fcntl\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Socket::INET\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Socket::UNIX\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Socket::SSL\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Socket::SSL::Client\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Socket::SSL::Server\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Socket::IP\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Socket",
  "    my $type = ref($a) ? ref($a) : \"\";\n    my $type2 = ref($b) ? ref($b) : \"\
    \";\n    if ($type eq $type2) {\n        if ($type eq \"ARRAY\") {\n         \
    \   return @$a > @$b ? 1 : 0;\n        } elsif ($type eq \"HASH\") {\n       \
    \     return %$a > %$b ? 1 : 0;\n        } elsif ($type eq \"CODE\") {\n     \
    \       return &$a > &$b ? 1 : 0;\n        } elsif ($type eq \"SCALAR\") {\n \
    \           return $$a > $$b ? 1 : 0;\n        } elsif ($type eq \"IO\") {\n \
    \           return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Handle\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Scalar\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Scalar::INET\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Socket\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Socket::INET\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Uncompress::AnyInflate\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Uncompress::AnyUncompress\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Compress::Base\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Uncompress::AnyUncompress\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Compress::Base::Common\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Uncompress::AnyUncompress\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Compress::Zlib\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Uncompress::AnyUncompress\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Compress::Gzip\"\
    ) {\n            return $a > $b ? 1 : 0;\n        } elsif ($type eq \"IO::Uncompress::AnyUncompress\"\
    ) {", "    return $a if $a eq $b;\n    return $b if ($b eq $a);\n    return $a\
    \ if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($b eq \"undef\" ||\
    \ $a eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a\
    \ eq $b);\n    return $a if ($b eq \"undef\" || $a eq \"undef\" || $b eq $a);\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $", "  \
    \  my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n\
    \        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"ARRAY\") {\n\
    \        return compare_one($a->[0], $b->[0]) ? $a->[0] : $b->[0];\n    }\n  \
    \  elsif ($type eq \"HASH\") {\n        return compare_one($a->{val}, $b->{val})\
    \ ? $a->{val} : $b->{val};\n    }\n    elsif ($type eq \"CODE\") {\n        return\
    \ compare_one($a->($a->[0]), $b->($b->[0])) ? $a->($a->[0]) : $b->($b->[0]);\n\
    \    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a->(),\
    \ $b->()) ? $a->() : $b->();\n    }\n    elsif ($type eq \"IO\") {\n        return\
    \ compare_one($a->($a->[0]), $b->($b->[0])) ? $a->($a->[0]) : $b->($b->[0]);\n\
    \    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a->[0]),\
    \ $b->($b->[0])) ? $a->($a->[0]) : $b->($b->[0]);\n    }\n    elsif ($type eq\
    \ \"UNDEF\") {\n        return undef;\n    }\n    elsif ($type eq \"CODE\") {\n\
    \        return compare_one($a->($a->[0]), $b->($b->[0])) ? $a->($a->[0]) : $b->($b->[0]);\n\
    \    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]) ? $a->[0] : $b->[0];\n    }\n    elsif ($type eq \"HASH\") {\n    \
    \    return compare_one($a->{val}, $b->{val}) ? $a->{val} : $b->{val};\n    }\n\
    \    elsif ($type eq \"SCALAR\") {\n        return compare_one($a->(), $b->())\
    \ ? $a->() : $b->();\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a->[0]),\
    \ $b->($b->[0])) ? $a->($a->[0]) : $b->($b->[0]);\n    }\n    elsif ($type eq\
    \ \"GLOB\") {\n        return ", "    return $a if $a eq $b;\n    return $b if\
    \ ($b eq $a) || ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return\
    \ $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b\
    \ if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if\
    \ ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"\
    undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n  \
    \  return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a\
    \ if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq\
    \ \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"\
    undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n\
    \    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n  \
    \  return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return\
    \ $b if ($b eq \"undef\");\n    return $a if (", "    return $a if $a eq $b;\n\
    \    return $b if ($b eq $a) || ($b eq \"undef\");\n    return $a if ($a eq \"\
    undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($a eq $b);\n\
    \    return $a if ($b eq $a);\n    return $a if ($a eq \"undef\" && $b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a ", "  \
    \  my $type = ref($a);\n    if ($type eq 'SCALAR') {\n        return $a > $b ?\
    \ $a : $b;\n    } elsif ($type eq 'ARRAY') {\n        foreach my $elem (@$a) {\n\
    \            my $cmp = compare_one($elem, $b) if (ref($elem) eq 'SCALAR');\n \
    \           return $cmp if $cmp;\n        }\n        return 0;\n    } elsif ($type\
    \ eq 'HASH') {\n        foreach my $key (keys %$a) {\n            my $cmp = compare_one($a->{$key},\
    \ $b->{$key}) if (ref($a->{$key}) eq 'SCALAR');\n            return $cmp if $cmp;\n\
    \        }\n        return 0;\n    } elsif ($type eq 'CODE') {\n        return\
    \ $a->($b) if ($a->($b));\n        return 0;\n    } elsif ($type eq 'GLOB') {\n\
    \        return $a->($b) if ($a->($b));\n        return 0;\n    } elsif ($type\
    \ eq 'IO::Handle') {\n        return $a->($b) if ($a->($b));\n        return 0;\n\
    \    } elsif ($type eq 'IO::Scalar') {\n        return $a->($b) if ($a->($b));\n\
    \        return 0;\n    } elsif ($type eq 'IO::Scalar::INLINE') {\n        return\
    \ $a->($b) if ($a->($b));\n        return 0;\n    } elsif ($type eq 'IO::Scalar::Util')\
    \ {\n        return $a->($b) if ($a->($b));\n        return 0;\n    } elsif ($type\
    \ eq 'IO::Scalar::Concise') {\n        return $a->($b) if ($a->($b));\n      \
    \  return 0;\n    } elsif ($type eq 'IO::Scalar::Util::INLINE') {\n        return\
    \ $a->($b) if ($a->($b));\n        return 0;\n    } elsif ($type eq 'IO::Scalar::Util::Concise')\
    \ {\n        return $a->($b) if ($a->($b));\n        return 0;\n    } elsif ($type\
    \ eq 'IO::Scalar::Util::Any') {\n        return $a->($b) if ($a->($b));\n    \
    \    return 0;\n    } elsif ($type eq 'IO::Scalar::Util::Any::INLINE') {\n   \
    \     return $a->($b) if ($a->($b));", "    return $a if $a eq $b;\n    return\
    \ $a if $b eq $a;\n    return $a if $a =~ /^\\d+$/;\n    return $a if $b =~ /^\\\
    d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\\
    .\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return ", "    return\
    \ $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a =~ /^\\d+$/;\n\
    \    return $a if $b =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n \
    \   return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\\
    d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d*$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\\
    d+,\\d*$/;\n    return $a if $b =~ /^\\d+,\\d*$/;\n    return $a if $a =~ /^\\\
    d+,\\d*/;\n    return $a if $b =~ /^\\d+,\\d*/;\n    return $a if $a =~ /^\\d+,\\\
    d*\\.\\d*$/;\n    return $a if $b =~ /^\\d+,\\d*\\.\\d*$/;\n    return $a if $a\
    \ =~ /^\\d+,\\d*\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d*\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+,\\d*,\\d*$/;\n    return $a if $b =~ /^\\d+,\\d*,\\d*$/;\n\
    \    return $a if $a =~ /^\\d+,\\d*,\\d*/;\n    return $a if $b =~ /^\\d+,\\d*,\\\
    d*/;\n    return $a if $a =~ /^\\d+,\\d*\\.\\d*,\\d*$/;\n    return $a if $b =~\
    \ /^\\d+,\\d*\\.\\d*,\\d*$/;\n    return $a if $a =~ /^\\d+,\\d*\\.\\d*/;\n  \
    \  return $a if $b =~ /^\\d+,\\d*\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d*,\\\
    d*\\.\\d*$/;\n    return $a if $b =~ /^\\d+,\\d*,\\d*\\.\\d*$/;\n    return $a\
    \ if $a =~ /^\\d+,\\d*,\\d*\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d*,\\d*\\\
    .\\d*/", "    my $type = ref($a) eq 'SCALAR' ? ref($a) : ref($a);\n    my $type2\
    \ = ref($b) eq 'SCALAR' ? ref($b) : ref($b);\n    if ($type eq $type2) {\n   \
    \     return $a > $b ? $a : $b;\n    }\n    elsif ($type eq 'HASH') {\n      \
    \  return compare_one($a->{val}, $b->{val});\n    }\n    elsif ($type eq 'ARRAY')\
    \ {\n        return compare_one($a->[0], $b->[0]);\n    }\n    elsif ($type eq\
    \ 'CODE') {\n        return compare_one($a->(), $b->());\n    }\n    elsif ($type\
    \ eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($type2\
    \ eq 'HASH') {\n        return compare_one($a, $b->{val});\n    }\n    elsif ($type2\
    \ eq 'ARRAY') {\n        return compare_one($a->[0], $b->[0]);\n    }\n    elsif\
    \ ($type2 eq 'CODE') {\n        return compare_one($a->(), $b->());\n    }\n \
    \   elsif ($type2 eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    }\n \
    \   elsif ($type eq 'HASH' && $type2 eq 'HASH') {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq 'ARRAY' && $type2 eq 'ARRAY') {\n  \
    \      return compare_one($a->[0], $b->[0]);\n    }\n    elsif ($type eq 'CODE'\
    \ && $type2 eq 'CODE') {\n        return compare_one($a->(), $b->());\n    }\n\
    \    elsif ($type eq 'SCALAR' && $type2 eq 'SCALAR') {\n        return $a > $b\
    \ ? $a : $b;\n    }\n    elsif ($type eq 'HASH' && $type2 eq 'HASH') {\n     \
    \   return compare_one($a, $b->{val});\n    }\n    elsif ($type eq 'ARRAY' &&\
    \ $type2 eq 'ARRAY') {\n        return compare_one($a->[0], $b->[0]);\n    }\n\
    \    elsif ($type eq 'CODE' && $type2 eq 'CODE') {\n        return compare_one($a->(),\
    \ $b->());\n    }\n    elsif ($type eq 'SCALAR' && $type2 eq 'SCALAR') {\n   \
    \     return ", "    return $a if $a eq $b;\n    return $b if ($b =~ /^-?\\d+$/);\n\
    \    return $a if ($a =~ /^-?\\d+$/);\n    return $a if ($b =~ /^-?\\d+\\.\\d*$/);\n\
    \    return $b if ($b =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($a =~ /^-?\\d+\\\
    .\\d*$/);\n    return $a if ($b =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($a =~\
    \ /^-?\\d+\\.\\d*$/);\n    return $a if ($b =~ /^-?\\d+\\.\\d*$/);\n    return\
    \ $a if ($a =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($b =~ /^-?\\d+\\.\\d*$/);\n\
    \    return $a if ($a =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($b =~ /^-?\\d+\\\
    .\\d*$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($b =~\
    \ /^-?\\d+\\.\\d*$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d*$/);\n    return\
    \ $a if ($b =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d*$/);\n\
    \    return $a if ($b =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($a =~ /^-?\\d+\\\
    .\\d*$/);\n    return $a if ($b =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($a =~\
    \ /^-?\\d+\\.\\d*$/);\n    return $a if ($b =~ /^-?\\d+\\.\\d*$/);\n    return\
    \ $a if ($a =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($b =~ /^-?\\d+\\.\\d*$/);\n\
    \    return $a if ($a =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($b =~ /^-?\\d+\\\
    .\\d*$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d*$/);\n    return $a if ($b =~\
    \ /^-?\\d+\\.\\d*$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d*$/);\n    return\
    \ $a if ($b =~ /^-?\\d+\\.", "    my $type = ref($a) ? ref($a) : \"\";\n    my\
    \ $type2 = ref($b) ? ref($b) : \"\";\n    if ($type eq $type2) {\n        if ($type\
    \ eq \"ARRAY\") {\n            foreach my $element (@$a) {\n                my\
    \ $element2 = $element;\n                my $element2type = ref($element2);\n\
    \                if ($element2type eq \"ARRAY\") {\n                    foreach\
    \ my $element3 (@$b) {\n                        my $element3type = ref($element3);\n\
    \                        if ($element3type eq \"ARRAY\") {\n                 \
    \           if (compare_one($element, $element2) && compare_one($element3, $element2))\
    \ {\n                                return $element;\n                      \
    \      }\n                        } else {\n                            if (compare_one($element,\
    \ $element2)) {\n                                return $element;\n          \
    \                  }\n                        }\n                    }\n     \
    \           } else {\n                    if (compare_one($element, $element2))\
    \ {\n                        return $element;\n                    }\n       \
    \         }\n            }\n        } elsif ($type eq \"HASH\") {\n          \
    \  foreach my $key (keys %$a) {\n                my $key2 = $key;\n          \
    \      my $key2type = ref($key2);\n                if ($key2type eq \"ARRAY\"\
    ) {\n                    foreach my $key3 (@$b) {\n                        my\
    \ $key3type = ref($key3);\n                        if ($key3type eq \"ARRAY\"\
    ) {\n                            if (compare_one($key, $key2) && compare_one($key3,\
    \ $key2)) {\n                                return $key;\n                  \
    \          }\n                        } else {\n                            if\
    \ (compare_one($key, $key2)) {\n                                return $key;\n\
    \                            }\n                        }\n                  \
    \  }\n                } else {\n                    if (compare_one($key, $key2))\
    \ {\n                        return $key;\n                    }\n           \
    \     }\n            }\n        } else {\n            if ($a > $b) {\n       \
    \         return $a;\n            } else {\n                return $b;\n     \
    \       }\n        }\n    } else {\n        if ($a > $b) {\n            return\
    \ $b;\n        } else {\n            return $a;\n        }\n    }\n}", "    if\
    \ ($a eq $b) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.?\\d*$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^\\d+\\.?\\d*$/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^\\d+$/) {\n        return $b;\n    }\n    if ($b\
    \ =~ /^\\d+$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.?\\d*,\\d+\\\
    .?\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\\
    d*$/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.?\\d*,\\d+$/) {\n \
    \       return $b;\n    }\n    if ($b =~ /^\\d+\\.?\\d*,\\d+$/) {\n        return\
    \ $a;\n    }\n    if ($a =~ /^\\d+,\\d+\\.?\\d*$/) {\n        return $b;\n   \
    \ }\n    if ($b =~ /^\\d+,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    if\
    \ ($a =~ /^\\d+,\\d+$/) {\n        return $b;\n    }\n    if ($b =~ /^\\d+,\\\
    d+$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/)\
    \ {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n\
    \        return $b;\n    }\n    if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n \
    \       return $a;\n    }\n    if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n  \
    \      return $b;\n    }\n    if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n   \
    \     return $a;\n    }\n    if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n    \
    \    return $b;\n    }\n    if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n     \
    \   return $a;\n    }\n    if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n      \
    \  return $b;\n    }\n    if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n       \
    \ return $a;\n    }\n    if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;",
  "    my $type = ref($a);\n    if ($type eq 'HASH') {\n        my $a_keys = keys\
    \ %$a;\n        my $b_keys = keys %$b;\n        if ($a_keys ne $b_keys) {\n  \
    \          return $b_keys;\n        }\n        foreach my $key (keys %$b) {\n\
    \            my $a_value = $a->{$key};\n            my $b_value = $b->{$key};\n\
    \            if ($a_value ne $b_value) {\n                return $b_value;\n \
    \           }\n        }\n    }\n    elsif ($type eq 'ARRAY') {\n        my $a_values\
    \ = @$a;\n        my $b_values = @$b;\n        if ($a_values ne $b_values) {\n\
    \            return $b_values;\n        }\n        foreach my $value (@$b) {\n\
    \            my $a_value = $a->[$value];\n            my $b_value = $b->[$value];\n\
    \            if ($a_value ne $b_value) {\n                return $b_value;\n \
    \           }\n        }\n    }\n    elsif ($type eq 'SCALAR') {\n        my $a_value\
    \ = $a;\n        my $b_value = $b;\n        if ($a_value ne $b_value) {\n    \
    \        return $b_value;\n        }\n    }\n    elsif ($type eq 'CODE') {\n \
    \       my $a_value = &$a;\n        my $b_value = &$b;\n        if ($a_value ne\
    \ $b_value) {\n            return $b_value;\n        }\n    }\n    elsif ($type\
    \ eq 'GLOB') {\n        my $a_value = *$a;\n        my $b_value = *$b;\n     \
    \   if ($a_value ne $b_value) {\n            return $b_value;\n        }\n   \
    \ }\n    elsif ($type eq 'IO::Scalar') {\n        my $a_value = &$a;\n       \
    \ my $b_value = &$b;\n        if ($a_value ne $b_value) {\n            return\
    \ $b_value;\n        }\n    }\n    elsif ($type eq 'IO::Handle') {\n        my\
    \ $a_value = *$a;\n        my $b_value = *$b;\n        if ($a_value ne $b_value)\
    \ {\n            return $b_value;\n        }\n    }\n    elsif ($type eq 'IO::File')\
    \ {\n        my $a_value = *$a;\n        my $b_value = *$b;\n        if ($a_value\
    \ ne $b_value) {\n            return $b_value;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::Dir') {\n        my $a_value = *$a;\n        my $b_value = *$b;\n  \
    \      if ($a_value ne $b_value) {\n            return $", "    return $a if $a\
    \ eq $b;\n    return $b if ($a eq \"undef\" || $b eq \"undef\");\n    return $a\
    \ if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"", "    return $a if $a eq $b;\n    return $b if ($b =~ /^\\d+$/);\n  \
    \  return $b if ($b =~ /^\\d+\\.\\d+$/);\n    return $b if ($b =~ /^\\d+\\.\\\
    d$/);\n    return $b if ($b =~ /^\\d+\\.\\d\\d$/);\n    return $b if ($b =~ /^\\\
    d+\\.\\d\\d\\d$/);\n    return $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d$/);\n    return\
    \ $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d\\d$/);\n    return $b if ($b =~ /^\\d+\\\
    .\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\\
    d$/);\n    return $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return\
    \ $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b\
    \ =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b =~ /^\\\
    d+\\.\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b =~ /^\\d+\\\
    .\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b =~ /^\\d+\\\
    .\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b =~ /^\\\
    d+\\.\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b\
    \ =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return\
    \ $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\\
    d$/);\n    return $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\\
    d\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\\
    d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return $b if ($b =~ /^\\d+\\\
    .\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$/);\n    return\
    \ $b if ($b =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\\
    d\\d\\d\\d\\d$/);\n    return $", "    my $type = ref($a);\n    if ($type eq 'ARRAY')\
    \ {\n        my $i = 0;\n        foreach my $element (@$a) {\n            if ($element\
    \ eq $b) {\n                return $i;\n            }\n            $i++;\n   \
    \     }\n        return undef;\n    }\n    elsif ($type eq 'HASH') {\n       \
    \ my $i = 0;\n        foreach my $key (keys %$a) {\n            if ($a->{$key}\
    \ eq $b) {\n                return $i;\n            }\n            $i++;\n   \
    \     }\n        return undef;\n    }\n    elsif ($type eq 'SCALAR') {\n     \
    \   if ($a eq $b) {\n            return undef;\n        }\n    }\n    elsif ($type\
    \ eq 'CODE') {\n        if (&$a eq &$b) {\n            return undef;\n       \
    \ }\n    }\n    elsif ($type eq 'GLOB') {\n        if ($a eq $b) {\n         \
    \   return undef;\n        }\n    }\n    elsif ($type eq 'IO::Handle') {\n   \
    \     if ($a->isa('IO::Handle') && $b->isa('IO::Handle')) {\n            return\
    \ $a->isa($b);\n        }\n    }\n    elsif ($type eq 'IO::File') {\n        if\
    \ ($a->isa('IO::File') && $b->isa('IO::File')) {\n            return $a->isa($b);\n\
    \        }\n    }\n    elsif ($type eq 'IO::Scalar') {\n        if ($a->isa('IO::Scalar')\
    \ && $b->isa('IO::Scalar')) {\n            return $a->isa($b);\n        }\n  \
    \  }\n    elsif ($type eq 'IO::Scalar::INLINE') {\n        if ($a->isa('IO::Scalar::INLINE')\
    \ && $b->isa('IO::Scalar::INLINE')) {\n            return $a->isa($b);\n     \
    \   }\n    }\n    elsif ($type eq 'IO::Scalar::Util') {\n        if ($a->isa('IO::Scalar::Util')\
    \ && $b->isa('IO::Scalar::Util')) {\n            return $a->isa($b);\n       \
    \ }\n    }\n    elsif ($type eq 'IO::Scalar::Convertible') {\n        if ($a->isa('IO::Scalar::Convertible')\
    \ && $b->isa('IO::Scalar::Convertible')) {\n            return $a->isa($b);\n\
    \        }\n    }\n    el", "    return undef unless defined $a && defined $b;\n\
    \    return $a if $a eq $b;\n    return $a if $a =~ /^\\d+$/;\n    return $a if\
    \ $a =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\\
    d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n   \
    \ return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\\
    d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.", "    return $a if $a eq $b;\n    return $b\
    \ if ($b eq $a) || ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n \
    \   return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n   \
    \ return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return\
    \ $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b\
    \ if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if\
    \ ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"\
    undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n  \
    \  return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a\
    \ if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq\
    \ \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"\
    undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n\
    \    return $b if ($b eq \"undef\");\n    return $a if (", "    if ($a eq $b)\
    \ {\n        return $a;\n    }\n    if ($a =~ /^\\d+$/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^\\d+$/) {\n        return $b;\n    }\n    if ($a =~ /^\\\
    d+\\.\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*$/) {\n\
    \        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a\
    \ =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n  \
    \  if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n    if ($b =~ /^\\\
    d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n  \
    \      return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n\
    \    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n    if ($b\
    \ =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*$/)\
    \ {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*$/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n   \
    \ if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\\
    .\\d*/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*/) {\n      \
    \  return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n  \
    \  }\n    if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a =~\
    \ /^\\d+\\.\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*$/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n        return\
    \ $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }", " \
    \   my $type = ref($a);\n    if ($type eq 'SCALAR') {\n        if ($a eq $b) {\n\
    \            return $a;\n        }\n    }\n    elsif ($type eq 'ARRAY') {\n  \
    \      if (@$a eq @$b) {\n            return $a->[0];\n        }\n    }\n    elsif\
    \ ($type eq 'HASH') {\n        if (keys %$a eq keys %$b) {\n            return\
    \ $a->[0];\n        }\n    }\n    elsif ($type eq 'CODE') {\n        if (&$a eq\
    \ &$b) {\n            return $a->[0];\n        }\n    }\n    elsif ($type eq 'GLOB')\
    \ {\n        if (&$a eq &$b) {\n            return $a->[0];\n        }\n    }\n\
    \    elsif ($type eq 'IO::Handle') {\n        if (&$a eq &$b) {\n            return\
    \ $a->[0];\n        }\n    }\n    elsif ($type eq 'IO::File') {\n        if (&$a\
    \ eq &$b) {\n            return $a->[0];\n        }\n    }\n    elsif ($type eq\
    \ 'IO::Scalar') {\n        if (&$a eq &$b) {\n            return $a->[0];\n  \
    \      }\n    }\n    elsif ($type eq 'IO::Socket') {\n        if (&$a eq &$b)\
    \ {\n            return $a->[0];\n        }\n    }\n    elsif ($type eq 'IO::Pty')\
    \ {\n        if (&$a eq &$b) {\n            return $a->[0];\n        }\n    }\n\
    \    elsif ($type eq 'IO::Select') {\n        if (&$a eq &$b) {\n            return\
    \ $a->[0];\n        }\n    }\n    elsif ($type eq 'IO::Poll') {\n        if (&$a\
    \ eq &$b) {\n            return $a->[0];\n        }\n    }\n    elsif ($type eq\
    \ 'IO::Dir') {\n        if (&$a eq &$b) {\n            return $a->[0];\n     \
    \   }\n    }\n    elsif ($type eq 'IO::Seekable') {\n        if (&$a eq &$b) {\n\
    \            return $a->[0];\n        }\n    }\n    elsif ($type eq 'IO::Handle')\
    \ {\n        if (&$a eq &$b) {\n            return $a->[0];\n        }\n    }\n\
    \    elsif ($type eq 'IO::Socket') {\n        if (&$a eq &$b) {\n", "    my $type\
    \ = ref($a);\n    if ($type eq 'HASH') {\n        my $a_keys = keys %$a;\n   \
    \     my $b_keys = keys %$b;\n        if ($a_keys ne $b_keys) {\n            return\
    \ $b_keys ? $b_keys : $a_keys;\n        }\n        foreach my $key (keys %$a)\
    \ {\n            my $a_val = $a->{$key};\n            my $b_val = $b->{$key};\n\
    \            if ($a_val ne $b_val) {\n                return $b_val ? $b_val :\
    \ $a_val;\n            }\n        }\n    }\n    elsif ($type eq 'ARRAY') {\n \
    \       foreach my $val (@$a) {\n            my $a_val = $val;\n            my\
    \ $b_val = $b->[0];\n            if ($a_val ne $b_val) {\n                return\
    \ $b_val ? $b_val : $a_val;\n            }\n        }\n    }\n    elsif ($type\
    \ eq 'SCALAR') {\n        my $a_val = $a;\n        my $b_val = $b;\n        if\
    \ ($a_val ne $b_val) {\n            return $b_val ? $b_val : $a_val;\n       \
    \ }\n    }\n    elsif ($type eq 'CODE') {\n        my $a_val = $a->();\n     \
    \   my $b_val = $b->();\n        if ($a_val ne $b_val) {\n            return $b_val\
    \ ? $b_val : $a_val;\n        }\n    }\n    elsif ($type eq 'GLOB') {\n      \
    \  my $a_val = $a->();\n        my $b_val = $b->();\n        if ($a_val ne $b_val)\
    \ {\n            return $b_val ? $b_val : $a_val;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Handle') {\n        my $a_val = $a->();\n        my $b_val =\
    \ $b->();\n        if ($a_val ne $b_val) {\n            return $b_val ? $b_val\
    \ : $a_val;\n        }\n    }\n    elsif ($type eq 'IO::Scalar') {\n        my\
    \ $a_val = $a->();\n        my $b_val = $b->();\n        if ($a_val ne $b_val)\
    \ {\n            return $b_val ? $b_val : $a_val;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::File') {\n        my $a_val = $a->();\n        my $b_val = $b->();\n\
    \        if ($a_val ne $b_val) {\n            return $b_val ? $b_val : $a_val;",
  "    return $a if $a < $b;\n    return $b if ($a > $b);\n    return;\n}", "    return\
    \ $a if $a eq $b;\n    return $b if ($b eq $a);\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\" ||\
    \ $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a\
    \ eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef", "    if ($a eq $b) {\n  \
    \      return $a;\n    }\n    elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+$/) {\n   \
    \     return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/ && $b\
    \ =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a\
    \ =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+$/) {\n        return $a > $b ? $a : $b;\n\
    \    }\n    elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+\\.\\d*$/) {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+$/)\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/\
    \ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ?\
    \ $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/)\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/\
    \ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ?\
    \ $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/)\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/\
    \ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a ", " \
    \   return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a =~\
    \ /^\\d+$/;\n    return $a if $b =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\\
    .\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a\
    \ =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a\
    \ if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return ", "    return $a if $a eq $b;\n   \
    \ return $b if ($b eq $a) || ($b eq \"undef\");\n    return $a if ($b eq \"undef\"\
    );\n    return $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n\
    \    return $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n  \
    \  return $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return\
    \ $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a\
    \ if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a if\
    \ ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($b\
    \ eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($b eq\
    \ \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($b eq \"\
    undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\"\
    );\n    return $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n\
    \    return $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n  \
    \  return $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return\
    \ $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a\
    \ if ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a if\
    \ ($b eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($b\
    \ eq \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($b eq\
    \ \"undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($b eq \"\
    undef\");\n    return $a if ($b eq \"undef\");\n    return $a if ($b eq \"undef\"\
    );\n    return $a if ($b eq \"undef\");\n    return $a if (", "    my $type =\
    \ ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return\
    \ $a > $b ? $a : $b;\n    } elsif ($type eq \"HASH\") {\n        return compare_one($a->{value},\
    \ $b->{value});\n    } elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    } elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    } elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Socket\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Select\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Poll\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Dir\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Seekable\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Scalar\") {\n        return compare_one($a,\
    \ $b);\n    } elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Socket\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Select\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Poll\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Dir\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Seekable\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Scalar\") {\n        return compare_one($a,\
    \ $b);\n    } ", "    my $type = ref($a);\n    if ($type eq 'SCALAR') {\n    \
    \    my $a_str = $a;\n        $a_str =~ s/,//g;\n        $a_str =~ s/\\.//g;\n\
    \        $a_str =~ s/^0+//;\n        $a_str =~ s/^-//;\n        $a_str =~ s/^\\\
    +//;\n        $a_str =~ s/^-/-/;\n        $a_str =~ s/^\\+/\\+/;\n        $a_str\
    \ =~ s/^0/0/;\n        $a_str =~ s/^1/1/;\n        $a_str =~ s/^2/2/;\n      \
    \  $a_str =~ s/^3/3/;\n        $a_str =~ s/^4/4/;\n        $a_str =~ s/^5/5/;\n\
    \        $a_str =~ s/^6/6/;\n        $a_str =~ s/^7/7/;\n        $a_str =~ s/^8/8/;\n\
    \        $a_str =~ s/^9/9/;\n        $a_str =~ s/^10/10/;\n        $a_str =~ s/^11/11/;\n\
    \        $a_str =~ s/^12/12/;\n        $a_str =~ s/^13/13/;\n        $a_str =~\
    \ s/^14/14/;\n        $a_str =~ s/^15/15/;\n        $a_str =~ s/^16/16/;\n   \
    \     $a_str =~ s/^17/17/;\n        $a_str =~ s/^18/18/;\n        $a_str =~ s/^19/19/;\n\
    \        $a_str =~ s/^20/20/;\n        $a_str =~ s/^21/21/;\n        $a_str =~\
    \ s/^22/22/;\n        $a_str =~ s/^23/23/;\n        $a_str =~ s/^24/24/;\n   \
    \     $a_str =~ s/^25/25/;\n        $a_str =~ s/^26/26/;\n        $a_str =~ s/^27/27/;\n\
    \        $a_str =~ s/^28/28/;\n        $a_str =~ s/^29/29/;\n        $a_str =~\
    \ s/^30/30/;\n        $a_str =~ s/^31/31/;\n        $a_str =~ s/^32/32/;\n   \
    \     $a_str =~ s/^33/33/;\n        $a_str", "    my $type = ref($a);\n    my\
    \ $type2 = ref($b);\n    if ($type eq $type2) {\n        if ($type eq \"HASH\"\
    ) {\n            foreach my $key (keys %{$a}) {\n                if ($a->{$key}\
    \ ne $b->{$key}) {\n                    return $a->{$key};\n                }\n\
    \            }\n        }\n        elsif ($type eq \"ARRAY\") {\n            foreach\
    \ my $i (0 .. @{$a} - 1) {\n                if ($a->[$i] ne $b->[$i]) {\n    \
    \                return $a->[$i];\n                }\n            }\n        }\n\
    \        elsif ($type eq \"SCALAR\") {\n            foreach my $key (keys %{$a})\
    \ {\n                if ($a->{$key} ne $b->{$key}) {\n                    return\
    \ $a->{$key};\n                }\n            }\n        }\n        elsif ($type\
    \ eq \"CODE\") {\n            foreach my $key (keys %{$a}) {\n               \
    \ if ($a->{$key} ne $b->{$key}) {\n                    return $a->{$key};\n  \
    \              }\n            }\n        }\n        elsif ($type eq \"IO\") {\n\
    \            foreach my $key (keys %{$a}) {\n                if ($a->{$key} ne\
    \ $b->{$key}) {\n                    return $a->{$key};\n                }\n \
    \           }\n        }\n        elsif ($type eq \"IO::Handle\") {\n        \
    \    foreach my $key (keys %{$a}) {\n                if ($a->{$key} ne $b->{$key})\
    \ {\n                    return $a->{$key};\n                }\n            }\n\
    \        }\n        elsif ($type eq \"IO::File\") {\n            foreach my $key\
    \ (keys %{$a}) {\n                if ($a->{$key} ne $b->{$key}) {\n          \
    \          return $a->{$key};\n                }\n            }\n        }\n \
    \       elsif ($type eq \"IO::Scalar\") {\n            foreach my $key (keys %{$a})\
    \ {\n                if ($a->{$key} ne $b->{$key}) {\n                    return\
    \ $a->{$key};\n                }\n            }\n        }\n        elsif ($type\
    \ eq \"IO::Socket\") {\n            foreach my $key (keys %{$a}) {\n         \
    \       if ($a->{$key} ne $b->{$key}) {\n                    return $a->{$key};\n\
    \                }\n            }\n        }\n        elsif ($type eq \"IO::Socket::INET\"\
    ) {", "    my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2)\
    \ {\n        return $a > $b ? $a : $b;\n    } elsif ($type eq \"HASH\") {\n  \
    \      return compare_one($a->{value}, $b->{value});\n    } elsif ($type eq \"\
    ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n    } elsif ($type\
    \ eq \"SCALAR\") {\n        return compare_one($a, $b);\n    } elsif ($type eq\
    \ \"CODE\") {\n        return compare_one($a->($a), $b->($b));\n    } elsif ($type\
    \ eq \"GLOB\") {\n        return compare_one($a->($a), $b->($b));\n    } elsif\
    \ ($type eq \"IO\") {\n        return compare_one($a->($a), $b->($b));\n    }\
    \ elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->($a), $b->($b));\n\
    \    } elsif ($type eq \"overload\") {\n        return compare_one($a->($a), $b->($b));\n\
    \    } elsif ($type eq \"UNIVERSAL\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    } elsif ($type eq \"undef\") {\n        return undef;\n    }\
    \ else {\n        return $a > $b ? $a : $b;\n    }\n}", "    my $type = ref($a);\n\
    \    if ($type eq 'HASH') {\n        my $a_keys = keys %$a;\n        my $b_keys\
    \ = keys %$b;\n        if ($a_keys ne $b_keys) {\n            return $b_keys if\
    \ $a_keys < $b_keys;\n            return $a_keys if $a_keys > $b_keys;\n     \
    \   }\n        foreach my $key (keys %$a) {\n            my $a_val = $a->{$key};\n\
    \            my $b_val = $b->{$key};\n            my $cmp = compare_one($a_val,\
    \ $b_val);\n            if ($cmp eq undef) {\n                return $key;\n \
    \           }\n        }\n    }\n    elsif ($type eq 'ARRAY') {\n        foreach\
    \ my $val (@$a) {\n            my $cmp = compare_one($val, $b);\n            if\
    \ ($cmp eq undef) {\n                return $val;\n            }\n        }\n\
    \    }\n    elsif ($type eq 'SCALAR') {\n        return $a if $a > $b;\n     \
    \   return $b if $a < $b;\n    }\n    elsif ($type eq 'CODE') {\n        return\
    \ $a if &$a > &$b;\n        return $b if &$a < &$b;\n    }\n    elsif ($type eq\
    \ 'GLOB') {\n        return $a if &$a > &$b;\n        return $b if &$a < &$b;\n\
    \    }\n    elsif ($type eq 'IO::Handle') {\n        return $a if &$a > &$b;\n\
    \        return $b if &$a < &$b;\n    }\n    elsif ($type eq 'overload') {\n \
    \       return $a if &$a > &$b;\n        return $b if &$a < &$b;\n    }\n    elsif\
    \ ($type eq 'UNIVERSAL') {\n        return $a if $a > $b;\n        return $b if\
    \ $a < $b;\n    }\n    elsif ($type eq 'Regexp') {\n        return $a if $a >\
    \ $b;\n        return $b if $a < $b;\n    }\n    elsif ($type eq 'Regexp::Assembler')\
    \ {\n        return $a if $a > $b;\n        return $b if $a < $b;\n    }\n   \
    \ elsif ($type eq 'Regexp::Expression') {\n        return $a if $a > $b;\n   \
    \     return $b if $a < $b;\n    }\n    elsi", "    return $a if $a eq $b;\n \
    \   return $a if $b eq $a;\n    return $a if $a =~ /^\\d+$/;\n    return $a if\
    \ $b =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b\
    \ =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\\
    .\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if\
    \ $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\\
    d*,\\d+\\.\\d*\\,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\\
    d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+\\.\\d*$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+$/;\n  \
    \  return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+$/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+\\.\\d*\\\
    ,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\\
    d+\\.\\d*\\,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*\\\
    ,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d*,\\d+\\.\\d*\\,\\d+\\.\\d*\\,\\d+\\.\\d*\\,", "    return $a if $a eq $b;\n\
    \    return $a if $b eq $a;\n    return $a if $a =~ /^\\d+$/;\n    return $a if\
    \ $b =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b\
    \ =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if\
    \ $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+$/;\n    return $a\
    \ if $b =~ /^\\d+,\\d+$/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\\
    .\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d+$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d+\\.\\\
    d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d+$/;\n    return $a if $b =~ /^\\\
    d+,\\d+\\.\\d+$/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+,\\d+\\.\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+,\\d+\\\
    .\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d+\\.\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d+,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d+,\\d+$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d+,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d+,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d+,\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ ",
  "    my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n\
    \        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"ARRAY\") {\n\
    \        foreach my $elem (@{$a}) {\n            my $ret = $elem->compare($b);\n\
    \            if ($ret) {\n                return $ret;\n            }\n      \
    \  }\n        return undef;\n    }\n    elsif ($type eq \"HASH\") {\n        foreach\
    \ my $key (keys %{$a}) {\n            my $ret = $a->{$key}->compare($b->{$key});\n\
    \            if ($ret) {\n                return $ret;\n            }\n      \
    \  }\n        return undef;\n    }\n    elsif ($type eq \"CODE\") {\n        return\
    \ $a->($b) if ($a->($b));\n        return undef;\n    }\n    elsif ($type eq \"\
    SCALAR\") {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"\
    IO\") {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"BLANK\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"undef\")\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"CODE\") {\n\
    \        return $a->($b) if ($a->($b));\n        return undef;\n    }\n    elsif\
    \ ($type eq \"ARRAY\") {\n        foreach my $elem (@{$a}) {\n            my $ret\
    \ = $elem->compare($b);\n            if ($ret) {\n                return $ret;\n\
    \            }\n        }\n        return undef;\n    }\n    elsif ($type eq \"\
    HASH\") {\n        foreach my $key (keys %{$a}) {\n            my $ret = $a->{$key}->compare($b->{$key});\n\
    \            if ($ret) {\n                return $ret;\n            }\n      \
    \  }\n        return undef;\n    }\n    elsif ($type eq \"SCALAR\") {\n      \
    \  return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"IO\") {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"BLANK\") {\n        return\
    \ $a > $b ? $a : $b;\n    }", "    return undef unless defined $a && defined $b;\n\
    \    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a =~\
    \ /^\\d+$/ && $b =~ /^\\d+$/;\n    return $a if $b =~ /^\\d+$/ && $a =~ /^\\d+$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/ && $a =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*$/ && $b =~ /^\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/ &&\
    \ $a =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\\
    d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~\
    \ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\\
    d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~\
    \ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\\
    d*$/;", "    my $type = ref($a);\n    if ($type eq 'SCALAR') {\n        return\
    \ $a > $b ? $a : $b;\n    } elsif ($type eq 'ARRAY') {\n        foreach my $elem\
    \ (@$a) {\n            my $cmp = compare_one($elem, $b);\n            if ($cmp\
    \ eq undef) {\n                return undef;\n            }\n        }\n     \
    \   return $a > $b ? $a : $b;\n    } elsif ($type eq 'HASH') {\n        foreach\
    \ my $key (keys %$a) {\n            my $cmp = compare_one($key, $b);\n       \
    \     if ($cmp eq undef) {\n                return undef;\n            }\n   \
    \     }\n        return $a > $b ? $a : $b;\n    } elsif ($type eq 'CODE') {\n\
    \        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Handle') {\n \
    \       return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar') {\n  \
    \      return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Scalar')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::UIO')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Win32')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::VMS')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Win32::File')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::VMS::File')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Win32::Handle')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::VMS::Handle')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Win32::Scalar')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::VMS::Scalar')\
    \ {\n        return $a->($b", "    if ($a eq $b) {\n        return $a;\n    }\n\
    \    if ($a =~ /^\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^\\\
    d+\\.?\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+$/) {\n      \
    \  return $a;\n    }\n    if ($b =~ /^\\d+$/) {\n        return $b;\n    }\n \
    \   if ($a =~ /^\\d+\\.\\d+$/) {\n        return $a;\n    }\n    if ($b =~ /^\\\
    d+\\.\\d+$/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d+\\.\\d+$/)\
    \ {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d+$/) {\n    \
    \    return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n     \
    \   return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n      \
    \  return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\\
    d+\\.\\d+$/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+$/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\\
    d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n        return $a;\n    }\n    if\
    \ ($b =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+$/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d+\\.\\\
    d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n        return $b;\n    }\n    if ($a =~\
    \ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n      \
    \  return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+$/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\\
    d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n        return\
    \ $a;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+$/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\\
    d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n     \
    \   return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/) {\n        return $b;\n", "    my\
    \ $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n   \
    \     if ($type eq 'HASH') {\n            foreach my $key (keys %$a) {\n     \
    \           if ($a->{$key} ne $b->{$key}) {\n                    return $a->{$key};\n\
    \                }\n            }\n        } elsif ($type eq 'ARRAY') {\n    \
    \        foreach my $i (0 .. @$a-1) {\n                my $val = $a->[$i];\n \
    \               my $val2 = $b->[$i];\n                if ($val ne $val2) {\n \
    \                   return $val;\n                }\n            }\n        }\
    \ elsif ($type eq 'SCALAR') {\n            my $val = $a;\n            my $val2\
    \ = $b;\n            if ($val ne $val2) {\n                return $val;\n    \
    \        }\n        } else {\n            return $a > $b ? $a : $b;\n        }\n\
    \    } else {\n        return $a > $b ? $a : $b;\n    }\n}", "    my $type = ref($a);\n\
    \    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return $a if $a\
    \ > $b;\n        return $b if $a < $b;\n    }\n    return $a if $type eq \"HASH\"\
    ;\n    return $b if $type eq \"ARRAY\";\n    return $a if $type eq \"SCALAR\"\
    ;\n    return $b if $type eq \"REF\";\n    return $a if $type eq \"IO::Handle\"\
    ;\n    return $a if $type eq \"IO::File\";\n    return $a if $type eq \"IO::Seekable\"\
    ;\n    return $a if $type eq \"IO::Select\";\n    return $a if $type eq \"IO::Socket\"\
    ;\n    return $a if $type eq \"IO::Socket::INET\";\n    return $a if $type eq\
    \ \"IO::Socket::UNIX\";\n    return $a if $type eq \"IO::Dir\";\n    return $a\
    \ if $type eq \"IO::Dir::Iter\";\n    return $a if $type eq \"IO::Dir::Etc\";\n\
    \    return $a if $type eq \"IO::Dir::Spec\";\n    return $a if $type eq \"IO::File::Base\"\
    ;\n    return $a if $type eq \"IO::File::Spec\";\n    return $a if $type eq \"\
    IO::Handle::Pipe\";\n    return $a if $type eq \"IO::Handle::Pipe::BUF\";\n  \
    \  return $a if $type eq \"IO::Handle::Pipe::BUF::POLL\";\n    return $a if $type\
    \ eq \"IO::Handle::Pipe::BUF::POLL::POLLERR\";\n    return $a if $type eq \"IO::Handle::Pipe::BUF::POLL::POLLOUT\"\
    ;\n    return $a if $type eq \"IO::Handle::Pipe::BUF::POLL::POLLIN\";\n    return\
    \ $a if $type eq \"IO::Handle::Pipe::BUF::POLL::POLLOUT\";\n    return $a if $type\
    \ eq \"IO::Handle::Pipe::BUF::POLL::POLLIN\";\n    return $a if $type eq \"IO::Handle::Pipe::BUF::POLL::POLLOUT\"\
    ;\n    return $a if $type eq \"IO::Handle::Pipe::BUF::POLL::POLLIN\";\n    return\
    \ $a if $type ", "    return $a if $a eq $b;\n    return $b if ($b eq $a);\n \
    \   return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n   \
    \ return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($b eq\
    \ \"undef\" || $a eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"\
    undef\" || $a eq $b);\n    return $a if ($b eq \"undef\" || $a eq \"undef\" ||\
    \ $b eq $a);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n\
    \    return $a if ($b eq \"undef\" || $a eq \"undef\" || $b eq $a);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($b\
    \ eq \"undef\" || $a eq \"undef\" || $b eq $a);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($b eq \"undef\" || $a eq\
    \ \"undef\" || $b eq $a);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($b eq \"undef\" || $a eq \"undef\" || $b eq\
    \ $a);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($b eq \"undef\" || $a eq \"undef\" || $b eq $a);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($b\
    \ eq \"undef\" || $a eq \"undef\" || $b eq $a);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($b eq \"undef\" || $a eq\
    \ \"undef\" || $b eq $a);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($b eq \"undef\" || $a eq \"undef\" || $b eq\
    \ $", "    if ($a eq $b) {\n        return $a;\n    }\n    if ($a =~ /^-?\\d+$/)\
    \ {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+$/) {\n        return $b;\n\
    \    }\n    if ($a =~ /^-?\\d+\\.\\d*$/) {\n        return $a;\n    }\n    if\
    \ ($b =~ /^-?\\d+\\.\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\\
    d+\\.?\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*$/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*\\.?\\d*$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*\\.?\\d*$/) {\n    \
    \    return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*$/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\\
    .?\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*\\.?\\d*\\\
    .?\\d*\\.?\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d*\\\
    .?\\d*\\.?\\d*\\.?\\d*\\.?\\d*$/) {\n        return $a;\n    }\n    if ($b =~\
    \ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*$/) {\n        return $b;\n\
    \    }\n    if ($a =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*$/)\
    \ {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\\
    .?\\d*\\.?\\d*\\.?\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\\
    .?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*$/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\\
    .?\\d*$/) {\n        return $b;\n    }\n    if ($a ", "    my $type = ref($a);\n\
    \    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return $a > $b\
    \ ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($",
  "    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a =~\
    \ /^\\d+$/;\n    return $a if $b =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\\
    .\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a\
    \ =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a\
    \ if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return ", "    my $type = ref($a);\n    if\
    \ ($type eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    } elsif ($type\
    \ eq 'ARRAY') {\n        my $cmp = compare_one($a->[0], $b->[0]);\n        return\
    \ $cmp if $cmp;\n    } elsif ($type eq 'HASH') {\n        my $cmp = compare_one($a->{key},\
    \ $b->{key});\n        return $cmp if $cmp;\n    } elsif ($type eq 'CODE') {\n\
    \        my $cmp = compare_one($a->($a), $b->($b));\n        return $cmp if $cmp;\n\
    \    } elsif ($type eq 'GLOB') {\n        my $cmp = compare_one($a->($a), $b->($b));\n\
    \        return $cmp if $cmp;\n    } elsif ($type eq 'IO::Handle') {\n       \
    \ my $cmp = compare_one($a->($a), $b->($b));\n        return $cmp if $cmp;\n \
    \   } elsif ($type eq 'IO::File') {\n        my $cmp = compare_one($a->($a), $b->($b));\n\
    \        return $cmp if $cmp;\n    } elsif ($type eq 'IO::Scalar') {\n       \
    \ my $cmp = compare_one($a->($a), $b->($b));\n        return $cmp if $cmp;\n \
    \   } elsif ($type eq 'IO::Handle') {\n        my $cmp = compare_one($a->($a),\
    \ $b->($b));\n        return $cmp if $cmp;\n    } elsif ($type eq 'IO::File')\
    \ {\n        my $cmp = compare_one($a->($a), $b->($b));\n        return $cmp if\
    \ $cmp;\n    } elsif ($type eq 'IO::Scalar') {\n        my $cmp = compare_one($a->($a),\
    \ $b->($b));\n        return $cmp if $cmp;\n    } elsif ($type eq 'IO::Handle')\
    \ {\n        my $cmp = compare_one($a->($a), $b->($b));\n        return $cmp if\
    \ $cmp;\n    } elsif ($type eq 'IO::File') {\n        my $cmp = compare_one($a->($a),\
    \ $b->($b));\n        return $cmp if $cmp;\n    } elsif ($type eq 'IO::Scalar')\
    \ {\n        my $cmp = compare_one($a->($a), $b->($", "    return $a if $a eq\
    \ $b;\n    return $a if $b eq $a;\n    return $a if $a =~ /^\\d+$/;\n    return\
    \ $a if $b =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a\
    \ if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return ",
  "    my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n\
    \        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n \
    \       return compare_one($a->{val}, $b->{val});\n    }\n    elsif ($type eq\
    \ \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n    }\n    elsif\
    \ ($type eq \"SCALAR\") {\n        return compare_one($a, $b);\n    }\n    elsif\
    \ ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(), $b->fileno());\n\
    \    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Seekable\") {\n        return\
    \ compare_one($a->{pos}, $b->{pos});\n    }\n    elsif ($type eq \"IO::File::Base\"\
    ) {\n        return compare_one($a->{handle}, $b->{handle});\n    }\n    elsif\
    \ ($type eq \"IO::File::Spec\") {\n        return compare_one($a->{dev}, $b->{dev});\n\
    \    }\n    elsif ($type eq \"IO::File::Spec::Cygwin\") {\n        return compare_one($a->{dev},\
    \ $b->{dev});\n    }\n    elsif ($type eq \"IO::File::Spec::VMS\") {\n       \
    \ return compare_one($a->{dev}, $b->{dev});\n    }\n    elsif ($type eq \"IO::File::Spec::Mac\"\
    ) {\n        return compare_one($a->{dev}, $b->{dev});\n    }\n    elsif ($type\
    \ eq \"IO::File::Spec::Unix\") {\n        return compare_one($a->{dev}, $b->{dev});\n\
    \    }\n    elsif ($type eq \"IO::File::Spec::VFAT\") {\n        return compare_one($a->{dev},\
    \ $b->{dev});\n    }\n    elsif ($type eq \"IO::File::Spec::Mac::File\") {\n \
    \       return compare_one($a->{dev}, $b->{dev});\n    }\n    elsif ($type eq\
    \ \"IO::File::Spec::VMS::File\") {\n        return compare_one($a->{dev}, $b->{dev});\n\
    \    }\n    ", "    my $type = ref($a) ? ref($a) : \"\";\n    my $type2 = ref($b)\
    \ ? ref($b) : \"\";\n    if ($type eq $type2) {\n        if ($type eq \"ARRAY\"\
    ) {\n            foreach my $element (@$a) {\n                my $element2 = $element;\n\
    \                if ($element ne $element2) {\n                    return $element;\n\
    \                }\n            }\n        } elsif ($type eq \"HASH\") {\n   \
    \         foreach my $element (keys %$a) {\n                my $element2 = $a->{$element};\n\
    \                if ($element ne $element2) {\n                    return $element;\n\
    \                }\n            }\n        } elsif ($type eq \"CODE\") {\n   \
    \         my $element2 = $a->($b);\n            if ($element ne $element2) {\n\
    \                return $element;\n            }\n        } elsif ($type eq \"\
    SCALAR\") {\n            my $element2 = $a;\n            if ($element ne $element2)\
    \ {\n                return $element;\n            }\n        } else {\n     \
    \       my $element2 = $a;\n            if ($element ne $element2) {\n       \
    \         return $element;\n            }\n        }\n    } else {\n        return\
    \ $a;\n    }\n}", "    my $type = ref($a);\n    if ($type eq 'SCALAR') {\n   \
    \     my $a_str = $a;\n        $a_str =~ s/,//g;\n        $a_str =~ s/\\./,/g;\n\
    \        $a_str =~ s/,$//g;\n        $a_str =~ s/^0//g;\n        $a_str =~ s/^-?\\\
    d+//g;\n        $a_str =~ s/^-?\\d*\\.?\\d*//g;\n        $a_str =~ s/^-?\\d*\\\
    .?\\d+//g;\n        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\\
    d+\\.?\\d+//g;\n        $a_str =~ s/^-?\\d+//g;\n        $a_str =~ s/^-?\\d*//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?\\d+\\.?\\d+//g;\n\
    \        $a_str =~ s/^-?\\d+\\.?\\d*//g;\n        $a_str =~ s/^-?", "    my $type\
    \ = ref($a);\n    if ($type eq 'HASH') {\n        foreach my $key (keys %$a) {\n\
    \            if ($a->{$key} ne $b->{$key}) {\n                return $a->{$key};\n\
    \            }\n        }\n    } elsif ($type eq 'ARRAY') {\n        foreach my\
    \ $i (0 .. @$a-1) {\n            if ($a[$i] ne $b[$i]) {\n                return\
    \ $a[$i];\n            }\n        }\n    } elsif ($type eq 'SCALAR') {\n     \
    \   return $a > $b ? $a : $b;\n    } elsif ($type eq 'CODE') {\n        return\
    \ $a->($b) if $a->($b);\n    }\n    return;\n}", "    my $type = ref($a);\n  \
    \  if ($type eq 'SCALAR') {\n        my $cmp = $a cmp $b;\n        if ($cmp ==\
    \ 0) {\n            return $a;\n        }\n        return $cmp ? $a : $b;\n  \
    \  }\n    if ($type eq 'ARRAY') {\n        my $cmp = @$a <=> @$b;\n        if\
    \ ($cmp == 0) {\n            return $a;\n        }\n        return $cmp ? $a :\
    \ $b;\n    }\n    if ($type eq 'HASH') {\n        my $cmp = keys %$a <=> keys\
    \ %$b;\n        if ($cmp == 0) {\n            return $a;\n        }\n        return\
    \ $cmp ? $a : $b;\n    }\n    if ($type eq 'CODE') {\n        my $cmp = &$a <=>\
    \ &$b;\n        if ($cmp == 0) {\n            return $a;\n        }\n        return\
    \ $cmp ? $a : $b;\n    }\n    if ($type eq 'GLOB') {\n        my $cmp = &$a <=>\
    \ &$b;\n        if ($cmp == 0) {\n            return $a;\n        }\n        return\
    \ $cmp ? $a : $b;\n    }\n    if ($type eq 'IO::Handle') {\n        my $cmp =\
    \ &$a <=> &$b;\n        if ($cmp == 0) {\n            return $a;\n        }\n\
    \        return $cmp ? $a : $b;\n    }\n    if ($type eq 'IO::File') {\n     \
    \   my $cmp = &$a <=> &$b;\n        if ($cmp == 0) {\n            return $a;\n\
    \        }\n        return $cmp ? $a : $b;\n    }\n    if ($type eq 'IO::Scalar')\
    \ {\n        my $cmp = &$a <=> &$b;\n        if ($cmp == 0) {\n            return\
    \ $a;\n        }\n        return $cmp ? $a : $b;\n    }\n    if ($type eq 'IO::Handle')\
    \ {\n        my $cmp = &$a <=> &$b;\n        if ($cmp == 0) {\n            return\
    \ $a;\n        }\n        return $cmp ? $a : $b;\n    }\n    if ($type eq 'IO::File')\
    \ {\n        my $cmp = &$a <=> &$b;\n        if ($cmp == 0) {\n            return\
    \ $a;\n        }\n        return $cmp ? $a : $b;\n    }\n    if ($type eq 'IO::Scalar')\
    \ {\n        my $cmp = &$a <=> &$b;\n        if ($cmp == 0) {\n            return\
    \ $a;\n        }\n        return $cmp ? $a : $b;\n    }\n    if ($type eq 'IO::Handle')\
    \ {\n        my $cmp = &$a <=> &$", "    my $type = ref($a);\n    if ($type eq\
    \ 'SCALAR') {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq 'ARRAY')\
    \ {\n        return $a->[0] > $b->[0] ? $a->[0] : $b->[0];\n    }\n    elsif ($type\
    \ eq 'HASH') {\n        return $a->{value} > $b->{value} ? $a->{value} : $b->{value};\n\
    \    }\n    elsif ($type eq 'CODE') {\n        return $a->($a) > $b->($b) ? $a->($a)\
    \ : $b->($b);\n    }\n    elsif ($type eq 'GLOB') {\n        return $a->($a) >\
    \ $b->($b) ? $a->($a) : $b->($b);\n    }\n    elsif ($type eq 'IO::Handle') {\n\
    \        return $a->($a) > $b->($b) ? $a->($a) : $b->($b);\n    }\n    elsif ($type\
    \ eq 'overload::') {\n        return $a->($a) > $b->($b) ? $a->($a) : $b->($b);\n\
    \    }\n    elsif ($type eq 'UNIVERSAL') {\n        return $a->($a) > $b->($b)\
    \ ? $a->($a) : $b->($b);\n    }\n    elsif ($type eq 'overload::') {\n       \
    \ return $a->($a) > $b->($b) ? $a->($a) : $b->($b);\n    }\n    elsif ($type eq\
    \ 'overload::') {\n        return $a->($a) > $b->($b) ? $a->($a) : $b->($b);\n\
    \    }\n    elsif ($type eq 'overload::') {\n        return $a->($a) > $b->($b)\
    \ ? $a->($a) : $b->($b);\n    }\n    elsif ($type eq 'overload::') {\n       \
    \ return $a->($a) > $b->($b) ? $a->($a) : $b->($b);\n    }\n    elsif ($type eq\
    \ 'overload::') {\n        return $a->($a) > $b->($b) ? $a->($a) : $b->($b);\n\
    \    }\n    elsif ($type eq 'overload::') {\n        return $a->($a) > $b->($b)\
    \ ? $a->($a) : $b->", "    my $type = ref($a);\n    if ($type eq 'ARRAY') {\n\
    \        if (@$a != @$b) {\n            return undef;\n        }\n        for\
    \ my $i (0..$#{$a}) {\n            my $a_value = $a->[$i];\n            my $b_value\
    \ = $b->[$i];\n            if ($a_value ne $b_value) {\n                return\
    \ undef;\n            }\n        }\n        return $a->[0];\n    }\n    elsif\
    \ ($type eq 'HASH') {\n        if (keys %$a != keys %$b) {\n            return\
    \ undef;\n        }\n        for my $key (keys %$a) {\n            my $a_value\
    \ = $a->{$key};\n            my $b_value = $b->{$key};\n            if ($a_value\
    \ ne $b_value) {\n                return undef;\n            }\n        }\n  \
    \      return $a->{key};\n    }\n    elsif ($type eq 'SCALAR') {\n        if ($a\
    \ ne $b) {\n            return undef;\n        }\n        return $a;\n    }\n\
    \    elsif ($type eq 'CODE') {\n        return $a->($b);\n    }\n    elsif ($type\
    \ eq 'IO::Handle') {\n        return $a->($b);\n    }\n    elsif ($type eq 'IO::File')\
    \ {\n        return $a->($b);\n    }\n    elsif ($type eq 'IO::Scalar') {\n  \
    \      return $a->($b);\n    }\n    elsif ($type eq 'IO::Handle') {\n        return\
    \ $a->($b);\n    }\n    elsif ($type eq 'IO::File') {\n        return $a->($b);\n\
    \    }\n    elsif ($type eq 'IO::Scalar') {\n        return $a->($b);\n    }\n\
    \    elsif ($type eq 'IO::Handle') {\n        return $a->($b);\n    }\n    elsif\
    \ ($type eq 'IO::File') {\n        return $a->($b);\n    }\n    elsif ($type eq\
    \ 'IO::Scalar') {\n        return $a->($b);\n    }\n    elsif ($type eq 'IO::Handle')\
    \ {\n        return $a->($b);\n    }\n    elsif ($type eq 'IO::File') {\n    \
    \    return $a->($b);\n    }\n    elsif ($type eq 'IO::Scalar') {\n        return\
    \ $a->($b);\n    }\n    elsif ($type eq 'IO::Handle') {\n        return $a->($b);\n\
    \    }", "    return undef unless defined $a && defined $b;\n    return $a > $b\
    \ ? $a : $b;\n}", "    my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type\
    \ eq $type2) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq\
    \ \"HASH\") {\n        return compare_one($a->{value}, $b->{value});\n    }\n\
    \    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n\
    \    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Scalar\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::INLINE\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util\") {\n        return compare_one($a->value, $b->value);\n\
    \    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::Util_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util::INHERIT\") {\n        return compare_one($a->value, $b->value);\n\
    \    }\n    elsif ($type eq \"IO::Scalar::Util::INLINE_INHERIT\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util_INLINE_INHERIT\") {\n        return compare_one($a->value,\
    \ $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::Util_INLINE_INHERIT_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::INLINE_INHERIT_INHERIT_INHERIT\") {\n        return compare_one($",
  "    return undef unless defined $a and defined $b;\n    return $a if $a eq $b;\n\
    \    return $a if $b =~ /^\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n \
    \   return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\\
    d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d*/;\n    return $a if $b =~ /^\\\
    d+,\\d*$/;\n    return $a if $b =~ /^\\d+,\\d*/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*,\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $b\
    \ =~ /^\\d+,\\d*/;\n    return $a if $b =~ /^\\d+,\\d*$/;\n    return $a if $b\
    \ =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d*/;\n    return $a if $b\
    \ =~ /^\\d+,\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if\
    \ $b =~ /^\\d+,\\d*/;\n    return $a if $b =~ /^\\d+,\\d*$/;\n    return $a if\
    \ $b =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d*/;\n    return $a if\
    \ $b =~ /^\\d+,\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d*/;\n    return\
    \ $a if $b =~ /^\\d+,\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+,\\d*/;\n    return $a if $b =~ /^\\d+,\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+,\\d*/;\n    return\
    \ $a if $b =~ /^\\d+,\\d*$/;\n    return $a if $b ", "    my $type = ref($a);\n\
    \    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return $a > $b\
    \ ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"UNDEF\") {\n        return undef;\n\
    \    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"UNDEF\") {\n        return undef;\n\
    \    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a",
  "    my $type = ref($a);\n    if ($type eq 'HASH') {\n        my $a_keys = keys\
    \ %$a;\n        my $b_keys = keys %$b;\n        return $a_keys <=> $b_keys;\n\
    \    } elsif ($type eq 'ARRAY') {\n        return @$a <=> @$b;\n    } elsif ($type\
    \ eq 'SCALAR') {\n        return $a <=> $b;\n    } elsif ($type eq 'CODE') {\n\
    \        return &$a <=> &$b;\n    } elsif ($type eq 'GLOB') {\n        return\
    \ $a <=> $b;\n    } elsif ($type eq 'IO::Scalar') {\n        return $a <=> $b;\n\
    \    } elsif ($type eq 'overload::') {\n        return $a <=> $b;\n    } elsif\
    \ ($type eq 'UNIVERSAL') {\n        return $a <=> $b;\n    } else {\n        return\
    \ $a cmp $b;\n    }\n}", "    my $type = ref($a);\n    my $type2 = ref($b);\n\
    \    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($type eq \"HASH\") {\n        return compare_one($a->{val}, $b->{val});\n \
    \   }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n\
    \    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"IO::Scalar\") {\n        return compare_one($a->value,\
    \ $b);\n    }\n    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b);\n    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b);\n    }\n    elsif ($type eq \"IO::Socket\") {\n        return compare_one($a->fileno(),\
    \ $b);\n    }\n    elsif ($type eq \"IO::Socket::INET\") {\n        return compare_one($a->fileno(),\
    \ $b);\n    }\n    elsif ($type eq \"IO::Socket::UNIX\") {\n        return compare_one($a->fileno(),\
    \ $b);\n    }\n    elsif ($type eq \"IO::Socket::SSL\") {\n        return compare_one($a->fileno(),\
    \ $b);\n    }\n    elsif ($type eq \"IO::Socket::SSL::Client\") {\n        return\
    \ compare_one($a->fileno(), $b);\n    }\n    elsif ($type eq \"IO::Socket::SSL::Server\"\
    ) {\n        return compare_one($a->fileno(), $b);\n    }\n    elsif ($type eq\
    \ \"IO::Socket::SSL::Socket\") {\n        return compare_one($a->fileno(), $b);\n\
    \    }\n    elsif ($type eq \"IO::Socket::SSL::Socket::INET\") {\n        return\
    \ compare_one($a->fileno(), $b);\n    }\n    elsif ($type eq \"IO::Socket::SSL::Socket::UNIX\"\
    ) {\n        return compare_one($a->fileno(), $b);\n    }\n    elsif ($type eq\
    \ \"IO::Socket::SSL::Socket::SSL\") {\n        return compare_one($a->fileno(),\
    \ $b);\n    }\n    elsif ($type eq \"IO::Socket::SSL::Socket::SSL::Client\") {\n\
    \        return compare_one", "    return undef if ($a eq $b);\n    return $a\
    \ if ($a =~ /^\\d+$/);\n    return $a if ($a =~ /^\\d+\\.\\d+$/);\n    return\
    \ $a if ($a =~ /^\\d+\\.\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d\\d$/);\n\
    \    return $a if ($a =~ /^\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^\\\
    d+\\.\\d\\d\\d\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d\\d\\d\\d\\d$/);\n\
    \    return $a if ($a =~ /^\\d+\\.\\d\\d\\d\\d\\d\\d$/);\n    return $a if ($a\
    \ =~ /^\\d+\\.\\d+\\.\\d+$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\d$/);\n\
    \    return $a if ($a =~ /^\\d+\\.\\d+\\.\\d\\d$/);\n    return $a if ($a =~ /^\\\
    d+\\.\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\d\\d\\d\\\
    d$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\d\\d\\d\\d\\d$/);\n    return\
    \ $a if ($a =~ /^\\d+\\.\\d+\\.\\d\\d\\d\\d\\d\\d$/);\n    return $a if ($a =~\
    \ /^\\d+\\.\\d+\\.\\d+\\.\\d+$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\\
    d+\\.\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d\\d$/);\n    return\
    \ $a if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^\\\
    d+\\.\\d+\\.\\d+\\.\\d\\d\\d\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\\
    d+\\.\\d\\d\\d\\d\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d\\\
    d\\d\\d\\d\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/);\n\
    \    return $a if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d$/);\n    return $a\
    \ if ($a =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d\\d$/);\n    return $a if ($a =~\
    \ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d\\d\\d\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d\\d\\d\\d\\d$/);\n    return $a if ($a =~ /^\\d+\\.\\d+\\.\\\
    d+\\.\\d+\\.\\d\\d\\d\\d\\d\\d$/);\n", "    my $type = ref($a);\n    if ($type\
    \ eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    } elsif ($type eq 'ARRAY')\
    \ {\n        return @$a > @$b ? @$a : @$b;\n    } elsif ($type eq 'HASH') {\n\
    \        return %$a > %$b ? %$a : %$b;\n    } elsif ($type eq 'CODE') {\n    \
    \    return &$a > &$b ? &$a : &$b;\n    } elsif ($type eq 'GLOB') {\n        return\
    \ $a > $b ? $a : $b;\n    } elsif ($type eq 'IO::Handle') {\n        return $a\
    \ > $b ? $a : $b;\n    } elsif ($type eq 'overload::') {\n        return $a >\
    \ $b ? $a : $b;\n    } elsif ($type eq 'integer') {\n        return $a > $b ?\
    \ $a : $b;\n    } elsif ($type eq 'undef') {\n        return $a > $b ? $a : $b;\n\
    \    } else {\n        return $a > $b ? $a : $b;\n    }\n}", "    my $type = ref($a);\n\
    \    if ($type eq 'HASH') {\n        return $a->{val} > $b->{val} ? $a : $b;\n\
    \    } elsif ($type eq 'ARRAY') {\n        return $a->[0] > $b->[0] ? $a : $b;\n\
    \    } elsif ($type eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    } else\
    \ {\n        return $a > $b ? $a : $b;\n    }\n}", "    my $type = ref($a);\n\
    \    my $type2 = ref($b);\n    if ($type eq $type2) {\n        return $a > $b\
    \ ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($",
  "    my $type = ref($a) ? ref($a) : \"\";\n    my $type2 = ref($b) ? ref($b) : \"\
    \";\n    if ($type eq $type2) {\n        if ($type eq \"ARRAY\") {\n         \
    \   return $a > $b ? $a : $b;\n        } elsif ($type eq \"HASH\") {\n       \
    \     return $a > $b ? $b : $a;\n        } elsif ($type eq \"SCALAR\") {\n   \
    \         return $a > $b ? $a : $b;\n        } elsif ($type eq \"CODE\") {\n \
    \           return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO\") {\n \
    \           return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Handle\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Scalar\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Scalar::INET\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Scalar::INET6\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Scalar::UNIX\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Socket\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Socket::INET\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Socket::INET6\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Socket::UNIX\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Dir\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Dir::Iterator\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Dir::Iterator::Item\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO::Dir::Iterator::Filter\"\
    ) {\n            return $a > $b ? $a : $b;\n        } elsif ($type eq \"IO", " \
    \   my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n\
    \        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n \
    \       return compare_one($a->{value}, $b->{value});\n    }\n    elsif ($type\
    \ eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n    }\n    elsif\
    \ ($type eq \"SCALAR\") {\n        return compare_one($a, $b);\n    }\n    elsif\
    \ ($type eq \"CODE\") {\n        return compare_one($a->($a), $b->($b));\n   \
    \ }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a), $b->($b));\n\
    \    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a), $b->($b));\n\
    \    }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{value},\
    \ $b->{value});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{value},\
    \ $b->{value});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($",
  "    my $type = ref($a);\n    if ($type eq 'HASH') {\n        foreach my $key (keys\
    \ %$a) {\n            if ($a->{$key} ne $b->{$key}) {\n                return\
    \ $a->{$key};\n            }\n        }\n    } elsif ($type eq 'ARRAY') {\n  \
    \      foreach my $i (0 .. @$a-1) {\n            if (compare_one($a->[$i], $b->[$i])\
    \ == undef) {\n                return $a->[$i];\n            }\n        }\n  \
    \  } elsif ($type eq 'SCALAR') {\n        if ($a ne $b) {\n            return\
    \ $a;\n        }\n    } else {\n        return $a > $b ? $a : $b;\n    }\n   \
    \ return;\n}", "    return undef unless defined $a && defined $b;\n    return\
    \ $a > $b ? $a : $b;\n}", "    return undef if ($a eq $b);\n    return $a if ($a\
    \ =~ /^\\d+$/);\n    return $b if ($b =~ /^\\d+$/);\n    return $a if ($a =~ /^\\\
    d+\\.\\d+$/);\n    return $b if ($b =~ /^\\d+\\.\\d+$/);\n    return $a if ($a\
    \ =~ /^\\d+\\.\\d$/);\n    return $b if ($b =~ /^\\d+\\.\\d$/);\n    return $a\
    \ if ($a =~ /^\\d+\\.$/);\n    return $b if ($b =~ /^\\d+\\.$/);\n    return $a\
    \ if ($a =~ /^\\d+$/);\n    return $b if ($b =~ /^\\d+$/);\n    return $a if ($a\
    \ =~ /^\\d+,\\d+$/);\n    return $b if ($b =~ /^\\d+,\\d+$/);\n    return $a if\
    \ ($a =~ /^\\d+,\\d+\\.\\d+$/);\n    return $b if ($b =~ /^\\d+,\\d+\\.\\d+$/);\n\
    \    return $a if ($a =~ /^\\d+,\\d+\\.\\d$/);\n    return $b if ($b =~ /^\\d+,\\\
    d+\\.\\d$/);\n    return $a if ($a =~ /^\\d+,\\d+\\.$/);\n    return $b if ($b\
    \ =~ /^\\d+,\\d+\\.$/);\n    return $a if ($a =~ /^\\d+\\.\\d+$/);\n    return\
    \ $b if ($b =~ /^\\d+\\.\\d+$/);\n    return $a if ($a =~ /^\\d+\\.\\d$/);\n \
    \   return $b if ($b =~ /^\\d+\\.\\d$/);\n    return $a if ($a =~ /^\\d+\\.$/);\n\
    \    return $b if ($b =~ /^\\d+\\.$/);\n    return $a if ($a =~ /^\\d+$/);\n \
    \   return $b if ($b =~ /^\\d+$/);\n    return $a if ($a =~ /^\\d+,\\d+$/);\n\
    \    return $b if ($b =~ /^\\d+,\\d+$/);\n    return $a if ($a =~ /^\\d+,\\d+\\\
    .\\d+$/);\n    return $b if ($b =~ /^\\d+,\\d+\\.\\d+$/);\n    return $a if ($a\
    \ =~ /^\\d+,\\d+\\.\\d$/);\n    return $b if ($b =~ /^\\d+,\\d+\\.\\d$/);\n  \
    \  return $a if ($a =~ /^\\d+,\\d+\\.$/);\n    return $b if ($b =~ /^\\d+,\\d+\\\
    .", "    return $a if $a < $b;\n    return $b if ($a > $b);\n    return $a if\
    \ ($a eq $b);\n    return;\n}", "    return $a if $a eq $b;\n    return $b if\
    \ ($b eq $a) || ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return\
    \ $a if ($b eq \"undef\");\n    return $a if ($a eq $b);\n    return $a if ($b\
    \ eq $a);\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    ) || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\")\
    \ || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\")\
    \ || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\")\
    \ || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\")\
    \ || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n", "    return $a if $a < $b;\n   \
    \ return $b if ($a > $b);\n    return;\n}", "    my $type = ref($a);\n    my $type2\
    \ = ref($b);\n    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n\
    \    }\n    if ($type eq \"HASH\") {\n        my $akeys = keys %$a;\n        my\
    \ $bkeys = keys %$b;\n        return $akeys <=> $bkeys;\n    }\n    if ($type\
    \ eq \"ARRAY\") {\n        my $asize = @$a;\n        my $bsize = @$b;\n      \
    \  return $asize <=> $bsize;\n    }\n    if ($type eq \"SCALAR\") {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Handle\") {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::File\") {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar\") {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::INET\") {\n      \
    \  return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::INET6\") {\n\
    \        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::UNIX\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::INET::Socket\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::INET6::Socket\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::UNIX::Socket\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::INET::Fd\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::INET6::Fd\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::UNIX::Fd\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::INET::Socket::INET\"\
    ) {\n        return $a > $b ? $a : $b;\n    }\n    if ($type eq \"IO::Scalar::INET6::Socket",
  "    my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n\
    \        return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"ARRAY\") {\n\
    \        return compare_one($a->[0], $b->[0]) if @$a > @$b;\n        return compare_one($a->[0],\
    \ $b->[1]) if @$a == @$b;\n        return compare_one($a->[1], $b->[0]) if @$a\
    \ < @$b;\n        return compare_one($a->[1], $b->[1]) if @$a == @$b;\n      \
    \  return compare_one($a->[2], $b->[0]) if @$a < @$b;\n        return compare_one($a->[2],\
    \ $b->[1]) if @$a == @$b;\n        return compare_one($a->[3], $b->[0]) if @$a\
    \ < @$b;\n        return compare_one($a->[3], $b->[1]) if @$a == @$b;\n      \
    \  return compare_one($a->[4], $b->[0]) if @$a < @$b;\n        return compare_one($a->[4],\
    \ $b->[1]) if @$a == @$b;\n        return compare_one($a->[5], $b->[0]) if @$a\
    \ < @$b;\n        return compare_one($a->[5], $b->[1]) if @$a == @$b;\n      \
    \  return compare_one($a->[6], $b->[0]) if @$a < @$b;\n        return compare_one($a->[6],\
    \ $b->[1]) if @$a == @$b;\n        return compare_one($a->[7], $b->[0]) if @$a\
    \ < @$b;\n        return compare_one($a->[7], $b->[1]) if @$a == @$b;\n      \
    \  return compare_one($a->[8], $b->[0]) if @$a < @$b;\n        return compare_one($a->[8],\
    \ $b->[1]) if @$a == @$b;\n        return compare_one($a->[9], $b->[0]) if @$a\
    \ < @$b;\n        return compare_one($a->[9], $b->[1]) if @$a == @$b;\n      \
    \  return compare_one($a->[10], $b->[0]) if @$a < @$b;\n        return compare_one($a->[10],\
    \ $b->[1]) if @$a == @$b;\n        return compare_one($a->[11], $b->[0]) if @$a\
    \ < @$b;\n        return compare_one($a->[11], $b->[1]) if @$a == @$b;\n     \
    \   return compare_", "    my $type = ref($a);\n    my $type2 = ref($b);\n   \
    \ if ($type eq $type2) {\n        if ($type eq \"HASH\") {\n            foreach\
    \ my $key (keys %{$a}) {\n                if ($a->{$key} ne $b->{$key}) {\n  \
    \                  return $a->{$key};\n                }\n            }\n    \
    \    } elsif ($type eq \"ARRAY\") {\n            foreach my $i (0 .. @{$a} - 1)\
    \ {\n                my $val = $a->[$i];\n                my $val2 = $b->[$i];\n\
    \                if ($val ne $val2) {\n                    return $val;\n    \
    \            }\n            }\n        } elsif ($type eq \"SCALAR\") {\n     \
    \       my $val = $a;\n            my $val2 = $b;\n            if ($val ne $val2)\
    \ {\n                return $val;\n            }\n        } elsif ($type eq \"\
    CODE\") {\n            my $val = $a;\n            my $val2 = $b;\n           \
    \ if ($val ne $val2) {\n                return $val;\n            }\n        }\
    \ else {\n            return $a if $a > $b;\n            return $b if $a < $b;\n\
    \        }\n    } else {\n        return $a if $a > $b;\n        return $b if\
    \ $a < $b;\n    }\n}", "    my $type = ref($a);\n    if ($type eq 'HASH') {\n\
    \        return $a->{val} > $b->{val} ? $a : $b;\n    } elsif ($type eq 'ARRAY')\
    \ {\n        return $a->[0] > $b->[0] ? $a : $b;\n    } elsif ($type eq 'SCALAR')\
    \ {\n        return $a > $b ? $a : $b;\n    } elsif ($type eq 'CODE') {\n    \
    \    return $a->($a) > $b->($b) ? $a : $b;\n    } else {\n        return $a >\
    \ $b ? $a : $b;\n    }\n}", "    return $a if $a eq $b;\n    return $b if ($b\
    \ eq $a);\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef", "    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return\
    \ $a if $a =~ /^\\d+$/;\n    return $a if $b =~ /^\\d+$/;\n    return $a if $a\
    \ =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a\
    \ if $a =~ /^\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*/;\n    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\\
    d+,\\d+$/;\n    return $a if $b =~ /^\\d+,\\d+$/;\n    return $a if $a =~ /^\\\
    d+,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+,\\d+\\.\\d*$/;\n    return $a\
    \ if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d+\\.\\d*/;\n\
    \    return $a if $a =~ /^\\d+,\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\\
    d+,\\d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*,\\d+\\.\\d*$/;\n\
    \    return $a if $b =~ /^\\d+,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a\
    \ =~ /^\\d+,\\d+\\.\\d*,\\d+\\.\\d*/;\n    return $a if $b =~ /^\\d+,\\d+\\.\\\
    d*,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if\
    \ $b =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*", "    return\
    \ $a if $a eq $b;\n    return $b if ($b eq $a);\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\" ||\
    \ $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a\
    \ eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef", "    if ($a eq $b) {\n  \
    \      return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*$/) {\n        return\
    \ $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*$/) {\n        return $a;\n    }\n\
    \    elsif ($a =~ /^\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\\
    d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d+$/) {\n    \
    \    return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d+$/) {\n        return $a;\n\
    \    }\n    elsif ($a =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\\
    d+\\.?\\d*,\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\\
    d*,\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\\
    .\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\d+\\\
    .\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\\
    .\\d*$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\d+\\\
    .\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\\
    .?\\d*$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\d+\\\
    .?\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*,\\d+\\\
    .?\\d*,\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*,\\\
    d+\\.?\\d*,\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\\
    d*,\\d+\\.?\\d*,\\d+\\.\\d*$/) {\n        return $b;\n    }\n    elsif ($b =~\
    \ /^\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.\\d*$/) {\n        return $a;\n    }\n  \
    \  elsif ($a =~ /^\\d+\\.", "    my $type = ref($a);\n    if ($type eq 'HASH')\
    \ {\n        my $a_keys = sort keys %$a;\n        my $b_keys = sort keys %$b;\n\
    \        return undef if $a_keys eq $b_keys;\n        return $a->{$b_keys[0]}\
    \ if $b_keys[0] =~ /^\\d+$/;\n        return $a->{$b_keys[0]} if $b_keys[0] =~\
    \ /^[+-]?\\d+$/;\n        return $a->{$b_keys[0]} if $b_keys[0] =~ /^[+-]?\\d*\\\
    .?\\d*$/;\n        return $a->{$b_keys[0]} if $b_keys[0] =~ /^[+-]?\\d*\\.?\\\
    d*,?\\d*$/;\n        return $a->{$b_keys[0]} if $b_keys[0] =~ /^[+-]?\\d*\\.?\\\
    d*,?\\d*\\.?\\d*$/;\n        return $a->{$b_keys[0]} if $b_keys[0] =~ /^[+-]?\\\
    d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*$/;\n        return $a->{$b_keys[0]} if $b_keys[0]\
    \ =~ /^[+-]?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/;\n        return $a->{$b_keys[0]}\
    \ if $b_keys[0] =~ /^[+-]?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*$/;\n\
    \        return $a->{$b_keys[0]} if $b_keys[0] =~ /^[+-]?\\d*\\.?\\d*,?\\d*\\\
    .?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/;\n        return $a->{$b_keys[0]} if $b_keys[0]\
    \ =~ /^[+-]?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\\
    d*$/;\n        return $a->{$b_keys[0]} if $b_keys[0] =~ /^[+-]?\\d*\\.?\\d*,?\\\
    d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/;\n      \
    \  return $a->{$b_keys[0]} if $b_keys[0] =~ /^[+-]?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\\
    d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/;\n      \
    \  return $a->{$b_keys[0]", "    return undef unless defined $a and defined $b;\n\
    \    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a lt\
    \ $b;\n    return $a if $b lt $a;\n    return $a if $a gt $b;\n    return $a if\
    \ $b gt $a;\n    return $a if $a le $b;\n    return $a if $b le $a;\n    return\
    \ $a if $a ge $b;\n    return $a if $b ge $a;\n    return $a if $a cmp $b;\n \
    \   return $a if $b cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b\
    \ cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return\
    \ $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return $a if $a cmp $b;\n\
    \    return $a if $b cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b\
    \ cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return\
    \ $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return $a if $a cmp $b;\n\
    \    return $a if $b cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b\
    \ cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return\
    \ $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return $a if $a cmp $b;\n\
    \    return $a if $b cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b\
    \ cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return\
    \ $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return $a if $a cmp $b;\n\
    \    return $a if $b cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b\
    \ cmp $a;\n    return $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return\
    \ $a if $a cmp $b;\n    return $a if $b cmp $a;\n    return $", "    my $type\
    \ = ref($a);\n    if ($type eq 'SCALAR') {\n        if ($a eq $b) {\n        \
    \    return $a;\n        }\n    }\n    elsif ($type eq 'ARRAY') {\n        if\
    \ (@$a eq @$b) {\n            return $a->[0];\n        }\n    }\n    elsif ($type\
    \ eq 'HASH') {\n        if (keys %$a eq keys %$b) {\n            return $a->[0];\n\
    \        }\n    }\n    elsif ($type eq 'CODE') {\n        if (&$a eq &$b) {\n\
    \            return $a->[0];\n        }\n    }\n    elsif ($type eq 'GLOB') {\n\
    \        if (&$a eq &$b) {\n            return $a->[0];\n        }\n    }\n  \
    \  elsif ($type eq 'IO::Handle') {\n        if ($a->isa('IO::Handle') && $b->isa('IO::Handle'))\
    \ {\n            return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::File') {\n        if ($a->isa('IO::File') && $b->isa('IO::File')) {\n\
    \            return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type eq 'IO::Socket')\
    \ {\n        if ($a->isa('IO::Socket') && $b->isa('IO::Socket')) {\n         \
    \   return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type eq 'IO::Select')\
    \ {\n        if ($a->isa('IO::Select') && $b->isa('IO::Select')) {\n         \
    \   return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type eq 'IO::Poll')\
    \ {\n        if ($a->isa('IO::Poll') && $b->isa('IO::Poll')) {\n            return\
    \ $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type eq 'IO::Dir') {\n    \
    \    if ($a->isa('IO::Dir') && $b->isa('IO::Dir')) {\n            return $a->fh\
    \ eq $b->fh;\n        }\n    }\n    elsif ($type eq 'IO::Seekable') {\n      \
    \  if ($a->isa('IO::Seekable') && $b->isa('IO::Seekable')) {\n            return\
    \ $a->f", "    return $a if $a < $b;\n    return $b if ($a > $b);\n    return;\n\
    }", "    return $a if $a eq $b;\n    return $b if ($a eq \"undef\" || $b eq \"\
    undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"", "    my $type = ref($a) ? ref($a) : \"\";\n    my\
    \ $type2 = ref($b) ? ref($b) : \"\";\n    if ($type eq $type2) {\n        if ($type\
    \ eq \"ARRAY\") {\n            foreach my $i (@$a) {\n                if ($i ne\
    \ $b) {\n                    return $i;\n                }\n            }\n  \
    \      } elsif ($type eq \"HASH\") {\n            foreach my $k (keys %$a) {\n\
    \                if ($k ne $b) {\n                    return $a->{$k};\n     \
    \           }\n            }\n        } elsif ($type eq \"CODE\") {\n        \
    \    my $code = $a;\n            my $code2 = $b;\n            while (1) {\n  \
    \              last if $code->() eq $code2->();\n                last if $code->()\
    \ eq \"\";\n                $code = $code->();\n                $code2 = $code2->();\n\
    \            }\n        } elsif ($type eq \"SCALAR\") {\n            return $a\
    \ if $a > $b;\n            return $b if $a < $b;\n            return $a if $a\
    \ == $b;\n            return $b if $a != $b;\n        } elsif ($type eq \"REF\"\
    ) {\n            return $a if $a > $b;\n            return $b if $a < $b;\n  \
    \          return $a if $a == $b;\n            return $b if $a != $b;\n      \
    \  } elsif ($type eq \"IO\") {\n            return $a if $a > $b;\n          \
    \  return $b if $a < $b;\n            return $a if $a == $b;\n            return\
    \ $b if $a != $b;\n        } elsif ($type eq \"IO::Scalar\") {\n            return\
    \ $a if $a > $b;\n            return $b if $a < $b;\n            return $a if\
    \ $a == $b;\n            return $b if $a != $b;\n        } elsif ($type eq \"\
    IO::Handle\") {\n            return $a if $a > $b;\n            return $b if $a\
    \ < $b;\n            return $a if $a == $b;\n            return $b if $a != $b;\n\
    \        } elsif ($type eq \"IO::File\") {\n            return $a if $a > $b;\n\
    \            return $b if $a < $b;\n            return $a if $a == $b;\n     \
    \       return $b if $a != $b;\n        } elsif ($type eq \"IO::Dir\") {\n   \
    \         return $a if $a > $b;\n            return $b if $a < $b;\n         \
    \   return $a if $a == ", "    my $type = ref($a);\n    if ($type eq 'SCALAR')\
    \ {\n        if ($a eq $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'ARRAY') {\n        if (@$a eq @$b) {\n            return $a;\n  \
    \      }\n    }\n    elsif ($type eq 'HASH') {\n        if (keys %$a eq keys %$b)\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'CODE') {\n\
    \        if (&$a eq &$b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'GLOB') {\n        if (*$a eq *$b) {\n            return $a;\n   \
    \     }\n    }\n    elsif ($type eq 'IO::Handle') {\n        if ($a->isa('IO::Handle')\
    \ && $b->isa('IO::Handle')) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::File') {\n        if ($a->isa('IO::File') && $b->isa('IO::File'))\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Socket::INET')\
    \ {\n        if ($a->isa('IO::Socket::INET') && $b->isa('IO::Socket::INET')) {\n\
    \            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Socket::UNIX')\
    \ {\n        if ($a->isa('IO::Socket::UNIX') && $b->isa('IO::Socket::UNIX')) {\n\
    \            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Socket::SSL')\
    \ {\n        if ($a->isa('IO::Socket::SSL') && $b->isa('IO::Socket::SSL')) {\n\
    \            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Socket::IP')\
    \ {\n        if ($a->isa('IO::Socket::IP') && $b->isa('IO::Socket::IP')) {\n \
    \           return $a;\n        }\n    }\n    elsif ($type eq 'IO::Socket::INET6')\
    \ {\n        if ($a->isa('IO::Socket::INET6') && $b->isa('IO::Socket::INET6'))\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Socket::UNIX6')\
    \ {\n        if ($a->", "    my $type = ref($a) eq 'SCALAR' ? ref($a) : ref($a);\n\
    \    my $type2 = ref($b) eq 'SCALAR' ? ref($b) : ref($b);\n    my $cmp = $type\
    \ cmp $type2;\n    if ($cmp == 0) {\n        return $a cmp $b;\n    }\n    elsif\
    \ ($cmp < 0) {\n        return $a < $b;\n    }\n    elsif ($cmp > 0) {\n     \
    \   return $a > $b;\n    }\n    return undef;\n}", "    return $a if $a eq $b;\n\
    \    return $a if $b eq $a;\n    return $a if $a =~ /^\\d+$/;\n    return $a if\
    \ $b =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b\
    \ =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if\
    \ $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a\
    \ if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return ",
  "    my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n\
    \        if ($type eq \"ARRAY\") {\n            foreach my $v (@$a) {\n      \
    \          my $v2 = $v->[0];\n                if ($v2 ne $b) {\n             \
    \       return $v2;\n                }\n            }\n        } elsif ($type\
    \ eq \"HASH\") {\n            foreach my $k (keys %$a) {\n                my $v2\
    \ = $a->{$k};\n                if ($v2 ne $b->{$k}) {\n                    return\
    \ $v2;\n                }\n            }\n        } elsif ($type eq \"CODE\")\
    \ {\n            my $v2 = $a->($b);\n            if ($v2 ne $b->($a)) {\n    \
    \            return $v2;\n            }\n        } else {\n            my $v2\
    \ = $a;\n            if ($v2 ne $b) {\n                return $v2;\n         \
    \   }\n        }\n    } else {\n        return undef;\n    }\n    return undef;\n\
    }", "    my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2)\
    \ {\n        if ($type eq \"SCALAR\") {\n            return $a > $b ? $a : $b;\n\
    \        } elsif ($type eq \"ARRAY\") {\n            foreach my $i (@$a) {\n \
    \               my $cmp = compare_one($i, $b);\n                if ($cmp eq undef)\
    \ {\n                    return undef;\n                }\n            }\n   \
    \         return $a > $b ? $a : $b;\n        } elsif ($type eq \"HASH\") {\n \
    \           foreach my $k (keys %$a) {\n                my $cmp = compare_one($a->{$k},\
    \ $b);\n                if ($cmp eq undef) {\n                    return undef;\n\
    \                }\n            }\n            return $a > $b ? $a : $b;\n   \
    \     } elsif ($type eq \"CODE\") {\n            my $cmp = compare_one($a->($b),\
    \ $b);\n            if ($cmp eq undef) {\n                return undef;\n    \
    \        }\n            return $a > $b ? $a : $b;\n        } else {\n        \
    \    return $a > $b ? $a : $b;\n        }\n    } else {\n        return $a > $b\
    \ ? $a : $b;\n    }\n}", "    return undef unless $a eq $b;\n    return $a if\
    \ $a =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $a\
    \ =~ /^\\d+\\.\\d*,\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+$/;\n   \
    \ return $a if $a =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $a =~ /^\\d+,\\d+$/;\n    return $a if $a =~ /^\\d+,\\d*$/;\n\
    \    return $a if $a =~ /^\\d+,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+,\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a\
    \ =~ /^\\d+,\\d*$/;\n    return $a if $a =~ /^\\d+,\\d*\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+,\\d*\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d*\\.\\d*/;\n\
    \    return $a if $a =~ /^\\d+,\\d+$/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\\
    d*$/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\\
    d+,\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d*$/;\n    return $a if $a =~\
    \ /^\\d+,\\d*\\.\\d*$/;\n    return $a if $a =~ /^\\d+,\\d*\\.\\d*/;\n    return\
    \ $a if $a =~ /^\\d+,\\d*\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+$/;\n  \
    \  return $a if $a =~ /^\\d+,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+,\\\
    d+\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d+\\.\\d*/;\n    return $a if $a\
    \ =~ /^\\d+,\\d*$/;\n    return $a if $a =~ /^\\d+,\\d*\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+,\\d*\\.\\d*/;\n    return $a if $a =~ /^\\d+,\\d*\\.\\d*/;\n",
  "    my $type = ref($a);\n    if ($type eq 'HASH') {\n        if ($a->{val} ne $b->{val})\
    \ {\n            return $a->{val};\n        }\n    }\n    elsif ($type eq 'ARRAY')\
    \ {\n        if (@$a != @$b) {\n            return $a->[0];\n        }\n    }\n\
    \    elsif ($type eq 'SCALAR') {\n        if ($a ne $b) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'CODE') {\n        if (&$a ne &$b)\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'GLOB') {\n\
    \        if ($a ne $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Scalar') {\n        if ($a ne $b) {\n            return $a;\n\
    \        }\n    }\n    elsif ($type eq 'IO::Handle') {\n        if ($a ne $b)\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'IO::File')\
    \ {\n        if ($a ne $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Socket') {\n        if ($a ne $b) {\n            return $a;\n\
    \        }\n    }\n    elsif ($type eq 'IO::Select') {\n        if ($a ne $b)\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Poll')\
    \ {\n        if ($a ne $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Dir') {\n        if ($a ne $b) {\n            return $a;\n  \
    \      }\n    }\n    elsif ($type eq 'IO::Seekable') {\n        if ($a ne $b)\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'IO::DirHandle')\
    \ {\n        if ($a ne $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Handle') {\n        if ($a ne $b) {\n            return $a;\n\
    \        }\n    }\n    elsif ($type eq 'IO::Socket') {\n        if ($a ne $b)\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Select')\
    \ {\n        if ($a ne $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'IO::Poll') {\n        if ($a ne $b) {\n            return ", "  \
    \  my $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n\
    \        return $a if $a > $b;\n        return $b if $a < $b;\n        return\
    \ $a if $a eq $b;\n        return undef;\n    }\n    if ($type eq \"HASH\") {\n\
    \        return compare_one($a->{val}, $b->{val});\n    }\n    if ($type eq \"\
    ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n    }\n    if ($type\
    \ eq \"SCALAR\") {\n        return compare_one($a, $b);\n    }\n    if ($type\
    \ eq \"HASH ref\") {\n        return compare_one($a->{val}, $b->{val});\n    }\n\
    \    if ($type eq \"ARRAY ref\") {\n        return compare_one($a->[0], $b->[0]);\n\
    \    }\n    if ($type eq \"SCALAR ref\") {\n        return compare_one($a, $b);\n\
    \    }\n    if ($type eq \"IO::File\") {\n        return compare_one($a->{fh},\
    \ $b->{fh});\n    }\n    if ($type eq \"IO::Handle\") {\n        return compare_one($a->{handle},\
    \ $b->{handle});\n    }\n    if ($type eq \"IO::Seekable\") {\n        return\
    \ compare_one($a->{fh}, $b->{fh});\n    }\n    if ($type eq \"IO::Scalar\") {\n\
    \        return compare_one($a->{handle}, $b->{handle});\n    }\n    if ($type\
    \ eq \"IO::Handle\") {\n        return compare_one($a->{handle}, $b->{handle});\n\
    \    }\n    if ($type eq \"IO::Scalar\") {\n        return compare_one($a->{handle},\
    \ $b->{handle});\n    }\n    if ($type eq \"IO::File\") {\n        return compare_one($a->{fh},\
    \ $b->{fh});\n    }\n    if ($type eq \"IO::Handle\") {\n        return compare_one($a->{handle},\
    \ $b->{handle});\n    }\n    if ($type eq \"IO::Scalar\") {\n        return compare_one($a->{handle},\
    \ $b->{handle});\n    }\n    if ($type eq \"IO::Seekable\") {\n        return\
    \ compare_one($a->{fh}, $b->{fh});\n    }\n    if ($type eq \"IO::Scalar\") {\n\
    \        return compare_one($a->{handle}, $b->{handle});\n    }\n    if ($type\
    \ eq \"IO::Handle\") {\n        return compare_one($a->{", "    my $type = ref($a);\n\
    \    my $type2 = ref($b);\n    if ($type eq $type2) {\n        if ($type eq 'ARRAY')\
    \ {\n            return $a if $a > $b;\n            return $b if $a < $b;\n  \
    \          return $a if $a == $b;\n            return undef;\n        }\n    \
    \    if ($type eq 'HASH') {\n            return $a if $a->{value} > $b->{value};\n\
    \            return $b if $a->{value} < $b->{value};\n            return $a if\
    \ $a->{value} == $b->{value};\n            return undef;\n        }\n        if\
    \ ($type eq 'SCALAR') {\n            return $a if $a > $b;\n            return\
    \ $b if $a < $b;\n            return $a if $a == $b;\n            return undef;\n\
    \        }\n        if ($type eq 'CODE') {\n            return $a if $a->() >\
    \ $b->();\n            return $b if $a->() < $b->();\n            return $a if\
    \ $a->() == $b->();\n            return undef;\n        }\n        if ($type eq\
    \ 'REF') {\n            return $a if $a->() > $b->();\n            return $b if\
    \ $a->() < $b->();\n            return $a if $a->() == $b->();\n            return\
    \ undef;\n        }\n        if ($type eq 'IO::Handle') {\n            return\
    \ $a if $a->() > $b->();\n            return $b if $a->() < $b->();\n        \
    \    return $a if $a->() == $b->();\n            return undef;\n        }\n  \
    \      if ($type eq 'IO::File') {\n            return $a if $a->() > $b->();\n\
    \            return $b if $a->() < $b->();\n            return $a if $a->() ==\
    \ $b->();\n            return undef;\n        }\n        if ($type eq 'IO::Scalar')\
    \ {\n            return $a if $a->() > $b->();\n            return $b if $a->()\
    \ < $b->();\n            return $a if $a->() == $b->();\n            return undef;\n\
    \        }\n        if ($type eq 'IO::Socket') {\n            return $a if $a->()\
    \ > $b->();\n            return $b if $a->() < $b->();\n            return $a\
    \ if $a->() == $b->();\n            return undef;\n        }\n        if ($type\
    \ eq 'IO::Select') {\n            return $a if $a->() > $b->();\n            return\
    \ $b if $a->() < ", "    return $a if $a < $b;\n    return $b if ($a > $b);\n\
    \    return;\n}", "    return $a if $a eq $b;\n    return $a if $b eq $a;\n  \
    \  return $a if $a =~ /^\\d+$/;\n    return $a if $b =~ /^\\d+$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\\
    d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a\
    \ if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.", "    my $type = ref($a) ? ref($a)\
    \ : \"\";\n    my $type2 = ref($b) ? ref($b) : \"\";\n    my $result;\n    if\
    \ ($type eq $type2) {\n        $result = $a > $b ? $a : $b;\n    }\n    else {\n\
    \        $result = $a > $b ? $b : $a;\n    }\n    return $result;\n}", "    return\
    \ $a if $a eq $b;\n    return $b if ($b eq $a) || ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a\
    \ if ($a eq $b);\n    return $a if ($b eq $a);\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n\
    \    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n  \
    \  return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return\
    \ $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b\
    \ if ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if\
    \ ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"\
    undef\");\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n  \
    \  return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a\
    \ if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq\
    \ \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"",
  "    my $type = ref($a) || ref($b);\n    if ($type eq 'HASH') {\n        my $cmp\
    \ = compare_one($a->{val}, $b->{val});\n        return $cmp if $cmp;\n    }\n\
    \    elsif ($type eq 'ARRAY') {\n        my $cmp = compare_one($a->[0], $b->[0]);\n\
    \        return $cmp if $cmp;\n    }\n    elsif ($type eq 'SCALAR') {\n      \
    \  return $a > $b ? 1 : 0;\n    }\n    elsif ($type eq 'CODE') {\n        return\
    \ $a->($b) ? 1 : 0;\n    }\n    elsif ($type eq 'Regexp') {\n        return $a\
    \ =~ /$b/;\n    }\n    elsif ($type eq 'Regexp') {\n        return $a =~ /$b/;\n\
    \    }\n    elsif ($type eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n    }\n\
    \    elsif ($type eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n    }\n    elsif\
    \ ($type eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n    }\n    elsif ($type\
    \ eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n    }\n    elsif ($type eq 'CODE')\
    \ {\n        return $a->($b) ? 1 : 0;\n    }\n    elsif ($type eq 'CODE') {\n\
    \        return $a->($b) ? 1 : 0;\n    }\n    elsif ($type eq 'CODE') {\n    \
    \    return $a->($b) ? 1 : 0;\n    }\n    elsif ($type eq 'CODE') {\n        return\
    \ $a->($b) ? 1 : 0;\n    }\n    elsif ($type eq 'CODE') {\n        return $a->($b)\
    \ ? 1 : 0;\n    }\n    elsif ($type eq 'CODE') {\n        return $a->($b) ? 1\
    \ : 0;\n    }\n    elsif ($type eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n\
    \    }\n    elsif ($type eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n    }\n\
    \    elsif ($type eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n    }\n    elsif\
    \ ($type eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n    }\n    elsif ($type\
    \ eq 'CODE') {\n        return $a->($b) ? 1 : 0;\n    }\n    elsif ($type eq 'CODE",
  "    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a =~\
    \ /^-?\\d+$/;\n    return $a if $b =~ /^-?\\d+$/;\n    return $a if $a =~ /^-?\\\
    d+\\.\\d*$/;\n    return $a if $b =~ /^-?\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^-?\\d+\\.?\\d*$/;\n    return $a if $b =~ /^-?\\d+\\.?\\d*$/;\n    return\
    \ $a if $a =~ /^-?\\d+\\.?\\d*\\.\\d*$/;\n    return $a if $b =~ /^-?\\d+\\.?\\\
    d*\\.\\d*$/;\n    return $a if $a =~ /^-?\\d+\\.?\\d*\\.?\\d*$/;\n    return $a\
    \ if $b =~ /^-?\\d+\\.?\\d*\\.?\\d*$/;\n    return $a if $a =~ /^-?\\d+\\.?\\\
    d*\\.?\\d*\\.\\d*$/;\n    return $a if $b =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.\\d*$/;\n\
    \    return $a if $a =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\.\\d*$/;\n    return\
    \ $a if $b =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\.\\d*$/;\n    return $a if $a\
    \ =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*$/;\n    return $a if $b =~ /^-?\\\
    d+\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.\\d*$/;\n    return $a if $a =~ /^-?\\d+\\\
    .?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*$/;\n    return $a if $b =~ /^-?\\d+\\.?\\\
    d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.\\d*$/;\n    return $a if $a =~ /^-?\\d+\\\
    .?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*$/;\n    return $a if $b =~ /^-?\\\
    d+\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.\\d*$/;\n    return $a if\
    \ $a =~ /^-?\\d+\\.?\\d*\\.?\\d*\\.?\\d*\\.?\\d*\\.?", "    if ($a eq $b) {\n\
    \        return $a;\n    }\n    if ($a =~ /^-?\\d+$/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^-?\\d+$/) {\n        return $b;\n    }\n    if ($a =~\
    \ /^-?\\d+\\.\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\\
    d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*$/) {\n      \
    \  return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*$/) {\n     \
    \   return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*$/) {\n    \
    \    return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*$/)\
    \ {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\\
    ,\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\\
    ,\\d*\\,\\d*\\,\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\\
    .\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $b;\n    }\n    if ($a\
    \ =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\\
    d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\\
    d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $a;\n    }\n    if\
    \ ($b =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\\
    d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\\
    d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return ",
  "    return $a if $a eq $b;\n    return $b if ($b eq $a);\n    return $a if ($a\
    \ eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq\
    \ \"undef\" || $b eq \"undef\");\n    return $a if ($b eq \"undef\" || $a eq \"\
    undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $", "    my $type = ref($a);\n    if ($type eq 'SCALAR')\
    \ {\n        return $a if $a > $b;\n        return $b if $a < $b;\n        return\
    \ $a if $a eq $b;\n        return undef;\n    }\n    elsif ($type eq 'ARRAY')\
    \ {\n        foreach my $elem (@$a) {\n            my $elem_type = ref($elem);\n\
    \            if ($elem_type eq 'SCALAR') {\n                return $elem if $elem\
    \ > $b;\n                return $b if $elem < $b;\n                return $elem\
    \ if $elem eq $b;\n                return undef;\n            }\n        }\n \
    \   }\n    elsif ($type eq 'HASH') {\n        foreach my $key (keys %$a) {\n \
    \           my $key_type = ref($key);\n            if ($key_type eq 'SCALAR')\
    \ {\n                return $a->{$key} if $a->{$key} > $b;\n                return\
    \ $b if $a->{$key} < $b;\n                return $a->{$key} if $a->{$key} eq $b;\n\
    \                return undef;\n            }\n        }\n    }\n    elsif ($type\
    \ eq 'CODE') {\n        return $a->($b) if $a->($b) > $b;\n        return $b if\
    \ $a->($b) < $b;\n        return $a->($b) if $a->($b) eq $b;\n        return undef;\n\
    \    }\n    elsif ($type eq 'IO::Handle') {\n        return $a->($b) if $a->($b)\
    \ > $b;\n        return $b if $a->($b) < $b;\n        return $a->($b) if $a->($b)\
    \ eq $b;\n        return undef;\n    }\n    elsif ($type eq 'IO::Scalar') {\n\
    \        return $a->($b) if $a->($b) > $b;\n        return $b if $a->($b) < $b;\n\
    \        return $a->($b) if $a->($b) eq $b;\n        return undef;\n    }\n  \
    \  elsif ($type eq 'IO::File') {\n        return $a->($b) if $a->($b) > $b;\n\
    \        return $b if $a->($b) < $b;\n        return $a->($b) if $a->($b) eq $b;\n\
    \        return undef;\n    }\n    elsif ($type eq 'IO::Socket') {\n        return\
    \ $a->($b) if $", "    my $type = ref($a);\n    if ($type eq 'HASH') {\n     \
    \   foreach my $key (keys %{$a}) {\n            if ($b eq $a->{$key}) {\n    \
    \            return $key;\n            }\n        }\n    } elsif ($type eq 'ARRAY')\
    \ {\n        foreach my $key (0 .. @$a-1) {\n            if ($b eq $a->[$key])\
    \ {\n                return $key;\n            }\n        }\n    } elsif ($type\
    \ eq 'SCALAR') {\n        if ($b eq $a) {\n            return undef;\n       \
    \ }\n    }\n    return $b;\n}", "    my $type = ref($a);\n    if ($type eq 'SCALAR')\
    \ {\n        if ($a eq $b) {\n            return $a;\n        }\n    }\n    elsif\
    \ ($type eq 'ARRAY') {\n        if (@$a eq @$b) {\n            return $a->[0];\n\
    \        }\n    }\n    elsif ($type eq 'HASH') {\n        if (keys %$a eq keys\
    \ %$b) {\n            return $a->[0];\n        }\n    }\n    elsif ($type eq 'CODE')\
    \ {\n        if (&$a eq &$b) {\n            return $a->[0];\n        }\n    }\n\
    \    elsif ($type eq 'GLOB') {\n        if ($a eq $b) {\n            return $a;\n\
    \        }\n    }\n    elsif ($type eq 'IO::Handle') {\n        if ($a->isa('IO::Handle')\
    \ && $b->isa('IO::Handle')) {\n            return $a->isa($b);\n        }\n  \
    \  }\n    elsif ($type eq 'IO::File') {\n        if ($a->isa('IO::File') && $b->isa('IO::File'))\
    \ {\n            return $a->isa($b);\n        }\n    }\n    elsif ($type eq 'IO::Socket')\
    \ {\n        if ($a->isa('IO::Socket') && $b->isa('IO::Socket')) {\n         \
    \   return $a->isa($b);\n        }\n    }\n    elsif ($type eq 'IO::Select') {\n\
    \        if ($a->isa('IO::Select') && $b->isa('IO::Select')) {\n            return\
    \ $a->isa($b);\n        }\n    }\n    elsif ($type eq 'IO::Poll') {\n        if\
    \ ($a->isa('IO::Poll') && $b->isa('IO::Poll')) {\n            return $a->isa($b);\n\
    \        }\n    }\n    elsif ($type eq 'IO::Dir') {\n        if ($a->isa('IO::Dir')\
    \ && $b->isa('IO::Dir')) {\n            return $a->isa($b);\n        }\n    }\n\
    \    elsif ($type eq 'IO::Seekable') {\n        if ($a->isa('IO::Seekable') &&\
    \ $b->isa('IO::Seekable')) {\n            return $a->isa($b);\n        }\n   \
    \ }\n    elsif ($type eq 'IO::Zlib') {\n        if ($a->isa('", "    return $a\
    \ if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a =~ /^\\d+$/;\n\
    \    return $a if $b =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n \
    \   return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*/;\n\
    \    return $a if $b =~ /^\\d+\\.\\d*/;\n    return $a if $a =~ /^\\d+\\.\\d*$/;\n\
    \    return ", "    my $type = ref($a);\n    if ($type eq 'HASH') {\n        my\
    \ $a_keys = keys %$a;\n        my $b_keys = keys %$b;\n        if ($a_keys ne\
    \ $b_keys) {\n            return $b_keys if $a_keys < $b_keys;\n            return\
    \ $a_keys if $a_keys > $b_keys;\n        }\n        foreach my $key (keys %$a)\
    \ {\n            my $a_val = $a->{$key};\n            my $b_val = $b->{$key};\n\
    \            if ($a_val ne $b_val) {\n                return $b_val if $a_val\
    \ < $b_val;\n                return $a_val if $a_val > $b_val;\n            }\n\
    \        }\n        return $a->{undef} if keys %$a != keys %$b;\n        return\
    \ $a->{undef};\n    }\n    elsif ($type eq 'ARRAY') {\n        foreach my $val\
    \ (@$a) {\n            my $a_val = $val;\n            my $b_val = $b->[0];\n \
    \           if ($a_val ne $b_val) {\n                return $b_val if $a_val <\
    \ $b_val;\n                return $a_val if $a_val > $b_val;\n            }\n\
    \        }\n        return $a->[0] if @$a != @$b;\n        return $a->[0];\n \
    \   }\n    elsif ($type eq 'SCALAR') {\n        my $a_val = $a;\n        my $b_val\
    \ = $b;\n        if ($a_val ne $b_val) {\n            return $b_val if $a_val\
    \ < $b_val;\n            return $a_val if $a_val > $b_val;\n        }\n      \
    \  return $a_val if $a < $b;\n        return $a_val if $a > $b;\n    }\n    elsif\
    \ ($type eq 'CODE') {\n        my $a_val = $a->();\n        my $b_val = $b->();\n\
    \        if ($a_val ne $b_val) {\n            return $b_val if $a_val < $b_val;\n\
    \            return $a_val if $a_val > $b_val;\n        }\n        return $a_val\
    \ if $a->() < $b->();\n        return $a_val if $a->() > $b->();\n    }\n    elsif\
    \ ($type eq 'GLOB') {\n        my $a_val = $a->();\n        my $b_val = $b->();\n\
    \        if ($a_val ne $b_val) {\n            return $b_val if $a_val < $b_val;\n\
    \            return $a_val if $a_val", "    my $type = ref($a);\n    my $type2\
    \ = ref($b);\n    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n\
    \    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"VMS\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO::Seekable\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO::Dir\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO::Socket\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"IO::Socket::INET\") {\n        return\
    \ compare_one($a->($a), $b->($b));\n    }\n    elsif ($type eq \"IO::Socket::UNIX\"\
    ) {\n        return compare_one($a->($a), $b->($b));\n    }\n    elsif ($type\
    \ eq \"IO::Socket::SSL\") {\n        return compare_one($a->($a), $b->($b));\n\
    \    }\n    elsif ($type eq \"IO::Socket::SSL::INET\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ", "    my $type = ref($a);\n    my $type2 = ref($b);\n\
    \    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($type eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]) ? $a->[0]\
    \ : $b->[0];\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{key},\
    \ $b->{key}) ? $a->{key} : $b->{key};\n    }\n    elsif ($type eq \"CODE\") {\n\
    \        return compare_one($a->($a), $b->($b)) ? $a->($a) : $b->($b);\n    }\n\
    \    elsif ($type eq \"SCALAR\") {\n        return compare_one($a->(), $b->())\
    \ ? $a->() : $b->();\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a->($a),\
    \ $b->($b)) ? $a->($a) : $b->($b);\n    }\n    elsif ($type eq \"VMS\") {\n  \
    \      return compare_one($a->($a), $b->($b)) ? $a->($a) : $b->($b);\n    }\n\
    \    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->($a), $b->($b))\
    \ ? $a->($a) : $b->($b);\n    }\n    elsif ($type eq \"IO::File\") {\n       \
    \ return compare_one($a->($a), $b->($b)) ? $a->($a) : $b->($b);\n    }\n    elsif\
    \ ($type eq \"IO::Pipe\") {\n        return compare_one($a->($a), $b->($b)) ?\
    \ $a->($a) : $b->($b);\n    }\n    elsif ($type eq \"IO::Socket\") {\n       \
    \ return compare_one($a->($a), $b->($b)) ? $a->($a) : $b->($b);\n    }\n    elsif\
    \ ($type eq \"IO::Dir\") {\n        return compare_one($a->($a), $b->($b)) ? $a->($a)\
    \ : $b->($b);\n    }\n    elsif ($type eq \"IO::Select\") {\n        return compare_one($a->($a),\
    \ $b->($b)) ? $a->($a) : $b->($b);\n    }\n    elsif ", "    return undef unless\
    \ $a =~ /^-?\\d+$/;\n    return undef unless $b =~ /^-?\\d+$/;\n    return undef\
    \ if $a eq $b;\n    return undef if $a =~ /^-?\\d+(\\.\\d+)?$/;\n    return undef\
    \ if $b =~ /^-?\\d+(\\.\\d+)?$/;\n    return undef if $a =~ /^-?\\d+\\.\\d+$/;\n\
    \    return undef if $b =~ /^-?\\d+\\.\\d+$/;\n    return undef if $a =~ /^-?\\\
    d+\\.\\d$/;\n    return undef if $b =~ /^-?\\d+\\.\\d$/;\n    return undef if\
    \ $a =~ /^-?\\d+,\\d+$/;\n    return undef if $b =~ /^-?\\d+,\\d+$/;\n    return\
    \ undef if $a =~ /^-?\\d+\\.\\d,\\d+$/;\n    return undef if $b =~ /^-?\\d+\\\
    .\\d,\\d+$/;\n    return undef if $a =~ /^-?\\d+,\\d+\\.\\d$/;\n    return undef\
    \ if $b =~ /^-?\\d+,\\d+\\.\\d$/;\n    return undef if $a =~ /^-?\\d+\\.\\d,\\\
    d+\\.\\d$/;\n    return undef if $b =~ /^-?\\d+\\.\\d,\\d+\\.\\d$/;\n    return\
    \ undef if $a =~ /^-?\\d+,\\d+\\.\\d,\\d+$/;\n    return undef if $b =~ /^-?\\\
    d+,\\d+\\.\\d,\\d+$/;\n    return undef if $a =~ /^-?\\d+\\.\\d,\\d+\\.\\d,\\\
    d+$/;\n    return undef if $b =~ /^-?\\d+\\.\\d,\\d+\\.\\d,\\d+$/;\n    return\
    \ undef if $a =~ /^-?\\d+,\\d+\\.\\d,\\d+\\.\\d$/;\n    return undef if $b =~\
    \ /^-?\\d+,\\d+\\.\\d,\\d+\\.\\d$/;\n    return undef if $a =~ /^-?\\d+\\.\\d,\\\
    d+\\.\\d,\\d+\\.\\d$/;\n    return undef if $b =~ /^-?\\d+\\.\\d,\\d+\\.\\d,\\\
    d+\\.\\d$/;\n    return undef if $a =~ /^-?\\d+,\\d+\\.\\d,\\d+\\.\\d,\\d+$/;\n\
    \    return undef if $b =~ /^-?\\d+,\\d+\\.\\d,\\d+\\.\\d,\\d+$/;\n    return\
    \ undef if $a =~ /^-?\\d+", "    return $a if $a eq $b;\n    return $a if $b eq\
    \ $a;\n    return $a if $a =~ /^\\d+$/;\n    return $a if $b =~ /^\\d+$/;\n  \
    \  return $a if $a =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\d+\\\
    .\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a\
    \ if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*,\\d+\\\
    .\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\\
    d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return $a if $b =~\
    \ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.\\d*,\\\
    d+$/;\n    return $a if $b =~ /^\\d+\\.\\d*,\\d+\\.\\d*,\\d+\\.", "    my $type\
    \ = ref($a) ? ref($a) : \"\";\n    if ($type eq \"HASH\") {\n        foreach my\
    \ $key (keys %{$a}) {\n            if ($a->{$key} ne $b->{$key}) {\n         \
    \       return $a->{$key};\n            }\n        }\n    } elsif ($type eq \"\
    ARRAY\") {\n        foreach my $key (0 .. $#$a) {\n            if ($a->[$key]\
    \ ne $b->[$key]) {\n                return $a->[$key];\n            }\n      \
    \  }\n    } elsif ($type eq \"SCALAR\") {\n        return $a > $b ? $a : $b;\n\
    \    } elsif ($type eq \"CODE\") {\n        return $a->($b) ? $a : $b;\n    }\
    \ elsif ($type eq \"undef\") {\n        return $a > $b ? $a : $b;\n    } else\
    \ {\n        return $a > $b ? $a : $b;\n    }\n}", "    my $type = ref($a);\n\
    \    if ($type eq 'HASH') {\n        foreach my $key (keys %$a) {\n          \
    \  my $val = $a->{$key};\n            my $val2 = $b->{$key};\n            if ($val\
    \ eq $val2) {\n                return $key;\n            }\n        }\n    } elsif\
    \ ($type eq 'ARRAY') {\n        foreach my $val (@$a) {\n            my $val2\
    \ = $a->[$_];\n            my $val3 = $b->[$_];\n            if ($val eq $val2)\
    \ {\n                return $val3;\n            }\n        }\n    } elsif ($type\
    \ eq 'SCALAR') {\n        my $val2 = $a->[0];\n        my $val3 = $b->[0];\n \
    \       if ($val eq $val2) {\n            return $val3;\n        }\n    }\n  \
    \  return;\n}", "    my $type = ref($a);\n    if ($type eq 'HASH') {\n       \
    \ foreach my $key (keys %{$a}) {\n            my $val = $a->{$key};\n        \
    \    if ($val eq $b) {\n                return $key;\n            }\n        }\n\
    \    } elsif ($type eq 'ARRAY') {\n        foreach my $val (@{$a}) {\n       \
    \     if ($val eq $b) {\n                return $val;\n            }\n       \
    \ }\n    } elsif ($type eq 'SCALAR') {\n        if ($a eq $b) {\n            return\
    \ $a;\n        }\n    } elsif ($type eq 'CODE') {\n        if (&$a($b)) {\n  \
    \          return $a;\n        }\n    }\n    return;\n}", "    return undef unless\
    \ defined $a && defined $b;\n    return $a if $a eq $b;\n    return $a if $b eq\
    \ $a;\n    return $a if $a =~ /^\\d+$/ && $b =~ /^\\d+$/;\n    return $a if $b\
    \ =~ /^\\d+$/ && $a =~ /^\\d+$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b\
    \ =~ /^\\d+\\.\\d*$/;\n    return $a if $b =~ /^\\d+\\.\\d*$/ && $a =~ /^\\d+\\\
    .\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+$/;\n    return\
    \ $a if $b =~ /^\\d+\\.\\d*$/ && $a =~ /^\\d+$/;\n    return $a if $a =~ /^\\\
    d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/\
    \ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\\
    d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n\
    \    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\\
    d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~\
    \ /^\\d+\\.\\d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\\
    d*$/;\n    return $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return\
    \ $a if $a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;\n    return $a if $a =~\
    \ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/;", "    my $type = ref($a) ? ref($a)\
    \ : \"\";\n    my $type2 = ref($b) ? ref($b) : \"\";\n    if ($type eq $type2)\
    \ {\n        if ($type eq \"SCALAR\") {\n            return $a > $b ? $a : $b;\n\
    \        } elsif ($type eq \"ARRAY\") {\n            foreach my $elem (@$a) {\n\
    \                my $ret = $elem->compare($b);\n                if ($ret != 0)\
    \ {\n                    return $ret;\n                }\n            }\n    \
    \        return 0;\n        } elsif ($type eq \"HASH\") {\n            foreach\
    \ my $elem (sort keys %$a) {\n                my $ret = $elem->compare($b);\n\
    \                if ($ret != 0) {\n                    return $ret;\n        \
    \        }\n            }\n            return 0;\n        } elsif ($type eq \"\
    CODE\") {\n            return $a->($b) if ($a->($b) != 0);\n            return\
    \ 0;\n        } elsif ($type eq \"GLOB\") {\n            return $a->($b) if ($a->($b)\
    \ != 0);\n            return 0;\n        } elsif ($type eq \"IO\") {\n       \
    \     return $a->($b) if ($a->($b) != 0);\n            return 0;\n        } elsif\
    \ ($type eq \"VSTRING\") {\n            return $a->($b) if ($a->($b) != 0);\n\
    \            return 0;\n        } elsif ($type eq \"HASH_REF\") {\n          \
    \  return $a->($b) if ($a->($b) != 0);\n            return 0;\n        } elsif\
    \ ($type eq \"ARRAY\") {\n            return $a->compare($b);\n        } elsif\
    \ ($type eq \"HASH\") {\n            return $a->compare($b);\n        } elsif\
    \ ($type eq \"CODE\") {\n            return $a->($b) if ($a->($b) != 0);\n   \
    \         return 0;\n        } elsif ($type eq \"GLOB\") {\n            return\
    \ $a->($b) if ($a->($b) != 0);\n            return 0;\n        } elsif ($type\
    \ eq \"IO\") {\n            return $a->($b) if ($a->($b) != 0);\n            return\
    \ 0;\n        } elsif ($type eq \"VSTRING\") {\n            return $a->($b) if\
    \ ($a->($b) != 0);\n            return 0;\n        } elsif ($type eq \"HASH_REF\"\
    ) {\n            return $a->($b) if ($a->($b) != 0);\n            return 0;\n\
    \        } elsif ($type eq \"ARRAY\") {\n            return ", "    return $a\
    \ if $a eq $b;\n    return $b if ($b eq $a);\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq \"undef\" ||\
    \ $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a\
    \ eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef", "    my $type = ref($a) ?\
    \ ref($a) : \"\";\n    my $type2 = ref($b) ? ref($b) : \"\";\n    if ($type eq\
    \ $type2) {\n        if ($type eq \"ARRAY\") {\n            return $a > $b ? $a\
    \ : $b;\n        } elsif ($type eq \"HASH\") {\n            return $a > $b ? $b\
    \ : $a;\n        } elsif ($type eq \"CODE\") {\n            return $a > $b ? $b\
    \ : $a;\n        } elsif ($type eq \"SCALAR\") {\n            return $a > $b ?\
    \ $b : $a;\n        } elsif ($type eq \"IO\") {\n            return $a > $b ?\
    \ $b : $a;\n        } elsif ($type eq \"IO::Handle\") {\n            return $a\
    \ > $b ? $b : $a;\n        } elsif ($type eq \"Any\") {\n            return $a\
    \ > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type\") {\n            return\
    \ $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_\") {\n          \
    \  return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\") {\n\
    \            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? ", "    my $type = ref($a);\n    my $type2 =\
    \ ref($b);\n    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n  \
    \  }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0])\
    \ ? $a->[0] : $b->[0];\n    }\n    elsif ($type eq \"HASH\") {\n        return\
    \ compare_one($a->{val}, $b->{val}) ? $a->{val} : $b->{val};\n    }\n    elsif\
    \ ($type eq \"CODE\") {\n        return compare_one($a->($a->[0]), $b->($b->[0]))\
    \ ? $a->($a->[0]) : $b->($b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n\
    \        return compare_one($a->(), $b->()) ? $a->() : $b->();\n    }\n    elsif\
    \ ($type eq \"IO\") {\n        return compare_one($a->($a->[0]), $b->($b->[0]))\
    \ ? $a->($a->[0]) : $b->($b->[0]);\n    }\n    elsif ($type eq \"VSTRING\") {\n\
    \        return compare_one($a->($a->[0]), $b->($b->[0])) ? $a->($a->[0]) : $b->($b->[0]);\n\
    \    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a->($a->[0]),\
    \ $b->($b->[0])) ? $a->($a->[0]) : $b->($b->[0]);\n    }\n    elsif ($type eq\
    \ \"GLOB\") {\n        return compare_one($a->($a->[0]), $b->($b->[0])) ? $a->($a->[0])\
    \ : $b->($b->[0]);\n    }\n    elsif ($type eq \"UNDEF\") {\n        return undef;\n\
    \    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a->[0]),\
    \ $b->($b->[0])) ? $a->($a->[0]) : $b->($b->[0]);\n    }\n    elsif ($type eq\
    \ \"GLOB\") {\n        return compare_one($a->($a->[0]), $b->($b->[0])) ? $a->($a->[0])\
    \ : $b->($b->[0]);\n    }\n    elsif ($type eq \"UNDEF\") {\n        return undef;\n\
    \    }\n    elsif ($", "    my $type = ref($a);\n    my $type2 = ref($b);\n  \
    \  if ($type eq $type2) {\n        if ($type eq \"HASH\") {\n            foreach\
    \ my $key (keys %{$a}) {\n                if ($a->{$key} ne $b->{$key}) {\n  \
    \                  return $a->{$key};\n                }\n            }\n    \
    \    } elsif ($type eq \"ARRAY\") {\n            foreach my $i (0 .. @{$a} - 1)\
    \ {\n                if ($a->[$i] ne $b->[$i]) {\n                    return $a->[$i];\n\
    \                }\n            }\n        } elsif ($type eq \"SCALAR\") {\n \
    \           return $a if $a ne $b;\n        } elsif ($type eq \"CODE\") {\n  \
    \          return $a if &$a ne &$b;\n        } else {\n            return $a if\
    \ $a ne $b;\n        }\n    } else {\n        return $a if $a < $b;\n        return\
    \ $b;\n    }\n}", "    return $a if $a eq $b;\n    return $b if ($b eq $a);\n\
    \    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n  \
    \  return $a if ($a eq \"\");\n    return $b if ($b eq \"\");\n    return $a if\
    \ ($a eq \"0\");\n    return $b if ($b eq \"0\");\n    return $a if ($a eq \"\
    0.0\");\n    return $b if ($b eq \"0.0\");\n    return $a if ($a eq \"0E1\");\n\
    \    return $b if ($b eq \"0E1\");\n    return $a if ($a eq \"0E0\");\n    return\
    \ $b if ($b eq \"0E0\");\n    return $a if ($a eq \"0E-1\");\n    return $b if\
    \ ($b eq \"0E-1\");\n    return $a if ($a eq \"0E-2\");\n    return $b if ($b\
    \ eq \"0E-2\");\n    return $a if ($a eq \"0E-3\");\n    return $b if ($b eq \"\
    0E-3\");\n    return $a if ($a eq \"0E-4\");\n    return $b if ($b eq \"0E-4\"\
    );\n    return $a if ($a eq \"0E-5\");\n    return $b if ($b eq \"0E-5\");\n \
    \   return $a if ($a eq \"0E-6\");\n    return $b if ($b eq \"0E-6\");\n    return\
    \ $a if ($a eq \"0E-7\");\n    return $b if ($b eq \"0E-7\");\n    return $a if\
    \ ($a eq \"0E-8\");\n    return $b if ($b eq \"0E-8\");\n    return $a if ($a\
    \ eq \"0E-9\");\n    return $b if ($b eq \"0E-9\");\n    return $a if ($a eq \"\
    0E-10\");\n    return $b if ($b eq \"0E-10\");\n    return $a if ($a eq \"0E-11\"\
    );\n    return $b if ($b eq \"0E-11\");\n    return $a if ($a eq \"0E-12\");\n\
    \    return $b if ($b eq \"0E-12\");\n    return $a if ($a eq \"0E-13\");\n  \
    \  return $b if ($b eq \"0E-13\");\n    return $a if ($a eq \"0E-14\");\n    return\
    \ $b ", "    my $type = ref($a) ? ref($a) : \"\";\n    my $type2 = ref($b) ? ref($b)\
    \ : \"\";\n    if ($type eq $type2) {\n        if ($type eq \"ARRAY\") {\n   \
    \         return $a > $b ? $a : $b;\n        } elsif ($type eq \"HASH\") {\n \
    \           return $a > $b ? $b : $a;\n        } elsif ($type eq \"CODE\") {\n\
    \            return $a > $b ? $b : $a;\n        } elsif ($type eq \"SCALAR\")\
    \ {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO\")\
    \ {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"IO::Handle\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? $b : $a;\n        } elsif ($type eq \"Any::Type_::\"\
    ) {\n            return $a > $b ? ", "    my $type = ref($a);\n    if ($type eq\
    \ 'HASH') {\n        return $a->{val} > $b->{val} ? $a : $b;\n    } elsif ($type\
    \ eq 'ARRAY') {\n        return $a->[0] > $b->[0] ? $a : $b;\n    } elsif ($type\
    \ eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    } else {\n        return\
    \ $a > $b ? $a : $b;\n    }\n}", "    my $type = ref($a);\n    my $type2 = ref($b);\n\
    \    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($type eq \"HASH\") {\n        return compare_one($a->{val}, $b->{val});\n \
    \   }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n\
    \    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Scalar\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::INLINE\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util\") {\n        return compare_one($a->value, $b->value);\n\
    \    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::Util_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util::INHERIT\") {\n        return compare_one($a->value, $b->value);\n\
    \    }\n    elsif ($type eq \"IO::Scalar::Util::INLINE_INHERIT\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::INLINE_INHERIT_INHERIT_INHERIT\") {\n        return compare_one($a->value,\
    \ $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT_INHERIT_INHERIT_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::INLINE_INHERIT_INHER", "    my $type = ref($a);\n    my $type2\
    \ = ref($b);\n    if ($type eq $type2) {\n        return $a if $a > $b;\n    \
    \    return $b if $a < $b;\n        return $a if $a eq $b;\n        return undef;\n\
    \    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{value},\
    \ $b->{value});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{value},\
    \ $b->{value});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"CODE\") {\n        return compare_one($a->($a),\
    \ $b->($b));\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"IO\") {\n        return compare_one($a, $b);\n \
    \   }\n    elsif ($type eq \"VSTRING\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"REGEXP\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"GLOB\") {\n        return compare_one($a, $b);\n\
    \    }\n    elsif ($type eq \"IO\") {\n        return ", "    return $a if $a\
    \ < $b;\n    return $b if ($a > $b);\n    return;\n}", "    my $type = ref($a)\
    \ ? ref($a) : \"\";\n    if ($type eq \"ARRAY\") {\n        return $a > $b ? $a\
    \ : $b;\n    } elsif ($type eq \"HASH\") {\n        return $a->{value} > $b->{value}\
    \ ? $a->{value} : $b->{value};\n    } elsif ($type eq \"CODE\") {\n        return\
    \ $a->($b) ? $a : $b;\n    } elsif ($type eq \"SCALAR\") {\n        return $a\
    \ > $b ? $a : $b;\n    } elsif ($type eq \"IO::Scalar\") {\n        return $a\
    \ > $b ? $a : $b;\n    } elsif ($type eq \"overload::StrVal\") {\n        return\
    \ $a > $b ? $a : $b;\n    } else {\n        return $a > $b ? $a : $b;\n    }\n\
    }", "    my $type = ref($a);\n    if ($type eq 'ARRAY') {\n        my $cmp = 0;\n\
    \        foreach my $val (@$a) {\n            $cmp = compare_one($val, $b);\n\
    \            if ($cmp eq -1) {\n                return $val;\n            }\n\
    \        }\n        return $cmp;\n    } elsif ($type eq 'HASH') {\n        my\
    \ $cmp = 0;\n        foreach my $key (keys %$a) {\n            $cmp = compare_one($key,\
    \ $b);\n            if ($cmp eq -1) {\n                return $key;\n        \
    \    }\n        }\n        return $cmp;\n    } elsif ($type eq 'SCALAR') {\n \
    \       return $a > $b ? $a : $b;\n    } elsif ($type eq 'CODE') {\n        return\
    \ $a->($b) ? $a : $b;\n    } elsif ($type eq 'GLOB') {\n        return $a->($b)\
    \ ? $a : $b;\n    } elsif ($type eq 'IO::Handle') {\n        return $a->($b) ?\
    \ $a : $b;\n    } elsif ($type eq 'IO::Scalar') {\n        return $a->($b) ? $a\
    \ : $b;\n    } elsif ($type eq 'IO::Scalar::INLINE') {\n        return $a->($b)\
    \ ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Util') {\n        return $a->($b)\
    \ ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Util::INLINE') {\n        return\
    \ $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Util::Any') {\n    \
    \    return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Util::Any::INLINE')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Util::Any::Any')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Util::Any::Any::INLINE')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Util::Any::Any::Any::INLINE')\
    \ {\n        return $a->($b) ? $a : $b;\n    } elsif ($type eq 'IO::Scalar::Util::Any::Any::Any::INLINE')\
    \ {\n        return $a", "    if ($a eq $b) {\n        return $a;\n    }\n   \
    \ if ($a =~ /^\\d+$/) {\n        return $b;\n    }\n    if ($b =~ /^\\d+$/) {\n\
    \        return $a;\n    }\n    if ($a =~ /^\\d+\\.\\d*$/) {\n        return $b;\n\
    \    }\n    if ($b =~ /^\\d+\\.\\d*$/) {\n        return $a;\n    }\n    if ($a\
    \ =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    if ($b =~ /^\\d+\\.\\d*/)\
    \ {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^\\d+,\\d+$/) {\n        return $b;\n    }\n    if\
    \ ($b =~ /^\\d+,\\d+$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+,\\\
    d+\\.\\d*$/) {\n        return $b;\n    }\n    if ($b =~ /^\\d+,\\d+\\.\\d*$/)\
    \ {\n        return $a;\n    }\n    if ($a =~ /^\\d+,\\d+\\.\\d*/) {\n       \
    \ return $b;\n    }\n    if ($b =~ /^\\d+,\\d+\\.\\d*/) {\n        return $a;\n\
    \    }\n    if ($a =~ /^\\d+,\\d+\\.\\d*/) {\n        return $b;\n    }\n    if\
    \ ($a =~ /^\\d+\\.\\d+$/) {\n        return $b;\n    }\n    if ($b =~ /^\\d+\\\
    .\\d+$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.\\d+\\.\\d*$/) {\n\
    \        return $b;\n    }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($a =~ /^\\d+\\.\\d+\\.\\d*/) {\n        return $b;\n   \
    \ }\n    if ($b =~ /^\\d+\\.\\d+\\.\\d*/) {\n        return $a;\n    }\n    if\
    \ ($a =~ /^\\d+\\.\\d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a =~ /^\\\
    d+\\.\\d+,\\d+$/) {\n        return $b;\n    }\n    if ($b =~ /^\\d+\\.\\d+,\\\
    d+$/) {\n        return $a;\n    }\n    if ($a =~ /^\\d+\\.\\d+,\\d+\\.\\d*$/)\
    \ {\n        return $b;\n    }\n    if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d*$/) {\n\
    \        return $a;\n    }\n    if ($a =~ /^\\d+\\.\\d+,\\d+\\.\\d*/) {\n    \
    \    return $b;\n    }\n    if ($b =~ /^\\d+\\.\\d+,\\d+\\.", "    if ($a eq $b)\
    \ {\n        return;\n    }\n    if ($a =~ /^-?\\d+$/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^-?\\d+$/) {\n        return $b;\n    }\n    if ($a =~\
    \ /^-?\\d+\\.\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\\
    d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*$/) {\n      \
    \  return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*$/) {\n     \
    \   return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*$/) {\n    \
    \    return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*$/)\
    \ {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\\
    ,\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\\
    ,\\d*\\,\\d*\\,\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\\
    .\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $b;\n    }\n   \
    \ if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n \
    \       return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\\
    ,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\\
    d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n\
    \        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\\
    ,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d*$/) {\n        return $b;\n\
    \    }\n    if ($a =~ /^-?\\d+\\.\\d*\\,\\d*\\,\\d*\\,\\d*\\,\\d", "    if ($a\
    \ eq $b) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+$/) {\n        return\
    \ $a;\n    }\n    elsif ($b =~ /^\\d+$/) {\n        return $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d+$/) {\n        return $a;\n    }\n    elsif ($b =~ /^\\\
    d+\\.\\d+$/) {\n        return $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d$/) {\n\
    \        return $a;\n    }\n    elsif ($b =~ /^\\d+\\.\\d$/) {\n        return\
    \ $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d,\\d+$/) {\n        return $a;\n  \
    \  }\n    elsif ($b =~ /^\\d+\\.\\d,\\d+$/) {\n        return $b;\n    }\n   \
    \ elsif ($a =~ /^\\d+\\.\\d,\\d+\\.\\d+$/) {\n        return $a;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.\\d,\\d+\\.\\d+$/) {\n        return $b;\n    }\n    elsif ($a\
    \ =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\d+$/) {\n        return $a;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\d+$/) {\n        return $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\d+\\.\\d+$/) {\n        return $a;\n    }\n\
    \    elsif ($b =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\d+\\.\\d+$/) {\n        return $b;\n\
    \    }\n    elsif ($a =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\d+\\.\\d+,\\d+$/) {\n    \
    \    return $a;\n    }\n    elsif ($b =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\d+\\.\\d+,\\\
    d+$/) {\n        return $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\\
    d+\\.\\d+,\\d+\\.\\d+$/) {\n        return $a;\n    }\n    elsif ($b =~ /^\\d+\\\
    .\\d,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+$/) {\n        return $b;\n    }\n   \
    \ elsif ($a =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+$/) {\n  \
    \      return $a;\n    }\n    elsif ($b =~ /^\\d+\\.\\d,\\d+\\.\\d+,\\d+\\.\\\
    d+,\\d+\\.\\d+,\\d+$/) {\n        return $b;", "    my $type = ref($a) eq 'SCALAR'\
    \ ? ref($a) : ref($a);\n    my $type2 = ref($b) eq 'SCALAR' ? ref($b) : ref($b);\n\
    \    my $cmp;\n    if ($type eq $type2) {\n        $cmp = $a cmp $b;\n    } else\
    \ {\n        $cmp = $a cmp $b;\n    }\n    if ($cmp == 0) {\n        return $a;\n\
    \    }\n    return $cmp < 0 ? $a : $b;\n}", "    my $type = ref($a);\n    my $type2\
    \ = ref($b);\n    if ($type eq $type2) {\n        if ($type eq \"ARRAY\") {\n\
    \            return $a if $a > $b;\n            return $a if $a < $b;\n      \
    \      return $a if $a == $b;\n            return $a if $a != $b;\n        }\n\
    \        if ($type eq \"HASH\") {\n            return $a if $a->{value} > $b->{value};\n\
    \            return $a if $a->{value} < $b->{value};\n            return $a if\
    \ $a->{value} == $b->{value};\n            return $a if $a->{value} != $b->{value};\n\
    \        }\n        if ($type eq \"CODE\") {\n            return $a if $a->($b)\
    \ > 0;\n            return $a if $a->($b) < 0;\n            return $a if $a->($b)\
    \ == 0;\n            return $a if $a->($b) != 0;\n        }\n        if ($type\
    \ eq \"SCALAR\") {\n            return $a if $a > $b;\n            return $a if\
    \ $a < $b;\n            return $a if $a == $b;\n            return $a if $a !=\
    \ $b;\n        }\n        if ($type eq \"IO::Handle\") {\n            return $a\
    \ if $a->($b) > 0;\n            return $a if $a->($b) < 0;\n            return\
    \ $a if $a->($b) == 0;\n            return $a if $a->($b) != 0;\n        }\n \
    \       if ($type eq \"IO::File\") {\n            return $a if $a->($b) > 0;\n\
    \            return $a if $a->($b) < 0;\n            return $a if $a->($b) ==\
    \ 0;\n            return $a if $a->($b) != 0;\n        }\n        if ($type eq\
    \ \"IO::Socket\") {\n            return $a if $a->($b) > 0;\n            return\
    \ $a if $a->($b) < 0;\n            return $a if $a->($b) == 0;\n            return\
    \ $a if $a->($b) != 0;\n        }\n        if ($type eq \"IO::Select\") {\n  \
    \          return $a if $a->($b) > 0;\n            return $a if $a->($b) < 0;\n\
    \            return $a if $a->($b) == 0;\n            return $a if $a->($b) !=\
    \ 0;\n        }\n        if ($type eq \"IO::Poll\") {\n            return $a if ",
  "    if ($a eq $b) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+$/ && $b\
    \ =~ /^\\d+$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\\
    d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ? $a : $b;\n \
    \   }\n    elsif ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+$/) {\n        return $a\
    \ > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+$/ && $b =~ /^\\d+\\.\\d*$/)\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/\
    \ && $b =~ /^\\d+$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a\
    \ =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ? $a\
    \ : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/) {\n\
    \        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/ &&\
    \ $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ?\
    \ $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/)\
    \ {\n        return $a > $b ? $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/\
    \ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/) {\n        return $a > $b ?\
    \ $a : $b;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/ && $b =~ /^\\d+\\.\\d*$/)\
    \ {\n        return $a ", "    my $type = ref($a);\n    if ($type eq 'SCALAR')\
    \ {\n        return $a > $b ? $a : $b;\n    } elsif ($type eq 'ARRAY') {\n   \
    \     return @$a > @$b ? @$a : @$b;\n    } elsif ($type eq 'HASH') {\n       \
    \ return %$a > %$b ? %$a : %$b;\n    } elsif ($type eq 'CODE') {\n        return\
    \ &$a > &$b ? &$a : &$b;\n    } elsif ($type eq 'GLOB') {\n        return $a >\
    \ $b ? $a : $b;\n    } elsif ($type eq 'IO::Handle') {\n        return $a > $b\
    \ ? $a : $b;\n    } elsif ($type eq 'overload::') {\n        return $a > $b ?\
    \ $a : $b;\n    } elsif ($type eq 'integer') {\n        return $a > $b ? $a :\
    \ $b;\n    } elsif ($type eq 'undef') {\n        return $a > $b ? $a : $b;\n \
    \   } else {\n        return $a > $b ? $a : $b;\n    }\n}", "    my $type = ref($a);\n\
    \    if ($type eq 'SCALAR') {\n        if ($a eq $b) {\n            return $a;\n\
    \        }\n    }\n    elsif ($type eq 'ARRAY') {\n        if (@$a eq @$b) {\n\
    \            return $a;\n        }\n    }\n    elsif ($type eq 'HASH') {\n   \
    \     if (keys %$a eq keys %$b) {\n            return $a;\n        }\n    }\n\
    \    elsif ($type eq 'CODE') {\n        if (&$a eq &$b) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'GLOB') {\n        if (*$a eq *$b)\
    \ {\n            return $a;\n        }\n    }\n    elsif ($type eq 'IO::Handle')\
    \ {\n        if (*$a eq *$b) {\n            return $a;\n        }\n    }\n   \
    \ elsif ($type eq 'overload::') {\n        if (&$a eq &$b) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'UNIVERSAL') {\n        if ($a eq\
    \ $b) {\n            return $a;\n        }\n    }\n    elsif ($type eq 'overload::')\
    \ {\n        if (&$a eq &$b) {\n            return $a;\n        }\n    }\n   \
    \ elsif ($type eq 'overload::') {\n        if (&$a eq &$b) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'overload::') {\n        if (&$a\
    \ eq &$b) {\n            return $a;\n        }\n    }\n    elsif ($type eq 'overload::')\
    \ {\n        if (&$a eq &$b) {\n            return $a;\n        }\n    }\n   \
    \ elsif ($type eq 'overload::') {\n        if (&$a eq &$b) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'overload::') {\n        if (&$a\
    \ eq &$b) {\n            return $a;\n        }\n    }\n    elsif ($type eq 'overload::')\
    \ {\n        if (&$a eq &$b) {\n            return $a;\n        }\n    }\n   \
    \ elsif ($type eq 'overload::') {\n        if (&$a eq &$b) {\n            return\
    \ $a;\n        }\n    }\n    elsif ($type eq 'overload::') {\n        if (&$a\
    \ eq &$b) {\n            return $a;", "    my $type = ref($a);\n    my $type2\
    \ = ref($b);\n    if ($type eq $type2) {\n        if ($type eq \"HASH\") {\n \
    \           foreach my $key (keys %{$a}) {\n                if ($a->{$key} ne\
    \ $b->{$key}) {\n                    return $a->{$key};\n                }\n \
    \           }\n        } elsif ($type eq \"ARRAY\") {\n            foreach my\
    \ $i (0 .. @{$a} - 1) {\n                if ($a->[$i] ne $b->[$i]) {\n       \
    \             return $a->[$i];\n                }\n            }\n        } elsif\
    \ ($type eq \"SCALAR\") {\n            return $a if $a ne $b;\n        }\n   \
    \ }\n    return;\n}", "    my $type = ref($a);\n    my $type2 = ref($b);\n   \
    \ if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n    } elsif ($type\
    \ eq \"HASH\") {\n        return compare_one($a->{val}, $b->{val});\n    } elsif\
    \ ($type eq \"ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n    }\
    \ elsif ($type eq \"SCALAR\") {\n        return compare_one($a, $b);\n    } elsif\
    \ ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(), $b->fileno());\n\
    \    } elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    } elsif ($type eq \"IO::Scalar\") {\n        return compare_one($a->value,\
    \ $b->value);\n    } elsif ($type eq \"IO::Scalar::INLINE\") {\n        return\
    \ compare_one($a->value, $b->value);\n    } elsif ($type eq \"IO::Scalar::Util\"\
    ) {\n        return compare_one($a->value, $b->value);\n    } elsif ($type eq\
    \ \"IO::Scalar::INLINE_INHERIT\") {\n        return compare_one($a->value, $b->value);\n\
    \    } elsif ($type eq \"IO::Scalar::Util_INHERIT\") {\n        return compare_one($a->value,\
    \ $b->value);\n    } elsif ($type eq \"IO::Scalar::INLINE_INHERIT_SCALAR\") {\n\
    \        return compare_one($a->value, $b->value);\n    } elsif ($type eq \"IO::Scalar::Util_INHERIT_SCALAR\"\
    ) {\n        return compare_one($a->value, $b->value);\n    } elsif ($type eq\
    \ \"IO::Scalar::INLINE_INHERIT_IO\") {\n        return compare_one($a->value,\
    \ $b->value);\n    } elsif ($type eq \"IO::Scalar::Util_INHERIT_IO\") {\n    \
    \    return compare_one($a->value, $b->value);\n    } elsif ($type eq \"IO::Scalar::INLINE_INHERIT_IO_STRING\"\
    ) {\n        return compare_one($a->value, $b->value);\n    } elsif ($type eq\
    \ \"IO::Scalar::Util_INHERIT_IO_STRING\") {\n        return compare_one($a->value,\
    \ $b->value);\n    } elsif ($type eq \"IO::Scalar::INLINE_INHERIT_IO_STRING_UNDEF\"\
    ) {\n        return compare_one($a->value, ", "    my $type = ref($a);\n    my\
    \ $type2 = ref($b);\n    if ($type eq $type2) {\n        return $a > $b ? $a :\
    \ $b;\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]) if @$a > @$b;\n        return compare_one($a->[1], b->[1]) if @$a >\
    \ @$b;\n        return compare_one($a->[2], $b->[2]) if @$a > @$b;\n        return\
    \ compare_one($a->[3], $b->[3]) if @$a > @$b;\n        return compare_one($a->[4],\
    \ $b->[4]) if @$a > @$b;\n        return compare_one($a->[5], $b->[5]) if @$a\
    \ > @$b;\n        return compare_one($a->[6], $b->[6]) if @$a > @$b;\n       \
    \ return compare_one($a->[7], $b->[7]) if @$a > @$b;\n        return compare_one($a->[8],\
    \ $b->[8]) if @$a > @$b;\n        return compare_one($a->[9], $b->[9]) if @$a\
    \ > @$b;\n        return compare_one($a->[10], $b->[10]) if @$a > @$b;\n     \
    \   return compare_one($a->[11], $b->[11]) if @$a > @$b;\n        return compare_one($a->[12],\
    \ $b->[12]) if @$a > @$b;\n        return compare_one($a->[13], $b->[13]) if @$a\
    \ > @$b;\n        return compare_one($a->[14], $b->[14]) if @$a > @$b;\n     \
    \   return compare_one($a->[15], $b->[15]) if @$a > @$b;\n        return compare_one($a->[16],\
    \ $b->[16]) if @$a > @$b;\n        return compare_one($a->[17], $b->[17]) if @$a\
    \ > @$b;\n        return compare_one($a->[18], $b->[18]) if @$a > @$b;\n     \
    \   return compare_one($a->[19], $b->[19]) if @$a > @$b;\n        return compare_one($a->[20],\
    \ $b->[20]) if @$a > @$b;\n        return compare_one($a->[21], $b->[21]) if @",
  "    my $type = ref($a) ? ref($a) : \"\";\n    my $type2 = ref($b) ? ref($b) : \"\
    \";\n    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n    }\n  \
    \  return $a > $b ? $a : $b;\n}", "    return $a if $a eq $b;\n    return $b if\
    \ ($b eq $a) || ($b eq \"undef\");\n    return $a if ($a eq \"undef\");\n    return\
    \ $b if ($b eq \"undef\");\n    return $a if ($a eq $b);\n    return $a if ($b\
    \ eq $a);\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    ) || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\")\
    \ || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\")\
    \ || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\")\
    \ || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if ($a eq \"undef\")\
    \ || ($b eq \"undef\");\n    return $a if ($a eq \"undef\") || ($b eq \"undef\"\
    );\n    return $a if ($a eq \"undef\") || ($b eq \"undef\");\n    return $a if\
    \ ($a eq \"undef\") || ($b eq \"undef\");\n", "    my $type = ref($a);\n    my\
    \ $type2 = ref($b);\n    if ($type eq $type2) {\n        return $a > $b ? $a :\
    \ $b;\n    }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val},\
    \ $b->{val});\n    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Scalar\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::INLINE\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util\") {\n        return compare_one($a->value, $b->value);\n\
    \    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::Util_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util::INHERIT\") {\n        return compare_one($a->value, $b->value);\n\
    \    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT_INHERIT\") {\n      \
    \  return compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::Util_INHERIT_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util::INHERIT_INHERIT\") {\n        return compare_one($a->value,\
    \ $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT_INHERIT_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util_INHERIT_INHERIT_INHERIT\") {\n        return ", "    my\
    \ $type = ref($a);\n    my $type2 = ref($b);\n    if ($type eq $type2) {\n   \
    \     return $a > $b ? $a : $b;\n    }\n    elsif ($type eq \"HASH\") {\n    \
    \    return compare_one($a->{val}, $b->{val});\n    }\n    elsif ($type eq \"\
    ARRAY\") {\n        return compare_one($a->[0], $b->[0]);\n    }\n    elsif ($type\
    \ eq \"SCALAR\") {\n        return compare_one($a, $b);\n    }\n    elsif ($type\
    \ eq \"IO\") {\n        return compare_one($a->fileno(), $b->fileno());\n    }\n\
    \    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Scalar\") {\n        return\
    \ compare_one($a->fileno(), $b->fileno());\n    }\n    elsif ($type eq \"IO::Socket\"\
    ) {\n        return compare_one($a->fileno(), $b->fileno());\n    }\n    elsif\
    \ ($type eq \"IO::Socket::INET\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Socket::UNIX\") {\n       \
    \ return compare_one($a->fileno(), $b->fileno());\n    }\n    elsif ($type eq\
    \ \"IO::Select\") {\n        return compare_one($a->fileno(), $b->fileno());\n\
    \    }\n    elsif ($type eq \"IO::Poll\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Dir\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Dir::Iterator\") {\n      \
    \  return compare_one($a->fileno(), $b->fileno());\n    }\n    elsif ($type eq\
    \ \"IO::Scalar::INET\") {\n        return compare_one($a->fileno(), $b->fileno());\n\
    \    }\n    elsif ($type eq \"IO::Scalar::UNIX\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Scalar::INET6\") {\n      \
    \  return compare_one($a->fileno(), ", "    my $type = ref($a);\n    if ($type\
    \ eq 'HASH') {\n        return $a->{val} if $a->{val} > $b->{val};\n        return\
    \ $a->{val} if $a->{val} < $b->{val};\n        return $a->{val};\n    }\n    if\
    \ ($type eq 'ARRAY') {\n        return $a->[0] if $a->[0] > $b->[0];\n       \
    \ return $a->[0] if $a->[0] < $b->[0];\n        return $a->[0];\n    }\n    if\
    \ ($type eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    }\n    if ($type\
    \ eq 'CODE') {\n        return $a->($b) if $a->($b) > 0;\n        return $a->($b)\
    \ if $a->($b) < 0;\n        return $a->($b);\n    }\n    if ($type eq 'REF') {\n\
    \        return $a->($b) if $a->($b) > 0;\n        return $a->($b) if $a->($b)\
    \ < 0;\n        return $a->($b);\n    }\n    if ($type eq 'IO::Handle') {\n  \
    \      return $a->($b) if $a->($b) > 0;\n        return $a->($b) if $a->($b) <\
    \ 0;\n        return $a->($b);\n    }\n    if ($type eq 'overload::') {\n    \
    \    return $a->($b) if $a->($b) > 0;\n        return $a->($b) if $a->($b) < 0;\n\
    \        return $a->($b);\n    }\n    if ($type eq 'UNIVERSAL') {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    if ($type eq 'overload::') {\n        return\
    \ $a->($b) if $a->($b) > 0;\n        return $a->($b) if $a->($b) < 0;\n      \
    \  return $a->($b);\n    }\n    if ($type eq 'overload::') {\n        return $a->($b)\
    \ if $a->($b) > 0;\n        return $a->($b) if $a->($b) < 0;\n        return $a->($b);\n\
    \    }\n    if ($type eq 'overload::') {\n        return $a->($b) if $a->($b)\
    \ > 0;\n        return $a->($b) if $a->($b) < 0;\n        return $a->($b);\n \
    \   }\n    if ($type eq 'overload::') {\n        return $", "    return undef\
    \ if ($a eq $b);\n    return $a if ($a =~ /^-?\\d+$/);\n    return $a if ($a =~\
    \ /^-?\\d+\\.\\d+$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d$/);\n    return\
    \ $a if ($a =~ /^-?\\d+\\.\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\\
    d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a\
    \ =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n\
    \    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\\
    d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return\
    \ $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\\
    d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if\
    \ ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\\
    d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a\
    \ =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n\
    \    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\\
    d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return\
    \ $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\\
    d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if\
    \ ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\\
    d$/);\n    return $a if ($a =~ /^-?\\d+\\.\\d\\d\\d$/);\n    return $a if ($",
  "    my $type = ref($a);\n    if ($type eq 'SCALAR') {\n        return $a > $b ?\
    \ $a : $b;\n    } elsif ($type eq 'ARRAY') {\n        return $a->[0] > $b->[0]\
    \ ? $a->[0] : $b->[0];\n    } elsif ($type eq 'HASH') {\n        return $a->{val}\
    \ > $b->{val} ? $a->{val} : $b->{val};\n    } elsif ($type eq 'CODE') {\n    \
    \    return $a->($a) > $b->($b) ? $a->($a) : $b->($b);\n    } else {\n       \
    \ return $a > $b ? $a : $b;\n    }\n}", "    return $a if $a eq $b;\n    return\
    \ $b if ($b eq $a);\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n   \
    \ return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a\
    \ if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq\
    \ \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef", "    my $type = ref($a);\n    if ($type eq 'ARRAY')\
    \ {\n        if (@$a != @$b) {\n            return undef;\n        }\n       \
    \ foreach my $i (0 .. @$a - 1) {\n            my $a_value = $a->[$i];\n      \
    \      my $b_value = $b->[$i];\n            if ($a_value ne $b_value) {\n    \
    \            return undef;\n            }\n        }\n        return $a->[-1];\n\
    \    }\n    elsif ($type eq 'HASH') {\n        if (keys %$a != keys %$b) {\n \
    \           return undef;\n        }\n        foreach my $key (keys %$a) {\n \
    \           my $a_value = $a->{$key};\n            my $b_value = $b->{$key};\n\
    \            if ($a_value ne $b_value) {\n                return undef;\n    \
    \        }\n        }\n        return $a->{\"\"};\n    }\n    elsif ($type eq\
    \ 'SCALAR') {\n        if ($a ne $b) {\n            return undef;\n        }\n\
    \        return $a;\n    }\n    elsif ($type eq 'CODE') {\n        if (&$a ne\
    \ &$b) {\n            return undef;\n        }\n        return $a;\n    }\n  \
    \  elsif ($type eq 'GLOB') {\n        if ($a ne $b) {\n            return undef;\n\
    \        }\n        return $a;\n    }\n    elsif ($type eq 'IO::Handle') {\n \
    \       if ($a ne $b) {\n            return undef;\n        }\n        return\
    \ $a;\n    }\n    elsif ($type eq 'IO::File') {\n        if ($a ne $b) {\n   \
    \         return undef;\n        }\n        return $a;\n    }\n    elsif ($type\
    \ eq 'IO::Scalar') {\n        if ($a ne $b) {\n            return undef;\n   \
    \     }\n        return $a;\n    }\n    elsif ($type eq 'IO::Scalar::INLINE')\
    \ {\n        if ($a ne $b) {\n            return undef;\n        }\n        return\
    \ $a;\n    }\n    elsif ($type eq 'IO::Scalar::Util') {\n        if ($a ne $b)\
    \ {\n            return undef;\n        }\n        return $a;\n    }\n    elsif\
    \ ($type eq 'IO::Scalar::Convertible') {\n        if ($a ne $b) {\n          \
    \  return undef;\n        }\n        return $a;\n    }\n    elsif ($type eq 'IO::Scalar::Converter')\
    \ {\n        if ($a ne $b) {\n            return undef;\n        }\n        return ",
  "    return $a if $a eq $b;\n    return $b if ($b eq $a) || ($b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n  \
    \  return $a if ($a eq $b);\n    return $b if ($b eq $a);\n    return $a if ($a\
    \ eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq\
    \ $b);\n    return $b if ($b eq $a);\n    return $a if ($a eq \"undef\");\n  \
    \  return $b if ($b eq \"undef\");\n    return $a if ($a eq $b);\n    return $b\
    \ if ($b eq $a);\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq\
    \ \"undef\");\n    return $a if ($a eq $b);\n    return $b if ($b eq $a);\n  \
    \  return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return\
    \ $a if ($a eq $b);\n    return $b if ($b eq $a);\n    return $a if ($a eq \"\
    undef\");\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq $b);\n\
    \    return $b if ($b eq $a);\n    return $a if ($a eq \"undef\");\n    return\
    \ $b if ($b eq \"undef\");\n    return $a if ($a eq $b);\n    return $b if ($b\
    \ eq $a);\n    return $a if ($a eq \"undef\");\n    return $b if ($b eq \"undef\"\
    );\n    return $a if ($a eq $b);\n    return $b if ($b eq $a);\n    return $a\
    \ if ($a eq \"undef\");\n    return $b if ($b eq \"undef\");\n    return $a if\
    \ ($a eq $b);\n    return $b if ($b eq $a);\n    return $a if ($a eq \"undef\"\
    );\n    return $b if ($b eq \"undef\");\n    return $a if ($a eq $b);\n    return\
    \ $b if ($b eq $a);\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq $b);\n    return $b if ($b eq $a);\n",
  "    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a eq\
    \ $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return $a if $a\
    \ eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return $a if\
    \ $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return $a\
    \ if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b eq $a;\n    return $a if $a eq $b || $b eq $a;\n    return\
    \ $a if $a eq $b || $b ", "    my $type = ref($a);\n    my $type2 = ref($b);\n\
    \    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n    }\n    elsif\
    \ ($type eq \"HASH\") {\n        my $akeys = keys %$a;\n        my $bkeys = keys\
    \ %$b;\n        if ($akeys eq $bkeys) {\n            foreach my $key (keys %$a)\
    \ {\n                my $val = $a->{$key};\n                my $val2 = $b->{$key};\n\
    \                if ($val ne $val2) {\n                    return $val cmp $val2\
    \ ? $val : $val2;\n                }\n            }\n        }\n        return\
    \ 0;\n    }\n    elsif ($type eq \"ARRAY\") {\n        my $akeys = @$a;\n    \
    \    my $bkeys = @$b;\n        if ($akeys eq $bkeys) {\n            foreach my\
    \ $key (@$a) {\n                my $val = $a->[$key];\n                my $val2\
    \ = $b->[$key];\n                if ($val ne $val2) {\n                    return\
    \ $val cmp $val2 ? $val : $val2;\n                }\n            }\n        }\n\
    \        return 0;\n    }\n    elsif ($type eq \"SCALAR\") {\n        return $a\
    \ > $b ? $a : $b;\n    }\n    elsif ($type eq \"CODE\") {\n        return $a->($b)\
    \ if ($a->($b));\n        return $a->($b) if ($b->($a));\n        return 0;\n\
    \    }\n    elsif ($type eq \"GLOB\") {\n        return $a->($b) if ($a->($b));\n\
    \        return $b->($a) if ($b->($a));\n        return 0;\n    }\n    elsif ($type\
    \ eq \"IO\") {\n        return $a->($b) if ($a->($b));\n        return $b->($a)\
    \ if ($b->($a));\n        return 0;\n    }\n    elsif ($type eq \"IO::Handle\"\
    ) {\n        return $a->($b) if ($a->($b));\n        return $b->($a) if ($b->($a));\n\
    \        return 0;\n    }\n    elsif ($type eq \"Any\") {\n        return $a->($b)\
    \ if ($a->($b));\n        return $b->($a) if ($b->($a));\n        return 0;\n\
    \    }\n    elsif ($type eq \"Any::Type\") {\n        return $a->($b) if ($",
  "    my $type = ref($a);\n    if ($type eq 'HASH') {\n        my $a_keys = sort\
    \ keys %$a;\n        my $b_keys = sort keys %$b;\n        if ($a_keys eq $b_keys)\
    \ {\n            foreach my $key (@$a_keys) {\n                if ($a->{$key}\
    \ ne $b->{$key}) {\n                    return $a->{$key};\n                }\n\
    \            }\n        } else {\n            return undef;\n        }\n    }\
    \ elsif ($type eq 'ARRAY') {\n        my $a_len = @$a;\n        my $b_len = @$b;\n\
    \        if ($a_len eq $b_len) {\n            foreach my $i (0..$a_len-1) {\n\
    \                if ($a->[$i] ne $b->[$i]) {\n                    return $a->[$i];\n\
    \                }\n            }\n        } else {\n            return undef;\n\
    \        }\n    } elsif ($type eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n\
    \    } elsif ($type eq 'CODE') {\n        return $a->($b) ? $a : $b;\n    } else\
    \ {\n        return undef;\n    }\n}", "    my $type = ref($a);\n    if ($type\
    \ eq 'SCALAR') {\n        return $a > $b ? $a : $b;\n    } elsif ($type eq 'ARRAY')\
    \ {\n        return @$a > @$b ? @$a : @$b;\n    } elsif ($type eq 'HASH') {\n\
    \        return %$a > %$b ? %$a : %$b;\n    } elsif ($type eq 'CODE') {\n    \
    \    return &$a > &$b ? &$a : &$b;\n    } elsif ($type eq 'GLOB') {\n        return\
    \ $a > $b ? $a : $b;\n    } elsif ($type eq 'IO::Handle') {\n        return $a\
    \ > $b ? $a : $b;\n    } elsif ($type eq 'overload::') {\n        return $a >\
    \ $b ? $a : $b;\n    } elsif ($type eq 'UNIVERSAL') {\n        return $a > $b\
    \ ? $a : $b;\n    } elsif ($type eq 'overload::') {\n        return $a > $b ?\
    \ $a : $b;\n    } elsif ($type eq 'overload::') {\n        return $a > $b ? $a\
    \ : $b;\n    } elsif ($type eq 'overload::') {\n        return $a > $b ? $a :\
    \ $b;\n    } elsif ($type eq 'overload::') {\n        return $a > $b ? $a : $b;\n\
    \    } elsif ($type eq 'overload::') {\n        return $a > $b ? $a : $b;\n  \
    \  } elsif ($type eq 'overload::') {\n        return $a > $b ? $a : $b;\n    }\
    \ elsif ($type eq 'overload::') {\n        return $a > $b ? $a : $b;\n    } elsif\
    \ ($type eq 'overload::') {\n        return $a > $b ? $a : $b;\n    } elsif ($type\
    \ eq 'overload::') {\n        return $a > $b ? $a : $b;\n    } elsif ($type eq\
    \ 'overload::') {\n        return $a > $b ? $a : $b;\n    } elsif ($type eq 'overload::')\
    \ {\n        return $a > $b ? $a : $b;\n    } elsif ($type eq 'overload::') {\n\
    \        return $a > $b ? $a : $b;\n    } ", "    return $a if $a eq $b;\n   \
    \ return $b if ($b =~ /^\\d+$/);\n    return $a if ($b =~ /^\\d+\\.\\d+$/);\n\
    \    return $a if ($b =~ /^\\d+\\.\\d+,\\d+$/);\n    return $a if ($b =~ /^\\\
    d+\\.\\d+,\\d+\\.\\d+$/);\n    return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\\
    d+$/);\n    return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+$/);\n  \
    \  return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+$/);\n    return\
    \ $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+$/);\n    return\
    \ $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+$/);\n  \
    \  return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\\
    .\\d+$/);\n    return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\\
    .\\d+,\\d+\\.\\d+,\\d+$/);\n    return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\\
    d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+$/);\n    return $a if ($b =~ /^\\\
    d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+$/);\n\
    \    return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\\
    d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+$/);\n    return $a if ($b =~ /^\\d+\\.\\d+,\\\
    d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+$/);\n\
    \    return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\\
    d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+$/);\n    return $a if ($b =~ /^\\\
    d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\\
    d+,\\d+\\.\\d+,\\d+$/);\n    return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\\
    d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\\
    d+$/);\n    return $a if ($b =~ /^\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\\
    d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+,\\d+\\.\\d+$/);\n    return\
    \ $a if ($", "    return undef unless $a =~ /^-?\\d+$/;\n    return undef unless\
    \ $b =~ /^-?\\d+$/;\n    return undef if $a eq $b;\n    return undef if $a =~\
    \ /^-?\\d+(\\.\\d+)?$/;\n    return undef if $b =~ /^-?\\d+(\\.\\d+)?$/;\n   \
    \ return undef if $a =~ /^-?\\d+\\.?\\d*$/;\n    return undef if $b =~ /^-?\\\
    d+\\.?\\d*$/;\n    return undef if $a =~ /^-?\\d+\\.?\\d*,?\\d*$/;\n    return\
    \ undef if $b =~ /^-?\\d+\\.?\\d*,?\\d*$/;\n    return undef if $a =~ /^-?\\d+\\\
    .?\\d*,?\\d*\\.?\\d*$/;\n    return undef if $b =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\\
    d*$/;\n    return undef if $a =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*$/;\n   \
    \ return undef if $b =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*$/;\n    return undef\
    \ if $a =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/;\n    return undef if\
    \ $b =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/;\n    return undef if $a\
    \ =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*$/;\n    return undef if\
    \ $b =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*$/;\n    return undef\
    \ if $a =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/;\n   \
    \ return undef if $b =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\\
    d*$/;\n    return undef if $a =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*,?\\\
    d*\\.?\\d*,?\\d*$/;\n    return undef if $b =~ /^-?\\d+\\.?\\d*,?\\d*\\.?\\d*,?\\\
    d*\\.?\\d*,?\\d*\\.?\\d*,?\\d*\\.?\\d*$/", "    return $a if $a eq $b;\n    return\
    \ $b if ($b eq $a);\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n   \
    \ return $a if ($b eq \"undef\" || $a eq \"undef\");\n    return $a if ($a eq\
    \ \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"\
    undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n\
    \    return $a if ($a eq \"undef\" || $b eq \"undef\");\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\");\n    return $a if ($a eq \"undef\" || $",
  "    if ($a eq $b) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.?\\d*$/)\
    \ {\n        return $a;\n    }\n    elsif ($b =~ /^\\d+\\.?\\d*$/) {\n       \
    \ return $b;\n    }\n    elsif ($a =~ /^\\d+$/) {\n        return $b;\n    }\n\
    \    elsif ($b =~ /^\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\\
    d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif ($b =~ /^\\\
    d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif ($a =~ /^\\\
    d+\\.?\\d*,\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.?\\\
    d*,\\d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+,\\d+\\.?\\d*$/)\
    \ {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+,\\d+\\.?\\d*$/) {\n  \
    \      return $a;\n    }\n    elsif ($a =~ /^\\d+,\\d+$/) {\n        return $b;\n\
    \    }\n    elsif ($b =~ /^\\d+,\\d+$/) {\n        return $a;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    elsif\
    \ ($a =~ /^", "    return $a if $a < $b;\n    return $b if ($a > $b);\n    return;\n\
    }", "    my $type = ref($a) ? ref($a) : \"\";\n    my $type2 = ref($b) ? ref($b)\
    \ : \"\";\n    if ($type eq $type2) {\n        return $a > $b ? $a : $b;\n   \
    \ }\n    elsif ($type eq \"HASH\") {\n        return compare_one($a->{val}, $b->{val});\n\
    \    }\n    elsif ($type eq \"ARRAY\") {\n        return compare_one($a->[0],\
    \ $b->[0]);\n    }\n    elsif ($type eq \"SCALAR\") {\n        return compare_one($a,\
    \ $b);\n    }\n    elsif ($type eq \"IO::Handle\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::File\") {\n        return compare_one($a->fileno(),\
    \ $b->fileno());\n    }\n    elsif ($type eq \"IO::Scalar\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::INLINE\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util\") {\n        return compare_one($a->value, $b->value);\n\
    \    }\n    elsif ($type eq \"IO::Scalar::INLINE_INHERIT\") {\n        return\
    \ compare_one($a->value, $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::Util_INHERIT\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util_INLINE_INHERIT\") {\n        return compare_one($a->value,\
    \ $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::Util_INLINE_INHERIT_SCALAR\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util_INLINE_INHERIT_IO\") {\n        return compare_one($a->value,\
    \ $b->value);\n    }\n    elsif ($type eq \"IO::Scalar::Util_INLINE_INHERIT_IOSCALAR\"\
    ) {\n        return compare_one($a->value, $b->value);\n    }\n    elsif ($type\
    \ eq \"IO::Scalar::Util_INLINE_INHERIT_IOSCALAR_INHERIT\") {\n        return compare_one($a->value,\
    \ $b->value);\n    }\n    elsif ($type eq \"IO::", "    return $a if $a eq $b;\n\
    \    return $a if $b eq $a;\n    return $a if $a eq $b;\n    return $a if $b eq\
    \ $a;\n    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if\
    \ $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a eq $b;\n    return\
    \ $a if $b eq $a;\n    return $a if $a eq $b;\n    return $a if $b eq $a;\n  \
    \  return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a eq\
    \ $b;\n    return $a if $b eq $a;\n    return $a if $a eq $b;\n    return $a if\
    \ $b eq $a;\n    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return\
    \ $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a eq $b;\n  \
    \  return $a if $b eq $a;\n    return $a if $a eq $b;\n    return $a if $b eq\
    \ $a;\n    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if\
    \ $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a eq $b;\n    return\
    \ $a if $b eq $a;\n    return $a if $a eq $b;\n    return $a if $b eq $a;\n  \
    \  return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a eq\
    \ $b;\n    return $a if $b eq $a;\n    return $a if $a eq $b;\n    return $a if\
    \ $b eq $a;\n    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return\
    \ $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if $a eq $b;\n  \
    \  return $a if $b eq $a;\n    return $a if $a eq $b;\n    return $a if $b eq\
    \ $a;\n    return $a if $a eq $b;\n    return $a if $b eq $a;\n    return $a if\
    \ $a eq $b;\n    return $", "    my $type = ref($a);\n    my $type2 = ref($b);\n\
    \    if ($type eq $type2) {\n        if ($type eq \"HASH\") {\n            return\
    \ $a->{val} > $b->{val} ? $a : $b;\n        }\n        if ($type eq \"ARRAY\"\
    ) {\n            return $a->[0] > $b->[0] ? $a : $b;\n        }\n        if ($type\
    \ eq \"SCALAR\") {\n            return $a->[0] > $b->[0] ? $a : $b;\n        }\n\
    \        if ($type eq \"CODE\") {\n            return $a->[0] > $b->[0] ? $a :\
    \ $b;\n        }\n        if ($type eq \"IO\") {\n            return $a->[0] >\
    \ $b->[0] ? $a : $b;\n        }\n        if ($type eq \"IO::Handle\") {\n    \
    \        return $a->[0] > $b->[0] ? $a : $b;\n        }\n        if ($type eq\
    \ \"overload::StrVal\") {\n            return $a->[0] > $b->[0] ? $a : $b;\n \
    \       }\n        if ($type eq \"overload::IntVal\") {\n            return $a->[0]\
    \ > $b->[0] ? $a : $b;\n        }\n        if ($type eq \"overload::NumVal\")\
    \ {\n            return $a->[0] > $b->[0] ? $a : $b;\n        }\n        if ($type\
    \ eq \"overload::FloatVal\") {\n            return $a->[0] > $b->[0] ? $a : $b;\n\
    \        }\n        if ($type eq \"overload::BoolVal\") {\n            return\
    \ $a->[0] > $b->[0] ? $a : $b;\n        }\n        if ($type eq \"overload::UndefVal\"\
    ) {\n            return $a->[0] > $b->[0] ? $a : $b;\n        }\n        if ($type\
    \ eq \"overload::NullVal\") {\n            return $a->[0] > $b->[0] ? $a : $b;\n\
    \        }\n        if ($type eq \"overload::AnyVal\") {\n            return $a->[0]\
    \ > $b->[0] ? $a : $b;\n        }\n        if ($type eq \"overload::Str\") {\n\
    \            return $a->[0] > $b->[0] ? $a : $b;\n        }\n        if ($type\
    \ eq \"overload::Int\") {\n            return $a->[0] > $b->[0] ? $a : $b;\n \
    \       }\n        if ($type eq \"overload::Num\") {\n            return $a->[0]\
    \ > $b->[0] ? $a : $b;\n        }\n        if ($type eq \"overload::Float\") {\n\
    \            return $a->", "    if ($a eq $b) {\n        return $a;\n    }\n \
    \   elsif ($a =~ /^\\d+$/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\\
    d+$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/) {\n    \
    \    return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*$/) {\n        return $a;\n\
    \    }\n    elsif ($a =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\\
    .\\d*/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*/) {\n   \
    \     return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*$/) {\n        return $b;\n\
    \    }\n    elsif ($b =~ /^\\d+\\.\\d*$/) {\n        return $a;\n    }\n    elsif\
    \ ($a =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\\
    .\\d*/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*/) {\n   \
    \     return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*/) {\n        return $a;\n\
    \    }\n    elsif ($a =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n    elsif\
    \ ($b =~ /^\\d+\\.\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\\
    d+\\.\\d*/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*/) {\n\
    \        return $a;\n    }\n    elsif ($a =~ /^\\d+\\.\\d*/) {\n        return\
    \ $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n\
    \    elsif ($a =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n    elsif ($b\
    \ =~ /^\\d+\\.\\d*$/) {\n        return $a;\n    }\n    elsif ($a =~ /^\\d+\\\
    .\\d*/) {\n        return $b;\n    }\n    elsif ($b =~ /^\\d+\\.\\d*/) {\n   \
    \     return $a;\n    }", "    if ($a eq $b) {\n        return $a;\n    }\n  \
    \  if ($a =~ /^-?\\d+$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+$/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($b =~ /^-?\\d+\\.\\d*$/) {\n        return $b;\n    }\n\
    \    if ($a =~ /^-?\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    if ($b =~\
    \ /^-?\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+,\\\
    d+$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+,\\d+$/) {\n       \
    \ return $b;\n    }\n    if ($a =~ /^-?\\d+,\\d+\\.\\d*$/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^-?\\d+,\\d+\\.\\d*$/) {\n        return $b;\n    }\n \
    \   if ($a =~ /^-?\\d+,\\d+\\.?\\d*$/) {\n        return $a;\n    }\n    if ($b\
    \ =~ /^-?\\d+,\\d+\\.?\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^-?\\\
    d+\\.?\\d+$/) {\n        return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d+$/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d+,\\d+$/) {\n   \
    \     return $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d+,\\d+$/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d+,\\d+\\.\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d+,\\d+\\.\\d*$/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^-?\\d+\\.?\\d+,\\d+\\.?\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($b =~ /^-?\\d+\\.?\\d+,\\d+\\.?\\d*$/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^-?\\d+,\\d+\\.?\\d+$/) {\n        return $a;\n \
    \   }\n    if ($b =~ /^-?\\d+,\\d+\\.?\\d+$/) {\n        return $b;\n    }\n \
    \   if ($a =~ /^-?\\d+,\\d+\\.?\\d+,", "    return $a if $a eq $b;\n    return\
    \ $b if ($b eq $a);\n    return $a if ($a eq \"undef\");\n    return $b if ($b\
    \ eq \"undef\");\n    return $a if ($a eq \"undef\" || $b eq \"undef\");\n   \
    \ return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a\
    \ if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq\
    \ \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\"\
    \ || $b eq \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq\
    \ \"undef\" || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\"\
    \ || $a eq $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq\
    \ $b);\n    return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n \
    \   return $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return\
    \ $a if ($a eq \"undef\" || $b eq \"undef\" || $a eq $b);\n    return $a if ($a\
    \ eq \"undef\" || $b eq \"undef", "    if ($a eq $b) {\n        return;\n    }\n\
    \    if ($a =~ /^\\d+$/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+$/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n  \
    \  if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n    if ($b =~ /^\\\
    d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n  \
    \      return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n\
    \    }\n    if ($a =~ /^\\d+\\.\\d*$/) {\n        return $a;\n    }\n    if ($b\
    \ =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\\
    d*/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*/) {\n        return\
    \ $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n   \
    \ if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\\
    .\\d*$/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*$/) {\n    \
    \    return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n\
    \    }\n    if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a\
    \ =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*/)\
    \ {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*$/) {\n        return\
    \ $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n  \
    \  if ($a =~ /^\\d+\\.\\d*/) {\n        return $a;\n    }\n    if ($b =~ /^\\\
    d+\\.\\d*/) {\n        return $b;\n    }\n    if ($a =~ /^\\d+\\.\\d*/) {\n  \
    \      return $a;\n    }\n    if ($b =~ /^\\d+\\.\\d*/) {\n        return $b;\n\
    \    }\n    if ($a =~ /^\\d+\\.\\d*$/) {\n        return $a;\n    }\n    if ($b\
    \ =~ /^\\d+\\.\\d*$/) {\n        return $b;\n    }\n    if (", "    my $type =\
    \ ref($a);\n    if ($type eq 'SCALAR') {\n        if ($a eq $b) {\n          \
    \  return $a;\n        }\n    }\n    elsif ($type eq 'ARRAY') {\n        if (@$a\
    \ eq @$b) {\n            return $a->[0];\n        }\n    }\n    elsif ($type eq\
    \ 'HASH') {\n        if (keys %$a eq keys %$b) {\n            return $a->[0];\n\
    \        }\n    }\n    elsif ($type eq 'CODE') {\n        if (&$a eq &$b) {\n\
    \            return $a->[0];\n        }\n    }\n    elsif ($type eq 'GLOB') {\n\
    \        if (&$a eq &$b) {\n            return $a->[0];\n        }\n    }\n  \
    \  elsif ($type eq 'IO::Handle') {\n        if ($a->isa('IO::Handle') && $b->isa('IO::Handle'))\
    \ {\n            return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::File') {\n        if ($a->isa('IO::File') && $b->isa('IO::File')) {\n\
    \            return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type eq 'IO::Scalar')\
    \ {\n        if ($a->isa('IO::Scalar') && $b->isa('IO::Scalar')) {\n         \
    \   return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type eq 'IO::Scalar::INLINE')\
    \ {\n        if ($a->isa('IO::Scalar::INLINE') && $b->isa('IO::Scalar::INLINE'))\
    \ {\n            return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::Scalar::Util') {\n        if ($a->isa('IO::Scalar::Util') && $b->isa('IO::Scalar::Util'))\
    \ {\n            return $a->fh eq $b->fh;\n        }\n    }\n    elsif ($type\
    \ eq 'IO::Scalar::Convertible') {\n        if ($a->isa('IO::Scalar::Convertible')\
    \ && $b->isa('IO::Scalar::Convertible')) {\n            return $a->fh eq $b->fh;\n\
    \        }\n    }\n    elsif ($type eq 'IO::Scalar::Converter') {\n        if\
    \ (", "    my $type = ref($a);\n    if ($type eq 'SCALAR') {\n        if ($a eq\
    \ $b) {\n            return $a;\n        }\n        if ($a =~ /^\\d+\\.?\\d*$/)\
    \ {\n            return $a;\n        }\n        if ($b =~ /^\\d+\\.?\\d*$/) {\n\
    \            return $b;\n        }\n        if ($a =~ /^\\d+$/) {\n          \
    \  return $b;\n        }\n        if ($b =~ /^\\d+$/) {\n            return $a;\n\
    \        }\n        if ($a =~ /^\\d+\\.?\\d*,\\d+$/) {\n            return $a;\n\
    \        }\n        if ($b =~ /^\\d+\\.?\\d*,\\d+$/) {\n            return $b;\n\
    \        }\n        if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n            return\
    \ $a;\n        }\n        if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n       \
    \     return $b;\n        }\n        if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*,\\\
    d+$/) {\n            return $a;\n        }\n        if ($b =~ /^\\d+\\.?\\d*,\\\
    d+\\.?\\d*,\\d+$/) {\n            return $b;\n        }\n        if ($a =~ /^\\\
    d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n            return $a;\n        }\n\
    \        if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n           \
    \ return $b;\n        }\n        if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\\
    .?\\d*,\\d+$/) {\n            return $a;\n        }\n        if ($b =~ /^\\d+\\\
    .?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+$/) {\n            return $b;\n        }\n\
    \        if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n\
    \            return $a;\n        }\n        if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\\
    d*,\\d+\\.?\\d*,\\d+\\.?\\d*$/) {\n            return $b;\n        }\n       \
    \ if ($a =~ /^\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+$/) {\n\
    \            return $a;\n        }\n        if ($b =~ /^\\d+\\.?\\d*,\\d+\\.?\\\
    d*,\\d+\\.?\\d*,\\d+\\.?\\d*,\\d+$/) {\n            return $b;\n        }\n  \
    \      if ($a =~ /^\\d+\\.?\\d*,", "    my $type = ref($a);\n    if ($type eq\
    \ 'ARRAY') {\n        foreach my $element (@$a) {\n            if ($element ne\
    \ $b) {\n                return $element;\n            }\n        }\n    } elsif\
    \ ($type eq 'HASH') {\n        foreach my $element (keys %$a) {\n            if\
    \ ($element ne $b) {\n                return $element;\n            }\n      \
    \  }\n    } elsif ($type eq 'SCALAR') {\n        if ($a ne $b) {\n           \
    \ return $a;\n        }\n    } elsif ($type eq 'CODE') {\n        if ($a ne $b)\
    \ {\n            return $a;\n        }\n    } else {\n        return $a > $b ?\
    \ $a : $b;\n    }\n    return;\n}", "    return undef unless defined $a && defined\
    \ $b;\n    return $a if $a eq $b;\n    return $a if $a < $b;\n    return $b;\n\
    }", "    my $type = ref($a) ? ref($a) : \"\";\n    my $type2 = ref($b) ? ref($b)\
    \ : \"\";\n    if ($type eq $type2) {\n        if ($type eq \"ARRAY\") {\n   \
    \         return $a if $a < $b;\n            return $a if $a > $b;\n         \
    \   return $a if $a == $b;\n            return $a if $a <= $b;\n            return\
    \ $a if $a >= $b;\n            return $a if $a != $b;\n        }\n        if ($type\
    \ eq \"HASH\") {\n            return $a if $a->{value} < $b->{value};\n      \
    \      return $a if $a->{value} > $b->{value};\n            return $a if $a->{value}\
    \ == $b->{value};\n            return $a if $a->{value} <= $b->{value};\n    \
    \        return $a if $a->{value} >= $b->{value};\n            return $a if $a->{value}\
    \ != $b->{value};\n        }\n        if ($type eq \"CODE\") {\n            return\
    \ $a if $a->($b) < 0;\n            return $a if $a->($b) > 0;\n            return\
    \ $a if $a->($b) == 0;\n            return $a if $a->($b) <= 0;\n            return\
    \ $a if $a->($b) >= 0;\n            return $a if $a->($b) != 0;\n        }\n \
    \       if ($type eq \"SCALAR\") {\n            return $a if $a < $b;\n      \
    \      return $a if $a > $b;\n            return $a if $a == $b;\n           \
    \ return $a if $a <= $b;\n            return $a if $a >= $b;\n            return\
    \ $a if $a != $b;\n        }\n        if ($type eq \"REF\") {\n            return\
    \ $a if $a->($b) < 0;\n            return $a if $a->($b) > 0;\n            return\
    \ $a if $a->($b) == 0;\n            return $a if $a->($b) <= 0;\n            return\
    \ $a if $a->($b) >= 0;\n            return $a if $a->($b) != 0;\n        }\n \
    \       if ($type eq \"IO\") {\n            return $a if $a->($b) < 0;\n     \
    \       return $a if $a->($b) > 0;\n            return $a if $a->($b) == 0;\n\
    \            return $a if $a->($b) <= 0;\n            return $a if $a", "    my\
    \ $type = ref($a);\n    if ($type eq 'HASH') {\n        my $cmp = $a->{cmp} ||\
    \ sub { $a <=> $b };\n        return $cmp->($b) if defined $cmp;\n        return\
    \ $cmp->($a) if defined $cmp;\n        return $cmp->($a) if defined $cmp;\n  \
    \      return $cmp->($b) if defined $cmp;\n        return $cmp->($a) if defined\
    \ $cmp;\n        return $cmp->($b) if defined $cmp;\n        return $cmp->($a)\
    \ if defined $cmp;\n        return $cmp->($b) if defined $cmp;\n        return\
    \ $cmp->($a) if defined $cmp;\n        return $cmp->($b) if defined $cmp;\n  \
    \      return $cmp->($a) if defined $cmp;\n        return $cmp->($b) if defined\
    \ $cmp;\n        return $cmp->($a) if defined $cmp;\n        return $cmp->($b)\
    \ if defined $cmp;\n        return $cmp->($a) if defined $cmp;\n        return\
    \ $cmp->($b) if defined $cmp;\n        return $cmp->($a) if defined $cmp;\n  \
    \      return $cmp->($b) if defined $cmp;\n        return $cmp->($a) if defined\
    \ $cmp;\n        return $cmp->($b) if defined $cmp;\n        return $cmp->($a)\
    \ if defined $cmp;\n        return $cmp->($b) if defined $cmp;\n        return\
    \ $cmp->($a) if defined $cmp;\n        return $cmp->($b) if defined $cmp;\n  \
    \      return $cmp->($a) if defined $cmp;\n        return $cmp->($b) if defined\
    \ $cmp;\n        return $cmp->($a) if defined $cmp;\n        return $cmp->($b)\
    \ if defined $cmp;\n        return $cmp->($a) if defined $cmp;\n        return\
    \ $cmp->($b) if defined $cmp;\n        return $cmp->($a) if defined $cmp;\n  \
    \      return $cmp->($b) if defined $cmp;\n        return $cmp->($a) if defined\
    \ $cmp;\n        return $cmp->($b) if defined $cmp;\n        return $cmp->($a)\
    \ if defined $cmp;\n        return $cmp->($b) if defined $cmp;\n        return\
    \ $cmp->($a) if defined $cmp;\n        return $cmp->($b) if defined $cmp;\n  \
    \      return $cmp->($a) if defined $cmp;\n        return $cmp->($b) if defined\
    \ $", "    my $type = ref($a);\n    if ($type eq 'HASH') {\n        my $a_keys\
    \ = keys %$a;\n        my $b_keys = keys %$b;\n        if ($a_keys ne $b_keys)\
    \ {\n            return $b_keys;\n        }\n        foreach my $key (@$a_keys)\
    \ {\n            my $a_val = $a->{$key};\n            my $b_val = $b->{$key};\n\
    \            my $cmp = compare_one($a_val, $b_val);\n            if ($cmp) {\n\
    \                return $cmp;\n            }\n        }\n        return undef;\n\
    \    } elsif ($type eq 'ARRAY') {\n        my $a_len = @$a;\n        my $b_len\
    \ = @$b;\n        if ($a_len ne $b_len) {\n            return $b_len;\n      \
    \  }\n        foreach my $i (0..$a_len-1) {\n            my $a_val = $a->[$i];\n\
    \            my $b_val = $b->[$i];\n            my $cmp = compare_one($a_val,\
    \ $b_val);\n            if ($cmp) {\n                return $cmp;\n          \
    \  }\n        }\n        return undef;\n    } elsif ($type eq 'SCALAR') {\n  \
    \      my $a_val = $a;\n        my $b_val = $b;\n        if ($a_val ne $b_val)\
    \ {\n            return $b_val;\n        }\n        return undef;\n    } elsif\
    \ ($type eq 'CODE') {\n        return compare_one($a->(), $b->());\n    } elsif\
    \ ($type eq 'undef') {\n        return undef;\n    } else {\n        return $a\
    \ cmp $b;\n    }\n}", "    return $a if $a < $b;\n    return $b if ($a > $b);\n\
    \    return;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
