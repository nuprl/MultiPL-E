name: HumanEval_113_odd_count
language: pl
prompt: "# Given a list of strings, where each string consists of only digits, return\
  \ a list.\n# Each element i of the output should be \"the number of odd elements\
  \ in the\n# string i of the input.\" where all the i's should be replaced by the\
  \ number\n# of odd digits in the i'th string of the input.\n# >>> odd_count([\"\
  1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\
  # >>> odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng\
  \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
  ]\nsub odd_count {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_count;\n\
  \        if(eq_deeply($candidate->([\"1234567\"]),[\"the number of odd elements\
  \ 4n the str4ng 4 of the 4nput.\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"3\", \"11111111\"]),[\"the\
  \ number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements\
  \ 8n the str8ng 8 of the 8nput.\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"271\", \"137\", \"314\"]),[\"\
  the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
  \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
  \ str2ng 2 of the 2nput.\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @out;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n\
    \        $odd_count += $str =~ tr/0-9//;\n    }\n    push @out, $odd_count . \"\
    n the str$#lst $odd_count of the $#lst\";\n    return @out;\n}", "    my @odds;\n\
    \    my $i = 0;\n    foreach my $str (@$lst) {\n        my $odd_count = 0;\n \
    \       foreach my $digit (split(//, $str)) {\n            $odd_count += 1 if\
    \ ($digit & 1);\n        }\n        $odds[$i] = $odd_count;\n        $i++;\n \
    \   }\n    return @odds;\n}", "    my @out;\n    my $odd_count = 0;\n    foreach\
    \ my $str (@$lst) {\n        my $odd_digits = 0;\n        foreach my $digit (split(//,\
    \ $str)) {\n            $odd_digits += $digit % 2;\n        }\n        $odd_count\
    \ += $odd_digits;\n    }\n    push @out, $odd_count . \" odd digits in all strings\"\
    \ if @$lst > 1;\n    return @out;\n}", "    my @out;\n    my $i = 0;\n    foreach\
    \ my $str (@$lst) {\n        $i++;\n        my $odd = $str =~ tr/0-9//;\n    \
    \    $out[$i] = $odd ? \"$i odd digits\" : \"$i digits\";\n    }\n    return @out;\n\
    }", "    my @res;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n   \
    \     my $len = length($str);\n        my $odd_digits = 0;\n        for (my $i\
    \ = 0; $i < $len; $i++) {\n            if ($str[$i] =~ /\\d/) {\n            \
    \    $odd_digits++;\n            }\n        }\n        push(@res, \"the number\
    \ of odd elements $odd_digits in the str$len of\");\n    }\n    return @res;\n\
    }", "    my @result;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n\
    \        $odd_count += $str =~ /\\d/;\n    }\n    push @result, $odd_count;\n\
    \    return @result;\n}", "    my @res;\n    my $odd_count = 0;\n    foreach my\
    \ $str (@$lst) {\n        my $odd_digits = 0;\n        foreach my $digit (split(//,\
    \ $str)) {\n            $odd_digits += $digit % 2;\n        }\n        $odd_count\
    \ += $odd_digits;\n    }\n    push @res, sprintf(\"the number of odd elements\
    \ %n the str%n %n of the %nput.\", $odd_count, $odd_count, $odd_count);\n    return\
    \ @res;\n}", "    my @odd_counts;\n    my $odd_count = 0;\n    foreach my $str\
    \ (@$lst) {\n        $odd_count += $str =~ tr/0-9//;\n        push @odd_counts,\
    \ $odd_count if $odd_count > 0;\n        $odd_count = 0;\n    }\n    return @odd_counts;\n\
    }", "    my @odds;\n    foreach my $str (@$lst) {\n        push @odds, $str =~\
    \ tr/0-9//;\n    }\n    return @odds;\n}", "    my @out;\n    my $odd_count =\
    \ 0;\n    foreach my $str (@$lst) {\n        my $odd_digits = $str =~ tr/0-9//;\n\
    \        $odd_count += $odd_digits;\n    }\n    push @out, $odd_count . \"n the\
    \ str$#lst $odd_count of the $#lst\";\n    return @out;\n}", "    my @out;\n \
    \   my $odd_count = 0;\n    foreach my $str (@$lst) {\n        $odd_count += $str\
    \ =~ tr/0-9//;\n    }\n    push @out, $odd_count . \"n the str$#lst $odd_count\
    \ of the $#lst\";\n    return @out;\n}", "    my @odd_counts;\n    foreach my\
    \ $str (@$lst) {\n        my $odd_count = 0;\n        foreach my $digit (split(//,\
    \ $str)) {\n            $odd_count += 1 if ($digit & 1);\n        }\n        push\
    \ @odd_counts, $odd_count . \"n\" . $str;\n    }\n    return @odd_counts;\n}",
  "    my @result;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n      \
    \  my $odd_digits = 0;\n        foreach my $digit (split(//, $str)) {\n      \
    \      $odd_digits += $digit % 2;\n        }\n        $odd_count += $odd_digits;\n\
    \    }\n    push @result, $odd_count;\n    return @result;\n}", "    my(@res);\n\
    \    foreach my $str (@$lst) {\n        my $count = 0;\n        foreach my $digit\
    \ (split(//, $str)) {\n            $count += $digit % 2;\n        }\n        push(@res,\
    \ sprintf(\"the number of odd elements %dn the str%dng %d of the %dnput.\", $count,\
    \ $count, $count));\n    }\n    return @res;\n}", "    my @res;\n    my $odd_count\
    \ = 0;\n    foreach my $str (@$lst) {\n        my $odd_digits = 0;\n        foreach\
    \ my $digit (split(//, $str)) {\n            $odd_digits += $digit % 2;\n    \
    \    }\n        $odd_count += $odd_digits;\n    }\n    push @res, sprintf(\"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\", $odd_count, $odd_count,\
    \ $odd_count);\n    return @res;\n}", "    my @out;\n    my $odd_count = 0;\n\
    \    foreach my $str (@$lst) {\n        my $odd_digits = $str =~ tr/0-9//;\n \
    \       $odd_count += $odd_digits;\n    }\n    push @out, $odd_count;\n    return\
    \ @out;\n}", "    my @odds;\n    my $odd_count = 0;\n    foreach my $str (@$lst)\
    \ {\n        foreach my $digit (split(//, $str)) {\n            $odd_count +=\
    \ $digit % 2;\n        }\n        push @odds, $odd_count;\n        $odd_count\
    \ = 0;\n    }\n    return @odds;\n}", "    my @result;\n    my $odd_count = 0;\n\
    \    foreach my $str (@$lst) {\n        foreach my $digit (split(//, $str)) {\n\
    \            $odd_count += $digit % 2;\n        }\n        push(@result, $odd_count\
    \ . \" \" . $str);\n        $odd_count = 0;\n    }\n    return @result;\n}", " \
    \   my @out;\n    my $odd_count = 0;\n    foreach my $str (@$lst) {\n        foreach\
    \ my $digit (split(//, $str)) {\n            $odd_count += $digit % 2;\n     \
    \   }\n        push @out, $odd_count . \" odd digits in $str\";\n        $odd_count\
    \ = 0;\n    }\n    return @out;\n}", "    my @result;\n    my $odd_count = 0;\n\
    \    foreach my $str (@$lst) {\n        $odd_count += $str =~ tr/0-9//;\n    }\n\
    \    push @result, $odd_count;\n    return @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
