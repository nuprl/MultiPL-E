name: HumanEval_43_pairs_sum_to_zero
language: pl
prompt: "# pairs_sum_to_zero takes a list of integers as an input.\n# it returns True\
  \ if there are two distinct elements in the list that\n# sum to zero, and False\
  \ otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pairs_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, -2,\
  \ 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1, 2, 3, 7]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -5, 3, 5,\
  \ 7]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 3, 2, 30]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->([-3, 9, -1, 3, 2, 31]),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
  \ 9, -1, 4, 2, 30]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([-3, 9, -1, 4, 2, 31]),\"\")) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    my $flag = 0;\n    foreach my $i (@$l) {\n  \
    \      if ($i == 0) {\n            $flag = 1;\n        }\n        $sum += $i;\n\
    \        if ($sum == 0) {\n            $flag = 1;\n        }\n    }\n    if ($flag\
    \ == 1) {\n        return 1;\n    }\n    return 0;\n}", "    my $sum = 0;\n  \
    \  my $flag = 0;\n    foreach my $i (@$l) {\n        if ($i == 0) {\n        \
    \    $flag = 1;\n        }\n        $sum += $i;\n    }\n    if ($flag == 1) {\n\
    \        return 1;\n    }\n    if ($sum == 0) {\n        return 0;\n    }\n  \
    \  return 0;\n}", "    my $sum = 0;\n    my $flag = 0;\n    foreach my $i (@$l)\
    \ {\n        if ($i == 0) {\n            $flag = 1;\n        }\n        elsif\
    \ ($sum == 0) {\n            $sum = $i;\n        }\n        else {\n         \
    \   if ($sum == $i) {\n                $flag = 1;\n            }\n           \
    \ else {\n                $flag = 0;\n            }\n        }\n    }\n    return\
    \ $flag;\n}", "    my $sum = 0;\n    foreach my $i (@$l) {\n        $sum += $i;\n\
    \    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    my $found = 0;\n   \
    \ foreach my $i (@$l) {\n        if ($i == 0) {\n            $found = 1;\n   \
    \     }\n        $sum += $i;\n    }\n    return $found ? $sum : undef;\n}", " \
    \   my $sum = 0;\n    foreach my $i (@$l) {\n        $sum += $i;\n    }\n    return\
    \ $sum == 0;\n}", "    my $sum = 0;\n    foreach my $i (@$l) {\n        $sum +=\
    \ $i;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    my $flag = 0;\n\
    \    foreach my $i (@$l) {\n        if ($i == 0) {\n            $flag = 1;\n \
    \       }\n        $sum += $i;\n    }\n    if ($flag == 1) {\n        return 1;\n\
    \    }\n    elsif ($sum == 0) {\n        return 0;\n    }\n    else {\n      \
    \  return 0;\n    }\n}", "    my $sum = 0;\n    foreach my $i (@$l) {\n      \
    \  $sum += $i;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    my $flag\
    \ = 0;\n    foreach my $i (@$l) {\n        if ($i == 0) {\n            $flag =\
    \ 1;\n        }\n        elsif ($sum == 0) {\n            $sum = $i;\n       \
    \ }\n        else {\n            if ($sum == $i) {\n                $flag = 1;\n\
    \            }\n            else {\n                $flag = 0;\n            }\n\
    \        }\n    }\n    return $flag;\n}", "    my $sum = 0;\n    my $found = 0;\n\
    \    foreach my $i (@$l) {\n        if ($i == 0) {\n            $found = 1;\n\
    \        }\n        $sum += $i;\n    }\n    return $found ? 1 : 0;\n}", "    my\
    \ $sum = 0;\n    foreach my $i (@$l) {\n        $sum += $i;\n    }\n    return\
    \ $sum == 0;\n}", "    my $sum = 0;\n    my $flag = 0;\n    foreach my $i (@$l)\
    \ {\n        if ($i == 0) {\n            $flag = 1;\n        }\n        elsif\
    \ ($i == $sum) {\n            $flag = 0;\n        }\n        elsif ($flag == 1)\
    \ {\n            $flag = 0;\n        }\n        $sum += $i;\n    }\n    return\
    \ $flag;\n}", "    my $sum = 0;\n    my $flag = 0;\n    foreach my $i (@$l) {\n\
    \        $sum += $i;\n        if ($sum == 0) {\n            $flag = 1;\n     \
    \       last;\n        }\n    }\n    return $flag;\n}", "    my $sum = 0;\n  \
    \  my $found = 0;\n    foreach my $i (@$l) {\n        if ($i == 0) {\n       \
    \     $found = 1;\n        }\n        elsif ($i == $sum) {\n            $found\
    \ = 1;\n        }\n        elsif ($found == 1) {\n            $found = 0;\n  \
    \      }\n        else {\n            $sum = $i;\n        }\n    }\n    return\
    \ $found == 1;\n}", "    my $sum = 0;\n    foreach my $i (@$l) {\n        $sum\
    \ += $i;\n    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    my $flag =\
    \ 0;\n    foreach my $i (@$l) {\n        if ($i == 0) {\n            $flag = 1;\n\
    \        }\n        $sum += $i;\n        if ($sum == 0) {\n            $flag =\
    \ 1;\n        }\n    }\n    if ($flag == 1) {\n        return 1;\n    }\n    return\
    \ 0;\n}", "    my $sum = 0;\n    foreach my $i (@$l) {\n        $sum += $i;\n\
    \    }\n    return $sum == 0;\n}", "    my $sum = 0;\n    my $first = 1;\n   \
    \ my $last = $#{$l};\n    my $found = 0;\n    my $i = 0;\n    my $j = 0;\n   \
    \ my $found2 = 0;\n    my $found3 = 0;\n    my $found4 = 0;\n    my $found5 =\
    \ 0;\n    my $found6 = 0;\n    my $found7 = 0;\n    my $found8 = 0;\n    my $found9\
    \ = 0;\n    my $found10 = 0;\n    my $found11 = 0;\n    my $found12 = 0;\n   \
    \ my $found13 = 0;\n    my $found14 = 0;\n    my $found15 = 0;\n    my $found16\
    \ = 0;\n    my $found17 = 0;\n    my $found18 = 0;\n    my $found19 = 0;\n   \
    \ my $found20 = 0;\n    my $found21 = 0;\n    my $found22 = 0;\n    my $found23\
    \ = 0;\n    my $found24 = 0;\n    my $found25 = 0;\n    my $found26 = 0;\n   \
    \ my $found27 = 0;\n    my $found28 = 0;\n    my $found29 = 0;\n    my $found30\
    \ = 0;\n    my $found31 = 0;\n    my $found32 = 0;\n    my $found33 = 0;\n   \
    \ my $found34 = 0;\n    my $found35 = 0;\n    my $found36 = 0;\n    my $found37\
    \ = 0;\n    my $found38 = 0;\n    my $found39 = 0;\n    my $found40 = 0;\n   \
    \ my $found41 = 0;\n    my $found42 = 0;\n    my $found43 = 0;\n    my $found44\
    \ = 0;\n    my $found45 = 0;\n    my $found46 = 0;\n    my $found47 = 0;\n   \
    \ my $found48 = 0;\n    my $found49 = 0;\n    my $found50 = 0;\n    my $found51\
    \ = 0;\n    my $found52 = 0;\n    my $found53 = 0;\n    my $found54 = 0;\n   \
    \ my $found55 = 0;\n    my $found56 = 0;\n    my $found57 = 0;\n    my $found58\
    \ = 0;\n    my $found59 = 0;\n    my $found60 = 0;\n    my $found61 = 0;\n   \
    \ my $found62 = 0;\n    my $found63 = 0;\n    my $found64 = 0;\n    my $found65\
    \ = 0;\n    my $found66 = 0;\n    my $found67 = 0;\n    my $found68 = 0;\n   \
    \ my $found69 = 0;\n    my $found70 = 0;\n    my $found71 = 0;\n    my $found72\
    \ = 0;\n    my $found73 = 0;\n    my $found74 = 0;\n    my $found75 = 0;\n   \
    \ my $found76 = 0;\n    my $found77 = 0;\n    my $found78 = 0;\n    my $found79\
    \ = 0;\n    my $found80 = 0;\n    my $found81 = 0;\n    my $found", "    my $sum\
    \ = 0;\n    my $found = 0;\n    foreach my $i (@$l) {\n        if ($i == 0) {\n\
    \            $found++;\n        }\n        $sum += $i;\n    }\n    return $found\
    \ == 2 ? 1 : 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
