name: HumanEval_121_solution
language: pl
prompt: "# Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n# Examples\n# >>> solution([5, 8, 7, 1])\n# 12\n\
  # >>> solution([3, 3, 3, 3, 3])\n# 9\n# >>> solution([30, 13, 24, 321])\n# 0\nsub\
  \ solution {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solution;\n\
  \        if(eq_deeply($candidate->([5, 8, 7, 1]),12)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 3, 3, 3, 3]),9))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30,\
  \ 13, 24, 321]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([5, 9]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8]),0)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30,\
  \ 13, 23, 32]),23)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([3, 13, 2, 9]),3)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    my $i = 0;\n    while($i < @$lst) {\n       \
    \ if($lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n        }\n        $i++;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n    my $even\
    \ = 0;\n    while($i < @$lst) {\n        if($lst[$i] % 2 == 0) {\n           \
    \ $sum += $lst[$i];\n            $even++;\n        }\n        $i++;\n    }\n \
    \   if($even > 0) {\n        $sum -= $lst[$i];\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    my $i = 0;\n    while($i < @$lst) {\n        if($lst[$i]\
    \ % 2 == 0) {\n            $sum += $lst[$i];\n        }\n        $i += 1;\n  \
    \  }\n    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n    while($i <\
    \ @$lst) {\n        if($lst[$i] % 2 != 0) {\n            $sum += $lst[$i];\n \
    \       }\n        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n   \
    \ foreach my $i (@$lst) {\n        if ($i % 2 == 0) {\n            $sum += $i;\n\
    \        }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n \
    \   while($i < @$lst) {\n        if($i % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n  \
    \  my $i = 0;\n    while($i < @$lst) {\n        if($lst[$i] % 2 != 0) {\n    \
    \        $sum += $lst[$i];\n        }\n        $i++;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i % 2 == 0) {\n\
    \            $sum += $i;\n        }\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    while($i < @$lst) {\n        if($j\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n        $j++;\n   \
    \     $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n\
    \    while($i < @$lst) {\n        if($i % 2 == 0) {\n            $sum += $lst->[$i];\n\
    \        }\n        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n  \
    \  foreach my $i (@$lst) {\n        if ($i & 1) {\n            $sum += $i;\n \
    \       }\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n  \
    \  while($i < @$lst) {\n        if($lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n  \
    \  my $i = 0;\n    while($i < @$lst) {\n        if($lst[$i] % 2 == 0) {\n    \
    \        $sum += $lst[$i];\n        }\n        $i++;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    my $i = 0;\n    while($i < @$lst) {\n        if($lst[$i]\
    \ % 2 != 0) {\n            $sum += $lst[$i];\n        }\n        $i++;\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n    while($i < @$lst)\
    \ {\n        if($lst[$i] % 2 != 0) {\n            $sum += $lst[$i];\n        }\n\
    \        $i += 1;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $even = 0;\n    my $odd = 0;\n    while($i < @$lst)\
    \ {\n        $sum += $lst->[$i];\n        $even = $lst->[$i] % 2;\n        $odd\
    \ = $lst->[$i] % 2 != 0;\n        if($even) {\n            $sum += $lst->[$j];\n\
    \            $j++;\n        }\n        $i++;\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    my $i = 0;\n    while($i < @$lst) {\n        if($lst[$i]\
    \ % 2 == 0) {\n            $sum += $lst[$i];\n        }\n        $i++;\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n    while($i < @$lst)\
    \ {\n        if($lst[$i] % 2 != 0) {\n            $sum += $lst[$i];\n        }\n\
    \        $i++;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    my $i = 0;\n\
    \    while($i < @$lst) {\n        if($lst[$i] % 2 != 0) {\n            $sum +=\
    \ $lst[$i];\n        }\n        $i++;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    my $i = 0;\n    while($i < @$lst) {\n        if($lst[$i] % 2 == 0)\
    \ {\n            $sum += $lst[$i];\n        }\n        $i++;\n    }\n    return\
    \ $sum;\n}\n</code>\n<|/ a tags=perl,arrays |>\n<| a tags=perl,arrays |>\n<code>"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
