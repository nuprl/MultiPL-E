language: pl
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sign\
    \ *= $x;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $x (@$arr) {\n        $sum +=\
    \ $x * $sign;\n        $sign *= $x <=> 0;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num < 0 ? -1 : 1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return undef if @$arr == 0;\n    return\
    \ $product;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign * $product;\n        $product\
    \ *= $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $x (@$arr) {\n        $sign\
    \ *= $x if $x != 0;\n        $sum += $sign;\n    }\n    return $sum if $sum !=\
    \ 0;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        my $tmp\
    \ = $sign * $num;\n        $sum += $tmp;\n        $sign *= $num > 0 ? 1 : -1;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= ($num < 0);\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= ($num < 0);\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num < 0 ? -1 : 1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return $product if $product;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $product if $sum;\n    return;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        my $tmp\
    \ = $sign * $num;\n        $sum += $tmp;\n        $sign *= $num >= 0 ? 1 : -1;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $product *= $sign;\n        $sum += $sign\
    \ * $num;\n    }\n    return $sum if $sum;\n    return;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        my $tmp\
    \ = $sign * $num;\n        $sum += $tmp;\n        $sign *= $num > 0 ? 1 : -1;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $x (@$arr) {\n        $sign\
    \ *= $x if $x != 0;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign * $product;\n        $product\
    \ *= $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    foreach my $num (@$arr) {\n        my $sign = 1 if $num >=\
    \ 0;\n        $sign = -1 if $num < 0;\n        $sum += $sign * abs($num);\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        my $sign\
    \ = 1 if $num < 0;\n        $sum += $sign * abs($num);\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign * $product;\n        $product\
    \ *= $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign * $product;\n        $product\
    \ *= $sign;\n    }\n    return $sum if $sum;\n    return;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        my $tmp\
    \ = $sign * $num;\n        $sum += $tmp;\n        $sign *= $num >= 0 ? 1 : -1;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sum +=\
    \ $x * $sign;\n        $sign *= $x if $x != 0;\n    }\n    return $sum if $sum\
    \ != 0;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign * abs($num);\n        $product\
    \ *= $sign;\n    }\n    return $sum if $sum;\n    return $product if $product;\n\
    \    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sum +=\
    \ $x * $sign;\n        $sign *= $x if $x != 0;\n    }\n    return $sum if $sum\
    \ != 0;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num < 0 ? -1 : 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return $product if $product;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sign\
    \ *= $x;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        my $tmp\
    \ = $sign * $num;\n        $sum += $tmp if $tmp;\n        $sign *= $num < 0 ?\
    \ -1 : 1;\n    }\n    return $sum if $sum;\n    return;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    foreach my $num (@$arr) {\n        my $sign = 1 if $num >=\
    \ 0;\n        $sum += $sign * abs($num);\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sum += $num * $sign;\n        $product *= $sign;\n        $sign\
    \ *= $num < 0 ? -1 : 1;\n    }\n    return $sum if $sum;\n    return;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n \
    \       if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return undef if @$arr == 0;\n    return\
    \ $product;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        my $y\
    \ = abs($x);\n        $sum += $y * $sign;\n        $sign *= $x < 0 ? -1 : 0;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ = 1 if $num < 0;\n        $sum += $sign * abs($num);\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * abs($num);\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sum +=\
    \ $x * $sign;\n        $sign *= $x if $x != 0;\n    }\n    return $sum if $sum\
    \ != 0;\n    return undef;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $x (@$arr) {\n        $sign\
    \ *= $x;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    my $len = $#{$arr};\n\
    \    for(my $i = 0; $i < $len; $i++) {\n        $sum += $arr->[$i] * $sign;\n\
    \        $product *= $sign;\n        $sign *= -1;\n    }\n    return $sum if $sum;\n\
    \    return undef if $len == 0;\n    return $product;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return undef if @$arr == 0;\n    return\
    \ $product;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return $product if $product;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $product *= $sign;\n        $sum += $sign\
    \ * $num;\n    }\n    return $sum if $sum;\n    return;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign = 1 if $num < 0;\n        $sign = -1 if $num > 0;\n       \
    \ $sum += $num * $sign;\n        $product *= $sign;\n    }\n    return $sum if\
    \ $sum;\n    return $product if $product;\n    return;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num < 0 ? -1 : 1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum += $num * $num;\n\
    \    }\n    return $sum if $sum;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= ($num < 0) ? -1 : 1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * abs($num);\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return $product if $product;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign * abs($num);\n        $product\
    \ *= $sign;\n    }\n    return $sum if $sum;\n    return $product if $product;\n\
    \    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum += $num * $num if\
    \ $num > 0;\n    }\n    return $sum if $sum;\n    return;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num < 0 ? -1 : 1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= ($num < 0 ? 1 : -1);\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num < 0 ? -1 : 1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    foreach my $num (@$arr) {\n        my $sign = 1 if $num >=\
    \ 0;\n        $sign = -1 if $num < 0;\n        $sum += $sign * $num;\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sign\
    \ *= $x if $x != 0;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ = 1 if $num < 0;\n        $sign = -1 if $num > 0;\n        $sum += $sign * $num;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    foreach my $num (@$arr) {\n        my $sign = 1 if $num >=\
    \ 0;\n        $sign = -1 if $num < 0;\n        $sum += $sign * $num;\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num < 0 ? -1 : 1;\n    }\n    return $sum\
    \ if $sum;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    while($i < @$arr) {\n        $sum += $arr->[$i]\
    \ * $sign;\n        $product *= $sign;\n        $sign *= -1;\n        $i++;\n\
    \    }\n    $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * abs($num);\n        $sign *= ($num < 0 ? 1 : -1);\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign * $product;\n        $product\
    \ *= $sign;\n    }\n    return $sum if $sum;\n    return;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * abs($num);\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sign\
    \ *= $x if $x != 0;\n        $sum += $sign;\n    }\n    return $sum if $sum !=\
    \ 0;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum\
    \ if $sum;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    foreach my $num (@$arr) {\n        my $sign = 1 if $num >=\
    \ 0;\n        $sum *= $sign;\n        $sum += $num if $num >= 0;\n        $sum\
    \ += $num if $num < 0;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return $product if $product;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ = 1 if $num < 0;\n        $sign = -1 if $num > 0;\n        $sum += $sign * $num;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num < 0 ? -1 : 1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num > 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return undef if @$arr == 0;\n    return\
    \ $product;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    my $sign = 1;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $sign * $num;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sum = 0;\n    foreach my $num (@$arr) {\n        my $sign = 1 if $num <\
    \ 0;\n        $sum += $sign * abs($num);\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$arr)\
    \ {\n        $sign *= $num;\n        $sum += $sign;\n        $product *= $sign;\n\
    \    }\n    return $sum if $sum;\n    return undef if @$arr == 0;\n    return\
    \ $product;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $x (@$arr) {\n        $sign\
    \ *= $x if $x != 0;\n        $sum += $x * $sign;\n    }\n    return $sum if $sum\
    \ != 0;\n    return;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sign\
    \ *= $num;\n        $sum += $sign;\n    }\n    return $sum if $sum;\n    return;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n   \
    \ my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum\
    \ += $num * $sign;\n        $sign *= $num >= 0 ? 1 : -1;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821219
