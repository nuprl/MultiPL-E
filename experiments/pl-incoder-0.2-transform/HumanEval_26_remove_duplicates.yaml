name: HumanEval_26_remove_duplicates
language: pl
prompt: "# From a list of integers, remove all elements that occur more than once.\n\
  # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2,\
  \ 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @unique;\n    my $i = 0;\n    my $j = 0;\n    my $last_seen\
    \ = 0;\n    my $last_seen_index = 0;\n    my $last_seen_value = 0;\n    foreach\
    \ my $number (@$numbers) {\n        if ($number == $last_seen) {\n           \
    \ $last_seen_index++;\n        }\n        else {\n            $unique[$j] = $number;\n\
    \            $last_seen = $number;\n            $last_seen_index = 1;\n      \
    \  }\n        $j++;\n    }\n    return @unique;\n}", "    my @unique;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k;\n    my $number;\n    my $found;", "   \
    \ my @unique;\n    my %seen;\n    foreach my $num (@$numbers) {\n        if (!$seen{$num}++)\
    \ {\n            push @unique, $num;\n        }\n    }\n    return @unique;\n}",
  "    my @unique;\n    my $i = 0;\n    my $j = 0;\n    my $last_seen;\n    my $last_seen_index;\n\
    \    foreach my $number (@$numbers) {\n        if ($number == $last_seen) {\n\
    \            $last_seen_index = $i;\n        }\n        $last_seen = $number;\n\
    \        $unique[$j] = $number;\n        $j++;\n        $i++;\n    }\n    return\
    \ @unique;\n}", "    my @unique;\n    my $i = 0;\n    my $j = 0;\n    my $k;\n\
    \    my $found;\n    foreach my $num (@$numbers) {\n        if ($num == $unique[$i])\
    \ {\n            $found++;\n        } else {\n            $unique[$j] = $num;\n\
    \            $j++;\n        }\n        $i++;\n    }\n    if ($found == 0) {\n\
    \        die \"No duplicates in list\";\n    }\n    return @unique;\n}", "   \
    \ my @unique_numbers;\n    my $i = 0;\n    my $j = 0;\n    my $k;\n    my $last_number;",
  "    my @unique_numbers;\n    my $i = 0;\n    foreach my $number (@$numbers) {\n\
    \        if ($unique_numbers->[$i] eq $number) {\n            $i++;\n        }\n\
    \        else {\n            $unique_numbers->[$i] = $number;\n            $i++;\n\
    \        }\n    }\n    return @unique_numbers;\n}", "    my @result;\n    my $i\
    \ = 0;\n    my $j = 0;\n    my $k;\n    my $found;\n    my $number;", "    my\
    \ @result;\n    my $i = 0;\n    my $j = 0;\n    my $last;\n    my $last2;\n  \
    \  my $last3;\n    my $last4;\n    my $last5;\n    my $last6;\n    my $last7;\n\
    \    my $last8;\n    my $last9;\n    my $last10;\n    my $last11;\n    my $last12;\n\
    \    my $last13;\n    my $last14;\n    my $last15;\n    my $last16;\n    my $last17;\n\
    \    my $last18;\n    my $last19;\n    my $last20;\n    my $last21;\n    my $last22;\n\
    \    my $last23;\n    my $last24;\n    my $last25;\n    my $last26;\n    my $last27;\n\
    \    my $last28;\n    my $last29;\n    my $last30;\n    my $last31;\n    my $last32;\n\
    \    my $last33;\n    my $last34;\n    my $last35;\n    my $last36;\n    my $last37;\n\
    \    my $last38;\n    my $last39;\n    my $last40;\n    my $last41;\n    my $last42;\n\
    \    my $last43;\n    my $last44;\n    my $last45;\n    my $last46;\n    my $last47;\n\
    \    my $last48;\n    my $last49;\n    my $last50;\n    my $last51;\n    my $last52;\n\
    \    my $last53;\n    my $last54;\n    my $last55;\n    my $last56;\n    my $last57;\n\
    \    my $last58;\n    my $last59;\n    my $last60;\n    my $last61;\n    my $last62;\n\
    \    my $last63;\n    my $last64;\n    my $last65;\n    my $last66;\n    my $last67;\n\
    \    my $last68;\n    my $last69;\n    my $last70;\n    my $last71;\n    my $last72;\n\
    \    my $last73;\n    my $last74;\n    my $last75;\n    my $last76;\n    my $last77;\n\
    \    my $last78;\n    my $last79;\n    my $last80;\n    my $last81;\n    my $last82;\n\
    \    my $last83;\n    my $last84;\n    my $last85;\n    my $last86;\n    my $last",
  "    my @unique_numbers;\n    my $i = 0;\n    foreach my $number (@$numbers) {\n\
    \        next if $unique_numbers->[$i] == $number;\n        $unique_numbers->[$i]\
    \ = $number;\n        $i++;\n    }\n    return @unique_numbers;\n}", "    my @unique;\n\
    \    my %seen;\n    foreach my $num (@$numbers) {\n        if (!$seen{$num}++)\
    \ {\n            push @unique, $num;\n        }\n    }\n    return @unique;\n}",
  "    my @unique_numbers;\n    my $i = 0;\n    my $j = 0;\n    my $last_number =\
    \ $numbers[0];\n    foreach my $number (@$numbers) {\n        if ($number != $last_number)\
    \ {\n            $unique_numbers[$j] = $number;\n            $j++;\n        }\n\
    \        $last_number = $number;\n    }\n    return @unique_numbers;\n}", "  \
    \  my @unique;\n    my $i = 0;\n    my $j = 0;\n    my $last;\n    my $first;\n\
    \    my $last2;\n    my $first2;\n    my $last3;\n    my $first3;\n    my $last4;\n\
    \    my $first4;\n    my $last5;\n    my $first5;\n    my $last6;\n    my $first6;\n\
    \    my $last7;\n    my $first7;\n    my $last8;\n    my $first8;\n    my $last9;\n\
    \    my $first9;\n    my $last10;\n    my $first10;\n    my $last11;\n    my $first11;\n\
    \    my $last12;\n    my $first12;\n    my $last13;\n    my $first13;\n    my\
    \ $last14;\n    my $first14;\n    my $last15;\n    my $first15;\n    my $last16;\n\
    \    my $first16;\n    my $last17;\n    my $first17;\n    my $last18;\n    my\
    \ $first18;\n    my $last19;\n    my $first19;\n    my $last20;\n    my $first20;\n\
    \    my $last21;\n    my $first21;\n    my $last22;\n    my $first22;\n    my\
    \ $last23;\n    my $first23;\n    my $last24;\n    my $first24;\n    my $last25;\n\
    \    my $first25;\n    my $last26;\n    my $first26;\n    my $last27;\n    my\
    \ $first27;\n    my $last28;\n    my $first28;\n    my $last29;\n    my $first29;\n\
    \    my $last30;\n    my $first30;\n    my $last31;\n    my $first31;\n    my\
    \ $last32;\n    my $first32;\n    my $last33;\n    my $first33;\n    my $last34;\n\
    \    my $first34;\n    my $last35;\n    my $first35;\n    my $last36;\n    my\
    \ $first36;\n    my $last37;\n    my $first37;\n    my $last38;\n    my $first38;\n\
    \    my $last39;\n    my $first39;\n    my $last40;\n    my $first40;\n    my\
    \ $last41;\n    my $first41;\n    my $last42;\n    my $first42;\n    my $last43;\n\
    \    my $first43;\n    my $last44;\n    my $first44;\n    my $last45;\n    my\
    \ $", "    my @result;\n    my $last_seen;\n    my $i = 0;\n    my $j = 0;\n \
    \   my $last_seen_index;\n    my $last_seen_number;", "    my @numbers_unique;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $unique = 0;\n    my $number = $numbers[$i];\n\
    \    foreach $number (@$numbers) {\n        if ($number == $numbers[$j]) {\n \
    \           $unique++;\n        }\n        else {\n            $unique = 0;\n\
    \            $numbers_unique[$i] = $number;\n        }\n        $j++;\n    }\n\
    \    if ($unique > 0) {\n        $numbers_unique[$i] = $number;\n    }\n    return\
    \ @numbers_unique;\n}", "    my @unique;\n    my $i = 0;\n    foreach my $num\
    \ (@$numbers) {\n        if ($unique[$i] eq $num) {\n            $i++;\n     \
    \   } else {\n            $unique[$i] = $num;\n            $i++;\n        }\n\
    \    }\n    return @unique;\n}", "    my @output;\n    my $index = 0;\n    my\
    \ $last;\n    foreach my $number (@$numbers) {\n        if ($number != $last)\
    \ {\n            $output[$index] = $number;\n            $index++;\n        }\n\
    \        $last = $number;\n    }\n    return @output;\n}", "    my @result;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $last;", "    my @unique;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $unique_count = 0;\n    my $last_value = $numbers[0];\n\
    \    foreach my $number (@$numbers) {\n        if ($number == $last_value) {\n\
    \            $unique_count++;\n        } else {\n            if ($unique_count\
    \ == 1) {\n                push(@unique, $number);\n            } else {\n   \
    \             push(@unique, $last_value);\n                push(@unique, $number);\n\
    \            }\n            $unique_count = 1;\n            $last_value = $number;\n\
    \        }\n    }\n    return @unique;\n}", "    my @unique;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $last;\n    my $last_index;\n    my $last_value;"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
