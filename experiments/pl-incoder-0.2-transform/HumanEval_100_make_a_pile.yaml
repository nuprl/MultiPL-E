name: HumanEval_100_make_a_pile
language: pl
prompt: "# Given a positive integer n, you have to make a pile of n levels of stones.\n\
  # The first level has n stones.\n# The number of stones in the next level is:\n\
  # - the next odd number if n is odd.\n# - the next even number if n is even.\n#\
  \ Return the number of stones in each level in a list, where element at index\n\
  # i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile(3)\n\
  # [3, 5, 7]\nsub make_a_pile {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_a_pile;\n\
  \        if(eq_deeply($candidate->(3),[3, 5, 7])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4, 6, 8, 10]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5,\
  \ 7, 9, 11, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(6),[6, 8, 10, 12, 14, 16])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),[8,\
  \ 10, 12, 14, 16, 18, 20, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @stones;\n    my $i = 0;\n    while($i < $n) {\n        my $odd\
    \ = $n % 2;\n        my $even = $n % 2 ? 1 : 0;\n        push @stones, $odd ?\
    \ $odd : $even;\n        $i += 1;\n    }\n    return @stones;\n}", "    my @stones\
    \ = ();\n    my $i = 0;\n    while($i <= $n) {\n        push(@stones, $i);\n \
    \       my $next_odd = $i + 1;\n        my $next_even = $i + 2;\n        if($next_odd\
    \ % 2 == 0) {\n            $next_odd += 1;\n        }\n        if($next_even %\
    \ 2 == 0) {\n            $next_even += 1;\n        }\n        $i = $next_even;\n\
    \    }\n    return @stones;\n}", "    my @result;\n    my $i = 0;\n    my $odd\
    \ = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n    my $next_odd = $odd ? $n + 1\
    \ : $n;\n    my $next_even = $even ? $n + 1 : $n;\n    while($i < $n) {\n    \
    \    push @result, $i + 1;\n        $i += $odd ? $next_odd : $next_even;\n   \
    \ }\n    return @result;\n}", "    my @pile;\n    my $i = 0;\n    while($i < $n)\
    \ {\n        push(@pile, $i+1);\n        $i += 2 if $i%2;\n    }\n    return @pile;\n\
    }", "    my @pile;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n  \
    \  my $level = 1;\n    my $stones = $odd ? $n : $n + 1;\n    push @pile, $stones;\n\
    \    while($level < $n) {\n        $stones += $even ? $n : $n + 1;\n        push\
    \ @pile, $stones;\n        $level += 2;\n    }\n    return @pile;\n}", "    my\
    \ @stones;\n    my $i = 0;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 :\
    \ 1;\n    my $next_odd = $odd ? $n + 1 : $n + 2;\n    my $next_even = $even ?\
    \ $n + 1 : $n + 2;\n    my $stones_in_next_level;\n    while($i < $n) {\n    \
    \    $stones_in_next_level = $odd ? $next_odd : $next_even;\n        $stones[$i]\
    \ = $stones_in_next_level;\n        $i += 1;\n        $next_odd = $odd ? $next_odd\
    \ + 1 : $next_even;\n        $next_even = $even ? $next_even + 1 : $next_odd +\
    \ 1;\n    }\n    return @stones;\n}", "    my @stones = ();\n    my $i = 0;\n\
    \    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n    while($i < $n) {\n\
    \        push(@stones, $odd);\n        $i += $even;\n        $odd = $odd ? 0 :\
    \ 1;\n        $even = $even ? 0 : 1;\n    }\n    return @stones;\n}", "    my\
    \ @stones = ();\n    my $i = 0;\n    while($i < $n) {\n        push(@stones, $i+1);\n\
    \        my $odd = $i%2;\n        $i += $odd ? -2 : 2;\n    }\n    return @stones;\n\
    }", "    my @pile = ();\n    my $i = 0;\n    while($i <= $n) {\n        push(@pile,\
    \ $i);\n        $i += $n%2 ? 2 : 1;\n    }\n    return @pile;\n}", "    my @result;\n\
    \    my $i = 0;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n    while($i\
    \ < $n) {\n        push(@result, $odd ? $n + $i : $i);\n        $i += $even;\n\
    \    }\n    return @result;\n}", "    my @stones = ();\n    my $i = 0;\n    while($i\
    \ <= $n) {\n        push(@stones, $i + 1);\n        if($n % 2 == 0) {\n      \
    \      $i += 2;\n        } else {\n            $i += 1;\n        }\n        $n--;\n\
    \    }\n    return @stones;\n}", "    my @levels = ();\n    my $i = 0;\n    while($i\
    \ < $n) {\n        push(@levels, $i + 1);\n        $i += $n%2 ? 2 : 1;\n    }\n\
    \    return @levels;\n}", "    my @pile;\n    my $odd = $n % 2;\n    my $even\
    \ = $n % 2 ? 0 : 1;\n    my $level = $odd ? $n : $n + 1;\n    my $stones = $level;\n\
    \    my $next_level = $level + $even;\n    my $next_stones = $next_level % 2 ?\
    \ $next_level : $next_level + 1;\n    push @pile, $stones;\n    push @pile, $next_stones;\n\
    \    return @pile;\n}", "    my @stones = ();\n    my @levels = ();\n    my $level\
    \ = 0;\n    my $stone = 1;\n    my $odd_stone = 0;\n    my $even_stone = 0;\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        if($i % 2 == 0) {\n            $even_stone\
    \ += $stone;\n        } else {\n            $odd_stone += $stone;\n        }\n\
    \        $stone++;\n    }\n    for(my $i = 0; $i < $n; $i++) {\n        if($i\
    \ % 2 == 0) {\n            $levels[$level] += $even_stone;\n        } else {\n\
    \            $levels[$level] += $odd_stone;\n        }\n        $level++;\n  \
    \  }\n    return @levels;\n}", "    my @pile;\n    my $i = 0;\n    for(; $i <=\
    \ $n; $i++) {\n        push @pile, $i % 2 ? $i + 1 : $i;\n    }\n    return @pile;\n\
    }", "    my @level;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 1 : 0;\n \
    \   my $i = 0;\n    my $level_count = 0;\n    while($i < $n) {\n        $level[$level_count]\
    \ = $odd;\n        $level_count++;\n        $i += $even;\n    }\n    return @level;\n\
    }", "    my @stones = ();\n    my $i = 0;\n    while($i < $n) {\n        push(@stones,\
    \ $i+1);\n        $i += 2 if $i%2 == 1;\n    }\n    return @stones;\n}", "   \
    \ my @pile;\n    my $i = 0;\n    my $odd = $n % 2;\n    my $even = $n % 2 ? 0\
    \ : 1;\n    for(; $i < $n; $i++) {\n        $pile[$i] = $odd ? $i + 1 : $i;\n\
    \        $odd = !$odd;\n    }\n    return @pile;\n}", "    my @levels = ();\n\
    \    my $odd = $n % 2;\n    my $even = $n % 2 ? 0 : 1;\n    my $level = $odd ?\
    \ $n : $n + 1;\n    push(@levels, $level);\n    push(@levels, $even);\n    push(@levels,\
    \ $n - $even);\n    return @levels;\n}", "    my @pile;\n    my $i = 0;\n    my\
    \ $odd = $n % 2;\n    my $even = not $odd;\n    my $next_odd = $odd ? $n + 1 :\
    \ $n;\n    my $next_even = $even ? $n + 1 : $n;\n    push(@pile, $odd) while $i\
    \ < $next_odd;\n    push(@pile, $even) while $i < $next_even;\n    return @pile;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
