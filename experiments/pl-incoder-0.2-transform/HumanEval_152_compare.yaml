name: HumanEval_152_compare
language: pl
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# >>> compare([1, 2,\
  \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare([0, 5,\
  \ 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\nsub compare {\n    my($game,\
  \ $guess) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&compare;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]),[0,\
  \ 0, 0, 0, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0,\
  \ 0, 0, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([1, 2, 3], [-1, -2, -3]),[2, 4, 6])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 5], [-1, 2, 3, 4]),[2, 0, 0, 1])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($score, $correct) = @_;\n    my($i, $j, $correct, $diff, $diffs);\n\
    \    my(@diffs);\n    \n    # initialize return array\n    foreach $diff (@$score)\
    \ {\n        $diffs[$diff] = 0;\n    }\n    \n    # compare each guess to each\
    \ score\n    for ($i = 0; $i < @$guess; $i++) {\n        for ($j = 0; $j < @$score;\
    \ $j++) {\n            $diff = $$score[$j] - $$guess[$i];\n            if ($diff\
    \ < 0) {\n                $diffs[$diff]++;\n            }\n        }\n    }\n\
    \    \n    # return array of differences\n    return @diffs;\n}", "    my($score,\
    \ $guess) = @_;\n    my($i, $j, $diff) = (0, 0);\n    \n    for($i = 0; $i < @$game;\
    \ $i++) {\n        for($j = 0; $j < @$guess; $j++) {\n            $diff = $$game[$i]\
    \ - $$guess[$j];\n            if($diff < 0) {\n                $diff = -$diff;\n\
    \            }\n            $diff += $diff;\n            $diff += $diff;\n   \
    \     }\n    }\n    \n    return $diff;\n}", "    my(@result) = ();\n    foreach\
    \ my $i (0..$#{$game}) {\n        my $score = $game->[$i];\n        my $guess\
    \ = $guess->[$i];\n        my $diff = $guess - $score;\n        if ($diff < 0)\
    \ {\n            $diff *= -1;\n        }\n        push(@result, $diff);\n    }\n\
    \    return @result;\n}", "    my($score, $guesses) = @_;\n    my($i, $j, $diff)\
    \ = (0, 0);\n    \n    for ($i = 0; $i < @$guesses; $i++) {\n        for ($j =\
    \ 0; $j < @$score; $j++) {\n            $diff += abs($guess[$i] - $score[$j]);\n\
    \        }\n    }\n    \n    return $diff;\n}", "    my(@result) = ();\n    foreach\
    \ my $i (0 .. $#{$game}) {\n        my $score = $game->[$i];\n        my $guess\
    \ = $guess->[$i];\n        my $diff = abs($guess - $score);\n        if ($guess\
    \ == $score) {\n            $result[$i] = 0;\n        } else {\n            $result[$i]\
    \ = $diff;\n        }\n    }\n    return @result;\n}", "    my($score, $correct)\
    \ = @_;\n    my($i, $j, $correct, $diff);\n    my(@result);\n    \n    # Initialize\
    \ result array\n    @result = ();\n    \n    # Iterate through each guess and\
    \ score\n    for ($i = 0; $i < @$guess; $i++) {\n        $correct = 0;\n     \
    \   $diff = 0;\n        \n        # Iterate through each score\n        for ($j\
    \ = 0; $j < @$score; $j++) {\n            if ($guess[$i] == $score[$j]) {\n  \
    \              $correct++;\n                $diff = $diff+abs($guess[$i]-$score[$j]);\n\
    \            }\n        }\n        \n        # Store result if correct\n     \
    \   if ($correct == @$score) {\n            push(@result, $diff);\n        }\n\
    \    }\n    \n    # Return result\n    return @result;\n}", "    my(@result) =\
    \ ();\n    my $score;\n    my $diff;\n    foreach my $i (0..$#{$game}) {\n   \
    \     $score = $game->[$i];\n        $diff = $guess->[$i] - $score;\n        if\
    \ ($diff < 0) {\n            $diff *= -1;\n        }\n        push(@result, $diff);\n\
    \    }\n    return @result;\n}", "    my($score, $guess) = @_;\n    my($i, $j,\
    \ $diff);\n    \n    my $scores = [];\n    \n    for($i = 0; $i < @$game; $i++)\
    \ {\n        $scores[$i] = $game->[$i] - $guess[$i];\n    }\n    \n    for($i\
    \ = 0; $i < @$guess; $i++) {\n        $diff = $scores[$i] - $guess[$i];\n    \
    \    $diff > 0 ? $diff = 0 : $diff = -$diff;\n        $scores[$i] = $diff;\n \
    \   }\n    \n    return $scores;\n}", "    my($score, $guess) = @_;\n    my($i,\
    \ $j, $diff);\n    \n    foreach $i (0 .. $#score) {\n        foreach $j (0 ..\
    \ $#guess) {\n            $diff = $score[$i] - $guess[$j];\n            if ($diff\
    \ < 0) {\n                $diff *= -1;\n            }\n            if ($diff ==\
    \ 0) {\n                $diff = 0;\n            }\n            if ($diff != $score[$i])\
    \ {\n                return [$diff, $diff];\n            }\n        }\n    }\n\
    \    return [0, 0];\n}", "    my($score, $guesses) = @_;\n    my($i, $j, $diff);\n\
    \    \n    $diff = @$guess - @$score;\n    \n    for ($i = 0; $i < @$guesses;\
    \ $i++) {\n        for ($j = 0; $j < @$score; $j++) {\n            if ($guesses[$i]\
    \ == $score[$j]) {\n                $diff[$i] = 0;\n            } else {\n   \
    \             $diff[$i] = abs($guesses[$i] - $score[$j]);\n            }\n   \
    \     }\n    }\n    \n    return $diff;\n}", "    my($score, $correct) = @_;\n\
    \    my($i, $j, $k, $diff);\n    my(@diffs);\n    \n    foreach $i (0 .. $#score)\
    \ {\n        foreach $j (0 .. $#guess) {\n            $diff = $score[$i] - $guess[$j];\n\
    \            if ($diff < 0) {\n                $diff = -$diff;\n            }\n\
    \            push(@diffs, $diff);\n        }\n    }\n    \n    foreach $i (0 ..\
    \ $#guess) {\n        $correct[$i] = 0;\n    }\n    \n    foreach $i (0 .. $#score)\
    \ {\n        $correct[$i] = $diffs[$i];\n    }\n    \n    return @diffs;\n}",
  "    my(@score) = @_;\n    my(@guess) = @_;\n    my(@results);\n    my($i, $j, $score,\
    \ $guess);\n    \n    foreach $i (0 .. $#score) {\n        foreach $j (0 .. $#guess)\
    \ {\n            $score = $score[$i];\n            $guess = $guess[$j];\n    \
    \        if ($guess == $score) {\n                $results[$i] = 0;\n        \
    \    } else {\n                $results[$i] = abs($guess - $score);\n        \
    \    }\n        }\n    }\n    return @results;\n}", "    my($score, $guess) =\
    \ @_;\n    my(@result) = ();\n    \n    foreach my $i (0 .. $#score) {\n     \
    \   my $diff = $guess[$i] - $score[$i];\n        if ($diff < 0) {\n          \
    \  $diff *= -1;\n        }\n        push(@result, $diff);\n    }\n    return @result;\n\
    }", "    my($score, $guess) = @_;\n    my($i, $j, $diff);\n    my($max) = @$game;\n\
    \    my($maxguess) = @$guess;\n    my($maxdiff) = 0;\n    \n    for(my $i = 0;\
    \ $i < @$game; $i++) {\n        for(my $j = 0; $j < @$guess; $j++) {\n       \
    \     $diff = $$game[$i] - $$guess[$j];\n            if($diff < 0) {\n       \
    \         $diff = -$diff;\n            }\n            if($diff > $maxdiff) {\n\
    \                $maxdiff = $diff;\n            }\n        }\n    }\n    \n  \
    \  for(my $i = 0; $i < @$guess; $i++) {\n        $diff = $$guess[$i] - $score;\n\
    \        if($diff < 0) {\n            $diff = -$diff;\n        }\n        if($diff\
    \ > $maxdiff) {\n            $maxdiff = $diff;\n        }\n    }\n    \n    for(my\
    \ $i = 0; $i < @$game; $i++) {\n        $diff = $$game[$i] - $guess;\n       \
    \ if($diff < 0) {\n            $diff = -$diff;\n        }\n        if($diff >\
    \ $maxdiff) {\n            $maxdiff = $diff;\n        }\n    }\n    \n    for(my\
    \ $i = 0; $i < @$guess; $i++) {\n        $diff = $$guess[$i] - $score;\n     \
    \   if($diff < 0) {\n            $diff = -$diff;\n        }\n        if($diff\
    \ > $maxdiff) {\n            $maxdiff = $diff;\n        }\n    }\n    \n    for(my\
    \ $i = 0; $i < @$game; $i++) {\n        $diff = $$game[$i] - $guess;\n       \
    \ if($diff < 0) {\n            $diff = -$diff;\n        }\n        if($diff >\
    \ $maxdiff) {\n            $maxdiff = $diff;\n        }\n    }\n    \n    for(my\
    \ $i = 0; $i < @$guess; $i++) {\n        $diff = $$guess[$i] - $score;\n     \
    \   if($diff < 0) {\n            $diff = -$diff;\n        }\n        if($diff\
    \ > $maxdiff) {\n            $maxdiff = $diff;\n        }\n    }\n    \n    for(my\
    \ $i = 0; $i < @$game; $i++) {\n        $diff = $$game[$i] - $guess;\n       \
    \ if($diff < 0) {\n            $diff = -$diff;\n        }\n        if($diff >\
    \ $maxdiff) {\n            $maxdiff = $diff;\n        }\n    }\n    \n    for(my\
    \ $i = 0; $i < ", "    my($score, $guesses) = @_;\n    my($i, $j, $diff, $diffs);\n\
    \    my(@results);\n    \n    # initialize result array\n    for ($i = 0; $i <\
    \ @$score; $i++) {\n        $results[$i] = 0;\n    }\n    \n    # calculate differences\
    \ between guess and score\n    for ($i = 0; $i < @$guesses; $i++) {\n        for\
    \ ($j = 0; $j < @$score; $j++) {\n            $diff = $guess[$i] - $score[$j];\n\
    \            if ($diff < 0) {\n                $diff = -$diff;\n            }\n\
    \            $diffs[$i][$j] = $diff;\n        }\n    }\n    \n    # determine\
    \ if all guesses were correct\n    for ($i = 0; $i < @$guesses; $i++) {\n    \
    \    for ($j = 0; $j < @$score; $j++) {\n            if ($diffs[$i][$j] != 0)\
    \ {\n                $results[$i] += abs($diffs[$i][$j]);\n            }\n   \
    \     }\n    }\n    \n    return @results;\n}", "    my(@result) = ();\n    my\
    \ $score;\n    my $diff;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n   \
    \ my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n\
    \    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my\
    \ $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n\
    \    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my\
    \ $Z;\n    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n\
    \    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n\
    \    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my\
    \ $y;\n    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n\
    \    my $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my\
    \ $L;\n    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n\
    \    my $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my\
    \ $Y;\n    my $Z;\n    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n\
    \    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n", " \
    \   my($score, $correct) = @_;\n    my($i, $j, $diff) = 0;\n    \n    for ($i\
    \ = 0; $i < @$game; $i++) {\n        for ($j = 0; $j < @$guess; $j++) {\n    \
    \        $diff += abs($guess[$j] - $game[$i]);\n        }\n    }\n    \n    return\
    \ $diff if $diff == 0;\n    \n    return map { abs($guess[$_] - $game[$_]) } 0..$#guess;\n\
    }", "    my($score, $correct) = (0, 0);\n    foreach my $index (0..$#{$game})\
    \ {\n        if ($game[$index] == $guess[$index]) {\n            $correct++;\n\
    \        }\n        else {\n            $correct = abs($game[$index] - $guess[$index]);\n\
    \        }\n    }\n    return $correct;\n}", "    my($score, $guesses) = @_;\n\
    \    my($i, $j, $diff) = (0, 0);\n    \n    for ($i = 0; $i < @$guesses; $i++)\
    \ {\n        for ($j = 0; $j < @$score; $j++) {\n            $diff += abs($guess[$i]\
    \ - $score[$j]);\n        }\n    }\n    \n    return $diff;\n}", "    my($score,\
    \ $correct) = @_;\n    my($i, $j, $diff);\n    my(@result);\n    \n    # initialize\
    \ result array\n    @result = ();\n    \n    # loop through each guess and score\n\
    \    for ($i = 0; $i < @$guess; $i++) {\n        for ($j = 0; $j < @$score; $j++)\
    \ {\n            # if the guess is correct, increment the diff and move on\n \
    \           if ($guess[$i] == $score[$j]) {\n                $diff = $diff + 0;\n\
    \                next;\n            }\n            # otherwise compare the guess\
    \ to the score\n            $diff = $diff + (abs($guess[$i] - $score[$j]));\n\
    \        }\n        # if the guess is correct, increment the diff and move on\n\
    \        $diff = $diff + 0;\n    }\n    \n    # return the result\n    return\
    \ @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
