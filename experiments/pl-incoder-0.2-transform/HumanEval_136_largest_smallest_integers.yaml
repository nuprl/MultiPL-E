name: HumanEval_136_largest_smallest_integers
language: pl
prompt: "# Create a function that returns a tuple (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n\
  # If there is no negative or positive integers, return them as None.\n# Examples:\n\
  # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n\
  # [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_smallest_integers;\n\
  \        if(eq_deeply($candidate->([2, 4, 1, 3, 5, 7]),[undef, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 1, 3, 5, 7, 0]),[undef, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([7, 3, 8, 4, 9, 2, 5, -9]),[-9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[undef,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([0]),[undef, undef])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -3, -5, -6]),[-1,\
  \ undef])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([-1, -3, -5, -6, 0]),[-1, undef])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-6,\
  \ -4, -4, -3, 1]),[-3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([-6, -4, -4, -3, -100, 1]),[-3, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min = undef;\n    my $max = undef;\n    foreach my $num (@$lst)\
    \ {\n        if ($num < 0) {\n            $min = $num if !defined $min;\n    \
    \    } elsif ($num > 0) {\n            $max = $num if !defined $max;\n       \
    \ }\n    }\n    return ($min, $max);\n}", "    my $min = undef;\n    my $max =\
    \ undef;\n    foreach my $num (@$lst) {\n        if ($num < 0) {\n           \
    \ $min = $num if $min == undef;\n            $max = $num if $max < $num;\n   \
    \     } elsif ($num > 0) {\n            $min = $num if $min == undef;\n      \
    \      $max = $num if $max > $num;\n        } else {\n            $min = $num\
    \ if $min == undef;\n            $max = $num if $max < $num;\n        }\n    }\n\
    \    return ($min, $max);\n}", "    my @result;\n    my $max;\n    my $min;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $maxi;\n    my $mini;\n    my $maxj;\n\
    \    my $minij;\n    my $maxk;\n    my $minik;\n    my $maxjk;\n    my $minijk;\n\
    \    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n\
    \    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n\
    \    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n\
    \    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n\
    \    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n\
    \    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n\
    \    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n\
    \    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n\
    \    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n\
    \    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n\
    \    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n\
    \    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n\
    \    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n\
    \    my $minijk;\n    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $minijk;\n\
    \    my $maxjk;\n    my $minijk;\n    my $maxjk;\n    my $mini", "    my @result;\n\
    \    my $min;\n    my $max;\n    my $i;\n    my $j;\n    my $k;\n    my $max;\n\
    \    my $min;\n    my $min_index;\n    my $max_index;\n    my $max_value;\n  \
    \  my $min_value;\n    my $found;\n    my $found2;\n    my $found3;\n    my $found4;\n\
    \    my $found5;\n    my $found6;\n    my $found7;\n    my $found8;\n    my $found9;\n\
    \    my $found10;\n    my $found11;\n    my $found12;\n    my $found13;\n    my\
    \ $found14;\n    my $found15;\n    my $found16;\n    my $found17;\n    my $found18;\n\
    \    my $found19;\n    my $found20;\n    my $found21;\n    my $found22;\n    my\
    \ $found23;\n    my $found24;\n    my $found25;\n    my $found26;\n    my $found27;\n\
    \    my $found28;\n    my $found29;\n    my $found30;\n    my $found31;\n    my\
    \ $found32;\n    my $found33;\n    my $found34;\n    my $found35;\n    my $found36;\n\
    \    my $found37;\n    my $found38;\n    my $found39;\n    my $found40;\n    my\
    \ $found41;\n    my $found42;\n    my $found43;\n    my $found44;\n    my $found45;\n\
    \    my $found46;\n    my $found47;\n    my $found48;\n    my $found49;\n    my\
    \ $found50;\n    my $found51;\n    my $found52;\n    my $found53;\n    my $found54;\n\
    \    my $found55;\n    my $found56;\n    my $found57;\n    my $found58;\n    my\
    \ $found59;\n    my $found60;\n    my $found61;\n    my $found62;\n    my $found63;\n\
    \    my $found64;\n    my $found65;\n    my $found66;\n    my $found67;\n    my\
    \ $found68;\n    my $found69;\n    my $found70;\n    my $found71;\n    my $found72;\n\
    \    my $found73;\n    my $found74;\n    my $found75;\n    my $found76;\n    my\
    \ $found77;\n    my $found78;\n    my $found79;\n", "    my $min = undef;\n  \
    \  my $max = undef;\n    foreach my $num (@$lst) {\n        if ($num < 0) {\n\
    \            $min = $num if !defined $min or $num < $min;\n        } else {\n\
    \            $max = $num if !defined $max or $num > $max;\n        }\n    }\n\
    \    return ($min, $max);\n}", "    my @result;\n    my $min = $lst[0];\n    my\
    \ $max = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n\
    \            $min = $num;\n        } elsif ($num > $max) {\n            $max =\
    \ $num;\n        } else {\n            push @result, $num;\n        }\n    }\n\
    \    return ($min > $max ? undef : ($max, $min));\n}", "    my $min = $lst->[0];\n\
    \    my $max = $lst->[0];\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            $min = $num;\n        } elsif ($num > 0) {\n            $max\
    \ = $num;\n        }\n    }\n    return ($min, $max);\n}", "    my($max_int, $min_int)\
    \ = (0, 0);\n    my(@ints) = ();\n    foreach my $num (@$lst) {\n        if ($num\
    \ < 0) {\n            $max_int = $num if $max_int < $num;\n        } else {\n\
    \            $min_int = $num if $min_int > $num;\n        }\n        push(@ints,\
    \ $num);\n    }\n    return ($max_int, $min_int) if @ints;\n    return ($max_int,\
    \ $min_int);\n}", "    my $max = 0;\n    my $min = 0;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $result;\n    foreach $i (@$lst) {\n        if ($i < 0) {\n\
    \            $max = $i;\n        } else {\n            $min = $i;\n        }\n\
    \    }\n    if ($max > $min) {\n        $result = $max;\n    } else {\n      \
    \  $result = $min;\n    }\n    return ($result, $result);\n}", "    my $max =\
    \ undef;\n    my $min = undef;\n    foreach my $num (@$lst) {\n        if ($num\
    \ < $min) {\n            $min = $num;\n        }\n        if ($num > $max) {\n\
    \            $max = $num;\n        }\n    }\n    if ($min == undef) {\n      \
    \  return ($max, undef);\n    }\n    if ($max == undef) {\n        return (undef,\
    \ $min);\n    }\n    return ($max, $min);\n}", "    my $max = undef;\n    my $min\
    \ = undef;\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n      \
    \      $min = $num;\n        } elsif ($num > $max) {\n            $max = $num;\n\
    \        }\n    }\n    return ($max, $min);\n}", "    my $min = undef;\n    my\
    \ $max = undef;\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n \
    \           $min = $num;\n        } elsif ($num > $max) {\n            $max =\
    \ $num;\n        }\n    }\n    return ($min, $max);\n}", "    my @result;\n  \
    \  my $max;\n    my $min;\n    my $i;\n    my $j;\n    my $k;\n    my $maxi;\n\
    \    my $mini;\n    my $maxj;\n    my $minij;\n    my $maxk;\n    my $minik;\n\
    \    my $maxmax;\n    my $maxmin;\n    my $minmax;\n    my $minmin;\n    my $maxjmax;\n\
    \    my $maxjmin;\n    my $minjmax;\n    my $minjmin;\n    my $maxkmax;\n    my\
    \ $maxkmin;\n    my $minkmax;\n    my $minkmin;\n    my $maxmaxmax;\n    my $maxmaxmin;\n\
    \    my $maxminmax;\n    my $maxminmin;\n    my $minmaxmax;\n    my $minmaxmin;\n\
    \    my $minminmax;\n    my $minminmin;\n    my $maxjmaxmax;\n    my $maxjmaxmin;\n\
    \    my $maxjminmax;\n    my $maxjminmin;\n    my $maxkmaxmax;\n    my $maxkmaxmin;\n\
    \    my $maxkminmax;\n    my $maxkminmin;\n    my $minkmaxmax;\n    my $minkmaxmin;\n\
    \    my $minkminmax;\n    my $minkminmin;\n    my $maxmaxmaxmax;\n    my $maxmaxminmax;\n\
    \    my $maxminmaxmax;\n    my $maxminminmax;\n    my $minmaxmaxmax;\n    my $minmaxminmax;\n\
    \    my $minminmaxmax;\n    my $minminminmax;\n    my $maxjmaxmaxmax;\n    my\
    \ $maxjmaxminmax;\n    my $maxjminmaxmax;\n    my $maxjminminmax;\n    my $maxkmaxmaxmax;\n\
    \    my $maxkmaxminmax;\n    my $maxkminmaxmax;\n    my $maxkminminmax;\n    my\
    \ $minkmaxmaxmax;\n    my $minkmaxminmax;\n    my $minkminmaxmax;\n    my $minkminminmax;\n\
    \    my $maxmaxmaxmax;\n    my $maxmaxminmaxmax;\n    my $maxminmaxmaxmax;\n \
    \   my $maxminminmaxmax;\n    my $minmaxmaxmax;\n    my $minmaxminmax", "    my\
    \ ($a, $b) = (0, 0);\n    foreach my $num (@$lst) {\n        if ($num < 0) {\n\
    \            $a = $num;\n        }\n        elsif ($num > 0) {\n            $b\
    \ = $num;\n        }\n        else {\n            $a = $b = undef;\n        }\n\
    \    }\n    return ($a, $b);\n}", "    my $max_int;\n    my $min_int;\n    foreach\
    \ my $num (@$lst) {\n        if ($num < 0) {\n            $max_int = $num;\n \
    \       } elsif ($num > 0) {\n            $min_int = $num;\n        }\n    }\n\
    \    if ($max_int && $min_int) {\n        return ($max_int, $min_int);\n    }\n\
    \    return undef;\n}", "    my $max = 0;\n    my $min = 0;\n    foreach my $num\
    \ (@$lst) {\n        if ($num > $max) {\n            $max = $num;\n        } elsif\
    \ ($num < $min) {\n            $min = $num;\n        }\n    }\n    if ($max <\
    \ $min) {\n        return ($max, $min);\n    }\n    return ($max, undef);\n}",
  "    my($min, $max);\n    foreach my $num (@$lst) {\n        if ($num < 0) {\n \
    \           $min = $num;\n        }\n        else {\n            $max = $num;\n\
    \        }\n    }\n    return ($min ? [$min, $max] : undef, undef unless $max);\n\
    }", "    my $max_int = undef;\n    my $min_int = undef;\n    my $max_num = undef;\n\
    \    my $min_num = undef;\n    foreach my $num (@$lst) {\n        if ($num < 0)\
    \ {\n            $max_int = $num;\n            $max_num = $num;\n        } elsif\
    \ ($num > 0) {\n            $min_int = $num;\n            $min_num = $num;\n \
    \       } else {\n            $max_int = $min_int;\n            $max_num = $min_num;\n\
    \        }\n    }\n    return ($max_int, $min_int) if $max_int and $min_int;\n\
    \    return ($max_num, $min_num) if $max_num and $min_num;\n    return;\n}", " \
    \   my ($a, $b) = (0, 0);\n    foreach my $x (@$lst) {\n        if ($x < 0) {\n\
    \            $a = $x;\n        } elsif ($x > 0) {\n            $b = $x;\n    \
    \    }\n    }\n    return ($a, $b) if ($a && $b);\n    return ($a, undef) if ($a\
    \ && !$b);\n    return ($b, undef) if (!$a && $b);\n    return ($a, $b);\n}",
  "    my($min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n\
    \    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n    my(@min, $max);\n"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
