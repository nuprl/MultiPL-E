name: HumanEval_47_median
language: pl
prompt: "# Return median of elements in the list l.\n# >>> median([3, 1, 2, 4, 5])\n\
  # 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4,\
  \ 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $n = @$l;\n    if ($n == 0) {\n        return 0;\n    }\n  \
    \  my $mid = $n / 2;\n    my $median;\n    if ($n % 2 == 0) {\n        $median\
    \ = $l->[$mid];\n    }\n    else {\n        $median = ($l->[$mid - 1] + $l->[$mid])\
    \ / 2;\n    }\n    return $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n\
    \    if ($n % 2) {\n        return $l->[$m];\n    }\n    else {\n        return\
    \ $l->[$m-1] + $l->[$m];\n    }\n}", "    my $n = @$l;\n    if ($n <= 1) {\n \
    \       return $l->[0];\n    }\n    my $mid = int(($n - 1) / 2);\n    my $median\
    \ = $l->[$mid];\n    my $i = $mid;\n    while ($i < $n) {\n        my $left =\
    \ $l->[$i];\n        my $right = $l->[$i + 1];\n        if ($left > $right) {\n\
    \            $median = $left;\n        }\n        else {\n            $median\
    \ = $right;\n        }\n        $i++;\n    }\n    return $median;\n}", "    my\
    \ $n = @$l;\n    if ($n <= 1) {\n        return $l->[0];\n    }\n    my $mid =\
    \ int(($n - 1) / 2);\n    my $median = $l->[$mid];\n    my $i = $mid;\n    while\
    \ ($i < $n) {\n        if ($l->[$i] <= $median) {\n            $median = $l->[$i];\n\
    \        }\n        $i++;\n    }\n    return $median;\n}", "    my $n = @$l;\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    my $m = $n / 2;\n    my $median;\n\
    \    if ($n % 2 == 0) {\n        $median = $l->[$m];\n    } else {\n        $median\
    \ = ($l->[$m] + $l->[$m - 1]) / 2;\n    }\n    return $median;\n}", "    my $n\
    \ = @$l;\n    if ($n == 0) {\n        return 0;\n    }\n    my $m = $n / 2;\n\
    \    my $median;\n    if ($n % 2 == 0) {\n        $median = $l->[$m];\n    }\n\
    \    else {\n        $median = ($l->[$m] + $l->[$m - 1]) / 2;\n    }\n    return\
    \ $median;\n}", "    my $n = @$l;\n    if ($n <= 1) {\n        return $l->[0];\n\
    \    }\n    my $mid = int(($n - 1) / 2);\n    my $median = $l->[$mid];\n    for\
    \ my $i ($mid + 1, $n) {\n        $median = $median > $l->[$i] ? $median : $l->[$i];\n\
    \    }\n    return $median;\n}", "    my $n = @$l;\n    if ($n <= 1) {\n     \
    \   return $l->[0];\n    }\n    my $mid = int(($n - 1) / 2);\n    my $median =\
    \ $l->[$mid];\n    for my $i ($mid + 1, $n) {\n        my $x = $l->[$i];\n   \
    \     if ($x < $median) {\n            $median = $x;\n        }\n    }\n    return\
    \ $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2) {\n  \
    \      return $l->[$m];\n    } else {\n        return $l->[$m-1] + $l->[$m];\n\
    \    }\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2) {\n      \
    \  return $l->[$m];\n    }\n    else {\n        return $l->[$m-1] + $l->[$m];\n\
    \    }\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if ($n\
    \ % 2 == 0) {\n        $median = $l->[$m];\n    } else {\n        $median = ($l->[$m]\
    \ + $l->[$m - 1]) / 2;\n    }\n    return $median;\n}", "    my $n = @$l;\n  \
    \  if ($n <= 1) {\n        return $l->[0];\n    }\n    my $mid = int(($n - 1)\
    \ / 2);\n    my $median = $l->[$mid];\n    my $left = $l->[$mid - 1];\n    my\
    \ $right = $l->[$mid];\n    while ($left < $right) {\n        my $mid2 = int(($mid\
    \ + 1) / 2);\n        my $median2 = $l->[$mid2];\n        if ($median < $median2)\
    \ {\n            $median = $median2;\n        }\n        $mid = $mid2;\n     \
    \   $left = $l->[$mid - 1];\n        $right = $l->[$mid];\n    }\n    return $median;\n\
    }", "    my $n = @$l;\n    my $m = $n / 2;\n    my $median;\n    if ($n % 2 ==\
    \ 0) {\n        $median = $l->[$m];\n    } else {\n        $median = ($l->[$m]\
    \ + $l->[$m - 1]) / 2;\n    }\n    return $median;\n}", "    my $n = @$l;\n  \
    \  my $m = $n / 2;\n    if ($n % 2) {\n        return $l->[$m];\n    }\n    else\
    \ {\n        return $l->[$m] + $l->[$n - 1];\n    }\n}", "    my $n = @$l;\n \
    \   my $median;\n    if ($n <= 1) {\n        return $l->[0];\n    }\n    $median\
    \ = ($l->[0] + $l->[1]) / 2;\n    for my $i (2..$n) {\n        $median = ($median\
    \ + $l->[$i]) / 2;\n    }\n    return $median;\n}", "    my $n = @$l;\n    my\
    \ $m = $n / 2;\n    if ($n % 2) {\n        return $l->[$m];\n    }\n    my $median\
    \ = $l->[$m];\n    my $i;\n    for ($i = $m; $i < $n; $i++) {\n        $median\
    \ = $l->[$i] if $l->[$i] < $median;\n    }\n    return $median;\n}", "    my $n\
    \ = @$l;\n    my $m = $n / 2;\n    if ($n % 2) {\n        return $l->[$m];\n \
    \   }\n    else {\n        return $l->[$m-1] + $l->[$m];\n    }\n}", "    my $n\
    \ = @$l;\n    if ($n <= 1) {\n        return $l->[0];\n    }\n    my $mid = $n\
    \ / 2;\n    my $median;\n    if ($n % 2 == 0) {\n        $median = $l->[$mid -\
    \ 1] + $l->[$mid];\n    } else {\n        $median = $l->[$mid];\n    }\n    return\
    \ $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2 == 0) {\n\
    \        return $l->[$m];\n    }\n    else {\n        return $l->[$m] + $l->[$m-1];\n\
    \    }\n}", "    my $n = @$l;\n    if ($n <= 1) {\n        return $l->[0];\n \
    \   }\n    my $mid = int(($n - 1) / 2);\n    my $median = $l->[$mid];\n    for\
    \ (my $i = $mid + 1; $i < $n; $i++) {\n        if ($l->[$i] < $median) {\n   \
    \         $median = $l->[$i];\n        }\n    }\n    return $median;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
