name: HumanEval_21_rescale_to_unit
language: pl
prompt: "# Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n# such that the smallest number will become 0 and the largest will\
  \ become 1\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5,\
  \ 0.75, 1.0]\nsub rescale_to_unit {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rescale_to_unit;\n\
  \        if(eq_deeply($candidate->([2.0, 49.9]),[0.0, 1.0])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0,\
  \ 49.9]),[1.0, 0.0])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5,\
  \ 0.75, 1.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5,\
  \ 0.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @rescaled_numbers = ();\n    my $min = $numbers[0];\n    my\
    \ $max = $numbers[0];\n    foreach my $number (@$numbers) {\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n        if ($number < $min)\
    \ {\n            $min = $number;\n        }\n    }\n    foreach my $number (@$numbers)\
    \ {\n        $rescaled_numbers[$number] = $number - $min;\n    }\n    return @rescaled_numbers;\n\
    }", "    my $min = min($numbers);\n    my $max = max($numbers);\n    my $range\
    \ = abs($max - $min);\n    my $scale = $range / $numbers[0];\n    my $result =\
    \ [];\n    foreach my $number (@$numbers) {\n        $result[$number] = $number\
    \ * $scale;\n    }\n    return $result;\n}", "    my $min = min($numbers);\n \
    \   my $max = max($numbers);\n    my $scale = ($max - $min) / 0.0;\n    my @new_numbers\
    \ = ();\n    foreach my $number (@$numbers) {\n        $new_numbers[] = $min +\
    \ $scale * $number;\n    }\n    return @new_numbers;\n}", "    my @rescaled_numbers;\n\
    \    my $min = $numbers[0];\n    my $max = $numbers[0];\n    foreach my $number\
    \ (@$numbers) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        if ($number < $min) {\n            $min = $number;\n     \
    \   }\n    }\n    foreach my $number (@$numbers) {\n        $rescaled_numbers[$number]\
    \ = $min + ($number - $min) * ($max - $min) / ($max - $min);\n    }\n    return\
    \ @$rescaled_numbers;\n}", "    my $min = min($numbers);\n    my $max = max($numbers);\n\
    \    my $scale = ($max - $min) / 1.0;\n    my $result = [];\n    foreach my $num\
    \ (@$numbers) {\n        $result[$num] = $num * $scale;\n    }\n    return $result;\n\
    }", "    my $min = min @$numbers;\n    my $max = max @$numbers;\n    my @rescaled;\n\
    \    my $i;\n    for ($i = 0; $i < @$numbers; $i++) {\n        my $number = $numbers[$i];\n\
    \        $rescaled[$i] = $number / ($max - $min);\n    }\n    return @rescaled;\n\
    }", "    my @rescaled_numbers = ();\n    my $min_number = $numbers[0];\n    my\
    \ $max_number = $numbers[0];\n    foreach my $number (@$numbers) {\n        if\
    \ ($number > $max_number) {\n            $max_number = $number;\n        }\n \
    \       if ($number < $min_number) {\n            $min_number = $number;\n   \
    \     }\n    }\n    foreach my $number (@$numbers) {\n        my $new_number =\
    \ ($number - $min_number) / ($max_number - $min_number);\n        push(@rescaled_numbers,\
    \ $new_number);\n    }\n    return @rescaled_numbers;\n}", "    my $min = min($numbers);\n\
    \    my $max = max($numbers);\n    my $scale = ($max - $min) / length($numbers);\n\
    \    my $new_numbers = ();\n    foreach my $number (@$numbers) {\n        $new_numbers->[$number]\
    \ = $min + $scale * $number;\n    }\n    return $new_numbers;\n}", "    my @rescaled;\n\
    \    my $min = $numbers[0];\n    my $max = $numbers[0];\n    foreach my $num (@$numbers)\
    \ {\n        if ($num < $min) {\n            $min = $num;\n        }\n       \
    \ if ($num > $max) {\n            $max = $num;\n        }\n    }\n    foreach\
    \ my $num (@$numbers) {\n        $num = $num - $min;\n        $num = $num / $max\
    \ - $min;\n        push(@rescaled, $num);\n    }\n    return @rescaled;\n}", " \
    \   my @rescaled = ();\n    my $min = min($numbers);\n    my $max = max($numbers);\n\
    \    my $scale = ($max - $min);\n    my $offset = $min - $scale;\n    foreach\
    \ my $num (@$numbers) {\n        push(@rescaled, $num + $offset);\n    }\n   \
    \ return @rescaled;\n}", "    my $min = min($numbers);\n    my $max = max($numbers);\n\
    \    my @rescaled;\n    foreach my $num (@$numbers) {\n        my $scale = ($num\
    \ - $min) / ($max - $min);\n        push(@rescaled, $min + $scale * ($max - $min));\n\
    \    }\n    return @rescaled;\n}", "    my $min = min @$numbers;\n    my $max\
    \ = max @$numbers;\n    my @rescaled;\n    my $scale = ($max - $min) / @$numbers;\n\
    \    foreach my $number (@$numbers) {\n        push @rescaled, $min + ($number\
    \ - $min) * $scale;\n    }\n    return @rescaled;\n}", "    my $min = min @$numbers;\n\
    \    my $max = max @$numbers;\n    my @rescaled = map { $_ / $max - $min } @$numbers;\n\
    \    return @rescaled;\n}", "    my $min = min @$numbers;\n    my $max = max @$numbers;\n\
    \    my @rescaled;\n    foreach my $number (@$numbers) {\n        push @rescaled,\
    \ $number / $max - $min;\n    }\n    return @rescaled;\n}", "    my @rescaled_numbers;\n\
    \    my $min = min($numbers);\n    my $max = max($numbers);\n    my $scale = ($max\
    \ - $min) / @$numbers;\n    foreach my $number (@$numbers) {\n        my $new_number\
    \ = $min + $scale * $number;\n        push(@rescaled_numbers, $new_number);\n\
    \    }\n    return @rescaled_numbers;\n}", "    my @rescaled_numbers;\n    my\
    \ $min = min($numbers);\n    my $max = max($numbers);\n    my $scale = ($max -\
    \ $min) / @$numbers;\n    foreach my $number (@$numbers) {\n        push @rescaled_numbers,\
    \ $min + $scale * $number;\n    }\n    return @rescaled_numbers;\n}", "    my\
    \ @rescaled_numbers;\n    my $smallest_number = $numbers[0];\n    my $largest_number\
    \ = $numbers[0];\n    foreach my $number (@$numbers) {\n        $smallest_number\
    \ = $number if $number < $smallest_number;\n        $largest_number = $number\
    \ if $number > $largest_number;\n        push(@rescaled_numbers, $smallest_number\
    \ + ($number - $smallest_number) / ($largest_number - $smallest_number));\n  \
    \  }\n    return @rescaled_numbers;\n}", "    my @rescaled_numbers = ();\n   \
    \ my $min = min($numbers);\n    my $max = max($numbers);\n    my $scale = ($max\
    \ - $min) / @$numbers;\n    foreach my $number (@$numbers) {\n        $rescaled_numbers[$number]\
    \ = $min + $scale * $number;\n    }\n    return @$rescaled_numbers;\n}", "   \
    \ my @rescaled_numbers;\n    my $min = $numbers[0];\n    my $max = $numbers[0];\n\
    \    foreach my $number (@$numbers) {\n        if ($number > $max) {\n       \
    \     $max = $number;\n        }\n        if ($number < $min) {\n            $min\
    \ = $number;\n        }\n    }\n    foreach my $number (@$numbers) {\n       \
    \ $rescaled_numbers[$number] = $number - $min;\n    }\n    return @$numbers;\n\
    }", "    my $min = min($numbers);\n    my $max = max($numbers);\n    my $range\
    \ = abs($max - $min);\n    my $scale = $range / $min;\n    my $new_numbers = ();\n\
    \    foreach my $number (@$numbers) {\n        $new_numbers->[$number] = $scale\
    \ * $number;\n    }\n    return $new_numbers;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
