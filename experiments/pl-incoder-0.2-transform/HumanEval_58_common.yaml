name: HumanEval_58_common
language: pl
prompt: "# Return sorted unique common elements for two lists.\n# >>> common([1, 4,\
  \ 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n\
  \        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
  \ 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %seen;\n    my @common;\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = @$l1;\n    my $o =\
    \ 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t\
    \ = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my\
    \ $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n  \
    \  my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = @$l1;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r\
    \ = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my\
    \ $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n  \
    \  my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = @$l1;\n    my $o = 0;\n    my $p\
    \ = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my\
    \ $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n  \
    \  my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = @$l1;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n\
    \    my $d = 0;\n    ", "    my $l1_count = scalar @$l1;\n    my $l2_count = scalar\
    \ @$l2;\n    my $i = 0;\n    my $j = 0;\n    my @common;\n    while ($i < $l1_count\
    \ && $j < $l2_count) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push\
    \ @common, $l1->[$i];\n            $i++;\n            $j++;\n        } elsif ($l1->[$i]\
    \ <  $l2->[$j]) {\n            $i++;\n        } else {\n            $j++;\n  \
    \      }\n    }\n    return @common;\n}", "    my @common;\n    my $i = 0;\n \
    \   my $j = 0;\n    my $k = 0;\n    my $n = @$l1;\n    my $m = @$l2;\n    while\
    \ ($i < $n) {\n        while ($j < $m) {\n            if ($l1->[$i] eq $l2->[$j])\
    \ {\n                push @common, $l1->[$i];\n                $i++;\n       \
    \         $j++;\n            }\n            else {\n                last;\n  \
    \          }\n        }\n        $j = 0;\n        $i++;\n    }\n    return @common;\n\
    }", "    my %common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l\
    \ = 0;\n    my $len1 = scalar(@$l1);\n    my $len2 = scalar(@$l2);\n    while\
    \ ($i < $len1 && $j < $len2) {\n        $common{$l1->[$i]} = $l2->[$j];\n    \
    \    $i++;\n        $j++;\n    }\n    while ($i < $len1) {\n        $common{$l1->[$i]}\
    \ = $l1->[$i];\n        $i++;\n    }\n    while ($j < $len2) {\n        $common{$l2->[$j]}\
    \ = $l2->[$j];\n        $j++;\n    }\n    return sort keys %common;\n}", "   \
    \ my %common;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l1_len\
    \ = $l1 -> length;\n    my $l2_len = $l2 -> length;\n    while ($i < $l1_len &&\
    \ $j < $l2_len) {\n        if ($l1 -> [$i] eq $l2 -> [$j]) {\n            $common{$l1\
    \ -> [$i]} = 1;\n            $i++;\n            $j++;\n        } elsif ($l1 ->\
    \ [$i] <=> $l2 -> [$j] < 0) {\n            $i++;\n        } elsif ($l1 -> [$i]\
    \ <=> $l2 -> [$j] > 0) {\n            $j++;\n        } else {\n            $common{$l1\
    \ -> [$i]} = 1;\n            $i++;\n            $j++;\n        }\n    }\n    while\
    \ ($i < $l1_len) {\n        $common{$l1 -> [$i]} = 1;\n        $i++;\n    }\n\
    \    while ($j < $l2_len) {\n        $common{$l2 -> [$j]} = 1;\n        $j++;\n\
    \    }\n    return sort keys %common;\n}", "    my $l1_count = scalar @$l1;\n\
    \    my $l2_count = scalar @$l2;\n    my $common_count = 0;\n    my $common_elements;\n\
    \    my $l1_elements;\n    my $l2_elements;\n    my $l1_elements_count;\n    my\
    \ $l2_elements_count;\n    my $l1_elements_index;\n    my $l2_elements_index;\n\
    \    my $l1_elements_value;\n    my $l2_elements_value;\n    my $l1_elements_value_count;\n\
    \    my $l2_elements_value_count;\n    my $l1_elements_value_index;\n    my $l2_elements_value_index;\n\
    \    my $l1_elements_value_value;\n    my $l2_elements_value_value;\n    my $l1_elements_value_value_count;\n\
    \    my $l2_elements_value_value_count;\n    my $l1_elements_value_value_index;\n\
    \    my $l2_elements_value_value_index;\n    my $l1_elements_value_value_value;\n\
    \    my $l2_elements_value_value_value;\n    my $l1_elements_value_value_value_count;\n\
    \    my $l2_elements_value_value_value_count;\n    my $l1_elements_value_value_value_index;\n\
    \    my $l2_elements_value_value_value_index;\n    my $l1_elements_value_value_value_value;\n\
    \    my $l2_elements_value_value_value_value;\n    my $l1_elements_value_value_value_value_count;\n\
    \    my $l2_elements_value_value_value_count;\n    my $l1_elements_value_value_value_index;\n\
    \    my $l2_elements_value_value_value_index;\n    my $l1_elements_value_value_value_value;\n\
    \    my $l2_elements_value_value_value_value;\n    my $l1_elements_value_value_value_value_count;\n\
    \    my $l2_elements_value_value_value_count;\n    my $l1_elements_value_value_value_index;\n\
    \    my $l2_elements_value_value_value_index;\n    my $l1_elements_value_value_value_value;\n\
    \    my $l2_elements_value_value_value_value;\n    my $l1_elements_value_value_value_value_count;\n\
    \    my $l2_elements_value_value_value_count;\n    my $l1_elements_value_value_value_index;\n\
    \    my $l2_elements_value_value_value_index;\n    my $l1_elements_value_value_value_value;\n\
    \    my $l2_elements_value_value_value_value;\n    my $l1_elements_value_value_value_value_count;\n\
    \    my $l2_elements_value_value_value_count;\n", "    my %seen;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $common = 0;\n    while ($i < @$l1 && $j < @$l2)\
    \ {\n        $seen{$_}++ while $l1[$i] eq $l2[$j];\n        $i++;\n        $j++;\n\
    \    }\n    return sort keys %seen;\n}", "    my @common;\n    my $i = 0;\n  \
    \  my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $max = 0;\n    my $min = 0;\n    my $max2 = 0;\n    my $min2 = 0;\n  \
    \  my $max3 = 0;\n    my $min3 = 0;\n    my $max4 = 0;\n    my $min4 = 0;\n  \
    \  my $max5 = 0;\n    my $min5 = 0;\n    my $max6 = 0;\n    my $min6 = 0;\n  \
    \  my $max7 = 0;\n    my $min7 = 0;\n    my $max8 = 0;\n    my $min8 = 0;\n  \
    \  my $max9 = 0;\n    my $min9 = 0;\n    my $max10 = 0;\n    my $min10 = 0;\n\
    \    my $max11 = 0;\n    my $min11 = 0;\n    my $max12 = 0;\n    my $min12 = 0;\n\
    \    my $max13 = 0;\n    my $min13 = 0;\n    my $max14 = 0;\n    my $min14 = 0;\n\
    \    my $max15 = 0;\n    my $min15 = 0;\n    my $max16 = 0;\n    my $min16 = 0;\n\
    \    my $max17 = 0;\n    my $min17 = 0;\n    my $max18 = 0;\n    my $min18 = 0;\n\
    \    my $max19 = 0;\n    my $min19 = 0;\n    my $max20 = 0;\n    my $min20 = 0;\n\
    \    my $max21 = 0;\n    my $min21 = 0;\n    my $max22 = 0;\n    my $min22 = 0;\n\
    \    my $max23 = 0;\n    my $min23 = 0;\n    my $max24 = 0;\n    my $min24 = 0;\n\
    \    my $max25 = 0;\n    my $min25 = 0;\n    my $max26 = 0;\n    my $min26 = 0;\n\
    \    my $max27 = 0;\n    my $min27 = 0;\n    my $max28 = 0;\n    my $min28 = 0;\n\
    \    my $max29 = 0;\n    my $min29 = 0;\n    my $max30 = 0;\n    my $min30 = 0;\n\
    \    my $max31 = 0;\n    my $min31 = 0;\n    my $max32 = 0;\n    my $min32 = 0;\n\
    \    my $max33 = 0;\n    my $min33 = 0;\n    my $max34 = 0;\n    my $min34 = 0;\n\
    \    my $max35 = 0;\n    my $min35 = 0;\n    my $max36 = 0;\n    my $min36 = 0;\n\
    \    my $max37 = 0;\n    my $min37 = 0;\n    my $max38 = 0;\n    my $min38 = 0;\n\
    \    my $max39 = 0;\n    my $min39 = 0;\n    my $max40 = 0;\n    my $min40 = 0;\n\
    \    my $max41 = 0;\n    my $", "    my @common;\n    my $l1_count = scalar @$l1;\n\
    \    my $l2_count = scalar @$l2;\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    while ($i < $l1_count && $j < $l2_count) {\n        if ($l1->[$i] eq\
    \ $l2->[$j]) {\n            push @common, $l1->[$i];\n            $i++;\n    \
    \        $j++;\n        } elsif ($l1->[$i] <  $l2->[$j]) {\n            $i++;\n\
    \        } elsif ($l1->[$i] >  $l2->[$j]) {\n            $j++;\n        } else\
    \ {\n            $i++;\n            $j++;\n        }\n    }\n    return @common;\n\
    }", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $l1_len = $l1 ->\
    \ length;\n    my $l2_len = $l2 -> length;\n    while ($i < $l1_len && $j < $l2_len)\
    \ {\n        if ($l1 -> [$i] eq $l2 -> [$j]) {\n            push @common, $l1\
    \ -> [$i];\n            $i++;\n            $j++;\n        } elsif ($l1 -> [$i]\
    \ <=> $l2 -> [$j] < 0) {\n            $i++;\n        } elsif ($l1 -> [$i] <=>\
    \ $l2 -> [$j] > 0) {\n            $j++;\n        } else {\n            push @common,\
    \ $l1 -> [$i];\n            $i++;\n            $j++;\n        }\n    }\n    return\
    \ @common;\n}", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k =\
    \ 0;\n    while ($i < @$l1 && $j < @$l2) {\n        if ($l1->[$i] eq $l2->[$j])\
    \ {\n            $common[$k++] = $l1->[$i];\n            $i++;\n            $j++;\n\
    \        } elsif ($l1->[$i] <  $l2->[$j]) {\n            $i++;\n        } elsif\
    \ ($l1->[$i] >  $l2->[$j]) {\n            $j++;\n        }\n    }\n    return\
    \ @common;\n}", "    my %seen;\n    my $i = 0;\n    my $j = 0;\n    my $len1 =\
    \ scalar @$l1;\n    my $len2 = scalar @$l2;\n    my $common = 0;\n    my $l1_i\
    \ = $i;\n    my $l2_i = $i;\n    my $l1_j = $j;\n    my $l2_j = $j;\n    my $l1_len\
    \ = $len1;\n    my $l2_len = $len2;\n    my $l1_len2 = $len1;\n    my $l2_len2\
    \ = $len2;\n    my $l1_len3 = $len1;\n    my $l2_len3 = $len2;\n    my $l1_len4\
    \ = $len1;\n    my $l2_len4 = $len2;\n    my $l1_len5 = $len1;\n    my $l2_len5\
    \ = $len2;\n    my $l1_len6 = $len1;\n    my $l2_len6 = $len2;\n    my $l1_len7\
    \ = $len1;\n    my $l2_len7 = $len2;\n    my $l1_len8 = $len1;\n    my $l2_len8\
    \ = $len2;\n    my $l1_len9 = $len1;\n    my $l2_len9 = $len2;\n    my $l1_len10\
    \ = $len1;\n    my $l2_len10 = $len2;\n    my $l1_len11 = $len1;\n    my $l2_len11\
    \ = $len2;\n    my $l1_len12 = $len1;\n    my $l2_len12 = $len2;\n    my $l1_len13\
    \ = $len1;\n    my $l2_len13 = $len2;\n    my $l1_len14 = $len1;\n    my $l2_len14\
    \ = $len2;\n    my $l1_len15 = $len1;\n    my $l2_len15 = $len2;\n    my $l1_len16\
    \ = $len1;\n    my $l2_len16 = $len2;\n    my $l1_len17 = $len1;\n    my $l2_len17\
    \ = $len2;\n    my $l1_len18 = $len1;\n    my $l2_len18 = $len2;\n    my $l1_len19\
    \ = $len1;\n    my $l2_len19 = $len2;\n    my $l1_len20 = $len1;\n    my $l2_len20\
    \ = $len2;\n    my $l1_len21 = $len1;\n    my $l2_len21 = $len2;\n    my $l1_len22\
    \ = $len1;\n    my $l2_len22 = $len", "    my @common;\n    my $i = 0;\n    my\
    \ $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n  \
    \  my $max = 0;\n    my $min = 0;\n    my $found = 0;\n    my $found2 = 0;\n \
    \   my $found3 = 0;\n    my $found4 = 0;\n    my $found5 = 0;\n    my $found6\
    \ = 0;\n    my $found7 = 0;\n    my $found8 = 0;\n    my $found9 = 0;\n    my\
    \ $found10 = 0;\n    my $found11 = 0;\n    my $found12 = 0;\n    my $found13 =\
    \ 0;\n    my $found14 = 0;\n    my $found15 = 0;\n    my $found16 = 0;\n    my\
    \ $found17 = 0;\n    my $found18 = 0;\n    my $found19 = 0;\n    my $found20 =\
    \ 0;\n    my $found21 = 0;\n    my $found22 = 0;\n    my $found23 = 0;\n    my\
    \ $found24 = 0;\n    my $found25 = 0;\n    my $found26 = 0;\n    my $found27 =\
    \ 0;\n    my $found28 = 0;\n    my $found29 = 0;\n    my $found30 = 0;\n    my\
    \ $found31 = 0;\n    my $found32 = 0;\n    my $found33 = 0;\n    my $found34 =\
    \ 0;\n    my $found35 = 0;\n    my $found36 = 0;\n    my $found37 = 0;\n    my\
    \ $found38 = 0;\n    my $found39 = 0;\n    my $found40 = 0;\n    my $found41 =\
    \ 0;\n    my $found42 = 0;\n    my $found43 = 0;\n    my $found44 = 0;\n    my\
    \ $found45 = 0;\n    my $found46 = 0;\n    my $found47 = 0;\n    my $found48 =\
    \ 0;\n    my $found49 = 0;\n    my $found50 = 0;\n    my $found51 = 0;\n    my\
    \ $found52 = 0;\n    my $found53 = 0;\n    my $found54 = 0;\n    my $found55 =\
    \ 0;\n    my $found56 = 0;\n    my $found57 = 0;\n    my $found58 = 0;\n    my\
    \ $found59 = 0;\n    my $found60 = 0;\n    my $found61 = 0;\n    my $found62 =\
    \ 0;\n    my $found63 = 0;\n    my $found64 = 0;\n    my $found65 = 0;\n    my\
    \ $found66 = 0;\n    my $found67 = 0;\n    my $found68 = 0;\n    my $found69 =\
    \ 0;\n    my $found70 = 0;\n    my $found71 = 0;\n    my $found72 = 0;\n    my\
    \ $found73 = 0;\n    my $found74 = 0;\n    my $found75 = 0;\n    my $found76 =\
    \ 0;\n    my $found77 = 0;\n    my $found78 = 0;\n    my $found79 = 0;", "   \
    \ my %seen;\n    foreach my $x (@$l1) {\n        $seen{$x}++;\n    }\n    foreach\
    \ my $x (@$l2) {\n        $seen{$x}--;\n    }\n    return grep { $seen{$_} ==\
    \ 0 } keys %seen;\n}", "    my %seen;\n    my @common;\n    foreach my $i (0 ..\
    \ $#$l1) {\n        my $j = $i + 1;\n        next unless $j == $#$l2;\n      \
    \  next if $seen{$l1->[$i]} && $seen{$l2->[$j]};\n        push(@common, $l1->[$i]);\n\
    \        $seen{$l1->[$i]}++;\n        $seen{$l2->[$j]}++;\n    }\n    return @common;\n\
    }", "    my %seen;\n    foreach my $x (@$l1) {\n        $seen{$x}++;\n    }\n\
    \    foreach my $x (@$l2) {\n        $seen{$x}--;\n    }\n    return grep { $seen{$_}\
    \ == 0 } keys %seen;\n}", "    my $l1_count = scalar @$l1;\n    my $l2_count =\
    \ scalar @$l2;\n    my $common_count = 0;\n    my $common_elements;\n    my $l1_elements\
    \ = ();\n    my $l2_elements = ();\n    my $l1_elements_count = ();\n    my $l2_elements_count\
    \ = ();\n    my $l1_elements_count_max = ();\n    my $l2_elements_count_max =\
    \ ();\n    my $l1_elements_count_min = ();\n    my $l2_elements_count_min = ();\n\
    \    my $l1_elements_count_max_index = ();\n    my $l2_elements_count_max_index\
    \ = ();\n    my $l1_elements_count_min_index = ();\n    my $l2_elements_count_min_index\
    \ = ();\n    my $l1_elements_count_max_value = ();\n    my $l2_elements_count_max_value\
    \ = ();\n    my $l1_elements_count_min_value = ();\n    my $l2_elements_count_min_value\
    \ = ();\n    my $l1_elements_count_max_value_pos = ();\n    my $l2_elements_count_max_value_pos\
    \ = ();\n    my $l1_elements_count_min_value_pos = ();\n    my $l2_elements_count_min_value_pos\
    \ = ();\n    my $l1_elements_count_max_value_neg = ();\n    my $l2_elements_count_max_value_neg\
    \ = ();\n    my $l1_elements_count_min_value_neg = ();\n    my $l2_elements_count_min_value_neg\
    \ = ();\n    my $l1_elements_count_max_value_pos_neg = ();\n    my $l2_elements_count_max_value_pos_neg\
    \ = ();\n    my $l1_elements_count_min_value_pos_neg = ();\n    my $l2_elements_count_min_value_pos_neg\
    \ = ();\n    my $l1_elements_count_max_value_neg_pos = ();\n    my $l2_elements_count_max_value_neg_pos\
    \ = ();\n    my $l1_elements_count_min_value_neg_pos = ();\n    my $l2_elements_count_min_value_neg_pos\
    \ = ();\n    my $l1_elements_count_max_value_neg_neg = ();\n    my $l2_elements_count_max_value_neg_neg\
    \ = ();\n    my $l1_elements_count_min_value_neg_neg = ();\n    my $l2_elements_count_min_value_neg_neg\
    \ = ();\n    my $l1_elements_count_max_value_pos_pos_neg = ();\n    my $l2_elements_count_max_value_pos_pos_neg\
    \ = ();\n    my $l1_elements_count_min_value_pos_pos_neg = ();\n    my $l2_elements_count_min_value_pos_pos_neg\
    \ = ();\n    my $l1_elements_count_max_value_neg_pos_neg = ();\n    my $l2_elements_count_max_value_neg_pos_neg\
    \ = ();\n    my $", "    my @common;\n    my $i = 0;\n    my $j = 0;\n    my $k\
    \ = 0;\n    my $l1_len = $l1 -> length;\n    my $l2_len = $l2 -> length;\n   \
    \ while ($i < $l1_len && $j < $l2_len) {\n        if ($l1 -> [$i] eq $l2 -> [$j])\
    \ {\n            push @common, $l1 -> [$i];\n            $i++;\n            $j++;\n\
    \        } elsif ($l1 -> [$i] < $l2 -> [$j]) {\n            $i++;\n        } else\
    \ {\n            $j++;\n        }\n    }\n    return @common;\n}", "    my @common;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    while ($i < @$l1 && $j <\
    \ @$l2) {\n        if ($l1->[$i] eq $l2->[$j]) {\n            push @common, $l1->[$i];\n\
    \            $i++;\n            $j++;\n        } elsif ($l1->[$i] <  $l2->[$j])\
    \ {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n\
    \    return @common;\n}", "    my %seen;\n    foreach my $x (@$l1) {\n       \
    \ $seen{$x}++;\n    }\n    foreach my $x (@$l2) {\n        $seen{$x}--;\n    }\n\
    \    return sort keys %seen;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
