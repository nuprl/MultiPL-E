name: HumanEval_155_even_odd_count
language: pl
prompt: "# Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n\
  # [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n\
  \        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($even, $odd);\n    \n    if ($num < 0) {\n        $even = $odd\
    \ = 0;\n    }\n    else {\n        $even = int(($num / 10) % 2);\n        $odd\
    \ = int(($num / 100) % 2);\n    }\n    \n    return ($even, $odd);\n}", "    my($even,\
    \ $odd);\n    if ($num < 0) {\n        $even = $odd = -1;\n    } else {\n    \
    \    $even = $odd = 0;\n        while ($num > 0) {\n            $num = $num /\
    \ 10;\n            $even++;\n        }\n        while ($num > 0) {\n         \
    \   $num = $num / 10;\n            $odd++;\n        }\n    }\n    return ($even,\
    \ $odd);\n}", "    my @even = ();\n    my @odd = ();\n    my $i = 0;\n    while($num\
    \ > 0) {\n        $num = $num / 10;\n        $even[$i] = $num % 2;\n        $odd[$i]\
    \ = $num / 2;\n        $i++;\n    }\n    return ($even, $odd);\n}", "    my($even,\
    \ $odd);\n    \n    my $i = 0;\n    \n    while ($i < $num) {\n        if ($num\
    \ % 2 == 0) {\n            $even++;\n        }\n        else {\n            $odd++;\n\
    \        }\n        $i++;\n    }\n    \n    return ($even, $odd);\n}", "    my\
    \ @even = ();\n    my @odd = ();\n    my $count = 0;\n    while($num > 0) {\n\
    \        $count++;\n        my $remainder = $num % 10;\n        if ($remainder\
    \ == 0) {\n            push(@even, $remainder);\n        } else {\n          \
    \  push(@odd, $remainder);\n        }\n        $num = $num / 10;\n    }\n    return\
    \ ($count, @even, @odd);\n}", "    my $count = 0;\n    my $even = 0;\n    my $odd\
    \ = 0;\n    while ($num > 0) {\n        $count++;\n        if ($num % 2 == 0)\
    \ {\n            $even++;\n        }\n        else {\n            $odd++;\n  \
    \      }\n        $num = $num / 10;\n    }\n    return ($even, $odd);\n}", " \
    \   my($even, $odd) = (0, 0);\n    while ($num > 0) {\n        $even++ if ($num\
    \ % 2 == 0);\n        $odd++ if ($num % 2 != 0);\n        $num = ($num / 2);\n\
    \    }\n    return ($even, $odd);\n}", "    my($even, $odd) = (0, 0);\n    while\
    \ ($num > 0) {\n        my $remainder = $num % 10;\n        if ($remainder ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = ($num - $remainder) / 10;\n    }\n    return ($even, $odd);\n}",
  "    my($even, $odd);\n    $even = $odd = 0;\n    while($num > 0) {\n        $num\
    \ = $num / 10;\n        $even++;\n        $odd++;\n    }\n    return ($even, $odd);\n\
    }", "    my($even, $odd);\n    if ($num < 0) {\n        $even = $odd = 0;\n  \
    \  } else {\n        $even = int(($num / 10) % 2);\n        $odd = int(($num /\
    \ 100) % 2);\n    }\n    return ($even, $odd);\n}", "    my($even, $odd) = (0,\
    \ 0);\n    while ($num > 0) {\n        $even++ if $num % 2 == 0;\n        $odd++\
    \ if $num % 2 != 0;\n        $num = int($num / 10);\n    }\n    return ($even,\
    \ $odd);\n}", "    my($even, $odd) = (0, 0);\n    while ($num > 0) {\n       \
    \ $even++;\n        $num = $num / 10;\n    }\n    while ($num > 0) {\n       \
    \ $odd++;\n        $num = $num / 10;\n    }\n    return ($even, $odd);\n}", " \
    \   my($even, $odd);\n    if ($num < 0) {\n        $even = $odd = 0;\n    }\n\
    \    else {\n        $even = int(($num / 10) % 2);\n        $odd = int(($num /\
    \ 10 / 10) % 2);\n    }\n    return ($even, $odd);\n}", "    my @even;\n    my\
    \ @odd;\n    my $even_index = 0;\n    my $odd_index = 0;\n    while ($num > 0)\
    \ {\n        my $remainder = $num % 10;\n        if ($remainder == 0) {\n    \
    \        push @even, $remainder;\n            $even_index++;\n        } else {\n\
    \            push @odd, $remainder;\n            $odd_index++;\n        }\n  \
    \      $num = $num / 10;\n    }\n    return ($even_index, $odd_index);\n}", " \
    \   my @even = ();\n    my @odd = ();\n    my $i = 0;\n    while($i < $num) {\n\
    \        my $digit = $num % 10;\n        if($digit == 0) {\n            push @even,\
    \ $digit;\n        }\n        else {\n            push @odd, $digit;\n       \
    \ }\n        $num = $num / 10;\n        $i++;\n    }\n    return ($even, $odd);\n\
    }", "    my($even, $odd);\n    \n    my $i = 0;\n    \n    while ($num > 0) {\n\
    \        $even = $num % 2 == 0 ? 1 : 0;\n        $odd = $num % 2 == 1 ? 1 : 0;\n\
    \        $num = $num / 2;\n        $i++;\n    }\n    \n    return ($even, $odd);\n\
    }", "    my($even, $odd) = (0, 0);\n    while($num > 0) {\n        $even++;\n\
    \        $num = $num / 10;\n    }\n    while($num > 0) {\n        $odd++;\n  \
    \      $num = $num / 10;\n    }\n    return ($even, $odd);\n}", "    my($even,\
    \ $odd) = (0, 0);\n    while ($num > 0) {\n        $even++;\n        $num -= $num\
    \ % 10;\n    }\n    while ($num > 0) {\n        $odd++;\n        $num -= $num\
    \ % 10;\n    }\n    return ($even, $odd);\n}", "    my $count = 0;\n    while($num\
    \ > 0) {\n        my $remainder = $num % 10;\n        if($remainder == 0) {\n\
    \            $count++;\n        }\n        $num = $num / 10;\n    }\n    return\
    \ ($count, $count);\n}", "    my($even, $odd) = (0, 0);\n    while ($num > 0)\
    \ {\n        $even++ if $num % 2 == 0;\n        $odd++ if $num % 2 != 0;\n   \
    \     $num = $num / 2;\n    }\n    return ($even, $odd);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
