name: HumanEval_12_longest
language: pl
prompt: "# Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return None in case the input\
  \ list is empty.\n# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"\
  ])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n\
  \    my($strings) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n\
  \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"\
  z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
  abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $longest;\n    my $longestLength = 0;\n    foreach my $string\
    \ (@$strings) {\n        my $length = length($string);\n        if ($length >\
    \ $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest if $longestLength > 0;\n \
    \   return;\n}", "    my $longest = undef;\n    my $longestLength = undef;\n \
    \   foreach my $string (@$strings) {\n        if (defined $longestLength and length($string)\
    \ > $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = length($string);\n        }\n    }\n    return $longest if defined $longest;\n\
    \    return undef;\n}", "    my $longest;\n    my $longestLength = 0;\n    foreach\
    \ my $string (@$strings) {\n        my $length = length($string);\n        if\
    \ ($length > $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest if defined $longest;\n   \
    \ return;\n}", "    my $longest = undef;\n    my $length = 0;\n    foreach my\
    \ $string (@$strings) {\n        my $len = length($string);\n        if ($len\
    \ > $length) {\n            $longest = $string;\n            $length = $len;\n\
    \        }\n    }\n    return $longest unless defined $longest;\n    return $longest;\n\
    }", "    my $longest;\n    my $longestLength = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest if $longestLength > 0;\n    return;\n}",
  "    my $longest = undef;\n    my $length = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $len = length($string);\n        if ($len > $length) {\n     \
    \       $longest = $string;\n            $length = $len;\n        }\n    }\n \
    \   return $longest if defined $longest;\n    return;\n}", "    my $longest =\
    \ undef;\n    foreach my $string (@$strings) {\n        my $len = length($string);\n\
    \        if (defined $longest and $len > length($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}", "    my $longest;\n\
    \    my $longestLength = -1;\n    foreach my $string (@$strings) {\n        my\
    \ $length = length($string);\n        if ($longestLength < $length) {\n      \
    \      $longest = $string;\n            $longestLength = $length;\n        }\n\
    \    }\n    return $longest if $longestLength > 0;\n    return;\n}", "    my $longest;\n\
    \    my $longestLength = 0;\n    foreach my $string (@$strings) {\n        my\
    \ $length = length($string);\n        if ($length > $longestLength) {\n      \
    \      $longest = $string;\n            $longestLength = $length;\n        }\n\
    \    }\n    return $longest unless $longestLength == 0;\n    my $first;\n    foreach\
    \ my $string (@$strings) {\n        my $length = length($string);\n        if\
    \ ($length == $longestLength) {\n            last if ($first eq $string);\n  \
    \          $first = $string;\n        }\n    }\n    return $first;\n}", "    my\
    \ $longest = undef;\n    my $longestLength = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest if defined $longest;\n    return;\n}",
  "    my $longest;\n    my $longestLength = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest if defined $longest;\n    return;\n}",
  "    my $longest;\n    my $length = 0;\n    foreach my $string (@$strings) {\n \
    \       $length += length($string);\n        if ($length > $longest) {\n     \
    \       $longest = $length;\n        }\n    }\n    return $longest ? $strings[$#{$strings}-1]\
    \ : undef;\n}", "    my $longest = undef;\n    my $longestLength = 0;\n    foreach\
    \ my $string (@$strings) {\n        my $length = length($string);\n        if\
    \ ($length > $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest if defined $longest;\n   \
    \ return;\n}", "    my $longest = undef;\n    my $longestLength = 0;\n    foreach\
    \ my $string (@$strings) {\n        my $length = length($string);\n        if\
    \ ($length > $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest if defined $longest;\n   \
    \ return;\n}", "    my $longest;\n    my $length = 0;\n    foreach my $string\
    \ (@$strings) {\n        $length += length($string);\n        if ($length > $longest)\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ?\
    \ $strings[$longest-1] : undef;\n}", "    my $longest;\n    my $length = 0;\n\
    \    foreach my $string (@$strings) {\n        my $len = length($string);\n  \
    \      if ($len > $length) {\n            $longest = $string;\n            $length\
    \ = $len;\n        }\n    }\n    return $longest if defined $longest;\n    return;\n\
    }", "    my $longest;\n    my $longestLength = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest unless defined $longest;\n    return $strings[0];\n\
    }", "    my $longest;\n    my $longestLength = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest if $longestLength > 0;\n    return;\n}",
  "    my $longest;\n    my $longestLength = 0;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest if $longestLength > 0;\n    return;\n}",
  "    my $longest = undef;\n    foreach my $string (@$strings) {\n        my $len\
    \ = length($string);\n        if (defined $longest && $len > $longest) {\n   \
    \         $longest = $len;\n        }\n    }\n    return $longest ? $strings[$#{$strings}]\
    \ : $longest;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
