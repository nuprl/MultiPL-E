name: HumanEval_70_strange_sort_list
language: pl
prompt: "# Given list of integers, return list in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list([])\n\
  # []\nsub strange_sort_list {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strange_sort_list;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 4, 2, 3])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 6, 7, 8, 9]),[5, 9, 6, 8, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7])) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([5, 5, 5, 5]),[5, 5, 5,\
  \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 2, 2, 2, 5, 5,\
  \ -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([111111]),[111111])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @sorted_list = ();\n    my $min = @$lst ? $lst[0] : 0;\n   \
    \ my $max = @$lst ? $lst[-1] : 0;\n    my $i;\n    for ($i = 0; $i < @$lst; $i++)\
    \ {\n        my $val = $lst[$i];\n        if ($val < $min) {\n            $min\
    \ = $val;\n        }\n        if ($val > $max) {\n            $max = $val;\n \
    \       }\n    }\n    for ($i = 0; $i < @$lst; $i++) {\n        my $val = $lst[$i];\n\
    \        if ($val < $min) {\n            $min = $val;\n        }\n        if ($val\
    \ > $max) {\n            $max = $val;\n        }\n        push(@sorted_list, $val);\n\
    \    }\n    return @sorted_list;\n}", "    my @strange_lst;\n    my $min = $lst[0];\n\
    \    my $max = $lst[0];\n    my $i = 0;\n    foreach my $num (@$lst) {\n     \
    \   if ($num < $min) {\n            $min = $num;\n        }\n        if ($num\
    \ > $max) {\n            $max = $num;\n        }\n        $strange_lst[$i] = $num;\n\
    \        $i++;\n    }\n    foreach my $num (@strange_lst) {\n        my $tmp =\
    \ $min;\n        $min = $max;\n        $max = $tmp;\n    }\n    return @strange_lst;\n\
    }", "    my @sorted = ();\n    my $min = @$lst ? $lst[0] : 0;\n    my $max = @$lst\
    \ ? $lst[-1] : 0;\n    my $i = 1;\n    my $j = 0;\n    my $tmp;\n    foreach my\
    \ $num (@$lst) {\n        if ($num < $min) {\n            $tmp = $min;\n     \
    \       $min = $num;\n        } elsif ($num > $max) {\n            $tmp = $max;\n\
    \            $max = $num;\n        } else {\n            $tmp = $num;\n      \
    \  }\n        push @sorted, $tmp;\n        $i++;\n    }\n    return @sorted;\n\
    }", "    my @sorted = ();\n    my $min = $lst[0];\n    my $max = $lst[0];\n  \
    \  foreach my $i (@$lst) {\n        if ($i < $min) {\n            $min = $i;\n\
    \        } elsif ($i > $max) {\n            $max = $i;\n        } else {\n   \
    \         push @sorted, $i;\n        }\n    }\n    push @sorted, $min;\n    push\
    \ @sorted, $max;\n    return @sorted;\n}", "    my @sorted = ();\n    my $min\
    \ = -1;\n    my $max = -1;\n    foreach my $num (@$lst) {\n        if ($min ==\
    \ -1) {\n            $min = $num;\n            $max = $num;\n        }\n     \
    \   elsif ($num < $min) {\n            $min = $num;\n        }\n        elsif\
    \ ($num > $max) {\n            $max = $num;\n        }\n    }\n    foreach my\
    \ $num (@$lst) {\n        if ($num < $min) {\n            push(@sorted, $min);\n\
    \            $min = $num;\n        }\n        elsif ($num > $max) {\n        \
    \    push(@sorted, $max);\n            $max = $num;\n        }\n        else {\n\
    \            push(@sorted, $num);\n        }\n    }\n    push(@sorted, $min);\n\
    \    push(@sorted, $max);\n    return @sorted;\n}", "    my @sorted = ();\n  \
    \  my $min = scalar @$lst > 0 ? $lst[0] : undef;\n    my $max = scalar @$lst >\
    \ 0 ? $lst[-1] : undef;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    foreach\
    \ my $num (@$lst) {\n        if ($num == $min) {\n            $tmp = $min;\n \
    \           $min = $max;\n            $max = $tmp;\n        }\n        if ($num\
    \ == $max) {\n            $tmp = $max;\n            $min = $max;\n           \
    \ $max = $tmp;\n        }\n        $sorted[$i] = $num;\n        $i++;\n    }\n\
    \    return @sorted;\n}", "    my @sorted = ();\n    my $min = $lst[0];\n    my\
    \ $max = $lst[0];\n    my $i;\n    foreach $i (@$lst) {\n        if ($i < $min)\
    \ {\n            $min = $i;\n        } elsif ($i > $max) {\n            $max =\
    \ $i;\n        }\n    }\n    foreach $i (@$lst) {\n        if ($i < $min) {\n\
    \            push (@sorted, $min);\n            $min = $i;\n        } elsif ($i\
    \ > $max) {\n            push (@sorted, $max);\n            $max = $i;\n     \
    \   }\n    }\n    push (@sorted, $min);\n    push (@sorted, $max);\n    return\
    \ @sorted;\n}", "    my @sorted = ();\n    my $min = $lst[0];\n    my $max = $lst[0];\n\
    \    foreach my $num (@$lst) {\n        if ($num < $min) {\n            $min =\
    \ $num;\n        } elsif ($num > $max) {\n            $max = $num;\n        }\n\
    \    }\n    foreach my $num (@$lst) {\n        if ($num == $min) {\n         \
    \   push @sorted, $min;\n        } elsif ($num == $max) {\n            push @sorted,\
    \ $max;\n        } else {\n            push @sorted, $num;\n        }\n    }\n\
    \    return @sorted;\n}", "    my @sorted_list = ();\n    my $min = $lst[0];\n\
    \    my $max = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min)\
    \ {\n            $min = $num;\n        } elsif ($num > $max) {\n            $max\
    \ = $num;\n        }\n    }\n    foreach my $num (@$lst) {\n        if ($num <\
    \ $min) {\n            push (@sorted_list, $min);\n            $min = $num;\n\
    \        } elsif ($num > $max) {\n            push (@sorted_list, $max);\n   \
    \         $max = $num;\n        } else {\n            push (@sorted_list, $num);\n\
    \        }\n    }\n    push (@sorted_list, $min);\n    push (@sorted_list, $max);\n\
    \    return @sorted_list;\n}", "    my @sorted_list = ();\n    my $min_value =\
    \ $lst[0];\n    my $max_value = $lst[0];\n    my $i = 0;\n    my $j = 0;\n   \
    \ my $k = 0;\n    my $temp;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n    my $temp_float;\n\
    \    my $temp_bool;\n    my $temp_str;\n    my $temp_int;\n", "    my @sorted\
    \ = ();\n    my $min = $lst[0];\n    my $max = $lst[0];\n    foreach my $num (@$lst)\
    \ {\n        if ($num < $min) {\n            $min = $num;\n        } elsif ($num\
    \ > $max) {\n            $max = $num;\n        } else {\n            push(@sorted,\
    \ $num);\n        }\n    }\n    foreach my $num (@sorted) {\n        my $i = $num\
    \ - $min;\n        $i = $i if $i > 0;\n        $i = $max - $i if $i < 0;\n   \
    \     push(@sorted, $num + $i);\n    }\n    return @sorted;\n}", "    my @sorted_list\
    \ = ();\n    my $min = @$lst ? $lst[0] : undef;\n    my $max = @$lst ? $lst[-1]\
    \ : undef;\n    my $i = 1;\n    foreach my $num (@$lst) {\n        next if $num\
    \ == $min or $num == $max;\n        push @sorted_list, $num;\n        next if\
    \ $num == $max;\n        $min = min $min, $num;\n        $max = max $max, $num;\n\
    \    }\n    return @sorted_list;\n}", "    my @sorted_list = ();\n    my $min_value\
    \ = $lst[0];\n    my $max_value = $lst[0];\n    my $current_value = $min_value;\n\
    \    foreach my $num (@$lst) {\n        if ($num > $max_value) {\n           \
    \ $max_value = $num;\n        }\n        if ($num < $min_value) {\n          \
    \  $min_value = $num;\n        }\n        if ($num == $current_value) {\n    \
    \        push (@sorted_list, $num);\n        } else {\n            push (@sorted_list,\
    \ $current_value);\n            $current_value = $num;\n        }\n    }\n   \
    \ push (@sorted_list, $current_value);\n    return @sorted_list;\n}", "    my\
    \ @sorted_lst;\n    my $min = $lst[0];\n    my $max = $lst[0];\n    foreach my\
    \ $num (@$lst) {\n        if ($num > $max) {\n            $max = $num;\n     \
    \   } elsif ($num < $min) {\n            $min = $num;\n        } else {\n    \
    \        push @sorted_lst, $num;\n        }\n    }\n    return @sorted_lst;\n}",
  "    my @sorted_list = ();\n    my $min = @$lst ? $lst[0] : 0;\n    my $max = @$lst\
    \ ? $lst[-1] : 0;\n    my $i = 0;\n    my $j = 0;\n    my $tmp;\n    my $tmp2;\n\
    \    my $tmp3;\n    my $tmp4;\n    my $tmp5;\n    my $tmp6;\n    my $tmp7;\n \
    \   my $tmp8;\n    my $tmp9;\n    my $tmp10;\n    my $tmp11;\n    my $tmp12;\n\
    \    my $tmp13;\n    my $tmp14;\n    my $tmp15;\n    my $tmp16;\n    my $tmp17;\n\
    \    my $tmp18;\n    my $tmp19;\n    my $tmp20;\n    my $tmp21;\n    my $tmp22;\n\
    \    my $tmp23;\n    my $tmp24;\n    my $tmp25;\n    my $tmp26;\n    my $tmp27;\n\
    \    my $tmp28;\n    my $tmp29;\n    my $tmp30;\n    my $tmp31;\n    my $tmp32;\n\
    \    my $tmp33;\n    my $tmp34;\n    my $tmp35;\n    my $tmp36;\n    my $tmp37;\n\
    \    my $tmp38;\n    my $tmp39;\n    my $tmp40;\n    my $tmp41;\n    my $tmp42;\n\
    \    my $tmp43;\n    my $tmp44;\n    my $tmp45;\n    my $tmp46;\n    my $tmp47;\n\
    \    my $tmp48;\n    my $tmp49;\n    my $tmp50;\n    my $tmp51;\n    my $tmp52;\n\
    \    my $tmp53;\n    my $tmp54;\n    my $tmp55;\n    my $tmp56;\n    my $tmp57;\n\
    \    my $tmp58;\n    my $tmp59;\n    my $tmp60;\n    my $tmp61;\n    my $tmp62;\n\
    \    my $tmp63;\n    my $tmp64;\n    my $tmp65;\n    my $tmp66;\n    my $tmp67;\n\
    \    my $tmp68;\n    my $tmp69;\n    my $tmp70;\n    my $tmp71;\n    my $tmp72;\n\
    \    my $tmp73;\n    my $tmp74;\n    my $tmp75;\n    my $tmp76;\n    my $tmp77;\n\
    \    my $tmp78;\n    my $tmp79;\n    my $tmp80;\n    my $tmp81;\n    my $tmp",
  "    my @sorted_list = ();\n    my $min_value = $lst[0];\n    my $max_value = $lst[0];\n\
    \    foreach my $val (@$lst) {\n        if ($val < $min_value) {\n           \
    \ $min_value = $val;\n        } elsif ($val > $max_value) {\n            $max_value\
    \ = $val;\n        }\n    }\n    foreach my $val (@$lst) {\n        if ($val ==\
    \ $min_value) {\n            push(@sorted_list, $max_value);\n        } elsif\
    \ ($val == $max_value) {\n            push(@sorted_list, $min_value);\n      \
    \  } else {\n            push(@sorted_list, $val);\n        }\n    }\n    return\
    \ @sorted_list;\n}", "    my @sorted_list = ();\n    my $min = $lst[0];\n    my\
    \ $max = $lst[0];\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n\
    \            $min = $num;\n        } elsif ($num > $max) {\n            $max =\
    \ $num;\n        }\n    }\n    foreach my $num (@$lst) {\n        if ($num < $min)\
    \ {\n            push @sorted_list, $min;\n        } elsif ($num > $max) {\n \
    \           push @sorted_list, $max;\n        } else {\n            push @sorted_list,\
    \ $num;\n        }\n    }\n    return @sorted_list;\n}", "    my @sorted_list\
    \ = ();\n    my $min = $lst[0];\n    my $max = $lst[0];\n    foreach my $num (@$lst)\
    \ {\n        if ($num < $min) {\n            $min = $num;\n        } elsif ($num\
    \ > $max) {\n            $max = $num;\n        } else {\n            push (@sorted_list,\
    \ $num);\n        }\n    }\n    foreach my $num (@sorted_list) {\n        push\
    \ (@sorted_list, $num);\n    }\n    return @sorted_list;\n}", "    my @sorted_list\
    \ = ();\n    my $min_value = $lst[0];\n    my $max_value = $lst[0];\n    my $min_pos\
    \ = 0;\n    my $max_pos = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $temp;\n    foreach my $num (@$lst) {\n        if ($num < $min_value)\
    \ {\n            $min_value = $num;\n            $min_pos = $i;\n        }\n \
    \       if ($num > $max_value) {\n            $max_value = $num;\n           \
    \ $max_pos = $i;\n        }\n        $sorted_list[$k] = $num;\n        $i++;\n\
    \    }\n    foreach my $num (@$sorted_list) {\n        $k++;\n        if ($num\
    \ < $min_value) {\n            $temp = $min_value;\n            $min_value = $num;\n\
    \            $min_pos = $k;\n        }\n        if ($num > $max_value) {\n   \
    \         $temp = $max_value;\n            $max_value = $num;\n            $max_pos\
    \ = $k;\n        }\n        $sorted_list[$k] = $temp;\n    }\n    return @sorted_list;\n\
    }", "    my @sorted = ();\n    my $min = $lst[0];\n    my $max = $lst[0];\n  \
    \  foreach my $num (@$lst) {\n        if ($num < $min) {\n            $min = $num;\n\
    \        } elsif ($num > $max) {\n            $max = $num;\n        } else {\n\
    \            push (@sorted, $num);\n        }\n    }\n    foreach my $num (@sorted)\
    \ {\n        push (@sorted, $num);\n    }\n    return @sorted;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
