name: HumanEval_131_digits
language: pl
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n\
  # 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n\
  \        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return 0 if $n =~ /^0/;\n    return $n =~ /^(\\d)\\1*$/;\n}", " \
    \   return 0 if $n =~ /^0/;\n    my $d = $n % 10;\n    return $d if $d % 2 !=\
    \ 0;\n    return $d * digits($n / 10);\n}", "    return 0 if $n =~ /^0/;\n   \
    \ return $n % 10 * ($n / 10) if $n =~ /^\\d+$/;\n    return $n % 10 * ($n / 10)\
    \ if $n =~ /^\\d+\\.\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\\
    .\\d+\\.\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\\
    .\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return $n % 10 * ($n /\
    \ 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n\
    \    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~\
    \ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n\
    \    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return $n % 10 * ($n /\
    \ 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\\
    .\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return\
    \ $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\\
    d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return $n % 10 * ($n\
    \ / 10) if $n =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\\
    d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return $n % 10 * ($n / 10) if $n\
    \ =~ /^\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\d+\\.\\\
    d+\\.\\d+\\.\\d+\\.\\d+$/;\n    return $n % 10 * ($n / 10) if $n =~ /^\\d+\\.\\\
    d+\\.\\d+", "    return 0 if $n =~ /^0/;\n    return $n =~ /^1(\\d)$/;\n}", " \
    \   return 0 if $n =~ /^0/;\n    return $n =~ /^(\\d)\\1+$/;\n}", "    return\
    \ 0 unless $n;\n    my $result = 0;\n    my $digit;\n    while ($n > 0) {\n  \
    \      $digit = $n % 10;\n        $result *= $digit + 1;\n        $n /= 10;\n\
    \    }\n    return $result;\n}", "    return 0 if $n =~ /^0/;\n    return $n =~\
    \ /^(\\d)\\1*$/;\n}", "    return 0 if $n =~ /^0/;\n    return $n =~ /^(\\d)\\\
    1+$/;\n}", "    return 0 if $n =~ /^0$/;\n    return $n =~ /^(\\d{2})(\\d{3})$/;\n\
    }", "    return 0 if $n =~ /^0$/;\n    return $n =~ /^(\\d{2,})$/;\n}", "    return\
    \ 0 if $n =~ /^0$/;\n    return $n =~ /^1$/ ? 1 : $n =~ /^3$/ ? 3 : 2 * $n =~\
    \ /^5$/ ? 5 : 0;\n}", "    return 0 unless $n;\n    return $n if $n =~ /^\\d+$/;\n\
    \    my $nstr = sprintf \"%0*d\", $n, $n =~ /\\d/;\n    return 0 if $nstr =~ /^0+$/;\n\
    \    return $nstr =~ /^0+(\\d+)$/;\n    return $nstr =~ /^(\\d+)(\\d)$/;\n}",
  "    return 0 if $n =~ /^0/;\n    return $n =~ /^(\\d)\\1+$/;\n}", "    return 0\
    \ if $n =~ /^0/;\n    return $n =~ /^1/ ? $n : (($n % 10) * 10 + $n / 10);\n}",
  "    my $product = 1;\n    while($n > 0) {\n        $product *= $n % 10;\n     \
    \   $n /= 10;\n    }\n    return $product;\n}", "    my $product = 1;\n    my\
    \ $remainder = 0;\n    while($n) {\n        $remainder = $n % 10;\n        $product\
    \ *= $remainder;\n        $n /= 10;\n    }\n    return $product if $remainder\
    \ == 0;\n    return 0;\n}", "    return 0 if $n =~ /^0/;\n    return $n =~ /^1(\\\
    d)$/;\n}", "    my $product = 1;\n    my $digit;\n    while ($n > 0) {\n     \
    \   $digit = $n % 10;\n        $product *= $digit;\n        $n /= 10;\n    }\n\
    \    return $product;\n}", "    my $product = 1;\n    while($n > 0) {\n      \
    \  $product *= $n % 10;\n        $n /= 10;\n    }\n    return $product;\n}", " \
    \   return 0 if $n =~ /^0/;\n    my $d = $n % 10;\n    $n /= 10;\n    return $d\
    \ * $digits($n) if $n;\n    return $d;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
