name: HumanEval_30_get_positive
language: pl
prompt: "# Return only positive numbers in the list.\n# >>> get_positive([-1, 2, -4,\
  \ 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
  # [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_positive;\n\
  \        if(eq_deeply($candidate->([-1, -2, 4, 5, 6]),[4, 5, 6])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
  \ -2]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n    \
    \        push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n  \
    \  my $neg;\n    foreach my $x (@$l) {\n        $neg = $x if $x <=> 0;\n     \
    \   push @r, $x if $neg;\n    }\n    return @r;\n}", "    my @r;\n    foreach\
    \ my $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n\
    \    }\n    return @r;\n}", "    my @r;\n    my $neg;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n\
    \    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n    my\
    \ $pos;\n    my $neg;\n    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n\
    \    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my\
    \ $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n    my $pos;\n\
    \    my $neg;\n    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my\
    \ $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n\
    \    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n    my $pos;\n    my\
    \ $neg;\n    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n\
    \    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n    my\
    \ $pos;\n    my $neg;\n    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n\
    \    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my\
    \ $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n    my $pos;\n\
    \    my $neg;\n    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my\
    \ $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n\
    \    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n    my $pos;\n    my\
    \ $neg;\n    my $max;\n    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n\
    \    my $min;\n    my $pos;\n    my $neg;\n    my $max;\n    my $min;\n", "  \
    \  my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r,\
    \ $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n    foreach my $x (@$l)\
    \ {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n   \
    \         push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n \
    \   foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n\
    \        }\n    }\n    return @r;\n}", "    my @r = ();\n    foreach my $x (@$l)\
    \ {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r = ();\n    foreach my $x (@$l) {\n        if ($x > 0) {\n\
    \            push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r =\
    \ ();\n    foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r,\
    \ $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n    foreach my $x (@$l)\
    \ {\n        if ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return\
    \ @r;\n}", "    my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n   \
    \         push(@r, $x);\n        }\n    }\n    return @r;\n}", "    my @r;\n \
    \   my $neg = 0;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n         \
    \   push(@r, $x);\n        }\n        else {\n            $neg++;\n        }\n\
    \    }\n    return @r;\n}", "    my @r;\n    foreach my $x (@$l) {\n        if\
    \ ($x > 0) {\n            push(@r, $x);\n        }\n    }\n    return @r;\n}",
  "    my @a;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@a,\
    \ $x);\n        }\n    }\n    return @a;\n}", "    my @r;\n    my $neg;\n    foreach\
    \ my $x (@$l) {\n        if ($x > 0) {\n            push(@r, $x);\n        } else\
    \ {\n            $neg = 1;\n        }\n    }\n    return @r if $neg;\n    return\
    \ @$l;\n}", "    my @r;\n    my $neg;\n    my $pos;\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $max;\n    my $min;\n    my $maxpos;\n    my $minpos;\n  \
    \  my $maxneg;\n    my $minneg;\n    my $negcnt;\n    my $poscnt;\n    my $negsum;\n\
    \    my $possum;\n    my $negmax;\n    my $posmax;\n    my $negmin;\n    my $posmin;\n\
    \    my $negmaxpos;\n    my $posmaxpos;\n    my $negminpos;\n    my $posminpos;\n\
    \    my $negmaxneg;\n    my $posmaxneg;\n    my $negminneg;\n    my $posminneg;\n\
    \    my $negsumpos;\n    my $possumpos;\n    my $negsumneg;\n    my $possumneg;\n\
    \    my $negsumposneg;\n    my $possumposneg;\n    my $negsumnegneg;\n    my $possumnegneg;\n\
    \    my $negsumposnegneg;\n    my $possumposnegneg;\n    my $negsumnegneg;\n \
    \   my $possumnegneg;\n    my $negsumposnegneg;\n    my $possumposnegneg;\n  \
    \  my $negsumnegneg;\n    my $possumnegneg;\n    my $negsumposnegneg;\n    my\
    \ $possumposnegneg;\n    my $negsumnegneg;\n    my $possumnegneg;\n    my $negsumposnegneg;\n\
    \    my $possumposnegneg;\n    my $negsumnegneg;\n    my $possumnegneg;\n    my\
    \ $negsumposnegneg;\n    my $possumposnegneg;\n    my $negsumnegneg;\n    my $possumnegneg;\n\
    \    my $negsumposnegneg;\n    my $possumposnegneg;\n    my $negsumnegneg;\n \
    \   my $possumnegneg;\n    my $negsumposnegneg;\n    my $possumposnegneg;\n  \
    \  my $negsumnegneg;\n    my $possumnegneg;\n    my $negsumposnegneg;\n    my\
    \ $possumposnegneg;\n    my $negsumnegneg;\n    my $possumnegneg;\n    my $negsumposnegneg;\n\
    \    my $possumposneg", "    my @r;\n    foreach my $x (@$l) {\n        if ($x\
    \ > 0) {\n            push(@r, $x);\n        }\n    }\n    return @r;\n}", " \
    \   my @r;\n    foreach my $x (@$l) {\n        if ($x > 0) {\n            push(@r,\
    \ $x);\n        }\n    }\n    return @r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
