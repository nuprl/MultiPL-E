name: HumanEval_18_how_many_times
language: pl
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times(\"\", \"a\")\n# 0\n# >>> how_many_times(\"\
  aaa\", \"a\")\n# 3\n# >>> how_many_times(\"aaaa\", \"aa\")\n# 3\nsub how_many_times\
  \ {\n    my($string, $substring) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&how_many_times;\n\
  \        if(eq_deeply($candidate->(\"\", \"x\"),0)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyxyxyx\", \"x\"\
  ),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  cacacacac\", \"cac\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(\"john doe\", \"john\"),1)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    my\
    \ $count = 0;\n    my $pos = 0;\n    my $len = length($string);\n    while ($pos\
    \ < $len) {\n        my $found = 0;\n        for (my $i = 0; $i < $len; $i++)\
    \ {\n            if ($string[$i] eq $substring[$i]) {\n                $found++;\n\
    \                if ($found == $substring) {\n                    $count++;\n\
    \                }\n            }\n        }\n        $pos++;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $index = 0;\n    while ($index != -1)\
    \ {\n        $index = index($string, $substring, $index);\n        if ($index\
    \ != -1) {\n            $count++;\n            $index += length($substring);\n\
    \        }\n    }\n    return $count;\n}", "    $string =~ tr/a-z/A-Z/;\n    $substring\
    \ =~ tr/a-z/A-Z/;\n    my $count = 0;\n    my $i = 0;\n    while($i < length($string))\
    \ {\n        if(substr($string, $i, length($substring)) eq $substring) {\n   \
    \         $count++;\n            $i += length($substring);\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $count;\n}", "    $string =~\
    \ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    my $count = 0;\n    my $i\
    \ = 0;\n    my $j = 0;\n    while ($i < length($string) and $j < length($substring))\
    \ {\n        if (substr($string, $i, 1) eq substr($substring, $j, 1)) {\n    \
    \        $count++;\n            $i++;\n            $j++;\n        }\n        elsif\
    \ ($i < length($string) and substr($string, $i, 1) eq substr($substring, $j, 1))\
    \ {\n            $i++;\n        }\n        else {\n            $j++;\n       \
    \ }\n    }\n    return $count;\n}", "    $string =~ tr/a-z/A-Z/;\n    $substring\
    \ =~ tr/a-z/A-Z/;\n    $string =~ tr/A-Z/a-z/;\n    $substring =~ tr/A-Z/a-z/;\n\
    \    $string =~ tr/A-Za-z/A-Z/;\n    $substring =~ tr/A-Za-z/A-Z/;\n    $string\
    \ =~ tr/A-Za-z/a-z/;\n    $substring =~ tr/A-Za-z/a-z/;\n    $string =~ tr/a-z/A-Z/;\n\
    \    $substring =~ tr/a-z/A-Z/;\n    $string =~ tr/A-Z/a-z/;\n    $substring =~\
    \ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n    $substring =~ tr/A-Za-z/A-Z/;\n\
    \    $string =~ tr/A-Za-z/a-z/;\n    $substring =~ tr/A-Za-z/a-z/;\n    $string\
    \ =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    $string =~ tr/A-Z/a-z/;\n\
    \    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n    $substring\
    \ =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring =~ tr/A-Za-z/a-z/;\n\
    \    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    $string =~ tr/A-Z/a-z/;\n\
    \    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n    $substring\
    \ =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring =~ tr/A-Za-z/a-z/;\n\
    \    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    $string =~ tr/A-Z/a-z/;\n\
    \    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n    $substring\
    \ =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring =~ tr", " \
    \   $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    my $count = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < length($string) and $j < length($substring))\
    \ {\n        if (substr($string, $i, 1) eq substr($substring, $j, 1)) {\n    \
    \        $count++;\n            $i++;\n            $j++;\n        }\n        elsif\
    \ ($j == length($substring)) {\n            $i++;\n        }\n        else {\n\
    \            $j++;\n        }\n    }\n    return $count;\n}", "    $string =~\
    \ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    $string =~ tr/A-Z/a-z/;\n\
    \    $substring =~ tr/A-Z/a-z/;\n    return $string =~ /$substring/ig;\n}", " \
    \   $string =~ s/^\\s+//;\n    $substring =~ s/^\\s+//;\n    my $count = 0;\n\
    \    my $i = 0;\n    my $j = 0;\n    while ($i < length($string) and $j < length($substring))\
    \ {\n        if (substr($string, $i, 1) eq substr($substring, $j, 1)) {\n    \
    \        $count++;\n            $i++;\n            $j++;\n        }\n        elsif\
    \ ($j == length($substring)) {\n            $i++;\n        }\n        else {\n\
    \            $j++;\n        }\n    }\n    return $count;\n}", "    my $count =\
    \ 0;\n    my $pos = 0;\n    my $len = length($string);\n    my $sublen = length($substring);\n\
    \    while ($pos < $len) {\n        if (substr($string, $pos, $sublen) eq $substring)\
    \ {\n            $count++;\n            $pos += $sublen;\n        }\n        else\
    \ {\n            $pos++;\n        }\n    }\n    return $count;\n}", "    $string\
    \ =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    my $count = 0;\n    my\
    \ $index = 0;\n    while($index != -1) {\n        $index = index($string, $substring,\
    \ $index);\n        if($index != -1) {\n            $count++;\n            $index\
    \ += length($substring);\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $index = 0;\n    while($index < length($string)) {\n        my\
    \ $index2 = index($string, $substring, $index);\n        if($index2 != -1) {\n\
    \            $index = $index2;\n            $count++;\n        }\n        $index++;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $pos = 0;\n    while($pos\
    \ < length($string)) {\n        my $found = $string->[$pos] eq $substring;\n \
    \       $count++ if $found;\n        $pos++;\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    my $pos = 0;\n    while($pos < length($string)) {\n  \
    \      my $found = 0;\n        while($pos < length($string) && $found == 0) {\n\
    \            my $c = substr($string, $pos, 1);\n            if($c eq $substring)\
    \ {\n                $found = 1;\n            }\n            $pos++;\n       \
    \ }\n        if($found == 1) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $pos = 0;\n    while($pos < length($string))\
    \ {\n        my $found = 0;\n        while($pos < length($string) && $found ==\
    \ 0) {\n            my $c = substr($string, $pos, 1);\n            if ($c eq $substring)\
    \ {\n                $found = 1;\n            }\n            $pos++;\n       \
    \ }\n        if ($found == 1) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}", "    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n\
    \    $string =~ tr/A-Z/a-z/;\n    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n\
    \    $substring =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring\
    \ =~ tr/A-Za-z/a-z/;\n    $string =~ tr/A-Za-z/A-Za-z/;\n    $substring =~ tr/A-Za-z/A-Za-z/;\n\
    \    $string =~ tr/A-Za-z/a-za-z/;\n    $substring =~ tr/A-Za-z/a-za-z/;\n   \
    \ $string =~ tr/a-za-z/A-Z/;\n    $substring =~ tr/a-za-z/A-Z/;\n    $string =~\
    \ tr/a-za-z/a-z/;\n    $substring =~ tr/a-za-z/a-z/;\n    $string =~ tr/a-za-z/A-Za-z/;\n\
    \    $substring =~ tr/a-za-z/A-Za-z/;\n    $string =~ tr/a-za-z/a-za-z/;\n   \
    \ $substring =~ tr/a-za-z/a-za-z/;\n    $string =~ tr/a-za-z/A-Za-z/;\n    $substring\
    \ =~ tr/a-za-z/A-Za-z/;\n    $string =~ tr/a-za-z/a-za-z/;\n    $substring =~\
    \ tr/a-za-z/a-za-z/;\n    $string =~ tr/A-Za-z/A-Za-z/;\n    $substring =~ tr/A-Za-z/A-Za-z/;\n\
    \    $string =~ tr/A-Za-z/a-za-z/;\n    $substring =~ tr/A-Za-z/a-za-z/;\n   \
    \ $string =~ tr/A-Za-z/A-Za-z/;\n    $substring =~ tr/A-Za-z/A-Za-z/;\n    $string\
    \ =~ tr/A-Za-z/a-za-z/;\n    $substring =~ tr/A-Za-z/a-za-z/;\n    $string =~\
    \ tr/a-za-z/A-Za-z/;\n    $substring =~ tr/a-za-z/A-Za-z/;\n    $string =~ tr/a-za-z/a-za-z/;\n\
    \    $substring =~ tr/a-za-z/a-za-z/;\n    $string =~ tr/", "    my $count = 0;\n\
    \    my $pos = 0;\n    while ($pos < length($string)) {\n        my $found = 0;\n\
    \        my $len = $substring->length();\n        while ($pos < length($string)\
    \ and $found == 0) {\n            if (substr($string, $pos, $len) eq $substring)\
    \ {\n                $found = 1;\n            }\n            $pos++;\n       \
    \ }\n        $count++;\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   my $pos = 0;\n    while($pos < length($string)) {\n        my $found = $substring\
    \ eq substr($string, $pos, length($substring));\n        $count += $found;\n \
    \       $pos += length($substring);\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $pos = 0;\n    while ($pos < length($string)) {\n        my $substring_length\
    \ = length($substring);\n        my $substring_pos = 0;\n        while ($substring_pos\
    \ < $substring_length) {\n            my $substring_char = substr($string, $substring_pos,\
    \ 1);\n            if ($substring_char == $substring) {\n                $count++;\n\
    \                $substring_pos += 1;\n            } else {\n                $substring_pos\
    \ += 1;\n            }\n        }\n        $pos += 1;\n    }\n    return $count;\n\
    }", "    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    $string\
    \ =~ tr/A-Z/a-z/;\n    $substring =~ tr/A-Z/a-z/;\n    return $string =~ tr/$substring/;\n\
    }", "    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n    $string\
    \ =~ tr/A-Z/a-z/;\n    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n\
    \    $substring =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring\
    \ =~ tr/A-Za-z/a-z/;\n    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n\
    \    $string =~ tr/A-Z/a-z/;\n    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n\
    \    $substring =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring\
    \ =~ tr/A-Za-z/a-z/;\n    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n\
    \    $string =~ tr/A-Z/a-z/;\n    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n\
    \    $substring =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring\
    \ =~ tr/A-Za-z/a-z/;\n    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n\
    \    $string =~ tr/A-Z/a-z/;\n    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n\
    \    $substring =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring\
    \ =~ tr/A-Za-z/a-z/;\n    $string =~ tr/a-z/A-Z/;\n    $substring =~ tr/a-z/A-Z/;\n\
    \    $string =~ tr/A-Z/a-z/;\n    $substring =~ tr/A-Z/a-z/;\n    $string =~ tr/A-Za-z/A-Z/;\n\
    \    $substring =~ tr/A-Za-z/A-Z/;\n    $string =~ tr/A-Za-z/a-z/;\n    $substring\
    \ =~ tr"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
