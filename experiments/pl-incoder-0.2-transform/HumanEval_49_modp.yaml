name: HumanEval_49_modp
language: pl
prompt: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>>\
  \ modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100,\
  \ 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n \
  \       if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
  \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
  \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
  \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $r = $n % $p;\n    if ($r == 0) {\n        return $p;\n    }\n\
    \    return $p;\n}", "    return $n if $n <= $p;\n    return $n % $p;\n}", " \
    \   my $x = $n % $p;\n    if ($x == 0) {\n        return $p;\n    }\n    return\
    \ $x;\n}", "    my $x = $n % $p;\n    return $x if $x == 0;\n    return $p - ($x\
    \ % $p);\n}", "    return $n if $n <= 0;\n    return $n if $n >= $p;\n    return\
    \ $n % $p;\n}", "    my $x = $n % $p;\n    return $x if $x == 0;\n    return $p\
    \ if $x == $p;\n    return $x % $p;\n}", "    my $x = $n;\n    my $y = $p;\n \
    \   my $z = 1;\n    my $r = 1;\n    my $t = 1;\n    my $m = 1;\n    my $s = 1;\n\
    \    my $k = 0;\n    my $kmax = $p - 1;\n    my $kmin = $p - 2;\n    my $kmax1\
    \ = $kmax - 1;\n    my $kmin1 = $kmin - 1;\n    my $kmax2 = $kmax1 - 1;\n    my\
    \ $kmin2 = $kmin1 - 1;\n    my $kmax3 = $kmax2 - 1;\n    my $kmin3 = $kmin2 -\
    \ 1;\n    my $kmax4 = $kmax3 - 1;\n    my $kmin4 = $kmin3 - 1;\n    my $kmax5\
    \ = $kmax4 - 1;\n    my $kmin5 = $kmin4 - 1;\n    my $kmax6 = $kmax5 - 1;\n  \
    \  my $kmin6 = $kmin5 - 1;\n    my $kmax7 = $kmax6 - 1;\n    my $kmin7 = $kmin6\
    \ - 1;\n    my $kmax8 = $kmax7 - 1;\n    my $kmin8 = $kmin7 - 1;\n    my $kmax9\
    \ = $kmax8 - 1;\n    my $kmin9 = $kmin8 - 1;\n    my $kmax10 = $kmax9 - 1;\n \
    \   my $kmin10 = $kmin9 - 1;\n    my $kmax11 = $kmax10 - 1;\n    my $kmin11 =\
    \ $kmin10 - 1;\n    my $kmax12 = $kmax11 - 1;\n    my $kmin12 = $kmin11 - 1;\n\
    \    my $kmax13 = $kmax12 - 1;\n    my $kmin13 = $kmin12 - 1;\n    my $kmax14\
    \ = $kmax13 - 1;\n    my $kmin14 = $kmin13 - 1;\n    my $kmax15 = $kmax14 - 1;\n\
    \    my $kmin15 = $kmin14 - 1;\n    my $kmax16 = $kmax15 - 1;\n    my $kmin16\
    \ = $kmin15 - 1;\n    my $kmax17 = $kmax16 - 1;\n    my $kmin17 = $kmin16 - 1;\n\
    \    my $kmax18 = $kmax17 - 1;\n    my $kmin18 = $kmin17 - 1;\n    my $kmax19\
    \ = $kmax18 - 1;\n    my $kmin19 = $kmin18 - 1;\n    my $kmax20 = $kmax19", " \
    \   my $x = $n % $p;\n    if ($x == 0) {\n        $x++;\n    }\n    return $x;\n\
    }", "    my $x = $n;\n    my $y = $p;\n    my $z = 1;\n    while ($z) {\n    \
    \    $z = ($x % $y) == 0;\n        $x = $y;\n        $y = $z * $y;\n    }\n  \
    \  return $x;\n}", "    my $n = int($n);\n    my $p = int($p);\n    my $r = 1;\n\
    \    my $m = 1;\n    while ($n >= $p) {\n        $m = ($n * $m) % $p;\n      \
    \  $n = ($n * $r) % $p;\n        $r = ($r * $m) % $p;\n    }\n    return $r;\n\
    }", "    return $n if $n <= 0;\n    return $n if $n >= $p;\n    return $n % $p;\n\
    }", "    my $n1 = $n;\n    my $n2 = $n;\n    my $n3 = $n;\n    my $n4 = $n;\n\
    \    my $n5 = $n;\n    my $n6 = $n;\n    my $n7 = $n;\n    my $n8 = $n;\n    my\
    \ $n9 = $n;\n    my $n10 = $n;\n    my $n11 = $n;\n    my $n12 = $n;\n    my $n13\
    \ = $n;\n    my $n14 = $n;\n    my $n15 = $n;\n    my $n16 = $n;\n    my $n17\
    \ = $n;\n    my $n18 = $n;\n    my $n19 = $n;\n    my $n20 = $n;\n    my $n21\
    \ = $n;\n    my $n22 = $n;\n    my $n23 = $n;\n    my $n24 = $n;\n    my $n25\
    \ = $n;\n    my $n26 = $n;\n    my $n27 = $n;\n    my $n28 = $n;\n    my $n29\
    \ = $n;\n    my $n30 = $n;\n    my $n31 = $n;\n    my $n32 = $n;\n    my $n33\
    \ = $n;\n    my $n34 = $n;\n    my $n35 = $n;\n    my $n36 = $n;\n    my $n37\
    \ = $n;\n    my $n38 = $n;\n    my $n39 = $n;\n    my $n40 = $n;\n    my $n41\
    \ = $n;\n    my $n42 = $n;\n    my $n43 = $n;\n    my $n44 = $n;\n    my $n45\
    \ = $n;\n    my $n46 = $n;\n    my $n47 = $n;\n    my $n48 = $n;\n    my $n49\
    \ = $n;\n    my $n50 = $n;\n    my $n51 = $n;\n    my $n52 = $n;\n    my $n53\
    \ = $n;\n    my $n54 = $n;\n    my $n55 = $n;\n    my $n56 = $n;\n    my $n57\
    \ = $n;\n    my $n58 = $n;\n    my $n59 = $n;\n    my $n60 = $n;\n    my $n61\
    \ = $n;\n    my $n62 = $n;\n    my $n63 = $n;\n    my $n64 = $n;\n    my $n65\
    \ = $n;\n    my $n66 = $n;\n    my $n67 = $n;\n    my $n68 = $n;\n    my $n69\
    \ = $n;\n    my $n70 = $n;\n    my $n71 = $n;\n    my $", "    my $x = $n % $p;\n\
    \    if ($x == 0) {\n        $x = $p;\n    }\n    return $x;\n}", "    my $n =\
    \ int($n);\n    my $p = int($p);\n    my $r = $n % $p;\n    return $r if $r !=\
    \ 0;\n    return $p;\n}", "    my $n = int($n);\n    my $p = int($p);\n    my\
    \ $r = $n % $p;\n    return $r == 0 ? $p : $r;\n}", "    my $r = $n % $p;\n  \
    \  return $r if $r != 0;\n    return $p;\n}", "    my $n = int($n);\n    my $p\
    \ = int($p);\n    my $r = $n % $p;\n    return $r if $r != 0;\n    return $p;\n\
    }", "    return $n if $n < 0;\n    return $n if $n == 0;\n    return $n if $p\
    \ < 0;\n    return $n if $p == 0;\n    return $n if $n == $p;\n    return $n if\
    \ $n == ($p - 1);\n    return $n if $n == ($p + 1);\n    return $n if $n == ($p\
    \ + 2);\n    return $n if $n == ($p - 2);\n    return $n if $n == ($p - 1);\n\
    \    return $n if $n == ($p + 2);\n    return $n if $n == ($p - 3);\n    return\
    \ $n if $n == ($p + 3);\n    return $n if $n == ($p - 4);\n    return $n if $n\
    \ == ($p + 4);\n    return $n if $n == ($p - 5);\n    return $n if $n == ($p +\
    \ 5);\n    return $n if $n == ($p - 6);\n    return $n if $n == ($p + 6);\n  \
    \  return $n if $n == ($p - 7);\n    return $n if $n == ($p + 7);\n    return\
    \ $n if $n == ($p - 8);\n    return $n if $n == ($p + 8);\n    return $n if $n\
    \ == ($p - 9);\n    return $n if $n == ($p + 9);\n    return $n if $n == ($p -\
    \ 10);\n    return $n if $n == ($p + 10);\n    return $n if $n == ($p - 11);\n\
    \    return $n if $n == ($p + 11);\n    return $n if $n == ($p - 12);\n    return\
    \ $n if $n == ($p + 12);\n    return $n if $n == ($p - 13);\n    return $n if\
    \ $n == ($p + 13);\n    return $n if $n == ($p - 14);\n    return $n if $n ==\
    \ ($p + 14);\n    return $n if $n == ($p - 15);\n    return $n if $n == ($p +\
    \ 15);\n    return $n if $n == ($p - 16);\n    return $n if $n == ($p + 16);\n\
    \    return $n if $n == ($p - 17);\n    return $n if $n == ($p + 17);\n    return\
    \ $n if $n == ($p - 18);\n    return $n if $n == ($p + 18);\n    return $n if\
    \ $n == ($p - 19);\n    return $n if $n == ($p + 19);\n    return $n if $n ==\
    \ ($p - 20);\n    return $n if $n == ($p + 20);\n    return $n if $n == ($p -\
    \ 21);\n    return $n if $n == ($p + 21);\n    return $", "    return $n if $n\
    \ == 0;\n    return $n if $n == 1;\n    return $n if $n == $p;\n    return $n\
    \ % $p;\n}", "    return $n if $n < 0;\n    return $n if $n == 0;\n    return\
    \ $p if $p == 0;\n    return $p if $p < 0;\n    return $n % $p;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
