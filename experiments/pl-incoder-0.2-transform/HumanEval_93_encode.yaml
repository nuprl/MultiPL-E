name: HumanEval_93_encode
language: pl
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n#\
  \ >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n   \
  \ my($message) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
  \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
  ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
  ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT\
  \ kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w\
    \ x y z);\n    my $vowels = qw(a e i o u);\n    my $new_message = \"\";\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $vowel_found = 0;\n    my $letter_found\
    \ = 0;\n    my $letter;\n    my $vowel;\n    foreach $letter (split(//, $message))\
    \ {\n        $letter_found = 0;\n        $vowel_found = 0;\n        $new_message\
    \ .= $letter;\n        foreach $vowel (split(//, $alphabet)) {\n            $vowel_found\
    \ = 0;\n            foreach $letter (split(//, $message)) {\n                $letter_found\
    \ = 0;\n                if ($letter eq $vowel) {\n                    $letter_found\
    \ = 1;\n                    $new_message .= $alphabet[$j];\n                 \
    \   $j++;\n                }\n                else {\n                    if ($letter_found\
    \ == 1) {\n                        $new_message .= $vowel;\n                 \
    \       $vowel_found = 1;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return $new_message;\n}\n</code>\n<|/ a tags=perl,regex\
    \ |>\n<| c |>\nThis doesn't work for the input `This is a message`\n<|/ c |>\n\
    <| c |>\n: It does work for the input `This is a message`. `This is a message`\
    \ becomes `tHKS KS C MGSSCGG`.\n<|/ c |>\n<| c |>\n: I added a comment to the\
    \ OP's question to clarify that he wants to swap case. Your solution doesn't do\
    \ that.\n<|/ c |>\n<| c |>\n: I added a comment to the OP's question to clarify\
    \ that he wants to swap case. Your solution doesn't do that.\n<|/ c |>\n<| c |>\n\
    : I added a comment to the OP's question to clarify that he wants to swap case.\
    \ Your solution doesn't do that.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    my\
    \ $alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my\
    \ $vowels = qw(a e i o u);\n    my $vowel_positions = map { $alphabet[$_] } 0\
    \ .. length($alphabet) - 1;\n    my $vowel_positions_2 = map { $alphabet[$_] }\
    \ 0 .. length($alphabet) - 2;\n    my $vowel_positions_3 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 3;\n    my $vowel_positions_4 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 4;\n    my $vowel_positions_5 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 5;\n    my $vowel_positions_6 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 6;\n    my $vowel_positions_7 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 7;\n    my $vowel_positions_8 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 8;\n    my $vowel_positions_9 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 9;\n    my $vowel_positions_10 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 10;\n    my $vowel_positions_11 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 11;\n    my $vowel_positions_12 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 12;\n    my $vowel_positions_13 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 13;\n    my $vowel_positions_14 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 14;\n    my $vowel_positions_15 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 15;\n    my $vowel_positions_16 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 16;\n    my $vowel_positions_17 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 17;\n    my $vowel_positions_18 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 18;\n    my $vowel_positions_19 = map { $alphabet[$_]\
    \ } 0 .. length($alphabet) - 19;\n    my $vowel_positions_20 = map { $alphabet[$_]\
    \ } 0 .. ", "    my $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $vowels\
    \ = \"AEIOU\";\n    my $new_message = \"\";\n    \n    foreach my $letter (split(//,\
    \ $message)) {\n        my $index = index($alphabet, $letter);\n        if ($index\
    \ != -1) {\n            $new_message .= substr($alphabet, $index, 1);\n      \
    \  }\n        else {\n            $new_message .= $letter;\n        }\n    }\n\
    \    \n    foreach my $letter (split(//, $message)) {\n        my $index = index($vowels,\
    \ $letter);\n        if ($index != -1) {\n            $new_message .= substr($alphabet,\
    \ $index + 1, 1);\n        }\n        else {\n            $new_message .= $letter;\n\
    \        }\n    }\n    \n    return $new_message;\n}", "    my $vowels = \"aeiou\"\
    ;\n    my $letters = \"abcdefghijklmnopqrstuvwxyz\";\n    my $encoded = \"\";\n\
    \    my $index = 0;\n    my $vowel_index = 0;\n    my $letter_index = 0;\n   \
    \ my $vowel_letter = \"\";\n    my $letter_letter = \"\";\n    my $vowel_letter_2\
    \ = \"\";\n    my $letter_letter_2 = \"\";\n    my $vowel_letter_3 = \"\";\n \
    \   my $letter_letter_3 = \"\";\n    my $vowel_letter_4 = \"\";\n    my $letter_letter_4\
    \ = \"\";\n    my $vowel_letter_5 = \"\";\n    my $letter_letter_5 = \"\";\n \
    \   my $vowel_letter_6 = \"\";\n    my $letter_letter_6 = \"\";\n    my $vowel_letter_7\
    \ = \"\";\n    my $letter_letter_7 = \"\";\n    my $vowel_letter_8 = \"\";\n \
    \   my $letter_letter_8 = \"\";\n    my $vowel_letter_9 = \"\";\n    my $letter_letter_9\
    \ = \"\";\n    my $vowel_letter_10 = \"\";\n    my $letter_letter_10 = \"\";\n\
    \    my $vowel_letter_11 = \"\";\n    my $letter_letter_11 = \"\";\n    my $vowel_letter_12\
    \ = \"\";\n    my $letter_letter_12 = \"\";\n    my $vowel_letter_13 = \"\";\n\
    \    my $letter_letter_13 = \"\";\n    my $vowel_letter_14 = \"\";\n    my $letter_letter_14\
    \ = \"\";\n    my $vowel_letter_15 = \"\";\n    my $letter_letter_15 = \"\";\n\
    \    my $vowel_letter_16 = \"\";\n    my $letter_letter_16 = \"\";\n    my $vowel_letter_17\
    \ = \"\";\n    my $letter_letter_17 = \"\";\n    my $vowel_letter_18 = \"\";\n\
    \    my $letter_letter_18 = \"\";\n    my $vowel_letter_19 = \"\";\n    my $letter_letter_19\
    \ = \"\";\n    my $vowel_letter_20 = \"\";\n    my $letter_letter_20 = \"\";\n\
    \    my $vowel_letter_21 = \"\";\n    my $letter_letter_21 = \"\";\n    my $vowel_letter_22\
    \ = \"\";\n    my $letter_letter_22 = \"\";\n    my $vowel_letter_23 = \"\";\n\
    \    my $letter_letter_23 = \"\";\n    my $vowel_letter_24 = \"\";\n    my $letter_letter_24\
    \ = \"\";\n    my $vowel_letter_25 = \"\";\n    my $letter_letter_25 = \"\";\n\
    \    my $vowel_letter_26 = \"\";\n    my $letter_letter_26 = \"\";\n    my $vowel_letter_27\
    \ = \"\";\n    my $letter_letter_27 = \"\";\n    my $vowel_letter_28 = \"\";\n\
    \    my $letter_letter_28 = \"\";\n    my $vowel_letter_29 = \"\";\n    my $letter_letter_29\
    \ = \"\";\n    my $vowel_letter_30 = \"\";\n    my $letter_letter_30 = \"\";\n\
    \    my $vowel_letter_31 = \"\";\n    my $letter_letter_3", "    my $alphabet\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $vowels = \"AEIOU\";\n    my $new_message\
    \ = \"\";\n    \n    foreach my $letter (split //, $message) {\n        if ($letter\
    \ =~ /[AEIOU]/) {\n            $new_message .= $letter;\n        }\n        else\
    \ {\n            $new_message .= $alphabet[$alphabet =~ /(?<!^)(?!$)([AEIOU])(?!$)/];\n\
    \        }\n    }\n    \n    return $new_message;\n}", "    my $alphabet = \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $vowels = \"AEIOU\";\n    my $new = \"\"\
    ;\n    \n    foreach my $letter (split //, $message) {\n        my $pos = index($alphabet,\
    \ $letter);\n        if ($pos > -1) {\n            my $vowel_pos = $pos + 1;\n\
    \            my $vowel_letter = $alphabet->[$vowel_pos];\n            my $new_letter\
    \ = $alphabet->[$pos];\n            $new .= $new_letter if ($new_letter ne $vowel_letter);\n\
    \        }\n    }\n    return $new;\n}", "    my $message = $message;\n    my\
    \ $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $vowels = \"aeiou\";\n \
    \   my $vowels_2 = \"AEIOU\";\n    my $vowels_3 = \"AEIOUaeiou\";\n    my $vowels_4\
    \ = \"AEIOUaeiouAEIOU\";\n    my $vowels_5 = \"AEIOUaeiouAEIOUaeiou\";\n    my\
    \ $vowels_6 = \"AEIOUaeiouAEIOUaeiouAEIOU\";\n    my $vowels_7 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    my $vowels_8 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\";\n    my $vowels_9\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n    my $vowels_10 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    my $vowels_11 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    my $vowels_12 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    my $vowels_13 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    my $vowels_14 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    my $vowels_15 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    my $vowels_16 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    my $vowels_17 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    my $vowels_18 = \"AEIO", "    $message =~ tr/A-Z/a-z/;\n    $message =~\
    \ s/[aeiou]/[AEIOU]/g;\n    $message =~ s/[AEIOU]/[aeiou]/g;\n    return $message;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `tr/A-Z/a-z/` replaces\
    \ every uppercase letter with lowercase letters. `s/[aeiou]/[AEIOU]/g` replaces\
    \ every vowel with itself. `s/[AEIOU]/[aeiou]/g` replaces every vowel with itself.\
    \ `tr/A-Z/a-z/` replaces every uppercase letter with lowercase letters. `s/[aeiou]/[AEIOU]/g`\
    \ replaces every vowel with itself. `s/[AEIOU]/[aeiou]/g` replaces every vowel\
    \ with itself.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed it by\
    \ adding `tr/A-Z/a-z/;` before `s/[aeiou]/[AEIOU]/g;`. And `tr/A-Z/a-z/;` before\
    \ `s/[AEIOU]/[aeiou]/g;`. That should do it.\n<|/ c |>\n<| c |>\nThanks for your\
    \ help. I appreciate it.\n<|/ c |>\n<| a |>\n<code>", "    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $vowels = \"aeiou\";\n    my $result = '';\n    \n    foreach my $letter\
    \ (split //, $message) {\n        my $index = index($alphabet, $letter);\n   \
    \     if ($index != -1) {\n            $letter = $alphabet[$index + 1];\n    \
    \    }\n        \n        foreach my $vowel (split //, $vowels) {\n          \
    \  my $index = index($vowels, $vowel);\n            if ($index != -1) {\n    \
    \            $vowel = $vowels[$index + 1];\n            }\n            \n    \
    \        $result .= $letter;\n        }\n    }\n    \n    return $result;\n}",
  "    my $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $vowels = \"AEIOU\"\
    ;\n    my $new_message = \"\";\n    \n    foreach my $letter (split //, $message)\
    \ {\n        my $index = index($alphabet, $letter);\n        if ($index >= 0)\
    \ {\n            $new_message .= $alphabet[$index + 1];\n        }\n    }\n  \
    \  \n    foreach my $letter (split //, $message) {\n        my $index = index($vowels,\
    \ $letter);\n        if ($index >= 0) {\n            $new_message .= $alphabet[$index\
    \ + 2];\n        }\n    }\n    \n    return $new_message;\n}", "    my $alphabet\
    \ = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my $vowels =\
    \ \"aeiou\";\n    my $new_message = \"\";\n    my $i = 0;\n    my $j = 0;\n  \
    \  my $k = 0;\n    my $vowel_count = 0;\n    my $letter;\n    my $vowel;\n   \
    \ foreach $letter (split(//, $message)) {\n        if ($letter eq \"a\") {\n \
    \           $new_message .= $alphabet[$j];\n            $j++;\n        } elsif\
    \ ($letter eq \"e\") {\n            $new_message .= $alphabet[$j + 1];\n     \
    \       $j++;\n        } elsif ($letter eq \"i\") {\n            $new_message\
    \ .= $alphabet[$j + 1];\n            $j++;\n        } elsif ($letter eq \"o\"\
    ) {\n            $new_message .= $alphabet[$j + 1];\n            $j++;\n     \
    \   } elsif ($letter eq \"u\") {\n            $new_message .= $alphabet[$j + 1];\n\
    \            $j++;\n        } elsif ($letter eq \"y\") {\n            $new_message\
    \ .= $alphabet[$j + 1];\n            $j++;\n        } elsif ($letter eq \"a\"\
    ) {\n            $new_message .= $alphabet[$j + 1];\n            $j++;\n     \
    \   } elsif ($letter eq \"e\") {\n            $new_message .= $alphabet[$j + 1];\n\
    \            $j++;\n        } elsif ($letter eq \"i\") {\n            $new_message\
    \ .= $alphabet[$j + 1];\n            $j++;\n        } elsif ($letter eq \"o\"\
    ) {\n            $new_message .= $alphabet[$j + 1];\n            $j++;\n     \
    \   } elsif ($letter eq \"u\") {\n            $new_message .= $alphabet[$j + 1];\n\
    \            $j++;\n        } elsif ($letter eq \"y\") {\n            $new_message\
    \ .= $alphabet[$j + 1];\n            $j++;\n        } elsif ($letter eq \"a\"\
    ) {\n            $new_message .= $alphabet[$j + 1];\n            $j++;\n     \
    \   } elsif ($letter eq \"e\") {\n            $new_message .= $alphabet[$j + 1];\n\
    \            $j++;\n        } elsif ($letter eq \"i\") {\n            $new_message\
    \ .= $alphabet[$j + 1];\n            $j++;\n        } elsif ($letter eq \"o\"\
    ) {\n            $new_message .= $alphabet[$j", "    my $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    my $vowels = \"AEIOU\";\n    my $new_message = \"\";\n    \n    foreach\
    \ my $letter (split //, $message) {\n        my $index = index($alphabet, $letter);\n\
    \        if ($index != -1) {\n            $new_message .= substr($alphabet, $index,\
    \ 1);\n        } else {\n            $new_message .= $letter;\n        }\n   \
    \ }\n    \n    foreach my $vowel (split //, $vowels) {\n        $new_message =~\
    \ s/$vowel/$alphabet[$alphabet =~ tr/AEIOU/AEIOU/r]/g;\n    }\n    \n    return\
    \ $new_message;\n}", "    \n    # Write your code here\n    \n    return $message;\n\
    }", "    my $alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $vowels = \"AEIOU\"\
    ;\n    my $new_message = \"\";\n    \n    foreach my $letter (split //, $message)\
    \ {\n        my $index = index($alphabet, $letter);\n        if ($index != -1)\
    \ {\n            my $vowel_index = index($vowels, $letter);\n            if ($vowel_index\
    \ != -1) {\n                $new_message .= substr($alphabet, $index, 1) . substr($alphabet,\
    \ $vowel_index + 2, 1);\n            } else {\n                $new_message .=\
    \ substr($alphabet, $index, 1);\n            }\n        } else {\n           \
    \ $new_message .= $letter;\n        }\n    }\n    return $new_message;\n}", " \
    \   my $message2 = \"\";\n    my $vowels = \"aeiouAEIOU\";\n    my $letters =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    my $vowels2;\n    my $letters2;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n\
    \    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my\
    \ $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n\
    \    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n\
    \    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my\
    \ $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n\
    \    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n\
    \    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my\
    \ $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n\
    \    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $o;\n\
    \    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n    my\
    \ $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my $b;\n\
    \    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n    my\
    \ $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my $",
  "    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $vowels = \"aeiou\"\
    ;\n    my $new_message = \"\";\n    \n    foreach my $letter (split //, $message)\
    \ {\n        my $index = index($alphabet, $letter);\n        if ($index != -1)\
    \ {\n            my $vowel_index = index($vowels, $letter);\n            if ($vowel_index\
    \ != -1) {\n                $new_message .= substr($alphabet, $vowel_index + 2,\
    \ 1) . $letter;\n            } else {\n                $new_message .= substr($alphabet,\
    \ $index + 2, 1) . $letter;\n            }\n        } else {\n            $new_message\
    \ .= $letter;\n        }\n    }\n    return $new_message;\n}", "    my $alphabet\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    my $vowels = \"AEIOU\";\n    my $new_message\
    \ = \"\";\n    \n    foreach my $letter (split //, $message) {\n        my $pos\
    \ = $alphabet =~ tr/AEIOU/AEIOU/;\n        $new_message .= $alphabet =~ tr/AEIOU/AEIOU/;\n\
    \        $new_message .= substr($alphabet, $pos + 1, 1) if $pos > 0;\n       \
    \ $new_message .= $letter;\n    }\n    return $new_message;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for your answer. Your code works perfectly for\
    \ me. I just had to change `my $pos = $alphabet =~ tr/AEIOU/AEIOU/;` to `my $pos\
    \ = $alphabet =~ tr/AEIOU/AEIOU/;` and it worked perfectly. Thanks again!\n<|/\
    \ c |>\n<| c |>\nOops, sorry. I missed that one. Thanks for pointing it out. I've\
    \ fixed the code in the answer.\n<|/ c |>\n<| a tags=perl,regex |>\n<code>\nuse\
    \ utf8;\nuse strict;\nuse warnings;", "    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $vowels = \"aeiou\";\n    my $new_message = \"\";\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $vowel_found = 0;\n    my $letter_found\
    \ = 0;\n    my $letter;\n    my $vowel;\n    my $new_letter;\n    foreach $letter\
    \ (split //, $message) {\n        $letter_found = 0;\n        $vowel_found = 0;\n\
    \        $new_letter = \"\";\n        foreach $vowel (split //, $vowels) {\n \
    \           $new_letter .= $letter;\n            $letter_found = 1;\n        \
    \    foreach $new_letter (split //, $alphabet) {\n                $new_letter\
    \ .= $new_letter;\n                $letter_found = 1;\n            }\n       \
    \ }\n        $new_letter .= $letter;\n        $letter_found = 1;\n        foreach\
    \ $new_letter (split //, $alphabet) {\n            $new_letter .= $new_letter;\n\
    \            $letter_found = 1;\n        }\n        $new_letter .= $letter;\n\
    \        $letter_found = 1;\n        foreach $new_letter (split //, $alphabet)\
    \ {\n            $new_letter .= $new_letter;\n            $letter_found = 1;\n\
    \        }\n        $new_letter .= $letter;\n        $letter_found = 1;\n    \
    \    foreach $new_letter (split //, $alphabet) {\n            $new_letter .= $new_letter;\n\
    \            $letter_found = 1;\n        }\n        $new_letter .= $letter;\n\
    \        $letter_found = 1;\n        foreach $new_letter (split //, $alphabet)\
    \ {\n            $new_letter .= $new_letter;\n            $letter_found = 1;\n\
    \        }\n        $new_letter .= $letter;\n        $letter_found = 1;\n    \
    \    foreach $new_letter (split //, $alphabet) {\n            $new_letter .= $new_letter;\n\
    \            $letter_found = 1;\n        }\n        $new_letter .= $letter;\n\
    \        $letter_found = 1;\n        foreach $new_letter (split //, $alphabet)\
    \ {\n            $new_letter .= $new_letter;\n            $letter_found = 1;\n\
    \        }\n        $new_letter .= $letter;\n        $letter_found = 1;\n    \
    \    foreach $new_letter (split //, $alphabet) {\n            $new_letter .= $new_letter;\n\
    \            $letter_found = 1;\n        }\n        $new_letter .= $letter;\n\
    \        $letter_found = 1;\n        foreach $new_letter (split //, $alphabet)\
    \ {\n            $new_letter .= $new_letter;\n            $letter_found = 1;\n\
    \        }\n", "    my $message = $message;\n    my $vowels = \"aeiou\";\n   \
    \ my $letters = \"abcdefghijklmnopqrstuvwxyz\";\n    my $vowels_pos = 0;\n   \
    \ my $letters_pos = 0;\n    my $letters_pos_2 = 1;\n    my $letters_pos_3 = 2;\n\
    \    my $letters_pos_4 = 3;\n    my $letters_pos_5 = 4;\n    my $letters_pos_6\
    \ = 6;\n    my $letters_pos_7 = 7;\n    my $letters_pos_8 = 8;\n    my $letters_pos_9\
    \ = 9;\n    my $letters_pos_10 = 10;\n    my $letters_pos_11 = 11;\n    my $letters_pos_12\
    \ = 12;\n    my $letters_pos_13 = 13;\n    my $letters_pos_14 = 14;\n    my $letters_pos_15\
    \ = 15;\n    my $letters_pos_16 = 16;\n    my $letters_pos_17 = 17;\n    my $letters_pos_18\
    \ = 18;\n    my $letters_pos_19 = 19;\n    my $letters_pos_20 = 20;\n    my $letters_pos_21\
    \ = 21;\n    my $letters_pos_22 = 22;\n    my $letters_pos_23 = 23;\n    my $letters_pos_24\
    \ = 24;\n    my $letters_pos_25 = 25;\n    my $letters_pos_26 = 26;\n    my $letters_pos_27\
    \ = 27;\n    my $letters_pos_28 = 28;\n    my $letters_pos_29 = 29;\n    my $letters_pos_30\
    \ = 30;\n    my $letters_pos_31 = 31;\n    my $letters_pos_32 = 32;\n    my $letters_pos_33\
    \ = 33;\n    my $letters_pos_34 = 34;\n    my $letters_pos_35 = 35;\n    my $letters_pos_36\
    \ = 36;\n    my $letters_pos_37 = 37;\n    my $letters_pos_38 = 38;\n    my $letters_pos_39\
    \ = 39;\n    my $letters_pos_40 = 40;\n    my $letters_pos_41 = 41;\n    my $letters_pos_42\
    \ = 42;\n    my $letters_pos_43 = 43;\n    my $letters_pos_44 = 44;\n    my $letters_pos_45\
    \ = 45;\n    my $letters_pos_46 = 46;\n    my $letters_pos_47 = 47;\n    my $letters_pos_48\
    \ = 48;\n    my $letters_pos_49 = 49;\n    my $letters_pos_50 = 50;\n    my $letters_pos_51\
    \ = 51;\n    my $letters_pos_52 = 52;\n    my $", "    \n    my @vowels = qw(a\
    \ e i o u);\n    \n    my @new_message = ();\n    \n    foreach my $letter (split(//,\
    \ $message)) {\n        my $new_letter;\n        if ($letter =~ /[aeiou]/) {\n\
    \            $new_letter = $letter;\n        } elsif ($letter =~ /[aeiou]/) {\n\
    \            $new_letter = substr($letter, 2, 1);\n        } else {\n        \
    \    $new_letter = substr($letter, 0, 1);\n        }\n        push(@new_message,\
    \ $new_letter);\n    }\n    \n    return join(\"\", @new_message);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
