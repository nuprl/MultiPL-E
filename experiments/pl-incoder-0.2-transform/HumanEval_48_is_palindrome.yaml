name: HumanEval_48_is_palindrome
language: pl
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome(\"\")\n# 1\n\
  # >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"\
  zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $len = length($text);\n    my $i = 0;\n    my $j = $len-1;\n\
    \    my $flag = 0;\n    while($i < $len && $j < $len) {\n        if($text[$i]\
    \ eq $text[$j]) {\n            $i++;\n            $j--;\n            $flag = 1;\n\
    \        }\n        elsif($text[$i] ne $text[$j]) {\n            $flag = 0;\n\
    \        }\n        elsif($i == $j) {\n            $flag = 0;\n        }\n   \
    \     elsif($i == $j) {\n            $flag = 1;\n        }\n        elsif($i ==\
    \ $j+1) {\n            $j--;\n        }\n        elsif($j == $i-1) {\n       \
    \     $i++;\n        }\n    }\n    return $flag;\n}", "    my $len = length($text);\n\
    \    my $i = 0;\n    my $j = $len-1;\n    my $flag = 0;\n    my $is_palindrome\
    \ = 1;\n    while($i < $len && $j < $len) {\n        if($text[$i] != $text[$j])\
    \ {\n            $flag = 1;\n            last;\n        }\n        $i++;\n   \
    \     $j--;\n    }\n    if($flag) {\n        $is_palindrome = 0;\n    }\n    return\
    \ $is_palindrome;\n}", "    $text =~ tr/a-z/A-Z/;\n    $text =~ tr/A-Z/a-z/;\n\
    \    return $text eq $text ? 1 : 0;\n}", "    my $len = length($text);\n    my\
    \ $i = 0;\n    my $j = $len-1;\n    my $is_palindrome = 1;\n    while($i < $len\
    \ && $j < $len) {\n        if($text[$i] != $text[$j]) {\n            $is_palindrome\
    \ = 0;\n            last;\n        }\n        $i++;\n        $j--;\n    }\n  \
    \  return $is_palindrome;\n}", "    my $len = length($text);\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    my $flag = 0;\n    my $palindrome = \"\";\n    \n\
    \    while ($i < $len && $j < $len) {\n        if ($text eq substr($text, $i,\
    \ $j)) {\n            $flag = 1;\n            $palindrome .= $text;\n        \
    \    $i++;\n            $j--;\n        }\n        elsif ($text ne substr($text,\
    \ $i, $j)) {\n            $flag = 0;\n        }\n        elsif ($i == $j) {\n\
    \            $flag = 0;\n        }\n        elsif ($i == $len - 1) {\n       \
    \     $flag = 0;\n        }\n        elsif ($j == $len - 1) {\n            $flag\
    \ = 0;\n        }\n        elsif ($i == $j) {\n            $flag = 0;\n      \
    \  }\n        elsif ($j == $len - 1) {\n            $flag = 0;\n        }\n  \
    \      elsif ($i == $j) {\n            $flag = 0;\n        }\n        elsif ($j\
    \ == $len - 1) {\n            $flag = 0;\n        }\n        elsif ($i == $j)\
    \ {\n            $flag = 0;\n        }\n        elsif ($j == $len - 1) {\n   \
    \         $flag = 0;\n        }\n        elsif ($i == $j) {\n            $flag\
    \ = 0;\n        }\n        elsif ($j == $len - 1) {\n            $flag = 0;\n\
    \        }\n        elsif ($i == $j) {\n            $flag = 0;\n        }\n  \
    \      elsif ($j == $len - 1) {\n            $flag = 0;\n        }\n        elsif\
    \ ($i == $j) {\n            $flag = 0;\n        }\n        elsif ($j == $len -\
    \ 1) {\n            $flag = 0;\n        }\n        elsif ($i == $j) {\n      \
    \      $flag = 0;\n        }\n        elsif ($j == $len - 1) {\n            $flag\
    \ = 0;\n        }\n        elsif ($i == $j) {\n            $flag = 0;\n      \
    \  }\n        elsif ($j == $len - 1) {\n            $flag = 0;\n        }\n  \
    \      elsif ($i == $j) {\n            $flag = 0;\n        }\n        elsif ($j\
    \ == $len - 1) {\n            $flag = 0;\n        }\n        elsif ($i == $j)\
    \ {\n            $flag = 0;\n        }\n        elsif ($j == $len - 1) {\n   \
    \         $flag = 0;\n        }\n        elsif ($i == $j) {\n            $flag\
    \ = 0;\n        }\n        elsif ($j == $len - 1) {\n            $flag = 0;\n\
    \        }\n        elsif ($i == ", "    my $len = length($text);\n    my $i =\
    \ 0;\n    my $j = $len-1;\n    my $is_palindrome = 1;\n    while($i < $len &&\
    \ $j < $len) {\n        if($text[$i] != $text[$j]) {\n            $is_palindrome\
    \ = 0;\n            last;\n        }\n        $i++;\n        $j--;\n    }\n  \
    \  return $is_palindrome;\n}", "    $text =~ tr/A-Za-z//cd;\n    return $text\
    \ eq $text ? 1 : 0;\n}", "    return $text eq reverse $text;\n}", "    my $len\
    \ = length($text);\n    my $i = 0;\n    my $j = $len-1;\n    my $flag = 0;\n \
    \   while($i < $len && $j < $len) {\n        if($text[$i] eq $text[$j]) {\n  \
    \          $i++;\n            $j--;\n            $flag = 1;\n        }\n     \
    \   elsif($text[$i] ne $text[$j]) {\n            $flag = 0;\n        }\n     \
    \   elsif($i == $j) {\n            $flag = 0;\n        }\n        elsif($i ==\
    \ $j) {\n            $flag = 1;\n        }\n        elsif($i == $len) {\n    \
    \        $flag = 1;\n        }\n        elsif($j == $len) {\n            $flag\
    \ = 0;\n        }\n        elsif($i == $j) {\n            $flag = 0;\n       \
    \ }\n        elsif($i == $j) {\n            $flag = 1;\n        }\n        elsif($i\
    \ == $len) {\n            $flag = 1;\n        }\n        elsif($j == $len) {\n\
    \            $flag = 0;\n        }\n        elsif($i == $j) {\n            $flag\
    \ = 0;\n        }\n        elsif($i == $j) {\n            $flag = 1;\n       \
    \ }\n        elsif($i == $len) {\n            $flag = 1;\n        }\n        elsif($j\
    \ == $len) {\n            $flag = 0;\n        }\n        elsif($i == $j) {\n \
    \           $flag = 0;\n        }\n        elsif($i == $j) {\n            $flag\
    \ = 1;\n        }\n        elsif($i == $len) {\n            $flag = 1;\n     \
    \   }\n        elsif($j == $len) {\n            $flag = 0;\n        }\n      \
    \  elsif($i == $j) {\n            $flag = 0;\n        }\n        elsif($i == $j)\
    \ {\n            $flag = 1;\n        }\n        elsif($i == $len) {\n        \
    \    $flag = 1;\n        }\n        elsif($j == $len) {\n            $flag = 0;\n\
    \        }\n        elsif($i == $j) {\n            $flag = 0;\n        }\n   \
    \     elsif($i == $j) {\n            $flag = 1;\n        }\n        elsif($i ==\
    \ $len) {\n            $flag = 1;\n        }\n        elsif($j == $len) {\n  \
    \          $flag = 0;\n        }\n        elsif($i == $j) {\n            $flag\
    \ = 0;\n        }\n        elsif($i == $j) {\n            $flag = 1;\n       \
    \ }\n        elsif($i == $len) {\n            $flag = 1;\n        }\n        elsif($j\
    \ == $len) {\n            $flag = 0;\n        }\n        elsif($i == $j) {\n \
    \           $flag = 0;\n        }\n        ", "    my $len = length($text);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    my $flag = 0;\n    my $flag2 = 0;\n\
    \    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6 = 0;\n\
    \    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10 =\
    \ 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my $flag14\
    \ = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n    my\
    \ $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21 = 0;\n\
    \    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my $flag25\
    \ = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n    my\
    \ $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32 = 0;\n\
    \    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my $flag36\
    \ = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n    my\
    \ $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43 = 0;\n\
    \    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46 = 0;\n    my $flag47\
    \ = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n    my\
    \ $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54 = 0;\n\
    \    my $flag55 = 0;\n    my $flag56 = 0;\n    my $flag57 = 0;\n    my $flag58\
    \ = 0;\n    my $flag59 = 0;\n    my $flag60 = 0;\n    my $flag61 = 0;\n    my\
    \ $flag62 = 0;\n    my $flag63 = 0;\n    my $flag64 = 0;\n    my $flag65 = 0;\n\
    \    my $flag66 = 0;\n    my $flag67 = 0;\n    my $flag68 = 0;\n    my $flag69\
    \ = 0;\n    my $flag70 = 0;\n    my $flag71 = 0;\n    my $flag72 = 0;\n    my\
    \ $flag73 = 0;\n    my $flag74 = 0;\n    my $flag75 = 0;\n    my $flag76 = 0;\n\
    \    my $flag77 = 0;\n    my $flag78 = 0;\n    my $flag79 = 0;\n    my $flag80\
    \ = 0;\n    my $flag81 = 0;\n    my $flag82 = 0;\n    my $flag83 = 0;\n    ",
  "    my $len = length($text);\n    my $i = 0;\n    my $j = $len-1;\n    my $is_palindrome\
    \ = 1;\n    while($i < $len && $j < $len) {\n        if($text[$i] eq $text[$j])\
    \ {\n            $i++;\n            $j--;\n        } else {\n            $is_palindrome\
    \ = 0;\n        }\n    }\n    return $is_palindrome;\n}", "    $text =~ tr/a-z/A-Z/;\n\
    \    $text =~ tr/A-Z/a-z/;\n    return $text eq $text ? 1 : 0;\n}", "    my $len\
    \ = length($text);\n    my $i = 0;\n    my $j = $len-1;\n    my $flag = 0;\n \
    \   while($i < $len && $j < $len) {\n        if($text[$i] != $text[$j]) {\n  \
    \          $flag = 1;\n            last;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return $flag;\n}", "    $text =~ tr/a-z/A-Z/;\n    $text =~ tr/A-Z/a-z/;\n\
    \    $text =~ tr/A-Za-z/A-Za-z/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n\
    \    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text\
    \ =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n\
    \    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text\
    \ =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n\
    \    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text\
    \ =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n\
    \    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text\
    \ =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n\
    \    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text\
    \ =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n\
    \    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text\
    \ =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $text =~ tr/-/+/;\n    $", "    return\
    \ $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}", "    return\
    \ $text eq reverse $text ? 1 : 0;\n}", "    $text =~ tr/a-z/A-Z/;\n    $text =~\
    \ tr/A-Z/a-z/;\n    return $text eq $text ? 1 : 0;\n}", "    $text =~ tr/A-Za-z//cd;\n\
    \    return $text eq $text ? 1 : 0;\n}", "    my $len = length($text);\n    my\
    \ $i = 0;\n    my $j = $len - 1;\n    my $flag = 0;\n    my $is_palindrome = 1;\n\
    \    \n    while ($i < $len) {\n        if ($text[$i] != $text[$j]) {\n      \
    \      $flag = 1;\n            last;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    \n    if ($flag) {\n        $is_palindrome = 0;\n    }\n    \n   \
    \ return $is_palindrome;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
