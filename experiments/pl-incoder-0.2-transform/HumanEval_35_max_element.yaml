name: HumanEval_35_max_element
language: pl
prompt: "# Return maximum element in the list.\n# >>> max_element([1, 2, 3])\n# 3\n\
  # >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n\
  \        if(eq_deeply($candidate->([1, 2, 3]),3)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3,\
  \ 3, 9, 0, 124, 1, -10]),124)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $max = -1;\n    foreach my $x (@$l) {\n        $max = $x if\
    \ $x > $max;\n    }\n    return $max;\n}", "    my $max = -1;\n    foreach my\
    \ $x (@$l) {\n        if ($x > $max) {\n            $max = $x;\n        }\n  \
    \  }\n    return $max;\n}", "    my $max = -1;\n    my $maxi = 0;\n    for (my\
    \ $i = 0; $i < @$l; $i++) {\n        if ($l->[$i] > $max) {\n            $max\
    \ = $l->[$i];\n            $maxi = $i;\n        }\n    }\n    return $l->[$maxi];\n\
    }", "    my $max = -1;\n    my $maxi = 0;\n    foreach my $i (@$l) {\n       \
    \ if ($i > $max) {\n            $max = $i;\n            $maxi = $i;\n        }\n\
    \    }\n    return $maxi;\n}", "    my $max = -1;\n    my $max_el;\n    foreach\
    \ my $el (@$l) {\n        if ($el > $max) {\n            $max = $el;\n       \
    \     $max_el = $el;\n        }\n    }\n    return $max_el;\n}", "    my $max\
    \ = -1;\n    my $maxi = 0;\n    foreach my $i (@$l) {\n        if ($i > $max)\
    \ {\n            $max = $i;\n            $maxi = $i;\n        }\n    }\n    return\
    \ $maxi;\n}", "    my $max = -1;\n    my $maxi = 0;\n    for (my $i = 0; $i <\
    \ @$l; $i++) {\n        if ($l->[$i] > $max) {\n            $max = $l->[$i];\n\
    \            $maxi = $i;\n        }\n    }\n    return $l->[$maxi];\n}", "   \
    \ my $max = @$l > 0 ? $l->[-1] : 0;\n    foreach my $i (reverse @$l) {\n     \
    \   if ($i > $max) {\n            $max = $i;\n        }\n    }\n    return $max;\n\
    }", "    my $max = -1;\n    foreach my $elem (@$l) {\n        if ($elem > $max)\
    \ {\n            $max = $elem;\n        }\n    }\n    return $max;\n}", "    my\
    \ $max = $l->[0];\n    foreach my $i (1 .. $#$l) {\n        if ($l->[$i] > $max)\
    \ {\n            $max = $l->[$i];\n        }\n    }\n    return $max;\n}", " \
    \   my $max = -1;\n    my $maxi = 0;\n    foreach my $i (@$l) {\n        if ($i\
    \ > $max) {\n            $max = $i;\n            $maxi = $i;\n        }\n    }\n\
    \    return $maxi;\n}", "    my $max = $l->[0];\n    foreach my $i (1..$#$l) {\n\
    \        if ($l->[$i] > $max) {\n            $max = $l->[$i];\n        }\n   \
    \ }\n    return $max;\n}", "    my $max = -1;\n    foreach my $x (@$l) {\n   \
    \     if ($x > $max) {\n            $max = $x;\n        }\n    }\n    return $max;\n\
    }", "    my $max = $l->[0];\n    my $i = 0;\n    foreach my $el (@$l) {\n    \
    \    if ($el > $max) {\n            $max = $el;\n        }\n        $i++;\n  \
    \  }\n    return $max;\n}", "    my $max = -1;\n    my $max_elem;\n    foreach\
    \ my $elem (@$l) {\n        if ($elem > $max) {\n            $max = $elem;\n \
    \           $max_elem = $elem;\n        } elsif ($elem == $max) {\n          \
    \  $max_elem = $elem if $elem > $max_elem;\n        }\n    }\n    return $max_elem;\n\
    }", "    my $max = -1;\n    my $maxi = 0;\n    for (my $i = 0; $i < @$l; $i++)\
    \ {\n        if ($l->[$i] > $max) {\n            $max = $l->[$i];\n          \
    \  $maxi = $i;\n        }\n    }\n    return $l->[$maxi];\n}", "    my $max =\
    \ -1;\n    my $maxi = 0;\n    foreach my $i (@$l) {\n        if ($i > $max) {\n\
    \            $max = $i;\n            $maxi = $i;\n        }\n    }\n    return\
    \ $maxi;\n}", "    my $max = $l->[0];\n    foreach my $i (1..$#$l) {\n       \
    \ if ($l->[$i] > $max) {\n            $max = $l->[$i];\n        }\n    }\n   \
    \ return $max;\n}", "    my $max = -1;\n    my $maxel;\n    foreach my $el (@$l)\
    \ {\n        if ($el > $max) {\n            $max = $el;\n            $maxel =\
    \ $el;\n        }\n    }\n    return $maxel;\n}", "    my $max = -1;\n    foreach\
    \ my $x (@$l) {\n        if ($x > $max) {\n            $max = $x;\n        }\n\
    \    }\n    return $max;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
