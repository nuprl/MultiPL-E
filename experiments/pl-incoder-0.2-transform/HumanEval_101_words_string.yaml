name: HumanEval_101_words_string
language: pl
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return an array of the words.\n\
  # For example:\n# >>> words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\",\
  \ \"name\", \"is\", \"John\"]\n# >>> words_string(\"One, two, three, four, five,\
  \ six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nsub words_string\
  \ {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n\
  \        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"\
  ),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hi, my name\"),[\"Hi\", \"my\", \"name\"])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three,\
  \ four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ahmed     , gamal\"),[\"ahmed\", \"gamal\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my(@words) = ();\n    foreach my $word (split /,/, $s) {\n    \
    \    push(@words, $word);\n    }\n    return @words;\n}", "    my(@words) = ();\n\
    \    my($word);\n    my($i);", "    my(@words) = ();\n    my($word);\n    my($i);\n\
    \    my($j);\n    my($k);\n    my($n);\n    my($l);\n    my($last);\n    my($last2);\n\
    \    my($last3);\n    my($last4);\n    my($last5);\n    my($last6);\n    my($last7);\n\
    \    my($last8);\n    my($last9);\n    my($last10);\n    my($last11);\n    my($last12);\n\
    \    my($last13);\n    my($last14);\n    my($last15);\n    my($last16);\n    my($last17);\n\
    \    my($last18);\n    my($last19);\n    my($last20);\n    my($last21);\n    my($last22);\n\
    \    my($last23);\n    my($last24);\n    my($last25);\n    my($last26);\n    my($last27);\n\
    \    my($last28);\n    my($last29);\n    my($last30);\n    my($last31);\n    my($last32);\n\
    \    my($last33);\n    my($last34);\n    my($last35);\n    my($last36);\n    my($last37);\n\
    \    my($last38);\n    my($last39);\n    my($last40);\n    my($last41);\n    my($last42);\n\
    \    my($last43);\n    my($last44);\n    my($last45);\n    my($last46);\n    my($last47);\n\
    \    my($last48);\n    my($last49);\n    my($last50);\n    my($last51);\n    my($last52);\n\
    \    my($last53);\n    my($last54);\n    my($last55);\n    my($last56);\n    my($last57);\n\
    \    my($last58);\n    my($last59);\n    my($last60);\n    my($last61);\n    my($last62);\n\
    \    my($last63);\n    my($last64);\n    my($last65);\n    my($last66);\n    my($last67);\n\
    \    my($last68);\n    my($last69);\n    my($last70);\n    m", "    my @words\
    \ = ();\n    my $word = \"\";\n    my $inWord = 0;\n    foreach my $c (split(/,/,\
    \ $s)) {\n        if ($c eq \"\") {\n            $inWord = 0;\n        }\n   \
    \     elsif ($c eq \" \") {\n            $inWord = 1;\n        }\n        elsif\
    \ ($inWord) {\n            $word .= $c;\n        }\n        elsif ($c eq \",\"\
    ) {\n            push(@words, $word);\n            $word = \"\";\n        }\n\
    \    }\n    push(@words, $word);\n    return @words;\n}", "    my(@words) = ();\n\
    \    foreach my $word (split /,/, $s) {\n        push(@words, $word);\n    }\n\
    \    return @words;\n}", "    my(@words) = ();\n    chomp($s);\n    foreach my\
    \ $word (split /,/, $s) {\n        push(@words, $word);\n    }\n    return @words;\n\
    }", "    my(@words) = ();\n    my($word);\n    my($i);", "    my @words = split\
    \ /,/, $s;\n    return @words;\n}", "    my(@words) = ();\n    my($word);\n  \
    \  my($i);\n    my($j);\n    my($k);\n    my($l);\n    my($n);\n    my($o);\n\
    \    my($p);\n    my($q);\n    my($r);\n    my($s);\n    my($t);\n    my($u);\n\
    \    my($v);\n    my($w);\n    my($x);\n    my($y);\n    my($z);\n    my($A);\n\
    \    my($B);\n    my($C);\n    my($D);\n    my($E);\n    my($F);\n    my($G);\n\
    \    my($H);\n    my($I);\n    my($J);\n    my($K);\n    my($L);\n    my($M);\n\
    \    my($N);\n    my($O);\n    my($P);\n    my($Q);\n    my($R);\n    my($S);\n\
    \    my($T);\n    my($U);\n    my($V);\n    my($W);\n    my($X);\n    my($Y);\n\
    \    my($Z);\n    my($a1);\n    my($a2);\n    my($a3);\n    my($a4);\n    my($a5);\n\
    \    my($a6);\n    my($a7);\n    my($a8);\n    my($a9);\n    my($a10);\n    my($a11);\n\
    \    my($a12);\n    my($a13);\n    my($a14);\n    my($a15);\n    my($a16);\n \
    \   my($a17);\n    my($a18);\n    my($a19);\n    my($a20);\n    my($a21);\n  \
    \  my($a22);\n    my($a23);\n    my($a24);\n    my($a25);\n    my($a26);\n   \
    \ my($a27);\n    my($a28);\n    my($a29);\n    my($a30);\n    my($a31);\n    my($a32);\n\
    \    my($a33);\n    my($a34);\n    my($a35);\n    my($a36);\n    my($a37);\n \
    \   my($a38);\n    my($a39);\n    m", "    my(@words) = ();\n    \n    foreach\
    \ my $word (split(/,/, $s)) {\n        push(@words, $word);\n    }\n    \n   \
    \ return @words;\n}", "    my(@words) = ();\n    my @words = split /[,\\s]/, $s;\n\
    \    return @words;\n}", "    my @words = ();\n    my $word;\n    my $last = 0;\n\
    \    my $i = 0;\n    my $len = length($s);\n    while ($i < $len) {\n        $word\
    \ = $s[$i];\n        $word =~ s/^\\s+//;\n        $word =~ s/\\s+$//;\n      \
    \  if ($word eq \"\") {\n            $last = $i;\n        }\n        elsif ($word\
    \ =~ /\\s/) {\n            push(@words, $s[$last..$i-1]);\n            $last =\
    \ $i;\n        }\n        $i++;\n    }\n    push(@words, $s[$last..$i-1]);\n \
    \   return @words;\n}", "    my(@words) = ();\n    foreach my $word (split(/,/,\
    \ $s)) {\n        push(@words, $word);\n    }\n    return @words;\n}", "    my(@words)\
    \ = ();\n    foreach my $word (split /,/, $s) {\n        push(@words, $word);\n\
    \    }\n    return @words;\n}", "    my @words = split /[,\\s]/, $s;\n    return\
    \ @words;\n}", "    my(@words) = ();\n    my $i = 0;\n    while ($i < length($s))\
    \ {\n        my $word = \"\";\n        while ($i < length($s) && $s[i] !~ /\\\
    s/) {\n            $word .= $s[i];\n            $i++;\n        }\n        push(@words,\
    \ $word);\n    }\n    return @words;\n}", "    my @words = split /[, ]+/, $s;\n\
    \    return @words;\n}", "    my @words = split /,/, $s;\n    return @words;\n\
    }", "    my @words = split /,/, $s;\n    return @words;\n}", "    my(@words) =\
    \ ();\n    my($word);\n    my($word_count);\n    my($word_index);\n    \n    foreach\
    \ $word (split /,/, $s) {\n        $word_count++;\n        $word_index = 0;\n\
    \        \n        foreach $word (split / /, $word) {\n            $words[$word_index++]\
    \ = $word;\n        }\n    }\n    \n    return @words;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
