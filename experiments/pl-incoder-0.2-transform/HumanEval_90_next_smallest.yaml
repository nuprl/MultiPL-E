name: HumanEval_90_next_smallest
language: pl
prompt: "# You are given a list of integers.\n# Write a function next_smallest() that\
  \ returns the 2nd smallest element of the list.\n# Return None if there is no such\
  \ element.\n# >>> next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest([5, 1,\
  \ 4, 3, 2])\n# 2\n# >>> next_smallest([])\n# undef\n# >>> next_smallest([1, 1])\n\
  # undef\nsub next_smallest {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4,\
  \ 3, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $min = $lst->[0];\n    my $min_index = 0;\n    my $index;\n\
    \    foreach $index (0 .. $#$lst) {\n        if ($lst->[$index] < $min) {\n  \
    \          $min = $lst->[$index];\n            $min_index = $index;\n        }\n\
    \    }\n    return $min unless $min_index;\n    return $lst->[$min_index + 1];\n\
    }", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $index = 1;\n  \
    \  my $found;\n    while($index < $#$lst) {\n        if($min > $lst->[$index])\
    \ {\n            $min = $lst->[$index];\n            $min_index = $index;\n  \
    \      }\n        $index++;\n    }\n    if($min_index) {\n        $found = $min;\n\
    \    } else {\n        $found = $lst->[-1];\n    }\n    return $found;\n}", " \
    \   my $smallest = $lst->[0];\n    my $index = 1;\n    my $found;\n    foreach\
    \ my $i (@$lst) {\n        if ($i < $smallest) {\n            $found = $i;\n \
    \           $smallest = $i;\n        }\n        elsif ($i == $smallest) {\n  \
    \          $index++;\n        }\n    }\n    return $found if $found;\n    return;\n\
    }", "    my $min = $lst[0];\n    my $min_index = 0;\n    my $index;\n    foreach\
    \ my $i (@$lst) {\n        if ($i < $min) {\n            $min = $i;\n        \
    \    $min_index = $i;\n        }\n    }\n    if ($min_index) {\n        $min_index++;\n\
    \    }\n    return $min_index;\n}", "    my $smallest = $lst->[0];\n    my $index\
    \ = 1;\n    foreach my $i (@$lst) {\n        if ($i < $smallest) {\n         \
    \   $smallest = $i;\n            $index = $i;\n        }\n    }\n    return $index;\n\
    }", "    my $min = @$lst > 1 ? $lst[1] : undef;\n    foreach my $i (@$lst) {\n\
    \        if ($i < $min) {\n            $min = $i;\n        }\n    }\n    return\
    \ $min;\n}", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $i = 1;\n\
    \    foreach my $num (@$lst) {\n        if ($num < $min) {\n            $min =\
    \ $num;\n            $min_index = $i;\n        }\n        $i++;\n    }\n    return\
    \ $min if $min_index != 0;\n    return;\n}", "    my $min = $lst[0];\n    my $min_index\
    \ = 0;\n    my $i = 1;\n    my $found;\n    foreach my $item (@$lst) {\n     \
    \   if ($item < $min) {\n            $min = $item;\n            $min_index = $i;\n\
    \        }\n        $i++;\n    }\n    return $min if $min_index;\n    return;\n\
    }", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $i = 1;\n    my\
    \ $found;\n    foreach my $num (@$lst) {\n        if ($num < $min) {\n       \
    \     $min = $num;\n            $min_index = $i;\n        }\n        $i++;\n \
    \   }\n    return $min unless $found;\n    return $lst->[$min_index];\n}", " \
    \   my $smallest = $lst[0];\n    my $index = 1;\n    foreach my $i (@$lst) {\n\
    \        if ($i < $smallest) {\n            $smallest = $i;\n            $index\
    \ = $i;\n        }\n    }\n    return $smallest;\n}", "    my $smallest = undef;\n\
    \    my $index = 0;\n    my $found;\n    foreach my $item (@$lst) {\n        if\
    \ (defined $smallest) {\n            if ($item < $smallest) {\n              \
    \  $found = 1;\n                $smallest = $item;\n            }\n        } elsif\
    \ ($item < $smallest) {\n            $found = 1;\n            $smallest = $item;\n\
    \        }\n        $index++;\n    }\n    return $found ? $smallest : undef;\n\
    }", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $i;\n    for ($i\
    \ = 1; $i < @$lst; $i++) {\n        if ($lst->[$i] < $min) {\n            $min\
    \ = $lst->[$i];\n            $min_index = $i;\n        }\n    }\n    if ($min_index\
    \ == 0) {\n        return undef;\n    }\n    return $lst->[$min_index];\n}", " \
    \   my $min_value = $lst->[0];\n    my $min_index = 0;\n    my $index = 0;\n \
    \   my $found = 0;\n    foreach my $val (@$lst) {\n        if ($val < $min_value)\
    \ {\n            $min_value = $val;\n            $min_index = $index;\n      \
    \  }\n        $index++;\n        $found++;\n    }\n    return $found ? $min_value\
    \ : undef;\n}", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $index\
    \ = 0;\n    my $found;\n    foreach my $i (@$lst) {\n        if ($i < $min) {\n\
    \            $min = $i;\n            $min_index = $index;\n        }\n       \
    \ $index++;\n    }\n    if ($min_index) {\n        $found = $lst->[$min_index];\n\
    \    }\n    else {\n        $found = $min;\n    }\n    return $found;\n}", " \
    \   my $min = $lst->[0];\n    my $min_index = 0;\n    my $i;\n    for ($i = 1;\
    \ $i < @$lst; $i++) {\n        if ($lst->[$i] < $min) {\n            $min = $lst->[$i];\n\
    \            $min_index = $i;\n        }\n    }\n    return $min if $min_index;\n\
    \    return;\n}", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $i\
    \ = 1;\n    my $j = 0;\n    my $found;\n    foreach my $num (@$lst) {\n      \
    \  if ($num < $min) {\n            $min = $num;\n            $min_index = $i;\n\
    \        }\n        $i++;\n    }\n    if ($min_index) {\n        $found = $min;\n\
    \    } else {\n        $found = 0;\n    }\n    return $found;\n}", "    my $min\
    \ = $lst->[0];\n    my $min_index = 0;\n    my $min_value = $min;\n    my $i;\n\
    \    for ($i = 1; $i < @$lst; $i++) {\n        my $val = $lst->[$i];\n       \
    \ if ($val < $min_value) {\n            $min_value = $val;\n            $min_index\
    \ = $i;\n        }\n    }\n    if ($min_value == $min) {\n        return $min_value;\n\
    \    }\n    return $lst->[$min_index];\n}", "    my $min = $lst->[0];\n    my\
    \ $min_index = 0;\n    my $i = 1;\n    while($i < @$lst) {\n        if($min >\
    \ $lst->[$i]) {\n            $min = $lst->[$i];\n            $min_index = $i;\n\
    \        }\n        $i++;\n    }\n    return $min if $min_index;\n    return;\n\
    }", "    my $min = $lst->[0];\n    my $min_index = 0;\n    my $i;\n    for ($i\
    \ = 1; $i < @$lst; $i++) {\n        if ($lst->[$i] < $min) {\n            $min\
    \ = $lst->[$i];\n            $min_index = $i;\n        }\n    }\n    return $min\
    \ if $min_index;\n    return;\n}", "    my $min = @$lst > 1 ? $lst->[1] : undef;\n\
    \    my $index = 1;\n    foreach my $i (@$lst) {\n        if ($i < $min) {\n \
    \           $min = $i;\n            $index = $i;\n        }\n    }\n    return\
    \ $min;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
