name: HumanEval_124_valid_date
language: pl
prompt: "# You have to write a function which validates a given date string and\n\
  # returns True if the date is valid otherwise False.\n# The date is valid if all\
  \ of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2.\
  \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# >>> valid_date(\"03-11-2000\")\n# 1\n# >>> valid_date(\"\
  15-01-2012\")\n# \"\"\n# >>> valid_date(\"04-0-2040\")\n# \"\"\n# >>> valid_date(\"\
  06-04-2020\")\n# 1\n# >>> valid_date(\"06/04/2020\")\n# \"\"\nsub valid_date {\n\
  \    my($date) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n\
  \        if(eq_deeply($candidate->(\"03-11-2000\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  04-0-2040\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"06-04-2020\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  03-32-2011\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  06-06-2005\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"21-31-2000\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  04122003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"20030412\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  2003-04-12\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"04-2003\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $days;\n    my $months;\n    my $years;\n    my $day;\n    my\
    \ $month;\n    my $year;\n    my $days;\n    my $months;\n    my $years;\n   \
    \ my $day;\n    my $month;\n    my $year;\n    my $days;\n    my $months;\n  \
    \  my $years;\n    my $day;\n    my $month;\n    my $year;\n    my $days;\n  \
    \  my $months;\n    my $years;\n    my $day;\n    my $month;\n    my $year;\n\
    \    my $days;\n    my $months;\n    my $years;\n    my $day;\n    my $month;\n\
    \    my $year;\n    my $days;\n    my $months;\n    my $years;\n    my $day;\n\
    \    my $month;\n    my $year;\n    my $days;\n    my $months;\n    my $years;\n\
    \    my $day;\n    my $month;\n    my $year;\n    my $days;\n    my $months;\n\
    \    my $years;\n    my $day;\n    my $month;\n    my $year;\n    my $days;\n\
    \    my $months;\n    my $years;\n    my $day;\n    my $month;\n    my $year;\n\
    \    my $days;\n    my $months;\n    my $years;\n    my $day;\n    my $month;\n\
    \    my $year;\n    my $days;\n    my $months;\n    my $years;\n    my $day;\n\
    \    my $month;\n    my $year;\n    my $days;\n    my $months;\n    my $years;\n\
    \    my $day;\n    my $month;\n    my $year;\n    my $days;\n    my $months;\n\
    \    my $years;\n    my $day;\n    my $month;\n    my $year;\n    my $days;\n\
    \    my $months;\n    my $years;\n    my $day;\n    my $month;\n    my $year;\n\
    \    my $days;\n    my $months;\n    my $years;\n    my $day;\n    my $month;\n\
    \    my $year;\n    my $days;\n    my $months;\n    my $years;\n    my $day;\n\
    \    my $month;\n    my $year;\n    my $days;\n    my $months;\n    my $years;\n\
    \    my $day;\n    my $month;\n    my $year;\n    my $", "    return 1 if ($date\
    \ eq '');\n    my($days) = $date =~ m/(\\d+)-(\\d+)-(\\d+)/;\n    return 1 if\
    \ ($days < 1 || $days > 31);\n    my($months) = $date =~ m/(\\d+)-(\\d+)/;\n \
    \   return 1 if ($months < 1 || $months > 12);\n    my($year) = $date =~ m/(\\\
    d+)/;\n    return 1 if ($year < 2000 || $year > 2040);\n    return 1;\n}", " \
    \   my $valid_date = 1;\n    \n    if ($date ne \"\") {\n        $valid_date =\
    \ 0;\n        if ($date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/) {\n         \
    \   if ($3 > 12 || $3 < 1 || $2 > 31 || $2 < 1 || $1 > 31 || $1 < 1) {\n     \
    \           $valid_date = 0;\n            }\n        }\n    }\n    \n    return\
    \ $valid_date;\n}", "    chomp($date);\n    \n    # Empty date string\n    return\
    \ 1 if ($date eq \"\");\n    \n    # Invalid date string\n    return \"\" if (($date\
    \ =~ /^(0[1-9]|[12][0-9]|3[01])[\\-\\/](0[1-9]|1[012])[\\-\\/](19|20)\\d\\d$/)\
    \ == 0);\n    \n    # Invalid date string\n    return \"\" if (($date =~ /^(0[1-9]|[12][0-9]|3[01])[\\\
    -\\/](0[1-9]|1[012])[\\-\\/](19|20)\\d\\d$/) == 0);\n    \n    # Invalid date\
    \ string\n    return \"\" if (($date =~ /^(0[1-9]|[12][0-9]|3[01])[\\-\\/](0[1-9]|1[012])[\\\
    -\\/](19|20)\\d\\d$/) == 0);\n    \n    # Invalid date string\n    return \"\"\
    \ if (($date =~ /^(0[1-9]|[12][0-9]|3[01])[\\-\\/](0[1-9]|1[012])[\\-\\/](19|20)\\\
    d\\d$/) == 0);\n    \n    # Invalid date string\n    return \"\" if (($date =~\
    \ /^(0[1-9]|[12][0-9]|3[01])[\\-\\/](0[1-9]|1[012])[\\-\\/](19|20)\\d\\d$/) ==\
    \ 0);\n    \n    # Invalid date string\n    return \"\" if (($date =~ /^(0[1-9]|[12][0-9]|3[01])[\\\
    -\\/](0[1-9]|1[012])[\\-\\/](19|20)\\d\\d$/) == 0);\n    \n    # Invalid date\
    \ string\n    return \"\" if (($date =~ /^(0[1-9]|[12][0-9]|3[01])[\\-\\/](0[1-9]|1[012])[\\\
    -\\/](19|20)\\d\\d$/) == 0);\n    \n    # Invalid date string\n    return \"\"\
    \ if (($date =~ /^(0[1-9]|[12][0-9]|3[01])[\\-\\/](0[1-9]|1[012])[\\-\\/](19|20)\\\
    d\\d$/) == 0);\n    \n    # Invalid date string\n    return \"\" if (($date =~\
    \ /^(0[1-9]|[12][0-9]|3[01])[\\-\\/](0[1-9]|1[012])[\\-\\/](19|20)\\d\\d$/) ==\
    \ 0);\n    \n    # Invalid date string\n    return \"\" if (($date =~ /^(0[1-9]|[12][0-9]|3[01])[\\\
    -\\/](0[1-9]|1[012])[\\-\\/](19|20)\\d\\d$/) == 0);\n    \n    # Invalid date\
    \ string\n    return \"\" if (($date =~ /^(0[1-9]|[12][0-9]|3[01])[\\-\\/](0[1-9]|1[012])[\\\
    -\\/](19|20)", "    my $date_pattern = qr{^((0[1-9]|[12]\\d|3[01])[\\-](0[1-9]|1[012])[\\\
    -]\\d{4})$};\n    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;\n\
    \    my $date_match = qr/$date_pattern/;\n    my $date_match = qr/$date_pattern/;",
  "    chomp($date);\n    my ($day, $month, $year) = split(/\\-/, $date);\n    my\
    \ $days_valid = checkDays($month, $day, $year);\n    my $months_valid = checkMonths($month,\
    \ $year);\n    my $year_valid = checkYear($year);\n    return $days_valid && $months_valid\
    \ && $year_valid;\n}", "    return 1 if $date eq \"\";\n    my($days) = split\
    \ '-', $date;\n    return 1 if $days[0] eq \"\";\n    return 1 if $days[1] eq\
    \ \"\";\n    return 1 if $days[2] eq \"\";\n    return 1 if $days[0] eq \"01\"\
    \ or $days[0] eq \"02\" or $days[0] eq \"03\" or $days[0] eq \"04\" or $days[0]\
    \ eq \"05\" or $days[0] eq \"06\" or $days[0] eq \"07\" or $days[0] eq \"08\"\
    \ or $days[0] eq \"09\" or $days[0] eq \"10\" or $days[0] eq \"11\" or $days[0]\
    \ eq \"12\";\n    return 1 if $days[1] eq \"01\" or $days[1] eq \"02\" or $days[1]\
    \ eq \"03\" or $days[1] eq \"04\" or $days[1] eq \"05\" or $days[1] eq \"06\"\
    \ or $days[1] eq \"07\" or $days[1] eq \"08\" or $days[1] eq \"09\" or $days[1]\
    \ eq \"10\" or $days[1] eq \"11\" or $days[1] eq \"12\";\n    return 1 if $days[2]\
    \ eq \"01\" or $days[2] eq \"02\" or $days[2] eq \"03\" or $days[2] eq \"04\"\
    \ or $days[2] eq \"05\" or $days[2] eq \"06\" or $days[2] eq \"07\" or $days[2]\
    \ eq \"08\" or $days[2] eq \"09\" or $days[2] eq \"10\" or $days[2] eq \"11\"\
    \ or $days[2] eq \"12\";\n    return 1 if $days[0] eq \"01\" or $days[0] eq \"\
    02\" or $days[0] eq \"03\" or $days[0] eq \"04\" or $days[0] eq \"05\" or $days[0]\
    \ eq \"06\" or $days[0] eq \"07\" or $days[0] eq \"08\" or $days[0] eq \"09\"\
    \ or $days[0] eq \"10\" or $days[0] eq \"11\" or $days[0] eq \"12\" or $days[0]\
    \ eq \"13\" or $days[0] eq \"14\" or $days[0] eq \"15\" or $days[0] eq \"16\"\
    \ or $days[0] eq \"17\" or $days[0] eq \"18\" or $days[0] eq \"19\" or $days[0]\
    \ eq \"20\" or $days[0]", "    my $day;\n    my $month;\n    my $year;\n    my\
    \ $days;\n    my $months;\n    my $years;\n    my $days_string;\n    my $months_string;\n\
    \    my $years_string;\n    my $days_string_array;\n    my $months_string_array;\n\
    \    my $years_string_array;\n    my $days_string_array_length;\n    my $months_string_array_length;\n\
    \    my $years_string_array_length;\n    my $days_string_array_length_array;\n\
    \    my $months_string_array_length_array;\n    my $years_string_array_length_array;\n\
    \    my $days_string_array_length_array_length;\n    my $months_string_array_length_array_length;\n\
    \    my $years_string_array_length_array_length;\n    my $days_string_array_length_array_length_array;\n\
    \    my $months_string_array_length_array_length_array;\n    my $years_string_array_length_array_length_array;\n\
    \    my $days_string_array_length_array_length_array_length;\n    my $months_string_array_length_array_length_array_length;\n\
    \    my $years_string_array_length_array_length_array;\n    my $days_string_array_length_array_length_array_length_array;\n\
    \    my $months_string_array_length_array_length_array_length_array;\n    my $years_string_array_length_array_length_array_length_array;\n\
    \    my $days_string_array_length_array_length_array_length_array_length;\n  \
    \  my $months_string_array_length_array_length_array_length_array_length;\n  \
    \  my $years_string_array_length_array_length_array_length_array_length;\n   \
    \ my $days_string_array_length_array_length_array_length_array_length_array;\n\
    \    my $months_string_array_length_array_length_array_length_array_length_array;\n\
    \    my $years_string_array_length_array_length_array_length_array_length_array;\n\
    \    my $days_string_array_length_array_length_array_length_array_length_array_length;\n\
    \    my $months_string_array_length_array_length_array_length_array_length_array_length;\n\
    \    my $years_string_array_length_array_length_array_length_array_length_array;\n\
    \    my $days_string_array_length_array_length_array_length_array_length_array_length_array;\n\
    \    my $months_string_array_length_array_length_array_length_array_length_array_length_array;\n\
    \    my $years_string_array_length_array_length_array_length_array_length_array_length_array;\n\
    \    my $days_string_array_length_array_length_array_length_array_length_array_length_array_length;\n\
    \    my $months_string_array_length_array_length_array_length_array_length_array_length_array_length;\n\
    \    my $years_string_array_length_array_length_array_length_array_length_array_",
  "    my $days;\n    my $month;\n    my $year;\n    my $day;\n    my $months;\n \
    \   my $years;\n    my $days;\n    my $month;\n    my $year;\n    my $days;\n\
    \    my $months;\n    my $years;\n    my $day;\n    my $months;\n    my $years;\n\
    \    my $days;\n    my $month;\n    my $year;\n    my $days;\n    my $months;\n\
    \    my $years;\n    my $day;\n    my $months;\n    my $years;\n    my $days;\n\
    \    my $month;\n    my $year;\n    my $days;\n    my $months;\n    my $years;\n\
    \    my $day;\n    my $months;\n    my $years;\n    my $days;\n    my $month;\n\
    \    my $year;\n    my $days;\n    my $months;\n    my $years;\n    my $day;\n\
    \    my $months;\n    my $years;\n    my $days;\n    my $month;\n    my $year;\n\
    \    my $days;\n    my $months;\n    my $years;\n    my $day;\n    my $months;\n\
    \    my $years;\n    my $days;\n    my $month;\n    my $year;\n    my $days;\n\
    \    my $months;\n    my $years;\n    my $day;\n    my $months;\n    my $years;\n\
    \    my $days;\n    my $month;\n    my $year;\n    my $days;\n    my $months;\n\
    \    my $years;\n    my $day;\n    my $months;\n    my $years;\n    my $days;\n\
    \    my $month;\n    my $year;\n    my $days;\n    my $months;\n    my $years;\n\
    \    my $day;\n    my $months;\n    my $years;\n    my $days;\n    my $month;\n\
    \    my $year;\n    my $days;\n    my $months;\n    my $years;\n    my $day;\n\
    \    my $months;\n    my $years;\n    my $days;\n    my $month;\n    my $year;\n\
    \    my $days;\n    my $months;\n    my $years;\n    my $day;\n    my $months;\n\
    \    my $years;\n    my $days;\n    my $month;\n    my $year;\n    my $days;\n\
    \    my $months;\n    my $years;\n    my $", "    my $valid = 1;\n    if ($date\
    \ eq \"\") {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}-\\d{1,2}-\\\
    d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/\\d{1,2}\\\
    /\\d{4})$/) {\n        $valid = 0;\n    }\n    if ($date !~ /^(\\d{1,2}\\/", " \
    \   my $valid = 1;\n    if ($date eq \"\") {\n        $valid = 0;\n    }\n   \
    \ if ($date =~ /^\\s*$/) {\n        $valid = 0;\n    }\n    if ($date =~ /^\\\
    d{1,2}-\\d{1,2}-\\d{4}$/) {\n        my $days_months = split(/\\-/, $date);\n\
    \        my $days_months_count = scalar(@$days_months);\n        if ($days_months_count\
    \ != 3) {\n            $valid = 0;\n        }\n        if ($days_months_count\
    \ == 3) {\n            my $days_months_1 = split(/\\-/, $days_months[0]);\n  \
    \          my $days_months_2 = split(/\\-/, $days_months[1]);\n            my\
    \ $days_months_3 = split(/\\-/, $days_months[2]);\n            my $days_months_1_count\
    \ = scalar(@$days_months_1);\n            my $days_months_2_count = scalar(@$days_months_2);\n\
    \            my $days_months_3_count = scalar(@$days_months_3);\n            if\
    \ ($days_months_1_count != 1 || $days_months_2_count != 1 || $days_months_3_count\
    \ != 1) {\n                $valid = 0;\n            }\n        }\n    }\n    if\
    \ ($valid == 1) {\n        return 1;\n    }\n    return 0;\n}", "    return undef\
    \ if !defined $date;\n    chomp($date);\n    my @date_info = split(/\\-/, $date);\n\
    \    my $day = $date_info[0];\n    my $month = $date_info[1];\n    my $year =\
    \ $date_info[2];\n    my $month_num = $month - 1;\n    my $day_num = $day - 1;\n\
    \    my $month_days_num = 29;\n    if ($month_num < 1 || $month_num > 12) {\n\
    \        return \"\";\n    }\n    if ($day_num < 1 || $day_num > $month_days_num)\
    \ {\n        return \"\";\n    }\n    if ($month < 1 || $month > 12) {\n     \
    \   return \"\";\n    }\n    if ($year < 1900 || $year > 2099) {\n        return\
    \ \"\";\n    }\n    return 1;\n}", "    return 1 if !$date || $date eq \"\";\n\
    \    my($day, $month, $year) = split(/\\-/, $date);\n    return 1 if $day < 1\
    \ || $day > 31;\n    return 1 if $month < 1 || $month > 12;\n    return 1 if $month\
    \ == 2;\n    return 1 if $day == 29;\n    return 1 if $day == 30;\n    return\
    \ 1 if $day == 31;\n    return 1;\n}", "    my $day;\n    my $month;\n    my $year;",
  "    my ($day, $month, $year) = split(/\\-/, $date);\n    my $days_valid = checkDays($day,\
    \ $month, $year);\n    my $months_valid = checkMonths($month, $year);\n    my\
    \ $years_valid = checkYears($year);\n    return $days_valid && $months_valid &&\
    \ $years_valid;\n}", "    my $valid_date = 0;\n    if ($date ne \"\") {\n    \
    \    $valid_date = 1;\n    }\n    if ($valid_date == 1) {\n        if ($date =~\
    \ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/) {\n            if ($3 <= 12 && $3 >= 1\
    \ && $2 <= 31 && $2 >= 1 && $1 <= 30) {\n                if ($2 != 12) {\n   \
    \                 $valid_date = 0;\n                }\n            }\n       \
    \     else {\n                $valid_date = 0;\n            }\n        }\n   \
    \     else {\n            $valid_date = 0;\n        }\n    }\n    if ($valid_date\
    \ == 1) {\n        if ($date =~ /^([0-9]{2})\\/([0-9]{2})\\/([0-9]{4})$/) {\n\
    \            if ($3 <= 12 && $3 >= 1 && $2 <= 31 && $2 >= 1 && $1 <= 30) {\n \
    \               if ($2 != 12) {\n                    $valid_date = 0;\n      \
    \          }\n            }\n            else {\n                $valid_date =\
    \ 0;\n            }\n        }\n        else {\n            $valid_date = 0;\n\
    \        }\n    }\n    if ($valid_date == 1) {\n        if ($date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{2})$/)\
    \ {\n            if ($3 <= 12 && $3 >= 1 && $2 <= 31 && $2 >= 1 && $1 <= 30) {\n\
    \                if ($2 != 12) {\n                    $valid_date = 0;\n     \
    \           }\n            }\n            else {\n                $valid_date\
    \ = 0;\n            }\n        }\n        else {\n            $valid_date = 0;\n\
    \        }\n    }\n    if ($valid_date == 1) {\n        if ($date =~ /^([0-9]{2})\\\
    /([0-9]{2})\\/([0-9]{2})$/) {\n            if ($3 <= 12 && $3 >= 1 && $2 <= 31\
    \ && $2 >= 1 && $1 <= 30) {\n                if ($2 != 12) {\n               \
    \     $valid_date = 0;\n                }\n            }\n            else {\n\
    \                $valid_date = 0;\n            }\n        }\n        else {\n\
    \            $valid_date = 0;\n        }\n    }\n    if ($valid_date == 1) {\n\
    \        if ($date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{2})$/) {\n            if\
    \ ($3 <= 12 && $3 >= 1 && $2 <= 31 && $2 >= 1 && $1 <= 30) {\n               \
    \ if ($2 != 12) {\n                    $valid_date = 0;\n                }\n \
    \           }\n            else {\n                $valid_date = 0;\n        \
    \    }\n        }\n        else {\n            $valid_date = 0;\n        }\n \
    \   }\n    if ($valid_date == 1) {\n        if ($date =~ /^([0-9]{2})\\/([0-9]{2})\\\
    /([0-9]{2})$/) {\n            if ($3 <= 12 && $3 >= 1 && $2 <= 31 && $2 >= 1 &&\
    \ $", "    my $valid_date = 1;\n    if ($date ne \"\") {\n        my @date_info\
    \ = split(/\\-/, $date);\n        my $day = $date_info[0];\n        my $month\
    \ = $date_info[1];\n        my $year = $date_info[2];\n        if ($day < 1 ||\
    \ $day > 31) {\n            $valid_date = 0;\n        }\n        if ($month <\
    \ 1 || $month > 12) {\n            $valid_date = 0;\n        }\n        if ($month\
    \ == 2) {\n            if ($day < 1 || $day > 29) {\n                $valid_date\
    \ = 0;\n            }\n        }\n        if ($valid_date) {\n            $valid_date\
    \ = 1;\n        }\n    }\n    return $valid_date;\n}", "    chomp($date);\n  \
    \  return $date if length($date) == 0;\n    my($day, $month, $year) = split(/\\\
    -/, $date);\n    return $day < 1 || $day > 31 || $month < 1 || $month > 12 ||\
    \ $year < 1000 || $year > 3000;\n}", "    my $day;\n    my $month;\n    my $year;\n\
    \    my $days;\n    my $months;\n    my $years;\n    my $days_valid;\n    my $months_valid;\n\
    \    my $years_valid;\n    my $days_invalid;\n    my $months_invalid;\n    my\
    \ $years_invalid;\n    my $days_valid;\n    my $months_valid;\n    my $years_valid;\n\
    \    my $days_invalid;\n    my $months_invalid;\n    my $years_invalid;\n    my\
    \ $days_valid;\n    my $months_valid;\n    my $years_valid;\n    my $days_invalid;\n\
    \    my $months_invalid;\n    my $years_invalid;\n    my $days_valid;\n    my\
    \ $months_valid;\n    my $years_valid;\n    my $days_invalid;\n    my $months_invalid;\n\
    \    my $years_invalid;\n    my $days_valid;\n    my $months_valid;\n    my $years_valid;\n\
    \    my $days_invalid;\n    my $months_invalid;\n    my $years_invalid;\n    my\
    \ $days_valid;\n    my $months_valid;\n    my $years_valid;\n    my $days_invalid;\n\
    \    my $months_invalid;\n    my $years_invalid;\n    my $days_valid;\n    my\
    \ $months_valid;\n    my $years_valid;\n    my $days_invalid;\n    my $months_invalid;\n\
    \    my $years_invalid;\n    my $days_valid;\n    my $months_valid;\n    my $years_valid;\n\
    \    my $days_invalid;\n    my $months_invalid;\n    my $years_invalid;\n    my\
    \ $days_valid;\n    my $months_valid;\n    my $years_valid;\n    my $days_invalid;\n\
    \    my $months_invalid;\n    my $years_invalid;\n    my $days_valid;\n    my\
    \ $months_valid;\n    my $years_valid;\n    my $days_invalid;\n    my $months_invalid;\n\
    \    my $years_invalid;\n    my $days_valid;\n    my $months_valid;\n    my $years_valid;\n\
    \    my $days_invalid;\n    my $months_invalid;\n    my $years_invalid;\n    my\
    \ $days_valid;\n    my $months_valid;\n    my $years_valid;", "    return '' unless\
    \ $date;\n    $date =~ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/;\n    return '' unless\
    \ $3 > 0 && $3 <= 12 && $2 > 0 && $2 <= 31 && $1 > 0 && $1 <= 30;\n    return\
    \ '' unless $3 > 0 && $3 <= 12 && $2 > 0 && $2 <= 31 && $1 > 0 && $1 <= 29;\n\
    \    return '' unless $3 > 0 && $3 <= 12;\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
