name: HumanEval_22_filter_integers
language: pl
prompt: "# Filter given list of any python values only for integers\n# >>> filter_integers([\"\
  a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
  \ 2, 3]\nsub filter_integers {\n    my($values) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2, 9,\
  \ \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @filtered;\n    foreach my $value (@$values) {\n        push\
    \ @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return @filtered;\n}",
  "    my @out;\n    foreach my $value (@$values) {\n        if (ref($value) eq \"\
    ARRAY\") {\n            push(@out, filter_integers($value));\n        } elsif\
    \ (ref($value) eq \"HASH\") {\n            push(@out, filter_integers($value->{value}));\n\
    \        } elsif ($value =~ /^\\d+$/) {\n            push(@out, $value);\n   \
    \     }\n    }\n    return @out;\n}", "    my @filtered;\n    foreach my $value\
    \ (@$values) {\n        if (ref($value) eq \"ARRAY\") {\n            push @filtered,\
    \ filter_integers($value);\n        } elsif (ref($value) eq \"HASH\") {\n    \
    \        push @filtered, filter_integers(values(%$value));\n        } elsif ($value\
    \ =~ /^\\d+$/) {\n            push @filtered, $value;\n        }\n    }\n    return\
    \ @filtered;\n}", "    my @filtered;\n    foreach my $value (values %$values)\
    \ {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n    }\n    return\
    \ @filtered;\n}", "    my @filtered;\n    foreach my $value (@$values) {\n   \
    \     if (ref($value) eq \"ARRAY\") {\n            push @filtered, filter_integers($value);\n\
    \        } elsif ($value =~ /^\\d+$/) {\n            push @filtered, $value;\n\
    \        }\n    }\n    return @filtered;\n}", "    my @filtered = ();\n    foreach\
    \ my $value (@$values) {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}", "    my @filtered;\n\
    \    foreach my $value (@$values) {\n        if (ref($value) eq \"ARRAY\") {\n\
    \            push @filtered, filter_integers($value);\n        } elsif ($value\
    \ =~ /^\\d+$/) {\n            push @filtered, $value;\n        } else {\n    \
    \        push @filtered, $value;\n        }\n    }\n    return @filtered;\n}",
  "    my @filtered;\n    foreach my $value (@$values) {\n        if (ref($value)\
    \ eq \"ARRAY\") {\n            push @filtered, filter_integers($value);\n    \
    \    } elsif ($value =~ /^-?\\d+$/) {\n            push @filtered, $value;\n \
    \       } else {\n            push @filtered, $value;\n        }\n    }\n    return\
    \ @filtered;\n}", "    my @filtered;\n    foreach my $value (@$values) {\n   \
    \     if ($value =~ /^\\d+$/) {\n            push(@filtered, $value);\n      \
    \  }\n    }\n    return @filtered;\n}", "    my @filtered = ();\n    foreach my\
    \ $value (@$values) {\n        if (defined $value) {\n            push(@filtered,\
    \ $value) unless $value =~ /^-?\\d+$/;\n        }\n    }\n    return @filtered;\n\
    }", "    my @out;\n    foreach my $value ( @$values ) {\n        push @out, $value\
    \ if $value =~ /^-?\\d+$/;\n    }\n    return @out;\n}", "    my @out;\n    foreach\
    \ my $value (@$values) {\n        if ($value =~ /^\\d+$/) {\n            push(@out,\
    \ $value);\n        }\n    }\n    return @out;\n}", "    my @filtered;\n    foreach\
    \ my $value (@$values) {\n        if (ref($value) eq \"ARRAY\") {\n          \
    \  push @filtered, filter_integers($value);\n        }\n        elsif ($value\
    \ =~ /^-?\\d+$/) {\n            push @filtered, $value;\n        }\n    }\n  \
    \  return @filtered;\n}", "    my @filtered;\n    foreach my $value (@$values)\
    \ {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n\
    \        }\n    }\n    return @filtered;\n}", "    my @filtered;\n    foreach\
    \ my $value (@$values) {\n        push @filtered, $value if $value =~ /^-?\\d+$/;\n\
    \    }\n    return @filtered;\n}", "    my @filtered = ();\n    foreach my $value\
    \ (@$values) {\n        if (defined $value && $value =~ /^\\d+$/) {\n        \
    \    push(@filtered, $value);\n        }\n    }\n    return @filtered;\n}", " \
    \   my @filtered = ();\n    foreach my $value (@$values) {\n        if (defined\
    \ $value && $value =~ /^-?\\d+$/) {\n            push(@filtered, $value);\n  \
    \      }\n    }\n    return @filtered;\n}", "    my @filtered;\n    foreach my\
    \ $value (@$values) {\n        if ($value =~ /^-?\\d+$/) {\n            push(@filtered,\
    \ $value);\n        }\n    }\n    return @filtered;\n}", "    my @filtered;\n\
    \    foreach my $value (@$values) {\n        if (ref($value) eq \"ARRAY\") {\n\
    \            push @filtered, filter_integers($value);\n        } elsif (ref($value)\
    \ eq \"SCALAR\") {\n            if ($value =~ /^\\d+$/) {\n                push\
    \ @filtered, $value;\n            }\n        } else {\n            push @filtered,\
    \ $value;\n        }\n    }\n    return @filtered;\n}", "    my @filtered = ();\n\
    \    foreach my $value (@$values) {\n        if ($value =~ /^\\d+$/) {\n     \
    \       push(@filtered, $value);\n        }\n    }\n    return @filtered;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
