name: HumanEval_104_unique_digits
language: pl
prompt: "# Given a list of positive integers x. return a sorted list of all \n# elements\
  \ that hasn't any even digit.\n# Note: Returned list should be sorted in increasing\
  \ order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n\
  # >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits {\n    my($x)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
  \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
  \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
  \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    my $digit;\n    my $i = 0;\n    \n    foreach\
    \ $digit (@$x) {\n        next if $digit % 2 != 0;\n        $result[$i] = $digit;\n\
    \        $i++;\n    }\n    \n    return @result;\n}", "    my @result;\n    my\
    \ $i = 0;\n    my $j = 0;\n    my $digit;\n    my $tmp;\n    \n    while($i <\
    \ $#x) {\n        $digit = $x[$i];\n        $tmp = 0;\n        while($j < $#x)\
    \ {\n            $tmp += $x[$j] * $digit;\n            $j++;\n        }\n    \
    \    if($tmp % 2 == 0) {\n            push(@result, $digit);\n        }\n    \
    \    $i++;\n    }\n    return @result;\n}", "    my @a = ();\n    my $i = 0;\n\
    \    while($i < @$x) {\n        my $y = $x->[$i];\n        my $z = 0;\n      \
    \  while($z < $i) {\n            my $z2 = $x->[$z];\n            if($y % $z2 ==\
    \ 0) {\n                push(@a, $x->[$z]);\n                last;\n         \
    \   }\n            $z++;\n        }\n        $i++;\n    }\n    return @a;\n}",
  "    my @result;\n    \n    foreach my $i (@$x) {\n        my $digit = $i % 10;\n\
    \        \n        if ($digit == 0) {\n            push (@result, $i);\n     \
    \   }\n    }\n    \n    return @result;\n}", "    my @result;\n    my $digit;\n\
    \    my $i = 0;\n    foreach $digit (@$x) {\n        $i++;\n        if ($digit\
    \ % 2 == 0) {\n            push (@result, $digit);\n        }\n    }\n    foreach\
    \ $digit (@result) {\n        push (@result, $digit);\n    }\n    return @result;\n\
    }", "    my @result;\n    \n    foreach my $num (@$x) {\n        foreach my $digit\
    \ (@$x) {\n            if ($num % $digit == 0) {\n                push(@result,\
    \ $num);\n                last;\n            }\n        }\n    }\n    \n    return\
    \ @result;\n}", "    my @x;\n    foreach my $i (@$x) {\n        push @x, $i if\
    \ $i =~ /\\d/;\n    }\n    sort @x;\n}", "    my @result;\n    my $i = 0;\n  \
    \  my $j = 0;\n    my $flag = 0;\n    my $temp = 0;\n    \n    foreach my $num\
    \ (@$x) {\n        if ($num % 2 == 0) {\n            $flag = 1;\n        }\n \
    \       elsif ($flag == 1) {\n            $flag = 0;\n            $temp = $num;\n\
    \        }\n        elsif ($flag == 0) {\n            $result[$j] = $temp;\n \
    \           $j++;\n        }\n    }\n    \n    return @result;\n}", "    my @result;\n\
    \    my $digit;\n    my $i = 0;\n    my $j = 0;\n    \n    while($i < @$x) {\n\
    \        $digit = $x->[$i];\n        while($j < @$x && $x->[$j] % $digit == 0)\
    \ {\n            $j++;\n        }\n        \n        if($j < @$x) {\n        \
    \    $result[$i] = $x->[$j];\n            $i++;\n        }\n    }\n    \n    return\
    \ @result;\n}", "    my @result;\n    my $i = 0;\n    \n    foreach my $num (@$x)\
    \ {\n        my $digit = $num % 10;\n        \n        if ($digit == 0) {\n  \
    \          $i++;\n        }\n        elsif ($i == 0) {\n            push(@result,\
    \ $num);\n        }\n        elsif ($digit != 0) {\n            push(@result,\
    \ $num);\n        }\n    }\n    \n    return @result;\n}", "    my @result;\n\
    \    my $i = 0;\n    \n    foreach my $num (@$x) {\n        my $digit = $num %\
    \ 10;\n        \n        if ($digit == 0) {\n            $result[$i] = $num;\n\
    \        }\n        elsif ($digit == 1) {\n            $result[$i] = $num;\n \
    \           $i++;\n        }\n    }\n    \n    return @result;\n}", "    my @res;\n\
    \    my $i = 0;\n    \n    foreach my $num (@$x) {\n        my $digit = $num %\
    \ 10;\n        \n        if ($digit != 0) {\n            $res[$i] = $num;\n  \
    \          $i++;\n        }\n    }\n    \n    return @res;\n}", "    my @res;\n\
    \    my $i = 0;\n    while($i < @$x) {\n        my $num = $x->[$i];\n        while($num\
    \ > 0) {\n            my $d = $num % 10;\n            my $t = $res[$i];\n    \
    \        if($t eq $d) {\n                next;\n            }\n            elsif($t\
    \ < $d) {\n                $res[$i] = $d;\n                $i++;\n           \
    \ }\n            else {\n                $res[$i] = $t;\n                $i++;\n\
    \            }\n            $num = $num / 10;\n        }\n    }\n    return @res;\n\
    }", "    my @result;\n    \n    foreach my $num (@$x) {\n        foreach my $digit\
    \ (@digits) {\n            next if $num % $digit == 0;\n        }\n        push(@result,\
    \ $num);\n    }\n    \n    return @result;\n}", "    my @result;\n    my $i =\
    \ 0;\n    my $j = 0;\n    my $digit;\n    my $tmp;\n    \n    while($i < @$x)\
    \ {\n        $digit = $x->[$i];\n        $tmp = 0;\n        while($j < @$x) {\n\
    \            $tmp += $x->[$j] * $digit;\n            $j++;\n        }\n      \
    \  if($tmp % 2 == 0) {\n            $result[$i] = $digit;\n            $i++;\n\
    \        }\n    }\n    \n    return @result;\n}", "    my @x;\n    \n    foreach\
    \ my $i (@$x) {\n        my $digit = $i % 10;\n        \n        if ($digit ==\
    \ 0) {\n            push @x, $i;\n        }\n    }\n    \n    return @x;\n}",
  "    my @a;\n    my $i = 0;\n    foreach my $x (@$x) {\n        push @a, $x if $x\
    \ % 2 != 0;\n        $i++;\n    }\n    return @a;\n}", "    my @result;\n    \n\
    \    foreach my $num (@$x) {\n        foreach my $digit (split(//, $num)) {\n\
    \            next if $digit % 2 != 0;\n            push(@result, $num);\n    \
    \    }\n    }\n    \n    return @result;\n}", "    my @result;\n    my $i = 0;\n\
    \    \n    foreach my $num (@$x) {\n        my $digit = $num % 10;\n        \n\
    \        if ($digit == 0) {\n            $result[$i] = $num;\n            $i++;\n\
    \        }\n    }\n    \n    return @result;\n}", "    my @result;\n    my $digit;\n\
    \    my $i = 0;\n    \n    while($i < @$x) {\n        $digit = $x->[$i];\n   \
    \     \n        while($i < @$x && $x->[$i] % $digit == 0) {\n            $i++;\n\
    \        }\n        \n        if($i < @$x) {\n            push(@result, $x->[$i]);\n\
    \        }\n    }\n    \n    return @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
