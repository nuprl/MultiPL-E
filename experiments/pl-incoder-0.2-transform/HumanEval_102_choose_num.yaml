name: HumanEval_102_choose_num
language: pl
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# >>> choose_num(12,\
  \ 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nsub choose_num {\n    my($x, $y) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n\
  \        if(eq_deeply($candidate->(12, 15),14)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33,\
  \ 12354),12354)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(5234, 5233),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27,\
  \ 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(7, 7),-1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = -1;\n    my $even = 1;\n    my $odd = 1;\n    my $min\
    \ = $x;\n    my $max = $y;\n    \n    while ($min <= $max) {\n        if ($min\
    \ % 2 == 0) {\n            $even = $even * $min;\n        }\n        else {\n\
    \            $odd = $odd * $min;\n        }\n        $min = $min + 1;\n    }\n\
    \    \n    if ($even > $odd) {\n        $result = $even;\n    }\n    else {\n\
    \        $result = $odd;\n    }\n    \n    return $result;\n}", "    my $n = $x\
    \ + ($y - $x) / 2;\n    my $i = 0;\n    my $found = 0;\n    my $max = $x;\n  \
    \  my $min = $y;\n    while($i <= $n and $found == 0) {\n        if($i % 2 ==\
    \ 0) {\n            if($x > $y) {\n                $max = $x;\n              \
    \  $min = $y;\n            }\n            else {\n                $max = $y;\n\
    \                $min = $x;\n            }\n        }\n        elsif($i % 2 !=\
    \ 0) {\n            if($x > $y) {\n                $max = $y;\n              \
    \  $min = $x;\n            }\n            else {\n                $max = $x;\n\
    \                $min = $y;\n            }\n        }\n        $i++;\n    }\n\
    \    return $found == 0 ? $max : -1;\n}", "    my $result = -1;\n    my $even\
    \ = 1;\n    my $min = $x;\n    my $max = $y;\n    my $mid;\n    \n    while ($min\
    \ <= $max) {\n        $mid = $min + ($max - $min) / 2;\n        if ($mid % 2 ==\
    \ 0) {\n            $even = 0;\n        }\n        if ($mid > $x) {\n        \
    \    $min = $mid + 1;\n        } elsif ($mid < $y) {\n            $max = $mid\
    \ - 1;\n        } else {\n            $result = $mid;\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = -1;\n    my $i = 0;\n    my $even = 0;\n   \
    \ my $odd = 0;\n    while($i < $x) {\n        $even = $even + $i;\n        $odd\
    \ = $odd + $i;\n        $i++;\n    }\n    while($i < $y) {\n        $even = $even\
    \ + $i;\n        $odd = $odd + $i;\n        $i++;\n    }\n    if($even > $odd)\
    \ {\n        $result = $even;\n    } else {\n        $result = $odd;\n    }\n\
    \    return $result;\n}", "    my $result;\n    my $min = $x < $y ? $x : $y;\n\
    \    my $max = $x < $y ? $y : $x;\n    my $step = $x > $y ? 1 : -1;\n    my $i;\n\
    \    my $found = 0;\n    for ($i = $min; $i <= $max; $i += $step) {\n        if\
    \ ($i % 2 == 0) {\n            $found = 1;\n            $result = $i;\n      \
    \      last;\n        }\n    }\n    return $result if $found;\n    return -1;\n\
    }", "    my $even = 0;\n    my $max = $x;\n    my $min = $y;\n    my $temp;\n\
    \    \n    while ($min <= $max) {\n        $temp = $min;\n        $min = $min\
    \ + 1;\n        if ($temp % 2 != 0) {\n            $even = $even + 1;\n      \
    \  }\n    }\n    return $even ? $temp : -1;\n}", "    my $result;\n    my $min\
    \ = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $step = $x >\
    \ $y ? 1 : -1;\n    my $num = $min;\n    \n    for(; $num <= $max; $num += $step)\
    \ {\n        if ($num % 2 == 0) {\n            $result = $num;\n            last;\n\
    \        }\n    }\n    \n    return $result if $result;\n    return -1;\n}", " \
    \   my $result;\n    my $min = $x;\n    my $max = $y;\n    my $mid;\n    my $diff;\n\
    \    my $i;\n    my $even;\n    my $odd;", "    my $min = $x < $y ? $x : $y;\n\
    \    my $max = $x < $y ? $y : $x;\n    my $even = 0;\n    my $odd = 0;\n    my\
    \ $num;\n    for(my $i = $min; $i <= $max; $i++) {\n        $num = $i;\n     \
    \   if ($num % 2 == 0) {\n            $even++;\n        }\n        else {\n  \
    \          $odd++;\n        }\n    }\n    if ($even > $odd) {\n        return\
    \ $even;\n    }\n    else {\n        return $odd;\n    }\n}", "    my $even =\
    \ 1;\n    my $biggest = -1;\n    my $i;\n    for ($i = $x; $i <= $y; $i++) {\n\
    \        if ($i & 1) {\n            $biggest = $i;\n            $even = 0;\n \
    \       }\n    }\n    return $biggest if ($biggest != -1 && $even);\n    return\
    \ -1;\n}", "    my $even = 0;\n    my $max = 0;\n    my $min = $y;\n    my $num;\n\
    \    \n    for(my $i = $y; $i >= $x; $i--) {\n        $num = $i;\n        $even\
    \ = 0;\n        \n        for(my $j = $x; $j >= $i; $j--) {\n            if($j\
    \ % 2 == 0) {\n                $even = 1;\n            }\n            $num *=\
    \ 10;\n            $num += $j;\n        }\n        \n        if($even != 1) {\n\
    \            $min = $i;\n        }\n    }\n    \n    return $min;\n}", "    my\
    \ $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n\
    \    my $step = $max / 2;\n    my $counter = 0;\n    my $even;\n    my $odd;\n\
    \    \n    while ($counter < $max) {\n        $even = $min + $step;\n        $odd\
    \ = $min + $step + 1;\n        if ($even % 2 == 0 && $odd % 2 == 0) {\n      \
    \      $result = $even;\n            last;\n        }\n        $counter++;\n \
    \       $step = $step / 2;\n    }\n    return $result;\n}", "    my $result =\
    \ -1;\n    my $even = 0;\n    my $odd = 0;\n    my $min = $x;\n    my $max = $y;\n\
    \    my $temp;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n \
    \   my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n\
    \    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my\
    \ $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n\
    \    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my\
    \ $f;\n    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n\
    \    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my\
    \ $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n\
    \    my $z;\n    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my\
    \ $F;\n    my $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n\
    \    my $M;\n    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my\
    \ $S;\n    my $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n\
    \    my $Z;\n    my $_;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my\
    \ $e;\n    my $f;\n    my $g;", "    my $result;\n    my $min = $x if $x < $y;\n\
    \    my $max = $x if $x > $y;\n    my $mid;\n    my $midpoint;\n    my $diff =\
    \ $max - $min;\n    my $diff2 = $y - $x;\n    my $diff3 = $diff2 * $diff2;\n \
    \   my $diff4 = $diff3 * $diff3;\n    my $diff5 = $diff4 * $diff4;\n    my $diff6\
    \ = $diff5 * $diff5;\n    my $diff7 = $diff6 * $diff6;\n    my $diff8 = $diff7\
    \ * $diff7;\n    my $diff9 = $diff8 * $diff8;\n    my $diff10 = $diff9 * $diff9;\n\
    \    my $diff11 = $diff10 * $diff10;\n    my $diff12 = $diff11 * $diff11;\n  \
    \  my $diff13 = $diff12 * $diff12;\n    my $diff14 = $diff13 * $diff13;\n    my\
    \ $diff15 = $diff14 * $diff14;\n    my $diff16 = $diff15 * $diff15;\n    my $diff17\
    \ = $diff16 * $diff16;\n    my $diff18 = $diff17 * $diff17;\n    my $diff19 =\
    \ $diff18 * $diff18;\n    my $diff20 = $diff19 * $diff19;\n    my $diff21 = $diff20\
    \ * $diff20;\n    my $diff22 = $diff21 * $diff21;\n    my $diff23 = $diff22 *\
    \ $diff22;\n    my $diff24 = $diff23 * $diff23;\n    my $diff25 = $diff24 * $diff24;\n\
    \    my $diff26 = $diff25 * $diff25;\n    my $diff27 = $diff26 * $diff26;\n  \
    \  my $diff28 = $diff27 * $diff27;\n    my $diff29 = $diff28 * $diff28;\n    my\
    \ $diff30 = $diff29 * $diff29;\n    my $diff31 = $diff30 * $diff30;\n    my $diff32\
    \ = $diff31 * $diff31;\n    my $diff33 = $diff32 * $diff32;\n    my $diff34 =\
    \ $diff33 * $diff33;\n    my $diff35 = $diff34 * $diff34;\n    my $diff36 = $diff35\
    \ * $diff35;\n    my $diff37 = $diff36 * $diff36;\n    my $diff38 = $diff37 *\
    \ $diff37;\n    my $diff39 = $diff38 * $diff", "    my $num = $x;\n    my $found\
    \ = 0;\n    while($num < $y) {\n        $num += 2;\n        if ($num > $y) {\n\
    \            $found = 1;\n            last;\n        }\n    }\n    return $found\
    \ ? $num : -1;\n}", "    my $max_num = $x;\n    my $min_num = $y;\n    my $num\
    \ = $x;\n    my $counter = 0;\n    \n    while ($num < $max_num) {\n        $counter++;\n\
    \        if ($num % 2 == 0) {\n            $num += $min_num;\n        } else {\n\
    \            $num += $max_num;\n        }\n    }\n    \n    return $num if $counter\
    \ == 0;\n    return -1;\n}", "    my $result = -1;\n    my $max_num = $x;\n  \
    \  my $min_num = $y;\n    my $max_even = 0;\n    my $max_odd = 0;\n    my $max_even_in_range\
    \ = 0;\n    my $max_odd_in_range = 0;\n    my $max_even_in_range_odd = 0;\n  \
    \  my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n    my\
    \ $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even\
    \ = 0;\n    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n\
    \    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n    my\
    \ $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd\
    \ = 0;\n    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n\
    \    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n    my\
    \ $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even\
    \ = 0;\n    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n\
    \    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n    my\
    \ $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd\
    \ = 0;\n    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n\
    \    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n    my\
    \ $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even\
    \ = 0;\n    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n\
    \    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n    my\
    \ $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd\
    \ = 0;\n    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n\
    \    my $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n    my\
    \ $max_odd_in_range_even = 0;\n    my $max_even_in_range_odd = 0;\n    my $max_odd_in_range_even\
    \ = 0;\n    my $max_even_in_range_odd = 0;", "    my $even = 0;\n    my $evens\
    \ = 0;\n    my $odds = 0;\n    my $odd = 0;\n    my $num;\n    my $max;\n    \n\
    \    for(my $i = $x; $i <= $y; $i++) {\n        $num = $i;\n        $even = 0;\n\
    \        $odds = 0;\n        \n        while($num > 0) {\n            $even =\
    \ $num % 2;\n            $odds = $odd + $even;\n            $num = $num / 2;\n\
    \        }\n        \n        if($odds == $even) {\n            $max = $i;\n \
    \       }\n    }\n    \n    return $max;\n}", "    my $result;\n    my $min =\
    \ $x < $y ? $x : $y;\n    my $max = $x < $y ? $y : $x;\n    my $mid = $min + ($max\
    \ - $min) / 2;\n    while ($mid < $max) {\n        $result = $mid if ($mid & 1);\n\
    \        $mid += 2;\n    }\n    return $result if $result;\n    return -1;\n}",
  "    my $result;\n    my $min = $x < $y ? $x : $y;\n    my $max = $x < $y ? $y :\
    \ $x;\n    my $step = $x > $y ? 1 : -1;\n    my $limit = $min + $step;\n    while\
    \ ($min <= $max) {\n        $result = $min + $step;\n        if ($result % 2 ==\
    \ 0) {\n            $result = $result;\n        } else {\n            $result\
    \ = $result + 1;\n        }\n        if ($result >= $limit) {\n            $result\
    \ = $result - 1;\n        }\n        $min = $result + $step;\n    }\n    return\
    \ $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
