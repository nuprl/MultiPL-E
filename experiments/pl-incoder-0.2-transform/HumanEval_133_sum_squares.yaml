name: HumanEval_133_sum_squares
language: pl
prompt: "# You are given a list of numbers.\n# You need to return the sum of squared\
  \ numbers in the given list,\n# round each element in the list to the upper int(Ceiling)\
  \ first.\n# Examples:\n# >>> lst([1.0, 2.0, 3.0])\n# 14\n# >>> lst([1.0, 4.0, 9.0])\n\
  # 98\n# >>> lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst([1.4, 4.2, 0.0])\n# 29\n\
  # >>> lst([-2.4, 1.0, 1.0])\n# 6\nsub sum_squares {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0,\
  \ 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2,\
  \ 0.0]),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0,\
  \ 2.0]),10230)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4,\
  \ 4.6, 6.3]),75)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
  \ 1.0, 0.0]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += $num\
    \ * $num;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num\
    \ (@$lst) {\n        $sum += $num * $num;\n    }\n    return $sum;\n}", "    my\
    \ $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += $num ** 2;\n    }\n\
    \    return $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n    \
    \    $sum += $num ** 2;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach\
    \ my $num (@$lst) {\n        $sum += $num * $num;\n    }\n    return $sum;\n}",
  "    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += $num ** 2;\n \
    \   }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n\
    \        $sum += $num * $num;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $num (@$lst) {\n        $sum += $num * $num;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum +=\
    \ $num * $num;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my\
    \ $num (@$lst) {\n        $sum += $num ** 2;\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += $num * $num;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n\
    \        $sum += $num * $num;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $num (@$lst) {\n        $sum += $num ** 2;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum +=\
    \ $num * $num;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my\
    \ $num (@$lst) {\n        $sum += $num * $num;\n    }\n    return $sum;\n}", " \
    \   my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += $num ** 2;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n\
    \        $sum += $num * $num;\n    }\n    return $sum;\n}", "    my $sum = 0;\n\
    \    foreach my $num (@$lst) {\n        $sum += $num ** 2;\n    }\n    return\
    \ $sum;\n}", "    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum +=\
    \ $num * $num;\n    }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my\
    \ $num (@$lst) {\n        $sum += $num ** 2;\n    }\n    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
