name: HumanEval_16_count_distinct_characters
language: pl
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters(\"\
  Jerry\")\n# 4\nsub count_distinct_characters {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry\
  \ jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    my $char;\n    my $prev_char;\n    foreach\
    \ $char (split(//, $string)) {\n        $prev_char = $char;\n        $count++;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n    foreach\
    \ $char (split //, $string) {\n        $count++ if $char =~ /[a-z]/i;\n      \
    \  $count++ if $char =~ /[A-Z]/i;\n        $count++ if $char =~ /[0-9]/i;\n  \
    \  }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n    foreach\
    \ $char (split(//, $string)) {\n        $count++ if $char ne \"\\0\";\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $char;\n    my $prev_char;\n\
    \    my $prev_char_case;\n    foreach $char (split //, $string) {\n        $prev_char_case\
    \ = $prev_char =~ tr/A-Z/a-z/;\n        $count++ if $char ne $prev_char;\n   \
    \     $prev_char = $char;\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    my $chars = $string =~ /[[:alpha:]]/;\n    $count += $chars;\n    $chars\
    \ = $string =~ /[[:upper:]]/;\n    $count += $chars;\n    $chars = $string =~\
    \ /[[:lower:]]/;\n    $count += $chars;\n    $chars = $string =~ /[[:digit:]]/;\n\
    \    $count += $chars;\n    $chars = $string =~ /[[:punct:]]/;\n    $count +=\
    \ $chars;\n    $chars = $string =~ /[[:space:]]/;\n    $count += $chars;\n   \
    \ return $count;\n}", "    my $count = 0;\n    my $char;\n    foreach $char (split(//,\
    \ $string)) {\n        $count++ if $char ne \"\\0\";\n    }\n    return $count;\n\
    }", "    my($characters) = 0;\n    my($characters_case_insensitive) = 0;\n   \
    \ my($characters_case_insensitive_casefolded) = 0;\n    my($characters_case_insensitive_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded_casefolded)\
    \ = 0;\n    my($characters_case_insensitive_casefolded_casefol", "    my $count\
    \ = 0;\n    my $char;\n    my $lowercase;\n    my $uppercase;\n    my $digit;\n\
    \    my $punctuation;\n    my $whitespace;\n    my $other;\n    foreach $char\
    \ (split(//, $string)) {\n        $lowercase = uc($char);\n        $uppercase\
    \ = lc($char);\n        $digit = lc($char);\n        $punctuation = uc($char);\n\
    \        $whitespace = \" \\t\\n\\r\";\n        $other = $char !~ /^[[:alpha:]]/;\n\
    \        if ($lowercase eq $uppercase) {\n            $count++;\n        }\n \
    \       if ($digit eq $punctuation) {\n            $count++;\n        }\n    \
    \    if ($whitespace eq $punctuation) {\n            $count++;\n        }\n  \
    \      if ($other eq $punctuation) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my $char;\n    foreach $char\
    \ (split //, $string) {\n        $count++ if $char =~ /[a-z]/i;\n        $count++\
    \ if $char =~ /[A-Z]/i;\n        $count++ if $char =~ /[0-9]/i;\n        $count++\
    \ if $char =~ /[!-~]/i;\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    my $char;\n    my $prev_char;\n    my $prev_char_case;\n    my $prev_char_case_count;\n\
    \    my $prev_char_case_count_prev;\n    my $prev_char_case_insensitive;\n   \
    \ my $prev_char_case_insensitive_prev;\n    my $prev_char_case_sensitive;\n  \
    \  my $prev_char_case_sensitive_prev;\n    my $prev_char_case_sensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_prev;\n    my $prev_char_case_insensitive_insensitive;\n\
    \    my $prev_char_case_insensitive_insensitive_prev;\n    my $prev_char_case_sensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_prev;\n    my $prev_char_case_sensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_prev;\n\
    \    my $prev_char_case_sensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive",
  "    my $count = 0;\n    my $char;\n    my $prev;\n    my $prev_char;\n    my $prev_char_case;\n\
    \    my $prev_char_case_count;\n    my $prev_char_case_count_prev;\n    my $prev_char_case_count_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev;\n    my $prev_char_case_count_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev;\n    my $prev_char_case_count_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev;\n    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $prev_char_case_count_prev_prev_", "    my $count = 0;\n    my $char;\n\
    \    foreach $char (split(//, $string)) {\n        $count++ if $char =~ /[a-z]/i;\n\
    \        $count++ if $char =~ /[A-Z]/i;\n        $count++ if $char =~ /[0-9]/i;\n\
    \    }\n    return $count;\n}", "    my $count = 0;\n    my $char;\n    my $prev_char;\n\
    \    foreach $char (split(//, $string)) {\n        $prev_char = $char;\n     \
    \   $count++;\n    }\n    return $count;\n}", "    my $count = 0;\n    my $chars\
    \ = $string =~ /([A-Z])/g;\n    $count += scalar keys %$chars;\n    $count +=\
    \ scalar keys %{ $string =~ /([a-z])/g };\n    $count += scalar keys %{ $string\
    \ =~ /([0-9])/g };\n    $count += scalar keys %{ $string =~ /([A-Z0-9])/g };\n\
    \    return $count;\n}", "    my $count = 0;\n    my $char;\n    foreach $char\
    \ (split(//, $string)) {\n        $count++ if $char !~ /[A-Z]/;\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my $char;\n    my $prev_char;\n    foreach\
    \ $char (split(//, $string)) {\n        if ($char ne $prev_char) {\n         \
    \   $count++;\n        }\n        $prev_char = $char;\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my $char;\n    foreach $char (split //, $string)\
    \ {\n        $count++ if $char !~ /[A-Z]/;\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    my $chars = $string;\n    my $char;\n    while ($chars\
    \ =~ /([A-Za-z])/g) {\n        $count++;\n    }\n    return $count;\n}", "   \
    \ my $count = 0;\n    my $char;\n    foreach $char (split //, $string) {\n   \
    \     $count++ if $char ne \"\\0\";\n    }\n    return $count;\n}", "    my($characters)\
    \ = 0;\n    my($character) = 0;\n    my($characters_seen) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;\n    my($characters_seen_previous) = 0;\n    my($characters_seen_previous)\
    \ = 0;"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
