name: HumanEval_64_vowels_count
language: pl
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n\
  # >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n\
  \        if(eq_deeply($candidate->(\"abcde\"),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  key\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"bye\"),1)) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  bYe\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"ACEDY\"),3)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $s =~ s/[aeiou]//g;\n    return scalar keys %vowels;\n}", "   \
    \ $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return $-[0]+1;\n}", "    my $count =\
    \ 0;\n    my $vowels = \"aeiou\";\n    my $vowels_re = join \"|\", $vowels;\n\
    \    while ($s =~ /($vowels_re)/g) {\n        $count++;\n    }\n    return $count;\n\
    }", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return length($s);\n}", "    my\
    \ $vowels = \"aeiou\";\n    my $count = 0;\n    foreach my $char (split //, $s)\
    \ {\n        if ($char =~ /[aeiouy]/) {\n            $count++;\n        }\n  \
    \  }\n    return $count;\n}", "    my $vowels = \"aeiou\";\n    my $count = 0;\n\
    \    my $last;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n \
    \   my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $A;\n    my $B;\n    my $C;\n    my $D;\n    my $E;\n    my $F;\n    my\
    \ $G;\n    my $H;\n    my $I;\n    my $J;\n    my $K;\n    my $L;\n    my $M;\n\
    \    my $N;\n    my $O;\n    my $P;\n    my $Q;\n    my $R;\n    my $S;\n    my\
    \ $T;\n    my $U;\n    my $V;\n    my $W;\n    my $X;\n    my $Y;\n    my $Z;\n\
    \    my $_;\n    foreach $u (split //, $s) {\n        $count++;\n    }\n    return\
    \ $count;\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return $-[0];\n}", " \
    \   my $count = 0;\n    foreach my $char (split //, $s) {\n        next if $char\
    \ eq 'y';\n        next if $char eq 'a' || $char eq 'e' || $char eq 'i' || $char\
    \ eq 'o' || $char eq 'u';\n        $count++;\n    }\n    return $count;\n}", " \
    \   my $count = 0;\n    foreach my $char (split //, $s) {\n        next if $char\
    \ eq 'y';\n        next if $char eq 'a' || $char eq 'e' || $char eq 'i' || $char\
    \ eq 'o' || $char eq 'u';\n        $count++;\n    }\n    return $count;\n}", " \
    \   $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return length($s);\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n\
    \    return length($s);\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    $s =~\
    \ tr/yAEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;\n\
    \    $s =~ tr/AEIOU/aeiouAEIOU/;\n    $s =~ tr/AEIOU/aeiouAEIOU/;", "    $s =~\
    \ tr/aeiouAEIOU/aeiouAEIOU/;\n    return length($s);\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n\
    \    return length($s);\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return\
    \ length($s);\n}", "    my $vowels = \"aeiou\";\n    $s =~ s/[aeiouy]+$//;\n \
    \   return scalar grep { $vowels =~ /[aeiou]/ } split //, $s;\n}", "    my $vowels\
    \ = \"aeiou\";\n    my $count = 0;\n    my $len = length($s);\n    my $i;\n  \
    \  for ($i = 0; $i < $len; $i++) {\n        if ($vowels =~ /[aeiouy]/) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $vowels = \"aeiou\";\n    my $len = length($s);\n    my $i;\n \
    \   for ($i = 0; $i < $len; $i++) {\n        my $c = substr($s, $i, 1);\n    \
    \    if ($c eq $vowels) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return length($s);\n\
    }", "    $s =~ tr/aeiouAEIOU/aeiouAEIOU/;\n    return length($s);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
