name: HumanEval_1_separate_paren_groups
language: pl
prompt: "# Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n# separate those group into separate strings and\
  \ return the list of those.\n# Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n# Ignore any spaces in the\
  \ input string.\n# >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n# [\"()\"\
  , \"(())\", \"(()())\"]\nsub separate_paren_groups {\n    my($paren_string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&separate_paren_groups;\n\
  \        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[\"(()())\"\
  , \"((()))\", \"()\", \"((())()())\"])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"() (()) ((())) (((())))\"\
  ),[\"()\", \"(())\", \"((()))\", \"(((())))\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"\
  ),[\"(()(())((())))\"])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->(\"( ) (( )) (( )( ))\"),[\"()\", \"(())\"\
  , \"(()())\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
