{
  "name": "mbpp_412_remove_odd",
  "language": "js",
  "prompt": "//Write a jsthon function to remove odd numbers from a given array.\nfunction remove_odd(l){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var arr = [];\n    for(var i = 0; i<l.length; i++){\n        if(l[i]%2 == 0){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var arr = [];\n    for(var i = 0; i<l.length; i++){\n        if(l[i]%2 == 0){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var arr = [];\n    for(var i = 0; i<l.length; i++){\n        if(l[i]%2 == 0){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var list = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] % 2 == 0){\n            list.push(l[i]);\n        }\n    }\n    return list;\n}",
    "    var l1 = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var l1 = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] % 2 == 0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var l1=[];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var arr = [];\n    for(var i = 0; i<l.length; i++){\n        if(l[i]%2 == 0){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var l1 = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var l1 = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var l1=[];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    return l.filter(el => el%2==0)\n}",
    "    var l1=[];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var l1 = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] % 2 == 0){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var l1 = [];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var l1=[];\n    for(var i=0;i<l.length;i++){\n        if(l[i]%2==0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}",
    "    var arr = [];\n    for(var i = 0; i<l.length; i++){\n        if(l[i]%2 == 0){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var arr = [];\n    for(var i = 0; i<l.length; i++){\n        if(l[i]%2 == 0){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}",
    "    var arr = [];\n    for(var i = 0; i<l.length; i++){\n        if(l[i]%2 == 0){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}"
  ]
}