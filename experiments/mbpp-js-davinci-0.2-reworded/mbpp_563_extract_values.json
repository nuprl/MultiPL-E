{
  "name": "mbpp_563_extract_values",
  "language": "js",
  "prompt": "//Write a function to extract values between quotation marks from a string.\nfunction extract_values(text){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_values;\n  assert.deepEqual(candidate(\"\"Python\", \"PHP\", \"Java\"\"),[\"Python\", \"PHP\", \"Java\"]);\n  assert.deepEqual(candidate(\"\"python\",\"program\",\"language\"\"),[\"python\", \"program\", \"language\"]);\n  assert.deepEqual(candidate(\"\"red\",\"blue\",\"green\",\"yellow\"\"),[\"red\", \"blue\", \"green\", \"yellow\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == '\"'){\n            if(start == 0){\n                start = i;\n            }else{\n                end = i;\n                result.push(text.substring(start + 1, end));\n                start = 0;\n                end = 0;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == '\"'){\n            if(start == 0){\n                start = i;\n            }\n            else{\n                end = i;\n                result.push(text.substring(start + 1, end));\n                start = 0;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var regex = /\"(.*?)\"/g;\n    var match;\n    while(match = regex.exec(text)){\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === '\"'){\n            if(start === 0){\n                start = i + 1;\n            } else {\n                end = i;\n                result.push(text.substring(start, end));\n                start = 0;\n                end = 0;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var matches = text.match(/\"(.*?)\"/g);\n    return matches;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var result = [];\n    var re = /\"(.*?)\"/g;\n    var match;\n    while(match = re.exec(text)){\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    var regex = /\"(.*?)\"/g;\n    var result = [];\n    var match;\n    while(match = regex.exec(text)){\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var result = text.match(/\"(.*?)\"/g);\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] === '\"'){\n            if(start === 0){\n                start = i;\n            }else{\n                end = i;\n                result.push(text.substring(start + 1, end));\n                start = 0;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var result = [];\n    var start = 0;\n    var end = 0;\n    for(var i = 0; i < text.length; i++){\n        if(text[i] == '\"'){\n            if(start == 0){\n                start = i;\n            }\n            else{\n                end = i;\n                result.push(text.substring(start + 1, end));\n                start = 0;\n            }\n        }\n    }\n    return result;\n}\n",
    "    var regex = /\"(.*?)\"/g;\n    var result = text.match(regex);\n    return result;\n}"
  ]
}