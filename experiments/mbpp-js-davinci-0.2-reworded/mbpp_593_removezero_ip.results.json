{
  "name": "mbpp_593_removezero_ip",
  "language": "js",
  "prompt": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip_arr = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == 0){\n\t\t\tnew_ip_arr.push(ip_arr[i].substring(1));\n\t\t}\n\t\telse{\n\t\t\tnew_ip_arr.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substring(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_str = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tip_str += '0.';\n\t\t}else{\n\t\t\tip_str += ip_arr[i] + '.';\n\t\t}\n\t}\n\treturn ip_str.substring(0,ip_str.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmprvqfeizl.js:20:10)\n    at Object.<anonymous> (/tmp/tmprvqfeizl.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp17bsnig_.js:17:10)\n    at Object.<anonymous> (/tmp/tmp17bsnig_.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip = new_ip + ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmptd53k3sd.js:17:10)\n    at Object.<anonymous> (/tmp/tmptd53k3sd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            new_ip.push(parseInt(ip_arr[i]));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        var num = Number(ip_arr[i]);\n        if(num != 0){\n            new_ip += num;\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substr(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmphqnyz94h.js:17:10)\n    at Object.<anonymous> (/tmp/tmphqnyz94h.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_str = '';\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] == 0){\n            ip_str += '.';\n        }else{\n            ip_str += ip_arr[i];\n        }\n    }\n    return ip_str;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmponjxmi5b.js:19:10)\n    at Object.<anonymous> (/tmp/tmponjxmi5b.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpijrx20_4.js:18:10)\n    at Object.<anonymous> (/tmp/tmpijrx20_4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == 0){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpoz8uisry.js:17:10)\n    at Object.<anonymous> (/tmp/tmpoz8uisry.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0)==\"0\"){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i = 0; i < ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        new_ip.push(num);\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_str = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tip_str += '.';\n\t\t}else{\n\t\t\tip_str += ip_arr[i];\n\t\t}\n\t}\n\treturn ip_str;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpretusfw0.js:20:10)\n    at Object.<anonymous> (/tmp/tmpretusfw0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i = 0; i < ip_arr.length; i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t\tnew_ip += ip_arr[i];\n\t\tif(i != ip_arr.length - 1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substr(1);\n        }else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split('.');\n  var ip_arr_new = [];\n  for(var i=0; i<ip_arr.length; i++){\n    ip_arr_new.push(parseInt(ip_arr[i]));\n  }\n  return ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var new_arr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].length > 1 && arr[i][0] == \"0\"){\n            new_arr.push(arr[i].slice(1));\n        }\n        else{\n            new_arr.push(arr[i]);\n        }\n    }\n    return new_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp17bsnig_.js:17:10)\n    at Object.<anonymous> (/tmp/tmp17bsnig_.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tif(ip_array[i] != 0){\n\t\t\tnew_ip += ip_array[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpk6eny42o.js:18:10)\n    at Object.<anonymous> (/tmp/tmpk6eny42o.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i][0]=='0'){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_array.length; i++){\n\t\tif(ip_array[i] == '0'){\n\t\t\tnew_ip.push(ip_array[i].replace('0',''));\n\t\t}else{\n\t\t\tnew_ip.push(ip_array[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpzvd8222a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzvd8222a.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] != '0'){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmprg6ynqog.js:18:10)\n    at Object.<anonymous> (/tmp/tmprg6ynqog.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_new = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            ip_new.push(ip_arr[i]);\n        }\n    }\n    return ip_new.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpvnshxfdz.js:17:10)\n    at Object.<anonymous> (/tmp/tmpvnshxfdz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr=ip.split(\".\");\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            ip_arr[i]=ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0'){\n            new_ip += ip_arr[i].substring(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_array.length; i++){\n        if(ip_array[i].length > 1 && ip_array[i].charAt(0) == 0){\n            new_ip += ip_array[i].substring(1);\n        }\n        else{\n            new_ip += ip_array[i];\n        }\n        if(i != ip_array.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpb_wgc6mg.js:18:10)\n    at Object.<anonymous> (/tmp/tmpb_wgc6mg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split(\".\");\n  var new_ip = \"\";\n  for(var i=0;i<ip_arr.length;i++){\n    if(ip_arr[i].charAt(0) == \"0\"){\n      new_ip += ip_arr[i].substring(1,ip_arr[i].length);\n    }\n    else{\n      new_ip += ip_arr[i];\n    }\n    if(i != ip_arr.length-1){\n      new_ip += \".\";\n    }\n  }\n  return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpmndg9kq1.js:18:10)\n    at Object.<anonymous> (/tmp/tmpmndg9kq1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == '0'){\n\t\t\tnew_ip.push(ip_arr[i].substr(1));\n\t\t}else{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        ip_arr_new.push(parseInt(ip_arr[i]));\n    }\n    return ip_arr_new.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar arr = ip.split(\".\");\n\tvar new_arr = [];\n\tfor(var i=0; i<arr.length; i++){\n\t\tvar str = arr[i];\n\t\tvar new_str = \"\";\n\t\tfor(var j=0; j<str.length; j++){\n\t\t\tif(str[j] != \"0\"){\n\t\t\t\tnew_str += str[j];\n\t\t\t}\n\t\t}\n\t\tnew_arr.push(new_str);\n\t}\n\treturn new_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i][0]==\"0\"){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i = 0; i < ip_arr.length; i++){\n\t\tif(ip_arr[i] != \"0\"){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp3vbvegvy.js:18:10)\n    at Object.<anonymous> (/tmp/tmp3vbvegvy.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n\t\t\tip_arr_new.push(ip_arr[i].substring(1));\n\t\t}else{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpvxyib6uz.js:18:10)\n    at Object.<anonymous> (/tmp/tmpvxyib6uz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]==0){\n            arr[i] = \"\";\n        }\n    }\n    return arr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp7f8mkldj.js:16:10)\n    at Object.<anonymous> (/tmp/tmp7f8mkldj.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == 0){\n            ip_arr_new.push(ip_arr[i].substring(1));\n        }\n        else{\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if(i!=ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0'){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp1kjvmt9a.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1kjvmt9a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i][0]==\"0\"){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmppbbeo6f2.js:17:10)\n    at Object.<anonymous> (/tmp/tmppbbeo6f2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==\"0\"){\n\t\t\tnew_ip = new_ip + \"0.\";\n\t\t}else{\n\t\t\tnew_ip = new_ip + ip_arr[i] + \".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpdh0wpqii.js:20:10)\n    at Object.<anonymous> (/tmp/tmpdh0wpqii.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpmndg9kq1.js:18:10)\n    at Object.<anonymous> (/tmp/tmpmndg9kq1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i].charAt(0)=='0'){\n\t\t\tip_arr_new.push(ip_arr[i].substring(1));\n\t\t}else{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substring(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i][0]==0){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t\tnew_ip += ip_arr[i];\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tip_arr_new.push(\"0\");\n\t\t}else{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp0vpsc49k.js:20:10)\n    at Object.<anonymous> (/tmp/tmp0vpsc49k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar result = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] == '0'){\n\t\t\tresult.push(ip_arr[i]);\n\t\t}\n\t\telse{\n\t\t\tresult.push(parseInt(ip_arr[i]));\n\t\t}\n\t}\n\treturn result.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i][0] == '0'){\n            new_ip.push(ip_arr[i].substring(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split(\".\");\n  var new_ip = \"\";\n  for(var i=0;i<ip_arr.length;i++){\n    if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n      new_ip += ip_arr[i].substring(1,ip_arr[i].length);\n    }else{\n      new_ip += ip_arr[i];\n    }\n    if(i!=ip_arr.length-1){\n      new_ip += \".\";\n    }\n  }\n  return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    let ip_arr = ip.split('.');\n    let new_ip = [];\n    for(let i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != '0'){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpxzetf4qa.js:17:10)\n    at Object.<anonymous> (/tmp/tmpxzetf4qa.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substring(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmppbbeo6f2.js:17:10)\n    at Object.<anonymous> (/tmp/tmppbbeo6f2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tvar temp = parseInt(ip_arr[i]);\n\t\tnew_ip += temp;\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        if(num!=0){\n            new_ip.push(num);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substring(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip_arr = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip_arr.push(ip_arr[i].substring(1));\n\t\t}else{\n\t\t\tnew_ip_arr.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i][0]==\"0\"){\n            ip_arr_new.push(ip_arr[i].substr(1));\n        }\n        else{\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substring(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substring(1, ip_arr[i].length);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]==0){\n            ip_arr[i] = \"\";\n        }\n    }\n    return ip_arr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpw0ytl9tm.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw0ytl9tm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        var temp = ip_arr[i];\n        while(temp[0]==0){\n            temp = temp.substr(1);\n        }\n        ip_arr_new.push(temp);\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i][0]=='0'){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1,ip_arr[i].length);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i][0] == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1) + \".\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i] + \".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip.push(ip_arr[i].substr(1));\n\t\t}\n\t\telse{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != 0){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp0b8o264h.js:18:10)\n    at Object.<anonymous> (/tmp/tmp0b8o264h.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmppbbeo6f2.js:17:10)\n    at Object.<anonymous> (/tmp/tmppbbeo6f2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp1kjvmt9a.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1kjvmt9a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tnew_ip.push(parseInt(ip_arr[i]));\n\t}\n\treturn new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split(\".\");\n  var new_ip = \"\";\n  for(var i=0;i<ip_arr.length;i++){\n    if(ip_arr[i] == \"0\"){\n      new_ip += \"0.\";\n    }\n    else{\n      new_ip += ip_arr[i]+\".\";\n    }\n  }\n  return new_ip.substring(0,new_ip.length-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpjezwvnyb.js:20:10)\n    at Object.<anonymous> (/tmp/tmpjezwvnyb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tip_arr[i] = '';\n\t\t}\n\t}\n\treturn ip_arr.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp0t0hxr5c.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0t0hxr5c.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == '0'){\n\t\t\tip_arr_new.push(0);\n\t\t}else{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpx28j_d4v.js:20:10)\n    at Object.<anonymous> (/tmp/tmpx28j_d4v.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != \"0\"){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpe845rsl6.js:18:10)\n    at Object.<anonymous> (/tmp/tmpe845rsl6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] == '0'){\n\t\t\tip_arr_new.push('0');\n\t\t}else{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpgyaii7sf.js:20:10)\n    at Object.<anonymous> (/tmp/tmpgyaii7sf.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] == \"0\"){\n            new_ip = new_ip + \"0.\";\n        }\n        else{\n            new_ip = new_ip + ip_arr[i] + \".\";\n        }\n    }\n    return new_ip.substring(0,new_ip.length-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpb4o9y113.js:20:10)\n    at Object.<anonymous> (/tmp/tmpb4o9y113.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar ip_new = \"\";\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tif(ip_array[i].length>1 && ip_array[i].charAt(0)==\"0\"){\n\t\t\tip_new = ip_new + ip_array[i].substring(1,ip_array[i].length) + \".\";\n\t\t}else{\n\t\t\tip_new = ip_new + ip_array[i] + \".\";\n\t\t}\n\t}\n\treturn ip_new.substring(0,ip_new.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar result = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tresult.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn result.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpxjlh1vyc.js:18:10)\n    at Object.<anonymous> (/tmp/tmpxjlh1vyc.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_new = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tip_new = ip_new + ip_arr[i];\n\t\t}\n\t}\n\treturn ip_new;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp8k5e1b02.js:18:10)\n    at Object.<anonymous> (/tmp/tmp8k5e1b02.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            new_ip.push(ip_arr[i].substring(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substr(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i]!=0){\n            new_ip = new_ip + ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp3q42xjjf.js:17:10)\n    at Object.<anonymous> (/tmp/tmp3q42xjjf.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] != 0){\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpt9t8h2bc.js:21:10)\n    at Object.<anonymous> (/tmp/tmpt9t8h2bc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpb_wgc6mg.js:18:10)\n    at Object.<anonymous> (/tmp/tmpb_wgc6mg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp1kjvmt9a.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1kjvmt9a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar result = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!==\"0\"){\n\t\t\tresult.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn result.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp7a4fl0cs.js:18:10)\n    at Object.<anonymous> (/tmp/tmp7a4fl0cs.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] != 0){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpsleoh72t.js:18:10)\n    at Object.<anonymous> (/tmp/tmpsleoh72t.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1){\n            ip_arr_new.push(ip_arr[i]);\n        }\n        else{\n            ip_arr_new.push(ip_arr[i].replace(/^0+/, ''));\n        }\n    }\n    return ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpajjqw3gf.js:21:10)\n    at Object.<anonymous> (/tmp/tmpajjqw3gf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar ip_array_new = [];\n\tfor(var i=0; i<ip_array.length; i++){\n\t\tif(ip_array[i] == '0'){\n\t\t\tip_array_new.push('0');\n\t\t}\n\t\telse{\n\t\t\tip_array_new.push(ip_array[i]);\n\t\t}\n\t}\n\treturn ip_array_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp8lpv2c22.js:21:10)\n    at Object.<anonymous> (/tmp/tmp8lpv2c22.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1){\n            new_ip.push(ip_arr[i]);\n        }\n        else{\n            new_ip.push(ip_arr[i].replace(/^0+/, ''));\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpgg22i28s.js:20:10)\n    at Object.<anonymous> (/tmp/tmpgg22i28s.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] != \"0\"){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmph47orne_.js:18:10)\n    at Object.<anonymous> (/tmp/tmph47orne_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substr(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_str = '';\n\tfor(var i = 0; i < ip_arr.length; i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0'){\n\t\t\tip_str += ip_arr[i].substring(1);\n\t\t}else{\n\t\t\tip_str += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length - 1){\n\t\t\tip_str += '.';\n\t\t}\n\t}\n\treturn ip_str;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp6ku877yp.js:18:10)\n    at Object.<anonymous> (/tmp/tmp6ku877yp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var newarr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i].charAt(0)==0){\n            newarr.push(arr[i].substring(1));\n        }\n        else{\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_new = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] == \"0\"){\n            ip_arr[i] = \"\";\n        }\n        ip_new = ip_new + ip_arr[i] + \".\";\n    }\n    return ip_new.slice(0,-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpddj3qlyk.js:18:10)\n    at Object.<anonymous> (/tmp/tmpddj3qlyk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0'){\n\t\t\tnew_ip += ip_arr[i].substring(1, ip_arr[i].length) + '.';\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i] + '.';\n\t\t}\n\t}\n\treturn new_ip.substring(0, new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmphqawgpci.js:18:10)\n    at Object.<anonymous> (/tmp/tmphqawgpci.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp5msyhk05.js:17:10)\n    at Object.<anonymous> (/tmp/tmp5msyhk05.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_array.length;i++){\n        var ip_array_int = parseInt(ip_array[i]);\n        if(ip_array_int<10){\n            new_ip = new_ip + \"0\" + ip_array_int;\n        }\n        else{\n            new_ip = new_ip + ip_array_int;\n        }\n        if(i<ip_array.length-1){\n            new_ip = new_ip + \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.94.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp4wuqjb_j.js:25:10)\n    at Object.<anonymous> (/tmp/tmp4wuqjb_j.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.94.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0)==0){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            var num = parseInt(ip_arr[i]);\n            new_ip.push(num);\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1,ip_arr[i].length) + \".\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i] + \".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t\telse{\n\t\t\tnew_ip.push(ip_arr[i].replace(/^0+/, ''));\n\t\t}\n\t}\n\treturn new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpczsatm1r.js:21:10)\n    at Object.<anonymous> (/tmp/tmpczsatm1r.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == \"00\"){\n\t\t\tnew_ip += \"0.\";\n\t\t}\n\t\telse if(ip_arr[i][0] == \"0\"){\n\t\t\tnew_ip += ip_arr[i][1]+\".\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i]+\".\";\n\t\t}\n\t}\n\treturn new_ip.slice(0,-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.8.9.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpqz91lm8b.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqz91lm8b.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.8.9.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1,ip_arr[i].length);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0; i<ip_arr.length; i++){\n        var ip_arr_new_str = ip_arr[i].replace(/^0+/, '');\n        ip_arr_new.push(ip_arr_new_str);\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] != \"0\"){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpgnxyi90i.js:17:10)\n    at Object.<anonymous> (/tmp/tmpgnxyi90i.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0)==0){\n            ip_arr[i] = ip_arr[i].substr(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        if(num != 0){\n            new_ip += num;\n        }\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip = new_ip + ip_arr[i].substring(1,ip_arr[i].length) + \".\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip = new_ip + ip_arr[i] + \".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substring(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] != 0){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpzq8cvfop.js:18:10)\n    at Object.<anonymous> (/tmp/tmpzq8cvfop.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != \"0\"){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpbha1xt7b.js:17:10)\n    at Object.<anonymous> (/tmp/tmpbha1xt7b.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==\"0\"){\n\t\t\tip_arr[i]=\"\";\n\t\t}\n\t\tnew_ip += ip_arr[i]+\".\";\n\t}\n\treturn new_ip.slice(0,-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpysa1fbat.js:19:10)\n    at Object.<anonymous> (/tmp/tmpysa1fbat.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tnew_ip = new_ip + \".\";\n\t\t}else{\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp9g0wyti1.js:20:10)\n    at Object.<anonymous> (/tmp/tmp9g0wyti1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp5djuy5pz.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5djuy5pz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip.push(ip_arr[i].slice(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = '';\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        if(num != 0){\n            new_ip += num;\n        }\n        if(i != ip_arr.length-1){\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tnew_ip += \"0\";\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpj07a6jde.js:23:10)\n    at Object.<anonymous> (/tmp/tmpj07a6jde.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i].charAt(0)=='0'){\n\t\t\tip_arr_new.push(ip_arr[i].substring(1));\n\t\t}else{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpe8tgs2m7.js:18:10)\n    at Object.<anonymous> (/tmp/tmpe8tgs2m7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip = new_ip + ip_arr[i];\n        if(i!=ip_arr.length-1){\n            new_ip = new_ip + \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!==\"0\"){\n            new_ip = new_ip + ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp1bw50ppr.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1bw50ppr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_array.length; i++){\n        if(ip_array[i].charAt(0) == '0'){\n            new_ip.push(ip_array[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_array[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0; i<ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        ip_arr_new.push(num);\n    }\n    return ip_arr_new.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n\t\t\tnew_ip.push(ip_arr[i].substr(1));\n\t\t}else{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i] != \"0\"){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpm7_ze6ux.js:18:10)\n    at Object.<anonymous> (/tmp/tmpm7_ze6ux.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_array.length; i++){\n        if(ip_array[i].length > 1 && ip_array[i].charAt(0) == \"0\"){\n            new_ip += ip_array[i].substr(1);\n        }\n        else{\n            new_ip += ip_array[i];\n        }\n        if(i != ip_array.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split('.');\n    var new_arr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!='0'){\n            new_arr.push(arr[i]);\n        }\n    }\n    return new_arr.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpacmfqube.js:17:10)\n    at Object.<anonymous> (/tmp/tmpacmfqube.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var arr = ip.split('.');\n  var result = [];\n  for(var i=0;i<arr.length;i++){\n    if(arr[i]!=='0'){\n      result.push(arr[i]);\n    }\n  }\n  return result.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp6sujkhq3.js:17:10)\n    at Object.<anonymous> (/tmp/tmp6sujkhq3.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split('.');\n  var new_ip = [];\n  for(var i=0;i<ip_arr.length;i++){\n    if(ip_arr[i].charAt(0) == '0'){\n      new_ip.push(ip_arr[i].slice(1));\n    }else{\n      new_ip.push(ip_arr[i]);\n    }\n  }\n  return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpb_wgc6mg.js:18:10)\n    at Object.<anonymous> (/tmp/tmpb_wgc6mg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip += ip_arr[i].substr(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        if(num != 0){\n            new_ip.push(num);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split(\".\");\n  var new_ip = \"\";\n  for(var i=0;i<ip_arr.length;i++){\n    if(ip_arr[i] != \"0\"){\n      new_ip = new_ip + ip_arr[i];\n    }\n  }\n  return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmposj7rt01.js:17:10)\n    at Object.<anonymous> (/tmp/tmposj7rt01.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_str = \"\";\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tip_str += ip_arr[i].substring(1) + \".\";\n\t\t}\n\t\telse{\n\t\t\tip_str += ip_arr[i] + \".\";\n\t\t}\n\t}\n\treturn ip_str.substring(0, ip_str.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i = 0; i < ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length - 1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tip_arr_new[i] = parseInt(ip_arr[i]);\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        var temp = ip_arr[i];\n        if(temp[0] == 0){\n            temp = temp.replace(/^0+/, '');\n        }\n        new_ip.push(temp);\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            new_ip.push(ip_arr[i].substr(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var result = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            result += ip_arr[i];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp_qbz___a.js:17:10)\n    at Object.<anonymous> (/tmp/tmp_qbz___a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmppbbeo6f2.js:17:10)\n    at Object.<anonymous> (/tmp/tmppbbeo6f2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var newarr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=0){\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp2jzj_bqm.js:17:10)\n    at Object.<anonymous> (/tmp/tmp2jzj_bqm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        if(num != 0){\n            new_ip.push(num);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] != \"0\"){\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpmdvgn8o4.js:18:10)\n    at Object.<anonymous> (/tmp/tmpmdvgn8o4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] != '0'){\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpjj2dx08k.js:18:10)\n    at Object.<anonymous> (/tmp/tmpjj2dx08k.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == \"0\"){\n\t\t\tnew_ip += \"0.\";\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i]+\".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpci33vc6t.js:20:10)\n    at Object.<anonymous> (/tmp/tmpci33vc6t.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i][0] == 0){\n            new_ip += ip_arr[i].substring(1);\n        }else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t\telse{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp0zakhsti.js:22:10)\n    at Object.<anonymous> (/tmp/tmp0zakhsti.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpj_g7yb5v.js:18:10)\n    at Object.<anonymous> (/tmp/tmpj_g7yb5v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]==0){\n            ip_arr_new.push(ip_arr[i]);\n        }\n        else{\n            ip_arr_new.push(ip_arr[i]);\n            break;\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmphes78qa3.js:22:10)\n    at Object.<anonymous> (/tmp/tmphes78qa3.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_new = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tip_new = ip_new + \".\";\n\t\t}\n\t\telse{\n\t\t\tip_new = ip_new + ip_arr[i];\n\t\t}\n\t}\n\treturn ip_new;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp2pk17rpc.js:21:10)\n    at Object.<anonymous> (/tmp/tmp2pk17rpc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].slice(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        new_ip.push(num);\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp5qrugyg6.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5qrugyg6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_str = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tip_str += parseInt(ip_arr[i],10);\n\t\tif(i!=ip_arr.length-1){\n\t\t\tip_str += \".\";\n\t\t}\n\t}\n\treturn ip_str;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != \"0\"){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpy41_mofe.js:18:10)\n    at Object.<anonymous> (/tmp/tmpy41_mofe.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        if(num != 0){\n            new_ip.push(num);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tip_arr[i]=\"\";\n\t\t}\n\t\tnew_ip += ip_arr[i]+\".\";\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpsvwsrazq.js:19:10)\n    at Object.<anonymous> (/tmp/tmpsvwsrazq.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var result = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            result.push(ip_arr[i]);\n        }\n    }\n    return result.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpbrz7orxk.js:17:10)\n    at Object.<anonymous> (/tmp/tmpbrz7orxk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split('.');\n    var newarr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i].charAt(0) == '0'){\n            arr[i] = arr[i].substr(1);\n        }\n        newarr.push(arr[i]);\n    }\n    return newarr.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substr(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i = 0; i < ip_array.length; i++){\n\t\tif(ip_array[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_array[i].substring(1) + \".\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_array[i] + \".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0, new_ip.length - 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substr(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpyxt8oif7.js:18:10)\n    at Object.<anonymous> (/tmp/tmpyxt8oif7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substr(1) + \".\";\n        }else{\n            new_ip += ip_arr[i] + \".\";\n        }\n    }\n    return new_ip.substr(0, new_ip.length - 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split('.');\n    var ip_array_new = [];\n    for(var i=0;i<ip_array.length;i++){\n        if(ip_array[i]!=0){\n            ip_array_new.push(ip_array[i]);\n        }\n    }\n    return ip_array_new.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpbu84hsox.js:17:10)\n    at Object.<anonymous> (/tmp/tmpbu84hsox.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp5msyhk05.js:17:10)\n    at Object.<anonymous> (/tmp/tmp5msyhk05.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i = 0; i < ip_array.length; i++){\n\t\tif(ip_array[i] != 0){\n\t\t\tnew_ip.push(ip_array[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpp4c2e6kg.js:18:10)\n    at Object.<anonymous> (/tmp/tmpp4c2e6kg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0; i<ip_array.length; i++){\n\t\tif(ip_array[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_array[i].substring(1,ip_array[i].length);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_array[i];\n\t\t}\n\t\tif(i != ip_array.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == 0){\n\t\t\tnew_ip.push(ip_arr[i].substring(1));\n\t\t}\n\t\telse{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split('.');\n    var newarr = [];\n    for(var i=0;i<arr.length;i++){\n        newarr.push(parseInt(arr[i]));\n    }\n    return newarr.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tip_arr_new.push(parseInt(ip_arr[i]));\n\t}\n\treturn ip_arr_new.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_array.length; i++){\n        if(ip_array[i].charAt(0) == \"0\"){\n            new_ip += ip_array[i].substring(1);\n        }\n        else{\n            new_ip += ip_array[i];\n        }\n        if(i != ip_array.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t\tnew_ip += ip_arr[i];\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0)==0){\n\t\t\tnew_ip.push(ip_arr[i].substr(1));\n\t\t}else{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}