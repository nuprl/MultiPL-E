{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "js",
  "prompt": "//Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunction max_sub_array_sum_repeated(a, n, k){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sub_array_sum_repeated;\n  assert.deepEqual(candidate([10, 20, -30, -1], 4, 3),30);\n  assert.deepEqual(candidate([-1, 10, 20], 3, 2),59);\n  assert.deepEqual(candidate([-1, -2, -3], 3, 3),-1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let max_so_far = 0;\n    let max_ending_here = 0;\n    for(let i=0; i<n*k; i++){\n        max_ending_here = max_ending_here + a[i%n];\n        if(max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n        }\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n    }\n    return max_so_far;\n}\n",
    "    //Kadane's algorithm to find maximum subarray sum\n    var max_so_far = 0, max_ending_here = 0;\n    for (var i = 0; i < n; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    //if all elements are negative\n    if (max_so_far == 0)\n        return max_so_far;\n    //Case 2: Now find the maximum sum that includes corner elements.\n    var max_wrap = 0, i = 0;\n    while (i < n){\n        max_wrap += a[i];\n        i++;\n    }\n    //Case 3: The maximum is a combination of Case 1 and Case 2\n    var max_kadane = max_so_far;\n    for (var i = 1; i < k; i++)\n        max_kadane = Math.max(max_kadane, max_wrap + max_so_far);\n    return max_kadane;\n}",
    "    let max_sum = 0;\n    let curr_sum = 0;\n    for(let i=0; i<n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    let max_wrap = 0;\n    for(let i=0; i<n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(let i=0; i<n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    if(k == 2){\n        return Math.max(max_sum, max_wrap);\n    }\n    return Math.max(max_sum, max_wrap + (k-2)*max_wrap);\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < n * k; i++) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    var max_sum = 0,\n        max_ending_here = 0,\n        i,\n        j;\n    for(i = 0; i < n; i++){\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here){\n            max_sum = max_ending_here;\n        }\n    }\n    var max_sum_whole_array = max_sum;\n    max_sum = 0;\n    max_ending_here = 0;\n    for(i = 0; i < n; i++){\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here){\n            max_sum = max_ending_here;\n        }\n    }\n    var max_wrap_sum = 0;\n    for(i = 0; i < n; i++){\n        max_wrap_sum += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap_sum = max_wrap_sum + max_sub_array_sum(a, n);\n    return Math.max(max_sum_whole_array, max_wrap_sum);\n}\n",
    "    let max_sum = 0;\n    let curr_sum = 0;\n    for(let i = 0; i < n; i++){\n        curr_sum = Math.max(a[i], curr_sum + a[i]);\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    let max_wrap = 0;\n    for(let i = 0; i < n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    curr_sum = 0;\n    for(let i = 0; i < n; i++){\n        curr_sum = Math.max(a[i], curr_sum + a[i]);\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    max_wrap = max_wrap + curr_sum;\n    return Math.max(max_sum, max_wrap * k);\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    let max_wrap = 0;\n    for (let i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum(a, n);\n    return Math.max(max_wrap, max_so_far);\n}\n",
    "    var max_sum = 0;\n    var max_sum_so_far = 0;\n    var max_sum_ending_here = 0;\n    var max_sum_ending_here_prev = 0;\n    var max_sum_ending_here_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev",
    "    var max_sum = 0;\n    var curr_sum = 0;\n    for(var i=0; i<n; i++){\n        curr_sum += a[i];\n    }\n    max_sum = curr_sum;\n    for(var i=0; i<n; i++){\n        curr_sum += (k-1)*a[i];\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    for(let i = 0; i < n; i++){\n        max_ending_here += a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n        if(max_sum < max_ending_here){\n            max_sum = max_ending_here;\n        }\n    }\n    let max_wrap = 0;\n    for(let i = 0; i < n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    let max_ending_here_wrap = 0;\n    for(let i = 0; i < n; i++){\n        max_ending_here_wrap += a[i];\n        if(max_ending_here_wrap < 0){\n            max_ending_here_wrap = 0;\n        }\n        if(max_wrap < max_ending_here_wrap){\n            max_wrap = max_ending_here_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1){\n        return max_sum;\n    }\n    if(max_wrap > max_sum){\n        return max_wrap;\n    }\n    else{\n        return max_sum;\n    }\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n    for(let i = 0; i < n*k; i++){\n        max_ending_here += a[i%n];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n            s = i+1;\n        }\n        if(max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n    }\n    for(let i = start; i <= end; i++){\n        max_sum += a[i%n];\n    }\n    return max_sum;\n}\n",
    "    var max_sum = 0;\n    var curr_sum = 0;\n    var max_sum_so_far = 0;\n    var i = 0;\n    var j = 0;\n    var max_sum_ending_here = 0;\n    var max_sum_ending_here_prev = 0;\n    var max_sum_ending_here_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n    var max_sum_ending_here_prev_prev_prev_prev",
    "    var max_sum = 0;\n    var curr_sum = 0;\n    var i = 0;\n    var j = 0;\n    var max_i = 0;\n    var max_j = 0;\n    var max_k = 0;\n    var max_l = 0;\n    var max_m = 0;\n    var max_n = 0;\n    var max_o = 0;\n    var max_p = 0;\n    var max_q = 0;\n    var max_r = 0;\n    var max_s = 0;\n    var max_t = 0;\n    var max_u = 0;\n    var max_v = 0;\n    var max_w = 0;\n    var max_x = 0;\n    var max_y = 0;\n    var max_z = 0;\n    var max_aa = 0;\n    var max_ab = 0;\n    var max_ac = 0;\n    var max_ad = 0;\n    var max_ae = 0;\n    var max_af = 0;\n    var max_ag = 0;\n    var max_ah = 0;\n    var max_ai = 0;\n    var max_aj = 0;\n    var max_ak = 0;\n    var max_al = 0;\n    var max_am = 0;\n    var max_an = 0;\n    var max_ao = 0;\n    var max_ap = 0;\n    var max_aq = 0;\n    var max_ar = 0;\n    var max_as = 0;\n    var max_at = 0;\n    var max_au = 0;\n    var max_av = 0;\n    var max_aw = 0;\n    var max_ax = 0;\n    var max_ay = 0;\n    var max_az = 0;\n    var max_ba = 0;\n    var max_bb = 0;\n    var max_bc = 0;\n    var max_bd = 0;\n    var max_be = 0;\n    var max_bf = 0;\n    var max_bg = 0;\n    var max_bh = 0;\n    var max_bi = 0;\n   ",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let max_element = a[0];\n    let min_element = a[0];\n    let max_index = 0;\n    let min_index = 0;\n    let flag = 0;\n    for(let i = 0; i < n; i++){\n        if(a[i] > max_element){\n            max_element = a[i];\n            max_index = i;\n        }\n        if(a[i] < min_element){\n            min_element = a[i];\n            min_index = i;\n        }\n    }\n    for(let i = 0; i < n; i++){\n        max_ending_here += a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n        }\n    }\n    if(max_element < 0){\n        return max_element * k;\n    }\n    if(max_index == min_index){\n        return max_so_far * k;\n    }\n    max_sum = max_so_far;\n    for(let i = 0; i < n; i++){\n        max_sum += a[i];\n    }\n    return max_sum * (k - 2) + max_so_far;\n}\n",
    "    let max_sum = 0;\n    let curr_sum = 0;\n    for(let i = 0; i < n; i++){\n        curr_sum += a[i];\n    }\n    max_sum = curr_sum;\n    for(let i = 0; i < n; i++){\n        curr_sum += (a[i] * (k - 1));\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let max_element = -Infinity;\n    let i = 0;\n    let j = 0;\n    let sum = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n    for(i = 0; i < n; i++){\n        sum += a[i];\n        max_element = Math.max(max_element, a[i]);\n    }\n    if(max_element < 0){\n        return max_element;\n    }\n    max_sum = sum;\n    for(i = 2; i <= k; i++){\n        for(j = 0; j < n; j++){\n            max_ending_here += a[j];\n            if(max_so_far < max_ending_here){\n                max_so_far = max_ending_here;\n                start = s;\n                end = j;\n            }\n            if(max_ending_here < 0){\n                max_ending_here = 0;\n                s = j + 1;\n            }\n        }\n        max_sum += max_so_far;\n        max_ending_here = 0;\n        max_so_far = 0;\n        s = 0;\n    }\n    return max_sum;\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n    for (let i = 0; i < n; i++){\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    let max_wrap = 0;\n    for (let i = 0; i < n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    max_wrap = max_wrap + max_sub_array_sum(a, n);\n    if (max_wrap > max_so_far)\n        return max_wrap;\n    return max_so_far;\n}\n",
    "    let max_sum = 0;\n    let curr_sum = 0;\n    for(let i = 0; i < n; i++){\n        curr_sum += a[i];\n        if(curr_sum < 0){\n            curr_sum = 0;\n        }\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    let max_wrap = 0;\n    for(let i = 0; i < n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    let curr_wrap = 0;\n    for(let i = 0; i < n; i++){\n        curr_wrap += a[i];\n        if(curr_wrap < 0){\n            curr_wrap = 0;\n        }\n        max_wrap = Math.max(max_wrap, curr_wrap);\n    }\n    max_wrap = max_wrap + max_wrap;\n    if(k == 1){\n        return max_sum;\n    }\n    return Math.max(max_sum, max_wrap);\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let i = 0;\n    let j = 0;\n    let start = 0;\n    let end = 0;\n    let flag = 0;\n    for(i = 0; i < n * k; i++){\n        max_ending_here += a[i % n];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n            j = i + 1;\n        }\n        if(max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n            start = j;\n            end = i;\n            flag = 1;\n        }\n    }\n    if(flag == 0){\n        max_so_far = 0;\n        for(i = 0; i < n; i++){\n            max_so_far += a[i];\n        }\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0;\n    let max_ending_here = 0;\n    let max_element = -Infinity;\n    for(let i = 0; i < n; i++){\n        max_element = Math.max(max_element, a[i]);\n        max_ending_here = max_ending_here + a[i];\n        if(max_ending_here < 0){\n            max_ending_here = 0;\n        }\n        if(max_so_far < max_ending_here){\n            max_so_far = max_ending_here;\n        }\n    }\n    if(max_so_far === 0){\n        return max_element;\n    }\n    let max_wrap = 0;\n    for(let i = 0; i < n; i++){\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n    let max_wrap_ending_here = 0;\n    for(let i = 0; i < n; i++){\n        max_wrap_ending_here += a[i];\n        if(max_wrap_ending_here < 0){\n            max_wrap_ending_here = 0;\n        }\n        if(max_wrap < max_wrap_ending_here){\n            max_wrap = max_wrap_ending_here;\n        }\n    }\n    return Math.max(max_so_far, max_wrap + (k - 2) * max_wrap);\n}\n"
  ]
}