{
  "name": "mbpp_736_left_insertion",
  "language": "js",
  "prompt": "//Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php\nfunction left_insertion(a, x){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while(left < right){\n        mid = Math.floor((left + right) / 2);\n        if(x > a[mid]){\n            left = mid + 1;\n        }\n        else{\n            right = mid;\n        }\n    }\n    return left;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    let low = 0;\n    let high = a.length - 1;\n    let mid;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(x > a[mid]){\n            low = mid + 1;\n        }\n        else if(x < a[mid]){\n            high = mid - 1;\n        }\n        else{\n            return mid;\n        }\n    }\n    return low;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    let low = 0;\n    let high = a.length - 1;\n    let mid = 0;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(x > a[mid]){\n            low = mid + 1;\n        }else{\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n",
    "\tvar i = 0;\n\twhile(i < a.length){\n\t\tif(a[i] > x){\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\n",
    "    var l = 0, r = a.length - 1;\n    while (l <= r){\n        var m = Math.floor((l + r) / 2);\n        if (a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m - 1;\n        }\n    }\n    return l;\n}\n",
    "    let l = 0;\n    let r = a.length - 1;\n    let m = 0;\n    while(l <= r){\n        m = Math.floor((l + r)/2);\n        if(a[m] < x){\n            l = m + 1;\n        }\n        else{\n            r = m - 1;\n        }\n    }\n    return l;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var l = 0, r = a.length - 1;\n    while(l < r){\n        var m = Math.floor((l + r) / 2);\n        if(a[m] < x){\n            l = m + 1;\n        }else{\n            r = m;\n        }\n    }\n    return l;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    let i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    for(var i = 0; i < a.length; i++){\n        if(a[i] > x){\n            return i;\n        }\n    }\n    return a.length;\n}\n",
    "    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while(left <= right){\n        mid = Math.floor((left + right) / 2);\n        if(a[mid] < x){\n            left = mid + 1;\n        }\n        else{\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}",
    "    var low = 0;\n    var high = a.length - 1;\n    var mid = 0;\n    while(low <= high){\n        mid = Math.floor((low + high) / 2);\n        if(a[mid] < x){\n            low = mid + 1;\n        }\n        else{\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n",
    "    var left = 0;\n    var right = a.length - 1;\n    while (left <= right){\n        var mid = Math.floor((left + right) / 2);\n        if (a[mid] < x){\n            left = mid + 1;\n        }\n        else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n",
    "    var i = 0;\n    while(a[i] < x){\n        i++;\n    }\n    return i;\n}\n",
    "    var i = 0;\n    while(i < a.length && a[i] < x){\n        i++;\n    }\n    return i;\n}\n"
  ]
}