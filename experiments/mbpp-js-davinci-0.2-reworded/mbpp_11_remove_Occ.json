{
  "name": "mbpp_11_remove_Occ",
  "language": "js",
  "prompt": "//Write a jsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s, ch){\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "reworded",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0,i) + s.substring(i+1,j) + s.substring(j+1,s.length);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    var res = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return res;\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    var res = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return res;\n}",
    "    var first = s.indexOf(ch);\n    var last = s.lastIndexOf(ch);\n    var res = s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1);\n    return res;\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}",
    "    var first = s.indexOf(ch);\n    var last = s.lastIndexOf(ch);\n    var res = s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1);\n    return res;\n}",
    "    return s.replace(ch, \"\")\n}",
    "    var first = s.indexOf(ch);\n    var last = s.lastIndexOf(ch);\n    return s.slice(0, first) + s.slice(first + 1, last) + s.slice(last + 1);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length);\n}",
    "    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    if(i == -1 || j == -1){\n        return s;\n    }\n    return s.substring(0, i) + s.substring(i+1, j) + s.substring(j+1);\n}\n"
  ]
}